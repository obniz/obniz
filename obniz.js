var Obniz =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/src/obniz/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/package.js":
/***/ (function(module, exports) {

module.exports = {
  "name": "obniz",
  "version": "3.21.1",
  "description": "obniz sdk for javascript",
  "main": "./dist/src/obniz/index.js",
  "types": "./dist/src/obniz/index.d.ts",
  "files": [
    "dist",
    "index.js",
    "obniz.js"
  ],
  "engines": {
    "node": ">=10.23.0"
  },
  "engineStrict": true,
  "scripts": {
    "test": "npm run tstest && npm run lint-test &&  nyc --reporter=text --reporter=html mocha --exit $NODE_DEBUG_OPTION  ./test/functiontest/index.js -b 1",
    "testOnlyNodejs": "NO_BROWSER_TEST=1 npm test",
    "buildAndtest": "npm run build && npm test",
    "tstest": "mocha --require espower-typescript/guess test/functiontest/**/*.ts",
    "tsExampleTest": "tsc --project ./test/functiontest",
    "realtest": "mocha $NODE_DEBUG_OPTION ./test/realtest/index.js",
    "realtest-debug": "DEBUG=1 mocha $NODE_DEBUG_OPTION -b ./test/realtest/index.js",
    "local": "gulp --gulpfile devtools/_tools/server.js --cwd .",
    "watch": "tsc -w & webpack --watch --config ./devtools/webpack.config.js  ",
    "build": "npm run clean && npm run lint && gulp --gulpfile devtools/_tools/server.js --cwd . build ",
    "doc": "typedoc --includes ./src/ --exclude '**/*.json' --theme ./devtools/typedocTheme --stripInternal --readme none --out docs/obnizjs --excludePrivate --excludeProtected  --media ./docs/images",
    "build-ts": "npm run clean && npm run lint-ts && gulp --gulpfile devtools/_tools/server.js --cwd . build",
    "version": "npm run build && npm run doc && git add docs && git add obniz.js",
    "lint": "eslint --fix . --rulesdir devtools/eslint/rule --quiet",
    "lint-js": "eslint --fix './**/*.js' --rulesdir devtools/eslint/rule --quiet",
    "lint-ts": "eslint --fix 'src/**/*.ts' 'test/**/*.ts' --rulesdir devtools/eslint/rule  --quiet",
    "lint-test": "mocha $NODE_DEBUG_OPTION ./devtools/eslint/test/**/*.js",
    "precommit": "lint-staged && npm run build && git add dist && git add obniz.js",
    "prepublishOnly": "npm run build",
    "clean": "rimraf ./dist ./obniz.js ./obniz.d.ts"
  },
  "lint-staged": {
    "src/**/*.ts": [
      "eslint --fix  --rulesdir devtools/eslint/rule --quiet",
      "git add"
    ],
    "test/**/*.ts": [
      "eslint --fix  --rulesdir devtools/eslint/rule --quiet",
      "git add"
    ]
  },
  "keywords": [
    "obniz"
  ],
  "repository": "obniz/obniz",
  "author": "obniz Inc. <supportteam@obniz.com>",
  "homepage": "https://obniz.com/",
  "license": "SEE LICENSE IN LICENSE.txt",
  "devDependencies": {
    "@types/chai": "^4.2.7",
    "@types/chai-like": "^1.1.0",
    "@types/dialog-polyfill": "^0.5.0",
    "@types/eventemitter3": "^1.2.0",
    "@types/events": "^3.0.0",
    "@types/glob": "^7.1.1",
    "@types/js-yaml": "^3.12.1",
    "@types/minimatch": "^3.0.3",
    "@types/mocha": "^5.2.7",
    "@types/node": "^13.1.5",
    "@types/node-dir": "0.0.33",
    "@types/node-fetch": "^2.5.4",
    "@types/semver": "^6.2.0",
    "@types/sinon": "^7.5.1",
    "@types/webpack-env": "^1.15.0",
    "@types/window-or-global": "^1.0.0",
    "@typescript-eslint/eslint-plugin": "^4.15.2",
    "@typescript-eslint/eslint-plugin-tslint": "^4.15.2",
    "@typescript-eslint/parser": "^4.15.2",
    "chai": "^4.2.0",
    "chai-like": "^1.1.1",
    "child_process": "^1.0.2",
    "concat-with-sourcemaps": "^1.1.0",
    "dialog-polyfill": "^0.5.0",
    "ejs": "^2.6.2",
    "eslint": "^7.4.0",
    "eslint-config-prettier": "^3.6.0",
    "eslint-plugin-jasmine": "^2.10.1",
    "eslint-plugin-jsdoc": "^32.2.0",
    "eslint-plugin-prefer-arrow": "^1.2.3",
    "eslint-plugin-prettier": "^3.3.1",
    "eslint-plugin-rulesdir": "^0.2.0",
    "espower-typescript": "^9.0.2",
    "express": "^4.17.1",
    "get-port": "^4.0.0",
    "glob": "^7.1.3",
    "gulp": "^4.0.2",
    "gulp-concat": "^2.6.1",
    "gulp-ejs": "^3.2.0",
    "gulp-filter": "^5.1.0",
    "gulp-plumber": "^1.2.0",
    "gulp-rename": "^1.4.0",
    "gulp-sort": "^2.0.0",
    "gulp-sourcemaps": "^2.6.5",
    "gulp-typescript": "^6.0.0-alpha.1",
    "gulp-yaml": "^2.0.2",
    "husky": "^0.14.3",
    "json-loader": "^0.5.7",
    "lint-staged": "^9.4.1",
    "lodash": "^4.17.21",
    "mocha": "^5.2.0",
    "mocha-chrome": "^2.2.0",
    "mocha-directory": "^2.3.0",
    "mocha-sinon": "^2.1.0",
    "natives": "^1.1.6",
    "ncp": "^2.0.0",
    "node-notifier": "^5.3.0",
    "nyc": "^14.1.1",
    "path": "^0.12.7",
    "plugin-error": "^1.0.1",
    "power-assert": "^1.6.1",
    "prettier": "^2.2.1",
    "raw-loader": "^4.0.0",
    "rimraf": "^3.0.2",
    "sinon": "^7.5.0",
    "text-encoding": "^0.7.0",
    "through2": "^2.0.3",
    "typedoc": "^0.16.9",
    "typedoc-plugin-external-module-name": "^3.0.0",
    "typedoc-plugin-internal-external": "^2.1.1",
    "typescript": "^3.7.5",
    "vinyl": "^2.2.0",
    "webpack": "^4.34.0",
    "webpack-cli": "^3.3.4",
    "webpack-node-externals": "^1.7.2",
    "webpack-stream": "^5.2.1",
    "yaml-loader": "^0.5.0"
  },
  "dependencies": {
    "@types/tv4": "^1.2.29",
    "@types/ws": "^6.0.4",
    "eventemitter3": "^3.1.2",
    "js-yaml": "^3.13.1",
    "moment": "^2.29.3",
    "node-dir": "^0.1.17",
    "node-fetch": "^2.3.0",
    "round-to": "^5.0.0",
    "semver": "^5.7.0",
    "tv4": "^1.3.0",
    "ws": "^6.1.4"
  },
  "bugs": {
    "url": "https://forum.obniz.com"
  },
  "private": false,
  "browser": {
    "fs": false,
    "ws": "./dist/src/obniz/libs/webpackReplace/ws",
    "canvas": "./dist/src/obniz/libs/webpackReplace/canvas",
    "./dist/src/obniz/libs/webpackReplace/require-context": "./dist/src/obniz/libs/webpackReplace/require-context-browser",
    "./dist/src/obniz/libs/webpackReplace/dialogPollyfill": "./dist/src/obniz/libs/webpackReplace/dialogPollyfill-browser"
  }
}
;

/***/ }),

/***/ "./dist/src/json_schema sync recursive \\.yml$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./index.yml": "./dist/src/json_schema/index.yml",
	"./request/ad/deinit.yml": "./dist/src/json_schema/request/ad/deinit.yml",
	"./request/ad/index.yml": "./dist/src/json_schema/request/ad/index.yml",
	"./request/ad/input.yml": "./dist/src/json_schema/request/ad/input.yml",
	"./request/ble/central/characteristic_get.yml": "./dist/src/json_schema/request/ble/central/characteristic_get.yml",
	"./request/ble/central/characteristic_read.yml": "./dist/src/json_schema/request/ble/central/characteristic_read.yml",
	"./request/ble/central/characteristic_register_notify.yml": "./dist/src/json_schema/request/ble/central/characteristic_register_notify.yml",
	"./request/ble/central/characteristic_unregister_notify.yml": "./dist/src/json_schema/request/ble/central/characteristic_unregister_notify.yml",
	"./request/ble/central/characteristic_write.yml": "./dist/src/json_schema/request/ble/central/characteristic_write.yml",
	"./request/ble/central/connect.yml": "./dist/src/json_schema/request/ble/central/connect.yml",
	"./request/ble/central/descriptor_get.yml": "./dist/src/json_schema/request/ble/central/descriptor_get.yml",
	"./request/ble/central/descriptor_read.yml": "./dist/src/json_schema/request/ble/central/descriptor_read.yml",
	"./request/ble/central/descriptor_write.yml": "./dist/src/json_schema/request/ble/central/descriptor_write.yml",
	"./request/ble/central/disconnect.yml": "./dist/src/json_schema/request/ble/central/disconnect.yml",
	"./request/ble/central/index.yml": "./dist/src/json_schema/request/ble/central/index.yml",
	"./request/ble/central/scan_start.yml": "./dist/src/json_schema/request/ble/central/scan_start.yml",
	"./request/ble/central/scan_stop.yml": "./dist/src/json_schema/request/ble/central/scan_stop.yml",
	"./request/ble/central/service_get.yml": "./dist/src/json_schema/request/ble/central/service_get.yml",
	"./request/ble/hci/advertisement_filter.yml": "./dist/src/json_schema/request/ble/hci/advertisement_filter.yml",
	"./request/ble/hci/deinit.yml": "./dist/src/json_schema/request/ble/hci/deinit.yml",
	"./request/ble/hci/index.yml": "./dist/src/json_schema/request/ble/hci/index.yml",
	"./request/ble/hci/init.yml": "./dist/src/json_schema/request/ble/hci/init.yml",
	"./request/ble/hci/write.yml": "./dist/src/json_schema/request/ble/hci/write.yml",
	"./request/ble/index.yml": "./dist/src/json_schema/request/ble/index.yml",
	"./request/ble/peripheral/advertisement_start.yml": "./dist/src/json_schema/request/ble/peripheral/advertisement_start.yml",
	"./request/ble/peripheral/advertisement_stop.yml": "./dist/src/json_schema/request/ble/peripheral/advertisement_stop.yml",
	"./request/ble/peripheral/characteristic_notify.yml": "./dist/src/json_schema/request/ble/peripheral/characteristic_notify.yml",
	"./request/ble/peripheral/characteristic_read.yml": "./dist/src/json_schema/request/ble/peripheral/characteristic_read.yml",
	"./request/ble/peripheral/characteristic_write.yml": "./dist/src/json_schema/request/ble/peripheral/characteristic_write.yml",
	"./request/ble/peripheral/descriptor_read.yml": "./dist/src/json_schema/request/ble/peripheral/descriptor_read.yml",
	"./request/ble/peripheral/descriptor_write.yml": "./dist/src/json_schema/request/ble/peripheral/descriptor_write.yml",
	"./request/ble/peripheral/index.yml": "./dist/src/json_schema/request/ble/peripheral/index.yml",
	"./request/ble/peripheral/servie_start.yml": "./dist/src/json_schema/request/ble/peripheral/servie_start.yml",
	"./request/ble/peripheral/servie_stop.yml": "./dist/src/json_schema/request/ble/peripheral/servie_stop.yml",
	"./request/ble/peripheral/servie_stop_all.yml": "./dist/src/json_schema/request/ble/peripheral/servie_stop_all.yml",
	"./request/ble/security/auth.yml": "./dist/src/json_schema/request/ble/security/auth.yml",
	"./request/ble/security/devices_clear.yml": "./dist/src/json_schema/request/ble/security/devices_clear.yml",
	"./request/ble/security/index.yml": "./dist/src/json_schema/request/ble/security/index.yml",
	"./request/ble/security/indicate_security_level.yml": "./dist/src/json_schema/request/ble/security/indicate_security_level.yml",
	"./request/ble/security/key_max_size.yml": "./dist/src/json_schema/request/ble/security/key_max_size.yml",
	"./request/ble/security/key_type.yml": "./dist/src/json_schema/request/ble/security/key_type.yml",
	"./request/display/clear.yml": "./dist/src/json_schema/request/display/clear.yml",
	"./request/display/index.yml": "./dist/src/json_schema/request/display/index.yml",
	"./request/display/pin_assign.yml": "./dist/src/json_schema/request/display/pin_assign.yml",
	"./request/display/qr.yml": "./dist/src/json_schema/request/display/qr.yml",
	"./request/display/raw.yml": "./dist/src/json_schema/request/display/raw.yml",
	"./request/display/text.yml": "./dist/src/json_schema/request/display/text.yml",
	"./request/i2c/deinit.yml": "./dist/src/json_schema/request/i2c/deinit.yml",
	"./request/i2c/index.yml": "./dist/src/json_schema/request/i2c/index.yml",
	"./request/i2c/init_master.yml": "./dist/src/json_schema/request/i2c/init_master.yml",
	"./request/i2c/init_slave.yml": "./dist/src/json_schema/request/i2c/init_slave.yml",
	"./request/i2c/read.yml": "./dist/src/json_schema/request/i2c/read.yml",
	"./request/i2c/write.yml": "./dist/src/json_schema/request/i2c/write.yml",
	"./request/index.yml": "./dist/src/json_schema/request/index.yml",
	"./request/io/deinit.yml": "./dist/src/json_schema/request/io/deinit.yml",
	"./request/io/index.yml": "./dist/src/json_schema/request/io/index.yml",
	"./request/io/input.yml": "./dist/src/json_schema/request/io/input.yml",
	"./request/io/input_detail.yml": "./dist/src/json_schema/request/io/input_detail.yml",
	"./request/io/output.yml": "./dist/src/json_schema/request/io/output.yml",
	"./request/io/output_detail.yml": "./dist/src/json_schema/request/io/output_detail.yml",
	"./request/io/output_type.yml": "./dist/src/json_schema/request/io/output_type.yml",
	"./request/io/pull_type.yml": "./dist/src/json_schema/request/io/pull_type.yml",
	"./request/ioAnimation/changeState.yml": "./dist/src/json_schema/request/ioAnimation/changeState.yml",
	"./request/ioAnimation/index.yml": "./dist/src/json_schema/request/ioAnimation/index.yml",
	"./request/ioAnimation/init.yml": "./dist/src/json_schema/request/ioAnimation/init.yml",
	"./request/logicAnalyzer/deinit.yml": "./dist/src/json_schema/request/logicAnalyzer/deinit.yml",
	"./request/logicAnalyzer/index.yml": "./dist/src/json_schema/request/logicAnalyzer/index.yml",
	"./request/logicAnalyzer/init.yml": "./dist/src/json_schema/request/logicAnalyzer/init.yml",
	"./request/measure/echo.yml": "./dist/src/json_schema/request/measure/echo.yml",
	"./request/measure/index.yml": "./dist/src/json_schema/request/measure/index.yml",
	"./request/message/index.yml": "./dist/src/json_schema/request/message/index.yml",
	"./request/message/send.yml": "./dist/src/json_schema/request/message/send.yml",
	"./request/plugin/index.yml": "./dist/src/json_schema/request/plugin/index.yml",
	"./request/plugin/send.yml": "./dist/src/json_schema/request/plugin/send.yml",
	"./request/pwm/deinit.yml": "./dist/src/json_schema/request/pwm/deinit.yml",
	"./request/pwm/freq.yml": "./dist/src/json_schema/request/pwm/freq.yml",
	"./request/pwm/index.yml": "./dist/src/json_schema/request/pwm/index.yml",
	"./request/pwm/init.yml": "./dist/src/json_schema/request/pwm/init.yml",
	"./request/pwm/modulate.yml": "./dist/src/json_schema/request/pwm/modulate.yml",
	"./request/pwm/pulse.yml": "./dist/src/json_schema/request/pwm/pulse.yml",
	"./request/spi/deinit.yml": "./dist/src/json_schema/request/spi/deinit.yml",
	"./request/spi/index.yml": "./dist/src/json_schema/request/spi/index.yml",
	"./request/spi/init_master.yml": "./dist/src/json_schema/request/spi/init_master.yml",
	"./request/spi/write.yml": "./dist/src/json_schema/request/spi/write.yml",
	"./request/switch/get.yml": "./dist/src/json_schema/request/switch/get.yml",
	"./request/switch/index.yml": "./dist/src/json_schema/request/switch/index.yml",
	"./request/system/index.yml": "./dist/src/json_schema/request/system/index.yml",
	"./request/system/keep_working_at_offline.yml": "./dist/src/json_schema/request/system/keep_working_at_offline.yml",
	"./request/system/ping.yml": "./dist/src/json_schema/request/system/ping.yml",
	"./request/system/reboot.yml": "./dist/src/json_schema/request/system/reboot.yml",
	"./request/system/reset.yml": "./dist/src/json_schema/request/system/reset.yml",
	"./request/system/self_check.yml": "./dist/src/json_schema/request/system/self_check.yml",
	"./request/system/sleep_io_trigger.yml": "./dist/src/json_schema/request/system/sleep_io_trigger.yml",
	"./request/system/sleep_minute.yml": "./dist/src/json_schema/request/system/sleep_minute.yml",
	"./request/system/sleep_seconds.yml": "./dist/src/json_schema/request/system/sleep_seconds.yml",
	"./request/system/wait.yml": "./dist/src/json_schema/request/system/wait.yml",
	"./request/tcp/connect.yml": "./dist/src/json_schema/request/tcp/connect.yml",
	"./request/tcp/disconnect.yml": "./dist/src/json_schema/request/tcp/disconnect.yml",
	"./request/tcp/index.yml": "./dist/src/json_schema/request/tcp/index.yml",
	"./request/tcp/write.yml": "./dist/src/json_schema/request/tcp/write.yml",
	"./request/uart/deinit.yml": "./dist/src/json_schema/request/uart/deinit.yml",
	"./request/uart/index.yml": "./dist/src/json_schema/request/uart/index.yml",
	"./request/uart/init.yml": "./dist/src/json_schema/request/uart/init.yml",
	"./request/uart/send.yml": "./dist/src/json_schema/request/uart/send.yml",
	"./request/wifi/index.yml": "./dist/src/json_schema/request/wifi/index.yml",
	"./request/wifi/scan.yml": "./dist/src/json_schema/request/wifi/scan.yml",
	"./request/ws/index.yml": "./dist/src/json_schema/request/ws/index.yml",
	"./request/ws/reset_obniz_on_ws_disconnection.yml": "./dist/src/json_schema/request/ws/reset_obniz_on_ws_disconnection.yml",
	"./response/ad/get.yml": "./dist/src/json_schema/response/ad/get.yml",
	"./response/ad/index.yml": "./dist/src/json_schema/response/ad/index.yml",
	"./response/ble/central/characteristic_get.yml": "./dist/src/json_schema/response/ble/central/characteristic_get.yml",
	"./response/ble/central/characteristic_get_finish.yml": "./dist/src/json_schema/response/ble/central/characteristic_get_finish.yml",
	"./response/ble/central/characteristic_notify.yml": "./dist/src/json_schema/response/ble/central/characteristic_notify.yml",
	"./response/ble/central/characteristic_read.yml": "./dist/src/json_schema/response/ble/central/characteristic_read.yml",
	"./response/ble/central/characteristic_register_notify.yml": "./dist/src/json_schema/response/ble/central/characteristic_register_notify.yml",
	"./response/ble/central/characteristic_unregister_notify.yml": "./dist/src/json_schema/response/ble/central/characteristic_unregister_notify.yml",
	"./response/ble/central/characteristic_write.yml": "./dist/src/json_schema/response/ble/central/characteristic_write.yml",
	"./response/ble/central/descriptor_get.yml": "./dist/src/json_schema/response/ble/central/descriptor_get.yml",
	"./response/ble/central/descriptor_get_finish.yml": "./dist/src/json_schema/response/ble/central/descriptor_get_finish.yml",
	"./response/ble/central/descriptor_read.yml": "./dist/src/json_schema/response/ble/central/descriptor_read.yml",
	"./response/ble/central/descriptor_write.yml": "./dist/src/json_schema/response/ble/central/descriptor_write.yml",
	"./response/ble/central/index.yml": "./dist/src/json_schema/response/ble/central/index.yml",
	"./response/ble/central/scan.yml": "./dist/src/json_schema/response/ble/central/scan.yml",
	"./response/ble/central/scan_finish.yml": "./dist/src/json_schema/response/ble/central/scan_finish.yml",
	"./response/ble/central/service_get.yml": "./dist/src/json_schema/response/ble/central/service_get.yml",
	"./response/ble/central/service_get_finish.yml": "./dist/src/json_schema/response/ble/central/service_get_finish.yml",
	"./response/ble/central/status_update.yml": "./dist/src/json_schema/response/ble/central/status_update.yml",
	"./response/ble/error.yml": "./dist/src/json_schema/response/ble/error.yml",
	"./response/ble/hci/index.yml": "./dist/src/json_schema/response/ble/hci/index.yml",
	"./response/ble/hci/read.yml": "./dist/src/json_schema/response/ble/hci/read.yml",
	"./response/ble/index.yml": "./dist/src/json_schema/response/ble/index.yml",
	"./response/ble/peripheral/characteristic_notify_read.yml": "./dist/src/json_schema/response/ble/peripheral/characteristic_notify_read.yml",
	"./response/ble/peripheral/characteristic_notify_write.yml": "./dist/src/json_schema/response/ble/peripheral/characteristic_notify_write.yml",
	"./response/ble/peripheral/characteristic_read.yml": "./dist/src/json_schema/response/ble/peripheral/characteristic_read.yml",
	"./response/ble/peripheral/characteristic_write.yml": "./dist/src/json_schema/response/ble/peripheral/characteristic_write.yml",
	"./response/ble/peripheral/descriptor_notify_read.yml": "./dist/src/json_schema/response/ble/peripheral/descriptor_notify_read.yml",
	"./response/ble/peripheral/descriptor_notify_write.yml": "./dist/src/json_schema/response/ble/peripheral/descriptor_notify_write.yml",
	"./response/ble/peripheral/descriptor_read.yml": "./dist/src/json_schema/response/ble/peripheral/descriptor_read.yml",
	"./response/ble/peripheral/descriptor_write.yml": "./dist/src/json_schema/response/ble/peripheral/descriptor_write.yml",
	"./response/ble/peripheral/index.yml": "./dist/src/json_schema/response/ble/peripheral/index.yml",
	"./response/ble/peripheral/status.yml": "./dist/src/json_schema/response/ble/peripheral/status.yml",
	"./response/debug/error.yml": "./dist/src/json_schema/response/debug/error.yml",
	"./response/debug/index.yml": "./dist/src/json_schema/response/debug/index.yml",
	"./response/debug/warning.yml": "./dist/src/json_schema/response/debug/warning.yml",
	"./response/i2c/error.yml": "./dist/src/json_schema/response/i2c/error.yml",
	"./response/i2c/index.yml": "./dist/src/json_schema/response/i2c/index.yml",
	"./response/i2c/master.yml": "./dist/src/json_schema/response/i2c/master.yml",
	"./response/i2c/slave.yml": "./dist/src/json_schema/response/i2c/slave.yml",
	"./response/i2c/warning.yml": "./dist/src/json_schema/response/i2c/warning.yml",
	"./response/index.yml": "./dist/src/json_schema/response/index.yml",
	"./response/io/error.yml": "./dist/src/json_schema/response/io/error.yml",
	"./response/io/get.yml": "./dist/src/json_schema/response/io/get.yml",
	"./response/io/index.yml": "./dist/src/json_schema/response/io/index.yml",
	"./response/io/warning.yml": "./dist/src/json_schema/response/io/warning.yml",
	"./response/ioanimation/index.yml": "./dist/src/json_schema/response/ioanimation/index.yml",
	"./response/ioanimation/notify.yml": "./dist/src/json_schema/response/ioanimation/notify.yml",
	"./response/logicanalyzer/data.yml": "./dist/src/json_schema/response/logicanalyzer/data.yml",
	"./response/logicanalyzer/index.yml": "./dist/src/json_schema/response/logicanalyzer/index.yml",
	"./response/measure/echo.yml": "./dist/src/json_schema/response/measure/echo.yml",
	"./response/measure/index.yml": "./dist/src/json_schema/response/measure/index.yml",
	"./response/message/index.yml": "./dist/src/json_schema/response/message/index.yml",
	"./response/message/receive.yml": "./dist/src/json_schema/response/message/receive.yml",
	"./response/plugin/index.yml": "./dist/src/json_schema/response/plugin/index.yml",
	"./response/plugin/receive.yml": "./dist/src/json_schema/response/plugin/receive.yml",
	"./response/spi/index.yml": "./dist/src/json_schema/response/spi/index.yml",
	"./response/spi/read.yml": "./dist/src/json_schema/response/spi/read.yml",
	"./response/switch/change.yml": "./dist/src/json_schema/response/switch/change.yml",
	"./response/switch/index.yml": "./dist/src/json_schema/response/switch/index.yml",
	"./response/system/index.yml": "./dist/src/json_schema/response/system/index.yml",
	"./response/system/pong.yml": "./dist/src/json_schema/response/system/pong.yml",
	"./response/tcp/connect.yml": "./dist/src/json_schema/response/tcp/connect.yml",
	"./response/tcp/connection.yml": "./dist/src/json_schema/response/tcp/connection.yml",
	"./response/tcp/index.yml": "./dist/src/json_schema/response/tcp/index.yml",
	"./response/tcp/read.yml": "./dist/src/json_schema/response/tcp/read.yml",
	"./response/uart/index.yml": "./dist/src/json_schema/response/uart/index.yml",
	"./response/uart/receive.yml": "./dist/src/json_schema/response/uart/receive.yml",
	"./response/wifi/index.yml": "./dist/src/json_schema/response/wifi/index.yml",
	"./response/wifi/scan.yml": "./dist/src/json_schema/response/wifi/scan.yml",
	"./response/ws/index.yml": "./dist/src/json_schema/response/ws/index.yml",
	"./response/ws/obniz.yml": "./dist/src/json_schema/response/ws/obniz.yml",
	"./response/ws/ready.yml": "./dist/src/json_schema/response/ws/ready.yml",
	"./response/ws/redirect.yml": "./dist/src/json_schema/response/ws/redirect.yml"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./dist/src/json_schema sync recursive \\.yml$";

/***/ }),

/***/ "./dist/src/json_schema/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/","definitions":{"pinSetting":{"id":"pinSetting","type":"integer","minimum":0,"maximum":40,"default":null},"bleAdvertiseData":{"id":"bleAdvertiseData","type":"array","default":null,"maxItems":31,"items":{"type":"integer","minimum":0,"maximum":255}},"dataArray32":{"id":"dataArray32","type":"array","default":null,"maxItems":32,"items":{"type":"integer","minimum":0,"maximum":255}},"dataArray1024":{"id":"dataArray1024","type":"array","default":null,"maxItems":1024,"items":{"type":"integer","minimum":0,"maximum":255}},"bitArray":{"id":"bitArray","type":"array","default":null,"items":{"type":"integer","minimum":0,"maximum":1}},"dataArray":{"id":"dataArray","type":"array","default":null,"items":{"type":"integer","minimum":0,"maximum":255}},"imageDataArray":{"id":"imageDataArray","type":"array","minItems":0,"items":{"type":"integer","minimum":0}},"hexString":{"id":"hexString","type":"string","default":null,"pattern":"^([0-9a-fA-F]+)$"},"uuid":{"id":"uuid","type":"string","pattern":"^([-0-9a-fA-F]+)$","minLength":4,"maxLength":36},"uuidOrNull":{"id":"uuidOrNull","type":["string","null"],"pattern":"^([-0-9a-fA-F]+)$","minLength":4,"maxLength":36},"uuidOrNullOrEmpty":{"id":"uuidOrNullOrEmpty","type":["string","null"],"pattern":"^([-0-9a-fA-F]*)$","minLength":0,"maxLength":36},"deviceAddress":{"id":"deviceAddress","type":"string","pattern":"^([0-9a-fA-F]+)$","minLength":12,"maxLength":12},"deviceAddressOrEmpty":{"id":"deviceAddressOrEmpty","type":"string","pattern":"^([0-9a-fA-F]*)$","minLength":0,"maxLength":12},"obnizId":{"id":"obnizId","type":["string","integer"],"pattern":"^[0-9]{4}-?[0-9]{4}$","minimum":0,"maximum":99999999}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ad/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ad/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/ad/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ad","basePath":"ad0","anyOf":[{"$ref":"/request/ad/get"},{"$ref":"/request/ad/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ad/input.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ad/get","related":"/response/ad/get","desription":"enable & start ad module at io.","type":"object","required":["stream"],"properties":{"stream":{"type":"boolean","default":false}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/characteristic_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/characteristic_get","related":"/response/ble/central/characteristic_get","deprecated":"3.0.0","type":"object","required":["get_characteristics"],"properties":{"get_characteristics":{"type":"object","required":["address","service_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/characteristic_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/characteristic_read","related":"/response/ble/central/characteristic_read","deprecated":"3.0.0","type":"object","required":["read_characteristic"],"properties":{"read_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/characteristic_register_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/characteristic_register_notify","related":"/response/ble/central/characteristic_register_notify","deprecated":"3.0.0","type":"object","required":["register_notify_characteristic"],"properties":{"register_notify_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/characteristic_unregister_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/characteristic_unregister_notify","related":"/response/ble/central/characteristic_unregister_notify","deprecated":"3.0.0","type":"object","required":["unregister_notify_characteristic"],"properties":{"unregister_notify_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/characteristic_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/characteristic_write","related":"/response/ble/central/characteristic_write","deprecated":"3.0.0","type":"object","required":["write_characteristic"],"properties":{"write_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"needResponse":{"type":"boolean","default":true}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/connect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/connect","related":"/response/ble/central/status_update","deprecated":"3.0.0","type":"object","required":["connect"],"properties":{"connect":{"type":"object","required":["address"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/descriptor_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/descriptor_get","related":"/response/ble/central/descriptor_get","deprecated":"3.0.0","type":"object","required":["get_descriptors"],"properties":{"get_descriptors":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/descriptor_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/descriptor_read","related":"/response/ble/central/descriptor_read","deprecated":"3.0.0","type":"object","required":["read_descriptor"],"properties":{"read_descriptor":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/descriptor_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/descriptor_write","related":"/response/ble/central/descriptor_write","deprecated":"3.0.0","type":"object","required":["write_descriptor"],"properties":{"write_descriptor":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"needResponse":{"type":"boolean","default":true}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/disconnect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/disconnect","deprecated":"3.0.0","type":"object","required":["disconnect"],"properties":{"disconnect":{"type":"object","required":["address"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central","basePath":"ble","anyOf":[{"$ref":"/request/ble/central/scan_start"},{"$ref":"/request/ble/central/scan_stop"},{"$ref":"/request/ble/central/connect"},{"$ref":"/request/ble/central/disconnect"},{"$ref":"/request/ble/central/service_get"},{"$ref":"/request/ble/central/characteristic_get"},{"$ref":"/request/ble/central/characteristic_read"},{"$ref":"/request/ble/central/characteristic_write"},{"$ref":"/request/ble/central/characteristic_register_notify"},{"$ref":"/request/ble/central/characteristic_unregister_notify"},{"$ref":"/request/ble/central/descriptor_get"},{"$ref":"/request/ble/central/descriptor_read"},{"$ref":"/request/ble/central/descriptor_write"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/scan_start.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/scan_start","related":["/response/ble/central/scan","/response/ble/central/scan_finish"],"deprecated":"3.0.0","type":"object","required":["scan"],"properties":{"scan":{"type":"object","additionalProperties":false,"properties":{"duration":{"type":"integer","default":30}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/scan_stop.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/scan_stop","deprecated":"3.0.0","type":"object","required":["scan"],"properties":{"scan":{"type":"null"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/central/service_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/central/service_get","related":"/response/ble/central/service_get","deprecated":"3.0.0","type":"object","required":["get_services"],"properties":{"get_services":{"type":"object","required":["address"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/hci/advertisement_filter.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/hci/advertisement_filter","type":"object","required":["hci"],"properties":{"hci":{"type":"object","required":["advertisement_filter"],"properties":{"advertisement_filter":{"type":"array","items":{"type":"object","required":["range"],"properties":{"range":{"type":"object","required":["index","length"],"properties":{"index":{"type":"integer","minimum":0,"maximum":255},"length":{"type":"integer","minimum":0,"maximum":255}}},"value":{"$ref":"/dataArray"}}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/hci/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/hci/deinit","type":"object","required":["hci"],"properties":{"hci":{"type":"null"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/hci/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/hci","basePath":"ble","anyOf":[{"$ref":"/request/ble/hci/init"},{"$ref":"/request/ble/hci/deinit"},{"$ref":"/request/ble/hci/write"},{"$ref":"/request/ble/hci/advertisement_filter"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/hci/init.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/hci/init","type":"object","required":["hci"],"properties":{"hci":{"type":"object","required":["initialize"],"properties":{"initialize":{"type":"boolean"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/hci/write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/hci/write","type":"object","required":["hci"],"properties":{"hci":{"type":"object","required":["write"],"properties":{"write":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble","basePath":"ble","anyOf":[{"$ref":"/request/ble/peripheral"},{"$ref":"/request/ble/central"},{"$ref":"/request/ble/security"},{"$ref":"/request/ble/hci"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/advertisement_start.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/advertisement_start","related":"/response/ble/peripheral/status","deprecated":"3.0.0","type":"object","required":["advertisement"],"properties":{"advertisement":{"type":"object","required":["adv_data"],"additionalProperties":false,"properties":{"adv_data":{"$ref":"/bleAdvertiseData"},"scan_resp":{"$ref":"/bleAdvertiseData"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/advertisement_stop.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/advertisement_stop","deprecated":"3.0.0","type":"object","required":["advertisement"],"properties":{"advertisement":{"type":"null"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/characteristic_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/characteristic_notify","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["notify_characteristic"],"properties":{"notify_characteristic":{"type":"object","required":["service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/characteristic_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/characteristic_read","related":"/response/ble/peripheral/characteristic_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["read_characteristic"],"properties":{"read_characteristic":{"type":"object","required":["service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/characteristic_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/characteristic_write","related":"/response/ble/peripheral/characteristic_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["write_characteristic"],"properties":{"write_characteristic":{"type":"object","required":["service_uuid","characteristic_uuid","data"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/descriptor_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/descriptor_read","related":"/response/ble/peripheral/descriptor_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["read_descriptor"],"properties":{"read_descriptor":{"type":"object","required":["service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/descriptor_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/descriptor_write","related":"/response/ble/peripheral/descriptor_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["write_descriptor"],"properties":{"write_descriptor":{"type":"object","required":["service_uuid","characteristic_uuid","descriptor_uuid","data"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral","basePath":"ble","anyOf":[{"$ref":"/request/ble/peripheral/advertisement_start"},{"$ref":"/request/ble/peripheral/advertisement_stop"},{"$ref":"/request/ble/peripheral/service_start"},{"$ref":"/request/ble/peripheral/service_stop"},{"$ref":"/request/ble/peripheral/service_stop_all"},{"$ref":"/request/ble/peripheral/characteristic_read"},{"$ref":"/request/ble/peripheral/characteristic_write"},{"$ref":"/request/ble/peripheral/descriptor_read"},{"$ref":"/request/ble/peripheral/descriptor_write"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/servie_start.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/service_start","related":["/response/ble/peripheral/status","/response/ble/peripheral/characteristic_notify_read","/response/ble/peripheral/characteristic_notify_write","/response/ble/peripheral/descriptor_notify_read","/response/ble/peripheral/descriptor_notify_write"],"deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["services"],"properties":{"services":{"type":"array","minItems":1,"items":{"type":"object","required":["uuid"],"additionalProperties":false,"properties":{"uuid":{"$ref":"/uuid"},"characteristics":{"type":"array","minItems":0,"items":{"type":"object","required":["uuid"],"additionalProperties":false,"properties":{"uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"properties":{"type":"array","default":["read","write"],"items":{"type":"string","enum":["broadcast","read","write_without_response","write","notify","indicate","auth","extended_properties"]}},"permissions":{"type":"array","default":["read","write"],"items":{"default":["read","write"],"type":"string","enum":["read","read_encrypted","read_encrypted_mitm","write","write_encrypted","write_encrypted_mitm","write_signed","write_signed_mitm"]}},"descriptors":{"type":"array","minItems":0,"items":{"type":"object","required":["uuid"],"additionalProperties":false,"properties":{"uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"permissions":{"type":"array","default":["read","write"],"items":{"default":["read","write"],"type":"string","enum":["read","read_encrypted","read_encrypted_mitm","write","write_encrypted","write_encrypted_mitm","write_signed","write_signed_mitm"]}}}}}}}}}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/servie_stop.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/service_stop","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","required":["stop_service"],"properties":{"stop_service":{"type":"object","required":["service_uuid"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/peripheral/servie_stop_all.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/peripheral/service_stop_all","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"null"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/auth.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security/auth","type":"object","required":["security"],"properties":{"security":{"type":"object","required":["auth"],"properties":{"auth":{"type":"array","default":["bonding"],"minItems":"1,","items":{"type":"string","enum":["bonding","mitm","secure_connection"]}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/devices_clear.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security/devices_clear","deprecated":"3.0.0","type":"object","required":["security"],"properties":{"security":{"type":"object","required":["devices"],"properties":{"devices":{"type":"object","required":["clear"],"properties":{"clear":{"type":"boolean","enum":[true]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security","basePath":"ble.security","deprecated":"3.0.0","anyOf":[{"$ref":"/request/ble/security/indicate_security_level"},{"$ref":"/request/ble/security/auth"},{"$ref":"/request/ble/security/key_type"},{"$ref":"/request/ble/security/key_max_size"},{"$ref":"/request/ble/security/devices_clear"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/indicate_security_level.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security/indicate_security_level","deprecated":"3.0.0","type":"object","required":["security"],"properties":{"security":{"type":"object","required":["indicate_security_level"],"properties":{"indicate_security_level":{"type":"integer","min":0,"max":4}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/key_max_size.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security/key_max_size","deprecated":"3.0.0","type":"object","required":["security"],"properties":{"security":{"type":"object","required":["key"],"properties":{"key":{"type":"object","required":["max_size"],"properties":{"max_size":{"type":"integer","min":7,"max":16}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ble/security/key_type.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ble/security/key_type","deprecated":"3.0.0","type":"object","required":["security"],"properties":{"security":{"type":"object","required":["key"],"properties":{"key":{"type":"object","required":["type"],"properties":{"type":{"type":"array","default":["encryption"],"items":{"type":"string","enum":["ltk","irk","csrk"]}}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/display/clear.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display/clear","type":"object","required":["clear"],"properties":{"clear":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/display/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display","basePath":"display","anyOf":[{"$ref":"/request/display/text"},{"$ref":"/request/display/clear"},{"$ref":"/request/display/qr"},{"$ref":"/request/display/raw"},{"$ref":"/request/display/pin_assign"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/display/pin_assign.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display/pin_assign","type":"object","required":["pin_assign"],"properties":{"pin_assign":{"type":"object","minProperties":1,"patternExample":[0,1,2,3],"patternProperties":{"^\\d{1,2}$":{"type":"object","properties":{"module_name":{"type":"string"},"pin_name":{"type":"string"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/display/qr.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display/qr","type":"object","required":["qr"],"properties":{"qr":{"type":"object","required":["text"],"additionalProperties":false,"properties":{"text":{"type":"string"},"correction":{"type":"string","enum":["L","M","Q","H"],"default":"M"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/display/raw.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display/raw","type":"object","required":["raw"],"properties":{"raw":{"$ref":"/imageDataArray"},"color_depth":{"type":"integer","enum":[1,4,16],"default":1}}}

/***/ }),

/***/ "./dist/src/json_schema/request/display/text.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/display/text","type":"object","required":["text"],"properties":{"text":{"type":"string"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c","basePath":"i2c0","anyOf":[{"$ref":"/request/i2c/init_master"},{"$ref":"/request/i2c/init_slave"},{"$ref":"/request/i2c/write"},{"$ref":"/request/i2c/read"},{"$ref":"/request/i2c/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/init_master.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c/init_master","type":"object","required":["mode","sda","scl","clock"],"uniqueKeys":["sda","scl"],"properties":{"mode":{"type":"string","enum":["master"]},"sda":{"$ref":"/pinSetting"},"scl":{"$ref":"/pinSetting"},"clock":{"type":"integer","minimum":1,"maximum":1000000}}}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/init_slave.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c/init_slave","related":"/response/i2c/slave","type":"object","required":["mode","sda","scl","slave_address"],"uniqueKeys":["sda","scl"],"properties":{"mode":{"type":"string","enum":["master","slave"]},"sda":{"$ref":"/pinSetting"},"scl":{"$ref":"/pinSetting"},"slave_address":{"type":"integer","minimum":0,"maximum":1023},"slave_address_length":{"type":"integer","enum":[7],"default":7},"address":{"type":"integer","minimum":0,"maximum":1023},"address_bits":{"type":"integer","enum":[7],"default":7},"data":{"$ref":"/dataArray"},"read":{"type":"integer","minimum":0}}}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c/read","related":"/response/i2c/master","type":"object","required":["address","read"],"properties":{"address":{"type":"integer","minimum":0,"maximum":1023},"address_bits":{"type":"integer","enum":[7],"default":7},"read":{"type":"integer","minimum":0,"maximum":1024}}}

/***/ }),

/***/ "./dist/src/json_schema/request/i2c/write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/i2c/write","type":"object","required":["address","data"],"properties":{"address":{"type":"integer","minimum":0,"maximum":1023},"address_bits":{"type":"integer","enum":[7],"default":7},"data":{"$ref":"/dataArray1024"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request","type":"array","minItems":1,"items":{"type":"object","additionalProperties":false,"patternProperties":{"^io[0-9]$":{"$ref":"/request/io"},"^io1[0-1]$":{"$ref":"/request/io"},"^ad[0-9]$":{"$ref":"/request/ad"},"^ad1[0-1]$":{"$ref":"/request/ad"},"^pwm[0-5]$":{"$ref":"/request/pwm"},"^uart[0-1]$":{"$ref":"/request/uart"},"^spi[0-1]$":{"$ref":"/request/spi"},"^i2c[0-1]$":{"$ref":"/request/i2c"},"^tcp[0-7]$":{"$ref":"/request/tcp"}},"properties":{"io":{"$ref":"/request/ioAnimation"},"ble":{"$ref":"/request/ble"},"switch":{"$ref":"/request/switch"},"display":{"$ref":"/request/display"},"measure":{"$ref":"/request/measure"},"message":{"$ref":"/request/message"},"logic_analyzer":{"$ref":"/request/logicAnalyzer"},"system":{"$ref":"/request/system"},"ws":{"$ref":"/request/ws"},"wifi":{"$ref":"/request/wifi"},"plugin":{"$ref":"/request/plugin"}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/io/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/io/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io","basePath":"io0","anyOf":[{"$ref":"/request/io/input"},{"$ref":"/request/io/input_detail"},{"$ref":"/request/io/output"},{"$ref":"/request/io/output_detail"},{"$ref":"/request/io/output_type"},{"$ref":"/request/io/pull_type"},{"$ref":"/request/io/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/io/input.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/input","related":"/response/io/get","type":"string","enum":["get"]}

/***/ }),

/***/ "./dist/src/json_schema/request/io/input_detail.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/input_detail","related":"/response/io/get","type":"object","required":["direction"],"properties":{"direction":{"type":"string","enum":["input"]},"stream":{"type":"boolean","default":false}}}

/***/ }),

/***/ "./dist/src/json_schema/request/io/output.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/output","type":"boolean"}

/***/ }),

/***/ "./dist/src/json_schema/request/io/output_detail.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/output_detail","type":"object","required":["direction","value"],"properties":{"direction":{"type":"string","enum":["output"]},"value":{"type":"boolean"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/io/output_type.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/output_type","type":"object","required":["output_type"],"properties":{"output_type":{"type":"string","enum":["push-pull5v","push-pull3v","open-drain"]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/io/pull_type.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/io/pull_type","type":"object","required":["pull_type"],"properties":{"pull_type":{"type":"string","enum":["pull-up5v","pull-up3v","pull-down","float"]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ioAnimation/changeState.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ioAnimation/changeState","type":"object","required":["animation"],"properties":{"animation":{"type":"object","required":["name","status"],"additionalProperties":false,"properties":{"name":{"type":"string","minLength":1,"maxLength":254},"status":{"type":"string","enum":["pause","resume"]}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ioAnimation/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ioAnimation","basePath":"io","anyOf":[{"$ref":"/request/ioAnimation/init"},{"$ref":"/request/ioAnimation/changeState"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ioAnimation/init.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ioAnimation/init","commandExample":{"io":{"animation":{"name":"animation-1","status":"loop","states":[{"duration":500,"state":{"io0":true}},{"duration":500,"state":{"io0":false}}]}}},"type":"object","required":["animation"],"properties":{"animation":{"type":"object","required":["name","status","states"],"additionalProperties":false,"properties":{"name":{"type":"string","minLength":1,"maxLength":254},"repeat":{"type":"integer","minLength":1,"maxLength":4294967295,"default":"undefined"},"status":{"type":"string","default":"loop","enum":["loop","registrate"]},"states":{"type":"array","default":[],"items":{"type":"object","required":["duration","state"],"additionalProperties":false,"properties":{"duration":{"type":"integer","minimum":0,"maximum":60000},"state":{"type":["object","array"],"filter":"pass_all"}}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/logicAnalyzer/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/logicAnalyzer/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/logicAnalyzer/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/logicAnalyzer","basePath":"logic_analyzer","anyOf":[{"$ref":"/request/logicAnalyzer/init"},{"$ref":"/request/logicAnalyzer/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/logicAnalyzer/init.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/logicAnalyzer/init","exampleDescription":"With below sample code, you will receive only data which start with 'false, false, false' 3bit.","type":"object","required":["io","interval","duration"],"properties":{"io":{"type":"array","minItems":1,"maxItems":1,"items":{"$ref":"/pinSetting"}},"interval":{"type":"number","minimum":0,"exclusiveMinimum":true},"duration":{"type":"integer","minimum":0,"exclusiveMinimum":true},"trigger":{"type":"object","additionalProperties":false,"required":["value","samples"],"default":{"value":false,"samples":0},"properties":{"value":{"type":"boolean","default":false},"samples":{"type":"integer","minimum":0,"default":0}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/measure/echo.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/measure/echo","related":"/response/measure/echo","type":"object","required":["echo"],"properties":{"echo":{"type":"object","required":["io_pulse","io_echo","pulse_width"],"properties":{"io_pulse":{"$ref":"/pinSetting"},"io_echo":{"$ref":"/pinSetting"},"pulse":{"type":"string","default":"positive","enum":["positive","negative"]},"pulse_width":{"type":"number","minimum":0.001,"maximum":1000},"measure_edges":{"type":"integer","minimum":1,"maximum":4},"timeout":{"type":"number","default":1000,"minimum":0.001,"maximum":1000}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/measure/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/measure","basePath":"measure","anyOf":[{"$ref":"/request/measure/echo"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/message/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/message","basePath":"message","anyOf":[{"$ref":"/request/message/send"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/message/send.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/message/send","related":"/response/message/receive","type":"object","additionalProperties":false,"required":["data","to"],"properties":{"data":{},"to":{"type":"array","minItems":1,"items":{"$ref":"/obnizId"}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/plugin/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/plugin","basePath":"plugin","anyOf":[{"$ref":"/request/plugin/send"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/plugin/send.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/plugin/send","desccription":"plugin send","type":"object","required":["send"],"properties":{"send":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/freq.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm/freq","type":"object","required":["freq"],"properties":{"freq":{"type":"integer","minimum":1,"maximum":80000000}}}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm","basePath":"pwm0","anyOf":[{"$ref":"/request/pwm/init"},{"$ref":"/request/pwm/freq"},{"$ref":"/request/pwm/pulse"},{"$ref":"/request/pwm/modulate"},{"$ref":"/request/pwm/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/init.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm/init","type":"object","required":["io"],"properties":{"io":{"$ref":"/pinSetting"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/modulate.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm/modulate","type":"object","required":["modulate"],"properties":{"modulate":{"type":"object","required":["type","symbol_length","data"],"additionalProperties":false,"properties":{"type":{"type":"string","enum":["am"]},"symbol_length":{"type":"number","minimum":0.05,"maximum":1000},"data":{"$ref":"/bitArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/pwm/pulse.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/pwm/pulse","type":"object","required":["pulse"],"properties":{"pulse":{"type":"number","minimum":0}}}

/***/ }),

/***/ "./dist/src/json_schema/request/spi/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/spi/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/spi/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/spi","basePath":"spi0","anyOf":[{"$ref":"/request/spi/init_master"},{"$ref":"/request/spi/deinit"},{"$ref":"/request/spi/write"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/spi/init_master.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/spi/init_master","type":"object","required":["mode","clock"],"uniqueKeys":["mosi","miso","clk"],"properties":{"mode":{"type":"string","enum":["master"]},"clk":{"$ref":"/pinSetting"},"mosi":{"$ref":"/pinSetting"},"miso":{"$ref":"/pinSetting"},"clock":{"type":"integer","default":115200,"minimum":1,"maximum":26000000,"desription":"frequency (Hz)"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/spi/write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/spi/write","related":"/response/spi/read","type":"object","required":["data","read"],"properties":{"data":{"$ref":"/dataArray1024"},"read":{"type":"boolean","default":true}}}

/***/ }),

/***/ "./dist/src/json_schema/request/switch/get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/switch/get","related":"/response/switch/change","type":"string","enum":["get"]}

/***/ }),

/***/ "./dist/src/json_schema/request/switch/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/switch","basePath":"switch","anyOf":[{"$ref":"/request/switch/get"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/system/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system","basePath":"system","anyOf":[{"$ref":"/request/system/wait"},{"$ref":"/request/system/reset"},{"$ref":"/request/system/reboot"},{"$ref":"/request/system/selfCheck"},{"$ref":"/request/system/keepWorkingAtOffline"},{"$ref":"/request/system/ping"},{"$ref":"/request/system/sleepSeconds"},{"$ref":"/request/system/sleepMinute"},{"$ref":"/request/system/sleepIoTrigger"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/system/keep_working_at_offline.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/keepWorkingAtOffline","type":"object","required":["keep_working_at_offline"],"properties":{"keep_working_at_offline":{"type":"boolean"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/ping.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/ping","response":"/response/system/pong","type":"object","required":["ping"],"properties":{"ping":{"type":"object","required":["key"],"properties":{"key":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/reboot.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/reboot","type":"object","required":["reboot"],"properties":{"reboot":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/reset.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/reset","type":"object","required":["reset"],"properties":{"reset":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/self_check.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/selfCheck","type":"object","required":["self_check"],"properties":{"self_check":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/sleep_io_trigger.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/sleepIoTrigger","type":"object","required":["sleep_io_trigger"],"properties":{"sleep_io_trigger":{"type":"boolean"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/sleep_minute.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/sleepMinute","type":"object","required":["sleep_minute"],"properties":{"sleep_minute":{"type":"integer"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/sleep_seconds.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/sleepSeconds","type":"object","required":["sleep_seconds"],"properties":{"sleep_seconds":{"type":"integer"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/system/wait.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/system/wait","type":"object","required":["wait"],"properties":{"wait":{"type":"integer"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/tcp/connect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/tcp/connect","type":"object","required":["connect"],"properties":{"connect":{"type":"object","required":["port","domain"],"additionalProperties":false,"properties":{"port":{"type":"integer","minimum":0,"maximum":65535},"domain":{"type":"string","default":"obniz.io","maxLength":30}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/tcp/disconnect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/tcp/disconnect","type":"object","required":["disconnect"],"properties":{"disconnect":{"type":"boolean","additionalProperties":false}}}

/***/ }),

/***/ "./dist/src/json_schema/request/tcp/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/tcp","basePath":"tcp0","anyOf":[{"$ref":"/request/tcp/connect"},{"$ref":"/request/tcp/disconnect"},{"$ref":"/request/tcp/write"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/tcp/write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/tcp/write","type":"object","required":["write"],"properties":{"write":{"type":"object","required":["data"],"additionalProperties":false,"properties":{"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/request/uart/deinit.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/uart/deinit","type":"null"}

/***/ }),

/***/ "./dist/src/json_schema/request/uart/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/uart","basePath":"uart0","anyOf":[{"$ref":"/request/uart/init"},{"$ref":"/request/uart/send"},{"$ref":"/request/uart/deinit"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/uart/init.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/uart/init","type":"object","required":["rx","tx"],"uniqueKeys":["rx","tx","rts","cts"],"properties":{"rx":{"$ref":"/pinSetting"},"tx":{"$ref":"/pinSetting"},"baud":{"type":"integer","default":115200,"minimum":1,"maximum":5000000},"stop":{"type":"number","enum":[1,1.5,2],"default":1},"bits":{"type":"integer","enum":[5,6,7,8],"default":8},"parity":{"type":"string","enum":["off","odd","even"],"default":"off"},"flowcontrol":{"type":"string","enum":["off","rts","cts","rts-cts"],"default":"off"},"rts":{"$ref":"/pinSetting"},"cts":{"$ref":"/pinSetting"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/uart/send.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/uart/send","type":"object","required":["data"],"properties":{"data":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/request/wifi/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/wifi","basePath":"wifi","anyOf":[{"$ref":"/request/wifi/scan"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/wifi/scan.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/wifi/scan","type":"object","required":["scan"],"properties":{"scan":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/request/ws/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ws","basePath":"ws","anyOf":[{"$ref":"/request/ws/reset_obniz_on_ws_disconnection"}]}

/***/ }),

/***/ "./dist/src/json_schema/request/ws/reset_obniz_on_ws_disconnection.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/request/ws/reset_obniz_on_ws_disconnection","type":"object","required":["reset_obniz_on_ws_disconnection"],"properties":{"reset_obniz_on_ws_disconnection":{"type":"boolean","default":false}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ad/get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ad/get","type":"number","minimum":0,"maximum":5}

/***/ }),

/***/ "./dist/src/json_schema/response/ad/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ad","basePath":"ad0","anyOf":[{"$ref":"/response/ad/get"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_get","deprecated":"3.0.0","type":"object","required":["get_characteristic_result"],"properties":{"get_characteristic_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","properties"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"properties":{"type":"array","items":{"type":"string","enum":["broadcast","read","write_without_response","write","notify","indicate","auth","extended_properties"]}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_get_finish.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_get_finish","deprecated":"3.0.0","type":"object","required":["get_characteristic_result_finish"],"properties":{"get_characteristic_result_finish":{"type":"object","required":["address","service_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_notify","deprecated":"3.0.0","type":"object","required":["notify_characteristic"],"properties":{"notify_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_read","deprecated":"3.0.0","type":"object","required":["read_characteristic_result"],"properties":{"read_characteristic_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","result","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]},"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_register_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_register_notify","related":"/request/ble/central/characteristic_register_notify","deprecated":"3.0.0","type":"object","required":["characteristic_register_notify_result"],"properties":{"characteristic_register_notify_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","result"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"result":{"type":"boolean"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_unregister_notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_unregister_notify","related":"/request/ble/central/characteristic_unregister_notify","deprecated":"3.0.0","type":"object","required":["unregister_notify_characteristic_result"],"properties":{"unregister_notify_characteristic_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","result"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"result":{"type":"boolean"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/characteristic_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/characteristic_write","deprecated":"3.0.0","type":"object","required":["write_characteristic_result"],"properties":{"write_characteristic_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","result"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/descriptor_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/descriptor_get","deprecated":"3.0.0","type":"object","required":["get_descriptor_result"],"properties":{"get_descriptor_result":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/descriptor_get_finish.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/descriptor_get_finish","deprecated":"3.0.0","type":"object","required":["get_descriptor_result_finish"],"properties":{"get_descriptor_result_finish":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/descriptor_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/descriptor_read","deprecated":"3.0.0","type":"object","required":["read_descriptor_result"],"properties":{"read_descriptor_results":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid","result","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]},"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/descriptor_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/descriptor_write","deprecated":"3.0.0","type":"object","required":["write_descriptor_result"],"properties":{"write_descriptor_results":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid","result"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central","basePath":"ble","anyOf":[{"$ref":"/response/ble/central/scan"},{"$ref":"/response/ble/central/scan_finish"},{"$ref":"/response/ble/central/status_update"},{"$ref":"/response/ble/central/service_get"},{"$ref":"/response/ble/central/service_get_finish"},{"$ref":"/response/ble/central/characteristic_get"},{"$ref":"/response/ble/central/characteristic_get_finish"},{"$ref":"/response/ble/central/characteristic_write"},{"$ref":"/response/ble/central/characteristic_read"},{"$ref":"/response/ble/central/characteristic_register_notify"},{"$ref":"/response/ble/central/characteristic_notify"},{"$ref":"/response/ble/central/characteristic_notify"},{"$ref":"/response/ble/central/descriptor_get"},{"$ref":"/response/ble/central/descriptor_get_finish"},{"$ref":"/response/ble/central/descriptor_write"},{"$ref":"/response/ble/central/descriptor_read"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/scan.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/scan","deprecated":"3.0.0","type":"object","required":["scan_result"],"properties":{"scan_result":{"type":"object","required":["address","ble_event_type","device_type","address_type","flag","rssi"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"ble_event_type":{"type":"string","enum":["connectable_advertisemnt","connectable_directed_advertisemnt","scannable_advertising","non_connectable_advertising","scan_response"]},"device_type":{"type":"string","enum":["ble","dumo","breder"]},"address_type":{"type":"string","enum":["public","random","rpa_public","rpa_random"]},"flag":{"type":"integer","minimum":0},"rssi":{"type":"integer","maximum":0},"adv_data":{"$ref":"/bleAdvertiseData"},"scan_resp":{"$ref":"/bleAdvertiseData"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/scan_finish.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/scan_finish","deprecated":"3.0.0","type":"object","required":["scan_result_finish"],"properties":{"scan_result_finish":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/service_get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/service_get","deprecated":"3.0.0","type":"object","required":["get_service_result"],"properties":{"get_service_result":{"type":"object","required":["address","service_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/service_get_finish.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/service_get_finish","deprecated":"3.0.0","type":"object","required":["get_service_result_finish"],"properties":{"get_service_result_finish":{"type":"object","required":["address"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/central/status_update.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/central/status_update","deprecated":"3.0.0","type":"object","required":["status_update"],"properties":{"status_update":{"type":"object","required":["address","status"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"status":{"type":"string","enum":["connected","disconnected"]}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/error.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/error","deprecated":"3.0.0","type":"object","required":["error"],"properties":{"error":{"type":"object","required":["error_code","message"],"additionalProperties":false,"properties":{"error_code":{"type":"integer"},"module_error_code":{"type":"integer"},"function_code":{"type":"integer"},"message":{"type":"string"},"address":{"$ref":"/deviceAddressOrEmpty"},"service_uuid":{"$ref":"/uuidOrNullOrEmpty"},"characteristic_uuid":{"$ref":"/uuidOrNullOrEmpty"},"descriptor_uuid":{"$ref":"/uuidOrNullOrEmpty"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/hci/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/hci","basePath":"ble","anyOf":[{"$ref":"/response/ble/hci/read"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/hci/read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/hci/read","type":"object","required":["hci"],"properties":{"hci":{"type":"object","required":["read"],"properties":{"read":{"type":"object","required":["data"],"properties":{"data":{"$ref":"/dataArray"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble","basePath":"ble","anyOf":[{"$ref":"/response/ble/central"},{"$ref":"/response/ble/peripheral"},{"$ref":"/response/ble/error"},{"$ref":"/response/ble/hci"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/characteristic_notify_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/characteristic_notify_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["notify_read_characteristic"],"properties":{"notify_read_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/characteristic_notify_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/characteristic_notify_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["notify_write_characteristic"],"properties":{"notify_write_characteristic":{"type":"object","required":["address","service_uuid","characteristic_uuid","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/characteristic_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/characteristic_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["read_characteristic_result"],"properties":{"read_characteristic_result":{"type":"object","required":["service_uuid","characteristic_uuid","data","result"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"result":{"type":"string","enum":["success","failed"]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/characteristic_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/characteristic_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["write_characteristic_result"],"properties":{"write_characteristic_result":{"type":"object","required":["service_uuid","characteristic_uuid","result"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/descriptor_notify_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/descriptor_notify_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["notify_read_descriptor"],"properties":{"notify_read_descriptor":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/descriptor_notify_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/descriptor_notify_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["notify_write_descriptor"],"properties":{"notify_write_descriptor":{"type":"object","required":["address","service_uuid","characteristic_uuid","descriptor_uuid","data"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/descriptor_read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/descriptor_read","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["read_descriptor_result"],"properties":{"read_descriptor_result":{"type":"object","required":["service_uuid","characteristic_uuid","descriptor_uuid","data","result"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"data":{"$ref":"/dataArray"},"result":{"type":"string","enum":["success","failed"]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/descriptor_write.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/descriptor_write","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["write_descriptor_result"],"properties":{"write_descriptor_result":{"type":"object","required":["service_uuid","characteristic_uuid","descriptor_uuid","result"],"additionalProperties":false,"properties":{"service_uuid":{"$ref":"/uuid"},"characteristic_uuid":{"$ref":"/uuid"},"descriptor_uuid":{"$ref":"/uuid"},"result":{"type":"string","enum":["success","failed"]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral","basePath":"ble","anyOf":[{"$ref":"/response/ble/peripheral/status"},{"$ref":"/response/ble/peripheral/characteristic_read"},{"$ref":"/response/ble/peripheral/characteristic_write"},{"$ref":"/response/ble/peripheral/characteristic_notify_read"},{"$ref":"/response/ble/peripheral/characteristic_notify_write"},{"$ref":"/response/ble/peripheral/descriptor_read"},{"$ref":"/response/ble/peripheral/descriptor_write"},{"$ref":"/response/ble/peripheral/descriptor_notify_read"},{"$ref":"/response/ble/peripheral/descriptor_notify_write"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ble/peripheral/status.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ble/peripheral/status","deprecated":"3.0.0","type":"object","required":["peripheral"],"properties":{"peripheral":{"type":"object","additionalProperties":false,"required":["connection_status"],"properties":{"connection_status":{"type":"object","required":["address","status"],"additionalProperties":false,"properties":{"address":{"$ref":"/deviceAddress"},"status":{"type":"string","enum":["connected","disconnected"]}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/debug/error.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/debug/error","desccription":"global error","type":"object","required":["error"],"properties":{"error":{"type":"object","additionalProperties":true,"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/debug/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/debug","basePath":"debug","anyOf":[{"$ref":"/response/debug/warning"},{"$ref":"/response/debug/error"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/debug/warning.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/debug/warning","desccription":"global warnings","type":"object","required":["warning"],"properties":{"warning":{"type":"object","additionalProperties":true,"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/i2c/error.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/i2c/error","type":"object","required":["error"],"properties":{"error":{"type":"object","required":["message"],"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/i2c/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/i2c","basePath":"i2c0","anyOf":[{"$ref":"/response/i2c/master"},{"$ref":"/response/i2c/slave"},{"$ref":"/response/i2c/error"},{"$ref":"/response/i2c/warning"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/i2c/master.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/i2c/master","type":"object","required":["mode","address","data"],"properties":{"mode":{"type":"string","enum":["master"]},"address":{"type":"integer","minimum":0,"maximum":1023},"data":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/i2c/slave.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/i2c/slave","type":"object","required":["mode","address","is_fragmented","data"],"properties":{"mode":{"type":"string","enum":["slave"]},"address":{"type":"integer","minimum":0,"maximum":1023},"is_fragmented":{"type":"boolean"},"data":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/i2c/warning.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/i2c/warning","type":"object","required":["warning"],"properties":{"warning":{"type":"object","required":["message"],"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response","type":"array","minItems":1,"items":{"type":"object","additionalProperties":false,"patternProperties":{"^io[0-9]$":{"$ref":"/response/io"},"^io1[0-1]$":{"$ref":"/response/io"},"^ad[0-9]$":{"$ref":"/response/ad"},"^ad1[0-1]$":{"$ref":"/response/ad"},"^uart[0-1]$":{"$ref":"/response/uart"},"^spi[0-1]$":{"$ref":"/response/spi"},"^i2c[0-1]$":{"$ref":"/response/i2c"},"^tcp[0-7]$":{"$ref":"/response/tcp"}},"properties":{"io":{"$ref":"/response/ioAnimation"},"switch":{"$ref":"/response/switch"},"ble":{"$ref":"/response/ble"},"measure":{"$ref":"/response/measure"},"message":{"$ref":"/response/message"},"logic_analyzer":{"$ref":"/response/logicAnalyzer"},"system":{"$ref":"/response/system"},"debug":{"$ref":"/response/debug"},"ws":{"$ref":"/response/ws"},"wifi":{"$ref":"/response/wifi"},"plugin":{"$ref":"/response/plugin"}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/io/error.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/io/error","type":"object","required":["error"],"properties":{"error":{"type":"object","required":["message"],"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/io/get.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/io/get","type":"boolean"}

/***/ }),

/***/ "./dist/src/json_schema/response/io/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/io","basePath":"io0","anyOf":[{"$ref":"/response/io/get"},{"$ref":"/response/io/warning"},{"$ref":"/response/io/error"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/io/warning.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/io/warning","type":"object","required":["warning"],"properties":{"warning":{"type":"object","required":["message"],"properties":{"message":{"type":"string"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ioanimation/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ioAnimation","basePath":"io","anyOf":[{"$ref":"/response/ioAnimation/notify"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ioanimation/notify.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ioAnimation/notify","type":"object","required":["animation"],"properties":{"animation":{"type":"object","required":["name","status"],"properties":{"name":{"type":"string","minLength":1,"maxLength":254},"status":{"type":"string","enum":["finish"]}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/logicanalyzer/data.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/logicAnalyzer/data","type":"object","required":["data"],"properties":{"data":{"$ref":"/bitArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/logicanalyzer/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/logicAnalyzer","basePath":"logic_analyzer","anyOf":[{"$ref":"/response/logicAnalyzer/data"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/measure/echo.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/measure/echo","type":"object","required":["echo"],"properties":{"echo":{"type":"array","minItesm":1,"items":{"type":"object","required":["edge","timing"],"properties":{"edge":{"type":"boolean"},"timing":{"type":"number"}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/measure/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/measure","basePath":"measure","anyOf":[{"$ref":"/response/measure/echo"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/message/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/message","basePath":"message","anyOf":[{"$ref":"/response/message/receive"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/message/receive.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/message/receive","related":"/request/message/send","type":"object","required":["data","from"],"properties":{"data":{},"from":{"type":["string","null"]}}}

/***/ }),

/***/ "./dist/src/json_schema/response/plugin/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/plugin","basePath":"plugin","anyOf":[{"$ref":"/response/plugin/receive"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/plugin/receive.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/plugin/receive","type":"object","required":["receive"],"properties":{"receive":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/spi/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/spi","basePath":"spi0","anyOf":[{"$ref":"/response/spi/read"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/spi/read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/spi/read","type":"object","required":["data"],"properties":{"data":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/switch/change.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/switch/change","desccription":"value changes are always notified.","type":"object","required":["state"],"properties":{"state":{"type":"string","enum":["none","push","left","right"]},"action":{"type":"string","enum":["get"]}}}

/***/ }),

/***/ "./dist/src/json_schema/response/switch/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/switch","basePath":"switch","anyOf":[{"$ref":"/response/switch/change"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/system/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/system","basePath":"system","anyOf":[{"$ref":"/response/system/pong"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/system/pong.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/system/pong","desccription":"pong response with same key of ping request","type":"object","required":["pong"],"properties":{"pong":{"type":"object","required":["key"],"properties":{"key":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/tcp/connect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/tcp/connect","type":"object","required":["connect"],"properties":{"connect":{"type":"object","required":["message","code"],"properties":{"message":{"type":"string","enum":["ok","Port Used","Port Area Error","Lookup Error","Error"]},"code":{"type":"number"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/tcp/connection.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/tcp/connection","type":"object","required":["connection"],"properties":{"connection":{"type":"object","required":["connected"],"properties":{"connected":{"type":"boolean"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/tcp/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/tcp","basePath":"tcp0","anyOf":[{"$ref":"/response/tcp/read"},{"$ref":"/response/tcp/connect"},{"$ref":"/response/tcp/connection"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/tcp/read.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/tcp/read","desccription":"value changes are always notified.","type":"object","required":["read"],"properties":{"read":{"type":"object","required":["data"],"properties":{"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/uart/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/uart","basePath":"uart0","anyOf":[{"$ref":"/response/uart/receive"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/uart/receive.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/uart/receive","type":"object","properties":{"data":{"$ref":"/dataArray"}}}

/***/ }),

/***/ "./dist/src/json_schema/response/wifi/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/wifi","basePath":"wifi","anyOf":[{"$ref":"/response/wifi/scan"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/wifi/scan.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/wifi/scan","desccription":"wifi scan","type":"object","required":["scan"],"properties":{"scan":{"type":"object","required":["data"],"properties":{"data":{"$ref":"/dataArray"}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ws/index.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ws","basePath":"ws","anyOf":[{"$ref":"/response/ws/ready"},{"$ref":"/response/ws/obniz"},{"$ref":"/response/ws/redirect"}]}

/***/ }),

/***/ "./dist/src/json_schema/response/ws/obniz.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ws/obniz","type":"object","required":["obniz"],"properties":{"obniz":{"type":"object","required":["hw","firmware"],"additionalProperties":false,"properties":{"hw":{"type":"string"},"firmware":{"type":"string"},"metadata":{"type":"string"},"connected_network":{"type":"object","required":["online_at","current_net"],"additionalProperties":false,"properties":{"online_at":{"type":"number"},"net":{"type":"string"},"local_ip":{"type":"string"},"global_ip":{"type":"string"},"wifi":{"type":"object","required":["ssid","mac_address","rssi"],"additionalProperties":false,"properties":{"ssid":{"type":"string"},"mac_address":{"type":"string"},"rssi":{"type":"number"}}},"wifimesh":{"type":"object","required":["mesh_id","parent_obniz_id","root_obniz_id","layer","rssi"],"additionalProperties":false,"properties":{"meshid":{"type":"string"},"parent_obniz_id":{"type":"string"},"root_obniz_id":{"type":"string"},"layer":{"type":"number"},"rssi":{"type":"number"}}}}}}}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ws/ready.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ws/ready","type":"object","required":["ready"],"properties":{"ready":{"type":"boolean","enum":[true]}}}

/***/ }),

/***/ "./dist/src/json_schema/response/ws/redirect.yml":
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema#","id":"/response/ws/redirect","type":"object","required":["redirect"],"properties":{"redirect":{"type":"string"}}}

/***/ }),

/***/ "./dist/src/obniz sync recursive":
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./dist/src/obniz sync recursive";

/***/ }),

/***/ "./dist/src/obniz/Obniz.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const m5stack_basic_1 = __webpack_require__("./dist/src/obniz/libs/hw/m5stack_basic.js");
const m5stickc_1 = __webpack_require__("./dist/src/obniz/libs/hw/m5stickc.js");
const ObnizApi_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizApi.js"));
const ObnizApp_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizApp.js"));
const ObnizDevice_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizDevice.js"));
/**
 * obniz class is the abstract version of obniz Board hardware within JavaScript.
 *
 * By providing obniz id and instantiating it, you can control obniz Board and the connected parts
 * without the details of websocket api.
 *
 *
 * ### obnizOS version and obniz.js version
 *
 * obniz cloud compare your obniz.js version and target device obnizOS version.
 * If your js sdk major number is below from OS version (eg obniz.js is 2.0.0 and obnizOS is 3.0.0) then obniz cloud will alert when connection established.
 * It will work somehow but some functions looses compatibility.
 *
 * ### one device from two program
 *
 * obniz cloud accept multiple websocket connection from multiple obniz.js at same time.
 * every commands from obniz.js will passed to a device and every command from a device will be dispatched to every obniz.js connected to the cloud.
 *
 * But If one of obniz.js established a connection to a device, then target device will send datas only via local connect. So other connected obniz.js only can send datas and never receive datas from a device.
 *
 * If you'd like to receive, you need to specify `local_connect: false` at all of obniz.js to disable local connect.
 *
 */
class Obniz extends ObnizDevice_1.default {
    /**
     * obniz REST api class
     *
     * @returns {ObnizApi}
     */
    static get api() {
        return ObnizApi_1.default;
    }
    /**
     * App Support class
     *
     * @returns {ObnizApp}
     */
    static get App() {
        return ObnizApp_1.default;
    }
}
exports.Obniz = Obniz;
/**
 * M5StickC device
 */
Obniz.M5StickC = m5stickc_1.M5StickC;
Obniz.M5StackBasic = m5stack_basic_1.M5StackBasic;


/***/ }),

/***/ "./dist/src/obniz/ObnizApi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(__webpack_require__("./node_modules/node-fetch/browser.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const package_1 = __importDefault(__webpack_require__("./dist/package.js"));
class ObnizApi {
    constructor(obnizId, options) {
        this.id = obnizId;
        options = options || {};
        this.options = {
            access_token: options.access_token || null,
            obniz_server: options.obniz_server || 'https://obniz.io',
        };
        this.urlBase = this.options.obniz_server + '/obniz/' + this.id;
    }
    /**
     * obniz.js major version string
     */
    get apiVersion() {
        const versionString = package_1.default.version;
        return versionString.split('.').shift();
    }
    /**
     * Get device is online or offline
     *
     * @param callback with result
     */
    getState(callback) {
        return this.postWait('/state', null, callback);
    }
    /**
     * Get device is online or offline
     */
    async getStateWait() {
        const json = await this.postWait('/state', null);
        return json;
    }
    /**
     * post data via obniz REST api
     *
     * @param json
     * @param callback
     */
    async postJsonWait(json, callback) {
        return await this.postWait('/api/' + this.apiVersion, json, callback); // 1 is api version
    }
    async postWait(path, params, callback = null) {
        const url = this.urlBase + path;
        // let query = [];
        // query.push("XXX");
        // if(query.length > 0){
        //   url += "?" + query.join("&");
        // }
        const headers = {};
        headers['Content-Type'] = 'application/json';
        if (this.options.access_token) {
            headers.authorization = 'Bearer ' + this.options.access_token;
        }
        const fetchParams = {
            method: 'POST',
            headers,
        };
        if (params) {
            fetchParams.body = JSON.stringify(params);
        }
        const res = await node_fetch_1.default(url, fetchParams);
        const json = await res.json();
        if (typeof callback === 'function') {
            callback(json);
        }
        return json;
    }
    get(path, callback) {
        const url = this.urlBase + path;
        // let query = [];
        // query.push("XXX");
        // if(query.length > 0){
        //   url += "?" + query.join("&");
        // }
        const headers = {};
        headers['Content-Type'] = 'application/json';
        if (this.options.access_token) {
            headers.authorization = 'Bearer ' + this.options.access_token;
        }
        const fetchParams = {
            method: 'GET',
            headers,
        };
        return node_fetch_1.default(url, fetchParams)
            .then((res) => {
            return res.json();
        })
            .then((json) => {
            if (typeof callback === 'function') {
                callback(json);
            }
            return new Promise((resolve) => {
                resolve(json);
            });
        });
    }
}
exports.default = ObnizApi;


/***/ }),

/***/ "./dist/src/obniz/ObnizApp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizApp
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ObnizApp {
    /**
     * Determine obniz.js is running on obniz Cloud or not.
     */
    static isCloudRunning() {
        return typeof done === 'function';
    }
    /**
     * request object on obniz Cloud execution for webhook call.
     *
     * ```javascript
     * // JavaScript example
     * const req = Obniz.App.req();
     * console.log(req.query);
     * console.log(req.body);
     * ```
     *
     */
    static req() {
        if (this.isCloudRunning()) {
            return req;
        }
        return null;
    }
    /**
     * done call for obniz Cloud execution.
     * Pass arguemnt for update cloud execution status.
     *
     * ```javascript
     * // JavaScript example
     * Obniz.App.done({
     *   status: 'success',  // 'success' | 'error'
     *   text: 'ex. Door Opened'
     * });
     * ```
     *
     */
    static done(arg) {
        if (this.isCloudRunning()) {
            // wait a few for last communication sent to socket.
            setTimeout(() => {
                done(arg);
            }, 1 * 1000);
        }
        else {
            console.error(`This program is not running on obniz Cloud.`);
        }
    }
    /**
     * Configration by user for This App. Only Available for BrowserApp
     */
    static configs() {
        if (typeof configs === 'object') {
            return configs;
        }
        else {
            return null;
        }
    }
}
exports.default = ObnizApp;


/***/ }),

/***/ "./dist/src/obniz/ObnizComponents.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ble_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/ble.js"));
const display_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/display.js"));
const switch_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/switch.js"));
const ad_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/ad.js"));
const directive_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/directive.js"));
const i2c_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/i2c.js"));
const io_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/io.js"));
const pwm_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/pwm.js"));
const spi_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/spi.js"));
const uart_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/uart.js"));
const logicanalyzer_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/measurements/logicanalyzer.js"));
const measure_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/measurements/measure.js"));
const wifi_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/network/wifi.js"));
const plugin_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/plugin/plugin.js"));
const tcp_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/protocol/tcp.js"));
const ObnizParts_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizParts.js"));
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const hw_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/hw/index.js"));
const grove_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/grove.js"));
class ObnizComponents extends ObnizParts_1.default {
    constructor(id, options) {
        super(id, options);
        this.pongObservers = [];
        this._allComponentKeys = [];
    }
    /**
     * Output pin Vcc and Gnd
     *
     * @param vcc
     * @param gnd
     * @param drive
     */
    setVccGnd(vcc, gnd, drive) {
        if (this.isValidIO(vcc)) {
            if (drive) {
                this.getIO(vcc).drive(drive);
            }
            this.getIO(vcc).output(true);
        }
        if (this.isValidIO(gnd)) {
            if (drive) {
                this.getIO(gnd).drive(drive);
            }
            this.getIO(gnd).output(false);
        }
    }
    /**
     * Get IO module from pin no
     *
     * @param io
     */
    getIO(io) {
        this.throwErrorIfOffline();
        if (!this.isValidIO(io)) {
            throw new Error('io ' + io + ' is not valid io');
        }
        return this['io' + io];
    }
    /**
     * GET AD module from pin no
     *
     * @param io
     */
    getAD(io) {
        this.throwErrorIfOffline();
        if (!this.isValidIO(io)) {
            throw new Error('ad ' + io + ' is not valid io');
        }
        return this['ad' + io];
    }
    /**
     * It returns unused PWM module.
     */
    getFreePwm() {
        return this._getFreePeripheralUnit('pwm');
    }
    /**
     * It returns unused I2C module.
     */
    getFreeI2C() {
        return this._getFreePeripheralUnit('i2c');
    }
    /**
     * It returns setuped I2C module .
     *
     * @param config
     */
    getI2CWithConfig(config) {
        if (typeof config !== 'object') {
            throw new Error('getI2CWithConfig need config arg');
        }
        if (config.i2c) {
            return config.i2c;
        }
        const i2c = this.getFreeI2C();
        i2c.start(config);
        return i2c;
    }
    /**
     * It returns unused SPI module.
     */
    getFreeSpi() {
        return this._getFreePeripheralUnit('spi');
    }
    /**
     * It returns setuped SPI module.
     *
     * @param config
     */
    getSpiWithConfig(config) {
        if (typeof config !== 'object') {
            throw new Error('getSpiWithConfig need config arg');
        }
        if (config.spi) {
            return config.spi;
        }
        const spi = this.getFreeSpi();
        spi.start(config);
        return spi;
    }
    /**
     * It returns unused UART module.
     */
    getFreeUart() {
        return this._getFreePeripheralUnit('uart');
    }
    /**
     * It returns unused TCP module.
     */
    getFreeTcp() {
        return this._getFreePeripheralUnit('tcp');
    }
    hasExtraInterface(interfaceName) {
        return !!this.getExtraInterface(interfaceName);
    }
    getExtraInterface(interfaceName) {
        if (this._hwDefinition.extraInterface &&
            this._hwDefinition.extraInterface[interfaceName]) {
            return this._hwDefinition.extraInterface[interfaceName];
        }
        return null;
    }
    _close() {
        super._close();
        if (this.options.reset_obniz_on_ws_disconnection) {
            this._resetComponents();
        }
    }
    _callOnConnect() {
        this._prepareComponents();
        super._callOnConnect();
    }
    _prepareComponents() {
        if (this._allComponentKeys.length !== 0) {
            return;
        }
        this._hwDefinition = hw_1.default.getDefinitionFor(this.hw);
        if (!this._hwDefinition) {
            throw new Error(`unkown hw ${this.hw || ''}`);
        }
        const hw_peripherals = this._hwDefinition.peripherals;
        this._hw_peripherals = hw_peripherals;
        const hw_embeds = this._hwDefinition.embeds;
        const hw_protocol = this._hwDefinition.protocol;
        const hw_network = this._hwDefinition.network;
        const shared_map = {
            io: directive_1.default,
            logicAnalyzer: logicanalyzer_1.default,
            measure: measure_1.default,
            plugin: plugin_1.default,
        };
        const peripheral_map = {
            io: io_1.default,
            ad: ad_1.default,
            uart: uart_1.default,
            spi: spi_1.default,
            i2c: i2c_1.default,
            pwm: pwm_1.default,
            grove: grove_1.default,
        };
        const ble = ble_1.default;
        const embeds_map = {
            display: display_1.default,
            switch: switch_1.default,
            ble,
        };
        const protocol_map = {
            tcp: tcp_1.default,
        };
        const network_map = {
            wifi: wifi_1.default,
        };
        for (const key in shared_map) {
            const Class = shared_map[key];
            this[key] = new Class(this);
            this._allComponentKeys.push(key);
        }
        if (hw_peripherals) {
            for (const key in peripheral_map) {
                if (hw_peripherals[key]) {
                    const units = hw_peripherals[key].units;
                    const Class = peripheral_map[key];
                    for (const unitId in units) {
                        const unitIdNumber = parseInt(unitId);
                        this[key + unitIdNumber] = new Class(this, unitIdNumber, units[unitId]);
                        this._allComponentKeys.push(key + unitIdNumber);
                    }
                }
            }
        }
        if (hw_embeds) {
            for (const key in embeds_map) {
                if (hw_embeds[key]) {
                    const Class = embeds_map[key];
                    this[key] = new Class(this, hw_embeds[key]);
                    this._allComponentKeys.push(key);
                    if (typeof this[key].debugHandler === 'function') {
                        this[key].debugHandler = (text) => {
                            this._print_debug(text);
                        };
                    }
                }
            }
        }
        if (hw_protocol) {
            for (const key in protocol_map) {
                if (hw_protocol[key]) {
                    const units = hw_protocol[key].units;
                    const Class = protocol_map[key];
                    for (const unitId in units) {
                        const unitIdNumber = parseInt(unitId);
                        this[key + unitIdNumber] = new Class(this, unitIdNumber);
                        this._allComponentKeys.push(key + unitIdNumber);
                    }
                }
            }
        }
        if (hw_network) {
            for (const key in network_map) {
                if (hw_network[key]) {
                    const Class = network_map[key];
                    this[key] = new Class(this, hw_embeds[key]);
                    this._allComponentKeys.push(key);
                }
            }
        }
    }
    _resetComponents() {
        this._print_debug('components state resets');
        for (const key of this._allComponentKeys) {
            this[key]._reset();
        }
    }
    _notifyToModule(obj) {
        super._notifyToModule(obj);
        for (const key of this._allComponentKeys) {
            const targetComponent = this[key];
            if (targetComponent instanceof ComponentAbstact_1.ComponentAbstract) {
                const basePath = targetComponent.schemaBasePath();
                // eslint-disable-next-line no-prototype-builtins
                if (basePath && obj.hasOwnProperty(basePath)) {
                    targetComponent.notifyFromObniz(obj[basePath]);
                }
            }
            else {
                if (key === 'logicAnalyzer') {
                    // eslint-disable-next-line no-prototype-builtins
                    if (obj.hasOwnProperty('logic_analyzer')) {
                        this.logicAnalyzer.notified(obj.logic_analyzer);
                    }
                    continue;
                }
                // eslint-disable-next-line no-prototype-builtins
                if (obj.hasOwnProperty(key)) {
                    /* because of nullable */
                    targetComponent.notified(obj[key]);
                }
            }
        }
    }
    _handleSystemCommand(wsObj) {
        super._handleSystemCommand(wsObj);
        // ping pong
        if (wsObj.pong) {
            for (const callback of this.pongObservers) {
                callback(wsObj);
            }
        }
    }
    addPongObserver(callback) {
        if (callback) {
            this.pongObservers.push(callback);
        }
    }
    removePongObserver(callback) {
        if (this.pongObservers.includes(callback)) {
            const index = this.pongObservers.indexOf(callback);
            this.pongObservers.splice(index, 1);
        }
    }
    _getFreePeripheralUnit(peripheral) {
        this.throwErrorIfOffline();
        for (const key of this._allComponentKeys) {
            if (key.indexOf(peripheral) === 0) {
                /* "io" for "io0" */
                const obj = this[key];
                if (typeof obj === 'object' && !obj.isUsed()) {
                    obj.used = true;
                    return obj;
                }
            }
        }
        throw new Error(`No More ${peripheral} Available.`);
    }
}
exports.default = ObnizComponents;


/***/ }),

/***/ "./dist/src/obniz/ObnizConnection.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ws_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/webpackReplace/ws.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const package_1 = __importDefault(__webpack_require__("./dist/package.js")); // pakcage.js will be created from package.json on build.
const wscommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
class ObnizConnection extends eventemitter3_1.default {
    constructor(id, options) {
        super();
        this._measureTraffic = null;
        this.socket = null;
        this.socket_local = null;
        this.wscommand = null;
        this.wscommands = [];
        this._sendQueueTimer = null;
        this._sendQueue = null;
        this._waitForLocalConnectReadyTimer = null;
        this._sendPool = null;
        this._repeatInterval = 100;
        this._isLoopProcessing = false;
        this._nextLoopTimeout = null;
        this._nextPingTimeout = null;
        this._nextAutoConnectLoopTimeout = null;
        this._lastDataReceivedAt = 0;
        this._localConnectIp = null;
        this.isNode = typeof window === 'undefined';
        this.id = id;
        this.socket = null;
        this.socket_local = null;
        this.debugprint = false;
        this.debugprintBinary = false;
        this._onConnectCalled = false;
        this.hw = undefined;
        this.firmware_ver = undefined;
        this.connectionState = 'closed'; // closed/connecting/connected/closing
        this.bufferdAmoundWarnBytes = 10 * 1000 * 1000; // 10M bytes
        this._connectionRetryCount = 0;
        if (!options) {
            options = {};
        }
        this.options = {
            binary: options.binary === false ? false : true,
            local_connect: options.local_connect === false ? false : true,
            debug_dom_id: options.debug_dom_id || 'obniz-debug',
            auto_connect: options.auto_connect === false ? false : true,
            access_token: options.access_token || null,
            obniz_server: options.obniz_server || 'wss://obniz.io',
            reset_obniz_on_ws_disconnection: options.reset_obniz_on_ws_disconnection === false ? false : true,
            obnizid_dialog: options.obnizid_dialog === false ? false : true,
        };
        if (this.options.binary) {
            this.wscommand = this.constructor.WSCommand;
            const classes = this.wscommand.CommandClasses;
            this.wscommands = [];
            for (const class_name in classes) {
                this.wscommands.push(new classes[class_name]());
            }
        }
        if (this.autoConnect) {
            this._startAutoConnectLoopInBackground();
        }
    }
    /**
     * obniz.js version
     */
    static get version() {
        return package_1.default.version;
    }
    /**
     * @ignore
     * @constructor
     */
    static get WSCommand() {
        return wscommand_1.default;
    }
    static isIpAddress(str) {
        const regex = /^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$/;
        return regex.exec(str) !== null;
    }
    get autoConnect() {
        return this.options.auto_connect;
    }
    set autoConnect(val) {
        const before = this.options.auto_connect;
        this.options.auto_connect = !!val;
        if (before !== this.options.auto_connect) {
            if (this.options.auto_connect) {
                this._startAutoConnectLoopInBackground();
            }
            else {
                this._stopAutoConnectLoopInBackground();
            }
        }
    }
    startCommandPool() {
        this._sendPool = [];
    }
    endCommandPool() {
        const pool = this._sendPool;
        this._sendPool = null;
        return pool;
    }
    /**
     * With this you wait until the connection to obniz Board succeeds.
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678');
     *
     * await obniz.connectWait();
     *
     * obniz.io0.output(true);
     * await obniz.closeWait();
     *
     * ```
     *
     *
     * - with timeout
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678');
     *
     * await obniz.connectWait({timeout:10});  //timeout 10sec
     *
     * if(connected){
     *    obniz.io0.output(true);
     *    await obniz.closeWait();
     * }
     * ```
     *
     * - with auto_connect:false
     *
     * If the param auto_connect is set as false, it will try to connect only once and, if unsuccessful, return false.
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678',{auto_connect: false});
     *
     * var connected = await obniz.connectWait();  //try once
     *
     * if(connected){
     *   obniz.io0.output(true);
     *   await obniz.closeWait();
     * }
     * ```
     *
     * @param option.timeout timeout in seconds
     * @return False will be returned when connection is not established within a set timeout.
     */
    async connectWait(option) {
        option = option || {};
        const timeout = option.timeout || null;
        if (this.connectionState === 'connected') {
            return true;
        }
        if (!this.autoConnect) {
            // only try once
            try {
                await this.tryWsConnectOnceWait();
                return true;
            }
            catch (e) {
                return false;
            }
        }
        return new Promise((resolve, reject) => {
            if (this._onConnectCalled) {
                resolve(true);
                return;
            }
            this.once('connect', () => {
                resolve(true);
            });
            if (timeout) {
                setTimeout(() => {
                    resolve(false);
                }, timeout * 1000);
            }
        });
    }
    /**
     * You can connect to obniz Board manually by calling connect() when auto_connect is set to be false.
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678', { auto_connect: false });
     *
     * obniz.connect();
     * obniz.onconnect = async function() {
     *  obniz.io0.output(true);
     * }
     * ```
     */
    connect() {
        if (this.connectionState === 'connected' ||
            this.connectionState === 'connecting') {
            return;
        }
        this.tryWsConnectOnceWait().catch((e) => {
            this.error(e);
        });
    }
    /**
     * This closes the current connection.
     * You need to set auto_connect to false. Otherwise the connection will be recovered.
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678', {
     *   auto_connect: false,
     *   reset_obniz_on_ws_disconnection: false
     * });
     *
     * obniz.connect();
     * obniz.onconnect = async function() {
     *   obniz.io0.output(true);
     *   obniz.close();
     * }
     * ```
     *
     * @deprecated replace with {@link closeWait}
     */
    close() {
        // noinspection JSIgnoredPromiseFromCall
        this.closeWait().catch((e) => {
            // background
            this.error(e);
        });
    }
    /**
     * This closes the current connection.
     * You need to set auto_connect to false. Otherwise the connection will be recovered.
     *
     * ```javascript
     * var obniz = new Obniz('1234-5678', {
     *   auto_connect: false,
     *   reset_obniz_on_ws_disconnection: false
     * });
     *
     * obniz.connect();
     * obniz.onconnect = async function() {
     *   obniz.io0.output(true);
     *   await obniz.closeWait();
     * }
     * ```
     *
     */
    async closeWait() {
        this.autoConnect = false;
        if (this.connectionState === 'connecting' ||
            this.connectionState === 'connected' ||
            this.connectionState === 'closing') {
            this.connectionState = 'closing';
            const p = new Promise((resolve) => {
                this.once('_close', resolve);
            });
            this._disconnectCloudRequest();
            await p;
        }
    }
    /**
     * Send json/binary data to obniz Cloud or device.
     *
     * @param obj send data
     * @param options send option
     * @param options.local_connect If false, send data via gloval internet.
     */
    send(obj, options) {
        options = options || {};
        options.local_connect = options.local_connect !== false;
        options.connect_check = options.connect_check !== false;
        if (options.connect_check && this.connectionState !== 'connected') {
            throw new ObnizError_1.ObnizOfflineError();
        }
        try {
            if (!obj || typeof obj !== 'object') {
                this.log('obnizjs. didnt send ', obj);
                return;
            }
            if (Array.isArray(obj)) {
                for (let i = 0; i < obj.length; i++) {
                    this.send(obj[i]);
                }
                return;
            }
            if (this._sendPool) {
                this._sendPool.push(obj);
                return;
            }
            let sendData = JSON.stringify([obj]);
            if (this.debugprint) {
                this._print_debug('send: ' + sendData);
            }
            /* compress */
            if (this.wscommand && options.local_connect) {
                let compressed;
                try {
                    compressed = this.wscommand.compress(this.wscommands, JSON.parse(sendData)[0]);
                    if (compressed) {
                        sendData = compressed;
                        if (this.debugprintBinary) {
                            this.log('binalized: ' + new Uint8Array(compressed).toString());
                        }
                    }
                }
                catch (e) {
                    this.error({
                        alert: 'error',
                        message: '------ errored json -------',
                    });
                    this.error({
                        alert: 'error',
                        message: sendData,
                    });
                    throw e;
                }
            }
            /* queue sending */
            if (typeof sendData === 'string') {
                this._drainQueued();
                this._sendRouted(sendData);
            }
            else {
                if (this._sendQueue) {
                    this._sendQueue.push(sendData);
                }
                else {
                    this._sendQueue = [sendData];
                    this._sendQueueTimer = setTimeout(this._drainQueued.bind(this), 0);
                }
            }
        }
        catch (e) {
            this.log(e);
        }
    }
    /**
     * @ignore
     * @param msg
     */
    warning(msg) {
        this.log('warning:' + msg);
    }
    /**
     * @ignore
     * @param msg
     */
    error(msg) {
        console.error(`[obniz ${this.id}] error:${msg.message}`);
    }
    /**
     * @ignore
     */
    log(...args) {
        console.log(new Date(), `[obniz ${this.id}]`, ...args);
    }
    /**
     * @ignore
     * @private
     */
    _runUserCreatedFunction(func, ...args) {
        if (!func) {
            return;
        }
        if (typeof func !== 'function') {
            return;
        }
        let promise;
        try {
            promise = func(...args);
            if (promise instanceof Promise) {
                promise.catch((err) => {
                    setTimeout(() => {
                        throw err;
                    });
                });
            }
        }
        catch (err) {
            console.error(`obniz.js handled Exception inside of ${func}`);
            setTimeout(() => {
                throw err;
            });
        }
        return promise;
    }
    /**
     * Sets the execution interval of onLoop function.
     * Changes will be reflected after the next onloop is executed.
     *
     * @param interval interval of execution in milliseconds.
     */
    setLoopInterval(interval) {
        this._repeatInterval = interval;
    }
    /**
     * Set onloop function. Use onloop property instead. This is deprecated function.
     *
     * @param callback
     * @param interval  default 100. It mean 100ms interval loop.
     * @deprecated
     */
    repeat(callback, interval) {
        if (this.onloop) {
            this.onloop = callback;
            this._repeatInterval = interval || this._repeatInterval || 100;
            return;
        }
        this.onloop = callback;
        this._repeatInterval = interval || 100;
    }
    _close() {
        this._stopLoopInBackground();
        this._drainQueued();
        this._disconnectLocal();
        this._disconnectCloud();
        this._onConnectCalled = false;
    }
    wsOnOpen() {
        this._print_debug('ws connected');
        this._connectionRetryCount = 0;
        // wait for {ws:{ready:true}} object
        if (typeof this.onopen === 'function') {
            this.onopen(this);
        }
    }
    wsOnMessage(data) {
        if (Array.isArray(data)) {
            for (const b of data) {
                this.wsOnMessage(data);
            }
            return;
        }
        this._lastDataReceivedAt = new Date().getTime();
        if (this._measureTraffic) {
            const trafficSize = this._calcTrafficSize(data, this._measureTraffic.ceilByte);
            this._measureTraffic.readByte += trafficSize;
            this._measureTraffic.readCount++;
        }
        try {
            let json;
            if (typeof data === 'string') {
                json = JSON.parse(data);
            }
            else if (this.wscommands) {
                if (this.debugprintBinary) {
                    this.log('binalized: ' + new Uint8Array(data).toString());
                }
                json = this._binary2Json(data);
            }
            if (Array.isArray(json)) {
                for (const i in json) {
                    this._notifyToModule(json[i]);
                }
            }
            else {
                // invalid json
            }
        }
        catch (e) {
            console.error(e);
            this.error(e);
        }
    }
    wsOnClose(event) {
        this._print_debug(`closed from remote event=${event}`);
        const beforeOnConnectCalled = this._onConnectCalled;
        this._close();
        this.connectionState = 'closed';
        this.emit('_close', this);
        if (beforeOnConnectCalled === true) {
            this.emit('close', this);
            this._runUserCreatedFunction(this.onclose, this);
        }
        if (this.autoConnect) {
            this._startAutoConnectLoopInBackground();
        }
        this._stopPingLoopInBackground();
    }
    wsOnError(event) {
        this._print_debug(`ws onerror event=${event}`);
    }
    wsOnUnexpectedResponse(req, res) {
        if (res && res.statusCode === 404) {
            this._print_debug('obniz not online');
        }
        else {
            this._print_debug( true ? res.statusCode : undefined);
        }
        this._disconnectCloudRequest();
    }
    async tryWsConnectOnceWait(desired_server) {
        this.connectionState = 'connecting';
        await this._connectCloudWait(desired_server);
        try {
            let localConnectTimeoutRef;
            const localConnectTimeout = new Promise((resolve, reject) => {
                const localConnectTimeoutError = new Error('Cannot use local_connect because the connection was timeouted');
                localConnectTimeoutRef = setTimeout(() => {
                    reject(localConnectTimeoutError);
                }, 3000);
            });
            await Promise.race([localConnectTimeout, this._connectLocalWait()]);
            if (localConnectTimeoutRef) {
                clearTimeout(localConnectTimeoutRef);
            }
        }
        catch (e) {
            // cannot connect local
            this.error(e);
            this._disconnectLocal();
        }
        this._callOnConnect();
    }
    _connectCloudWait(desired_server) {
        let server = this.options.obniz_server;
        if (desired_server) {
            server = '' + desired_server;
        }
        if (this.socket && this.socket.readyState <= 1) {
            // if already connected or connecting, reset it.
            this._close();
        }
        let url = server + '/obniz/' + this.id + '/ws/1';
        if (this.constructor.isIpAddress(this.id)) {
            url = `ws://${this.id}/`;
        }
        const query = [];
        if (this.constructor.version) {
            query.push('obnizjs=' + this.constructor.version);
        }
        if (this.options.access_token) {
            query.push('access_token=' + this.options.access_token);
        }
        if (this.wscommand) {
            query.push('accept_binary=true');
        }
        if (query.length > 0) {
            url += '?' + query.join('&');
        }
        this._print_debug('connecting to ' + url);
        return new Promise((resolve, reject) => {
            const release = () => {
                if (redirect) {
                    this.off('_cloudConnectRedirect', redirect);
                    redirect = null;
                }
                if (ready) {
                    this.off('_cloudConnectReady', ready);
                    ready = null;
                }
                if (closed) {
                    this.off('_cloudConnectClose', closed);
                    closed = null;
                }
            };
            let redirect = (host) => {
                release();
                this._connectCloudWait(host).then(resolve).catch(reject);
            };
            this.once('_cloudConnectRedirect', redirect);
            let ready = () => {
                release();
                resolve();
            };
            this.once('_cloudConnectReady', ready);
            let closed = () => {
                release();
                reject(new Error('Connection closed'));
            };
            this.once('_cloudConnectClose', closed);
            this.socket = this._createCloudSocket(url);
        });
    }
    _createCloudSocket(url) {
        const socket = new ws_1.default(url);
        socket.on('open', () => {
            this.wsOnOpen();
        });
        socket.on('message', (msg) => {
            this.wsOnMessage(msg);
        });
        socket.on('close', (event) => {
            this.wsOnClose(event);
        });
        socket.on('error', (err) => {
            this.wsOnError(err);
        });
        socket.on('unexpected-response', (req, res) => {
            this.wsOnUnexpectedResponse(req, res);
        });
        return socket;
    }
    _connectLocalWait() {
        const host = this._localConnectIp;
        if (!host || !this.wscommand || !this.options.local_connect) {
            return;
            // cannot local connect
            // throw new Error(
            //   'Cannot use local_connect because target device is on a different network'
            // );
        }
        if (!this._canConnectToInsecure()) {
            return;
            // cannot local connect
            // throw new Error(
            //   'Cannot use local_connect because this page use HTTP protocol'
            // );
        }
        const url = 'ws://' + host;
        this._print_debug('local connect to ' + url);
        const ws = new ws_1.default(url);
        ws.on('open', () => {
            this._print_debug('connected to ' + url);
            this.emit('_localConnectReady');
        });
        ws.on('message', (data) => {
            this._print_debug('recvd via local');
            this.wsOnMessage(data);
        });
        ws.on('close', (event) => {
            this.log('local websocket closed');
            this._disconnectLocal();
        });
        ws.on('error', (err) => {
            console.error('local websocket error.', err);
            this._disconnectLocal();
        });
        ws.on('unexpected-response', (event) => {
            this.log('local websocket closed');
            this._disconnectLocal();
        });
        this.socket_local = ws;
        return new Promise((resolve, reject) => {
            this.once('_localConnectReady', resolve);
            this.once('_localConnectClose', () => {
                reject(new Error('Cannot use local_connect because the connection was rejected'));
            });
        });
    }
    _disconnectLocal() {
        if (this.socket_local) {
            if (this.socket_local.readyState <= 1) {
                this.socket_local.close();
            }
            this._clearSocket(this.socket_local);
            delete this.socket_local;
        }
        this.emit('_localConnectClose');
    }
    _disconnectCloudRequest() {
        if (this.socket) {
            if (this.socket.readyState <= 1) {
                // Connecting & Connected
                this.connectionState = 'closing';
                this.socket.close(1000, 'close');
            }
        }
    }
    _disconnectCloud(notify = true) {
        this._disconnectLocal();
        if (this.socket) {
            if (this.socket.readyState <= 1) {
                this.socket.close(1000, 'close');
            }
            this._clearSocket(this.socket);
            delete this.socket;
        }
        if (notify) {
            this.emit('_cloudConnectClose');
        }
    }
    _clearSocket(socket) {
        if (!socket) {
            return;
        }
        /* send queue */
        if (this._sendQueueTimer) {
            delete this._sendQueue;
            clearTimeout(this._sendQueueTimer);
            this._sendQueueTimer = null;
        }
        /* unbind */
        const shouldRemoveObservers = [
            'open',
            'message',
            'close',
            'error',
            'unexpected-response',
        ];
        for (let i = 0; i < shouldRemoveObservers.length; i++) {
            socket.removeAllListeners(shouldRemoveObservers[i]);
        }
    }
    /**
     * This function will be called before obniz.onconnect called;
     */
    _beforeOnConnect() {
        // do nothing.
    }
    _callOnConnect() {
        this.connectionState = 'connected';
        const currentTime = new Date().getTime();
        this._lastDataReceivedAt = currentTime; // reset
        this._beforeOnConnect();
        this.emit('connect', this);
        let promise;
        this._onConnectCalled = true;
        if (typeof this.onconnect === 'function') {
            promise = this._runUserCreatedFunction(this.onconnect, this);
        }
        this._startPingLoopInBackground();
        if (promise instanceof Promise) {
            promise.finally(() => {
                this._startLoopInBackgroundWait();
            });
        }
        else {
            this._startLoopInBackgroundWait();
        }
    }
    _print_debug(str) {
        if (this.debugprint) {
            this.log(str);
        }
    }
    _sendRouted(data) {
        if (this._measureTraffic) {
            const trafficSize = this._calcTrafficSize(data, this._measureTraffic.ceilByte);
            this._measureTraffic.sendByte += trafficSize;
            this._measureTraffic.sendCount++;
        }
        if (this.socket_local &&
            this.socket_local.readyState === 1 &&
            typeof data !== 'string') {
            this._print_debug('send via local');
            this.socket_local.send(data);
            if (this.socket_local.bufferedAmount > this.bufferdAmoundWarnBytes) {
                this.warning('over ' + this.socket_local.bufferedAmount + ' bytes queued');
            }
            return;
        }
        if (this.socket && this.socket.readyState === 1) {
            this.socket.send(data);
            if (this.socket.bufferedAmount > this.bufferdAmoundWarnBytes) {
                this.warning('over ' + this.socket.bufferedAmount + ' bytes queued');
            }
            return;
        }
    }
    _drainQueued() {
        if (!this._sendQueue) {
            return;
        }
        let expectSize = 0;
        for (let i = 0; i < this._sendQueue.length; i++) {
            expectSize += this._sendQueue[i].length;
        }
        let filled = 0;
        const sendData = new Uint8Array(expectSize);
        for (let i = 0; i < this._sendQueue.length; i++) {
            sendData.set(this._sendQueue[i], filled);
            filled += this._sendQueue[i].length;
        }
        this._sendRouted(sendData);
        delete this._sendQueue;
        if (this._sendQueueTimer) {
            clearTimeout(this._sendQueueTimer);
            this._sendQueueTimer = null;
        }
    }
    _notifyToModule(obj) {
        if (this.debugprint) {
            this._print_debug(JSON.stringify(obj));
        }
        if (obj.ws) {
            this._handleWSCommand(obj.ws);
            return;
        }
        if (obj.system) {
            this._handleSystemCommand(obj.system);
            return;
        }
    }
    _canConnectToInsecure() {
        if (this.isNode) {
            return true;
        }
        else {
            return location.protocol !== 'https:';
        }
    }
    _handleWSCommand(wsObj) {
        if (wsObj.ready) {
            const wsObniz = wsObj.obniz;
            this.firmware_ver = wsObniz.firmware;
            this.hw = wsObniz.hw;
            if (!this.hw) {
                this.hw = 'obnizb1';
            }
            if (this.wscommands) {
                for (let i = 0; i < this.wscommands.length; i++) {
                    const command = this.wscommands[i];
                    command.setHw({
                        hw: this.hw,
                        firmware: this.firmware_ver,
                    });
                }
            }
            if (this.options.reset_obniz_on_ws_disconnection) {
                this.resetOnDisconnect(true);
            }
            if (wsObniz.metadata) {
                try {
                    this.metadata = JSON.parse(wsObj.obniz.metadata);
                }
                catch (e) {
                    // ignore parsing error.
                }
            }
            if (wsObniz.connected_network) {
                this.connected_network = wsObniz.connected_network;
            }
            if (wsObj.local_connect && wsObj.local_connect.ip) {
                this._localConnectIp = wsObj.local_connect.ip;
            }
            this.emit('_cloudConnectReady');
        }
        if (wsObj.redirect) {
            const urlString = wsObj.redirect;
            this._print_debug('WS connection changed to ' + urlString);
            const url = new URL(urlString);
            const host = url.origin;
            const paths = url.pathname;
            if (paths && paths.split('/').length === 5) {
                // migrate obnizID
                this.id = paths.split('/')[2];
            }
            /* close current ws immediately */
            this._disconnectCloud(false);
            this.emit('_cloudConnectRedirect', host);
        }
    }
    _handleSystemCommand(wsObj) {
        // do nothing.
    }
    _binary2Json(binary) {
        let data = new Uint8Array(binary);
        const json = [];
        while (data !== null) {
            const frame = wscommand_1.default.dequeueOne(data);
            if (!frame) {
                break;
            }
            const obj = {};
            for (let i = 0; i < this.wscommands.length; i++) {
                const command = this.wscommands[i];
                if (command.module === frame.module) {
                    command.notifyFromBinary(obj, frame.func, frame.payload);
                    break;
                }
            }
            json.push(obj);
            data = frame.next;
        }
        return json;
    }
    async _startLoopInBackgroundWait() {
        this._stopLoopInBackground();
        if (this._isLoopProcessing || this.connectionState !== 'connected') {
            return;
        }
        this._isLoopProcessing = true;
        try {
            if (typeof this.onloop === 'function') {
                await this.onloop(this);
            }
        }
        catch (e) {
            console.error(`obniz.js handled Exception inside of obniz.onloop function`);
            console.error(e);
        }
        this._isLoopProcessing = false;
        if (this._nextLoopTimeout || this.connectionState !== 'connected') {
            return;
        }
        const interval = typeof this.onloop === 'function' ? this._repeatInterval : 100;
        this._nextLoopTimeout = setTimeout(this._startLoopInBackgroundWait.bind(this), interval);
    }
    _stopLoopInBackground() {
        if (this._nextLoopTimeout) {
            clearTimeout(this._nextLoopTimeout);
            this._nextLoopTimeout = null;
        }
    }
    _startAutoConnectLoopInBackground() {
        if (!this.autoConnect) {
            return;
        }
        this.connectionState = 'connecting';
        this._connectionRetryCount++;
        let tryAfter = this._connectionRetryCount === 1 ? 0 : 1000;
        if (this._connectionRetryCount > 15) {
            tryAfter = (this._connectionRetryCount - 15) * 1000;
            const Limit = this.isNode ? 60 * 1000 : 10 * 1000;
            if (tryAfter > Limit) {
                tryAfter = Limit;
            }
        }
        this._stopAutoConnectLoopInBackground();
        this._nextAutoConnectLoopTimeout = setTimeout(async () => {
            if (this._nextAutoConnectLoopTimeout) {
                clearTimeout(this._nextAutoConnectLoopTimeout);
            }
            this._nextAutoConnectLoopTimeout = null;
            if (!this.autoConnect) {
                return;
            }
            try {
                await this.tryWsConnectOnceWait();
            }
            catch (e) {
                // cannot connect
                this._startAutoConnectLoopInBackground();
            }
        }, tryAfter);
    }
    _stopAutoConnectLoopInBackground() {
        if (this._nextAutoConnectLoopTimeout) {
            clearTimeout(this._nextAutoConnectLoopTimeout);
            this._nextAutoConnectLoopTimeout = null;
        }
    }
    _startPingLoopInBackground() {
        if (this._nextPingTimeout) {
            clearTimeout(this._nextPingTimeout);
        }
        this._nextPingTimeout = setTimeout(async () => {
            const loopInterval = 60 * 1000; // 60 sec
            const loopTimeout = 30 * 1000; // 30 sec
            if (this._nextPingTimeout) {
                clearTimeout(this._nextPingTimeout);
            }
            this._nextPingTimeout = null;
            if (this.connectionState === 'connected') {
                const currentTime = new Date().getTime();
                // after 15 sec from last data received
                if (this._lastDataReceivedAt + loopTimeout < currentTime) {
                    const time = this._lastDataReceivedAt;
                    try {
                        const p = this.pingWait();
                        const wait = new Promise((resolve, reject) => {
                            setTimeout(reject, loopTimeout);
                        });
                        await Promise.race([p, wait]);
                        // this.log("ping/pong success");
                    }
                    catch (e) {
                        if (this.connectionState !== 'connected') {
                            // already closed
                        }
                        else if (time !== this._lastDataReceivedAt) {
                            // this will be disconnect -> reconnect while pingWait
                        }
                        else {
                            // ping error or timeout
                            // this.error("ping/pong response timeout error");
                            this.wsOnClose('ping/pong response timeout error');
                            return;
                        }
                    }
                }
                else {
                    // this.log("ping/pong not need");
                }
                if (this.connectionState === 'connected') {
                    if (!this._nextPingTimeout) {
                        this._nextPingTimeout = setTimeout(this._startPingLoopInBackground.bind(this), loopInterval);
                    }
                }
            }
        }, 0);
    }
    _stopPingLoopInBackground() {
        if (this._nextPingTimeout) {
            clearTimeout(this._nextPingTimeout);
            this._nextPingTimeout = null;
        }
    }
    throwErrorIfOffline() {
        if (this.connectionState !== 'connected') {
            throw new ObnizError_1.ObnizOfflineError();
        }
    }
    startTrafficMeasurement(ceil = 1) {
        if (!this.socket_local) {
            throw new Error('Cannot measure traffic data outside of local connect');
        }
        if (!this._measureTraffic) {
            this._measureTraffic = {
                ceilByte: ceil,
                readByte: 0,
                readCount: 0,
                sendByte: 0,
                sendCount: 0,
            };
        }
    }
    getTrafficData() {
        if (!this._measureTraffic) {
            return {
                readByte: 0,
                readCount: 0,
                sendByte: 0,
                sendCount: 0,
                ceilByte: 1,
            };
        }
        return {
            readByte: this._measureTraffic.readByte,
            readCount: this._measureTraffic.readCount,
            sendByte: this._measureTraffic.sendByte,
            sendCount: this._measureTraffic.sendCount,
            ceilByte: this._measureTraffic.ceilByte,
        };
    }
    resetTrafficMeasurement() {
        if (this._measureTraffic) {
            const data = this.getTrafficData();
            this._measureTraffic = {
                ceilByte: this._measureTraffic.ceilByte,
                readByte: 0,
                readCount: 0,
                sendByte: 0,
                sendCount: 0,
            };
            return data;
        }
        return null;
    }
    endTrafficMeasurement() {
        const data = this.getTrafficData();
        this._measureTraffic = null;
        return data;
    }
    _calcTrafficSize(data, ceil) {
        let trafficSize;
        if (data instanceof Buffer) {
            trafficSize = data.length;
        }
        else if (data instanceof ArrayBuffer) {
            trafficSize = data.byteLength;
        }
        else {
            trafficSize = data.length * 8;
        }
        const ceiledTrafficSize = Math.round(Math.ceil(trafficSize / ceil) * ceil);
        return ceiledTrafficSize;
    }
}
exports.default = ObnizConnection;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/ObnizDevice.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const ObnizUIs_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizUIs.js"));
class ObnizDevice extends ObnizUIs_1.default {
    /**
     * We will now instantiate obniz.
     *
     * obniz id is a string. Hyphen '-' is optional, but with just the numbers they can't be accepted.
     *
     * ```javascript
     * new Obniz('1234-5678') // OK
     * new Obniz('12345678') // OK
     * new Obniz(12345678) // Can't accept
     * ```
     *
     * If you connect to obniz which has an access token, provide an option like this
     *
     * ```javascript
     * new Obniz('1234-5678', {access_token: 'your token here'})
     * ```
     *
     * If obniz id is incorrect, connection will never be established. In nodejs, an error occurs.
     * In HTML, obniz.js shows a prompt message. The user can put in a correct obniz id into it.
     * It shows up only when the format is invalid. If you specify obniz id which doesn't exist, this would never be shown.
     *
     * ![](media://obniz_prompt.png)
     *
     * When id is correct, obniz.js will try to connect cloud api and onconnect will be called after connection is established.
     *
     * When obniz Board and the device running obniz.js is expected to be in the same network, obniz.js will try to establish a direct Websocket connection to obniz Board. This is called "local connect". When local connect is avaiable, obniz Board can be controlled with almost all commands without having to go through the cloud. However, the connection to the cloud never gets disconnected even when using local connect.
     * But when cloud connection gets closed, the local connect also gets closed.
     *
     * ![](media://local_connect.png)
     *
     * The timing onconnect() gets called depends on the availability of local connect.
     * obniz.js will wait a little to establish connection via local connect as much as possible.
     * See the flow below.
     *
     * ![](media://onconnect_flow.png)
     *
     * The second parameter when instantiating obniz Board is an option.
     *
     * @param id
     * @param options
     */
    constructor(id, options) {
        super(id, options);
        this.util = new util_1.default(this);
    }
    /**
     * @ignore
     * @param msg
     */
    warning(msg) {
        if (this.isNode) {
            console.error(msg);
        }
        else {
            if (msg && typeof msg === 'object' && msg.alert) {
                this.showAlertUI(msg);
                console.log(msg.message);
                return;
            }
            if (typeof window.showObnizDebugError === 'function') {
                window.showObnizDebugError(new Error(msg));
            }
            this.log(`Warning: ${msg}`);
        }
    }
    /**
     * @ignore
     * @param msg
     */
    error(msg) {
        if (this.onerror) {
            const sendError = msg instanceof Error ? msg : new Error(msg.message);
            this.onerror(this, sendError);
            return;
        }
        if (!this.isNode) {
            if (msg &&
                typeof msg === 'object' &&
                !(msg instanceof Error) &&
                msg.alert) {
                this.showAlertUI(msg);
            }
            if (window && typeof window.showObnizDebugError === 'function') {
                window.showObnizDebugError(new Error(msg.message));
            }
        }
        console.error(`${msg.message}`);
    }
    /**
     * Send message to obniz clients. If you want receive data, see [[Obniz.onmessage]]
     *
     * ```javascript
     * // Example
     * obniz.onconnect = function(){
     *  var button = obniz.wired("Button",  {signal:0, gnd:1});
     *
     *  button.onchange = function(){
     *    var targets = [
     *      "1234-1231",
     *      "1234-1232",
     *      "1234-1233",
     *      "1234-1234",
     *      "1234-1235",
     *      "1234-1236",
     *      "1234-1237",
     *      "1234-1238",
     *      "1234-1239",
     *      "1234-1230"];
     *
     *    obniz.message(targets, "pressed");
     *   };
     * }
     * ```
     *
     * @param target destination obniz id
     * @param message message data
     */
    message(target, message) {
        let targets = [];
        if (typeof target === 'string') {
            targets.push(target);
        }
        else {
            targets = target;
        }
        this.send({
            message: {
                to: targets,
                data: message,
            },
        });
    }
    _callOnConnect() {
        super._callOnConnect();
    }
    _notifyToModule(obj) {
        super._notifyToModule(obj);
        // notify messaging
        if (typeof obj.message === 'object' && this.onmessage) {
            this._runUserCreatedFunction(this.onmessage, obj.message.data, obj.message.from);
        }
        // debug
        if (typeof obj.debug === 'object') {
            if (obj.debug.warning) {
                const msg = 'Warning: ' + obj.debug.warning.message;
                this.warning({ alert: 'warning', message: msg });
            }
            if (obj.debug.error) {
                const msg = 'Error: ' + obj.debug.error.message;
                this.error({ alert: 'error', message: msg });
            }
            if (this.ondebug) {
                this.ondebug(obj.debug);
            }
        }
    }
}
exports.default = ObnizDevice;


/***/ }),

/***/ "./dist/src/obniz/ObnizError.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Errors
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint max-classes-per-file: 0 */
class ObnizError extends Error {
    constructor(code, e) {
        super(e);
        this.code = code;
        this.name = new.target.name;
        Object.setPrototypeOf(this, new.target.prototype); // for ES3, ES5
    }
}
exports.ObnizError = ObnizError;
class ObnizOfflineError extends ObnizError {
    constructor() {
        super(1, 'obniz is not online.');
    }
}
exports.ObnizOfflineError = ObnizOfflineError;
class ObnizTimeoutError extends ObnizError {
    constructor(waitingFor) {
        super(2, 'Receive data timeout.' + (waitingFor ? ' Waiting for ' + waitingFor : ''));
        this.waitingFor = waitingFor;
    }
}
exports.ObnizTimeoutError = ObnizTimeoutError;
class ObnizI2cError extends ObnizError {
    constructor() {
        super(3, 'I2C error.');
    }
}
exports.ObnizI2cError = ObnizI2cError;
class ObnizI2cWarning extends ObnizError {
    constructor() {
        super(4, 'I2C error.');
    }
}
exports.ObnizI2cWarning = ObnizI2cWarning;
class ObnizBleUnknownPeripheralError extends ObnizError {
    constructor(peripheralUuid) {
        super(5, 'unknown peripheral :' + peripheralUuid);
        this.peripheralUuid = peripheralUuid;
    }
}
exports.ObnizBleUnknownPeripheralError = ObnizBleUnknownPeripheralError;
class ObnizBleUnknownServiceError extends ObnizError {
    constructor(peripheralUuid, serviceUuid) {
        super(6, 'unknown service.  peripheral :' +
            peripheralUuid +
            ' service :' +
            serviceUuid);
        this.peripheralUuid = peripheralUuid;
        this.serviceUuid = serviceUuid;
    }
}
exports.ObnizBleUnknownServiceError = ObnizBleUnknownServiceError;
class ObnizBleUnknownCharacteristicError extends ObnizError {
    constructor(peripheralUuid, serviceUuid, characteristicUuid) {
        super(7, 'unknown characteristic.  peripheral :' +
            peripheralUuid +
            ' service :' +
            serviceUuid +
            ' characteristic :' +
            characteristicUuid);
        this.peripheralUuid = peripheralUuid;
        this.serviceUuid = serviceUuid;
        this.characteristicUuid = characteristicUuid;
    }
}
exports.ObnizBleUnknownCharacteristicError = ObnizBleUnknownCharacteristicError;
class ObnizBleUnknownDescriptorError extends ObnizError {
    constructor(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {
        super(8, 'unknown descriptor.  peripheral :' +
            peripheralUuid +
            ' service :' +
            serviceUuid +
            ' characteristic :' +
            characteristicUuid +
            ' descriptor :' +
            descriptorUuid);
        this.peripheralUuid = peripheralUuid;
        this.serviceUuid = serviceUuid;
        this.characteristicUuid = characteristicUuid;
        this.descriptorUuid = descriptorUuid;
    }
}
exports.ObnizBleUnknownDescriptorError = ObnizBleUnknownDescriptorError;
class ObnizBleOpError extends ObnizError {
    constructor() {
        super(9, 'BLE operation error');
    }
}
exports.ObnizBleOpError = ObnizBleOpError;
class ObnizBleHciStateError extends ObnizError {
    constructor(state, params) {
        super(10, (ObnizBleHciStateError.Errors[state]
            ? ObnizBleHciStateError.Errors[state]
            : 'Ble Hci state Error') + (params ? ` ${JSON.stringify(params)}` : ''));
        this.state = state;
    }
}
exports.ObnizBleHciStateError = ObnizBleHciStateError;
ObnizBleHciStateError.Errors = {
    0x00: 'Success',
    0x01: 'Unknown HCI Command',
    0x02: 'Unknown Connection Identifier ',
    0x03: 'Hardware Failure ',
    0x04: 'Page Timeout ',
    0x05: 'Authentication Failure ',
    0x06: 'PIN or Key Missing ',
    0x07: 'Memory Capacity Exceeded ',
    0x08: 'Connection Timeout ',
    0x09: 'Connection Limit Exceeded ',
    0x0a: 'Synchronous Connection Limit To A Device Exceeded ',
    0x0b: 'Connection Already Exists ',
    0x0c: 'Command Disallowed ',
    0x0d: 'Connection Rejected due to Limited Resources ',
    0x0e: 'Connection Rejected Due To Security Reasons ',
    0x0f: 'Connection Rejected due to Unacceptable BD_ADDR ',
    0x10: 'Connection Accept Timeout Exceeded ',
    0x11: 'Unsupported Feature or Parameter Value ',
    0x12: 'Invalid HCI Command Parameters ',
    0x13: 'Remote User Terminated Connection ',
    0x14: 'Remote Device Terminated Connection due to Low Resources ',
    0x15: 'Remote Device Terminated Connection due to Power Off ',
    0x16: 'Connection Terminated By Local Host ',
    0x17: 'Repeated Attempts ',
    0x18: 'Pairing Not Allowed ',
    0x19: 'Unknown LMP PDU ',
    0x1a: 'Unsupported Remote Feature / Unsupported LMP Feature ',
    0x1b: 'SCO Offset Rejected ',
    0x1c: 'SCO Interval Rejected ',
    0x1d: 'SCO Air Mode Rejected ',
    0x1e: 'Invalid LMP Parameters / Invalid LL Parameters ',
    0x1f: 'Unspecified Error ',
    0x20: 'Unsupported LMP Parameter Value / Unsupported LL Parameter Value ',
    0x21: 'Role Change Not Allowed ',
    0x22: 'LMP Response Timeout / LL Response Timeout ',
    0x23: 'LMP Error Transaction Collision / LL Procedure Collision ',
    0x24: 'LMP PDU Not Allowed ',
    0x25: 'Encryption Mode Not Acceptable ',
    0x26: 'Link Key cannot be Changed ',
    0x27: 'Requested QoS Not Supported ',
    0x28: 'Instant Passed ',
    0x29: 'Pairing With Unit Key Not Supported ',
    0x2a: 'Different Transaction Collision ',
    0x2b: 'Reserved for future use ',
    0x2c: 'QoS Unacceptable Parameter ',
    0x2d: 'QoS Rejected ',
    0x2e: 'Channel Classification Not Supported ',
    0x2f: 'Insufficient Security ',
    0x30: 'Parameter Out Of Mandatory Range ',
    0x31: 'Reserved for future use ',
    0x32: 'Role Switch Pending ',
    0x33: 'Reserved for future use ',
    0x34: 'Reserved Slot Violation ',
    0x35: 'Role Switch Failed ',
    0x36: 'Extended Inquiry Response Too Large ',
    0x37: 'Secure Simple Pairing Not Supported By Host ',
    0x38: 'Host Busy - Pairing ',
    0x39: 'Connection Rejected due to No Suitable Channel Found ',
    0x3a: 'Controller Busy ',
    0x3b: 'Unacceptable Connection Parameters ',
    0x3c: 'Advertising Timeout ',
    0x3d: 'Connection Terminated due to MIC Failure ',
    0x3e: 'Connection Failed to be Established / Synchronization Timeout ',
    0x3f: 'MAC Connection Failed ',
    0x40: 'Coarse Clock Adjustment Rejected but Will Try to Adjust Using Clock Dragging ',
    0x41: 'Type0 Submap Not Defined ',
    0x42: 'Unknown Advertising Identifier ',
    0x43: 'Limit Reached ',
    0x44: 'Operation Cancelled by Host ',
    0x45: 'Packet Too Long ',
};
// todo error code to message
class ObnizBleAttError extends ObnizError {
    constructor(state, params) {
        super(11, `ATT Error: ${params || ''}`);
        this.state = state;
    }
}
exports.ObnizBleAttError = ObnizBleAttError;
ObnizBleAttError.Errors = {};
class ObnizDeprecatedFunctionError extends ObnizError {
    constructor(deprecateFunctionName, replaceFunction) {
        super(12, `${deprecateFunctionName} is deprecated function, please use ${replaceFunction}`);
        this.deprecateFunctionName = deprecateFunctionName;
    }
}
exports.ObnizDeprecatedFunctionError = ObnizDeprecatedFunctionError;
class ObnizBleUnsupportedHciError extends ObnizError {
    constructor(needVer, currentVer) {
        super(13, `Unsupported hci version, need version : ${needVer}, current version ${currentVer}`);
        this.needVer = needVer;
        this.currentVer = currentVer;
    }
}
exports.ObnizBleUnsupportedHciError = ObnizBleUnsupportedHciError;
class ObnizParameterError extends ObnizError {
    constructor(parameter, should) {
        super(14, `Parameter ${parameter} should satisfy ${should}`);
        this.parameter = parameter;
        this.should = should;
    }
}
exports.ObnizParameterError = ObnizParameterError;
class ObnizBleUnSupportedOSVersionError extends ObnizError {
    constructor(deviceOS, atLeast) {
        super(15, `Connected Device has OS=${deviceOS}. But This SDK Support at least ${atLeast} or above. Upgrade Your OS or Downgrade your SDK to use this function`);
        this.deviceOS = deviceOS;
        this.atLeast = atLeast;
    }
}
exports.ObnizBleUnSupportedOSVersionError = ObnizBleUnSupportedOSVersionError;
class ObnizBlePairingRejectByRemoteError extends ObnizError {
    constructor(reason) {
        super(16, `pairing sequence reject by remote peripheral. reason : ${ObnizBlePairingRejectByRemoteError.Errors[reason]}`);
    }
}
exports.ObnizBlePairingRejectByRemoteError = ObnizBlePairingRejectByRemoteError;
ObnizBlePairingRejectByRemoteError.Errors = {
    0x00: 'Unknown',
    0x01: 'Passkey Entry Failed',
    0x02: 'OOB Not Available',
    0x03: 'Authentication Requirements',
    0x04: 'Confirm Value Failed',
    0x05: 'Pairing Not Supported',
    0x06: 'Encryption Key Size',
    0x07: 'Command Not Supported',
    0x08: 'Unspecified Reason',
    0x09: 'Repeated Attempts',
    0x0a: 'Invalid Parameters',
    0x0b: 'DHKey Check Failed',
    0x0c: 'Numeric Comparison Failed',
    0x0d: 'BR/EDR pairing in progress',
    0x0e: 'Cross-transport Key Deriva- tion/Generation not allowed',
};
class ObnizBleScanStartError extends ObnizError {
    constructor(state, msg) {
        super(17, `${msg} state=${state}(${ObnizBleHciStateError.Errors[state]
            ? ObnizBleHciStateError.Errors[state]
            : ''})`);
    }
}
exports.ObnizBleScanStartError = ObnizBleScanStartError;
class ObnizBleGattHandleError extends ObnizError {
    constructor(msg) {
        super(18, msg);
    }
}
exports.ObnizBleGattHandleError = ObnizBleGattHandleError;
class ObnizBleUnSupportedPeripheralError extends ObnizError {
    constructor(target) {
        super(19, `${target} is not supported by remote peripheral`);
    }
}
exports.ObnizBleUnSupportedPeripheralError = ObnizBleUnSupportedPeripheralError;
class ObnizBleInvalidPasskeyError extends ObnizError {
    constructor(passkey) {
        super(20, `passkey required >0 and <999999, But input: ${passkey}`);
    }
}
exports.ObnizBleInvalidPasskeyError = ObnizBleInvalidPasskeyError;


/***/ }),

/***/ "./dist/src/obniz/ObnizParts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const ObnizConnection_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizConnection.js"));
/**
 * @ignore
 */
const _parts = {};
class ObnizParts extends ObnizConnection_1.default {
    /**
     * @ignore
     * @private
     */
    static _parts() {
        return _parts;
    }
    /**
     * Register Parts class
     *
     * @param arg0 Parts class
     * @param arg1 param for parts
     */
    static PartsRegistrate(arg0, arg1) {
        if (arg0 &&
            typeof arg0.info === 'function' &&
            typeof arg0.info().name === 'string') {
            _parts[arg0.info().name] = arg0;
        }
        else if (typeof arg0 === 'string' && typeof arg1 === 'object') {
            _parts[arg0] = arg1;
        }
    }
    /**
     * Get parts class.
     *
     * @param name string
     * @constructor
     */
    static getPartsClass(name) {
        if (!_parts[name]) {
            throw new Error(`unknown parts [${name}]`);
        }
        return _parts[name];
    }
    constructor(id, options) {
        super(id, options);
    }
    /**
     * Check the param is valid io pin no.
     *
     * @param io
     */
    isValidIO(io) {
        return typeof io === 'number' && this['io' + io] !== null;
    }
    /**
     * Check the param is valid ad pin no.
     *
     * @param ad
     */
    isValidAD(ad) {
        return typeof ad === 'number' && this['ad' + ad] !== null;
    }
    /**
     * Setup Parts of parts library
     *
     * @param partsName
     * @param options
     */
    wired(partsName, options) {
        if (this.connectionState !== 'connected') {
            throw new Error('obniz.wired can only be used after connection');
        }
        const TargetPartsClass = ObnizParts.getPartsClass(partsName);
        if (!TargetPartsClass) {
            throw new Error('No such a parts [' + partsName + '] found');
        }
        const parts = new TargetPartsClass();
        // eslint-disable-next-line prefer-rest-params
        const args = Array.from(arguments);
        args.shift();
        args.unshift(this);
        if (!args[1]) {
            args[1] = {};
        }
        if (parts.keys) {
            if (parts.requiredKeys) {
                const err = util_1.default._requiredKeys(args[1], parts.requiredKeys);
                if (err) {
                    throw new Error(partsName + " wired param '" + err + "' required, but not found ");
                }
            }
            parts.params = util_1.default._keyFilter(args[1], parts.keys);
        }
        parts.obniz = this;
        parts.wired(...args);
        if (parts.keys || parts.ioKeys) {
            const keys = parts.ioKeys || parts.keys;
            const displayPartsName = parts.displayName || partsName;
            const ioNames = {};
            for (const index in keys) {
                let pinName = keys[index];
                const io = args[1][pinName];
                if (this.isValidIO(io)) {
                    if (parts.displayIoNames && parts.displayIoNames[pinName]) {
                        pinName = parts.displayIoNames[pinName];
                    }
                    ioNames[io] = pinName;
                }
            }
            const display = this.display;
            if (display) {
                display.setPinNames(displayPartsName, ioNames);
            }
        }
        return parts;
    }
    static getBleParts(peripheral) {
        const result = Object.entries(_parts)
            .filter(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ([, p]) => p.AvailableBleMode !== undefined &&
            typeof p.getDeviceMode === 'function')
            .map(([n, p]) => [
            n,
            p.getDeviceMode(peripheral),
        ])
            .filter(([, m]) => m !== null)
            // Hiring with long library names
            .sort(([na], [nb]) => ((nb !== null && nb !== void 0 ? nb : '')).length - ((na !== null && na !== void 0 ? na : '')).length);
        if (result.length === 0 || !result[0][0] || !result[0][1]) {
            return null;
        }
        const [name, mode] = result[0];
        const parts = new _parts[name](peripheral, mode);
        return parts;
    }
}
exports.default = ObnizParts;


/***/ }),

/***/ "./dist/src/obniz/ObnizPartsBleAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore
 */
/* eslint-disable rulesdir/non-ascii */
/* eslint-disable max-classes-per-file */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const ObnizPartsBleModeList = ['Beacon', 'Connectable', 'Pairing'];
exports.notMatchDeviceError = new Error('Is NOT target device.');
exports.uint = (value) => {
    let val = 0;
    value.forEach((v, i) => (val += v << (i * 8)));
    return val;
};
exports.int = (value) => {
    const num = exports.uint(value);
    return (num -
        ((num & (0x8 << (value.length * 8 - 4))) !== 0
            ? value.length && value.length >= 28
                ? 0x10000000 * 2 ** (value.length - 28)
                : 0x1 << (value.length * 8)
            : 0));
};
exports.uintBE = (value) => exports.uint(value.reverse());
exports.intBE = (value) => exports.int(value.reverse());
exports.uintToArray = (value, length = 2) => new Array(length)
    .fill(0)
    .map((v, i) => value % (1 << ((i + 1) * 8)) >> (i * 8));
class ObnizPartsBle {
    constructor(peripheral, mode) {
        this._mode = mode;
        this.peripheral = peripheral;
        this.address = peripheral.address;
        this.beaconData = this.peripheral.manufacturerSpecificData;
        if (this.beaconData)
            this.beaconData = this.beaconData.slice(2);
        this.beaconDataInScanResponse = this.peripheral.manufacturerSpecificDataInScanResponse;
        if (this.beaconDataInScanResponse)
            this.beaconDataInScanResponse = this.beaconDataInScanResponse.slice(2);
    }
    /**
     * Information of parts.
     * name: PartsName
     */
    static info() {
        return { name: this.PartsName };
    }
    /**
     * Available BLE modes (Beacon | Connectable | Pairing)
     *
     * 利用可能なBLEのモード (Beacon | Connectable | Pairing)
     */
    static getAvailableBleMode() {
        const availableBleMode = this
            .AvailableBleMode;
        return availableBleMode instanceof Array
            ? availableBleMode
            : [availableBleMode];
    }
    static getServiceUuids(mode) {
        const uuids = this.ServiceUuids instanceof Array ||
            typeof this.ServiceUuids === 'string' ||
            this.ServiceUuids === null ||
            this.ServiceUuids === undefined
            ? this.ServiceUuids
            : this.ServiceUuids[mode];
        return typeof uuids === 'string' ? [uuids] : uuids;
    }
    /**
     * @deprecated
     */
    static isDevice(peripheral) {
        return this.getDeviceMode(peripheral) !== null;
    }
    /**
     * Get Peripheral Mode.
     *
     * ペリフェラルのモードを取得
     *
     * @param peripheral BleRemotePeripheral
     * @returns If the corresponding device is that mode, it must be null if not applicable 該当するデバイスならばそのモード、該当しなければnull
     */
    static getDeviceMode(peripheral) {
        var _a;
        return (_a = this.getAvailableBleMode()
            .map((mode) => this.isDeviceWithMode(peripheral, mode) ? mode : undefined)
            .find((mode) => mode), (_a !== null && _a !== void 0 ? _a : null));
    }
    /**
     * Check if peripherals and modes match the library.
     *
     * ペリフェラルとモードがライブラリと合致するかチェック
     *
     * @param peripheral BleRemotePeripheral
     * @param mode Beacon | Connectable | Pairing
     * @returns Whether to match 合致するかどうか
     */
    static isDeviceWithMode(peripheral, mode) {
        var _a;
        if (!this.getAvailableBleMode().includes(mode))
            return false;
        if (this.Address) {
            const defaultAddress = this.Address instanceof RegExp ? this.Address : this.Address[mode];
            if (defaultAddress !== undefined &&
                !defaultAddress.test(peripheral.address))
                return false;
        }
        if (this.LocalName) {
            const defaultLocalName = this.LocalName instanceof RegExp
                ? this.LocalName
                : this.LocalName[mode];
            if (defaultLocalName !== undefined &&
                !defaultLocalName.test((_a = peripheral.localName, (_a !== null && _a !== void 0 ? _a : 'null'))))
                return false;
        }
        if (this.ServiceUuids) {
            const defaultServiceUuids = this.getServiceUuids(mode);
            if (defaultServiceUuids !== undefined) {
                const uuids = peripheral.advertisementServiceUuids();
                if (defaultServiceUuids === null && uuids.length !== 0)
                    return false;
                if (defaultServiceUuids !== null && uuids.length === 0)
                    return false;
                if (defaultServiceUuids !== null &&
                    defaultServiceUuids.filter((u) => !uuids.includes(u.toLowerCase()))
                        .length !== 0)
                    return false;
            }
        }
        if (!this.checkManufacturerSpecificData(mode, peripheral.manufacturerSpecificData, this.BeaconDataLength, this.CompanyID, false))
            return false;
        if (!this.checkManufacturerSpecificData(mode, peripheral.manufacturerSpecificDataInScanResponse, this.BeaconDataLength_ScanResponse, this.CompanyID_ScanResponse, true))
            return false;
        return true;
    }
    static checkManufacturerSpecificData(mode, beaconData, beaconDataLength, companyID, inScanResponse) {
        if (companyID !== undefined) {
            const defaultCompanyID = companyID instanceof Array ||
                companyID === null ||
                companyID === undefined
                ? companyID
                : companyID[mode];
            if (defaultCompanyID !== undefined) {
                if (defaultCompanyID === null && beaconData !== null)
                    return false;
                if (defaultCompanyID !== null && beaconData === null)
                    return false;
                if (defaultCompanyID !== null &&
                    beaconData !== null &&
                    (defaultCompanyID[0] !== beaconData[0] ||
                        defaultCompanyID[1] !== beaconData[1]))
                    return false;
            }
        }
        if (beaconDataLength !== undefined) {
            const defaultBeaconDataLength = typeof beaconDataLength === 'number' ||
                beaconDataLength === null ||
                beaconDataLength === undefined
                ? beaconDataLength
                : beaconDataLength[mode];
            if (defaultBeaconDataLength !== undefined) {
                if (defaultBeaconDataLength === null && beaconData !== null)
                    return false;
                if (defaultBeaconDataLength !== null && beaconData === null)
                    return false;
                if (defaultBeaconDataLength !== null &&
                    beaconData !== null &&
                    beaconData.length + 1 !== defaultBeaconDataLength)
                    return false;
            }
        }
        if (this.BeaconDataStruct !== undefined) {
            const defaultBeaconDataStruct = (this.BeaconDataStruct !== null &&
                (this.BeaconDataStruct.Beacon ||
                    this.BeaconDataStruct.Connectable ||
                    this.BeaconDataStruct.Pairing)
                ? this.BeaconDataStruct[mode]
                : this.BeaconDataStruct);
            if (defaultBeaconDataStruct !== undefined) {
                if (defaultBeaconDataStruct !== null &&
                    beaconData !== null &&
                    Object.values(defaultBeaconDataStruct).filter((config) => {
                        var _a, _b;
                        return inScanResponse === (_a = config.scanResponse, (_a !== null && _a !== void 0 ? _a : false)) &&
                            config.type === 'check' &&
                            beaconData
                                .slice(2 + config.index, 2 + config.index + (_b = config.length, (_b !== null && _b !== void 0 ? _b : 1)))
                                .filter((d, i) => {
                                var _a;
                                return d !==
                                    (typeof config.data === 'number'
                                        ? [config.data]
                                        : (_a = config.data, (_a !== null && _a !== void 0 ? _a : [])))[i];
                            }).length !== 0;
                    }).length !== 0)
                    return false;
            }
        }
        return true;
    }
    /**
     * Form advertising data into an associative array.
     *
     * アドバタイジングデータを連想配列に成形
     *
     * @deprecated
     */
    static getData(peripheral) {
        const mode = this.getDeviceMode(peripheral);
        if (!mode)
            return null;
        const lib = new this(peripheral, mode);
        try {
            return lib.getData();
        }
        catch (e) {
            console.error(e);
            return null;
        }
    }
    get mode() {
        return this._mode;
    }
    checkMode(force = false) {
        if (this.mode && !force)
            return this.mode;
        const mode = this.staticClass.getDeviceMode(this.peripheral);
        if (!mode)
            throw exports.notMatchDeviceError;
        return (this._mode = mode);
    }
    /**
     * アドバタイジングデータを連想配列に成形
     * 利用可能なモード: Beacon, Connectable(一部のみ)
     * Form advertising data into an associative array
     * Available modes: Beacon, Connectable(only part)
     */
    getData() {
        this.checkMode();
        if (!this.staticClass.BeaconDataStruct)
            throw new Error('Data analysis is not defined.');
        if (!this.beaconData)
            throw new Error('Manufacturer specific data is null.');
        const defaultBeaconDataStruct = (this.staticClass.BeaconDataStruct.Beacon ||
            this.staticClass.BeaconDataStruct.Connectable ||
            this.staticClass.BeaconDataStruct.Pairing
            ? this.staticClass.BeaconDataStruct[this.mode]
            : this.staticClass.BeaconDataStruct);
        if (defaultBeaconDataStruct === null)
            throw new Error('Data analysis is not defined.');
        return Object.fromEntries(Object.entries(defaultBeaconDataStruct)
            .map(([name, c]) => {
            var _a, _b, _c;
            if (c.type === 'check')
                return [];
            const config = c;
            if (!(config.scanResponse
                ? this.beaconDataInScanResponse
                : this.beaconData))
                throw new Error('manufacturerSpecificData is null.');
            const data = (_a = (config.scanResponse
                ? this.beaconDataInScanResponse
                : this.beaconData), (_a !== null && _a !== void 0 ? _a : [])).slice(config.index, config.index + (_b = config.length, (_b !== null && _b !== void 0 ? _b : 1)));
            if (config.type.indexOf('bool') === 0)
                return [name, (data[0] & parseInt(config.type.slice(4), 2)) > 0];
            else if (config.type === 'string')
                return [
                    name,
                    Buffer.from(data.slice(0, data.indexOf(0))).toString(),
                ];
            else if (config.type === 'xyz') {
                if (!config.length)
                    config.length = 6;
                if (config.length % 6 !== 0)
                    return [];
                else if (config.length === 6)
                    return [name, this.getTriaxial(data)];
                else
                    return [
                        name,
                        [...Array(config.length / 6).keys()].map((v) => this.getTriaxial(data.slice(v * 6, (v + 1) * 6))),
                    ];
            }
            else if (config.type === 'custom')
                if (!config.func)
                    return [];
                else
                    return [name, config.func(data, this.peripheral)];
            else {
                const multi = (_c = config.multiple, (_c !== null && _c !== void 0 ? _c : 1));
                const num = (config.type.indexOf('u') === 0 ? exports.uint : exports.int)(config.type.indexOf('BE') >= 0 ? data.reverse() : data);
                return [name, num * multi];
            }
        })
            .filter((v) => v[0]));
    }
    getTriaxial(data) {
        return {
            x: exports.int(data.slice(0, 2)),
            y: exports.int(data.slice(2, 4)),
            z: exports.int(data.slice(4, 6)),
        };
    }
}
exports.ObnizPartsBle = ObnizPartsBle;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.Address = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.LocalName = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.ServiceUuids = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.BeaconDataLength = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.BeaconDataLength_ScanResponse = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.CompanyID = undefined;
/**
 * Used as a condition of isDevice() by default.
 *
 * 標準でisDevice()の条件として使用
 */
ObnizPartsBle.CompanyID_ScanResponse = undefined;
class ObnizPartsBleConnectable extends ObnizPartsBle {
    constructor(peripheral, mode) {
        super(peripheral, mode);
        this.peripheral.ondisconnect = async (reason) => {
            await this.beforeOnDisconnectWait(reason);
            if (this.ondisconnect)
                await this.ondisconnect(reason);
        };
    }
    /**
     * Connect to peripherals with validation.
     *
     * バリデーションのあるペリフェラルへの接続
     *
     * @param keys: Key acquired when pairing previously 以前にペアリングしたときに取得されたキー
     */
    async connectWait(keys) {
        // TODO: Enable Validation
        // if (this.mode !== 'Connectable')
        //   throw new Error(
        //     `Connection can only be used in connectable mode, the current mode is ${this.mode}`
        //   );
        await this.peripheral.connectWait({
            pairingOption: {
                keys,
            },
        });
    }
    /**
     * Disconnect from peripheral.
     *
     * ペリフェラルから切断
     */
    async disconnectWait() {
        await this.peripheral.disconnectWait();
    }
    /**
     * Check if connected.
     *
     * 接続しているかどうかチェック
     *
     * @param connected Connection status (default: true)
     */
    checkConnected(connected = true) {
        if (this.peripheral.connected !== connected)
            throw new Error(connected
                ? 'Peripheral is NOT connected!!'
                : 'Peripheral IS connected!!');
    }
    /**
     * Get any characteristic from any service.
     *
     * 任意のサービスから任意のキャラクタリスティックを取得
     *
     * @param serviceUuid Service UUID
     * @param characteristicUuid Characteristic UUID
     * @returns Instance of BleRemoteCharacteristic
     */
    getChar(serviceUuid, characteristicUuid) {
        const service = this.peripheral.getService(serviceUuid);
        if (!service)
            throw new ObnizError_1.ObnizBleUnknownServiceError(this.peripheral.address, serviceUuid);
        const char = service.getCharacteristic(characteristicUuid);
        if (!char)
            throw new ObnizError_1.ObnizBleUnknownCharacteristicError(this.peripheral.address, serviceUuid, characteristicUuid);
        return char;
    }
    /**
     * Read data from any characteristic of any service.
     *
     * 任意のサービスの任意のキャラクタリスティックからデータを読み取り
     *
     * @param serviceUuid Service UUID
     * @param characteristicUuid Characteristic UUID
     * @returns Data read result データ読み取り結果
     */
    async readCharWait(serviceUuid, characteristicUuid) {
        const char = this.getChar(serviceUuid, characteristicUuid);
        return await char.readWait();
    }
    /**
     * Write data to any characteristic of any service.
     *
     * 任意のサービスの任意のキャラクタリスティックへデータを書き込み
     *
     * @param serviceUuid Service UUID
     * @param characteristicUuid Characteristic UUID
     * @param data Write data
     * @returns Data write result
     */
    async writeCharWait(serviceUuid, characteristicUuid, data, needResponse) {
        const characteristic = this.getChar(serviceUuid, characteristicUuid);
        return await characteristic.writeWait(data, needResponse);
    }
    /**
     * Register notification to any characteristic of any service.
     *
     * 任意のサービスの任意のキャラクタリスティックへ通知を登録
     *
     * @param serviceUuid Service UUID
     * @param characteristicUuid Characteristic UUID
     * @param callback It is called when data comes
     */
    async subscribeWait(serviceUuid, characteristicUuid, callback) {
        const characteristic = this.getChar(serviceUuid, characteristicUuid);
        await characteristic.registerNotifyWait((callback !== null && callback !== void 0 ? callback : (() => {
            // do nothing.
        })));
    }
    /**
     * Unregister notification to any characteristic of any service.
     *
     * 任意のサービスの任意のキャラクタリスティックから通知登録を削除
     *
     * @param serviceUuid Service UUID
     * @param characteristicUuid Characteristic UUID
     */
    async unsubscribeWait(serviceUuid, characteristicUuid) {
        const characteristic = this.getChar(serviceUuid, characteristicUuid);
        await characteristic.unregisterNotifyWait();
    }
}
exports.ObnizPartsBleConnectable = ObnizPartsBleConnectable;
exports.iBeaconCompanyID = [0x4c, 0x00];
exports.iBeaconData = 
// length !== 25
{
    type: {
        index: 0,
        length: 2,
        type: 'check',
        data: [0x02, 0x15],
    },
    uuid: {
        index: 2,
        length: 16,
        type: 'custom',
        func: (data) => data
            .map((d, i) => ([2, 3, 4, 5].includes(i / 2) ? '-' : '') +
            ('00' + d.toString(16)).slice(-2))
            .join(''),
    },
    major: {
        index: 18,
        length: 2,
        type: 'unsignedNumBE',
    },
    minor: {
        index: 20,
        length: 2,
        type: 'unsignedNumBE',
    },
    power: {
        index: 22,
        type: 'numLE',
    },
    rssi: {
        index: 0,
        type: 'custom',
        func: (d, p) => { var _a; return _a = p.rssi, (_a !== null && _a !== void 0 ? _a : 0); },
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/ObnizPartsBleInterface.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable max-classes-per-file */
/* eslint-disable rulesdir/non-ascii */
/**
 * @packageDocumentation
 * @module ObnizCore
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ObnizPartsBleInterface {
    constructor() {
        /**
         * Internally Used function for connection required devices
         */
        this._peripheral = null;
    }
    /**
     * Utility function for reading 2 byte to signed number.
     */
    static signed16FromBinary(high, low) {
        let val = (high << 8) | low;
        if ((val & 0x8000) !== 0) {
            val = val - 0x10000;
        }
        return val;
    }
    /**
     * Utility function for reading 4 byte to signed number.
     */
    static signed32FromBinary(byte3, byte2, byte1, byte0) {
        let val = (byte3 << (8 * 3)) | (byte2 << (8 * 2)) | (byte1 << (8 * 1)) | byte0;
        if ((val & 0x80000000) !== 0) {
            val = val - 0x100000000;
        }
        return val;
    }
    /**
     * Utility function for reading 1byte fixed point number
     */
    static readFraction(byte) {
        let result = 0;
        let mask = 0b10000000;
        let num = 0.5;
        for (let i = 0; i < 8; i++) {
            if (byte & mask) {
                result += num;
            }
            num /= 2.0;
            mask >>= 1;
        }
        return result;
    }
}
exports.default = ObnizPartsBleInterface;


/***/ }),

/***/ "./dist/src/obniz/ObnizSystemMethods.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizComponents_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizComponents.js"));
class ObnizSystemMethods extends ObnizComponents_1.default {
    constructor(id, options) {
        super(id, options);
    }
    /**
     * This pauses obniz Board for a period given in terms of ms (millisecond).
     *
     * ```javascript
     * // Javascript Example
     * led.on();
     * obniz.wait(1000); // led ON 1sec.
     * led.off();
     * ```
     *
     * This method pauses only obniz Board, not JavaScript.
     *
     * ```javascript
     * // Javascript Example
     * var time = new Date();
     * led.on();
     * obniz.wait(1000); // led ON 1sec.
     * led.off();
     * console.log((new Date()).getTime() - time.getTime()) // 0 or very few ms. not 1000ms.
     * ```
     *
     * However, when you call this method together with the await function, JavaScript will pause for the given period in ms.
     *
     * ```javascript
     * // Javascript Example
     * var time = new Date();
     * led.on();
     * await obniz.wait(1000); // led ON 1sec.
     * led.off();
     * console.log((new Date()).getTime() - time.getTime()) // => about 1000
     * ```
     *
     * @param msec
     */
    wait(msec) {
        if (msec < 0) {
            msec = 0;
        }
        else if (msec > 60 * 1000) {
            msec = 60 * 1000;
        }
        this.send({ system: { wait: msec } });
        return new Promise((resolve) => setTimeout(resolve, msec));
    }
    /**
     * This forces the obniz Board to go back to the initial state when the power was just turned on.
     *
     * ```javascript
     * // Example
     * obniz = new Obniz("1234-5678");
     * obniz.onconnect = function() {
     *   obniz.reset();
     * }
     * ```
     */
    reset() {
        this.send({ system: { reset: true } });
        this._resetComponents();
    }
    /**
     * reboot device
     *
     * ```javascript
     * obniz.reboot();
     * ```
     */
    reboot() {
        this.send({ system: { reboot: true } });
    }
    /**
     * @ignore
     */
    selfCheck() {
        this.send({ system: { self_check: true } });
    }
    /**
     * By default, obniz Board resets after disconnection from the cloud.
     * It means the output value and pwm will all stop at that point.
     * But the above function with the argument true can nullify that default setting and change it to "do not reset when offline".
     * This configuration remains as long as obniz Board is on.
     *
     * ```javascript
     * // Example
     * obniz.keepWorkingAtOffline(true);
     * ```
     *
     * @param working
     */
    keepWorkingAtOffline(working) {
        this.send({ system: { keep_working_at_offline: working } });
    }
    /**
     *
     * This lets you change the setting of `reset_obniz_on_ws_disconnection` after connection is established.
     *
     * By default, obniz cloud resets target obniz Board when the all websocket to obniz cloud was closed.
     * It means the output value and pwm will all stop at that point.
     * With the above function, you can nullify these resetting activities.
     * This configuration will remain until target obniz Board gets disconnected.
     * Set this function to false to keep working without any of the websocket connections.
     *
     *
     * ```javascript
     * // Example
     * obniz.resetOnDisconnect(false);
     * ```
     *
     * @param reset
     */
    resetOnDisconnect(reset) {
        this.send({ ws: { reset_obniz_on_ws_disconnection: reset } }, { connect_check: false });
    }
    /**
     * Action only with obniz Board 1Y.
     *
     * Obniz Board sleeps for the value specified in seconds.
     *
     * ```javascript
     * // JavaScript example
     * obniz.sleepSeconds (60); // 60 seconds
     * ```
     *
     * @param sec up to 64800 seconds (18 hours).
     */
    sleepSeconds(sec) {
        if (sec < 1) {
            // min 1s
            sec = 1;
        }
        else if (sec > 60 * 60 * 18) {
            // max 18h (60(s)*60(m)*18(h))
            throw new Error('Error max 18h(64800) sleep');
        }
        this.send({ system: { sleep_seconds: sec } });
    }
    /**
     * Action only with obniz Board 1Y.
     *
     * Obniz Board sleeps for the value specified in minutes.
     *
     *
     *
     * ```javascript
     * // JavaScript example
     * obniz.sleepMinute (60); // 60 minutes
     * ```
     *
     * @param minute up to 64800 minutes(45 days ).
     */
    sleepMinute(minute) {
        if (minute < 1) {
            // min 1m
            minute = 1;
        }
        else if (minute > 60 * 24 * 45) {
            // max 45day (60(m)*24(h)*45(d))
            throw new Error('max 45day(64800m) sleep');
        }
        this.send({ system: { sleep_minute: minute } });
    }
    /**
     * Action only with obniz Board 1Y.
     *
     * Obniz Board sleeps for the value specified in Date type.
     * Sleep for up to 45 days (64800 minutes).
     *
     * ```javascript
     * // JavaScript example
     * let dt = new Date();
     * dt.setHours(dt.getHours () + 1,0,0,0);
     * obniz.sleep(dt);
     * ```
     *
     * @param date
     */
    sleep(date) {
        if (!(date instanceof Date)) {
            throw new Error('Date instance argument required');
        }
        let sleepTime = Math.floor((date - new Date()) / 1000);
        this._print_debug(`sleep time : ${sleepTime}s`);
        if (sleepTime <= 0) {
            throw new Error(`past sleep time : ${sleepTime}s`);
        }
        if (sleepTime <= 60 * 60 * 18) {
            this.sleepSeconds(sleepTime);
            return;
        }
        sleepTime = Math.floor(sleepTime / 60);
        this._print_debug(`sleep time : ${sleepTime}m`);
        if (sleepTime <= 60 * 24 * 45) {
            this.sleepMinute(sleepTime);
        }
        else {
            throw new Error(`over max sleep time : ${sleepTime}m`);
        }
    }
    /**
     * Action only with obniz Board 1Y.
     *
     * It returns from sleep depending on the pin state of IO0.
     *
     *
     * ```javascript
     * // JavaScript example
     * obniz.sleepIoTrigger (true);
     * ```
     *
     * @param trigger
     *
     * - true: Rise (LOW -> HIGH)
     * - false: Falling  (HIGH -> LOW)
     */
    sleepIoTrigger(trigger) {
        if (typeof trigger !== 'boolean') {
            throw new Error('sleepIoTrigger need boolean arg');
        }
        this.send({ system: { sleep_io_trigger: trigger } });
    }
    /**
     * Ping to obniz device and wait pong response.
     *
     * If debugprint option enabled, it display ping/pong response time on console.
     *
     * ```javascript
     * await obniz.pingWait(); //waiting pong.
     * ```
     *
     * @param unixtime start time of measure response time
     * @param rand Unique identifier of ping data
     * @param forceGlobalNetwork
     */
    pingWait(unixtime, rand, forceGlobalNetwork) {
        unixtime = unixtime || new Date().getTime();
        const upper = Math.floor(unixtime / Math.pow(2, 32));
        const lower = unixtime - upper * Math.pow(2, 32);
        rand = rand || Math.floor(Math.random() * Math.pow(2, 4));
        const buf = [];
        buf.push((upper >>> (8 * 3)) & 0xff);
        buf.push((upper >>> (8 * 2)) & 0xff);
        buf.push((upper >>> (8 * 1)) & 0xff);
        buf.push((upper >>> (8 * 0)) & 0xff);
        buf.push((lower >>> (8 * 3)) & 0xff);
        buf.push((lower >>> (8 * 2)) & 0xff);
        buf.push((lower >>> (8 * 1)) & 0xff);
        buf.push((lower >>> (8 * 0)) & 0xff);
        buf.push((rand >>> (8 * 3)) & 0xff);
        buf.push((rand >>> (8 * 2)) & 0xff);
        buf.push((rand >>> (8 * 1)) & 0xff);
        buf.push((rand >>> (8 * 0)) & 0xff);
        const obj = {
            system: {
                ping: {
                    key: buf,
                },
            },
        };
        this.send(obj, { local_connect: forceGlobalNetwork ? false : true });
        return new Promise((resolve) => {
            const callback = (systemObj) => {
                for (let i = 0; i < buf.length; i++) {
                    if (buf[i] !== systemObj.pong.key[i]) {
                        return;
                    }
                }
                this.removePongObserver(callback);
                const _upper = ((systemObj.pong.key[0] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[1] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[2] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[3] << (8 * 0)) >>> 0);
                const _lower = ((systemObj.pong.key[4] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[5] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[6] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[7] << (8 * 0)) >>> 0);
                const obnizJsPingUnixtime = _upper * Math.pow(2, 32) + _lower;
                const obnizJsPongUnixtime = new Date().getTime();
                const allTime = obnizJsPongUnixtime - obnizJsPingUnixtime;
                const timeJs2server = systemObj.pong.pingServerTime - obnizJsPingUnixtime;
                const timeServer2Obniz = systemObj.pong.obnizTime - systemObj.pong.pingServerTime;
                const timeObniz2Server = systemObj.pong.pongServerTime - systemObj.pong.obnizTime;
                const timeServer2Js = obnizJsPongUnixtime - systemObj.pong.pongServerTime;
                const str = `ping ${allTime}ms (js --[${timeJs2server}ms]--> server --[${timeServer2Obniz}ms]--> obniz --[${timeObniz2Server}ms]--> server --[${timeServer2Js}ms]--> js)`;
                this._print_debug(str);
                resolve(str);
            };
            this.addPongObserver(callback);
        });
    }
}
exports.default = ObnizSystemMethods;


/***/ }),

/***/ "./dist/src/obniz/ObnizUIs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dialogPollyfill_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/webpackReplace/dialogPollyfill-browser.js"));
const ObnizSystemMethods_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizSystemMethods.js"));
class ObnizUIs extends ObnizSystemMethods_1.default {
    constructor(id, options) {
        super(id, options);
    }
    static isValidObnizId(str) {
        if (typeof str !== 'string') {
            return false;
        }
        // IP => accept
        if (this.isIpAddress(str)) {
            return true;
        }
        // Serial Number 'sn_***'
        if (str.startsWith('sn_')) {
            return true;
        }
        // 0000-0000
        if (str.length < 8) {
            return false;
        }
        str = str.replace('-', '');
        let id = parseInt(str);
        if (isNaN(id)) {
            id = null;
        }
        return id !== null;
    }
    _close() {
        super._close();
        this.updateOnlineUI();
    }
    async tryWsConnectOnceWait(desired_server) {
        this.showOffLine();
        if (!this.constructor.isValidObnizId(this.id)) {
            if (this.isNode || !this.options.obnizid_dialog) {
                this.error({ alert: 'error', message: 'invalid obniz id' });
            }
            else {
                const filled = _ReadCookie('obniz-last-used') || '';
                this.prompt(filled, (obnizid) => {
                    this.id = obnizid;
                    this.tryWsConnectOnceWait(desired_server);
                });
            }
            return;
        }
        return super.tryWsConnectOnceWait(desired_server);
    }
    prompt(filled = '', callback) {
        ObnizUIs._promptQueue.push({ filled, callback });
        this._promptNext();
    }
    _promptNext() {
        if (ObnizUIs._promptWaiting) {
            return;
        }
        const next = ObnizUIs._promptQueue.shift();
        if (next) {
            ObnizUIs._promptWaiting = true;
            if (document.readyState !== 'loading') {
                this._promptOne(next.filled, next.callback);
            }
            else {
                document.addEventListener('DOMContentLoaded', () => {
                    this._promptOne(next.filled, next.callback);
                });
            }
        }
    }
    _promptOne(filled, callback) {
        ObnizUIs._promptCount++;
        let result = '';
        new Promise((resolve) => {
            const text = filled;
            const selectorId = `obniz-id-prompt${ObnizUIs._promptCount}`;
            let css = dialogPollyfill_1.default.css;
            css +=
                `dialog#${selectorId}::backdrop {\n` +
                    '  background: rgba(0, 0, 0, 0.5);\n' +
                    '  animation: modal-open .4s ease;\n' +
                    '}\n' +
                    '\n' +
                    `dialog#${selectorId}[open] {\n` +
                    '    position: fixed;\n' +
                    '    bottom: auto;\n' +
                    '    top: 10px;' +
                    '    animation: modal-slide .5s ease;\n' +
                    '    border: none;' +
                    '    padding: 0;' +
                    '}\n' +
                    `dialog#${selectorId} .contents {\n` +
                    '    padding: 1em;' +
                    '}\n' +
                    `dialog#${selectorId} button {\n` +
                    '    background-color: #00a4e3;\n' +
                    '    border-color: #00a4e3;\n' +
                    '    color: white;\n' +
                    '}' +
                    '@keyframes modal-open {\n' +
                    '  0% {\n' +
                    '    opacity: 0;\n' +
                    '  }\n' +
                    '  100%{\n' +
                    '    opacity: 1;\n' +
                    '  }\n' +
                    '}\n' +
                    '\n' +
                    '@keyframes modal-slide {\n' +
                    '  0% {\n' +
                    '    transform: translateY(-20px);\n' +
                    '  }\n' +
                    '  100%{\n' +
                    '    transform: translateY(0);\n' +
                    '  }\n' +
                    '}';
            let html = '';
            html += `<dialog id='${selectorId}'><div class="contents">`;
            html += `Connect obniz device`;
            if (ObnizUIs._promptCount > 1) {
                html += `(${ObnizUIs._promptCount})`;
            }
            html += `<br/>`;
            html += ` <form method="dialog">`;
            html += ` <input type="text" name="obniz-id" id="return_value" value="${text}" placeholder="obniz id">`;
            html += '  <button id="close">Connect</button>';
            html += '</form>';
            html += '</div></dialog>';
            html += '<style>';
            html += css;
            html += '</style>';
            const div = document.createElement('div');
            div.innerHTML = html;
            const dialog = div.querySelector('dialog');
            dialog.addEventListener('click', () => {
                // cancel
                dialog.querySelector('#return_value').value = '';
                dialog.close();
                resolve();
            });
            dialog.querySelector('.contents').addEventListener('click', (event) => {
                event.stopPropagation();
            });
            dialog.addEventListener('close', (param) => {
                const inputValue = dialog.querySelector('#return_value').value;
                div.parentElement.removeChild(div);
                result = inputValue;
                resolve();
            });
            dialog.addEventListener('cancel', (param) => {
                // escape key
                div.parentElement.removeChild(div);
                resolve();
            });
            document.body.appendChild(div);
            dialogPollyfill_1.default.dialogPolyfill.registerDialog(dialog);
            dialog.showModal();
        }).then(() => {
            ObnizUIs._promptWaiting = false;
            if (result && result.length > 0) {
                callback(result);
            }
            this._promptNext();
        });
    }
    showAlertUI(obj) {
        if (this.isNode || !document.getElementById(this.options.debug_dom_id)) {
            return;
        }
        const dom = `
    <div style="background-color:${obj.alert === 'warning' ? '#ffee35' : '#ff7b34'}">${obj.message}</div>`;
        document
            .getElementById(this.options.debug_dom_id)
            .insertAdjacentHTML('beforeend', dom);
    }
    getDebugDoms() {
        if (this.isNode) {
            return;
        }
        const loaderDom = document.querySelector('#loader');
        const debugDom = document.querySelector('#' + this.options.debug_dom_id);
        let statusDom = document.querySelector('#' + this.options.debug_dom_id + ' #online-status');
        if (debugDom && !statusDom) {
            statusDom = document.createElement('div');
            statusDom.id = 'online-status';
            statusDom.style.color = '#FFF';
            statusDom.style.padding = '5px';
            statusDom.style.textAlign = 'center';
            debugDom.insertBefore(statusDom, debugDom.firstChild);
        }
        return { loaderDom, debugDom, statusDom };
    }
    /* online offline */
    _callOnConnect() {
        this.updateOnlineUI();
        super._callOnConnect();
    }
    _disconnectLocal() {
        super._disconnectLocal();
        this.updateOnlineUI();
    }
    updateOnlineUI() {
        if (this.isNode) {
            return;
        }
        const isConnected = this.socket && this.socket.readyState === 1;
        const isConnectedLocally = this.socket_local && this.socket_local.readyState === 1;
        if (isConnected && isConnectedLocally) {
            this.showOnLine(true);
        }
        else if (isConnected) {
            this.showOnLine(false);
        }
        else {
            this.showOffLine();
        }
    }
    showOnLine(isConnectedLocally) {
        if (this.isNode) {
            return;
        }
        const doms = this.getDebugDoms();
        if (doms.loaderDom) {
            doms.loaderDom.style.display = 'none';
        }
        if (doms.statusDom) {
            doms.statusDom.style.backgroundColor = isConnectedLocally
                ? '#0cd362'
                : '#31965d';
            doms.statusDom.style.color = '#FFF';
            doms.statusDom.innerHTML =
                (this.id ? 'online : ' + this.id : 'online') +
                    (isConnectedLocally ? ' via local_connect' : ' via internet');
        }
    }
    showOffLine() {
        if (this.isNode) {
            return;
        }
        const doms = this.getDebugDoms();
        if (!doms) {
            return;
        }
        if (doms.loaderDom) {
            doms.loaderDom.style.display = 'block';
        }
        if (doms.statusDom) {
            doms.statusDom.style.backgroundColor = '#d9534f';
            doms.statusDom.style.color = '#FFF';
            doms.statusDom.innerHTML = this.id ? 'offline : ' + this.id : 'offline';
        }
    }
}
exports.default = ObnizUIs;
/**
 * @ignore
 */
ObnizUIs._promptQueue = [];
/**
 * @ignore
 */
ObnizUIs._promptWaiting = false;
/**
 * @ignore
 */
ObnizUIs._promptCount = 0;
/**
 *
 * @ignore
 */
const _ReadCookie = (name) => {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
};


/***/ }),

/***/ "./dist/src/obniz/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {
/**
 * @packageDocumentation
 * @ignore
 */
const Obniz_1 = __webpack_require__("./dist/src/obniz/Obniz.js");
/* ===================*/
/* Utils */
/* ===================*/
try {
    if (typeof window !== 'undefined') {
        if (window && window.parent && window.parent.userAppLoaded) {
            window.parent.userAppLoaded(window);
        }
        window.showObnizDebugError = (err) => {
            // eslint-disable-line
            if (window.parent && window.parent.logger) {
                window.parent.logger.onObnizError(err);
            }
        };
    }
}
catch (e) {
    if (e instanceof DOMException) {
        // cross origin iframe
    }
    else {
        console.error(e);
    }
}
/* ===================*/
/* ReadParts */
/* ===================*/
/**
 * @ignore
 */
const requireContext = __webpack_require__("./dist/src/obniz/libs/webpackReplace/require-context-browser.js");
__webpack_require__("./dist/src/obniz sync recursive").context = requireContext.default;
if (requireContext.setBaseDir) {
    requireContext.setBaseDir(__dirname);
}
/**
 * @ignore
 */
const context = __webpack_require__("./dist/src/parts sync recursive \\.js$");
/* webpack loader */
for (const path of context.keys()) {
    const anParts = context(path);
    if (anParts.info) {
        Obniz_1.Obniz.PartsRegistrate(anParts);
    }
    else if (anParts.default && anParts.default.info) {
        // for ts "export default"
        Obniz_1.Obniz.PartsRegistrate(anParts.default);
    }
}
module.exports = Obniz_1.Obniz;

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./dist/src/obniz/libs/ComponentAbstact.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const WSSchema_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSSchema.js"));
class ComponentAbstract extends eventemitter3_1.default {
    constructor(obniz) {
        super();
        /**
         * Rsponse waiting timeout in milliseconds
         */
        this.timeout = 30 * 1000;
        this._eventHandlerQueue = {};
        this.Obniz = obniz;
    }
    notifyFromObniz(json) {
        for (const eventName of this.eventNames()) {
            if (typeof eventName !== 'string' ||
                !eventName.startsWith('/response/')) {
                continue;
            }
            const isValid = this.fastValidate(eventName, json);
            if (isValid) {
                this.emit(eventName, json);
            }
        }
        for (const eventName in this._eventHandlerQueue) {
            if (typeof eventName !== 'string' ||
                !eventName.startsWith('/response/')) {
                continue;
            }
            if (this._eventHandlerQueue[eventName].length === 0) {
                continue;
            }
            const isValid = this.fastValidate(eventName, json);
            if (isValid) {
                const func = this._eventHandlerQueue[eventName].shift();
                if (func) {
                    func(json);
                }
            }
        }
    }
    validate(commandUri, json) {
        const schema = WSSchema_1.default.getSchema(commandUri);
        return WSSchema_1.default.validateMultiple(json, schema);
    }
    fastValidate(commandUri, json) {
        const schema = WSSchema_1.default.getSchema(commandUri);
        return WSSchema_1.default.validate(json, schema);
    }
    onceQueue(eventName, func) {
        this._eventHandlerQueue[eventName] =
            this._eventHandlerQueue[eventName] || [];
        if (typeof func === 'function') {
            this._eventHandlerQueue[eventName].push(func);
        }
    }
    removeFromOnceQueue(eventName, func) {
        this._eventHandlerQueue[eventName] =
            this._eventHandlerQueue[eventName] || [];
        if (typeof func === 'function') {
            this._eventHandlerQueue[eventName] = this._eventHandlerQueue[eventName].filter((e) => e !== func);
        }
    }
    async sendAndReceiveJsonWait(sendObj, schemaPath, option) {
        this.Obniz.send(sendObj);
        return await this.receiveJsonWait(schemaPath, option);
    }
    receiveJsonWait(schemaPath, option) {
        option = option || {};
        option.timeout = option.timeout || this.timeout;
        option.queue = option.queue !== false;
        option.errors = option.errors || {};
        return new Promise((resolve, reject) => {
            if (this.Obniz.connectionState !== 'connected') {
                reject(new ObnizError_1.ObnizOfflineError());
                return;
            }
            const clearListeners = () => {
                this.Obniz.off('close', onObnizClosed);
                if (option.queue) {
                    this.removeFromOnceQueue(schemaPath, onDataReceived);
                }
                else {
                    this.off(schemaPath, onDataReceived);
                }
                if (timeoutHandler !== undefined) {
                    clearTimeout(timeoutHandler);
                    timeoutHandler = undefined;
                }
                for (const one of onErrorFuncs) {
                    this.off(one.path, one.onError);
                }
            };
            const onObnizClosed = () => {
                clearListeners();
                const error = new ObnizError_1.ObnizOfflineError();
                reject(error);
            };
            const onDataReceived = (schemaData) => {
                clearListeners();
                resolve(schemaData);
            };
            const onTimeout = () => {
                clearListeners();
                const error = new ObnizError_1.ObnizTimeoutError(schemaPath);
                reject(error);
            };
            const onErrorFuncs = [];
            this.Obniz.once('close', onObnizClosed);
            if (option.queue) {
                this.onceQueue(schemaPath, onDataReceived);
            }
            else {
                this.once(schemaPath, onDataReceived);
            }
            for (const path in option.errors) {
                const onError = () => {
                    clearListeners();
                    const error = new option.errors[path]();
                    reject(error);
                };
                this.on(path, onError);
                onErrorFuncs.push({ onError, path });
            }
            let timeoutHandler = setTimeout(onTimeout, option.timeout);
        });
    }
}
exports.ComponentAbstract = ComponentAbstract;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/ble.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Obniz BLE are switches automatically. <br/>
 * obnizOS ver >= 3.0.0  : [[ObnizCore.Components.Ble.Hci | Hci]] <br/>
 * obnizOS ver < 3.0.0   : Not Supported <br/>
 *
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hci_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/hci.js"));
const bindings_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/bindings.js"));
const hci_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js"));
const bindings_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.js"));
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const bleAdvertisement_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAdvertisement.js"));
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js"));
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js"));
const blePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/blePeripheral.js"));
const bleRemotePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemotePeripheral.js"));
const bleScan_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleScan.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleService.js"));
/**
 * Use a obniz device as a BLE device.
 * Peripheral and Central mode are supported
 */
class ObnizBLE extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz) {
        super(obniz);
        this.remotePeripherals = [];
        /**
         * @ignore
         */
        this._initialized = false;
        // eslint-disable-next-line
        this.debugHandler = (text) => { };
        this.hci = new hci_1.default(obniz);
        this.service = bleService_1.default;
        this.characteristic = bleCharacteristic_1.default;
        this.descriptor = bleDescriptor_1.default;
        // this.on("/response/ble/hci/read", (obj) => {
        //   if (obj.hci) {
        //     this.hci.notified(obj.hci);
        //   }
        // });
        // this.on("/response/ble/error", (obj) => {
        //   if (obj.error) {
        //     const error = obj.error;
        //     let msg = "BLE error: " + error.message;
        //     msg += " (";
        //     msg += "error_code: " + error.error_code;
        //     msg += ", ";
        //     msg += "module_error_code: " + error.module_error_code;
        //     msg += ", ";
        //     msg += "function_code: " + error.function_code;
        //     msg += ", ";
        //     msg += "address: " + error.address;
        //     msg += ", ";
        //     msg += "service_uuid: " + error.service_uuid;
        //     msg += ", ";
        //     msg += "characteristic_uuid: " + error.characteristic_uuid;
        //     msg += ", ";
        //     msg += "descriptor_uuid: " + error.descriptor_uuid;
        //     msg += ")";
        //
        //     this.Obniz.error({ alert: "error", message: msg });
        //   }
        // });
        this._reset();
    }
    // public security!: BleSecurity;
    /**
     * Initialized status.
     *
     * ```javascript
     * // Javascript Example
     * obniz.ble.isInitialized; // => false
     * await obniz.ble.initWait();
     * obniz.ble.isInitialized; // => true
     * ```
     */
    get isInitialized() {
        return this._initialized;
    }
    /**
     * @ignore
     *
     * @param data
     * @param reverse
     * @private
     */
    static _dataArray2uuidHex(data, reverse) {
        let uuid = [];
        for (let i = 0; i < data.length; i++) {
            uuid.push(('00' + data[i].toString(16).toLowerCase()).slice(-2));
        }
        if (reverse) {
            uuid = uuid.reverse();
        }
        let str = uuid.join('');
        if (uuid.length >= 16) {
            str =
                str.slice(0, 8) +
                    '-' +
                    str.slice(8, 12) +
                    '-' +
                    str.slice(12, 16) +
                    '-' +
                    str.slice(16, 20) +
                    '-' +
                    str.slice(20);
        }
        return str;
    }
    notifyFromObniz(json) {
        if (json.hci) {
            this.hci.notified(json.hci);
        }
        if (json.error) {
            const error = json.error;
            let msg = 'BLE error: ' + error.message;
            msg += ' (';
            msg += 'error_code: ' + error.error_code;
            msg += ', ';
            msg += 'module_error_code: ' + error.module_error_code;
            msg += ', ';
            msg += 'function_code: ' + error.function_code;
            msg += ', ';
            msg += 'address: ' + error.address;
            msg += ', ';
            msg += 'service_uuid: ' + error.service_uuid;
            msg += ', ';
            msg += 'characteristic_uuid: ' + error.characteristic_uuid;
            msg += ', ';
            msg += 'descriptor_uuid: ' + error.descriptor_uuid;
            msg += ')';
            this.Obniz.error({ alert: 'error', message: msg });
        }
    }
    /**
     * Initialize BLE module. You need call this first everything before.
     * This throws if device is not supported device.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * ```
     */
    async initWait() {
        if (!this._initialized) {
            const MinHCIAvailableOS = '3.0.0';
            if (semver_1.default.lt(this.Obniz.firmware_ver, MinHCIAvailableOS)) {
                throw new ObnizError_1.ObnizBleUnSupportedOSVersionError(this.Obniz.firmware_ver, MinHCIAvailableOS);
            }
            // force initialize on obnizOS < 3.2.0
            if (semver_1.default.lt(semver_1.default.coerce(this.Obniz.firmware_ver), '3.2.0')) {
                this.hci.init();
                this.hci.end(); // disable once
                this.hci.init();
            }
            try {
                await this.hciProtocol.initWait();
            }
            catch (e) {
                if (e instanceof ObnizError_1.ObnizBleUnsupportedHciError) {
                    this.Obniz.reboot();
                }
                throw e;
            }
            this._initialized = true;
        }
    }
    /**
     * Reset Target Device and current SDK status without rebooting. If error occured while reset, then target device will reboot.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.resetWait();
     * ```
     */
    async resetWait() {
        try {
            if (this._initialized) {
                this._reset();
                await this.hciProtocol.resetWait();
                this._initialized = true;
            }
        }
        catch (e) {
            if (e instanceof ObnizError_1.ObnizBleUnsupportedHciError) {
                this.Obniz.reboot();
            }
            throw e;
        }
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        // reset state at first
        this._initialized = false;
        this._initializeWarning = true;
        // clear all found peripherals.
        for (const p of this.remotePeripherals) {
            if (p.connected) {
                p.notifyFromServer('statusupdate', {
                    status: 'disconnected',
                    reason: new ObnizError_1.ObnizOfflineError(),
                });
            }
        }
        this.remotePeripherals = [];
        // instantiate
        if (!this.peripheral) {
            this.peripheral = new blePeripheral_1.default(this);
        }
        if (!this.scan) {
            this.scan = new bleScan_1.default(this);
        }
        else {
            this.scan.notifyFromServer('obnizClose', {});
        }
        if (!this.advertisement) {
            this.advertisement = new bleAdvertisement_1.default(this);
        }
        // reset all submodules.
        this.peripheral._reset();
        this.scan._reset();
        this.advertisement._reset();
        // clear scanning
        this.hci._reset();
        if (!this.hciProtocol) {
            this.hciProtocol = new hci_2.default(this.hci);
            this.hciProtocol.debugHandler = (text) => {
                this.debug(`BLE-HCI: ${text}`);
            };
        }
        else {
            this.hciProtocol._reset();
        }
        if (!this.centralBindings) {
            this.centralBindings = new bindings_1.default(this.hciProtocol);
            this.centralBindings.debugHandler = (text) => {
                this.debug(`BLE: ${text}`);
            };
            this.centralBindings.on('stateChange', this.onStateChange.bind(this));
            this.centralBindings.on('discover', this.onDiscover.bind(this));
            this.centralBindings.on('disconnect', this.onDisconnect.bind(this));
            this.centralBindings.on('notification', this.onNotification.bind(this));
        }
        else {
            this.centralBindings._reset();
        }
        if (!this.peripheralBindings) {
            this.peripheralBindings = new bindings_2.default(this.hciProtocol);
            this.peripheralBindings.on('stateChange', this.onPeripheralStateChange.bind(this));
            this.peripheralBindings.on('accept', this.onPeripheralAccept.bind(this));
            this.peripheralBindings.on('mtuChange', this.onPeripheralMtuChange.bind(this));
            this.peripheralBindings.on('disconnect', this.onPeripheralDisconnect.bind(this));
        }
        else {
            this.peripheralBindings._reset();
        }
    }
    /**
     * Connect to peripheral without scanning.
     * Returns a peripheral instance, but the advertisement information such as localName is null because it has not been scanned.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var peripheral = obniz.ble.directConnect("e4b9efb29218","random");
     * peripheral.onconnect = ()=>{
     *   console.log("connected");
     * }
     * ```
     *
     * @param address peripheral device address
     * @param addressType "random" or "public"
     *
     * @deprecated replaced by {@link #directConnectWait()}
     */
    directConnect(address, addressType) {
        // noinspection JSIgnoredPromiseFromCall
        this.directConnectWait(address, addressType).catch((e) => {
            // background
            this.Obniz.error(e);
        });
        const peripheral = this.findPeripheral(address);
        return peripheral;
    }
    /**
     * Connect to peripheral without scanning, and wait to finish connecting.
     *
     * It throws when connection establish failed.
     * Returns a peripheral instance, but the advertisement information such as localName is null because it has not been scanned.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * try {
     *   var peripheral = await obniz.ble.directConnectWait("e4b9efb29218","random");
     *   console.log("connected");
     * } catch(e) {
     *   console.log("can't connect");
     * }
     * ```
     *
     * @param address peripheral device address
     * @param addressType "random" or "public"
     */
    async directConnectWait(address, addressType) {
        let peripheral = this.findPeripheral(address);
        if (!peripheral) {
            peripheral = new bleRemotePeripheral_1.default(this, address);
            this.remotePeripherals.push(peripheral);
        }
        this.centralBindings.addPeripheralData(address, addressType);
        await peripheral.connectWait();
        return peripheral;
    }
    /**
     * Return connected peripherals.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * let target = {
     *   localName: "Blank"
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(peripheral) {
     *   try {
     *     await peripheral.connectWait();
     *   } catch(e) {
     *     console.error(e);
     *   }
     * }
     * console.log(obniz.ble.getConnectedPeripherals());
     * ```
     *
     * @returns connected peripherals
     */
    getConnectedPeripherals() {
        const connectedPeripherals = [];
        for (const elm of this.remotePeripherals) {
            if (elm.connected) {
                connectedPeripherals.push(elm);
            }
        }
        return connectedPeripherals;
    }
    /**
     * @ignore
     */
    warningIfNotInitialize() {
        if (this.Obniz.connectionState !== 'connected') {
            throw new ObnizError_1.ObnizOfflineError();
        }
        if (!this._initialized && this._initializeWarning) {
            this._initializeWarning = true;
            this.Obniz.warning({
                alert: 'warning',
                message: `BLE is not initialized. Please call 'await obniz.ble.initWait()'`,
            });
        }
    }
    schemaBasePath() {
        return 'ble';
    }
    onStateChange() {
        // do nothing.
    }
    findPeripheral(address) {
        for (const key in this.remotePeripherals) {
            if (this.remotePeripherals[key].address === address) {
                return this.remotePeripherals[key];
            }
        }
        return null;
    }
    onDiscover(uuid, address, addressType, connectable, advertisement, rssi) {
        let val = this.findPeripheral(uuid);
        if (!val) {
            val = new bleRemotePeripheral_1.default(this, uuid);
            this.remotePeripherals.push(val);
        }
        val.discoverdOnRemote = true;
        const peripheralData = {
            device_type: 'ble',
            address_type: addressType,
            ble_event_type: connectable
                ? 'connectable_advertisemnt'
                : 'non_connectable_advertising',
            rssi,
            adv_data: advertisement.advertisementRaw,
            scan_resp: advertisement.scanResponseRaw,
        };
        val.setParams(peripheralData);
        this.scan.notifyFromServer('onfind', val);
    }
    onDisconnect(peripheralUuid, reason) {
        const peripheral = this.findPeripheral(peripheralUuid);
        peripheral.notifyFromServer('statusupdate', {
            status: 'disconnected',
            reason,
        });
    }
    //
    // protected onServicesDiscover(peripheralUuid: any, serviceUuids?: any) {
    //   const peripheral: any = this.findPeripheral(peripheralUuid);
    //   for (const serviceUuid of serviceUuids) {
    //     peripheral.notifyFromServer("discover", { service_uuid: serviceUuid });
    //   }
    //   peripheral.notifyFromServer("discoverfinished", {});
    // }
    // protected onIncludedServicesDiscover(peripheralUuid: any, serviceUuid?: any, includedServiceUuids?: any) {}
    // protected onCharacteristicsDiscover(peripheralUuid: any, serviceUuid?: any, characteristics?: any) {
    //   const peripheral: any = this.findPeripheral(peripheralUuid);
    //   const service: any = peripheral.findService({ service_uuid: serviceUuid });
    //   for (const char of characteristics) {
    //     const obj: any = {
    //       properties: char.properties.map((e: any) => BleHelper.toSnakeCase(e)),
    //       characteristic_uuid: char.uuid,
    //     };
    //     service.notifyFromServer("discover", obj);
    //   }
    //   service.notifyFromServer("discoverfinished", {});
    // }
    onNotification(peripheralUuid, serviceUuid, characteristicUuid, data, isNotification, isSuccess) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const characteristic = peripheral.findCharacteristic({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
        });
        if (isNotification) {
            const obj = {
                data: Array.from(data),
            };
            characteristic.notifyFromServer('onnotify', obj);
        }
    }
    onPeripheralStateChange(state) {
        // console.error("onPeripheralStateChange")
    }
    onPeripheralAccept(clientAddress) {
        this.peripheral.currentConnectedDeviceAddress = clientAddress;
        if (this.peripheral.onconnectionupdates) {
            this.peripheral.onconnectionupdates({
                address: clientAddress,
                status: 'connected',
            });
        }
    }
    onPeripheralMtuChange(mtu) {
        // console.error("onPeripheralMtuChange")
    }
    onPeripheralDisconnect(clientAddress, reason) {
        this.peripheral.currentConnectedDeviceAddress = null;
        if (this.peripheral.onconnectionupdates) {
            this.peripheral.onconnectionupdates({
                address: clientAddress,
                status: 'disconnected',
                reason,
            });
        }
    }
    debug(text) {
        this.debugHandler(text);
    }
}
exports.default = ObnizBLE;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAdvertisement.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAdvertisementBuilder_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.js"));
/**
 * @category Use as Peripheral
 */
class BleAdvertisement {
    constructor(obnizBle) {
        this.obnizBle = obnizBle;
        this.adv_data = [];
        this.scan_resp = [];
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.adv_data = [];
        this.scan_resp = [];
    }
    /**
     * This starts advertisement of BLE.
     *
     * Before calling this function, you should call [[setAdvData]] or [[setAdvDataRaw]] to set data.
     * advertisement interval is 1.28sec fixed.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     *   var service = new obniz.ble.service({
     *  uuid : "fff0"
     * });
     * obniz.ble.peripheral.addService(service);
     * obniz.ble.advertisement.setAdvData(service.advData);
     * obniz.ble.advertisement.start();
     * ```
     */
    async startWait() {
        this.obnizBle.warningIfNotInitialize();
        await this.obnizBle.peripheralBindings.startAdvertisingWithEIRDataWait(Buffer.from(this.adv_data), Buffer.from(this.scan_resp));
    }
    /**
     * @deprecated  replaced by {@link #startWait()}
     */
    start() {
        this.obnizBle.warningIfNotInitialize();
        // noinspection JSIgnoredPromiseFromCall
        this.startWait().catch((e) => {
            // background
            this.obnizBle.Obniz.error(e);
        });
    }
    /**
     * This stops advertisement of BLE.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * obniz.ble.advertisement.start();
     * obniz.ble.advertisement.end();
     * ```
     *
     */
    async endWait() {
        await this.obnizBle.peripheralBindings.stopAdvertisingWait();
    }
    /**
     * @deprecated  replaced by {@link #endWait()}
     */
    end() {
        // noinspection JSIgnoredPromiseFromCall
        this.endWait().catch((e) => {
            // background
            this.obnizBle.Obniz.error(e);
        });
    }
    /**
     * This sets advertise data from data array.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * obniz.ble.advertisement.setAdvDataRaw([0x02, 0x01, 0x1A, 0x07, 0x09, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65 ]);
     * //0x02, 0x01, 0x1A  => BLE type for
     * //0x07, 0x09, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65  => Set name
     *
     * obniz.ble.advertisement.start();
     * ```
     *
     * @param adv_data
     */
    setAdvDataRaw(adv_data) {
        this.adv_data = adv_data;
    }
    /**
     * This sets advertise data from json.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * obniz.ble.advertisement.setAdvData({
     *   flags: ["general_discoverable_mode","br_edr_not_supported"],
     *   manufacturerData:{
     *     companyCode : 0x004C,
     *     serviceUuids: ["fff0"],
     *     data : [0x02,0x15, 0xC2, 0x8f, 0x0a, 0xd5, 0xa7, 0xfd, 0x48, 0xbe, 0x9f, 0xd0, 0xea, 0xe9, 0xff, 0xd3, 0xa8, 0xbb,0x10,0x00,0x00,0x10,0xFF],
     *   }
     * });
     *
     * obniz.ble.advertisement.start();
     * ```
     *
     * @param json
     */
    setAdvData(json) {
        const builder = this.advDataBulider(json);
        this.setAdvDataRaw(builder.build());
    }
    /**
     * This sets scan response data from data array.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * obniz.ble.advertisement.setScanRespDataRaw([0x07, 0x09, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65 ]);
     * //0x07, 0x09, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65  => Set name
     *
     * obniz.ble.advertisement.start();
     * ```
     *
     * @param scan_resp
     */
    setScanRespDataRaw(scan_resp) {
        this.scan_resp = scan_resp;
    }
    /**
     * This sets scan response data from json data.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * obniz.ble.advertisement.setScanRespData({
     *   localName : "obniz BLE",
     * });
     *
     * obniz.ble.advertisement.start();
     * ```
     *
     * @param json
     */
    setScanRespData(json) {
        this.setScanRespDataRaw(this.scanRespDataBuilder(json).build());
    }
    advDataBulider(jsonVal) {
        return new bleAdvertisementBuilder_1.default(jsonVal);
    }
    scanRespDataBuilder(json) {
        return new bleAdvertisementBuilder_1.default(json);
    }
}
exports.default = BleAdvertisement;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @category Use as Peripheral
 */
class BleAdvertisementBuilder {
    constructor(json) {
        this.rows = {};
        if (json) {
            if (json.localName) {
                this.setCompleteLocalName(json.localName);
            }
            if (json.manufacturerData &&
                json.manufacturerData.companyCode &&
                json.manufacturerData.data) {
                this.setManufacturerSpecificData(json.manufacturerData.companyCode, json.manufacturerData.data);
            }
            if (json.serviceUuids) {
                for (const uuid of json.serviceUuids) {
                    this.setUuid(uuid);
                }
            }
        }
        if (typeof this.extendEvalJson === 'function') {
            this.extendEvalJson(json);
        }
    }
    setRow(type, data) {
        this.rows[type] = data;
    }
    getRow(type) {
        return this.rows[type] || [];
    }
    build() {
        const data = [];
        for (const key in this.rows) {
            if (this.rows[key].length === 0) {
                continue;
            }
            data.push(this.rows[key].length + 1);
            data.push(parseInt(key));
            Array.prototype.push.apply(data, this.rows[key]);
        }
        if (data.length > 31) {
            throw new Error('Too large data. Advertise/ScanResponse data are must be less than 32 byte.');
        }
        return data;
    }
    setStringData(type, string) {
        const data = [];
        for (let i = 0; i < string.length; i++) {
            data.push(string.charCodeAt(i));
        }
        this.setRow(type, data);
    }
    setShortenedLocalName(name) {
        this.setStringData(0x08, name);
    }
    setCompleteLocalName(name) {
        this.setStringData(0x09, name);
    }
    setManufacturerSpecificData(companyCode, data) {
        const row = [];
        row.push(companyCode & 0xff);
        row.push((companyCode >> 8) & 0xff);
        Array.prototype.push.apply(row, data);
        this.setRow(0xff, row);
    }
    setUuid(uuid) {
        const uuidData = this.convertUuid(uuid);
        const type = { 16: 0x06, 4: 0x04, 2: 0x02 }[uuidData.length];
        this.setRow(type, uuidData);
    }
    convertUuid(uuid) {
        const uuidNumeric = bleHelper_1.default.uuidFilter(uuid);
        if (uuidNumeric.length !== 32 &&
            uuidNumeric.length !== 8 &&
            uuidNumeric.length !== 4) {
            throw new Error('BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)');
        }
        const data = [];
        for (let i = uuidNumeric.length; i > 1; i -= 2) {
            data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));
        }
        return data;
    }
    setIbeaconData(uuid, major, minor, txPower) {
        const data = [];
        data.push(0x02, 0x15); // fixed data
        const uuidData = this.convertUuid(uuid);
        Array.prototype.push.apply(data, uuidData);
        data.push((major >> 8) & 0xff);
        data.push((major >> 0) & 0xff);
        data.push((minor >> 8) & 0xff);
        data.push((minor >> 0) & 0xff);
        data.push((txPower >> 0) & 0xff);
        this.setManufacturerSpecificData(0x004c, data);
        return;
    }
    setLeLimitedDiscoverableModeFlag() {
        this.setFlags(0x01);
    }
    setLeGeneralDiscoverableModeFlag() {
        this.setFlags(0x02);
    }
    setBrEdrNotSupportedFlag() {
        this.setFlags(0x04);
    }
    setLeBrEdrControllerFlag() {
        this.setFlags(0x08);
    }
    setLeBrEdrHostFlag() {
        this.setFlags(0x10);
    }
    extendEvalJson(json) {
        if (json) {
            if (json.flags) {
                if (json.flags.includes('limited_discoverable_mode')) {
                    this.setLeLimitedDiscoverableModeFlag();
                }
                if (json.flags.includes('general_discoverable_mode')) {
                    this.setLeGeneralDiscoverableModeFlag();
                }
                if (json.flags.includes('br_edr_not_supported')) {
                    this.setBrEdrNotSupportedFlag();
                }
                if (json.flags.includes('le_br_edr_controller')) {
                    this.setLeBrEdrControllerFlag();
                }
                if (json.flags.includes('le_br_edr_host')) {
                    this.setLeBrEdrHostFlag();
                }
            }
        }
    }
    setFlags(flag) {
        const data = this.getRow(0x01);
        data[0] = (data[0] || 0) | flag;
        this.setRow(0x01, data);
    }
}
exports.default = BleAdvertisementBuilder;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
class BleAttributeAbstract {
    constructor(params) {
        this.uuid = bleHelper_1.default.uuidFilter(params.uuid);
        this.parent = null;
        this.children = [];
        this.isRemote = false;
        this.discoverdOnRemote = false;
        this.data = params.data || null;
        if (!this.data && params.text) {
            this.data = util_1.default.string2dataArray(params.text);
        }
        if (!this.data && params.value) {
            this.data = [params.value];
        }
        if (params[this.childrenName]) {
            for (const child of params[this.childrenName]) {
                this.addChild(child);
            }
        }
        this.setFunctions();
        this.emitter = new eventemitter3_1.default();
    }
    /**
     * @ignore
     */
    get childrenClass() {
        return Object;
    }
    /**
     * @ignore
     */
    get childrenName() {
        return null;
    }
    /**
     * @ignore
     */
    get parentName() {
        return null;
    }
    /**
     * @ignore
     * @param child
     */
    addChild(child) {
        if (!(child instanceof this.childrenClass)) {
            const childrenClass = this.childrenClass;
            child = new childrenClass(child);
        }
        const childobj = child;
        childobj.parent = this;
        this.children.push(childobj);
        return childobj;
    }
    /**
     * @ignore
     * @param uuid
     */
    getChild(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        const result = this.children
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
        if (!result) {
            return null;
        }
        return result;
    }
    /**
     * @ignore
     */
    toJSON() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            const key = this.childrenName;
            obj[key] = this.children;
        }
        if (this.data) {
            obj.data = this.data;
        }
        return obj;
    }
    /**
     * @ignore
     */
    async readTextWait() {
        const data = await this.readWait();
        return util_1.default.dataArray2string(data);
    }
    /**
     * @ignore
     */
    async readNumberWait() {
        const data = await this.readWait();
        return data.length > 0 ? data[0] : null;
    }
    /**
     * Use writeTextWait() instead from 3.5.0
     *
     * @ignore
     * @deprecated
     */
    writeText(str, needResponse) {
        throw new ObnizError_1.ObnizDeprecatedFunctionError('writeText', 'writeTextWait');
    }
    /**
     * @ignore
     */
    async writeTextWait(str, needResponse) {
        return await this.writeWait(util_1.default.string2dataArray(str), needResponse);
    }
    /**
     * Use writeNumberWait() instead from 3.5.0
     *
     * @ignore
     * @deprecated
     */
    writeNumber(val, needResponse) {
        throw new ObnizError_1.ObnizDeprecatedFunctionError('writeNumber', 'writeNumberWait');
    }
    /**
     * @ignore
     */
    async writeNumberWait(val, needResponse) {
        return await this.writeWait([val], needResponse);
    }
    /**
     * @ignore
     */
    readFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once('onreadfromremote', () => {
                resolve();
            });
        });
    }
    /**
     * @ignore
     */
    writeFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once('onreadfromremote', (params) => {
                resolve(params.data);
            });
        });
    }
    /**
     * @ignore
     * @param err
     */
    onerror(err) {
        console.error(err.message);
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case 'onerror': {
                this.onerror(params);
                break;
            }
        }
    }
    /**
     * @ignore
     * @private
     */
    _runUserCreatedFunction(func, ...args) {
        if (!func) {
            return;
        }
        if (typeof func !== 'function') {
            return;
        }
        try {
            func(...args);
        }
        catch (err) {
            setTimeout(() => {
                throw err;
            });
        }
    }
    setFunctions() {
        let childrenName = this.childrenName;
        if (childrenName) {
            childrenName =
                childrenName.charAt(0).toUpperCase() + childrenName.slice(1);
            const childName = childrenName.slice(0, -1);
            let funcName = 'add' + childName;
            this[funcName] = this.addChild;
            funcName = 'get' + childName;
            this[funcName] = this.getChild;
        }
        const parentName = this.parentName;
        if (parentName) {
            Object.defineProperty(this, parentName, {
                get() {
                    return this.parent;
                },
                set(newValue) {
                    this.parent = newValue;
                },
            });
        }
    }
}
exports.default = BleAttributeAbstract;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js"));
const bleLocalValueAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalValueAttributeAbstract.js"));
/**
 * @category Use as Peripheral
 */
class BleCharacteristic extends bleLocalValueAttributeAbstract_1.default {
    /**
     * Create Characteristics
     *
     * ```javascript
     * await obniz.ble.initWait();
     * var characteristic = new obniz.ble.characteristic({
     *      "uuid" : "FFF1",
     *      "properties" : ["read","write"],  // read, write, notify
     *      "data" : [0x0e, 0x00, ...],     //data for dataArray or  text for string
     *      "descriptors" : [{
     *          "uuid" : "2901",   //Characteristic User Description
     *          "text" : "hello world characteristic",    //data for dataArray or  text for string
     *      }]
     * });
     *
     * var service = new obniz.ble.service({
     *                "uuid" : "fff0",
     *                "characteristics" : [ characteristic ]
     * });
     * obniz.ble.peripheral.addService(service);
     * ```
     *
     * @param obj
     */
    constructor(obj) {
        super(obj);
        this._maxValueSize = null;
        this._updateValueCallback = null;
        if (!Array.isArray(obj.properties) && typeof obj.properties === 'string') {
            this.properties = [obj.properties];
        }
        else {
            this.properties = obj.properties || [];
        }
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'service';
    }
    /**
     * @ignore
     */
    get childrenClass() {
        return bleDescriptor_1.default;
    }
    /**
     * @ignore
     */
    get childrenName() {
        return 'descriptors';
    }
    /**
     * Get descriptor array
     */
    get descriptors() {
        return this.children;
    }
    /**
     * Add new descriptor
     *
     * @param desc
     */
    addDescriptor(desc) {
        return this.addChild(desc);
    }
    /**
     * Get descriptor
     *
     * @param uuid
     */
    getDescriptor(uuid) {
        return this.getChild(uuid);
    }
    /**
     * @ignore
     */
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        // if (this.permissions.length > 0) {
        //   obj.permissions = this.permissions;
        // }
        return obj;
    }
    /**
     * @ignore
     */
    toBufferObj() {
        const obj = super.toBufferObj();
        obj.properties = this.properties;
        obj.secure = [];
        return obj;
    }
    /**
     * Add property
     *
     * @param param
     */
    addProperty(param) {
        if (!this.properties.includes(param)) {
            this.properties.push(param);
        }
    }
    /**
     * Remove property
     *
     * @param param
     */
    removeProperty(param) {
        this.properties = this.properties.filter((elm) => {
            return elm !== param;
        });
    }
    /**
     * @ignore
     * @param param
     */
    addPermission(param) {
        // do nothing.
    }
    /**
     * @ignore
     * @param param
     */
    removePermission(param) {
        // do nothing.
    }
    /**
     * @ignore
     * @param name
     * @param params
     */
    emit(name, ...params) {
        if (name === 'readRequest' || name === 'writeRequest') {
            const result = super.emit(name, ...params);
            if (result) {
                return result;
            }
        }
        switch (name) {
            case 'subscribe':
                this._onSubscribe(...params);
                return true;
            case 'unsubscribe':
                this._onUnsubscribe();
                return true;
            case 'notify':
                this._onNotify();
                return true;
            case 'indicate':
                this._onIndicate();
                return true;
            default:
                throw new Error('unknown emit');
        }
    }
    /**
     * @ignore
     * @param maxValueSize
     * @param updateValueCallback
     * @private
     */
    _onSubscribe(maxValueSize, updateValueCallback) {
        // console.log('_onSubscribe');
        this._maxValueSize = maxValueSize;
        this._updateValueCallback = updateValueCallback;
    }
    /**
     * @ignore
     * @private
     */
    _onUnsubscribe() {
        this._maxValueSize = null;
        this._updateValueCallback = null;
    }
    /**
     * @ignore
     * @private
     */
    _onNotify() {
        // do nothing.
    }
    /**
     * @ignore
     * @private
     */
    _onIndicate() {
        // do nothing.
    }
    /**
     * This sends notify to the connected central.
     *
     * ```javascript
     * var characteristic = new obniz.ble.characteristic({
     *   uuid: 'FFF1',
     *   data: [0x0e, 0x00],
     *   properties : ["read","write","notify"],  // add notify properties
     * });
     *
     *  var service = new obniz.ble.service({
     *   uuid: 'FFF0',
     *   characteristics: [characteristic],
     * });
     * obniz.ble.peripheral.addService(service);
     *
     *
     * // after central connected
     * characteristic.notify();
     * ```
     */
    notify() {
        if (this._updateValueCallback) {
            this._updateValueCallback(Buffer.from(this.data));
        }
    }
}
exports.default = BleCharacteristic;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleLocalValueAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalValueAttributeAbstract.js"));
/**
 * @category Use as Peripheral
 */
class BleDescriptor extends bleLocalValueAttributeAbstract_1.default {
    // public permissions: any;
    /**
     * Create descriptor.
     *
     * ```javascript
     * await obniz.ble.initWait();
     * var descriptor = new obniz.ble.characteristic({
     *                     "uuid" : "2901",   //Characteristic User Description
     *                     "text" : "hello world characteristic",
     *                 });
     *
     *  var characteristic = new obniz.ble.characteristic({
     *                  "uuid" : "FFF1",
     *                  "text" : "Hi",
     *                  "descriptors" : [ descriptor ]
     *                });
     *
     * var service = new obniz.ble.service({
     *                "uuid" : "fff0",
     *                "characteristics" : [ characteristic ]
     * });
     * obniz.ble.peripheral.addService(service);
     *
     * ```
     *
     * @param obj
     */
    constructor(obj) {
        super(obj);
        // this.permissions = obj.permissions || [];
        // if (!Array.isArray(this.permissions)) {
        //   this.permissions = [this.permissions];
        // }
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'characteristic';
    }
    // public addPermission(param: any) {
    //   if (!this.permissions.includes(param)) {
    //     this.permissions.push(param);
    //   }
    // }
    // public removePermission(param: any) {
    //   this.permissions = this.permissions.filter ((elm: any ) => {
    //     return elm !== param;
    //   });
    // }
    /**
     * @ignore
     */
    toJSON() {
        const obj = super.toJSON();
        // if (this.permissions.length > 0) {
        //   obj.permissions = this.permissions;
        // }
        return obj;
    }
}
exports.default = BleDescriptor;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleHelper.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
class BleHelper {
    uuidFilter(uuid) {
        return uuid.toLowerCase().replace(/[^0-9abcdef]/g, '');
    }
    deviceAddressFilter(uuid) {
        return uuid.toLowerCase().replace(/[^0-9abcdef]/g, '');
    }
    toCamelCase(str) {
        str = str.charAt(0).toLowerCase() + str.slice(1);
        return str.replace(/[-_](.)/g, (match, group1) => {
            return group1.toUpperCase();
        });
    }
    toSnakeCase(str) {
        const camel = this.toCamelCase(str);
        return camel.replace(/[A-Z]/g, (s) => {
            return '_' + s.charAt(0).toLowerCase();
        });
    }
    buffer2reversedHex(buf, sepalator = '') {
        return this.reverseHexString(buf.toString('hex'), sepalator);
    }
    hex2reversedBuffer(address, sepalator = '') {
        if (sepalator === '') {
            return Buffer.from(this.reverseHexString(address), 'hex');
        }
        return Buffer.from(address.split(':').reverse().join(''), 'hex');
    }
    reverseHexString(str, separator = '') {
        // 40msec (100000 times)
        // return str
        //   .match(/.{1,2}/g)!
        //   .reverse()
        //   .join(separator);
        // 30msec (100000 times)
        // const parts = [];
        // for (let i = 0; i < str.length; i += 2) {
        //   parts.push(str.slice(i, i + 2));
        // }
        // return parts.reverse().join(separator);
        // 13msec (100000 times)
        let result = '';
        const len = str.length + (str.length % 2);
        for (let i = len; i > 0; i -= 2) {
            result += str.slice(i - 2, i) + separator;
        }
        if (separator.length !== 0) {
            return result.slice(0, -1 * separator.length);
        }
        return result;
    }
}
exports.default = new BleHelper();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @ignore
 */
var BleResponseResult;
(function (BleResponseResult) {
    BleResponseResult[BleResponseResult["SUCCESS"] = 0] = "SUCCESS";
    BleResponseResult[BleResponseResult["INVALID_OFFSET"] = 7] = "INVALID_OFFSET";
    BleResponseResult[BleResponseResult["ATTR_NOT_LONG"] = 11] = "ATTR_NOT_LONG";
    BleResponseResult[BleResponseResult["INVALID_ATTRIBUTE_LENGTH"] = 13] = "INVALID_ATTRIBUTE_LENGTH";
    BleResponseResult[BleResponseResult["UNLIKELY_ERROR"] = 14] = "UNLIKELY_ERROR";
})(BleResponseResult || (BleResponseResult = {}));
/**
 * @category Use as Peripheral
 */
class BleLocalAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
    }
    /**
     * @ignore
     */
    toBufferObj() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
            emit: this.emit.bind(this),
        };
        if (this.childrenName) {
            const key = this.childrenName;
            obj[key] = this.children.map((e) => e.toBufferObj());
        }
        return obj;
    }
    /**
     * @ignore
     * @param name
     * @param params
     */
    emit(name, ...params) {
        switch (name) {
            case 'readRequest':
                this._onReadRequest(...params);
                return true;
            case 'writeRequest':
                this._onWriteRequest(...params);
                return true;
        }
        return false;
    }
    /**
     * @ignore
     * @param offset
     * @param callback
     * @private
     */
    _onReadRequest(offset, callback) {
        if (this.data.length >= offset) {
            callback(BleResponseResult.SUCCESS, Buffer.from(this.data.slice(offset)));
            let address = null;
            if (this.parentName === 'characteristic') {
                address = this.characteristic.service.peripheral
                    .currentConnectedDeviceAddress;
            }
            else if (this.parentName === 'service') {
                address = this.service.peripheral.currentConnectedDeviceAddress;
            }
            this.notifyFromServer('onreadfromremote', { address });
        }
        else {
            callback(BleResponseResult.UNLIKELY_ERROR, null);
        }
    }
    /**
     * @ignore
     * @param data
     * @param offset
     * @param withoutResponse
     * @param callback
     * @private
     */
    _onWriteRequest(data, offset, withoutResponse, callback) {
        // console.log('onWriteRequest');
        this.data = Array.from(data);
        callback(BleResponseResult.SUCCESS);
        let address = null;
        if (this.parentName === 'characteristic') {
            address = this.characteristic.service.peripheral
                .currentConnectedDeviceAddress;
        }
        else if (this.parentName === 'service') {
            address = this.service.peripheral.currentConnectedDeviceAddress;
        }
        this.notifyFromServer('onwritefromremote', { address, data });
    }
    /**
     * @ignore
     * @param dataArray
     */
    async writeWait(dataArray) {
        this.data = dataArray;
        this.notifyFromServer('onwrite', { result: 'success' });
        return true;
    }
    /**
     * @ignore
     * @return dataArray
     */
    async readWait() {
        this.notifyFromServer('onread', { data: this.data });
        return this.data;
    }
}
exports.default = BleLocalAttributeAbstract;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleLocalValueAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleLocalAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js"));
/**
 * @category Use as Peripheral
 */
class BleLocalValueAttributeAbstract extends bleLocalAttributeAbstract_1.default {
    constructor(params) {
        super(params);
    }
    /**
     * This writes dataArray.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     * await attr.writeWait([0xf0,0x27]);
     * console.log("write success");
     * ```
     *
     * @param data
     */
    async writeWait(data) {
        this.data = data;
        this.notifyFromServer('onwrite', { result: 'success' });
        return true;
    }
    /**
     * It reads data.
     *
     * Even you wrote string or number, it returns binary array.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     * let data =  await attr.readWait()
     *  console.log("data: " , data );
     * ```
     */
    async readWait() {
        this.notifyFromServer('onread', { data: this.data });
        return this.data;
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case 'onwritefromremote': {
                this._runUserCreatedFunction(this.onwritefromremote, params.address, Array.from(params.data));
                break;
            }
            case 'onreadfromremote': {
                this._runUserCreatedFunction(this.onreadfromremote, params.address);
                break;
            }
        }
    }
}
exports.default = BleLocalValueAttributeAbstract;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/blePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleService.js"));
/**
 * @category Use as Peripheral
 */
class BlePeripheral {
    constructor(obnizBle) {
        this.obnizBle = obnizBle;
        this._services = [];
        this.currentConnectedDeviceAddress = null;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        if (this.currentConnectedDeviceAddress) {
            const address = this.currentConnectedDeviceAddress;
            this.currentConnectedDeviceAddress = null;
            this.obnizBle.Obniz._runUserCreatedFunction(this.onconnectionupdates, {
                address,
                status: 'disconnected',
                reason: new ObnizError_1.ObnizOfflineError(),
            });
        }
    }
    /**
     * @ignore
     * @private
     */
    _updateServices() {
        const bufData = this._services.map((e) => e.toBufferObj());
        this.obnizBle.peripheralBindings.setServices(bufData);
    }
    /**
     * This starts a service as peripheral.
     *
     *
     * ```javascript
     *
     * await obniz.ble.initWait();
     * // Service without characteristics
     * var service1 = new obniz.ble.service({"uuid" : "fff0"});
     * obniz.ble.peripheral.addService(service1);
     *
     * // Service with characteristics/descriptor
     * var service2 = new obniz.ble.service({"uuid" : "fff0"});
     * var characteristic = new obniz.ble.characteristic({"uuid" : "FFF1", "text": "Hi"});
     * var descriptor = new obniz.ble.descriptor({"uuid" : "2901", "text" : "hello world characteristic"});
     *
     * service2.addCharacteristic(characteristic);
     * characteristic.addDescriptor(descriptor);
     *
     * obniz.ble.peripheral.addService(service2); // call this after all descriptors and characteristics added to service.
     * ```
     *
     * @param service
     */
    addService(service) {
        this.obnizBle.warningIfNotInitialize();
        if (!(service instanceof bleService_1.default)) {
            service = new bleService_1.default(service);
        }
        this._services.push(service);
        service.peripheral = this;
        this._updateServices();
    }
    /**
     * @ignore
     * @private
     * @param json
     */
    setJson(json) {
        if (json.services) {
            for (const service of json.services) {
                this.addService(service);
            }
        }
    }
    /**
     * Get service by UUID
     *
     * @param uuid
     */
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        const result = this._services
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
        if (!result) {
            return null;
        }
        return result;
    }
    /**
     * Terminate service by UUID
     *
     * @param uuid
     */
    removeService(uuid) {
        this._services = this._services.filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) !== uuid;
        });
        this._updateServices();
    }
    /**
     * @ignore
     */
    stopAllService() {
        this._services = [];
        this._updateServices();
    }
    /**
     * @ignore
     */
    toJSON() {
        return {
            services: this._services,
        };
    }
    /**
     * @ignore
     * @param param
     */
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    /**
     * @ignore
     * @param param
     */
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    /**
     * This ends all the peripheral service
     *
     * ```javascript
     * obniz.ble.peripheral.addService(setting);
     * obniz.ble.peripheral.end();
     * ```
     */
    end() {
        this.stopAllService();
    }
    /**
     * @ignore
     * @param error
     */
    onerror(error) {
        // do nothing.
    }
}
exports.default = BlePeripheral;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js"));
/**
 * @category Use as Central
 */
class BleRemoteAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.isRemote = false;
        this.discoverdOnRemote = false;
    }
    /**
     * @ignore
     */
    get wsChildUuidName() {
        const childrenName = this.childrenName;
        if (!childrenName) {
            return null;
        }
        const childName = childrenName.slice(0, -1);
        return childName + '_uuid';
    }
}
exports.default = BleRemoteAttributeAbstract;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleRemoteDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteDescriptor.js"));
const bleRemoteValueAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteValueAttributeAbstract.js"));
/**
 * @category Use as Central
 */
class BleRemoteCharacteristic extends bleRemoteValueAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.properties = params.properties || [];
        if (!Array.isArray(this.properties)) {
            this.properties = [this.properties];
        }
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'service';
    }
    /**
     * @ignore
     */
    get childrenClass() {
        return bleRemoteDescriptor_1.default;
    }
    /**
     * @ignore
     *
     */
    get childrenName() {
        return 'descriptors';
    }
    /**
     * It contains descriptors in a characteristic.
     * It was discovered when connection automatically.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *    uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *    console.log('no such peripheral')
     *    return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   var service = peripheral.getService("1800")
     *   var c = service.getCharacteristic("fff0")
     *   for (var d of c.descriptors) {
     *     console.log(d.uuid)
     *  }
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     */
    get descriptors() {
        return this.children;
    }
    /**
     * @ignore
     * @param params
     */
    addDescriptor(params) {
        return this.addChild(params);
    }
    /**
     * It returns a descriptors which having specified uuid in a characteristic.
     * Return value is null when not matched.
     *
     * Case is ignored. So aa00 and AA00 are the same.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *  uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *   console.log('no such peripheral')
     *   return;
     * }
     * try {
     *  await peripheral.connectWait();
     *  console.log("connected");
     *  var service = peripheral.getService("1800")
     *  var c = service.getCharacteristic("fff0")
     *  var d = c.getDescriptor("fff0")
     *  console.log(d.uuid)
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     *
     * @param uuid
     */
    getDescriptor(uuid) {
        return this.getChild(uuid);
    }
    /**
     * This sets a callback function to receive notify when it comes from periperal.
     * To receive notify, you need to register on CCCD Descriptor(0x2902).
     *
     * More information of BLE/CCCD is available at [bluetooth.com](https://www.bluetooth.com/specifications/gatt/descriptors/).
     *
     * ```javascript
     * await obniz.ble.initWait();
     * var target = {
     *  localName: "obniz-notify"
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * await peripheral.connectWait();
     * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');
     *
     * char.onregisternotify = function() {
     *   console.log("register finshed")
     * }
     *
     * char.registerNotify( function(data){
     *   console.log("notify with data " + data.join(','));
     * });
     * ```
     *
     * @param callback
     * @deprecated  replaced by {@link #registerNotifyWait()}
     */
    registerNotify(callback) {
        // noinspection JSIgnoredPromiseFromCall
        this.registerNotifyWait(callback); // background
    }
    /**
     * This sets a notify callback function and wait to finish register.
     *
     * ```javascript
     *
     * await obniz.ble.initWait();
     * var target = {
     *   localName: "obniz-notify"
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * await peripheral.connectWait();
     * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');
     *
     * await char.registerNotifyWait( function(data){
     *   console.log("notify with data " + data.join(','));
     * });
     * ```
     *
     * @param callback
     *
     */
    async registerNotifyWait(callback) {
        this.onnotify = callback;
        await this.service.peripheral.obnizBle.centralBindings.notifyWait(this.service.peripheral.address, this.service.uuid, this.uuid, true);
        if (this.onregisternotify) {
            this.onregisternotify();
        }
    }
    /**
     * unregistrate a callback which is registrated by [[registerNotify]] or [[registerNotifyWait]].
     *
     *
     * ```javascript
     *
     * await obniz.ble.initWait();
     * var target = {
     *  localName: "obniz-notify"
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * await peripheral.connectWait();
     * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');
     *
     * char.onregisternotify = function() {
     *  console.log("register finished")
     *  char.unregisterNotify();
     * }
     *
     * char.onunregisternotify = function() {
     *   console.log("unregistrated")
     * }
     *
     * char.registerNotify( function(data){
     *   console.log("notify with data " + data.join(','));
     * });
     *
     * ```
     *
     * @deprecated  replaced by {@link #unregisterNotifyWait()}
     */
    unregisterNotify() {
        // noinspection JSIgnoredPromiseFromCall
        this.unregisterNotifyWait(); // background
    }
    /**
     * Unregistrate a callback which is registrated by [[registerNotify]] or [[registerNotifyWait]].
     * And wait until done.
     *
     * ```javascript
     *
     *
     * await obniz.ble.initWait();
     * var target = {
     *  localName: "obniz-notify"
     * };
     *
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * await peripheral.connectWait();
     * let char = peripheral.getService('fff0').getCharacteristic('fff1');
     *
     * await char.registerNotifyWait(function(data){
     *   console.log("notify with data " + data.join(','));
     * });
     * await char.unregisterNotifyWait();
     * console.log("unregistrated")
     * ```
     *
     */
    async unregisterNotifyWait() {
        this.onnotify = () => {
            // do nothing.
        };
        await this.service.peripheral.obnizBle.centralBindings.notifyWait(this.service.peripheral.address, this.service.uuid, this.uuid, false);
        this._runUserCreatedFunction(this.onunregisternotify);
    }
    /**
     * Wait for notification and return data when it arrives.
     *
     * ```javascript
     *
     * await obniz.ble.initWait();
     * var target = {
     *   localName: "obniz-notify"
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * await peripheral.connectWait();
     * let char = peripheral.getService('fff0').getCharacteristic('fff1');
     *
     * let data = await c.getNotifyWait();
     * console.log("notify with data " + data.join(','));
     * ```
     *
     * @returns data from notification of the device
     */
    async getNotifyWait() {
        return new Promise((resolve) => {
            this.registerNotifyWait((data) => {
                resolve(data);
            });
        });
    }
    /**
     * Use readWait() instead from 3.5.0
     *
     * @deprecated
     */
    read() {
        throw new ObnizError_1.ObnizDeprecatedFunctionError('read', 'readWait');
    }
    /**
     * Use writeWait() instead from 3.5.0
     *
     * @deprecated
     */
    write(array, needResponse) {
        throw new ObnizError_1.ObnizDeprecatedFunctionError('read', 'readWait');
    }
    /**
     * This writes dataArray to the characteristic.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     *
     *  await obniz.ble.initWait();
     *   var target = {
     *    uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(peripheral){
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   await obniz.wait(1000);
     *
     *   var dataArray = [0x02, 0xFF];
     *   await peripheral.getService("FF00").getCharacteristic("FF01").writeWait(dataArray);
     *   console.log("write success");
     * }
     * ```
     *
     * @param data
     * @param needResponse
     */
    async writeWait(data, needResponse) {
        if (needResponse === undefined) {
            needResponse = true;
        }
        await this.service.peripheral.obnizBle.centralBindings.writeWait(this.service.peripheral.address, this.service.uuid, this.uuid, Buffer.from(data), !needResponse);
        this._runUserCreatedFunction(this.onwrite, 'success');
        return true;
    }
    /**
     * It reads data from the characteristic.
     *
     * Even you wrote string or number, it returns binary array.
     * The returned value appears in the callback function (onread). If reading succeeds an Array with data will be returned.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * var target = {
     *  uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(peripheral){
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   await obniz.wait(1000);
     *
     *   var dataArray = await peripheral.getService("FF00").getCharacteristic("FF01").readWait();
     *   console.log(dataArray);
     * }
     * ```
     */
    async readWait() {
        const buf = await this.service.peripheral.obnizBle.centralBindings.readWait(this.service.peripheral.address, this.service.uuid, this.uuid);
        const data = Array.from(buf);
        this._runUserCreatedFunction(this.onread, data);
        return data;
    }
    /**
     * Discover services.
     *
     * If connect setting param 'autoDiscovery' is true(default),
     * services are automatically discover on connection established.
     *
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait({});
     * obniz.ble.scan.onfind = function(peripheral){
     * if(peripheral.localName == "my peripheral"){
     *      peripheral.onconnect = async function(){
     *          console.log("success");
     *          await peripheral.discoverAllServicesWait(); //manually discover
     *          let service = peripheral.getService("1800");
     *          await service.discoverAllCharacteristicsWait(); //manually discover
     *          let characteristics = service.getCharacteristic("ff00");
     *          await characteristics.discoverAllDescriptorsWait(); //manually discover
     *          let descriptor = characteristics.getDescriptor("fff1");
     *      }
     *      peripheral.connect({autoDiscovery:false});
     *     }
     * }
     * await obniz.ble.scan.startWait();
     * ```
     */
    async discoverAllDescriptorsWait() {
        const descriptors = await this.service.peripheral.obnizBle.centralBindings.discoverDescriptorsWait(this.service.peripheral.address, this.service.uuid, this.uuid);
        for (const descr of descriptors) {
            const uuid = descr;
            let child = this.getChild(uuid);
            if (!child) {
                child = this.addChild({ uuid });
            }
            child.discoverdOnRemote = true;
            this.ondiscover(child);
        }
        return this.descriptors.filter((elm) => {
            return elm.discoverdOnRemote;
        });
    }
    /**
     * @ignore
     */
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        return obj;
    }
    /**
     * This characteristics can broadcast or not.
     */
    canBroadcast() {
        return this.properties.includes('broadcast');
    }
    /**
     * This characteristics can notify or not.
     */
    canNotify() {
        return this.properties.includes('notify');
    }
    /**
     * This characteristics can read or not.
     */
    canRead() {
        return this.properties.includes('read');
    }
    /**
     * This characteristics can write or not.
     */
    canWrite() {
        return this.properties.includes('write');
    }
    /**
     * This characteristics can 'write without response' or not.
     */
    canWriteWithoutResponse() {
        return this.properties.includes('write_without_response');
    }
    /**
     * This characteristics can indicate or not.
     */
    canIndicate() {
        return this.properties.includes('indicate');
    }
    /**
     * @ignore
     * @param descriptor
     */
    ondiscover(descriptor) {
        this._runUserCreatedFunction(this.ondiscoverdescriptor, descriptor);
    }
    /**
     * @ignore
     * @param descriptors
     */
    ondiscoverfinished(descriptors) {
        this._runUserCreatedFunction(this.ondiscoverdescriptorfinished, descriptors);
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        switch (notifyName) {
            case 'onnotify': {
                this._runUserCreatedFunction(this.onnotify, params.data || undefined);
                break;
            }
        }
    }
}
exports.default = BleRemoteCharacteristic;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleRemoteValueAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteValueAttributeAbstract.js"));
/**
 * @category Use as Central
 */
class BleRemoteDescriptor extends bleRemoteValueAttributeAbstract_1.default {
    constructor(params) {
        super(params);
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'characteristic';
    }
    /**
     * Read data from descriptor.
     *
     * The return value appears in the callback function [[onread]].
     * If reading succeeds an Array with data will be returned.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(peripheral){
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   await obniz.wait(1000);
     *
     *   var dataArray = await peripheral.getService("FF00").getCharacteristic("FF01").readWait();
     *   console.log(dataArray);
     * }
     * ```
     *
     */
    async readWait() {
        const buf = await this.characteristic.service.peripheral.obnizBle.centralBindings.readValueWait(this.characteristic.service.peripheral.address, this.characteristic.service.uuid, this.characteristic.uuid, this.uuid);
        const data = Array.from(buf);
        this._runUserCreatedFunction(this.onread, data);
        return data;
    }
    /**
     * This writes dataArray to descriptor.
     * It throws an error when failed.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(peripheral){
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   await obniz.wait(1000);
     *
     *   var dataArray = [0x02, 0xFF];
     *   await peripheral.getService("FF00").getCharacteristic("FF01").getDescriptor("2901").writeWait(dataArray);
     *   console.log("write success");
     * }
     * ```
     *
     * @param data
     */
    async writeWait(data) {
        await this.characteristic.service.peripheral.obnizBle.centralBindings.writeValueWait(this.characteristic.service.peripheral.address, this.characteristic.service.uuid, this.characteristic.uuid, this.uuid, Buffer.from(data));
        this._runUserCreatedFunction(this.onwrite, 'success');
        return true;
    }
    /**
     * @ignore
     */
    ondiscover(child) {
        // do nothing.
    }
    /**
     * @ignore
     * @param children
     */
    ondiscoverfinished(children) {
        // do nothing.
    }
}
exports.default = BleRemoteDescriptor;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemotePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const ble_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/ble.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const bleRemoteService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteService.js"));
/**
 * @category Use as Central
 */
class BleRemotePeripheral {
    constructor(obnizBle, address) {
        this.advertisingDataRows = {};
        this.scanResponseDataRows = {};
        /**
         * @ignore
         */
        this._connectSetting = {};
        /**
         * Indicating this peripheral is found by scan or set from software.
         *
         * @ignore
         */
        this.discoverdOnRemote = undefined;
        this.keys = [
            'device_type',
            'address_type',
            'ble_event_type',
            'rssi',
            'adv_data',
            'scan_resp',
        ];
        this.obnizBle = obnizBle;
        this.address = address;
        this.connected = false;
        this.connected_at = null;
        this.device_type = null;
        this.address_type = null;
        this.ble_event_type = null;
        this.rssi = null;
        // this.adv_data = null;
        this.scan_resp = null;
        this.localName = null;
        this.manufacturerSpecificData = null;
        this.manufacturerSpecificDataInScanResponse = null;
        this.iBeacon = null;
        this._services = [];
        this.emitter = new eventemitter3_1.default();
    }
    /**
     * It contains all discovered services in a peripheral as an array.
     * It is discovered when connection automatically.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *     console.log('no such peripheral')
     *     return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   for (var service of peripheral.services) {
     *       console.log(service.uuid)
     *   }
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     *
     */
    get services() {
        return this._services;
    }
    /**
     * @ignore
     * @return {String} json value
     */
    toString() {
        return JSON.stringify({
            address: this.address,
            addressType: this.address_type,
            advertisement: this.adv_data,
            scanResponse: this.scan_resp,
            rssi: this.rssi,
        });
    }
    /**
     * @ignore
     * @param dic
     */
    setParams(dic) {
        this.advertise_data_rows = null;
        for (const key in dic) {
            // eslint-disable-next-line no-prototype-builtins
            if (dic.hasOwnProperty(key) && this.keys.includes(key)) {
                this[key] = dic[key];
            }
        }
        this.analyseAdvertisement();
    }
    /**
     * @deprecated As of release 3.5.0, replaced by {@link #connectWait()}
     */
    connect(setting) {
        // noinspection JSIgnoredPromiseFromCall
        this.connectWait(setting); // background
    }
    /**
     * This connects obniz to the peripheral.
     * If ble scanning is undergoing, scan will be terminated immidiately.
     *
     * It throws when connection establish failed.
     *
     * when connection established, all service/characteristics/desriptors will be discovered automatically.
     * This function will wait until all discovery done.
     *
     * About Failures
     * Connection fails some reasons. You can find reason from thrown error.
     * Also obniz provide 90 seconds timeout for connection establish.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *    uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *    console.log('no such peripheral')
     *    return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     * } catch(e) {
     *   console.log("can't connect");
     * }
     * ```
     *
     * There are options for connection
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *    uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *    console.log('no such peripheral')
     *    return;
     * }
     * try {
     *   await peripheral.connectWait({
     *
     *   });
     *   console.log("connected");
     * } catch(e) {
     *   console.log("can't connect");
     * }
     * ```
     *
     */
    async connectWait(setting) {
        var _a;
        if (this.connected && ((_a = setting) === null || _a === void 0 ? void 0 : _a.forceConnect) === false)
            return;
        this._connectSetting = setting || {};
        this._connectSetting.autoDiscovery =
            this._connectSetting.autoDiscovery !== false;
        this._connectSetting.mtuRequest =
            this._connectSetting.mtuRequest === undefined
                ? 256
                : this._connectSetting.mtuRequest;
        await this.obnizBle.scan.endWait();
        try {
            await this.obnizBle.centralBindings.connectWait(this.address, this._connectSetting.mtuRequest, () => {
                if (this._connectSetting.pairingOption) {
                    this.setPairingOption(this._connectSetting.pairingOption);
                }
            });
        }
        catch (e) {
            if (e instanceof ObnizError_1.ObnizTimeoutError) {
                await this.obnizBle.resetWait();
                throw new Error(`Connection to device(address=${this.address}) was timedout. ble have been reseted`);
            }
            throw e;
        }
        this.connected = true;
        this.connected_at = new Date();
        try {
            if (this._connectSetting.autoDiscovery) {
                await this.discoverAllHandlesWait();
            }
        }
        catch (e) {
            try {
                await this.disconnectWait();
            }
            catch (e2) {
                // nothing
            }
            throw e;
        }
        this.obnizBle.Obniz._runUserCreatedFunction(this.onconnect);
        this.emitter.emit('connect');
    }
    /**
     * @deprecated replaced by {@link #disconnectWait()}
     */
    disconnect() {
        // noinspection JSIgnoredPromiseFromCall
        this.disconnectWait(); // background
    }
    /**
     * This disconnects obniz from peripheral.
     *
     * It throws when failed
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *  uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *   console.log('no such peripheral')
     *   return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   await peripheral.disconnectWait();
     *   console.log("disconnected");
     * } catch(e) {
     *    console.log("can't connect / can't disconnect");
     * }
     * ```
     */
    disconnectWait() {
        return new Promise((resolve, reject) => {
            if (!this.connected) {
                resolve();
                return;
            }
            const cuttingFailedError = new Error(`cutting connection to peripheral name=${this.localName} address=${this.address} was failed`);
            this.emitter.once('statusupdate', (params) => {
                clearTimeout(timeoutTimer);
                if (params.status === 'disconnected') {
                    resolve(true); // for compatibility
                }
                else {
                    reject(cuttingFailedError);
                }
            });
            const timeoutError = new ObnizError_1.ObnizTimeoutError(`cutting connection to peripheral name=${this.localName} address=${this.address} was failed`);
            const timeoutTimer = setTimeout(() => {
                reject(timeoutError);
            }, 90 * 1000);
            this.obnizBle.centralBindings.disconnect(this.address);
        });
    }
    /**
     * It returns a service which having specified uuid in [[services]].
     * Case is ignored. So aa00 and AA00 are the same.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *   console.log('no such peripheral')
     *   return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   var service = peripheral.getService("1800")
     *   if (!service) {
     *     console.log("service not found")
     *     return;
     *   }
     *   console.log(service.uuid)
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     *
     * @param uuid
     */
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        for (const key in this._services) {
            if (this._services[key].uuid === uuid) {
                return this._services[key];
            }
        }
        return null;
    }
    /**
     * @ignore
     * @param param
     */
    findService(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        return this.getService(serviceUuid);
    }
    /**
     * @ignore
     * @param param
     */
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    /**
     * @ignore
     * @param param
     */
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    /**
     * Discover services.
     *
     * If connect setting param 'autoDiscovery' is true(default),
     * services are automatically disvocer on connection established.
     *
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait({});
     * obniz.ble.scan.onfind = function(peripheral){
     * if(peripheral.localName == "my peripheral"){
     *      peripheral.onconnect = async function(){
     *          console.log("success");
     *          await peripheral.discoverAllServicesWait(); //manually discover
     *          let service = peripheral.getService("1800");
     *      }
     *      peripheral.connectWait({autoDiscovery:false});
     *     }
     * }
     * await obniz.ble.scan.startWait();
     * ```
     */
    async discoverAllServicesWait() {
        const serviceUuids = await this.obnizBle.centralBindings.discoverServicesWait(this.address);
        for (const uuid of serviceUuids) {
            let child = this.getService(uuid);
            if (!child) {
                const newService = new bleRemoteService_1.default({ uuid });
                newService.parent = this;
                this._services.push(newService);
                child = newService;
            }
            child.discoverdOnRemote = true;
            this.obnizBle.Obniz._runUserCreatedFunction(this.ondiscoverservice, child);
        }
        const children = this._services.filter((elm) => {
            return elm.discoverdOnRemote;
        });
        this.obnizBle.Obniz._runUserCreatedFunction(this.ondiscoverservicefinished, children);
        return children;
    }
    /**
     * @ignore
     */
    async discoverAllHandlesWait() {
        const ArrayFlat = (array, depth) => {
            const flattend = [];
            const flat = (_array, _depth) => {
                for (const el of _array) {
                    if (Array.isArray(el) && _depth > 0) {
                        flat(el, _depth - 1);
                    }
                    else {
                        flattend.push(el);
                    }
                }
            };
            flat(array, Math.floor(depth) || 1);
            return flattend;
        };
        const services = await this.discoverAllServicesWait();
        const charsNest = await Promise.all(services.map((s) => s.discoverAllCharacteristicsWait()));
        const chars = ArrayFlat(charsNest);
        const descriptorsNest = await Promise.all(chars.map((c) => c.discoverAllDescriptorsWait()));
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const descriptors = ArrayFlat(descriptorsNest);
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case 'statusupdate': {
                if (params.status === 'disconnected') {
                    const pre = this.connected;
                    this.connected = false;
                    this.connected_at = null;
                    if (pre) {
                        this.obnizBle.Obniz._runUserCreatedFunction(this.ondisconnect, params.reason);
                        this.emitter.emit('disconnect', params.reason);
                    }
                }
                break;
            }
        }
    }
    /**
     * @ignore
     */
    advertisementServiceUuids() {
        const results = [];
        this._addServiceUuids(results, this.searchTypeVal(0x02), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x03), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x04), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x05), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x06), 128);
        this._addServiceUuids(results, this.searchTypeVal(0x07), 128);
        return results;
    }
    /**
     * Start pairing.
     * This function return `keys` which you can use next time pairing with same device.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait({});
     * obniz.ble.scan.onfind = function(peripheral){
     * if(peripheral.localName == "my peripheral"){
     *      peripheral.onconnect = async function(){
     *          console.log("success");
     *          const keys = await peripheral.pairingWait();
     *
     *          // Please store `keys` if you want to bond.
     *      }
     *      await peripheral.connectWait();
     *     }
     * }
     * await obniz.ble.scan.startWait();
     * ```
     *
     *
     *
     * If you have already keys, please use options.keys
     *
     * ```javascript
     * // Javascript Example
     *
     * const keys = "xxxxx";
     * await obniz.ble.initWait({});
     * obniz.ble.scan.onfind = function(peripheral){
     * if(peripheral.localName == "my peripheral"){
     *      peripheral.onconnect = async function(){
     *          console.log("success");
     *          await peripheral.pairingWait({keys});  // pairing with stored keys.
     *
     *      }
     *      await peripheral.connectWait();
     *     }
     * }
     * await obniz.ble.scan.startWait();
     * ```
     *
     * Go to [[BlePairingOptions]] to see more option.
     *
     * @param options BlePairingOptions
     */
    async pairingWait(options) {
        const result = await this.obnizBle.centralBindings.pairingWait(this.address, options);
        return result;
    }
    setPairingOption(options) {
        this.obnizBle.centralBindings.setPairingOption(this.address, options);
    }
    analyseAdvertisement() {
        if (this.advertise_data_rows)
            return;
        this.advertise_data_rows = [];
        if (this.adv_data) {
            for (let i = 0; i < this.adv_data.length; i++) {
                const length = this.adv_data[i];
                const arr = new Array(length);
                for (let j = 0; j < length; j++) {
                    arr[j] = this.adv_data[i + j + 1];
                }
                this.advertise_data_rows.push(arr);
                this.advertisingDataRows[this.adv_data[i + 1]] = this.adv_data.slice(i + 2, i + length + 1);
                i = i + length;
            }
        }
        if (this.scan_resp) {
            for (let i = 0; i < this.scan_resp.length; i++) {
                const length = this.scan_resp[i];
                const arr = new Array(length);
                for (let j = 0; j < length; j++) {
                    arr[j] = this.scan_resp[i + j + 1];
                }
                this.advertise_data_rows.push(arr);
                this.scanResponseDataRows[this.scan_resp[i + 1]] = this.scan_resp.slice(i + 2, i + length + 1);
                i = i + length;
            }
        }
        this.setLocalName();
        this.setManufacturerSpecificData();
        this.setIBeacon();
    }
    searchTypeVal(type, fromScanResponseData = false) {
        this.analyseAdvertisement();
        if (this.advertisingDataRows[type] && !fromScanResponseData)
            return this.advertisingDataRows[type];
        else if (this.scanResponseDataRows[type])
            return this.scanResponseDataRows[type];
        else
            return undefined;
    }
    setLocalName() {
        var _a;
        const data = (_a = this.searchTypeVal(0x09), (_a !== null && _a !== void 0 ? _a : this.searchTypeVal(0x08)));
        this.localName = data ? String.fromCharCode.apply(null, data) : null;
    }
    setManufacturerSpecificData() {
        var _a, _b;
        this.manufacturerSpecificData = (_a = this.searchTypeVal(0xff), (_a !== null && _a !== void 0 ? _a : null));
        this.manufacturerSpecificDataInScanResponse = (_b = this.searchTypeVal(0xff, true), (_b !== null && _b !== void 0 ? _b : null));
    }
    setIBeacon() {
        const data = this.manufacturerSpecificData;
        if (!data ||
            data[0] !== 0x4c ||
            data[1] !== 0x00 ||
            data[2] !== 0x02 ||
            data[3] !== 0x15 ||
            data.length !== 25) {
            this.iBeacon = null;
            return;
        }
        const uuidData = data.slice(4, 20);
        let uuid = '';
        for (let i = 0; i < uuidData.length; i++) {
            uuid = uuid + ('00' + uuidData[i].toString(16)).slice(-2);
            if (i === 4 - 1 ||
                i === 4 + 2 - 1 ||
                i === 4 + 2 * 2 - 1 ||
                i === 4 + 2 * 3 - 1) {
                uuid += '-';
            }
        }
        const major = (data[20] << 8) + data[21];
        const minor = (data[22] << 8) + data[23];
        const power = Buffer.from([data[24]]).readInt8(0);
        this.iBeacon = {
            uuid,
            major,
            minor,
            power,
            rssi: this.rssi,
        };
    }
    _addServiceUuids(results, data, bit) {
        if (!data) {
            return;
        }
        const uuidLength = bit / 8;
        for (let i = 0; i < data.length; i = i + uuidLength) {
            const one = data.slice(i, i + uuidLength);
            results.push(ble_1.default._dataArray2uuidHex(one, true));
        }
    }
}
exports.default = BleRemotePeripheral;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js"));
const bleRemoteCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteCharacteristic.js"));
/**
 * @category Use as Central
 */
class BleRemoteService extends bleRemoteAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'peripheral';
    }
    /**
     * @ignore
     */
    get childrenClass() {
        return bleRemoteCharacteristic_1.default;
    }
    /**
     * @ignore
     */
    get childrenName() {
        return 'characteristics';
    }
    /**
     * It contains characteristics in a service.
     * It was discovered when connection automatically.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *     uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     *  if(!peripheral) {
     *     console.log('no such peripheral')
     *     return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   var service = peripheral.getService("1800")
     *   for (var c of service.characteristics) {
     *     console.log(c.uuid)
     *   }
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     */
    get characteristics() {
        return this.children;
    }
    /**
     * @ignore
     * @param param
     */
    addCharacteristic(param) {
        return this.addChild(param);
    }
    /**
     * It returns a characteristic which having specified uuid in a service.
     * Return value is null when not matched.
     *
     * Case is ignored. So aa00 and AA00 are the same.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * if(!peripheral) {
     *    console.log('no such peripheral')
     *     return;
     * }
     * try {
     *   await peripheral.connectWait();
     *   console.log("connected");
     *   var service = peripheral.getService("1800")
     *   var c = service.getCharacteristic("fff0")
     *   console.log(c.uuid)
     * } catch(e) {
     *   console.error(e);
     * }
     * ```
     *
     * @param uuid
     */
    getCharacteristic(uuid) {
        return this.getChild(uuid);
    }
    /**
     * @ignore
     * @deprecated  replaced by {@link #discoverAllCharacteristicsWait()}
     */
    discoverAllCharacteristics() {
        // noinspection JSIgnoredPromiseFromCall
        this.discoverAllCharacteristicsWait(); // background
    }
    /**
     * Discover services.
     *
     * If connect setting param 'autoDiscovery' is true(default),
     * services are automatically disvocer on connection established.
     *
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait({});
     * obniz.ble.scan.onfind = function(peripheral){
     * if(peripheral.localName == "my peripheral"){
     *      peripheral.onconnect = async function(){
     *          console.log("success");
     *          await peripheral.discoverAllServicesWait(); //manually discover
     *          let service = peripheral.getService("1800");
     *          await service.discoverAllCharacteristicsWait(); //manually discover
     *          let characteristics = service.getCharacteristic("ff00")
     *      }
     *      peripheral.connect({autoDiscovery:false});
     *     }
     * }
     * await obniz.ble.scan.startWait();
     * ```
     */
    async discoverAllCharacteristicsWait() {
        const chars = await this.parent.obnizBle.centralBindings.discoverCharacteristicsWait(this.peripheral.address, this.uuid);
        for (const char of chars) {
            const uuid = char.uuid;
            const properties = char.properties.map((e) => bleHelper_1.default.toSnakeCase(e));
            let child = this.getChild(uuid);
            if (!child) {
                child = this.addChild({ uuid });
            }
            child.discoverdOnRemote = true;
            child.properties = properties || [];
            this.ondiscover(child);
        }
        return this.characteristics.filter((elm) => {
            return elm.discoverdOnRemote;
        });
    }
    /**
     * @ignore
     * @param characteristic
     */
    ondiscover(characteristic) {
        this._runUserCreatedFunction(this.ondiscovercharacteristic, characteristic);
    }
    /**
     * @ignore
     * @param characteristics
     */
    ondiscoverfinished(characteristics) {
        this._runUserCreatedFunction(this.ondiscovercharacteristicfinished, characteristics);
    }
    /**
     * @ignore
     * @param characteristic
     */
    ondiscovercharacteristic(characteristic) {
        // do nothing.
    }
    /**
     * @ignore
     * @param characteristics
     */
    ondiscovercharacteristicfinished(characteristics) {
        // do nothing.
    }
    /**
     * @ignore
     */
    async readWait() {
        throw new Error('cannot read service');
    }
    /**
     * @ignore
     */
    async writeWait() {
        throw new Error('cannot write service');
    }
}
exports.default = BleRemoteService;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteValueAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js"));
/**
 * @category Use as Central
 */
class BleRemoteValueAttributeAbstract extends bleRemoteAttributeAbstract_1.default {
    /**
     * Wrapper for [[readWait]] with data converting to text.
     * It convert  UTF-8 and write binary array to string.
     *
     * It throws an error when failed.
     */
    readTextWait() {
        return super.readTextWait();
    }
    /**
     * Wrapper for [[writeWait]] with data converting from number.
     * It writes data as 1byte.
     *
     * It throws an error when failed.
     *
     * @return val
     */
    readNumberWait() {
        return super.readNumberWait();
    }
    /**
     * Wrapper for [[writeWait]] with data converting from text.
     * It convert string to UTF-8 and write binary array.
     *
     * It throws an error when failed.
     *
     * @param str
     * @param needResponse
     */
    writeTextWait(str, needResponse) {
        return super.writeTextWait(str, needResponse);
    }
    /**
     * Wrapper for [[writeWait]] with data converting from number.
     * It writes data as 1byte.
     *
     * It throws an error when failed.
     *
     * @param val
     * @param needResponse
     */
    writeNumberWait(val, needResponse) {
        return super.writeNumberWait(val, needResponse);
    }
}
exports.default = BleRemoteValueAttributeAbstract;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleScan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const assert_1 = __webpack_require__("./node_modules/assert/assert.js");
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @category Use as Central
 */
class BleScan {
    constructor(obnizBle) {
        this.state = 'stopped';
        this._delayNotifyTimers = [];
        this.obnizBle = obnizBle;
        this.emitter = new eventemitter3_1.default();
        this.scanTarget = {};
        this.scanSettings = {};
        this.scanedPeripherals = [];
        this._timeoutTimer = undefined;
        this.obnizBle.Obniz.on('_close', () => {
            this.clearTimeoutTimer();
        });
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.scanTarget = {};
        this.scanSettings = {};
        this.scanedPeripherals = [];
        this.clearTimeoutTimer();
        this.finish(new Error(`Reset Occurred while scanning.`));
    }
    /**
     * Use startWait() instead.
     *
     * @deprecated
     */
    start(target = {}, settings = {}) {
        console.log(`start() is deprecated since 3.5.0. Use startWait() instead`);
        this.startWait(target, settings)
            .then(() => {
            // do nothing.
        })
            .catch((e) => {
            throw e;
        });
    }
    /**
     * This starts scanning BLE.
     *
     * You can filter uuids or localName using the target param.
     *
     * ```javascript
     * // Javascript Example
     * var target = {
     *     uuids: ["fff0","FFF1"],     //scan only has uuids "fff0" and "FFF1"
     *     localName: "obniz-BLE",     //scan only has localName "obniz-BLE"
     * };
     *
     * var setting = {
     *    duration : 10  //scan duration time in seconds. default is 30 sec.
     * }
     *
     * await obniz.ble.initWait();
     * await obniz.ble.scan.startWait(target, setting);
     * ```
     *
     * This is also possible without params being valid.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.scan.startWait();
     * ```
     *
     * Scanning starts with no error and results with not advertisement found while a device is trying to connect a peripheral.
     * Before start scannnig. Establishing connection must be completed or canceled.
     *
     * @param target
     * @param settings
     */
    async startWait(target = {}, settings = {}) {
        this.obnizBle.warningIfNotInitialize();
        if (this.isContainingBleScanSettingProperty(target)) {
            this.obnizBle.Obniz.warning({
                alert: 'warning',
                message: `Unexpected arguments. It might be contained the second argument keys. Please check object keys and order of 'startWait()' / 'startOneWait()' / 'startAllWait()' arguments. `,
            });
        }
        this.state = 'starting';
        try {
            const timeout = settings.duration === undefined ? 30 : settings.duration;
            settings.duplicate = !!settings.duplicate;
            settings.filterOnDevice = !!settings.filterOnDevice;
            settings.activeScan = settings.activeScan !== false;
            settings.waitBothAdvertisementAndScanResponse =
                settings.waitBothAdvertisementAndScanResponse !== false;
            this.scanSettings = settings;
            this.scanTarget = {};
            target = target || {};
            this.scanTarget.binary = target.binary;
            if (target && target.deviceAddress) {
                this.scanTarget.deviceAddress = this._arrayWrapper(target.deviceAddress).map((elm) => {
                    return bleHelper_1.default.deviceAddressFilter(elm);
                });
            }
            this.scanTarget.localName = target.localName;
            this.scanTarget.localNamePrefix = target.localNamePrefix;
            this.scanTarget.uuids = [];
            if (target && target.uuids) {
                this.scanTarget.uuids = target.uuids.map((elm) => {
                    return bleHelper_1.default.uuidFilter(elm);
                });
            }
            this.scanedPeripherals = [];
            this._clearDelayNotifyTimer();
            if (settings.filterOnDevice) {
                this._setTargetFilterOnDevice(this.scanTarget);
            }
            else {
                this._setTargetFilterOnDevice({}); // clear
            }
            await this.obnizBle.centralBindings.startScanningWait([], settings.duplicate, settings.activeScan);
            this.clearTimeoutTimer();
            if (timeout !== null) {
                this._timeoutTimer = setTimeout(async () => {
                    this._timeoutTimer = undefined;
                    try {
                        await this.endWait();
                    }
                    catch (e) {
                        this.finish(e);
                    }
                }, timeout * 1000);
            }
            this.state = 'started';
        }
        catch (e) {
            this.state = 'stopped';
            throw e;
        }
    }
    /**
     * This scans and returns the first peripheral that was found among the objects specified in the target.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *   uuids: ["fff0"],
     * };
     *
     * var peripheral = await obniz.ble.scan.startOneWait(target);
     * console.log(peripheral);
     * ```
     *
     * @param target
     * @param settings
     */
    async startOneWait(target, settings = {}) {
        await this.startWait(target, settings);
        return new Promise((resolve, reject) => {
            this.emitter.once('onfind', async (peripheral, error) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(peripheral);
                await this.endWait();
            });
            this.emitter.once('onfinish', (peripherals, error) => {
                if (error) {
                    assert_1.rejects(error);
                    return;
                }
                resolve(null);
            });
        });
    }
    /**
     * This scans and returns all the peripherals found.
     *
     * This function does not return until scanning gets timed out.(default 30sec)
     * If you want to change the default duration, you can do so with the duration param.
     *
     * ```javascript
     * // Javascript Example
     *
     * await obniz.ble.initWait();
     * var target = {
     *  uuids: ["fff0"],
     * };
     * var setting = {
     *   duration : 10
     * }
     *
     * var peripherals = await obniz.ble.scan.startAllWait(target,setting);
     *
     * for(var peripheral of peripherals){
     *   console.log(peripheral);
     * }
     * ```
     *
     * @param target
     * @param settings
     */
    async startAllWait(target, settings) {
        await this.startWait(target, settings);
        return new Promise((resolve, reject) => {
            this.emitter.once('onfinish', (peripherals, error) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(this.scanedPeripherals);
            });
        });
    }
    /**
     * Use endWait() instead
     *
     * @deprecated
     */
    end() {
        console.log(`end() is deprecated since 3.5.0. Use endWait() instead`);
        this.endWait()
            .then(() => {
            // do nothing.
        })
            .catch((e) => {
            throw e;
        });
    }
    /**
     * This stops scanning BLE.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * await obniz.ble.scan.startWait();
     * await obniz.wait(5000);
     * await obniz.ble.scan.endWait();
     * ```
     */
    async endWait() {
        if (this.state === 'started' || this.state === 'starting') {
            this.state = 'stopping';
            this.clearTimeoutTimer();
            await this.obnizBle.centralBindings.stopScanningWait();
            this.finish(); // state will changed to stopped inside of this function.
        }
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notifyFromServer(notifyName, params) {
        switch (notifyName) {
            case 'obnizClose': {
                this.finish(new ObnizError_1.ObnizOfflineError());
                break;
            }
            case 'onfind': {
                const peripheral = params;
                const alreadyGotCompleteAdveData = peripheral.adv_data &&
                    peripheral.adv_data.length > 0 &&
                    peripheral.scan_resp &&
                    peripheral.scan_resp.length > 0;
                const nonConnectable = peripheral.ble_event_type === 'non_connectable_advertising';
                const maybeAdvOnly = this._delayNotifyTimers.find((e) => e.peripheral.address === peripheral.address) &&
                    (!peripheral.scan_resp || peripheral.scan_resp.length === 0);
                // wait for adv_data + scan resp
                // 10 seconds timeout
                if (alreadyGotCompleteAdveData ||
                    nonConnectable ||
                    maybeAdvOnly ||
                    this.scanSettings.activeScan === false || // only receive adv
                    this.scanSettings.waitBothAdvertisementAndScanResponse === false) {
                    this._removeDelayNotifyTimer(peripheral.address);
                    this._notifyOnFind(peripheral);
                }
                else {
                    const timer = setTimeout(() => {
                        this._notifyOnFind(peripheral);
                    }, 10 * 1000);
                    this._delayNotifyTimers.push({ timer, peripheral });
                }
                break;
            }
        }
    }
    /**
     * Clear advertisement filter.
     */
    clearAdvertisementFilter() {
        this.obnizBle.Obniz.send({
            ble: {
                hci: {
                    advertisement_filter: [],
                },
            },
        });
    }
    _setAdvertisementFilter(filterVals) {
        // < 3.2.0
        if (semver_1.default.lt(this.obnizBle.Obniz.firmware_ver, '3.2.0')) {
            return;
        }
        // #define BLE_AD_REPORT_DEVICE_ADDRESS_INDEX 2
        // #define BLE_AD_REPORT_ADVERTISMENT_INDEX 9
        const filters = [];
        filterVals.forEach((filterVal) => {
            if (filterVal.localNamePrefix) {
                filters.push({
                    range: {
                        index: 9,
                        length: 255,
                    },
                    value: [0x08, ...util_1.default.string2dataArray(filterVal.localNamePrefix)],
                });
                filters.push({
                    range: {
                        index: 9,
                        length: 255,
                    },
                    value: [0x09, ...util_1.default.string2dataArray(filterVal.localNamePrefix)],
                });
            }
            if (filterVal.deviceAddress) {
                filters.push({
                    range: {
                        index: 2,
                        length: 6,
                    },
                    value: util_1.default.hexToBinary(filterVal.deviceAddress, true),
                });
            }
            if (filterVal.uuid) {
                const binary = util_1.default.hexToBinary(filterVal.uuid, true);
                filters.push({
                    range: {
                        index: 9,
                        length: 255,
                    },
                    value: binary,
                });
            }
            if (filterVal.binary) {
                filters.push({
                    range: {
                        index: 0,
                        length: 255,
                    },
                    value: filterVal.binary,
                });
            }
        });
        this.obnizBle.Obniz.send({
            ble: {
                hci: {
                    advertisement_filter: filters,
                },
            },
        });
    }
    _arrayWrapper(val) {
        if (Array.isArray(val)) {
            return val;
        }
        else {
            return [val];
        }
    }
    _setTargetFilterOnDevice(scanTarget) {
        // < 3.2.0
        if (semver_1.default.lt(this.obnizBle.Obniz.firmware_ver, '3.2.0')) {
            return;
        }
        const adFilters = [];
        if (scanTarget.uuids) {
            scanTarget.uuids.map((elm) => {
                adFilters.push({ uuid: bleHelper_1.default.uuidFilter(elm) });
            });
        }
        if (scanTarget.localName) {
            this._arrayWrapper(scanTarget.localName).forEach((name) => {
                adFilters.push({ localNamePrefix: name });
            });
        }
        if (scanTarget.deviceAddress) {
            this._arrayWrapper(scanTarget.deviceAddress).forEach((address) => {
                adFilters.push({ deviceAddress: address });
            });
        }
        if (scanTarget.localNamePrefix) {
            this._arrayWrapper(scanTarget.localNamePrefix).forEach((name) => {
                adFilters.push({ localNamePrefix: name });
            });
        }
        if (scanTarget.binary) {
            if (Array.isArray(scanTarget.binary)) {
                scanTarget.binary.forEach((e) => {
                    adFilters.push({ binary: e });
                });
            }
            else {
                adFilters.push({ binary: scanTarget.binary });
            }
        }
        this._setAdvertisementFilter(adFilters);
    }
    isTarget(peripheral) {
        const functionBinding = {
            localNamePrefix: this.isLocalNamePrefixTarget.bind(this),
            localName: this.isLocalNameTarget.bind(this),
            uuids: this.isUuidTarget.bind(this),
            deviceAddress: this.isDeviceAddressTarget.bind(this),
            binary: this.isBinaryTarget.bind(this),
        };
        if (!this.scanTarget) {
            // no filter
            return true;
        }
        let noFilter = true;
        // no filter
        for (const key in functionBinding) {
            const oneTarget = this.scanTarget[key];
            if (oneTarget) {
                if (Array.isArray(oneTarget) && oneTarget.length > 0) {
                    noFilter = false;
                }
                else if (!Array.isArray(oneTarget) && oneTarget) {
                    noFilter = false;
                }
            }
        }
        if (noFilter) {
            return true;
        }
        let isTarget = false;
        for (const key in functionBinding) {
            const targetDetectFunc = functionBinding[key];
            isTarget = isTarget || targetDetectFunc(peripheral);
        }
        return isTarget;
    }
    clearTimeoutTimer() {
        if (this._timeoutTimer) {
            clearTimeout(this._timeoutTimer);
            this._timeoutTimer = undefined;
        }
    }
    finish(error) {
        if (this.state !== 'stopped') {
            this.clearTimeoutTimer();
            this._delayNotifyTimers.forEach((e) => this._notifyOnFind(e.peripheral));
            this._clearDelayNotifyTimer();
            this.state = 'stopped';
            this.emitter.emit('onfinish', this.scanedPeripherals, error);
            this.obnizBle.Obniz._runUserCreatedFunction(this.onfinish, this.scanedPeripherals, error);
        }
    }
    _notifyOnFind(peripheral) {
        if (this.scanSettings.duplicate === false) {
            // duplicate filter
            if (this.scanedPeripherals.find((e) => e.address === peripheral.address)) {
                return;
            }
        }
        if (this.isTarget(peripheral)) {
            this.scanedPeripherals.push(peripheral);
            this.emitter.emit('onfind', peripheral);
            this.obnizBle.Obniz._runUserCreatedFunction(this.onfind, peripheral);
        }
    }
    isLocalNameTarget(peripheral) {
        if (!this.scanTarget.localName) {
            return false;
        }
        for (const name of this._arrayWrapper(this.scanTarget.localName)) {
            if (name === peripheral.localName) {
                return true;
            }
        }
        return false;
    }
    isLocalNamePrefixTarget(peripheral) {
        if (!this.scanTarget.localNamePrefix) {
            return false;
        }
        for (const name of this._arrayWrapper(this.scanTarget.localNamePrefix)) {
            if (peripheral.localName && peripheral.localName.startsWith(name)) {
                return true;
            }
        }
        return false;
    }
    isBinaryTarget(peripheral) {
        if (!this.scanTarget.binary) {
            return false;
        }
        return true; // cannot detect on obnizjs
    }
    isUuidTarget(peripheral) {
        if (!this.scanTarget.uuids || this.scanTarget.uuids.length === 0) {
            return false;
        }
        const uuids = peripheral.advertisementServiceUuids().map((e) => {
            return bleHelper_1.default.uuidFilter(e);
        });
        for (const uuid of this._arrayWrapper(this.scanTarget.uuids)) {
            if (uuids.includes(uuid)) {
                return true;
            }
        }
        return false;
    }
    isDeviceAddressTarget(peripheral) {
        if (!this.scanTarget.deviceAddress) {
            return false;
        }
        for (const deviceAddress of this._arrayWrapper(this.scanTarget.deviceAddress)) {
            if (deviceAddress === peripheral.address) {
                return true;
            }
        }
        return false;
    }
    isContainingBleScanSettingProperty(arg) {
        if (arg === null) {
            return false;
        }
        else if ('duration' in arg ||
            'duplicate' in arg ||
            'activeScan' in arg ||
            'filterOnDevice' in arg ||
            'waitBothAdvertisementAndScanResponse' in arg) {
            return true;
        }
        return false;
    }
    _clearDelayNotifyTimer() {
        this._delayNotifyTimers.forEach((e) => {
            clearTimeout(e.timer);
        });
        this._delayNotifyTimers = [];
    }
    _removeDelayNotifyTimer(targetAddress) {
        this._delayNotifyTimers = this._delayNotifyTimers.filter((e) => {
            if (e.peripheral.address === targetAddress) {
                clearTimeout(e.timer);
                return false;
            }
            return true;
        });
    }
}
exports.default = BleScan;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js"));
const bleLocalAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js"));
/**
 * @category Use as Peripheral
 */
class BleService extends bleLocalAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.addCharacteristic = this.addChild;
        this.getCharacteristic = this.getChild;
    }
    /**
     * Add new Characteristic
     *
     * @param child
     */
    addCharacteristic(child) {
        return this.addChild(child);
    }
    /**
     * Get Characteristic
     *
     * @param uuid
     */
    getCharacteristic(uuid) {
        return this.getChild(uuid);
    }
    /**
     * @ignore
     */
    get parentName() {
        return 'peripheral';
    }
    /**
     * @ignore
     */
    get childrenName() {
        return 'characteristics';
    }
    /**
     * @ignore
     */
    get childrenClass() {
        return bleCharacteristic_1.default;
    }
    get characteristics() {
        return this.children;
    }
    /**
     * advertisment object for [[BleAdvertisement.setAdvData]]
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * var service = new obniz.ble.service({ uuid : "1234" });
     * var characteristic = new obniz.ble.characteristic({ uuid : "7777", data: [1, 2, 3]});
     * service.addCharacteristic(characteristic);
     * obniz.ble.peripheral.addService(service);
     *
     * obniz.ble.advertisement.setAdvData(service.advData);
     * obniz.ble.advertisement.setScanRespData({
     *    localName : "obniz BLE",
     * });
     * obniz.ble.advertisement.start();
     * ```
     */
    get advData() {
        return {
            flags: ['general_discoverable_mode', 'br_edr_not_supported'],
            serviceUuids: [this.uuid],
        };
    }
    /**
     * Terminate created service
     *
     * ```javascript
     * // Javascript Example
     * await obniz.ble.initWait();
     * var service = new obniz.ble.service({ uuid : "1234" });
     * var characteristic = new obniz.ble.characteristic({ uuid : "7777", data: [1, 2, 3]});
     * service.addCharacteristic(characteristic);
     * obniz.ble.peripheral.addService(service);
     *
     * service.end();
     * ```
     */
    end() {
        this.peripheral.removeService(this.uuid);
    }
    /**
     * @ignore
     * @param notifyName
     * @param params
     */
    notify(notifyName, params) {
        // nothing
    }
}
exports.default = BleService;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/hci.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
class ObnizBLEHci {
    constructor(Obniz) {
        /*
         * HCI level timeout should never occure. Response must be sent from a device.
         * This timeout is for just in case for a device nerver send response.
         */
        this.timeout = 90 * 1000;
        this._eventHandlerQueue = {};
        this.Obniz = Obniz;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this._eventHandlerQueue = {};
    }
    /**
     * Initialize BLE HCI module
     */
    init() {
        this.Obniz.send({
            ble: {
                hci: {
                    initialize: true,
                },
            },
        });
    }
    /**
     * Deinitalize BLE HCI module
     */
    end() {
        this.Obniz.send({
            ble: {
                hci: null,
            },
        });
    }
    /**
     * write HCI command to HCI module
     *
     * @param hciCommand
     */
    write(hciCommand) {
        this.Obniz.send({
            ble: {
                hci: {
                    write: hciCommand,
                },
            },
        });
    }
    /**
     * @ignore
     * @param obj
     */
    notified(obj) {
        if (obj.read && obj.read.data) {
            if (this.onread === this.hciProtocolOnSocketData) {
                // obnizjs internal function
                this.onread(obj.read.data);
            }
            else {
                // user created function
                this.Obniz._runUserCreatedFunction(this.onread, obj.read.data);
            }
            for (const eventName in this._eventHandlerQueue) {
                if (typeof eventName !== 'string' || !eventName.startsWith('[')) {
                    continue;
                }
                if (this._eventHandlerQueue[eventName].length === 0) {
                    continue;
                }
                const isValid = this.validate(eventName, obj);
                if (isValid) {
                    const func = this._eventHandlerQueue[eventName].shift();
                    if (func) {
                        func(Buffer.from(obj.read.data));
                    }
                }
            }
        }
    }
    /**
     * Callback on HCI command received.
     *
     * @param data
     */
    onread(data) {
        // do nothing.
    }
    /**
     * @ignore
     * @private
     * @param promise
     * @param option
     * @param option.timeout Timeout number in seconds. If not specified. default timeout is applied. If null specified, never timeout.
     * @param option.waitingFor Readable description of command for waiting. Printed when Error or timeout occured.
     */
    timeoutPromiseWrapper(promise, option) {
        option = option || {};
        if (option.timeout === null) {
            option.timeout = null;
        }
        else {
            option.timeout = option.timeout || this.timeout;
            if (option.timeout < 0) {
                throw new ObnizError_1.ObnizParameterError(`option.timeout`, `0 or greater`);
            }
        }
        option.waitingFor = option.waitingFor || undefined;
        let onObnizClosed = null;
        let timeoutHandler = null;
        const clearListeners = () => {
            if (onObnizClosed) {
                this.Obniz.off('close', onObnizClosed);
                onObnizClosed = null;
            }
            if (timeoutHandler) {
                clearTimeout(timeoutHandler);
                timeoutHandler = null;
            }
        };
        const successPromise = promise.then((result) => {
            clearListeners();
            return result;
        }, (reason) => {
            clearListeners();
            throw reason;
        });
        const errorPromise = new Promise((resolve, reject) => {
            if (this.Obniz.connectionState !== 'connected') {
                reject(new ObnizError_1.ObnizOfflineError());
                return;
            }
            const offlineError = new ObnizError_1.ObnizOfflineError();
            onObnizClosed = () => {
                onObnizClosed = null;
                clearListeners();
                reject(offlineError);
            };
            this.Obniz.once('close', onObnizClosed);
            let onTimeout;
            if (option.onTimeout) {
                const timeoutError = new ObnizError_1.ObnizTimeoutError(option.waitingFor);
                onTimeout = () => {
                    timeoutHandler = null;
                    clearListeners();
                    option
                        .onTimeout()
                        .then(() => {
                        reject(timeoutError);
                    })
                        .catch((e) => {
                        reject(e);
                    });
                };
            }
            else {
                const timeoutError = new ObnizError_1.ObnizTimeoutError(option.waitingFor);
                onTimeout = () => {
                    timeoutHandler = null;
                    clearListeners();
                    reject(timeoutError);
                };
            }
            timeoutHandler = setTimeout(onTimeout, option.timeout);
        });
        if (option.timeout !== null) {
            return Promise.race([successPromise, errorPromise]);
        }
        return successPromise;
    }
    readWait(binaryFilter, option) {
        return this.timeoutPromiseWrapper(new Promise((resolve) => {
            this.onceQueue(binaryFilter, resolve);
        }), option);
    }
    onceQueue(binaryFilter, func) {
        const eventName = this.encodeBinaryFilter(binaryFilter);
        this._eventHandlerQueue[eventName] =
            this._eventHandlerQueue[eventName] || [];
        if (typeof func === 'function') {
            this._eventHandlerQueue[eventName].push(func);
        }
    }
    validate(str, json) {
        const binaryFilter = this.decodeBinaryFilter(str);
        if (json.read.data.length < binaryFilter.length) {
            return false;
        }
        for (let i = 0; i < binaryFilter.length; i++) {
            if (binaryFilter[i] < 0) {
                continue;
            }
            if (binaryFilter[i] !== json.read.data[i]) {
                return false;
            }
        }
        return true;
    }
    encodeBinaryFilter(binary) {
        return JSON.stringify(binary);
    }
    decodeBinaryFilter(str) {
        return JSON.parse(str);
    }
}
exports.default = ObnizBLEHci;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 *
 * @ignore
 */
// var debug = require('debug')('acl-att-stream');
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const smp_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/smp.js"));
/**
 *
 * @ignore
 */
class AclStream extends eventemitter3_1.default {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this.debugHandler = () => {
            // do nothing.
        };
        this._hci = hci;
        this._handle = handle;
        this._smp = new smp_1.default(this, localAddressType, localAddress, remoteAddressType, remoteAddress);
        this._smp.debugHandler = (text) => {
            this.debug(text);
        };
        this.onSmpFailBinded = this.onSmpFail.bind(this);
        this.onSmpEndBinded = this.onSmpEnd.bind(this);
        this._smp.on('fail', this.onSmpFailBinded);
        this._smp.on('end', this.onSmpEndBinded);
    }
    async encryptWait(options) {
        await this._smp.pairingWait(options);
    }
    setEncryptOption(options) {
        this._smp.setPairingOption(options);
    }
    write(cid, data) {
        this._hci.writeAclDataPkt(this._handle, cid, data);
    }
    async readWait(cid, flag, timeout) {
        const data = await this._hci.readAclStreamWait(this._handle, cid, flag, timeout);
        return data;
    }
    push(cid, data) {
        if (data) {
            this.emit('data', cid, data);
        }
        else {
            this.emit('end');
        }
    }
    end() {
        this.emit('end');
    }
    async onSmpStkWait(stk) {
        const random = Buffer.from('0000000000000000', 'hex');
        const diversifier = Buffer.from('0000', 'hex');
        const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, stk);
        this.emit('encrypt', result);
        return result;
    }
    async onSmpLtkWait(ltk, random, diversifier) {
        const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, ltk);
        this.emit('encrypt', result);
        return result;
    }
    onSmpFail() {
        this.emit('encryptFail');
    }
    onSmpEnd() {
        this._smp.removeListener('fail', this.onSmpFailBinded);
        this._smp.removeListener('end', this.onSmpEndBinded);
    }
    startEncrypt(option) {
        // do nothing.
    }
    debug(text) {
        this.debugHandler(`AclStream: ${text}`);
    }
}
exports.default = AclStream;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/bindings.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 *
 * @ignore
 */
// var debug = require('debug')('bindings');
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const acl_stream_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.js"));
const gap_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/gap.js"));
const gatt_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/gatt.js"));
const signaling_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/signaling.js"));
/**
 * @ignore
 */
class NobleBindings extends eventemitter3_1.default {
    constructor(hciProtocol) {
        super();
        this._scanServiceUuids = null;
        this.debugHandler = () => {
            // do nothing.
        };
        this._hci = hciProtocol;
        this._gap = new gap_1.default(this._hci);
        this._state = null;
        this._addresses = {};
        this._addresseTypes = {};
        this._connectable = {};
        this._handles = {};
        this._gatts = {};
        this._aclStreams = {};
        this._signalings = {};
        this._connectPromises = [];
        this._hci.on('stateChange', this.onStateChange.bind(this));
        this._hci.on('disconnComplete', this.onDisconnComplete.bind(this));
        this._hci.on('aclDataPkt', this.onAclDataPkt.bind(this));
        this._gap.on('discover', this.onDiscover.bind(this));
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this._state = null;
        this._addresses = {};
        this._addresseTypes = {};
        this._connectable = {};
        this._handles = {};
        this._gatts = {};
        this._aclStreams = {};
        this._signalings = {};
        this._gap._reset();
        // TODO: It must be canceled.
        this._connectPromises = [];
    }
    addPeripheralData(uuid, addressType) {
        if (!this._addresses[uuid]) {
            const address = bleHelper_1.default.reverseHexString(uuid, ':');
            this._addresses[uuid] = address;
            this._addresseTypes[uuid] = addressType;
            this._connectable[uuid] = true;
        }
    }
    async startScanningWait(serviceUuids, allowDuplicates, activeScan) {
        this._scanServiceUuids = (serviceUuids !== null && serviceUuids !== void 0 ? serviceUuids : null);
        await this._gap.startScanningWait(allowDuplicates, activeScan);
    }
    async stopScanningWait() {
        await this._gap.stopScanningWait();
    }
    async connectWait(peripheralUuid, mtu, onConnectCallback) {
        const address = this._addresses[peripheralUuid];
        const addressType = this._addresseTypes[peripheralUuid];
        if (!address) {
            throw new ObnizError_1.ObnizBleUnknownPeripheralError(peripheralUuid);
        }
        // Block parall connection ongoing for ESP32 bug.
        const doPromise = Promise.all(this._connectPromises)
            .catch((error) => {
            // nothing
        })
            .then(async () => {
            const conResult = await this._hci.createLeConnWait(address, addressType, 90 * 1000, (result) => {
                // on connect success
                this.onLeConnComplete(result.status, result.handle, result.role, result.addressType, result.address, result.interval, result.latency, result.supervisionTimeout, result.masterClockAccuracy);
                if (onConnectCallback && typeof onConnectCallback === 'function') {
                    onConnectCallback();
                }
            }); // connection timeout for 90 secs.
            return await this._gatts[conResult.handle].exchangeMtuWait(mtu);
        })
            .then(() => {
            this._connectPromises = this._connectPromises.filter((e) => e === doPromise);
            return Promise.resolve();
        }, (error) => {
            this._connectPromises = this._connectPromises.filter((e) => e === doPromise);
            return Promise.reject(error);
        });
        this._connectPromises.push(doPromise);
        return doPromise;
    }
    disconnect(peripheralUuid) {
        this._hci.disconnect(this._handles[peripheralUuid]);
    }
    async updateRssiWait(peripheralUuid) {
        const rssi = await this._hci.readRssiWait(this._handles[peripheralUuid]);
        return rssi;
    }
    onStateChange(state) {
        if (this._state === state) {
            return;
        }
        this._state = state;
        this.emit('stateChange', state);
    }
    onDiscover(status, address, addressType, connectable, advertisement, rssi) {
        if (this._scanServiceUuids === null) {
            // scan not started ?
            return;
        }
        let serviceUuids = advertisement.serviceUuids || [];
        const serviceData = advertisement.serviceData || [];
        let hasScanServiceUuids = this._scanServiceUuids.length === 0;
        if (!hasScanServiceUuids) {
            serviceUuids = serviceUuids.slice();
            for (const i in serviceData) {
                serviceUuids.push(serviceData[i].uuid);
            }
            for (const i in serviceUuids) {
                hasScanServiceUuids =
                    this._scanServiceUuids.indexOf(serviceUuids[i]) !== -1;
                if (hasScanServiceUuids) {
                    break;
                }
            }
        }
        if (hasScanServiceUuids) {
            const uuid = address.split(':').join('');
            this._addresses[uuid] = address;
            this._addresseTypes[uuid] = addressType;
            this._connectable[uuid] = connectable;
            this.emit('discover', uuid, address, addressType, connectable, advertisement, rssi);
        }
    }
    onLeConnComplete(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {
        if (role !== 0) {
            // not master, ignore
            return;
        }
        if (status !== 0) {
            throw new ObnizError_1.ObnizBleHciStateError(status);
        }
        const uuid = address.split(':').join('').toLowerCase();
        const aclStream = new acl_stream_1.default(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);
        aclStream.debugHandler = (text) => {
            this.debug(text);
        };
        const gatt = new gatt_1.default(address, aclStream);
        const signaling = new signaling_1.default(handle, aclStream);
        this._gatts[uuid] = this._gatts[handle] = gatt;
        this._signalings[uuid] = this._signalings[handle] = signaling;
        this._aclStreams[handle] = aclStream;
        this._handles[uuid] = handle;
        this._handles[handle] = uuid;
        this._gatts[handle].on('notification', this.onNotification.bind(this));
        this._gatts[handle].on('handleNotify', this.onHandleNotify.bind(this));
        this._signalings[handle].on('connectionParameterUpdateRequest', this.onConnectionParameterUpdateWait.bind(this));
        // public onMtu(address: any, mtu?: any) {}
    }
    onDisconnComplete(handle, reason) {
        const uuid = this._handles[handle];
        if (uuid) {
            const error = new ObnizError_1.ObnizBleHciStateError(reason, {
                peripheralAddress: uuid,
            });
            this._gatts[handle].onEnd(error);
            this._gatts[handle].removeAllListeners();
            this._signalings[handle].removeAllListeners();
            delete this._gatts[uuid];
            delete this._gatts[handle];
            delete this._signalings[uuid];
            delete this._signalings[handle];
            delete this._aclStreams[handle];
            delete this._handles[uuid];
            delete this._handles[handle];
            this.emit('disconnect', uuid, error); // TODO: handle reason?
        }
        else {
            // maybe disconnect as peripheral
            // console.warn(
            //   'noble warning: unknown handle ' + handle + ' disconnected!'
            // );
        }
    }
    onAclDataPkt(handle, cid, data) {
        const aclStream = this._aclStreams[handle];
        if (aclStream) {
            aclStream.push(cid, data);
        }
    }
    async discoverServicesWait(peripheralUuid, uuids) {
        const gatt = this.getGatt(peripheralUuid);
        const services = await gatt.discoverServicesWait(uuids || []);
        return services;
    }
    async discoverIncludedServicesWait(peripheralUuid, serviceUuid, serviceUuids) {
        const gatt = this.getGatt(peripheralUuid);
        const services = gatt.discoverIncludedServicesWait(serviceUuid, serviceUuids || []);
        return services;
    }
    async discoverCharacteristicsWait(peripheralUuid, serviceUuid, characteristicUuids) {
        const gatt = this.getGatt(peripheralUuid);
        const chars = await gatt.discoverCharacteristicsWait(serviceUuid, characteristicUuids || []);
        return chars;
    }
    async readWait(peripheralUuid, serviceUuid, characteristicUuid) {
        const gatt = this.getGatt(peripheralUuid);
        const data = await gatt.readWait(serviceUuid, characteristicUuid);
        return data;
    }
    async writeWait(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse) {
        const gatt = this.getGatt(peripheralUuid);
        await gatt.writeWait(serviceUuid, characteristicUuid, data, withoutResponse);
    }
    async broadcastWait(peripheralUuid, serviceUuid, characteristicUuid, broadcast) {
        const gatt = this.getGatt(peripheralUuid);
        await gatt.broadcastWait(serviceUuid, characteristicUuid, broadcast);
    }
    async notifyWait(peripheralUuid, serviceUuid, characteristicUuid, notify) {
        const gatt = this.getGatt(peripheralUuid);
        await gatt.notifyWait(serviceUuid, characteristicUuid, notify);
    }
    onNotification(address, serviceUuid, characteristicUuid, data) {
        const uuid = address.split(':').join('').toLowerCase();
        this.emit('notification', uuid, serviceUuid, characteristicUuid, data, true, true);
    }
    async discoverDescriptorsWait(peripheralUuid, serviceUuid, characteristicUuid) {
        const gatt = this.getGatt(peripheralUuid);
        return await gatt.discoverDescriptorsWait(serviceUuid, characteristicUuid);
    }
    async readValueWait(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {
        const gatt = this.getGatt(peripheralUuid);
        return await gatt.readValueWait(serviceUuid, characteristicUuid, descriptorUuid);
    }
    async writeValueWait(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {
        const gatt = this.getGatt(peripheralUuid);
        await gatt.writeValueWait(serviceUuid, characteristicUuid, descriptorUuid, data);
    }
    async readHandleWait(peripheralUuid, attHandle) {
        const gatt = this.getGatt(peripheralUuid);
        const data = await gatt.readHandleWait(attHandle);
        return data;
    }
    async writeHandleWait(peripheralUuid, attHandle, data, withoutResponse) {
        const gatt = this.getGatt(peripheralUuid);
        await gatt.writeHandleWait(attHandle, data, withoutResponse);
    }
    onHandleNotify(address, handle, data) {
        const uuid = address.split(':').join('').toLowerCase();
        this.emit('handleNotify', uuid, handle, data);
    }
    onConnectionParameterUpdateWait(handle, minInterval, maxInterval, latency, supervisionTimeout) {
        this._hci
            .connUpdateLeWait(handle, minInterval, maxInterval, latency, supervisionTimeout)
            .then(() => {
            // do nothing.
        })
            .catch((e) => {
            // TODO:
            // This must passed to Obniz class.
            // console.error(e);
        });
        // this.onLeConnUpdateComplete(); is nop
    }
    async pairingWait(peripheralUuid, options) {
        options = options || {};
        const gatt = this.getGatt(peripheralUuid);
        const result = await gatt.encryptWait(options);
        return result;
    }
    setPairingOption(peripheralUuid, options) {
        options = options || {};
        const gatt = this.getGatt(peripheralUuid);
        gatt.setEncryptOption(options);
    }
    getGatt(peripheralUuid) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (!gatt) {
            throw new ObnizError_1.ObnizBleUnknownPeripheralError(peripheralUuid);
        }
        return gatt;
    }
    debug(text) {
        this.debugHandler(`${text}`);
    }
}
exports.default = NobleBindings;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/gap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 *
 * @ignore
 */
// let debug = require('debug')('gap');
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @ignore
 */
const debug = () => {
    // do nothing.
};
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @ignore
 */
class Gap extends eventemitter3_1.default {
    constructor(hci) {
        super();
        this._scanState = null;
        this._scanFilterDuplicates = null;
        this._discoveries = {};
        this._hci = hci;
        this._reset();
        this._hci.on('leAdvertisingReport', this.onHciLeAdvertisingReport.bind(this));
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this._scanState = null;
        this._scanFilterDuplicates = null;
        this._discoveries = {};
    }
    async startScanningWait(allowDuplicates, activeScan) {
        this._scanFilterDuplicates = !allowDuplicates;
        this._discoveries = {};
        // Always set scan parameters before scanning
        // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737
        // p106 - p107
        try {
            if (this._scanState === 'starting' || this._scanState === 'started') {
                await this.setScanEnabledWait(false, true);
            }
        }
        catch (e) {
            if (e instanceof ObnizError_1.ObnizBleScanStartError) {
                // If not started yet. this error may called. just ignore it.
            }
            else {
                throw e;
            }
        }
        this._scanState = 'starting';
        const status = await this._hci.setScanParametersWait(activeScan);
        if (status !== 0) {
            throw new ObnizError_1.ObnizBleScanStartError(status, `startScanning Error setting active scan=${activeScan} was failed`);
        }
        await new Promise((resolve) => setTimeout(resolve, 1000));
        await this.setScanEnabledWait(true, this._scanFilterDuplicates);
    }
    async stopScanningWait() {
        try {
            if (this._scanState === 'starting' || this._scanState === 'started') {
                await this.setScanEnabledWait(false, true);
            }
        }
        catch (e) {
            if (e instanceof ObnizError_1.ObnizBleScanStartError) {
                // If not started yet. this error may called. just ignore it.
            }
            else {
                throw e;
            }
        }
    }
    onHciLeAdvertisingReport(status, type, address, addressType, eir, rssi) {
        const previouslyDiscovered = !!this._discoveries[address];
        const advertisement = previouslyDiscovered
            ? this._discoveries[address].advertisement
            : {
                localName: undefined,
                txPowerLevel: undefined,
                manufacturerData: undefined,
                serviceData: [],
                serviceUuids: [],
                solicitationServiceUuids: [],
                advertisementRaw: [],
                scanResponseRaw: [],
                raw: [],
            };
        let discoveryCount = previouslyDiscovered
            ? this._discoveries[address].count
            : 0;
        let hasScanResponse = previouslyDiscovered
            ? this._discoveries[address].hasScanResponse
            : false;
        if (type === 0x04) {
            hasScanResponse = true;
            if (eir.length > 0) {
                advertisement.scanResponseRaw = Array.from(eir);
            }
        }
        else {
            // reset service data every non-scan response event
            advertisement.serviceData = [];
            advertisement.serviceUuids = [];
            advertisement.serviceSolicitationUuids = [];
            if (eir.length > 0) {
                advertisement.advertisementRaw = Array.from(eir);
            }
        }
        discoveryCount++;
        let i = 0;
        let j = 0;
        let serviceUuid = null;
        let serviceSolicitationUuid = null;
        while (i + 1 < eir.length) {
            const length = eir.readUInt8(i);
            if (length < 1) {
                debug('invalid EIR data, length = ' + length);
                break;
            }
            const eirType = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile
            if (i + length + 1 > eir.length) {
                debug('invalid EIR data, out of range of buffer length');
                break;
            }
            const bytes = eir.slice(i + 2).slice(0, length - 1);
            switch (eirType) {
                case 0x02: // Incomplete List of 16-bit Service Class UUID
                case 0x03: // Complete List of 16-bit Service Class UUIDs
                    for (j = 0; j < bytes.length; j += 2) {
                        serviceUuid = bytes.readUInt16LE(j).toString(16);
                        if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {
                            advertisement.serviceUuids.push(serviceUuid);
                        }
                    }
                    break;
                case 0x06: // Incomplete List of 128-bit Service Class UUIDs
                case 0x07: // Complete List of 128-bit Service Class UUIDs
                    for (j = 0; j < bytes.length; j += 16) {
                        serviceUuid = bleHelper_1.default.buffer2reversedHex(bytes.slice(j, j + 16));
                        if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {
                            advertisement.serviceUuids.push(serviceUuid);
                        }
                    }
                    break;
                case 0x08: // Shortened Local Name
                case 0x09: // Complete Local Name
                    advertisement.localName = bytes.toString('utf8');
                    break;
                case 0x0a: {
                    // Tx Power Level
                    advertisement.txPowerLevel = bytes.readInt8(0);
                    break;
                }
                case 0x14: {
                    // List of 16 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 2) {
                        serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                }
                case 0x15: {
                    // List of 128 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 16) {
                        serviceSolicitationUuid = bleHelper_1.default.buffer2reversedHex(bytes.slice(j, j + 16));
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                }
                case 0x16: {
                    // 16-bit Service Data, there can be multiple occurences
                    const serviceDataUuid = bleHelper_1.default.buffer2reversedHex(bytes.slice(0, 2));
                    const serviceData = bytes.slice(2, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceDataUuid,
                        data: serviceData,
                    });
                    break;
                }
                case 0x20: {
                    // 32-bit Service Data, there can be multiple occurences
                    const serviceData32Uuid = bleHelper_1.default.buffer2reversedHex(bytes.slice(0, 4));
                    const serviceData32 = bytes.slice(4, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceData32Uuid,
                        data: serviceData32,
                    });
                    break;
                }
                case 0x21: {
                    // 128-bit Service Data, there can be multiple occurences
                    const serviceData128Uuid = bleHelper_1.default.buffer2reversedHex(bytes.slice(0, 16));
                    const serviceData128 = bytes.slice(16, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceData128Uuid,
                        data: serviceData128,
                    });
                    break;
                }
                case 0x1f: // List of 32 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 4) {
                        serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                case 0xff: // Manufacturer Specific Data
                    advertisement.manufacturerData = bytes;
                    break;
            }
            i += length + 1;
        }
        debug('advertisement = ' + JSON.stringify(advertisement, null, 0));
        const connectable = type === 0x04 && previouslyDiscovered
            ? this._discoveries[address].connectable
            : type !== 0x03;
        this._discoveries[address] = {
            address,
            addressType,
            connectable,
            advertisement,
            rssi,
            count: discoveryCount,
            hasScanResponse,
        };
        this.emit('discover', status, address, addressType, connectable, advertisement, rssi);
    }
    async setScanEnabledWait(enabled, filterDuplicates) {
        const status = await this._hci.setScanEnabledWait(enabled, filterDuplicates);
        // Check the status we got from the command complete function.
        if (status !== 0) {
            // If it is non-zero there was an error, and we should not change
            // our status as a result.
            throw new ObnizError_1.ObnizBleScanStartError(status, `startScanning enable=${enabled} was failed. Maybe Connection to a device is under going.`);
        }
        else {
            if (this._scanState === 'starting') {
                this._scanState = 'started';
            }
            else if (this._scanState === 'stopping') {
                this._scanState = 'stopped';
            }
        }
    }
}
exports.default = Gap;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/gatt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const att_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/att.js");
const gatt_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/gatt.js");
const gatt_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.js"));
// let debug = require('debug')('att');
const debug = () => {
    // do nothing.
};
/* eslint-disable no-unused-vars */
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var GATT;
(function (GATT) {
    GATT.PRIM_SVC_UUID = 0x2800;
    GATT.SECONDARY_SVC_UUID = 0x2801;
    GATT.INCLUDE_UUID = 0x2802;
    GATT.CHARAC_UUID = 0x2803;
    GATT.CLIENT_CHARAC_CFG_UUID = 0x2902;
    GATT.SERVER_CHARAC_CFG_UUID = 0x2903;
})(GATT || (GATT = {}));
/**
 * @ignore
 */
class GattCentral extends eventemitter3_1.default {
    constructor(address, aclStream) {
        super();
        this._services = {};
        this._characteristics = {};
        this._descriptors = {};
        this._remoteMtuRequest = null;
        this._address = address;
        this._aclStream = aclStream;
        this._services = {};
        this._characteristics = {};
        this._descriptors = {};
        this._currentCommand = null;
        this._commandQueue = [];
        this._commandPromises = [];
        this._mtu = 23;
        this._security = 'low';
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on('data', this.onAclStreamDataBinded);
        this._aclStream.on('end', this.onAclStreamEndBinded);
        this._gattCommon = new gatt_1.GattCommon();
        this._gattPeripheral = new gatt_2.default();
        this._gattPeripheral.send = (data) => {
            this._execNoRespCommandWait(data).catch((e) => {
                // nothing to do
                console.error('_execNoRespCommandWait error', e);
            });
        };
    }
    async encryptWait(options) {
        const result = await this._serialPromiseQueueWait(async () => {
            await this._aclStream.encryptWait(options);
            this._security = 'medium';
            return this._aclStream._smp.getKeys();
        });
        return result;
    }
    setEncryptOption(options) {
        this._aclStream.setEncryptOption(options);
    }
    onEnd(reason) {
        this.emit('end', reason);
    }
    async exchangeMtuWait(mtu) {
        this._aclStream
            .readWait(att_1.ATT.CID, att_1.ATT.OP_MTU_REQ)
            .catch((e) => {
            if (e instanceof ObnizError_1.ObnizTimeoutError) {
                return null;
            }
            throw e;
        })
            .then((mtuRequestData) => {
            // console.error('mtu request received');
            if (!mtuRequestData) {
                // throw timeout error and catched above
                return;
            }
            const requestMtu = mtuRequestData.readUInt16LE(1);
            // console.log(
            //   this._address + ': receive OP_MTU_REQ. new MTU is ' + requestMtu
            // );
            this._mtu = requestMtu;
            return this._execNoRespCommandWait(this._gattCommon.mtuResponse(this._mtu));
        })
            .catch((e) => {
            // ignore timeout error
            console.error(e);
        });
        if (mtu === null) {
            debug(this._address + ': no exchange MTU : ' + this._mtu);
        }
        else {
            const data = await this._execCommandWait(this._gattCommon.mtuRequest(mtu), att_1.ATT.OP_MTU_RESP);
            const opcode = data[0];
            const newMtu = data.readUInt16LE(1);
            debug(this._address + ': new MTU is ' + newMtu);
            this._mtu = newMtu;
        }
        return this._mtu;
    }
    async discoverServicesWait(uuids) {
        const pServices = await this.discoverPrimaryServicesWait(uuids);
        const sServices = await this.discoverSecondaryServicesWait(uuids);
        return [...pServices, ...sServices];
    }
    async discoverPrimaryServicesWait(uuids) {
        const services = [];
        let startHandle = 0x0001;
        while (1) {
            const data = await this._execCommandWait(this._gattCommon.readByGroupRequest(startHandle, 0xffff, GATT.PRIM_SVC_UUID), [att_1.ATT.OP_READ_BY_GROUP_RESP, att_1.ATT.OP_ERROR]);
            const opcode = data[0];
            let i = 0;
            if (opcode === att_1.ATT.OP_READ_BY_GROUP_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    services.push({
                        startHandle: data.readUInt16LE(2 + i * type + 0),
                        endHandle: data.readUInt16LE(2 + i * type + 2),
                        uuid: type === 6
                            ? data.readUInt16LE(2 + i * type + 4).toString(16)
                            : bleHelper_1.default.buffer2reversedHex(data.slice(2 + i * type + 4).slice(0, 16)),
                    });
                }
            }
            if (opcode !== att_1.ATT.OP_READ_BY_GROUP_RESP ||
                services[services.length - 1].endHandle === 0xffff) {
                const serviceUuids = [];
                for (i = 0; i < services.length; i++) {
                    if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {
                        serviceUuids.push(services[i].uuid);
                    }
                    this._services[services[i].uuid] = services[i];
                }
                return serviceUuids;
            }
            startHandle = services[services.length - 1].endHandle + 1;
        }
        throw new ObnizError_1.ObnizBleGattHandleError('unreachable code');
    }
    async discoverSecondaryServicesWait(uuids) {
        const services = [];
        let startHandle = 0x0001;
        while (1) {
            const data = await this._execCommandWait(this._gattCommon.readByGroupRequest(startHandle, 0xffff, GATT.SECONDARY_SVC_UUID), [att_1.ATT.OP_READ_BY_GROUP_RESP, att_1.ATT.OP_ERROR]);
            const opcode = data[0];
            let i = 0;
            if (opcode === att_1.ATT.OP_READ_BY_GROUP_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    services.push({
                        startHandle: data.readUInt16LE(2 + i * type + 0),
                        endHandle: data.readUInt16LE(2 + i * type + 2),
                        uuid: type === 6
                            ? data.readUInt16LE(2 + i * type + 4).toString(16)
                            : bleHelper_1.default.buffer2reversedHex(data.slice(2 + i * type + 4).slice(0, 16)),
                    });
                }
            }
            if (opcode !== att_1.ATT.OP_READ_BY_GROUP_RESP ||
                services[services.length - 1].endHandle === 0xffff) {
                const serviceUuids = [];
                for (i = 0; i < services.length; i++) {
                    if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {
                        serviceUuids.push(services[i].uuid);
                    }
                    this._services[services[i].uuid] = services[i];
                }
                return serviceUuids;
            }
            startHandle = services[services.length - 1].endHandle + 1;
        }
        throw new ObnizError_1.ObnizBleGattHandleError('unreachable code');
    }
    async discoverIncludedServicesWait(serviceUuid, uuids) {
        const service = this.getService(serviceUuid);
        const includedServices = [];
        let startHandle = service.startHandle;
        while (1) {
            const data = await this._execCommandWait(this._gattCommon.readByTypeRequest(startHandle, service.endHandle, GATT.INCLUDE_UUID), [att_1.ATT.OP_READ_BY_TYPE_RESP, att_1.ATT.OP_ERROR]);
            const opcode = data[0];
            let i = 0;
            if (opcode === att_1.ATT.OP_READ_BY_TYPE_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    includedServices.push({
                        endHandle: data.readUInt16LE(2 + i * type + 0),
                        startHandle: data.readUInt16LE(2 + i * type + 2),
                        uuid: type === 8
                            ? data.readUInt16LE(2 + i * type + 6).toString(16)
                            : bleHelper_1.default.buffer2reversedHex(data.slice(2 + i * type + 6).slice(0, 16)),
                    });
                }
            }
            if (opcode !== att_1.ATT.OP_READ_BY_TYPE_RESP ||
                includedServices[includedServices.length - 1].endHandle ===
                    service.endHandle) {
                const includedServiceUuids = [];
                for (i = 0; i < includedServices.length; i++) {
                    if (uuids.length === 0 ||
                        uuids.indexOf(includedServices[i].uuid) !== -1) {
                        includedServiceUuids.push(includedServices[i].uuid);
                    }
                }
                return includedServiceUuids;
            }
            startHandle = includedServices[includedServices.length - 1].endHandle + 1;
        }
    }
    async discoverCharacteristicsWait(serviceUuid, characteristicUuids) {
        const service = this.getService(serviceUuid);
        const characteristics = [];
        this._characteristics[serviceUuid] =
            this._characteristics[serviceUuid] || {};
        this._descriptors[serviceUuid] = this._descriptors[serviceUuid] || {};
        let startHandle = service.startHandle;
        while (1) {
            const data = await this._execCommandWait(this._gattCommon.readByTypeRequest(startHandle, service.endHandle, GATT.CHARAC_UUID), [att_1.ATT.OP_READ_BY_TYPE_RESP, att_1.ATT.OP_ERROR]);
            const opcode = data[0];
            let i = 0;
            if (opcode === att_1.ATT.OP_READ_BY_TYPE_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    characteristics.push({
                        startHandle: data.readUInt16LE(2 + i * type + 0),
                        endHandle: 0,
                        properties: data.readUInt8(2 + i * type + 2),
                        valueHandle: data.readUInt16LE(2 + i * type + 3),
                        uuid: type === 7
                            ? data.readUInt16LE(2 + i * type + 5).toString(16)
                            : bleHelper_1.default.buffer2reversedHex(data.slice(2 + i * type + 5).slice(0, 16)),
                    });
                }
            }
            if (opcode !== att_1.ATT.OP_READ_BY_TYPE_RESP ||
                characteristics[characteristics.length - 1].valueHandle ===
                    service.endHandle) {
                const characteristicsDiscovered = [];
                for (i = 0; i < characteristics.length; i++) {
                    const properties = characteristics[i].properties;
                    const characteristic = {
                        properties: [],
                        uuid: characteristics[i].uuid,
                    };
                    if (i !== 0) {
                        characteristics[i - 1].endHandle =
                            characteristics[i].startHandle - 1;
                    }
                    if (i === characteristics.length - 1) {
                        characteristics[i].endHandle = service.endHandle;
                    }
                    this._characteristics[serviceUuid][characteristics[i].uuid] =
                        characteristics[i];
                    if (properties & 0x01) {
                        characteristic.properties.push('broadcast');
                    }
                    if (properties & 0x02) {
                        characteristic.properties.push('read');
                    }
                    if (properties & 0x04) {
                        characteristic.properties.push('writeWithoutResponse');
                    }
                    if (properties & 0x08) {
                        characteristic.properties.push('write');
                    }
                    if (properties & 0x10) {
                        characteristic.properties.push('notify');
                    }
                    if (properties & 0x20) {
                        characteristic.properties.push('indicate');
                    }
                    if (properties & 0x40) {
                        characteristic.properties.push('authenticatedSignedWrites');
                    }
                    if (properties & 0x80) {
                        characteristic.properties.push('extendedProperties');
                    }
                    if (characteristicUuids.length === 0 ||
                        characteristicUuids.indexOf(characteristic.uuid) !== -1) {
                        characteristicsDiscovered.push(characteristic);
                    }
                }
                return characteristicsDiscovered;
            }
            startHandle = characteristics[characteristics.length - 1].valueHandle + 1;
        }
        throw new ObnizError_1.ObnizBleGattHandleError('no reachable code');
    }
    async readWait(serviceUuid, characteristicUuid) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        let readData = Buffer.alloc(0);
        while (1) {
            let data;
            if (readData.length === 0) {
                data = await this._execCommandWait(this._gattCommon.readRequest(characteristic.valueHandle), att_1.ATT.OP_READ_RESP);
            }
            else {
                data = await this._execCommandWait(this._gattCommon.readBlobRequest(characteristic.valueHandle, readData.length), att_1.ATT.OP_READ_BLOB_RESP);
            }
            const opcode = data[0];
            readData = Buffer.from(readData.toString('hex') + data.slice(1).toString('hex'), 'hex');
            if (data.length === this._mtu) {
                // do nothing.
            }
            else {
                return readData;
            }
        }
        // never reach
        // eslint-disable-next-line no-unreachable
        return readData;
    }
    async writeWait(serviceUuid, characteristicUuid, data, withoutResponse) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        if (withoutResponse) {
            await this._execNoRespCommandWait(this._gattCommon.writeRequest(characteristic.valueHandle, data, true));
        }
        else if (data.length + 3 > this._mtu) {
            await this.longWriteWait(serviceUuid, characteristicUuid, data, withoutResponse);
        }
        else {
            await this._execCommandWait(this._gattCommon.writeRequest(characteristic.valueHandle, data, false), att_1.ATT.OP_WRITE_RESP);
        }
    }
    async broadcastWait(serviceUuid, characteristicUuid, broadcast) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        const data = await this._execCommandWait(this._gattCommon.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT.SERVER_CHARAC_CFG_UUID), att_1.ATT.OP_READ_BY_TYPE_RESP);
        const opcode = data[0];
        // let type = data[1];
        const handle = data.readUInt16LE(2);
        let value = data.readUInt16LE(4);
        if (broadcast) {
            value |= 0x0001;
        }
        else {
            value &= 0xfffe;
        }
        const valueBuffer = Buffer.alloc(2);
        valueBuffer.writeUInt16LE(value, 0);
        const _data = await this._execCommandWait(this._gattCommon.writeRequest(handle, valueBuffer, false), att_1.ATT.OP_WRITE_RESP);
    }
    async notifyWait(serviceUuid, characteristicUuid, notify) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        // const descriptor = this.getDescriptor(serviceUuid, characteristicUuid, "2902");
        let value = 0;
        // let handle = null;
        // try {
        //   const buf = await this.readValueWait(
        //     serviceUuid,
        //     characteristicUuid,
        //     '2902'
        //   );
        //   value = buf.readUInt16LE(0);
        // } catch (e) {
        //   // retry
        //   const data = await this._execCommandWait(
        //     this._gattCommon.readByTypeRequest(
        //       characteristic.startHandle,
        //       characteristic.endHandle,
        //       GATT.CLIENT_CHARAC_CFG_UUID
        //     ),
        //     ATT.OP_READ_BY_TYPE_RESP
        //   );
        //
        //   const opcode = data[0];
        //   // let type = data[1];
        //   handle = data.readUInt16LE(2);
        //   value = data.readUInt16LE(4);
        // }
        const useNotify = characteristic.properties & 0x10;
        const useIndicate = characteristic.properties & 0x20;
        if (notify) {
            if (useNotify) {
                value |= 0x0001;
            }
            else if (useIndicate) {
                value |= 0x0002;
            }
        }
        else {
            if (useNotify) {
                value &= 0xfffe;
            }
            else if (useIndicate) {
                value &= 0xfffd;
            }
        }
        const valueBuffer = Buffer.alloc(2);
        valueBuffer.writeUInt16LE(value, 0);
        let _data = null;
        // if (handle) {
        //   _data = await this._execCommandWait(
        //     this._gattCommon.writeRequest(handle, valueBuffer, false),
        //     ATT.OP_WRITE_RESP
        //   );
        // } else {
        _data = await this.writeValueWait(serviceUuid, characteristicUuid, '2902', valueBuffer);
        // }
        const _opcode = _data && _data[0];
        debug('set notify write results: ' + (_opcode === att_1.ATT.OP_WRITE_RESP));
    }
    async discoverDescriptorsWait(serviceUuid, characteristicUuid) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        const descriptors = [];
        this._descriptors[serviceUuid][characteristicUuid] = {};
        let startHandle = characteristic.valueHandle + 1;
        while (1) {
            const data = await this._execCommandWait(this._gattCommon.findInfoRequest(startHandle, characteristic.endHandle), [att_1.ATT.OP_FIND_INFO_RESP, att_1.ATT.OP_ERROR]);
            const opcode = data[0];
            let i = 0;
            if (opcode === att_1.ATT.OP_FIND_INFO_RESP) {
                const num = data[1];
                for (i = 0; i < num; i++) {
                    descriptors.push({
                        handle: data.readUInt16LE(2 + i * 4 + 0),
                        uuid: data.readUInt16LE(2 + i * 4 + 2).toString(16),
                    });
                }
            }
            if (opcode !== att_1.ATT.OP_FIND_INFO_RESP ||
                descriptors[descriptors.length - 1].handle === characteristic.endHandle) {
                const descriptorUuids = [];
                for (i = 0; i < descriptors.length; i++) {
                    descriptorUuids.push(descriptors[i].uuid);
                    this._descriptors[serviceUuid][characteristicUuid][descriptors[i].uuid] = descriptors[i];
                }
                return descriptorUuids;
            }
            startHandle = descriptors[descriptors.length - 1].handle + 1;
        }
        // never reach
        // eslint-disable-next-line no-unreachable
        return [];
    }
    async readValueWait(serviceUuid, characteristicUuid, descriptorUuid) {
        const descriptor = this.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid);
        const data = await this._execCommandWait(this._gattCommon.readRequest(descriptor.handle), att_1.ATT.OP_READ_RESP);
        return data.slice(1);
    }
    async writeValueWait(serviceUuid, characteristicUuid, descriptorUuid, data) {
        const descriptor = this.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid);
        return await this._execCommandWait(this._gattCommon.writeRequest(descriptor.handle, data, false), att_1.ATT.OP_WRITE_RESP);
    }
    async readHandleWait(handle) {
        const data = await this._execCommandWait(this._gattCommon.readRequest(handle), att_1.ATT.OP_READ_RESP);
        return data.slice(1);
    }
    async writeHandleWait(handle, data, withoutResponse) {
        if (withoutResponse) {
            await this._execNoRespCommandWait(this._gattCommon.writeRequest(handle, data, true));
        }
        else {
            await this._execCommandWait(this._gattCommon.writeRequest(handle, data, false), att_1.ATT.OP_WRITE_RESP);
        }
    }
    onAclStreamData(cid, data) {
        if (cid !== att_1.ATT.CID) {
            return;
        }
        const requestType = data[0];
        // notify / indicate
        if (requestType === att_1.ATT.OP_HANDLE_NOTIFY ||
            requestType === att_1.ATT.OP_HANDLE_IND) {
            const valueHandle = data.readUInt16LE(1);
            const valueData = data.slice(3);
            this.emit('handleNotify', this._address, valueHandle, valueData);
            if (data[0] === att_1.ATT.OP_HANDLE_IND) {
                // background
                this._execNoRespCommandWait(this._gattCommon.handleConfirmation()).then(() => {
                    this.emit('handleConfirmation', this._address, valueHandle);
                });
            }
            for (const serviceUuid in this._services) {
                for (const characteristicUuid in this._characteristics[serviceUuid]) {
                    if (this._characteristics[serviceUuid][characteristicUuid]
                        .valueHandle === valueHandle) {
                        this.emit('notification', this._address, serviceUuid, characteristicUuid, valueData);
                    }
                }
            }
        }
        else if (requestType === att_1.ATT.OP_FIND_INFO_REQ ||
            requestType === att_1.ATT.OP_FIND_BY_TYPE_REQ ||
            requestType === att_1.ATT.OP_READ_BY_TYPE_REQ ||
            requestType === att_1.ATT.OP_READ_REQ ||
            requestType === att_1.ATT.OP_READ_BLOB_REQ ||
            requestType === att_1.ATT.OP_READ_BY_GROUP_REQ ||
            requestType === att_1.ATT.OP_WRITE_REQ ||
            requestType === att_1.ATT.OP_WRITE_CMD ||
            requestType === att_1.ATT.OP_PREPARE_WRITE_REQ ||
            requestType === att_1.ATT.OP_EXECUTE_WRITE_REQ ||
            requestType === att_1.ATT.OP_HANDLE_CNF ||
            requestType === att_1.ATT.OP_READ_MULTI_REQ ||
            requestType === att_1.ATT.OP_SIGNED_WRITE_CMD) {
            // console.error('_gattPeripheral.handleRequest', requestType);
            this._gattPeripheral.handleRequest(data);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
    }
    writeAtt(data) {
        const opCode = data[0];
        const handle = data.length > 3 ? data.readUInt16LE(1) : 'none';
        debug(`ATT: opCode=${opCode}(${att_1.ATT_OP_READABLES[opCode]}) handle=${handle} address=` +
            this._address +
            ': write: ' +
            data.toString('hex'));
        this._aclStream.write(att_1.ATT.CID, data);
    }
    /* Perform a "long write" as described Bluetooth Spec section 4.9.4 "Write Long Characteristic Values" */
    async longWriteWait(serviceUuid, characteristicUuid, data, withoutResponse) {
        const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);
        const limit = this._mtu - 5;
        /* split into prepare-write chunks and queue them */
        let offset = 0;
        while (offset < data.length) {
            const end = offset + limit;
            const chunk = data.slice(offset, end);
            const _resp = await this._execCommandWait(this._gattCommon.prepareWriteRequest(characteristic.valueHandle, offset, chunk), att_1.ATT.OP_PREPARE_WRITE_RESP);
            const expected_length = chunk.length + 5;
            if (_resp.length !== expected_length) {
                /* the response should contain the data packet echoed back to the caller */
                throw new Error(`unexpected prepareWriteResponse length ${_resp.length} (expecting ${expected_length})`);
            }
            offset = end;
        }
        if (withoutResponse) {
            await this._execNoRespCommandWait(this._gattCommon.executeWriteRequest(characteristic.valueHandle));
        }
        else {
            await this._execCommandWait(this._gattCommon.executeWriteRequest(characteristic.valueHandle), att_1.ATT.OP_EXECUTE_WRITE_RESP);
        }
        throw new ObnizError_1.ObnizBleOpError();
    }
    getService(serviceUuid) {
        if (!this._services[serviceUuid]) {
            throw new ObnizError_1.ObnizBleUnknownServiceError(this._address, serviceUuid);
        }
        return this._services[serviceUuid];
    }
    getCharacteristic(serviceUuid, characteristicUuid) {
        if (!this._characteristics[serviceUuid] ||
            !this._characteristics[serviceUuid][characteristicUuid]) {
            throw new ObnizError_1.ObnizBleUnknownCharacteristicError(this._address, serviceUuid, characteristicUuid);
        }
        return this._characteristics[serviceUuid][characteristicUuid];
    }
    getDescriptor(serviceUuid, characteristicUuid, descriptorUuid) {
        if (!this._descriptors[serviceUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]) {
            throw new ObnizError_1.ObnizBleUnknownDescriptorError(this._address, serviceUuid, characteristicUuid, descriptorUuid);
        }
        return this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];
    }
    _queueCommand(buffer, callback, writeCallback) {
        this._commandQueue.push({
            buffer,
            callback,
            writeCallback,
        });
        this._runQueueCommand();
    }
    _runQueueCommand() {
        if (this._currentCommand === null) {
            while (this._commandQueue.length) {
                this._currentCommand = this._commandQueue.shift();
                this.writeAtt(this._currentCommand.buffer);
                if (this._currentCommand.callback) {
                    break;
                }
                else if (this._currentCommand.writeCallback) {
                    this._currentCommand.writeCallback();
                    this._currentCommand = null;
                }
            }
        }
    }
    _serialPromiseQueueWait(func) {
        const onfinish = () => {
            this._commandPromises = this._commandPromises.filter((e) => e !== resultPromise);
            if (disconnectReject) {
                this.off('end', disconnectReject);
            }
        };
        let disconnectReject = null;
        const doPromise = Promise.all(this._commandPromises)
            .catch((error) => {
            // nothing
        })
            .then(() => {
            return func();
        })
            .catch((reason) => {
            throw reason;
        })
            .then((result) => {
            onfinish();
            return Promise.resolve(result);
        }, (error) => {
            onfinish();
            return Promise.reject(error);
        });
        const disconnectPromise = new Promise((resolve, reject) => {
            disconnectReject = (reason) => {
                onfinish();
                reject(reason);
            };
            this.on('end', disconnectReject);
        });
        const resultPromise = Promise.race([doPromise, disconnectPromise]);
        this._commandPromises.push(resultPromise);
        return resultPromise;
    }
    _execCommandWait(buffer, waitOpcode) {
        const waitOpcodes = Array.isArray(waitOpcode)
            ? waitOpcode
            : [waitOpcode];
        let errorHandle = true;
        if (!waitOpcodes.includes(att_1.ATT.OP_ERROR)) {
            waitOpcodes.push(att_1.ATT.OP_ERROR);
            errorHandle = false;
        }
        return this._serialPromiseQueueWait(async () => {
            while (1) {
                this.writeAtt(buffer);
                const promises = [];
                for (const code of waitOpcodes) {
                    promises.push(this._aclStream.readWait(att_1.ATT.CID, code));
                }
                debug(`ATT: wait for opcode=${waitOpcodes}`);
                const data = await Promise.race(promises);
                const opCode = data.readUInt8(0);
                debug(`ATT: received opCode=${opCode}(${att_1.ATT_OP_READABLES[opCode]})`);
                if (opCode === att_1.ATT.OP_ERROR) {
                    const errCode = data[4];
                    if ((errCode === att_1.ATT.ECODE_AUTHENTICATION ||
                        errCode === att_1.ATT.ECODE_AUTHORIZATION ||
                        errCode === att_1.ATT.ECODE_INSUFF_ENC) &&
                        this._security !== 'medium') {
                        // retry after encrypt
                        debug(`ATT: going to encrypt and try it later.`);
                        await this._aclStream.encryptWait();
                        continue;
                    }
                    if (errorHandle) {
                        return data;
                    }
                    const requestOpCode = data.readUInt8(1);
                    const attributeHandle = data.readUInt16LE(2);
                    throw new ObnizError_1.ObnizBleAttError(errCode, `errorCode=${errCode}(${att_1.ATT_ECODE_READABLES[errCode]}) for request_opcode=${requestOpCode}(${att_1.ATT_OP_READABLES[requestOpCode]}) atributeHandle=${attributeHandle} `);
                }
                return data;
            }
            // unreachable here
            // eslint-disable-next-line no-unreachable
            return Buffer.from([]);
        });
    }
    _execNoRespCommandWait(buffer) {
        return this._serialPromiseQueueWait(async () => {
            this.writeAtt(buffer);
        });
    }
}
exports.default = GattCentral;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/signaling.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * @ignore
 */
// let debug = require('debug')('signaling');
const debug = () => {
    // do nothing.
};
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
/**
 * @ignore
 */
const CONNECTION_PARAMETER_UPDATE_REQUEST = 0x12;
/**
 * @ignore
 */
const CONNECTION_PARAMETER_UPDATE_RESPONSE = 0x13;
/**
 * @ignore
 */
const SIGNALING_CID = 0x0005;
/**
 * @ignore
 */
class Signaling extends eventemitter3_1.default {
    constructor(handle, aclStream) {
        super();
        this._handle = handle;
        this._aclStream = aclStream;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on('data', this.onAclStreamDataBinded);
        this._aclStream.on('end', this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== SIGNALING_CID) {
            return;
        }
        debug('onAclStreamData: ' + data.toString('hex'));
        const code = data.readUInt8(0);
        const identifier = data.readUInt8(1);
        const length = data.readUInt16LE(2);
        const signalingData = data.slice(4);
        debug('\tcode = ' + code);
        debug('\tidentifier = ' + identifier);
        debug('\tlength = ' + length);
        if (code === CONNECTION_PARAMETER_UPDATE_REQUEST) {
            this.processConnectionParameterUpdateRequest(identifier, signalingData);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
    }
    processConnectionParameterUpdateRequest(identifier, data) {
        const minInterval = data.readUInt16LE(0) * 1.25;
        const maxInterval = data.readUInt16LE(2) * 1.25;
        const latency = data.readUInt16LE(4);
        const supervisionTimeout = data.readUInt16LE(6) * 10;
        debug('\t\tmin interval = ', minInterval);
        debug('\t\tmax interval = ', maxInterval);
        debug('\t\tlatency = ', latency);
        debug('\t\tsupervision timeout = ', supervisionTimeout);
        const response = Buffer.alloc(6);
        response.writeUInt8(CONNECTION_PARAMETER_UPDATE_RESPONSE, 0); // code
        response.writeUInt8(identifier, 1); // identifier
        response.writeUInt16LE(2, 2); // length
        response.writeUInt16LE(0, 4);
        this._aclStream.write(SIGNALING_CID, response);
        this.emit('connectionParameterUpdateRequest', this._handle, minInterval, maxInterval, latency, supervisionTimeout);
    }
}
exports.default = Signaling;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/smp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 *
 * @ignore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const crypto_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/crypto.js"));
const smp_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/smp.js");
/**
 * @ignore
 */
class Smp extends eventemitter3_1.default {
    constructor(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._preq = null; // pairing Request buffer
        this._pres = null; // pairing Response buffer
        this._pairingFeature = null; // conbine (pairing Request & pairing Response)
        this._tk = null;
        this._r = null;
        this._rand = null;
        this._ediv = null;
        this._pcnf = null;
        this._stk = null;
        this._ltk = null;
        this._options = undefined;
        this._smpCommon = new smp_1.SmpCommon();
        this.debugHandler = (...param) => {
            // do nothing.
        };
        this._aclStream = aclStream;
        this._iat = Buffer.from([localAddressType === 'random' ? 0x01 : 0x00]);
        this._ia = bleHelper_1.default.hex2reversedBuffer(localAddress, ':');
        this._rat = Buffer.from([remoteAddressType === 'random' ? 0x01 : 0x00]);
        this._ra = bleHelper_1.default.hex2reversedBuffer(remoteAddress, ':');
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on('data', this.onAclStreamDataBinded);
        this._aclStream.on('end', this.onAclStreamEndBinded);
    }
    async pairingWithKeyWait(key) {
        this.debug(`Pairing using keys ${key}`);
        this.setKeys(key);
        if (!this._ltk || !this._rand || !this._ediv) {
            throw new Error('invalid keys');
        }
        // console.log(this._smpCommon.parsePairingReqRsp(this._pres!));
        const encResult = await this._aclStream.onSmpLtkWait(this._ltk, this._rand, this._ediv);
        return encResult;
    }
    setPairingOption(options) {
        this._options = options;
    }
    async pairingWait(options) {
        this._options = Object.assign(Object.assign({}, this._options), options);
        if (this._options && this._options.keys) {
            const result = await this.pairingWithKeyWait(this._options.keys);
            if (this._options && this._options.onPairedCallback) {
                this._options.onPairedCallback(this.getKeys());
            }
            return result;
        }
        // phase 1 : Pairing Feature Exchange
        this.debug(`Going to Pairing`);
        await this.sendPairingRequestWait();
        this.debug(`Waiting Pairing Response`);
        const pairingResponse = await this._readWait(smp_1.SMP.PAIRING_RESPONSE);
        this.debug(`Receive  Pairing Response ${pairingResponse.toString('hex')}`);
        this._pres = pairingResponse;
        const parsedPairingRequest = this._smpCommon.parsePairingReqRsp(this._preq);
        const parsedPairingResponse = this._smpCommon.parsePairingReqRsp(this._pres);
        this._pairingFeature = this._smpCommon.combinePairingParam(parsedPairingRequest, parsedPairingResponse);
        if (this.isSecureConnectionMode()) {
            if (!this._pairingFeature.sc) {
                throw new ObnizError_1.ObnizBleUnSupportedPeripheralError('secure connection');
            }
            // phase2 : (after receive PAIRING_RESPONSE)
            await this.handlePairingResponseSecureConnectionWait();
            await new Promise((resolve) => setTimeout(resolve, 1000));
        }
        else {
            // phase2 : (after receive PAIRING_RESPONSE)
            await this.handlePairingResponseLegacyPairingWait();
            this.debug(`Waiting Pairing Confirm`);
            const confirm = await this._readWait(smp_1.SMP.PAIRING_CONFIRM, 60 * 1000); // 60sec timeout
            this.handlePairingConfirm(confirm);
            // phase3 : Transport Specific Key Distribution
            this.debug(`Waiting Pairing Random`);
            const random = await this._readWait(smp_1.SMP.PAIRING_RANDOM);
            const encResultPromise = this.handlePairingRandomWait(random);
            this.debug(`Got Pairing Encryption Result`);
            const encInfoPromise = this._readWait(smp_1.SMP.ENCRYPT_INFO);
            const masterIdentPromise = this._readWait(smp_1.SMP.MASTER_IDENT);
            await Promise.all([encResultPromise, encInfoPromise, masterIdentPromise]);
            const encResult = await encResultPromise;
            const encInfo = await encInfoPromise;
            const masterIdent = await masterIdentPromise;
            this.handleEncryptInfo(encInfo);
            this.handleMasterIdent(masterIdent);
            if (encResult === 0) {
                throw new Error('Encrypt failed');
            }
        }
        if (this._options && this._options.onPairedCallback) {
            this._options.onPairedCallback(this.getKeys());
        }
    }
    onAclStreamData(cid, data) {
        if (cid !== smp_1.SMP.CID) {
            return;
        }
        const code = data.readUInt8(0);
        if (smp_1.SMP.PAIRING_FAILED === code) {
            this.handlePairingFailed(data);
        }
        else if (smp_1.SMP.SMP_SECURITY_REQUEST === code) {
            this.handleSecurityRequest(data);
        }
        // console.warn("SMP: " + code);
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
        this.emit('end');
    }
    async handlePairingResponseLegacyPairingWait() {
        if (this.isPasskeyMode()) {
            let passkeyNumber = 0;
            passkeyNumber = await this._options.passkeyCallback();
            this.debug(`PassKey=${passkeyNumber}`);
            const passkey = new Array(16);
            for (let i = 0; i < 3; i++) {
                passkey[i] = (passkeyNumber >> (i * 8)) & 0xff;
            }
            this._tk = Buffer.from(passkey);
        }
        else {
            this._tk = Buffer.from('00000000000000000000000000000000', 'hex');
        }
        this._r = crypto_1.default.r();
        this.write(Buffer.concat([
            Buffer.from([smp_1.SMP.PAIRING_CONFIRM]),
            crypto_1.default.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]));
    }
    async handlePairingResponseSecureConnectionWait() {
        var _a, _b, _c;
        const ecdh = crypto_1.default.createECDHKey();
        const usePasskey = ((_a = this._pairingFeature) === null || _a === void 0 ? void 0 : _a.association) === 'PasskeyEntryRspInputs' ||
            ((_b = this._pairingFeature) === null || _b === void 0 ? void 0 : _b.association) === 'PasskeyEntryBothInputs' ||
            ((_c = this._pairingFeature) === null || _c === void 0 ? void 0 : _c.association) === 'PasskeyEntryInitInputs';
        const remoteKeyPromise = this._readWait(smp_1.SMP.PAIRING_PUBLIC_KEY);
        const remoteConfirmForJustWorksPromise = usePasskey
            ? null
            : this._readWait(smp_1.SMP.PAIRING_CONFIRM);
        this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_PUBLIC_KEY]), ecdh.x, ecdh.y]));
        const remoteKey = await remoteKeyPromise;
        const peerPublicKey = {
            x: remoteKey.slice(1, 33),
            y: remoteKey.slice(33, 65),
        };
        this.debug('got remote public key');
        let passkeyNumber = 0;
        if (usePasskey) {
            passkeyNumber = await this._options.passkeyCallback();
            this.debug(`PassKey=${passkeyNumber}`);
            if (passkeyNumber < 0 || passkeyNumber > 999999) {
                throw new ObnizError_1.ObnizBleInvalidPasskeyError(passkeyNumber);
            }
        }
        const rspConfirmBuffers = [];
        const rspRandomBuffers = [];
        const initRandomValue = crypto_1.default.randomBytes(16);
        if (!usePasskey) {
            this.debug(`pairing confirm only once`);
            const buf = await remoteConfirmForJustWorksPromise;
            rspConfirmBuffers.push(buf.slice(1));
            const remoteRamdomPromise = this._readWait(smp_1.SMP.PAIRING_RANDOM);
            this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_RANDOM]), initRandomValue]));
            const buf2 = await remoteRamdomPromise;
            rspRandomBuffers.push(buf2.slice(1));
        }
        else {
            for (let passkeyBitCounter = 0; passkeyBitCounter < 20; passkeyBitCounter++) {
                this.debug(`pairing confirm loop:${passkeyBitCounter}`);
                const remoteConfirmPromise = this._readWait(smp_1.SMP.PAIRING_CONFIRM);
                const initConfirmValue = crypto_1.default.f4(ecdh.x, peerPublicKey.x, initRandomValue, ((passkeyNumber >> passkeyBitCounter) & 1) | 0x80);
                this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_CONFIRM]), initConfirmValue]));
                const buf = await remoteConfirmPromise;
                rspConfirmBuffers.push(buf.slice(1));
                const remoteRamdomPromise = this._readWait(smp_1.SMP.PAIRING_RANDOM);
                this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_RANDOM]), initRandomValue]));
                const buf2 = await remoteRamdomPromise;
                rspRandomBuffers.push(buf2.slice(1));
            }
        }
        const res = crypto_1.default.generateLtkEaEb(ecdh.ecdh, peerPublicKey, this._ia, this._iat, this._ra, this._rat, initRandomValue, rspRandomBuffers[rspRandomBuffers.length - 1], (passkeyNumber !== null && passkeyNumber !== void 0 ? passkeyNumber : 0), 0x10, // max key size
        this._preq ? this._preq.slice(1, 4) : Buffer.alloc(3), this._pres ? this._pres.slice(1, 4) : Buffer.alloc(3));
        const remoteDhkeyPromise = this._readWait(smp_1.SMP.PAIRING_DHKEY_CHECK);
        this.debug(`send PAIRING_DHKEY_CHECK`);
        this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_DHKEY_CHECK]), res.Ea]));
        const buf3 = await remoteDhkeyPromise;
        this.debug(`receive PAIRING_DHKEY_CHECK`);
        const Eb = buf3.slice(1);
        const irkPromise = this._readWait(smp_1.SMP.IDENTITY_INFORMATION);
        const bdAddrPromise = this._readWait(smp_1.SMP.IDENTITY_ADDRESS_INFORMATION);
        this.debug(`receive IDENTITY_INFORMATION IDENTITY_ADDRESS_INFORMATION`);
        this._ltk = res.ltk;
        this.emit('ltk', this._ltk);
        await this._aclStream.onSmpStkWait(this._ltk);
        const irkBuf = await irkPromise;
        const bdAddrBuf = await bdAddrPromise;
        // we dont have irk, so zero padding
        this.write(Buffer.concat([Buffer.from([smp_1.SMP.IDENTITY_INFORMATION]), Buffer.alloc(16)]));
        this.write(Buffer.concat([
            Buffer.from([smp_1.SMP.IDENTITY_ADDRESS_INFORMATION]),
            this._iat,
            this._ia,
        ]));
        this._rand = Buffer.alloc(8);
        this._ediv = Buffer.alloc(2);
        return res.ltk;
    }
    handlePairingConfirm(data) {
        var _a;
        this._pcnf = data;
        this.write(Buffer.concat([
            Buffer.from([smp_1.SMP.PAIRING_RANDOM]),
            (_a = this._r, (_a !== null && _a !== void 0 ? _a : Buffer.alloc(0))),
        ]));
    }
    async handlePairingRandomWait(data) {
        const r = data.slice(1);
        let encResult = null;
        const pcnf = Buffer.concat([
            Buffer.from([smp_1.SMP.PAIRING_CONFIRM]),
            crypto_1.default.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]);
        if (this._pcnf && this._pcnf.toString('hex') === pcnf.toString('hex')) {
            if (this._stk !== null) {
                console.error('second stk');
            }
            this._stk = crypto_1.default.s1(this._tk, r, this._r);
            // this.emit("stk", this._stk);
            encResult = await this._aclStream.onSmpStkWait(this._stk);
        }
        else {
            this.write(Buffer.from([smp_1.SMP.PAIRING_RANDOM, smp_1.SMP.PAIRING_CONFIRM]));
            this.emit('fail', 0);
            throw new Error('Encryption pcnf error');
        }
        return encResult;
    }
    handlePairingFailed(data) {
        this.emit('fail', data.readUInt8(1));
    }
    handleEncryptInfo(data) {
        this._ltk = data.slice(1);
        this.emit('ltk', this._ltk);
    }
    handleMasterIdent(data) {
        const ediv = data.slice(1, 3);
        const rand = data.slice(3);
        this._ediv = ediv;
        this._rand = rand;
        this.emit('masterIdent', ediv, rand);
    }
    write(data) {
        this._aclStream.write(smp_1.SMP.CID, data);
    }
    handleSecurityRequest(data) {
        this.pairingWait()
            .then(() => {
            // do nothing.
        })
            .catch((e) => {
            if (this._options && this._options.onPairingFailed) {
                this._options.onPairingFailed(e);
            }
            else {
                throw e;
            }
        });
    }
    setKeys(keyStringBase64) {
        const keyString = Buffer.from(keyStringBase64, 'base64').toString('ascii');
        this.debug(`restored keys ${keyString}`);
        const keys = JSON.parse(keyString);
        this._stk = keys.stk ? Buffer.from(keys.stk, 'hex') : null;
        this._preq = keys.preq ? Buffer.from(keys.preq, 'hex') : null;
        this._pres = keys.pres ? Buffer.from(keys.pres, 'hex') : null;
        this._tk = keys.tk ? Buffer.from(keys.tk, 'hex') : null;
        this._r = keys.r ? Buffer.from(keys.r, 'hex') : null;
        this._pcnf = keys.pcnf ? Buffer.from(keys.pcnf, 'hex') : null;
        this._ltk = keys.ltk ? Buffer.from(keys.ltk, 'hex') : null;
        this._ediv = keys.ediv ? Buffer.from(keys.ediv, 'hex') : null;
        this._rand = keys.rand ? Buffer.from(keys.rand, 'hex') : null;
    }
    getKeys() {
        const keys = {
            stk: this._stk ? this._stk.toString('hex') : null,
            preq: this._preq ? this._preq.toString('hex') : null,
            pres: this._pres ? this._pres.toString('hex') : null,
            tk: this._tk ? this._tk.toString('hex') : null,
            r: this._r ? this._r.toString('hex') : null,
            pcnf: this._pcnf ? this._pcnf.toString('hex') : null,
            ltk: this._ltk ? this._ltk.toString('hex') : null,
            ediv: this._ediv ? this._ediv.toString('hex') : null,
            rand: this._rand ? this._rand.toString('hex') : null,
        };
        const jsonString = JSON.stringify(keys);
        const keyString = Buffer.from(jsonString, 'ascii').toString('base64');
        return keyString;
    }
    _generateAuthenticationRequirementsFlags(params) {
        let result = 0x00;
        if (params.bonding === 'Bonding') {
            result |= 0x01;
        }
        if (params.mitm) {
            result |= 0x04;
        }
        if (params.secureConnection) {
            result |= 0x08;
        }
        if (params.keypress) {
            result |= 0x10;
        }
        if (params.ct2) {
            result |= 0x20;
        }
        return result;
    }
    async sendPairingRequestWait() {
        if (this.isPasskeyMode()) {
            this.debug(`pair capable passkey`);
            this._preq = Buffer.from([
                smp_1.SMP.PAIRING_REQUEST,
                0x02,
                0x00,
                this._generateAuthenticationRequirementsFlags({
                    bonding: 'Bonding',
                    mitm: true,
                    ct2: false,
                    keypress: false,
                    secureConnection: this.isSecureConnectionMode(),
                }),
                0x10,
                this.isSecureConnectionMode() ? 0x02 : 0x00,
                this.isSecureConnectionMode() ? 0x02 : 0x01,
            ]);
        }
        else {
            this.debug(`pair No Input and No Output`);
            this._preq = Buffer.from([
                smp_1.SMP.PAIRING_REQUEST,
                0x03,
                0x00,
                this._generateAuthenticationRequirementsFlags({
                    bonding: 'Bonding',
                    mitm: false,
                    ct2: false,
                    keypress: false,
                    secureConnection: this.isSecureConnectionMode(),
                }),
                0x10,
                this.isSecureConnectionMode() ? 0x02 : 0x00,
                this.isSecureConnectionMode() ? 0x02 : 0x01,
            ]);
        }
        this.write(this._preq);
    }
    isPasskeyMode() {
        if (this._options && this._options.passkeyCallback) {
            return true;
        }
        return false;
    }
    isSecureConnectionMode() {
        if (this._options && this._options.secureConnection) {
            return true;
        }
        return false;
    }
    _readWait(flag, timeout) {
        return Promise.race([
            this._aclStream.readWait(smp_1.SMP.CID, flag, timeout),
            this._pairingFailReject(),
        ]);
    }
    _pairingFailReject() {
        return new Promise((resolve, reject) => {
            this.on('fail', (reason) => {
                reject(new ObnizError_1.ObnizBlePairingRejectByRemoteError(reason));
            });
        });
    }
    debug(text) {
        // console.log(new Date(), `SMP: ${text}`);
    }
}
exports.default = Smp;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/common/att.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var ATT;
(function (ATT) {
    ATT.OP_ERROR = 0x01;
    ATT.OP_MTU_REQ = 0x02;
    ATT.OP_MTU_RESP = 0x03;
    ATT.OP_FIND_INFO_REQ = 0x04;
    ATT.OP_FIND_INFO_RESP = 0x05;
    ATT.OP_FIND_BY_TYPE_REQ = 0x06;
    ATT.OP_FIND_BY_TYPE_RESP = 0x07;
    ATT.OP_READ_BY_TYPE_REQ = 0x08;
    ATT.OP_READ_BY_TYPE_RESP = 0x09;
    ATT.OP_READ_REQ = 0x0a;
    ATT.OP_READ_RESP = 0x0b;
    ATT.OP_READ_BLOB_REQ = 0x0c;
    ATT.OP_READ_BLOB_RESP = 0x0d;
    ATT.OP_READ_MULTI_REQ = 0x0e;
    ATT.OP_READ_MULTI_RESP = 0x0f;
    ATT.OP_READ_BY_GROUP_REQ = 0x10;
    ATT.OP_READ_BY_GROUP_RESP = 0x11;
    ATT.OP_WRITE_REQ = 0x12;
    ATT.OP_WRITE_RESP = 0x13;
    ATT.OP_PREPARE_WRITE_REQ = 0x16;
    ATT.OP_PREPARE_WRITE_RESP = 0x17;
    ATT.OP_EXECUTE_WRITE_REQ = 0x18;
    ATT.OP_EXECUTE_WRITE_RESP = 0x19;
    ATT.OP_HANDLE_NOTIFY = 0x1b;
    ATT.OP_HANDLE_IND = 0x1d;
    ATT.OP_HANDLE_CNF = 0x1e;
    ATT.OP_WRITE_CMD = 0x52;
    ATT.OP_SIGNED_WRITE_CMD = 0xd2;
    ATT.ECODE_SUCCESS = 0x00;
    ATT.ECODE_INVALID_HANDLE = 0x01;
    ATT.ECODE_READ_NOT_PERM = 0x02;
    ATT.ECODE_WRITE_NOT_PERM = 0x03;
    ATT.ECODE_INVALID_PDU = 0x04;
    ATT.ECODE_AUTHENTICATION = 0x05;
    ATT.ECODE_REQ_NOT_SUPP = 0x06;
    ATT.ECODE_INVALID_OFFSET = 0x07;
    ATT.ECODE_AUTHORIZATION = 0x08;
    ATT.ECODE_PREP_QUEUE_FULL = 0x09;
    ATT.ECODE_ATTR_NOT_FOUND = 0x0a;
    ATT.ECODE_ATTR_NOT_LONG = 0x0b;
    ATT.ECODE_INSUFF_ENCR_KEY_SIZE = 0x0c;
    ATT.ECODE_INVAL_ATTR_VALUE_LEN = 0x0d;
    ATT.ECODE_UNLIKELY = 0x0e;
    ATT.ECODE_INSUFF_ENC = 0x0f;
    ATT.ECODE_UNSUPP_GRP_TYPE = 0x10;
    ATT.ECODE_INSUFF_RESOURCES = 0x11;
    ATT.CID = 0x0004;
})(ATT = exports.ATT || (exports.ATT = {}));
exports.ATT_OP_READABLES = {
    0x01: 'OP_ERROR',
    0x02: 'OP_MTU_REQ',
    0x03: 'OP_MTU_RESP',
    0x04: 'OP_FIND_INFO_REQ',
    0x05: 'OP_FIND_INFO_RESP',
    0x08: 'OP_READ_BY_TYPE_REQ',
    0x09: 'OP_READ_BY_TYPE_RESP',
    0x0a: 'OP_READ_REQ',
    0x0b: 'OP_READ_RESP',
    0x0c: 'OP_READ_BLOB_REQ',
    0x0d: 'OP_READ_BLOB_RESP',
    0x10: 'OP_READ_BY_GROUP_REQ',
    0x11: 'OP_READ_BY_GROUP_RESP',
    0x12: 'OP_WRITE_REQ',
    0x13: 'OP_WRITE_RESP',
    0x16: 'OP_PREPARE_WRITE_REQ',
    0x17: 'OP_PREPARE_WRITE_RESP',
    0x18: 'OP_EXECUTE_WRITE_REQ',
    0x19: 'OP_EXECUTE_WRITE_RESP',
    0x1b: 'OP_HANDLE_NOTIFY',
    0x1d: 'OP_HANDLE_IND',
    0x1e: 'OP_HANDLE_CNF',
    0x52: 'OP_WRITE_CMD',
};
exports.ATT_ECODE_READABLES = {
    0x00: 'ECODE_SUCCESS',
    0x01: 'ECODE_INVALID_HANDLE',
    0x02: 'ECODE_READ_NOT_PERM',
    0x03: 'ECODE_WRITE_NOT_PERM',
    0x04: 'ECODE_INVALID_PDU',
    0x05: 'ECODE_AUTHENTICATION',
    0x06: 'ECODE_REQ_NOT_SUPP',
    0x07: 'ECODE_INVALID_OFFSET',
    0x08: 'ECODE_AUTHORIZATION',
    0x09: 'ECODE_PREP_QUEUE_FULL',
    0x0a: 'ECODE_ATTR_NOT_FOUND',
    0x0b: 'ECODE_ATTR_NOT_LONG',
    0x0c: 'ECODE_INSUFF_ENCR_KEY_SIZE',
    0x0d: 'ECODE_INVAL_ATTR_VALUE_LEN',
    0x0e: 'ECODE_UNLIKELY',
    0x0f: 'ECODE_INSUFF_ENC',
    0x10: 'ECODE_UNSUPP_GRP_TYPE',
    0x11: 'ECODE_INSUFF_RESOURCES',
};


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/common/crypto.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * @ignore
 */
const crypto_1 = __importDefault(__webpack_require__("./node_modules/crypto-browserify/index.js"));
/**
 * @ignore
 */
const r = () => {
    return crypto_1.default.randomBytes(16);
};
/**
 * @ignore
 */
const c1 = (k, _r, pres, preq, iat, ia, rat, ra) => {
    const p1 = Buffer.concat([iat, rat, preq, pres]);
    const p2 = Buffer.concat([ra, ia, Buffer.from('00000000', 'hex')]);
    let res = xor(_r, p1);
    res = e(k, res);
    res = xor(res, p2);
    res = e(k, res);
    return res;
};
const s1 = (k, r1, r2) => {
    return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));
};
const e = (key, data) => {
    key = swap(key);
    data = swap(data);
    const cipher = crypto_1.default.createCipheriv('aes-128-ecb', key, '');
    cipher.setAutoPadding(false);
    return swap(Buffer.concat([cipher.update(data), cipher.final()]));
};
const xor = (b1, b2) => {
    const result = Buffer.alloc(b1.length);
    for (let i = 0; i < b1.length; i++) {
        result[i] = b1[i] ^ b2[i];
    }
    return result;
};
const swap = (input) => {
    const output = Buffer.alloc(input.length);
    for (let i = 0; i < output.length; i++) {
        output[i] = input[input.length - i - 1];
    }
    return output;
};
const emptyBuffer = Buffer.alloc(0);
const AESCMAC = (key, message) => {
    const zero = Buffer.alloc(16);
    const aes = crypto_1.default.createCipheriv('AES-128-ECB', key, emptyBuffer);
    const L = aes.update(zero);
    if (leftShift128(L)) {
        L[15] ^= 0x87;
    }
    let flag = true;
    if (message.length === 0 || message.length % 16 !== 0) {
        if (leftShift128(L)) {
            L[15] ^= 0x87;
        }
        flag = false;
    }
    let X = zero;
    const n = (message.length + 15) >>> 4;
    let processed = 0;
    for (let i = 0; i < n - 1; i++) {
        X = aes.update(xor(X, message.slice(processed, processed + 16)));
        processed += 16;
    }
    const last = Buffer.alloc(16);
    message.copy(last, 0, processed);
    if (!flag) {
        last[message.length % 16] = 0x80;
    }
    return aes.update(xor(xor(X, L), last));
};
const leftShift128 = (v) => {
    let carry = 0;
    for (let i = 15; i >= 0; --i) {
        const nextCarry = v[i] >> 7;
        v[i] = (v[i] << 1) | carry;
        carry = nextCarry;
    }
    return carry;
};
const f4 = (U, V, X, Z) => {
    return AESCMAC(Buffer.from(X).reverse(), Buffer.concat([Buffer.from([Z]), V, U]).reverse()).reverse();
};
const f5 = (W, N1, N2, A1, A2) => {
    const SALT = Buffer.from('6C888391AAF5A53860370BDB5A6083BE', 'hex');
    const T = AESCMAC(SALT, Buffer.from(W).reverse());
    const v = Buffer.concat([
        Buffer.from('btle', 'utf8'),
        Buffer.from(N1).reverse(),
        Buffer.from(N2).reverse(),
        Buffer.from(A1).reverse(),
        Buffer.from(A2).reverse(),
        Buffer.from([1, 0]),
    ]);
    const macKey = AESCMAC(T, Buffer.concat([Buffer.from([0]), v])).reverse();
    const ltk = AESCMAC(T, Buffer.concat([Buffer.from([1]), v])).reverse();
    return [macKey, ltk];
};
const f6 = (W, N1, N2, R, IOcap, A1, A2) => {
    return AESCMAC(Buffer.from(W).reverse(), Buffer.concat([A2, A1, IOcap, R, N2, N1]).reverse()).reverse();
};
const g2 = (U, V, X, Y) => {
    return AESCMAC(Buffer.from(X).reverse(), Buffer.concat([Y, V, U]).reverse()).readUInt32BE(12);
};
const createECDHKey = () => {
    const ecdh = crypto_1.default.createECDH('prime256v1');
    ecdh.generateKeys();
    return {
        x: ecdh.getPublicKey().slice(1, 33).reverse(),
        y: ecdh.getPublicKey().slice(33, 65).reverse(),
        ecdh,
    };
};
const generateLtkEaEb = (ecdh, peerPublicKey, ia, iat, ra, rat, initRandomValue, rspRandomValue, userPasskey, maxKeySize, IOCapA, IOCapB) => {
    const userPasskeyBuffer = Buffer.alloc(16);
    userPasskeyBuffer.writeUInt32LE(userPasskey, 0);
    let sharedSecret = null;
    const buf = Buffer.alloc(65);
    buf[0] = 0x04;
    for (let i = 0; i < 32; i++) {
        buf[1 + i] = peerPublicKey.x[31 - i];
        buf[33 + i] = peerPublicKey.y[31 - i];
    }
    sharedSecret = ecdh.computeSecret(buf).reverse();
    const A = Buffer.concat([ia, iat]);
    const B = Buffer.concat([ra, rat]);
    const keys = f5(sharedSecret, initRandomValue, rspRandomValue, A, B);
    const macKey = keys[0];
    const ltk = keys[1].slice(0, maxKeySize);
    const Ea = f6(macKey, initRandomValue, rspRandomValue, userPasskeyBuffer, IOCapA, A, B);
    const Eb = f6(macKey, rspRandomValue, initRandomValue, userPasskeyBuffer, IOCapB, B, A);
    return { ltk, Ea, Eb };
};
exports.default = {
    r,
    c1,
    s1,
    e,
    f4,
    f5,
    f6,
    createECDHKey,
    randomBytes: crypto_1.default.randomBytes,
    generateLtkEaEb,
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/common/gatt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @ignore
 */
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/no-namespace
var ATT;
(function (ATT) {
    ATT.OP_ERROR = 0x01;
    ATT.OP_MTU_REQ = 0x02;
    ATT.OP_MTU_RESP = 0x03;
    ATT.OP_FIND_INFO_REQ = 0x04;
    ATT.OP_FIND_INFO_RESP = 0x05;
    ATT.OP_READ_BY_TYPE_REQ = 0x08;
    ATT.OP_READ_BY_TYPE_RESP = 0x09;
    ATT.OP_READ_REQ = 0x0a;
    ATT.OP_READ_RESP = 0x0b;
    ATT.OP_READ_BLOB_REQ = 0x0c;
    ATT.OP_READ_BLOB_RESP = 0x0d;
    ATT.OP_READ_BY_GROUP_REQ = 0x10;
    ATT.OP_READ_BY_GROUP_RESP = 0x11;
    ATT.OP_WRITE_REQ = 0x12;
    ATT.OP_WRITE_RESP = 0x13;
    ATT.OP_PREPARE_WRITE_REQ = 0x16;
    ATT.OP_PREPARE_WRITE_RESP = 0x17;
    ATT.OP_EXECUTE_WRITE_REQ = 0x18;
    ATT.OP_EXECUTE_WRITE_RESP = 0x19;
    ATT.OP_HANDLE_NOTIFY = 0x1b;
    ATT.OP_HANDLE_IND = 0x1d;
    ATT.OP_HANDLE_CNF = 0x1e;
    ATT.OP_WRITE_CMD = 0x52;
    ATT.ECODE_SUCCESS = 0x00;
    ATT.ECODE_INVALID_HANDLE = 0x01;
    ATT.ECODE_READ_NOT_PERM = 0x02;
    ATT.ECODE_WRITE_NOT_PERM = 0x03;
    ATT.ECODE_INVALID_PDU = 0x04;
    ATT.ECODE_AUTHENTICATION = 0x05;
    ATT.ECODE_REQ_NOT_SUPP = 0x06;
    ATT.ECODE_INVALID_OFFSET = 0x07;
    ATT.ECODE_AUTHORIZATION = 0x08;
    ATT.ECODE_PREP_QUEUE_FULL = 0x09;
    ATT.ECODE_ATTR_NOT_FOUND = 0x0a;
    ATT.ECODE_ATTR_NOT_LONG = 0x0b;
    ATT.ECODE_INSUFF_ENCR_KEY_SIZE = 0x0c;
    ATT.ECODE_INVAL_ATTR_VALUE_LEN = 0x0d;
    ATT.ECODE_UNLIKELY = 0x0e;
    ATT.ECODE_INSUFF_ENC = 0x0f;
    ATT.ECODE_UNSUPP_GRP_TYPE = 0x10;
    ATT.ECODE_INSUFF_RESOURCES = 0x11;
    ATT.CID = 0x0004;
})(ATT || (ATT = {}));
const ATT_OP_READABLES = {
    0x01: 'OP_ERROR',
    0x02: 'OP_MTU_REQ',
    0x03: 'OP_MTU_RESP',
    0x04: 'OP_FIND_INFO_REQ',
    0x05: 'OP_FIND_INFO_RESP',
    0x08: 'OP_READ_BY_TYPE_REQ',
    0x09: 'OP_READ_BY_TYPE_RESP',
    0x0a: 'OP_READ_REQ',
    0x0b: 'OP_READ_RESP',
    0x0c: 'OP_READ_BLOB_REQ',
    0x0d: 'OP_READ_BLOB_RESP',
    0x10: 'OP_READ_BY_GROUP_REQ',
    0x11: 'OP_READ_BY_GROUP_RESP',
    0x12: 'OP_WRITE_REQ',
    0x13: 'OP_WRITE_RESP',
    0x16: 'OP_PREPARE_WRITE_REQ',
    0x17: 'OP_PREPARE_WRITE_RESP',
    0x18: 'OP_EXECUTE_WRITE_REQ',
    0x19: 'OP_EXECUTE_WRITE_RESP',
    0x1b: 'OP_HANDLE_NOTIFY',
    0x1d: 'OP_HANDLE_IND',
    0x1e: 'OP_HANDLE_CNF',
    0x52: 'OP_WRITE_CMD',
};
const ATT_ECODE_READABLES = {
    0x00: 'ECODE_SUCCESS',
    0x01: 'ECODE_INVALID_HANDLE',
    0x02: 'ECODE_READ_NOT_PERM',
    0x03: 'ECODE_WRITE_NOT_PERM',
    0x04: 'ECODE_INVALID_PDU',
    0x05: 'ECODE_AUTHENTICATION',
    0x06: 'ECODE_REQ_NOT_SUPP',
    0x07: 'ECODE_INVALID_OFFSET',
    0x08: 'ECODE_AUTHORIZATION',
    0x09: 'ECODE_PREP_QUEUE_FULL',
    0x0a: 'ECODE_ATTR_NOT_FOUND',
    0x0b: 'ECODE_ATTR_NOT_LONG',
    0x0c: 'ECODE_INSUFF_ENCR_KEY_SIZE',
    0x0d: 'ECODE_INVAL_ATTR_VALUE_LEN',
    0x0e: 'ECODE_UNLIKELY',
    0x0f: 'ECODE_INSUFF_ENC',
    0x10: 'ECODE_UNSUPP_GRP_TYPE',
    0x11: 'ECODE_INSUFF_RESOURCES',
};
class GattCommon {
    write() {
        // nothing
    }
    errorResponse(opcode, handle, status) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT.OP_ERROR, 0);
        buf.writeUInt8(opcode, 1);
        buf.writeUInt16LE(handle, 2);
        buf.writeUInt8(status, 4);
        return buf;
    }
    mtuRequest(mtu) {
        const buf = Buffer.alloc(3);
        buf.writeUInt8(ATT.OP_MTU_REQ, 0);
        buf.writeUInt16LE(mtu, 1);
        return buf;
    }
    mtuResponse(mtu) {
        const buf = Buffer.alloc(3);
        buf.writeUInt8(ATT.OP_MTU_RESP, 0);
        buf.writeUInt16LE(mtu, 1);
        return buf;
    }
    readByGroupRequest(startHandle, endHandle, groupUuid) {
        const buf = Buffer.alloc(7);
        buf.writeUInt8(ATT.OP_READ_BY_GROUP_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        buf.writeUInt16LE(groupUuid, 5);
        return buf;
    }
    readByTypeRequest(startHandle, endHandle, groupUuid) {
        const buf = Buffer.alloc(7);
        buf.writeUInt8(ATT.OP_READ_BY_TYPE_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        buf.writeUInt16LE(groupUuid, 5);
        return buf;
    }
    readRequest(handle) {
        const buf = Buffer.alloc(3);
        buf.writeUInt8(ATT.OP_READ_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        return buf;
    }
    readBlobRequest(handle, offset) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT.OP_READ_BLOB_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        buf.writeUInt16LE(offset, 3);
        return buf;
    }
    findInfoRequest(startHandle, endHandle) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT.OP_FIND_INFO_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        return buf;
    }
    writeRequest(handle, data, withoutResponse) {
        const buf = Buffer.alloc(3 + data.length);
        buf.writeUInt8(withoutResponse ? ATT.OP_WRITE_CMD : ATT.OP_WRITE_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        for (let i = 0; i < data.length; i++) {
            buf.writeUInt8(data.readUInt8(i), i + 3);
        }
        return buf;
    }
    prepareWriteRequest(handle, offset, data) {
        const buf = Buffer.alloc(5 + data.length);
        buf.writeUInt8(ATT.OP_PREPARE_WRITE_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        buf.writeUInt16LE(offset, 3);
        for (let i = 0; i < data.length; i++) {
            buf.writeUInt8(data.readUInt8(i), i + 5);
        }
        return buf;
    }
    executeWriteRequest(handle, cancelPreparedWrites) {
        const buf = Buffer.alloc(2);
        buf.writeUInt8(ATT.OP_EXECUTE_WRITE_REQ, 0);
        buf.writeUInt8(cancelPreparedWrites ? 0 : 1, 1);
        return buf;
    }
    handleConfirmation() {
        const buf = Buffer.alloc(1);
        buf.writeUInt8(ATT.OP_HANDLE_CNF, 0);
        return buf;
    }
}
exports.GattCommon = GattCommon;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/common/smp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var SMP;
(function (SMP) {
    SMP.CID = 0x0006;
    SMP.PAIRING_REQUEST = 0x01;
    SMP.PAIRING_RESPONSE = 0x02;
    SMP.PAIRING_CONFIRM = 0x03;
    SMP.PAIRING_RANDOM = 0x04;
    SMP.PAIRING_FAILED = 0x05;
    SMP.ENCRYPT_INFO = 0x06;
    SMP.MASTER_IDENT = 0x07;
    SMP.IDENTITY_INFORMATION = 0x08;
    SMP.IDENTITY_ADDRESS_INFORMATION = 0x09;
    SMP.SIGNING_INFORMATION = 0x0a;
    SMP.PAIRING_PUBLIC_KEY = 0x0c;
    SMP.PAIRING_DHKEY_CHECK = 0x0d;
    SMP.SMP_SECURITY_REQUEST = 0x0b;
    SMP.UNSPECIFIED = 0x08;
})(SMP = exports.SMP || (exports.SMP = {}));
exports.SmpAssociationModelValue = {
    JustWorks: 0,
    PasskeyEntryInitInputs: 1,
    PasskeyEntryRspInputs: 2,
    PasskeyEntryBothInputs: 3,
    NumericComparison: 4,
};
class SmpCommon {
    parsePairingReqRsp(data) {
        return {
            ioCap: this.value2ioCapability(data[1]),
            bondingFlags: (data[3] & 3) === 0 ? 'NoBonding' : 'Bonding',
            mitm: (data[3] & 4) !== 0,
            sc: (data[3] & 8) !== 0,
            keypress: (data[3] & 16) !== 0,
            maxKeySize: data[4],
            initKeyDistr: {
                encKey: (data[5] & 1) !== 0,
                idKey: (data[5] & 2) !== 0,
            },
            rspKeyDistr: {
                encKey: (data[6] & 1) !== 0,
                idKey: (data[6] & 2) !== 0,
            },
        };
    }
    combinePairingParam(a, b) {
        const combined = {
            bondingFlags: (a.bondingFlags === 'Bonding' &&
                b.bondingFlags === 'Bonding'
                ? 'Bonding'
                : 'NoBonding'),
            mitm: a.mitm && b.mitm,
            sc: a.sc && b.sc,
            maxKeySize: Math.min(a.maxKeySize, b.maxKeySize),
            initKeyDistr: {
                encKey: a.initKeyDistr.encKey && b.initKeyDistr.encKey,
                idKey: a.initKeyDistr.idKey && b.initKeyDistr.idKey,
            },
            rspKeyDistr: {
                encKey: a.rspKeyDistr.encKey && b.rspKeyDistr.encKey,
                idKey: a.rspKeyDistr.idKey && b.rspKeyDistr.idKey,
            },
        };
        return Object.assign(Object.assign({}, combined), { association: this._calcAssosiationModel(a, b, combined) });
    }
    _calcAssosiationModel(req, rsp, combined) {
        if (!combined.mitm) {
            return 'JustWorks';
        }
        const reqDisplay = !combined.sc && req.ioCap === 'displayYesNo' ? 'displayOnly' : req.ioCap;
        const rspDisplay = !combined.sc && rsp.ioCap === 'displayYesNo' ? 'displayOnly' : rsp.ioCap;
        if (reqDisplay === 'noInputNoOutput' || rspDisplay === 'noInputNoOutput') {
            return 'JustWorks';
        }
        else if (reqDisplay === 'keyboardOnly' && rspDisplay === 'keyboardOnly') {
            return 'PasskeyEntryBothInputs';
        }
        else if (reqDisplay === 'keyboardOnly') {
            return 'PasskeyEntryInitInputs';
        }
        else if (rspDisplay === 'keyboardOnly') {
            return 'PasskeyEntryRspInputs';
        }
        else if (reqDisplay === 'keyboardDisplay' &&
            rspDisplay === 'keyboardDisplay') {
            return combined.sc ? 'NumericComparison' : 'PasskeyEntryRspInputs';
        }
        else if (reqDisplay === 'displayOnly' &&
            rspDisplay === 'keyboardDisplay') {
            return 'PasskeyEntryRspInputs';
        }
        else if (rspDisplay === 'displayOnly' &&
            reqDisplay === 'keyboardDisplay') {
            return 'PasskeyEntryInitInputs';
        }
        else if (reqDisplay === 'displayOnly' || rspDisplay === 'displayOnly') {
            return 'JustWorks';
        }
        return 'NumericComparison';
    }
    ioCapability2value(capability) {
        switch (capability) {
            case 'displayOnly':
                return 0x00;
            case 'displayYesNo':
                return 0x01;
            case 'keyboardDisplay':
                return 0x04;
            case 'keyboardOnly':
                return 0x02;
        }
        return 0x03;
    }
    value2ioCapability(value) {
        const map = {
            0x00: 'displayOnly',
            0x01: 'displayYesNo',
            0x02: 'keyboardOnly',
            0x03: 'noInputNoOutput',
            0x04: 'keyboardDisplay',
        };
        if (map[value]) {
            return map[value];
        }
        throw new Error('unknown value');
    }
}
exports.SmpCommon = SmpCommon;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/hci-status.json":
/***/ (function(module) {

module.exports = JSON.parse("[\"Success\",\"Unknown HCI Command\",\"Unknown Connection Identifier\",\"Hardware Failure\",\"Page Timeout\",\"Authentication Failure\",\"PIN or Key Missing\",\"Memory Capacity Exceeded\",\"Connection Timeout\",\"Connection Limit Exceeded\",\"Synchronous Connection Limit to a Device Exceeded\",\"ACL Connection Already Exists\",\"Command Disallowed\",\"Connection Rejected due to Limited Resources\",\"Connection Rejected due to Security Reasons\",\"Connection Rejected due to Unacceptable BD_ADDR\",\"Connection Accept Timeout Exceeded\",\"Unsupported Feature or Parameter Value\",\"Invalid HCI Command Parameters\",\"Remote User Terminated Connection\",\"Remote Device Terminated due to Low Resources\",\"Remote Device Terminated due to Power Off\",\"Connection Terminated By Local Host\",\"Repeated Attempts\",\"Pairing Not Allowed\",\"Unknown LMP PDU\",\"Unsupported Remote Feature / Unsupported LMP Feature\",\"SCO Offset Rejected\",\"SCO Interval Rejected\",\"SCO Air Mode Rejected\",\"Invalid LMP Parameters / Invalid LL Parameters\",\"Unspecified Error\",\"Unsupported LMP Parameter Value / Unsupported LL Parameter Value\",\"Role Change Not Allowed\",\"LMP Response Timeout / LL Response Timeout\",\"LMP Error Transaction Collision\",\"LMP PDU Not Allowed\",\"Encryption Mode Not Acceptable\",\"Link Key cannot be Changed\",\"Requested QoS Not Supported\",\"Instant Passed\",\"Pairing With Unit Key Not Supported\",\"Different Transaction Collision\",\"Reserved\",\"QoS Unacceptable Parameter\",\"QoS Rejected\",\"Channel Classification Not Supported\",\"Insufficient Security\",\"Parameter Out Of Manadatory Range\",\"Reserved\",\"Role Switch Pending\",\"Reserved\",\"Reserved Slot Violation\",\"Role Switch Failed\",\"Extended Inquiry Response Too Large\",\"Secure Simple Pairing Not Supported By Host\",\"Host Busy - Pairing\",\"Connection Rejected due to No Suitable Channel Found\",\"Controller Busy\",\"Unacceptable Connection Parameters\",\"Directed Advertising Timeout\",\"Connection Terminated due to MIC Failure\",\"Connection Failed to be Established\",\"MAC Connection Failed\",\"Coarse Clock Adjustment Rejected but Will Try to Adjust Using Clock Dragging\"]");

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
// eslint-disable-next-line @typescript-eslint/no-namespace
var COMMANDS;
(function (COMMANDS) {
    COMMANDS.HCI_COMMAND_PKT = 0x01;
    COMMANDS.HCI_ACLDATA_PKT = 0x02;
    COMMANDS.HCI_EVENT_PKT = 0x04;
    COMMANDS.ACL_START_NO_FLUSH = 0x00;
    COMMANDS.ACL_CONT = 0x01;
    COMMANDS.ACL_START = 0x02;
    COMMANDS.EVT_DISCONN_COMPLETE = 0x05;
    COMMANDS.EVT_ENCRYPT_CHANGE = 0x08;
    COMMANDS.EVT_CMD_COMPLETE = 0x0e;
    COMMANDS.EVT_CMD_STATUS = 0x0f;
    COMMANDS.EVT_NUMBER_OF_COMPLETED_PACKETS = 0x13;
    COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE = 0x30;
    COMMANDS.EVT_LE_META_EVENT = 0x3e;
    COMMANDS.EVT_LE_CONN_COMPLETE = 0x01;
    COMMANDS.EVT_LE_ADVERTISING_REPORT = 0x02;
    COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE = 0x03;
    COMMANDS.EVT_LE_ENHANCED_CONNECTION_COMPLETE = 0x0a;
    COMMANDS.OGF_LINK_CTL = 0x01;
    COMMANDS.OCF_DISCONNECT = 0x0006;
    COMMANDS.OGF_LINK_POLICY = 0x02;
    COMMANDS.OGF_WRITE_DEFAULT_LINK_POLICY_SETTINGS = 0x0f;
    COMMANDS.OGF_HOST_CTL = 0x03;
    COMMANDS.OCF_SET_EVENT_MASK = 0x0001;
    COMMANDS.OCF_RESET = 0x0003;
    COMMANDS.OCF_READ_LOCAL_NAME = 0x0014;
    COMMANDS.OCF_WRITE_PAGE_TIMEOUT = 0x0018;
    COMMANDS.OCF_WRITE_CLASS_OF_DEVICE = 0x0024;
    COMMANDS.OCF_WRITE_INQUIRY_SCAN_TYPE = 0x0043;
    COMMANDS.OCF_WRITE_INQUIRY_MODE = 0x0045;
    COMMANDS.OCF_WRITE_PAGE_SCAN_TYPE = 0x0047;
    COMMANDS.OCF_WRITE_SIMPLE_PAIRING_MODE = 0x0056;
    COMMANDS.OCF_SET_EVENT_MASK_PAGE_2 = 0x0063;
    COMMANDS.OCF_READ_LE_HOST_SUPPORTED = 0x006c;
    COMMANDS.OCF_WRITE_LE_HOST_SUPPORTED = 0x006d;
    COMMANDS.OGF_INFO_PARAM = 0x04;
    COMMANDS.OCF_READ_LOCAL_VERSION = 0x0001;
    COMMANDS.OCF_READ_LOCAL_SUPPORTED_COMMANDS = 0x0002;
    COMMANDS.OCF_READ_LOCAL_SUPPORTED_FEATURES = 0x0003;
    COMMANDS.OCF_READ_LOCAL_EXTENDED_FEATURES = 0x0004;
    COMMANDS.OCF_READ_BUFFER_SIZE = 0x0005;
    COMMANDS.OCF_READ_BD_ADDR = 0x0009;
    COMMANDS.OGF_STATUS_PARAM = 0x05;
    COMMANDS.OCF_READ_RSSI = 0x0005;
    COMMANDS.OGF_LE_CTL = 0x08;
    COMMANDS.OCF_LE_SET_EVENT_MASK = 0x0001;
    COMMANDS.OCF_LE_READ_BUFFER_SIZE = 0x0002;
    COMMANDS.OCF_LE_READ_LOCAL_SUPPORTED_FEATURES = 0x0003;
    COMMANDS.OCF_LE_SET_RANDOM_ADDRESS = 0x0005;
    COMMANDS.OCF_LE_SET_ADVERTISING_PARAMETERS = 0x0006;
    COMMANDS.OCF_LE_READ_ADVERTISING_CHANNEL_TX_POWER = 0x0007;
    COMMANDS.OCF_LE_SET_ADVERTISING_DATA = 0x0008;
    COMMANDS.OCF_LE_SET_SCAN_RESPONSE_DATA = 0x0009;
    COMMANDS.OCF_LE_SET_ADVERTISE_ENABLE = 0x000a;
    COMMANDS.OCF_LE_SET_SCAN_PARAMETERS = 0x000b;
    COMMANDS.OCF_LE_SET_SCAN_ENABLE = 0x000c;
    COMMANDS.OCF_LE_CREATE_CONN = 0x000d;
    COMMANDS.OCF_LE_CREATE_CONN_CANCEL = 0x000e;
    COMMANDS.OCF_LE_READ_WHITE_LIST_SIZE = 0x000f;
    COMMANDS.OCF_LE_CLEAR_WHITE_LIST = 0x0010;
    COMMANDS.OCF_LE_CONN_UPDATE = 0x0013;
    COMMANDS.OCF_LE_ENCRYPT = 0x0017;
    COMMANDS.OCF_LE_RAND = 0x0018;
    COMMANDS.OCF_LE_START_ENCRYPTION = 0x0019;
    COMMANDS.OCF_LE_LTK_NEG_REPLY = 0x001b;
    COMMANDS.OCF_LE_READ_SUPPORTED_STATES = 0x001c;
    COMMANDS.OCF_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH = 0x0023;
    COMMANDS.OCF_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH = 0x0024;
    COMMANDS.OCF_LE_CLEAR_RESOLVING_LIST = 0x0029;
    COMMANDS.OCF_LE_READ_RESOLVING_LIST_SIZE = 0x002a;
    COMMANDS.OCF_LE_SET_RESOLVABLE_PRIVATE_ADDRESS_TIMEOUT = 0x002e;
    COMMANDS.OCF_LE_READ_MAXIMUM_DATA_LENGTH = 0x002f;
    COMMANDS.OCF_SET_DEFAULT_PHY = 0x0031;
    /* OGF_LINK_CTL : 0x01 */
    COMMANDS.DISCONNECT_CMD = COMMANDS.OCF_DISCONNECT | (COMMANDS.OGF_LINK_CTL << 10);
    /* OGF_LINK_POLICY: 0x02 */
    COMMANDS.WRITE_DEFAULT_LINK_POLICY_SETTINGS_CMD = COMMANDS.OGF_WRITE_DEFAULT_LINK_POLICY_SETTINGS | (COMMANDS.OGF_LINK_POLICY << 10);
    /* OGF_HOST_CTL : 0x03 */
    COMMANDS.SET_EVENT_MASK_CMD = COMMANDS.OCF_SET_EVENT_MASK | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.RESET_CMD = COMMANDS.OCF_RESET | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.READ_LOCAL_NAME_CMD = COMMANDS.OCF_READ_LOCAL_NAME | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_PAGE_TIMEOUT_CMD = COMMANDS.OCF_WRITE_PAGE_TIMEOUT | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_CLASS_OF_DEVICE_CMD = COMMANDS.OCF_WRITE_CLASS_OF_DEVICE | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_INQUIRY_SCAN_TYPE_CMD = COMMANDS.OCF_WRITE_INQUIRY_SCAN_TYPE | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_INQUIRY_MODE_CMD = COMMANDS.OCF_WRITE_INQUIRY_MODE | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_PAGE_SCAN_TYPE_CMD = COMMANDS.OCF_WRITE_PAGE_SCAN_TYPE | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_SIMPLE_PAIRING_MODE_CMD = COMMANDS.OCF_WRITE_SIMPLE_PAIRING_MODE | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.SET_EVENT_MASK_PAGE_2_CMD = COMMANDS.OCF_SET_EVENT_MASK_PAGE_2 | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.READ_LE_HOST_SUPPORTED_CMD = COMMANDS.OCF_READ_LE_HOST_SUPPORTED | (COMMANDS.OGF_HOST_CTL << 10);
    COMMANDS.WRITE_LE_HOST_SUPPORTED_CMD = COMMANDS.OCF_WRITE_LE_HOST_SUPPORTED | (COMMANDS.OGF_HOST_CTL << 10);
    /* OGF_INFO_PARAM : 0x04 */
    COMMANDS.READ_LOCAL_VERSION_CMD = COMMANDS.OCF_READ_LOCAL_VERSION | (COMMANDS.OGF_INFO_PARAM << 10);
    COMMANDS.READ_LOCAL_SUPPORTED_COMMANDS_CMD = COMMANDS.OCF_READ_LOCAL_SUPPORTED_COMMANDS | (COMMANDS.OGF_INFO_PARAM << 10);
    COMMANDS.READ_LOCAL_SUPPORTED_FEATURES_CMD = COMMANDS.OCF_READ_LOCAL_SUPPORTED_FEATURES | (COMMANDS.OGF_INFO_PARAM << 10);
    COMMANDS.READ_LOCAL_EXTENDED_FEATURES_CMD = COMMANDS.OCF_READ_LOCAL_EXTENDED_FEATURES | (COMMANDS.OGF_INFO_PARAM << 10);
    COMMANDS.READ_BUFFER_SIZE_CMD = COMMANDS.OCF_READ_BUFFER_SIZE | (COMMANDS.OGF_INFO_PARAM << 10);
    COMMANDS.READ_BD_ADDR_CMD = COMMANDS.OCF_READ_BD_ADDR | (COMMANDS.OGF_INFO_PARAM << 10);
    /* OGF_STATUS_PARAM: 0x05 */
    COMMANDS.READ_RSSI_CMD = COMMANDS.OCF_READ_RSSI | (COMMANDS.OGF_STATUS_PARAM << 10);
    /* OGF_LE_CTL: 0x08 */
    COMMANDS.LE_SET_EVENT_MASK_CMD = COMMANDS.OCF_LE_SET_EVENT_MASK | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_BUFFER_SIZE_CMD = COMMANDS.OCF_LE_READ_BUFFER_SIZE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_LOCAL_SUPPORTED_FEATURES_CMD = COMMANDS.OCF_LE_READ_LOCAL_SUPPORTED_FEATURES | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_RANDOM_ADDRESS_CMD = COMMANDS.OCF_LE_SET_RANDOM_ADDRESS | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_ADVERTISING_CHANNEL_TX_POWER_CMD = COMMANDS.OCF_LE_READ_ADVERTISING_CHANNEL_TX_POWER | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_SCAN_PARAMETERS_CMD = COMMANDS.OCF_LE_SET_SCAN_PARAMETERS | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_SCAN_ENABLE_CMD = COMMANDS.OCF_LE_SET_SCAN_ENABLE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_CREATE_CONN_CMD = COMMANDS.OCF_LE_CREATE_CONN | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_CREATE_CONN_CANCEL_CMD = COMMANDS.OCF_LE_CREATE_CONN_CANCEL | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_CONN_UPDATE_CMD = COMMANDS.OCF_LE_CONN_UPDATE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_START_ENCRYPTION_CMD = COMMANDS.OCF_LE_START_ENCRYPTION | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD = COMMANDS.OCF_LE_SET_ADVERTISING_PARAMETERS | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_ENCRYPT_CMD = COMMANDS.OCF_LE_ENCRYPT | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_RAND_CMD = COMMANDS.OCF_LE_RAND | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_ADVERTISING_DATA_CMD = COMMANDS.OCF_LE_SET_ADVERTISING_DATA | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD = COMMANDS.OCF_LE_SET_SCAN_RESPONSE_DATA | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD = COMMANDS.OCF_LE_SET_ADVERTISE_ENABLE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_LTK_NEG_REPLY_CMD = COMMANDS.OCF_LE_LTK_NEG_REPLY | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_WHITE_LIST_SIZE_CMD = COMMANDS.OCF_LE_READ_WHITE_LIST_SIZE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_CLEAR_WHITE_LIST_CMD = COMMANDS.OCF_LE_CLEAR_WHITE_LIST | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_SUPPORTED_STATES_CMD = COMMANDS.OCF_LE_READ_SUPPORTED_STATES | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH_CMD = COMMANDS.OCF_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_CMD = COMMANDS.OCF_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_CLEAR_RESOLVING_LIST_CMD = COMMANDS.OCF_LE_CLEAR_RESOLVING_LIST | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_RESOLVING_LIST_SIZE_CMD = COMMANDS.OCF_LE_READ_RESOLVING_LIST_SIZE | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_SET_RESOLVABLE_PRIVATE_ADDRESS_TIMEOUT_CMD = COMMANDS.OCF_LE_SET_RESOLVABLE_PRIVATE_ADDRESS_TIMEOUT | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.LE_READ_MAXIMUM_DATA_LENGTH_CMD = COMMANDS.OCF_LE_READ_MAXIMUM_DATA_LENGTH | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.SET_DEFAULT_PHY_CMD = COMMANDS.OCF_SET_DEFAULT_PHY | (COMMANDS.OGF_LE_CTL << 10);
    COMMANDS.HCI_OE_USER_ENDED_CONNECTION = 0x13;
})(COMMANDS || (COMMANDS = {}));
const hci_status_json_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci-status.json"));
/**
 * @ignore
 */
class Hci extends eventemitter3_1.default {
    constructor(obnizHci) {
        super();
        this._state = 'poweredOff';
        this._aclStreamObservers = {};
        /**
         * @ignore
         * @private
         */
        this.debugHandler = () => {
            // do nothing.
        };
        this._obnizHci = obnizHci;
        this._obnizHci.Obniz.on('_close', () => {
            this.stateChange('poweredOff');
        });
        this._socket = {
            write: (data) => {
                const arr = Array.from(data);
                this._obnizHci.write(arr);
                // console.log(
                //   'SEND:',
                //   Buffer.from(arr)
                //     .toString('hex')
                //     .match(/.{1,2}/g)!
                //     .join(' ')
                // );
            },
        };
        this._obnizHci.hciProtocolOnSocketData = this.onSocketData.bind(this);
        this._obnizHci.onread = this._obnizHci.hciProtocolOnSocketData;
        this.resetBuffers();
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.stateChange('poweredOff');
        this.resetBuffers();
    }
    async initWait() {
        await this.resetWait();
    }
    setEventMaskCommand(mask) {
        const cmd = Buffer.alloc(12);
        const eventMask = Buffer.from(mask, 'hex');
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.SET_EVENT_MASK_CMD, 1);
        // length
        cmd.writeUInt8(eventMask.length, 3);
        eventMask.copy(cmd, 4);
        this.debug('set event mask - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async resetWait() {
        if (this._obnizHci.Obniz.hw === 'cc3235mod') {
            await this.resetForNrf52832Wait();
        }
        else {
            await this.resetForOldObnizjsWait();
            // await this.resetForEsp32Wait();
        }
    }
    async resetForNrf52832Wait() {
        this._reset();
        await this.resetCommandWait();
        const features = await this.readLocalSupportedFeaturesCommandWait();
        const localVersion = await this.readLocalVersionCommandWait();
        const addr = await this.readBdAddrWait();
        const bufSize = await this.leReadBufferSizeWait();
        const leFeatures = await this.leReadLocalSupportedFeaturesCommandWait();
        const leSupportedStates = await this.leReadSupportedStatesCommandWait();
        const supportedCommands = await this.readLocalSupportedCommandWait();
        // this.setEventMaskCommand('fffffbff07f8bf3d');
        // this.setLeEventMaskCommand('1f00000000000000');
        this.setEventMaskCommand('90E8040200800020');
        this.setLeEventMaskCommand('5F0E080000000000');
        const txPower = await this.leReadAdvertisingPhysicalChannelTxPowerCommandWait();
        const whiteListSize = await this.leReadWhiteListSizeWait();
        await this.leClearWhiteListCommandWait();
        const resolvingListSize = await this.leReadResolvingListSizeCommandWait();
        await this.leClearResolvingListCommandWait();
        await this.leSetResolvablePrivateAddressTimeoutCommandWait(0x0384);
        const maximumDataLength = await this.leReadMaximumDataLengthCommandWait();
        this.setEventMaskPage2('0000800000000000'); // TODO
        const defaultDataLength = await this.leReadSuggestedDefaultDataLengthCommandWait();
        // await this.leWriteSuggestedDefaultDataLengthCommandWait(0x00fb, 0x0a90);
        await this.leSetDefaultPhyCommandWait(0, 0, 1);
        // await this.setAdvertisingDataWait(Buffer.alloc(31));
        await this.setRandomDeviceAddressWait();
    }
    async resetForOldObnizjsWait() {
        this._reset();
        await this.resetCommandWait();
        this.setEventMaskCommand('fffffbff07f8bf3d');
        this.setLeEventMaskCommand('1f00000000000000');
        const { hciVer, hciRev, lmpVer, manufacturer, lmpSubVer, } = await this.readLocalVersionCommandWait();
        this.writeLeHostSupportedCommand();
        await this.readLeHostSupportedWait();
        const addr = await this.readBdAddrWait();
        const bufsize = await this.leReadBufferSizeWait();
        if (bufsize) {
            this.debug(`Buffer Mtu=${bufsize.aclMtu} aclMaxInProgress=${bufsize.aclMaxInProgress}`);
        }
        // await this.setRandomDeviceAddressWait();
        if (this._state !== 'poweredOn') {
            await this.setScanEnabledWait(false, true);
            await this.setScanParametersWait(false);
            this.stateChange('poweredOn');
        }
    }
    async resetForEsp32Wait() {
        this._reset();
        await this.resetCommandWait();
        const bufSize = await this.readBufferSizeWait();
        const localVersion = await this.readLocalVersionCommandWait();
        const addr = await this.readBdAddrWait();
        const localSupportedCommands = await this.readLocalSupportedCommandWait();
        const localExtendedFeatures = [
            await this.readLocalExtendedFeaturesCommandWait(0),
        ];
        if (localExtendedFeatures[0].maximumPageNumber > 0) {
            for (let i = 1; i <= localExtendedFeatures[0].maximumPageNumber; i++) {
                localExtendedFeatures.push(await this.readLocalExtendedFeaturesCommandWait(i));
            }
        }
        await this.writeSimplePairingModeCommandWait('enabled');
        this.writeLeHostSupportedCommand();
        const whiteListSize = await this.leReadWhiteListSizeWait();
        const leBufSize = await this.leReadBufferSizeWait();
        if (leBufSize) {
            this.debug(`Buffer Mtu=${leBufSize.aclMtu} aclMaxInProgress=${leBufSize.aclMaxInProgress}`);
        }
        const supportedStates = await this.leReadSupportedStatesCommandWait();
        const localSupportedFeatures = await this.leReadLocalSupportedFeaturesCommandWait();
        const resolvingListSize = await this.leReadResolvingListSizeCommandWait();
        await this.leWriteSuggestedDefaultDataLengthCommandWait(0x00fb, 0x0848);
        const defaultDataLength = await this.leReadSuggestedDefaultDataLengthCommandWait();
        this.setLeEventMaskCommand('7f06000000000000');
        this.setEventMaskCommand('FFFFFFFFFFFFBF3D');
        // this.setLeEventMaskCommand('1f00000000000000');
        // this.setEventMaskCommand('fffffbff07f8bf3d');
        await this.leClearResolvingListCommandWait();
        await this.leSetResolvablePrivateAddressTimeoutCommandWait(0x0384);
        await this.writeInquiryModeCommandWait('inquiryResultWithRSSIFormatOrExtendedInquiryResultFormat');
        await this.writePageScanTypeCommandWait('interlacedScan');
        await this.writeInquiryScanTypeCommandWait('interlacedScan');
        await this.writeClassOfDeviceCommandWait(0x2c0414);
        await this.writePageTimeoutCommandWait(0x2000);
        await this.writeDefaultLinkPolicyCommandWait(['enableSniffMode']);
        const localName = await this.readLocalNameCommandWait();
        this.debug('le localName ' + localName);
        if (this._state !== 'poweredOn') {
            await this.setScanEnabledWait(false, true);
            await this.setScanParametersWait(false);
            this.stateChange('poweredOn');
        }
    }
    async resetCommandWait() {
        const resetResult = await this.writeNoParamCommandWait(COMMANDS.RESET_CMD, 'reset');
        return resetResult;
    }
    async setRandomDeviceAddressWait() {
        // await this.leRandWait();
        // await this.leEncryptWait();
        await this.leSetRandomAddressWait(Buffer.from([254, 117, 174, 251, 138, 21]));
    }
    async leEncryptWait(key, plainTextData) {
        const cmd = Buffer.alloc(4 + 16 + 16);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_ENCRYPT_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        key.copy(cmd, 4);
        plainTextData.copy(cmd, 4 + 16);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_ENCRYPT_CMD);
        this.debug('le encrypt - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        const encryptedData = data.result;
        return { encryptedData };
    }
    async leRandWait() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_RAND_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_RAND_CMD);
        this.debug('le rand - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        const randomNumber = data.result;
        return { randomNumber };
    }
    async leSetRandomAddressWait(randomAddress) {
        const cmd = Buffer.alloc(4 + 6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_RANDOM_ADDRESS_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        randomAddress.copy(cmd, 4);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_RANDOM_ADDRESS_CMD);
        this.debug('le set random address - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
    }
    async writeDefaultLinkPolicyCommandWait(mode) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.WRITE_DEFAULT_LINK_POLICY_SETTINGS_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        let modeValue = 0;
        if (mode.includes('enableRoleSwitch')) {
            modeValue = modeValue | 0x01;
        }
        if (mode.includes('enableHoldMode')) {
            modeValue = modeValue | 0x02;
        }
        if (mode.includes('enableSniffMode')) {
            modeValue = modeValue | 0x04;
        }
        cmd.writeUInt16LE(modeValue, 4);
        this.debug('write default link policy - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    resetBuffers() {
        this._handleAclsInProgress = {};
        this._handleBuffers = {};
        this._aclOutQueue = [];
    }
    async readLocalVersionCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_LOCAL_VERSION_CMD, 'read local version');
        const hciVer = data.result.readUInt8(0);
        const hciRev = data.result.readUInt16LE(1);
        const lmpVer = data.result.readInt8(3);
        const manufacturer = data.result.readUInt16LE(4);
        const lmpSubVer = data.result.readUInt16LE(6);
        if (hciVer < 0x06) {
            throw new ObnizError_1.ObnizBleUnsupportedHciError(0x06, hciVer);
        }
        this.debug(`localVersion ${hciVer} ${hciRev} ${lmpVer} ${manufacturer} ${lmpSubVer}`);
        return { hciVer, hciRev, lmpVer, manufacturer, lmpSubVer };
    }
    async readLocalNameCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_LOCAL_NAME_CMD, 'read local name');
        return data.result.toString('ascii');
    }
    async writePageTimeoutCommandWait(pageTimeout = 0x2000) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.WRITE_PAGE_TIMEOUT_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        cmd.writeUInt16LE(pageTimeout, 4);
        this.debug('write page timeout - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async writeClassOfDeviceCommandWait(classOfDevice) {
        const cmd = Buffer.alloc(7);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.WRITE_CLASS_OF_DEVICE_CMD, 1);
        // length
        cmd.writeUInt8(0x03, 3);
        cmd.writeUInt8((classOfDevice >> 0) & 0xff, 4);
        cmd.writeUInt8((classOfDevice >> 8) & 0xff, 5);
        cmd.writeUInt8((classOfDevice >> 16) & 0xff, 6);
        this.debug('write class of device - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async writeInquiryScanTypeCommandWait(scanType) {
        const data = await this.writeSingleParamCommandWait(COMMANDS.WRITE_INQUIRY_SCAN_TYPE_CMD, scanType, {
            standardScan: 0x00,
            interlacedScan: 0x01,
        }, 'write inquiry mode type ');
    }
    async writeInquiryModeCommandWait(inquiryMode) {
        const data = await this.writeSingleParamCommandWait(COMMANDS.WRITE_INQUIRY_MODE_CMD, inquiryMode, {
            standardInquiryResultEventFormat: 0x00,
            inquiryResultFormatWithRSSI: 0x01,
            inquiryResultWithRSSIFormatOrExtendedInquiryResultFormat: 0x02,
        }, 'write inquiry mode type ');
    }
    async writePageScanTypeCommandWait(pageScanType) {
        const data = await this.writeSingleParamCommandWait(COMMANDS.WRITE_PAGE_SCAN_TYPE_CMD, pageScanType, {
            standardScan: 0x00,
            interlacedScan: 0x01,
        }, 'write page scan type');
    }
    async writeSimplePairingModeCommandWait(simplePairingMode) {
        const data = await this.writeSingleParamCommandWait(COMMANDS.WRITE_SIMPLE_PAIRING_MODE_CMD, simplePairingMode, {
            disabled: 0x00,
            enabled: 0x01,
        }, 'write simple pairing mode');
    }
    setEventMaskPage2(mask) {
        const cmd = Buffer.alloc(12);
        const leEventMask = Buffer.from(mask, 'hex');
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.SET_EVENT_MASK_PAGE_2_CMD, 1);
        // length
        cmd.writeUInt8(leEventMask.length, 3);
        leEventMask.copy(cmd, 4);
        this.debug('set le event mask page 2 - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async readLocalSupportedCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_LOCAL_SUPPORTED_COMMANDS_CMD, 'read local supported commands');
        this.debug('supportedCommands = ' + data.result.toString('hex'));
        return data.result;
    }
    async readLocalSupportedFeaturesCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_LOCAL_SUPPORTED_FEATURES_CMD, 'read local supported features');
        this.debug('supportedFeatures = ' + data.result.toString('hex'));
        return data.result;
    }
    async readLocalExtendedFeaturesCommandWait(page) {
        const cmd = Buffer.alloc(5);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.READ_LOCAL_EXTENDED_FEATURES_CMD, 1);
        // length
        cmd.writeUInt8(1, 3);
        cmd.writeUInt8(page, 4);
        const p = this.readCmdCompleteEventWait(COMMANDS.READ_LOCAL_EXTENDED_FEATURES_CMD);
        this.debug(`read local extended features - writing: ${cmd.toString('hex')}`);
        this._socket.write(cmd);
        const resetResult = await p;
        return {
            pageNumber: resetResult.result.readUInt8(0),
            maximumPageNumber: resetResult.result.readUInt8(1),
            extendedLmpFeatures: resetResult.result.slice(2),
        };
    }
    async leClearWhiteListCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_CLEAR_WHITE_LIST_CMD, 'le clear white list');
        return data.result;
    }
    async leReadSupportedStatesCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_SUPPORTED_STATES_CMD, 'le read supported states');
        return data.result;
    }
    async leReadSuggestedDefaultDataLengthCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH_CMD, 'le read suggested default data length');
        return {
            suggestedMaxTxOctets: data.result.readUInt16LE(0),
            suggestedMaxTxTime: data.result.readUInt16LE(2),
        };
    }
    async leWriteSuggestedDefaultDataLengthCommandWait(suggestedMaxTxOctets, suggestedMaxTxTime) {
        const cmd = Buffer.alloc(8);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_CMD, 1);
        // length
        cmd.writeUInt8(4, 3);
        cmd.writeUInt16LE(suggestedMaxTxOctets, 4);
        cmd.writeUInt16LE(suggestedMaxTxTime, 6);
        this.debug('le write suggested default data length - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async leClearResolvingListCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_CLEAR_RESOLVING_LIST_CMD, 'le clear resolving list');
    }
    async leReadResolvingListSizeCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_RESOLVING_LIST_SIZE_CMD, 'le read resolving list size');
        return data.result.readInt8(0);
    }
    async leSetResolvablePrivateAddressTimeoutCommandWait(rpaTimeout) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_RESOLVABLE_PRIVATE_ADDRESS_TIMEOUT_CMD, 1);
        // length
        cmd.writeUInt8(2, 3);
        cmd.writeUInt16LE(rpaTimeout, 4);
        this.debug('le set resolvable private address timeout - writing: ' +
            cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async leReadMaximumDataLengthCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_MAXIMUM_DATA_LENGTH_CMD, 'le read maximum data length');
        return {
            supportedMaxTxOctets: data.result.readUInt16LE(0),
            supportedMaxTxTime: data.result.readUInt16LE(2),
            supportedMaxRxOctets: data.result.readUInt16LE(4),
            supportedMaxRxTime: data.result.readUInt16LE(6),
        };
    }
    async leReadLocalSupportedFeaturesCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_LOCAL_SUPPORTED_FEATURES_CMD, 'le read local supported features');
        this.debug('read local supported features = ' + data.result.toString('hex'));
        return data.result;
    }
    async leSetDefaultPhyCommandWait(allPhys, txPhys, rxPhys) {
        const cmd = Buffer.alloc(7);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.SET_DEFAULT_PHY_CMD, 1);
        // length
        cmd.writeUInt8(3, 3);
        cmd.writeUInt8(allPhys, 4);
        cmd.writeUInt8(txPhys, 5);
        cmd.writeUInt8(rxPhys, 6);
        this.debug('le set default phy - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async leReadAdvertisingPhysicalChannelTxPowerCommandWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_ADVERTISING_CHANNEL_TX_POWER_CMD, 'le read advertising channel tx power');
        return data.result.readInt8(0);
    }
    async leReadWhiteListSizeWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_WHITE_LIST_SIZE_CMD, 'le read white list size');
        return data.result.readUInt8(0);
    }
    async readBdAddrWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_BD_ADDR_CMD, 'read bd addr');
        this.addressType = 'public';
        this.address = bleHelper_1.default.buffer2reversedHex(data.result, ':');
        this.debug('address = ' + this.address);
        return this.address;
    }
    setLeEventMaskCommand(mask) {
        const cmd = Buffer.alloc(12);
        const leEventMask = Buffer.from(mask, 'hex');
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_EVENT_MASK_CMD, 1);
        // length
        cmd.writeUInt8(leEventMask.length, 3);
        leEventMask.copy(cmd, 4);
        this.debug('set le event mask - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async readLeHostSupportedWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_LE_HOST_SUPPORTED_CMD, 'read LE host supported');
        if (data.status === 0) {
            const le = data.result.readUInt8(0);
            const simul = data.result.readUInt8(1);
            this.debug('\t\t\tle = ' + le);
            this.debug('\t\t\tsimul = ' + simul);
        }
        return data;
    }
    writeLeHostSupportedCommand() {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.WRITE_LE_HOST_SUPPORTED_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt8(0x01, 4); // le
        cmd.writeUInt8(0x00, 5); // simul
        this.debug('write LE host supported - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async setScanParametersWait(isActiveScan) {
        const cmd = Buffer.alloc(11);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD, 1);
        // length
        cmd.writeUInt8(0x07, 3);
        // data
        cmd.writeUInt8(isActiveScan ? 0x01 : 0x00, 4); // type: 0 -> passive, 1 -> active
        cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6
        cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6
        const addressType = this._obnizHci.Obniz.hw === 'cc3235mod' ? 0x01 : 0x00;
        cmd.writeUInt8(addressType, 9); // own address type: 0 -> public, 1 -> random
        cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD);
        this.debug('set scan parameters - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        return data.status;
    }
    async setScanEnabledWait(enabled, filterDuplicates) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_ENABLE_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled
        cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // 0x01 => filter enabled, 0x00 => filter disable
        this.debug('set scan enabled - writing: ' + cmd.toString('hex'));
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_ENABLE_CMD);
        this._socket.write(cmd);
        const data = await p;
        return data.status;
    }
    async createLeConnWait(address, addressType, timeout = 90 * 1000, onConnectCallback, parameterType = 'obnizjs<3_18_0') {
        const cmd = Buffer.alloc(29);
        // 010d2019600030000000965d341a9ea0000a000c000000580202000000
        // 010d2019600030000000965d341a9ea0000a000c000000580200000000
        // bluedroid
        // 01 0d 20 19 60 00 30 00 00 00  //
        // 96 5d 34 1a 9e a0 00 0a 00 0c  // deviceaddr(6) own address type(1) minInterval(2) maxInterval(1)
        // 00 00 00 58 02 00 00 00 00     // maxInterval(1) latency(2) supervision timeout(2)
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_CREATE_CONN_CMD, 1);
        // length
        cmd.writeUInt8(0x19, 3);
        const parameter = parameterType === 'obnizjs<3_18_0'
            ? {
                interval: 0x0010,
                window: 0x0010,
                initiatorFilter: 0x00,
                minInterval: 0x0009,
                maxInterval: 0x0018,
                latency: 0x0001,
                supervisionTimeout: 0x0190,
                minCeLength: 0x0000,
                maxCeLength: 0x0000,
            }
            : {
                interval: 0x0060,
                window: 0x0030,
                initiatorFilter: 0x00,
                minInterval: 0x000a,
                maxInterval: 0x000c,
                latency: 0x0000,
                supervisionTimeout: 0x0258,
                minCeLength: 0x0000,
                maxCeLength: 0x0000,
            };
        // data
        cmd.writeUInt16LE(parameter.interval, 4); // interval
        cmd.writeUInt16LE(parameter.window, 6); // window
        cmd.writeUInt8(parameter.initiatorFilter, 8); // initiator filter
        cmd.writeUInt8(addressType === 'random' ? 0x01 : 0x00, 9); // peer address type
        bleHelper_1.default.hex2reversedBuffer(address, ':').copy(cmd, 10); // peer address
        cmd.writeUInt8(0x00, 16); // own address type
        cmd.writeUInt16LE(parameter.minInterval, 17); // min interval 9 * 1.25 msec => 7.5msec (close to android)
        cmd.writeUInt16LE(parameter.maxInterval, 19); // max interval 24 * 1.25 msec => 30msec (close to ios)
        cmd.writeUInt16LE(parameter.latency, 21); // latency // cmd.writeUInt16LE(0x0000, 21);
        cmd.writeUInt16LE(parameter.supervisionTimeout, 23); // supervision timeout 4sec // cmd.writeUInt16LE(0x00c8, 23);
        cmd.writeUInt16LE(parameter.minCeLength, 25); // min ce length
        cmd.writeUInt16LE(parameter.maxCeLength, 27); // max ce length
        this.debug('create le conn - writing: ' + cmd.toString('hex'));
        const processConnectionCompletePromise = (async () => {
            const { status, data } = await this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_COMPLETE, {
                timeout,
            });
            return { status, data: this.parseConnectionCompleteEventData(data) };
        })();
        const processLeConnectionCompletePromise = (async () => {
            const { status, data } = await this.readLeMetaEventWait(COMMANDS.EVT_LE_ENHANCED_CONNECTION_COMPLETE, {
                timeout,
            });
            return { status, data: this.parseLeConnectionCompleteEventData(data) };
        })();
        this._socket.write(cmd);
        const result = await Promise.race([
            processConnectionCompletePromise,
            processLeConnectionCompletePromise,
        ]);
        return this.processLeConnComplete(result.status, result.data, onConnectCallback);
    }
    async createLeConnCancelWait() {
        const { status } = await this.writeNoParamCommandWait(COMMANDS.LE_CREATE_CONN_CANCEL_CMD, 'create le conn cancel');
        if (status !== 0x00) {
            throw new ObnizError_1.ObnizBleHciStateError(status);
        }
    }
    async connUpdateLeWait(handle, minInterval, maxInterval, latency, supervisionTimeout) {
        const cmd = Buffer.alloc(18);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_CONN_UPDATE_CMD, 1);
        // length
        cmd.writeUInt8(0x0e, 3);
        // data
        cmd.writeUInt16LE(handle, 4);
        cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval
        cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval
        cmd.writeUInt16LE(latency, 10); // latency
        cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout
        cmd.writeUInt16LE(0x0000, 14); // min ce length
        cmd.writeUInt16LE(0x0000, 16); // max ce length
        this.debug('conn update le - writing: ' + cmd.toString('hex'));
        const p = this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE);
        this._socket.write(cmd);
        const { status, data } = await p;
        return this.processLeConnUpdateComplete(status, data);
    }
    // this function is use by connUpdateLeWait / processLeMetaEvent.
    processLeConnUpdateComplete(status, data) {
        const handle = data.readUInt16LE(0);
        const interval = data.readUInt16LE(2) * 1.25;
        const latency = data.readUInt16LE(4); // TODO: multiplier?
        const supervisionTimeout = data.readUInt16LE(6) * 10;
        this.debug('\t\t\thandle = ' + handle);
        this.debug('\t\t\tinterval = ' + interval);
        this.debug('\t\t\tlatency = ' + latency);
        this.debug('\t\t\tsupervision timeout = ' + supervisionTimeout);
        return { status, handle, interval, latency, supervisionTimeout };
    }
    async startLeEncryptionWait(handle, random, diversifier, key) {
        const cmd = Buffer.alloc(32);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_START_ENCRYPTION_CMD, 1);
        // length
        cmd.writeUInt8(0x1c, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        random.copy(cmd, 6);
        diversifier.copy(cmd, 14);
        key.copy(cmd, 16);
        // console.log("start le encryption - writing: " + cmd.toString("hex"));
        const p1 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPT_CHANGE], {
            waitingFor: 'EVT_ENCRYPT_CHANGE',
        });
        const p2 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE], {
            waitingFor: 'EVT_ENCRYPTION_KEY_REFRESH_COMPLETE',
        });
        this.debug('start le encryption - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await Promise.race([p1, p2]);
        // const data = await p1;
        // console.log("start le encryption - data: " + data.toString("hex"));
        if (data.readUInt8(1) === COMMANDS.EVT_ENCRYPT_CHANGE) {
            if (data.length !== 7) {
                throw new Error(`le encryption event EVT_ENCRYPT_CHANGE length must be 7 but recieved ${data.length}`);
            }
            const status = data.readUInt8(3);
            if (status !== 0x00) {
                throw new Error(`le encryption event EVT_ENCRYPT_CHANGE failed with error ${status}`);
            }
            const encHandle = data.readUInt16LE(4);
            const encrypt = data.readUInt8(6);
            this.debug('\t\thandle = ' + encHandle);
            this.debug('\t\tencrypt = ' + encrypt);
            this.emit('encryptChange', encHandle, encrypt);
            return encrypt;
        }
        else if (data[1] === COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE) {
            if (data.length !== 6) {
                throw new Error(`le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE length must be 7 but recieved ${data.length}`);
            }
            const status = data.readUInt8(3);
            if (status !== 0x00) {
                throw new Error(`le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE failed with error ${status}`);
            }
            const encHandle = data.readUInt16LE(4);
            this.debug('\t\thandle = ' + encHandle);
            return 'refresh';
        }
        throw new Error('Never Happend');
    }
    disconnect(handle, reason) {
        const cmd = Buffer.alloc(7);
        reason = reason || COMMANDS.HCI_OE_USER_ENDED_CONNECTION;
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.DISCONNECT_CMD, 1);
        // length
        cmd.writeUInt8(0x03, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        cmd.writeUInt8(reason, 6); // reason
        this.debug('disconnect - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
    }
    async readRssiWait(handle) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.READ_RSSI_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        const p = this.readCmdCompleteEventWait(COMMANDS.READ_RSSI_CMD, [
            handle & 0xff,
            (handle >> 8) & 0xff,
        ]);
        this.debug('read rssi - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        if (handle !== data.result.readUInt16LE(0)) {
            throw new Error('handle is different');
        }
        const rssi = data.result.readInt8(2);
        this.debug('\t\t\thandle = ' + handle);
        this.debug('\t\t\trssi = ' + rssi);
        return rssi;
    }
    async setAdvertisingParametersWait() {
        const cmd = Buffer.alloc(19);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD, 1);
        // length
        cmd.writeUInt8(15, 3);
        const advertisementInterval = Math.floor((process.env.BLENO_ADVERTISING_INTERVAL
            ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL)
            : 100) * 1.6);
        // data
        cmd.writeUInt16LE(advertisementInterval, 4); // min interval
        cmd.writeUInt16LE(advertisementInterval, 6); // max interval
        cmd.writeUInt8(0x00, 8); // adv type
        cmd.writeUInt8(0x00, 9); // own addr typ
        cmd.writeUInt8(0x00, 10); // direct addr type
        Buffer.from('000000000000', 'hex').copy(cmd, 11); // direct addr
        cmd.writeUInt8(0x07, 17);
        cmd.writeUInt8(0x00, 18);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD);
        this.debug('set advertisement parameters - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        // this.emit("stateChange", "poweredOn"); // TODO : really need?
        return data.status;
    }
    async setAdvertisingDataWait(data) {
        const cmd = Buffer.alloc(36);
        cmd.fill(0x00);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_DATA_CMD, 1);
        // length
        cmd.writeUInt8(32, 3);
        // data
        cmd.writeUInt8(data.length, 4);
        data.copy(cmd, 5);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_DATA_CMD);
        this.debug('set advertisement data - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const result = await p;
        return result.status;
    }
    async setScanResponseDataWait(data) {
        const cmd = Buffer.alloc(36);
        cmd.fill(0x00);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD, 1);
        // length
        cmd.writeUInt8(32, 3);
        // data
        cmd.writeUInt8(data.length, 4);
        data.copy(cmd, 5);
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD);
        this.debug('set scan response data - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const result = await p;
        return result.status;
    }
    async setAdvertiseEnableWait(enabled) {
        const cmd = Buffer.alloc(5);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD, 1);
        // length
        cmd.writeUInt8(0x01, 3);
        // data
        cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled
        const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD);
        this.debug('set advertise enable - writing: ' + cmd.toString('hex'));
        this._socket.write(cmd);
        const data = await p;
        return data.status;
    }
    async leReadBufferSizeWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.LE_READ_BUFFER_SIZE_CMD, 'le read buffer size ');
        if (!data.status) {
            return await this.processLeReadBufferSizeWait(data.result);
        }
    }
    async readBufferSizeWait() {
        const data = await this.writeNoParamCommandWait(COMMANDS.READ_BUFFER_SIZE_CMD, 'read buffer size');
        if (!data.status) {
            const aclMtu = data.result.readUInt16LE(0);
            const aclMaxInProgress = data.result.readUInt16LE(3);
            // sanity
            if (aclMtu && aclMaxInProgress) {
                this.debug('br/edr acl mtu = ' + aclMtu);
                this.debug('br/edr acl max pkts = ' + aclMaxInProgress);
                this._aclMtu = aclMtu;
                this._aclMaxInProgress = aclMaxInProgress;
                return { aclMtu, aclMaxInProgress };
            }
        }
        return null;
    }
    queueAclDataPkt(handle, cid, data) {
        let hf = handle | (COMMANDS.ACL_START_NO_FLUSH << 12);
        // l2cap pdu may be fragmented on hci level
        let l2capPdu = Buffer.alloc(4 + data.length);
        l2capPdu.writeUInt16LE(data.length, 0);
        l2capPdu.writeUInt16LE(cid, 2);
        data.copy(l2capPdu, 4);
        let fragId = 0;
        while (l2capPdu.length) {
            const frag = l2capPdu.slice(0, this._aclMtu);
            l2capPdu = l2capPdu.slice(frag.length);
            const pkt = Buffer.alloc(5 + frag.length);
            // hci header
            pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);
            pkt.writeUInt16LE(hf, 1);
            hf |= COMMANDS.ACL_CONT << 12;
            pkt.writeUInt16LE(frag.length, 3); // hci pdu length
            frag.copy(pkt, 5);
            this._aclOutQueue.push({
                handle,
                pkt,
                fragId: fragId++,
            });
        }
        this.pushAclOutQueue();
    }
    pushAclOutQueue() {
        this.debug('pushAclOutQueue');
        let inProgress = 0;
        for (const handle in this._handleAclsInProgress) {
            inProgress += this._handleAclsInProgress[handle];
        }
        this.debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);
        while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {
            inProgress++;
            this.writeOneAclDataPkt();
        }
        if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {
            this.debug('acl out queue congested');
            this.debug('\tin progress = ' + inProgress);
            this.debug('\twaiting = ' + this._aclOutQueue.length);
        }
    }
    writeOneAclDataPkt() {
        this.debug('writeOneAclDataPkt');
        const pkt = this._aclOutQueue.shift();
        this._handleAclsInProgress[pkt.handle]++;
        this.debug('write acl data pkt frag ' +
            pkt.fragId +
            ' handle ' +
            pkt.handle +
            ' - writing: ' +
            pkt.pkt.toString('hex'));
        this._socket.write(pkt.pkt);
    }
    writeAclDataPkt(handle, cid, data) {
        const pkt = Buffer.alloc(9 + data.length);
        // header
        pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);
        pkt.writeUInt16LE(handle | (COMMANDS.ACL_START_NO_FLUSH << 12), 1);
        pkt.writeUInt16LE(data.length + 4, 3); // data length 1  for acl data on HCI
        pkt.writeUInt16LE(data.length, 5); // data length 2  for l2cap
        pkt.writeUInt16LE(cid, 7);
        data.copy(pkt, 9);
        this.debug('write acl data pkt - writing: ' + pkt.toString('hex'));
        this._socket.write(pkt);
    }
    async longTermKeyRequestNegativeReplyWait(handle) {
        throw new Error('TODO: no checked');
        // const cmd = Buffer.alloc(5);
        //
        // // header
        // cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        // cmd.writeUInt16LE(COMMANDS.LE_LTK_NEG_REPLY_CMD, 1);
        //
        // // length
        // cmd.writeUInt16LE(handle, 3);
        //
        // const p = this.readCmdCompleteEventWait(COMMANDS.LE_LTK_NEG_REPLY_CMD);
        // this._socket.write(cmd);
        // const data = await p;
        // return data.status;
    }
    processLeMetaEvent(eventType, status, data) {
        if (eventType === COMMANDS.EVT_LE_ADVERTISING_REPORT) {
            this.processLeAdvertisingReport(status, data);
        }
        else if (eventType === COMMANDS.EVT_LE_CONN_COMPLETE) {
            const role = data.readUInt8(2);
            if (role === 1) {
                const connectionData = this.parseConnectionCompleteEventData(data);
                this.processLeConnComplete(status, connectionData, undefined);
            }
        }
        else if (eventType === COMMANDS.EVT_LE_ENHANCED_CONNECTION_COMPLETE) {
            const role = data.readUInt8(2);
            if (role === 1) {
                const connectionData = this.parseConnectionCompleteEventData(data);
                this.processLeConnComplete(status, connectionData, undefined);
            }
        }
        else if (eventType === COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE) {
            const { handle, interval, latency, supervisionTimeout, } = this.processLeConnUpdateComplete(status, data);
            this.emit('leConnUpdateComplete', status, handle, interval, latency, supervisionTimeout);
        }
    }
    parseConnectionCompleteEventData(data) {
        return {
            handle: data.readUInt16LE(0),
            role: data.readUInt8(2),
            addressType: (data.readUInt8(3) === 0x01
                ? 'random'
                : 'public'),
            address: bleHelper_1.default.buffer2reversedHex(data.slice(4, 10), ':'),
            interval: data.readUInt16LE(10) * 1.25,
            latency: data.readUInt16LE(12),
            supervisionTimeout: data.readUInt16LE(14) * 10,
            masterClockAccuracy: data.readUInt8(16),
        };
    }
    parseLeConnectionCompleteEventData(data) {
        var _a;
        const addressTypeList = {
            0x00: 'public',
            0x01: 'random',
            0x02: 'rpa_public',
            0x03: 'rpa_random',
        };
        return {
            handle: data.readUInt16LE(0),
            role: data.readUInt8(2),
            addressType: (_a = addressTypeList[data.readUInt8(3)], (_a !== null && _a !== void 0 ? _a : 'undefined')),
            address: bleHelper_1.default.buffer2reversedHex(data.slice(4, 10), ':'),
            localResolvablePrivateAddress: bleHelper_1.default.buffer2reversedHex(data.slice(10, 16), ':'),
            peerResolvablePrivateAddress: bleHelper_1.default.buffer2reversedHex(data.slice(16, 22), ':'),
            interval: data.readUInt16LE(22) * 1.25,
            latency: data.readUInt16LE(24),
            supervisionTimeout: data.readUInt16LE(26) * 10,
            masterClockAccuracy: data.readUInt8(28),
        };
    }
    processLeConnComplete(status, data, onConnectCallback) {
        const handle = data.handle;
        const role = data.role;
        const addressType = data.addressType;
        const address = data.address;
        const interval = data.interval;
        const latency = data.latency; // TODO: multiplier?
        const supervisionTimeout = data.supervisionTimeout;
        const masterClockAccuracy = data.masterClockAccuracy; // TODO: multiplier?
        this.debug('\t\t\thandle = ' + handle);
        this.debug('\t\t\trole = ' + role);
        this.debug('\t\t\taddress type = ' + addressType);
        this.debug('\t\t\taddress = ' + address);
        this.debug('\t\t\tinterval = ' + interval);
        this.debug('\t\t\tlatency = ' + latency);
        this.debug('\t\t\tsupervision timeout = ' + supervisionTimeout);
        this.debug('\t\t\tmaster clock accuracy = ' + masterClockAccuracy);
        this._handleAclsInProgress[handle] = 0;
        if (role === 1) {
            // only slave, emit
            this.emit('leConnComplete', status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy);
        }
        const result = {
            status,
            handle,
            role,
            addressType,
            address,
            interval,
            latency,
            supervisionTimeout,
            masterClockAccuracy,
        };
        if (typeof onConnectCallback === 'function') {
            onConnectCallback(result);
        }
        return result;
    }
    processLeAdvertisingReport(count, data) {
        for (let i = 0; i < count; i++) {
            const type = data.readUInt8(0);
            const addressType = data.readUInt8(1) === 0x01 ? 'random' : 'public';
            const address = bleHelper_1.default.buffer2reversedHex(data.slice(2, 8), ':');
            const eirLength = data.readUInt8(8);
            const eir = data.slice(9, eirLength + 9);
            const rssi = data.readInt8(eirLength + 9);
            this.debug('\t\t\ttype = ' + type);
            this.debug('\t\t\taddress = ' + address);
            this.debug('\t\t\taddress type = ' + addressType);
            this.debug('\t\t\teir = ' + eir.toString('hex'));
            this.debug('\t\t\trssi =  ' + rssi);
            this.emit('leAdvertisingReport', 0, type, address, addressType, eir, rssi);
            data = data.slice(eirLength + 10);
        }
    }
    processCmdStatusEvent(cmd, status) {
        if (cmd === COMMANDS.LE_CREATE_CONN_CMD) {
            if (status !== 0) {
                this.emit('leConnComplete', status);
            }
        }
    }
    async processLeReadBufferSizeWait(result) {
        const aclMtu = result.readUInt16LE(0);
        const aclMaxInProgress = result.readUInt8(2);
        if (!aclMtu) {
            // as per Bluetooth specs
            this.debug('falling back to br/edr buffer size');
            return await this.readBufferSizeWait();
        }
        else {
            this.debug('le acl mtu = ' + aclMtu);
            this.debug('le acl max in progress = ' + aclMaxInProgress);
            this._aclMtu = aclMtu;
            this._aclMaxInProgress = aclMaxInProgress;
        }
    }
    stateChange(state) {
        this._state = state;
        this.emit('stateChange', state);
    }
    async readAclStreamWait(handle, cid, firstData, timeout) {
        return await this._obnizHci.timeoutPromiseWrapper(new Promise((resolve) => {
            const key = (cid << 8) + firstData;
            this._aclStreamObservers[handle] =
                this._aclStreamObservers[handle] || [];
            this._aclStreamObservers[handle][key] = []; // reset: queue is not supported
            this._aclStreamObservers[handle][key].push(resolve);
        }), {
            timeout,
            waitingFor: `readAclStream handle:${handle} cid:${cid} firstData:${firstData}`,
        });
    }
    async readLeMetaEventWait(eventType, options) {
        const filter = this.createLeMetaEventFilter(eventType);
        options = options || {};
        options.waitingFor = `LeMetaEvent ${JSON.stringify(filter)} (event = ${eventType})`;
        const data = await this._obnizHci.readWait(filter, options);
        const type = data.readUInt8(3);
        const status = data.readUInt8(4);
        const _data = data.slice(5);
        return { type, status, data: _data };
    }
    createLeMetaEventFilter(eventType) {
        return [COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_LE_META_EVENT, -1, eventType];
    }
    async readCmdCompleteEventWait(requestCmd, additionalResultFilter) {
        additionalResultFilter = additionalResultFilter || [];
        let filter = this.createCmdCompleteEventFilter(requestCmd);
        if (additionalResultFilter.length > 0) {
            filter = [
                ...filter,
                -1,
                ...additionalResultFilter,
            ];
        }
        const options = {};
        options.waitingFor = `CmdCompleteEvent ${JSON.stringify(filter)}(cmd = ${requestCmd})`;
        const data = await this._obnizHci.readWait(filter, options);
        const eventType = data.readUInt8(0);
        const subEventType = data.readUInt8(1);
        const ncmd = data.readUInt8(3);
        const cmd = data.readUInt16LE(4);
        const status = data.readUInt8(6);
        const result = data.slice(7);
        return { eventType, subEventType, ncmd, cmd, status, result };
    }
    createCmdCompleteEventFilter(cmd) {
        return [
            COMMANDS.HCI_EVENT_PKT,
            COMMANDS.EVT_CMD_COMPLETE,
            -1,
            -1,
            (cmd >> 0) & 0xff,
            (cmd >> 8) & 0xff,
        ];
    }
    debug(...args) {
        this.debugHandler(`${args[0]}`);
    }
    onHciAclData(data) {
        const flags = data.readUInt16LE(1) >> 12;
        const handle = data.readUInt16LE(1) & 0x0fff;
        if (COMMANDS.ACL_START === flags) {
            const cid = data.readUInt16LE(7);
            const length = data.readUInt16LE(5);
            const pktData = data.slice(9);
            this.debug('\t\tcid = ' + cid);
            if (length === pktData.length) {
                this.debug('\t\thandle = ' + handle);
                this.debug('\t\tdata = ' + pktData.toString('hex'));
                this.emit('aclDataPkt', handle, cid, pktData);
                const key = (cid << 8) + pktData.readUInt8(0);
                if (this._aclStreamObservers[handle] &&
                    this._aclStreamObservers[handle][key] &&
                    this._aclStreamObservers[handle][key].length > 0) {
                    const resolve = this._aclStreamObservers[handle][key].shift();
                    resolve(pktData);
                }
            }
            else {
                this._handleBuffers[handle] = {
                    length,
                    cid,
                    data: pktData,
                };
            }
        }
        else if (COMMANDS.ACL_CONT === flags) {
            if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {
                return;
            }
            this._handleBuffers[handle].data = Buffer.concat([
                this._handleBuffers[handle].data,
                data.slice(5),
            ]);
            if (this._handleBuffers[handle].data.length ===
                this._handleBuffers[handle].length) {
                this.emit('aclDataPkt', handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);
                const key = (this._handleBuffers[handle].cid << 8) +
                    this._handleBuffers[handle].data.readUInt8(0);
                if (this._aclStreamObservers[handle] &&
                    this._aclStreamObservers[handle][key] &&
                    this._aclStreamObservers[handle][key].length > 0) {
                    const resolve = this._aclStreamObservers[handle][key].shift();
                    resolve(this._handleBuffers[handle].data);
                }
                delete this._handleBuffers[handle];
            }
        }
    }
    onHciEventData(data) {
        const subEventType = data.readUInt8(1);
        this.debug('\tsub event type = 0x' + subEventType.toString(16));
        if (subEventType === COMMANDS.EVT_DISCONN_COMPLETE) {
            const handle = data.readUInt16LE(4);
            const reason = data.readUInt8(6);
            this.debug('\t\thandle = ' + handle);
            this.debug('\t\treason = ' + reason);
            delete this._handleAclsInProgress[handle];
            const aclOutQueue = [];
            let discarded = 0;
            for (const i in this._aclOutQueue) {
                if (this._aclOutQueue[i].handle !== handle) {
                    aclOutQueue.push(this._aclOutQueue[i]);
                }
                else {
                    discarded++;
                }
            }
            if (discarded) {
                this.debug('\t\tacls discarded = ' + discarded);
            }
            this._aclOutQueue = aclOutQueue;
            this.pushAclOutQueue();
            this.emit('disconnComplete', handle, reason);
        }
        else if (subEventType === COMMANDS.EVT_ENCRYPT_CHANGE) {
            const status = data.readUInt8(3);
            const handle = data.readUInt16LE(4);
            const encrypt = data.readUInt8(6);
            if (status === 0) {
                this.debug('\t\thandle = ' + handle);
                this.debug('\t\tencrypt = ' + encrypt);
                this.emit('encryptChange', handle, encrypt);
            }
            else {
                this.debug('\t\tencrypt status = ' + status);
                this.debug('\t\thandle = ' + handle);
                this.debug('\t\tencrypt = ' + encrypt);
                this.emit('encryptChange', handle, encrypt);
            }
        }
        else if (subEventType === COMMANDS.EVT_CMD_COMPLETE) {
            // command complete event are handle each command send functions;
        }
        else if (subEventType === COMMANDS.EVT_CMD_STATUS) {
            const status = data.readUInt8(3);
            const cmd = data.readUInt16LE(5);
            this.debug('\t\tstatus = ' + status);
            this.debug('\t\tcmd = ' + cmd);
            this.processCmdStatusEvent(cmd, status);
        }
        else if (subEventType === COMMANDS.EVT_LE_META_EVENT) {
            const leMetaEventType = data.readUInt8(3);
            const leMetaEventStatus = data.readUInt8(4);
            const leMetaEventData = data.slice(5);
            this.debug('\t\tLE meta event type = ' + leMetaEventType);
            this.debug('\t\tLE meta event status = ' + leMetaEventStatus);
            this.debug('\t\tLE meta event data = ' + leMetaEventData.toString('hex'));
            this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);
        }
        else if (subEventType === COMMANDS.EVT_NUMBER_OF_COMPLETED_PACKETS) {
            const handles = data.readUInt8(3);
            for (let i = 0; i < handles; i++) {
                const handle = data.readUInt16LE(4 + i * 4);
                const pkts = data.readUInt16LE(6 + i * 4);
                this.debug('\thandle = ' + handle);
                this.debug('\t\tcompleted = ' + pkts);
                if (this._handleAclsInProgress[handle] === undefined) {
                    this.debug('\t\talready closed');
                    continue;
                }
                if (pkts > this._handleAclsInProgress[handle]) {
                    // Linux kernel may send acl packets by itself, so be ready for underflow
                    this._handleAclsInProgress[handle] = 0;
                }
                else {
                    this._handleAclsInProgress[handle] -= pkts;
                }
                this.debug('\t\tin progress = ' + this._handleAclsInProgress[handle]);
            }
            this.pushAclOutQueue();
        }
    }
    onSocketData(array) {
        const data = Buffer.from(array);
        this.debug('onSocketData: ' + data.toString('hex'));
        // console.log(
        //   'RECV:',
        //   data
        //     .toString('hex')
        //     .match(/.{1,2}/g)!
        //     .join(' ')
        // );
        const eventType = data.readUInt8(0);
        this.debug('\tevent type = 0x' + eventType.toString(16));
        if (COMMANDS.HCI_EVENT_PKT === eventType) {
            this.onHciEventData(data);
        }
        else if (COMMANDS.HCI_ACLDATA_PKT === eventType) {
            this.onHciAclData(data);
        }
    }
    async writeNoParamCommandWait(command, commandName) {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(command, 1);
        // length
        cmd.writeUInt8(0x00, 3);
        const p = this.readCmdCompleteEventWait(command);
        this.debug(`${commandName} - writing: ${cmd.toString('hex')}`);
        this._socket.write(cmd);
        const resetResult = await p;
        return resetResult;
    }
    async writeSingleParamCommandWait(command, param, options, commandName) {
        const cmd = Buffer.alloc(5);
        // header
        cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(command, 1);
        // length
        cmd.writeUInt8(0x01, 3);
        if (!(param in options)) {
            throw new ObnizError_1.ObnizParameterError(`${param}`, `BLE HCI ${commandName} param`);
        }
        const val = options[param];
        cmd.writeUInt8(val, 4);
        const p = this.readCmdCompleteEventWait(command);
        this.debug(`${commandName} - writing: ${cmd.toString('hex')}`);
        this._socket.write(cmd);
        const resetResult = await p;
        return resetResult;
    }
}
Hci.STATUS_MAPPER = hci_status_json_1.default;
exports.default = Hci;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * @ignore
 */
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const smp_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.js"));
/**
 * @ignore
 */
class AclStream extends eventemitter3_1.default {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._hci = hci;
        this._handle = handle;
        this.encypted = false;
        this._smp = new smp_1.default(this, localAddressType, localAddress, remoteAddressType, remoteAddress, this._hci);
    }
    write(cid, data) {
        this._hci.queueAclDataPkt(this._handle, cid, data);
    }
    push(cid, data) {
        if (data) {
            this.emit('data', cid, data);
        }
    }
    end() {
        this.emit('end');
    }
    pushEncrypt(encrypt) {
        this.encrypted = encrypt ? true : false;
        this.emit('encryptChange', this.encrypted);
    }
}
exports.default = AclStream;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 *
 * @ignore
 */
// var debug = require('debug')('bindings');
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @ignore
 */
const debug = () => {
    // do nothing.
};
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const acl_stream_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.js"));
const gap_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.js"));
const gatt_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.js"));
/**
 * @ignore
 */
class BlenoBindings extends eventemitter3_1.default {
    constructor(hciProtocol) {
        super();
        this._state = null;
        this._advertising = false;
        this._hci = hciProtocol;
        this._gap = new gap_1.default(this._hci);
        this._gatt = new gatt_1.default();
        this._gatt.on('mtuChange', this.onMtuChange.bind(this));
        this._hci.on('stateChange', this.onStateChange.bind(this));
        this._hci.on('leConnComplete', this.onLeConnComplete.bind(this));
        this._hci.on('leConnUpdateComplete', this.onLeConnUpdateComplete.bind(this));
        this._hci.on('disconnComplete', this.onDisconnCompleteWait.bind(this));
        this._hci.on('encryptChange', this.onEncryptChange.bind(this));
        this._hci.on('aclDataPkt', this.onAclDataPkt.bind(this));
        this._address = null;
        this._handle = null;
        this._aclStream = null;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this._state = null;
        this._advertising = false;
        this._gap._reset();
        this._gatt._reset();
        this._address = null;
        this._handle = null;
        this._aclStream = null;
    }
    async startAdvertisingWait(name, serviceUuids) {
        this._advertising = true;
        await this._gap.startAdvertisingWait(name, serviceUuids);
    }
    async startAdvertisingIBeaconWait(data) {
        this._advertising = true;
        await this._gap.startAdvertisingIBeaconWait(data);
    }
    async startAdvertisingWithEIRDataWait(advertisementData, scanData) {
        this._advertising = true;
        await this._gap.startAdvertisingWithEIRDataWait(advertisementData, scanData);
    }
    async stopAdvertisingWait() {
        this._advertising = false;
        await this._gap.stopAdvertisingWait();
    }
    setServices(services) {
        this._gatt.setServices(services);
    }
    disconnect() {
        if (this._handle) {
            debug('disconnect by server');
            this._hci.disconnect(this._handle);
        }
    }
    async updateRssiWait() {
        if (this._handle) {
            const rssi = await this._hci.readRssiWait(this._handle);
            return rssi;
        }
        return null;
    }
    onStateChange(state) {
        if (this._state === state) {
            return;
        }
        this._state = state;
        if (state === 'unauthorized') {
            console.log('bleno warning: adapter state unauthorized, please run as root or with sudo');
            console.log('               or see README for information on running without root/sudo:');
            console.log('               https://github.com/sandeepmistry/bleno#running-on-linux');
        }
        else if (state === 'unsupported') {
            console.log('bleno warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).');
            console.log('               Try to run with environment variable:');
            console.log('               [sudo] BLENO_HCI_DEVICE_ID=x node ...');
        }
        this.emit('stateChange', state);
    }
    onLeConnComplete(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {
        if (role !== 1) {
            // not slave, ignore
            return;
        }
        this._address = address;
        this._handle = handle;
        this._aclStream = new acl_stream_1.default(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);
        this._gatt.setAclStream(this._aclStream);
        this.emit('accept', address);
    }
    onLeConnUpdateComplete(handle, interval, latency, supervisionTimeout) {
        // no-op
    }
    async onDisconnCompleteWait(handle, reason) {
        if (this._handle !== handle) {
            return; // not peripheral
        }
        if (this._aclStream) {
            this._aclStream.end();
            this._aclStream = null;
        }
        const address = this._address;
        this._address = null;
        this._handle = null;
        if (address) {
            this.emit('disconnect', address, reason); // TODO: use reason
        }
        if (this._advertising) {
            await this._gap.restartAdvertisingWait();
        }
    }
    onEncryptChange(handle, encrypt) {
        if (this._handle === handle && this._aclStream) {
            this._aclStream.pushEncrypt(encrypt);
        }
    }
    onMtuChange(mtu) {
        this.emit('mtuChange', mtu);
    }
    onAclDataPkt(handle, cid, data) {
        if (this._handle === handle && this._aclStream) {
            this._aclStream.push(cid, data);
        }
    }
}
exports.default = BlenoBindings;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 *
 * @ignore
 */
// var debug = require('debug')('gap');
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
/**
 * @ignore
 */
const debug = () => {
    // do nothing.
};
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const hci_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js"));
/**
 * @ignore
 */
class Gap extends eventemitter3_1.default {
    constructor(hci) {
        super();
        this._hci = hci;
        this._advertiseState = null;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this._advertiseState = null;
    }
    async startAdvertisingWait(name, serviceUuids) {
        debug('startAdvertising: name = ' +
            name +
            ', serviceUuids = ' +
            JSON.stringify(serviceUuids, null, 2));
        let advertisementDataLength = 3;
        let scanDataLength = 0;
        const serviceUuids16bit = [];
        const serviceUuids128bit = [];
        let i = 0;
        if (name && name.length) {
            scanDataLength += 2 + name.length;
        }
        if (serviceUuids && serviceUuids.length) {
            for (i = 0; i < serviceUuids.length; i++) {
                const serviceUuid = bleHelper_1.default.hex2reversedBuffer(serviceUuids[i]);
                if (serviceUuid.length === 2) {
                    serviceUuids16bit.push(serviceUuid);
                }
                else if (serviceUuid.length === 16) {
                    serviceUuids128bit.push(serviceUuid);
                }
            }
        }
        if (serviceUuids16bit.length) {
            advertisementDataLength += 2 + 2 * serviceUuids16bit.length;
        }
        if (serviceUuids128bit.length) {
            advertisementDataLength += 2 + 16 * serviceUuids128bit.length;
        }
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(scanDataLength);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        let advertisementDataOffset = 3;
        if (serviceUuids16bit.length) {
            advertisementData.writeUInt8(1 + 2 * serviceUuids16bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x03, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids16bit.length; i++) {
                serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids16bit[i].length;
            }
        }
        if (serviceUuids128bit.length) {
            advertisementData.writeUInt8(1 + 16 * serviceUuids128bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x06, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids128bit.length; i++) {
                serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids128bit[i].length;
            }
        }
        // name
        if (name && name.length) {
            const nameBuffer = Buffer.alloc(name);
            scanData.writeUInt8(1 + nameBuffer.length, 0);
            scanData.writeUInt8(0x08, 1);
            nameBuffer.copy(scanData, 2);
        }
        await this.startAdvertisingWithEIRDataWait(advertisementData, scanData);
    }
    async startAdvertisingIBeaconWait(data) {
        debug('startAdvertisingIBeacon: data = ' + data.toString('hex'));
        const dataLength = data.length;
        const manufacturerDataLength = 4 + dataLength;
        const advertisementDataLength = 5 + manufacturerDataLength;
        // let scanDataLength = 0;
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(0);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        advertisementData.writeUInt8(manufacturerDataLength + 1, 3);
        advertisementData.writeUInt8(0xff, 4);
        advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)
        advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon
        advertisementData.writeUInt8(dataLength, 8);
        data.copy(advertisementData, 9);
        await this.startAdvertisingWithEIRDataWait(advertisementData, scanData);
    }
    async startAdvertisingWithEIRDataWait(advertisementData, scanData) {
        advertisementData = advertisementData || Buffer.alloc(0);
        scanData = scanData || Buffer.alloc(0);
        debug('startAdvertisingWithEIRData: advertisement data = ' +
            advertisementData.toString('hex') +
            ', scan data = ' +
            scanData.toString('hex'));
        if (advertisementData.length > 31) {
            throw new Error('Advertisement data is over maximum limit of 31 bytes');
        }
        else if (scanData.length > 31) {
            throw new Error('Scan data is over maximum limit of 31 bytes');
        }
        this._advertiseState = 'starting';
        const p1 = this._hci.setScanResponseDataWait(scanData);
        const p2 = this._hci.setAdvertisingDataWait(advertisementData);
        await Promise.all([p1, p2]);
        const p3 = this._hci.setAdvertiseEnableWait(true);
        const p4 = this._hci.setScanResponseDataWait(scanData);
        const p5 = this._hci.setAdvertisingDataWait(advertisementData);
        await Promise.all([p3, p4, p5]);
        const status = await p3;
        if (this._advertiseState === 'starting') {
            this._advertiseState = 'started';
            if (status) {
                throw new Error(hci_1.default.STATUS_MAPPER[status] || 'Unknown (' + status + ')');
            }
        }
        else if (this._advertiseState === 'stopping') {
            this._advertiseState = 'stopped';
        }
    }
    async restartAdvertisingWait() {
        this._advertiseState = 'restarting';
        await this._hci.setAdvertiseEnableWait(true);
    }
    async stopAdvertisingWait() {
        this._advertiseState = 'stopping';
        await this._hci.setAdvertiseEnableWait(false);
    }
}
exports.default = Gap;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * @ignore
 */
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const att_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/att.js");
const gatt_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/gatt.js");
// var debug = require('debug')('gatt');
const debug = () => {
    // do nothing.
};
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
/* eslint-disable no-unused-vars */
/**
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var GATT;
(function (GATT) {
    GATT.PRIM_SVC_UUID = 0x2800;
    GATT.INCLUDE_UUID = 0x2802;
    GATT.CHARAC_UUID = 0x2803;
    GATT.CLIENT_CHARAC_CFG_UUID = 0x2902;
    GATT.SERVER_CHARAC_CFG_UUID = 0x2903;
})(GATT || (GATT = {}));
/**
 * @ignore
 */
class GattPeripheral extends eventemitter3_1.default {
    constructor() {
        super();
        this.maxMtu = 256;
        this._mtu = 23;
        this._preparedWriteRequest = null;
        this._handles = [];
        this._reset();
        this._gattCommon = new gatt_1.GattCommon();
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.maxMtu = 256;
        this._mtu = 23;
        this._preparedWriteRequest = null;
        this.setServices([]);
        this.setAclStream(undefined);
    }
    setServices(services) {
        // var deviceName = process.env.BLENO_DEVICE_NAME || os.hostname();
        // base services and characteristics
        const allServices = [].concat(services);
        this._handles = [];
        let handle = 0;
        for (let i = 0; i < allServices.length; i++) {
            const service = allServices[i];
            handle++;
            const serviceHandle = handle;
            const serviceHandleData = {
                type: 'service',
                uuid: service.uuid,
                attribute: service,
                startHandle: serviceHandle,
            };
            for (let j = 0; j < service.characteristics.length; j++) {
                const characteristic = service.characteristics[j];
                let properties = 0;
                let secure = 0;
                if (characteristic.properties.indexOf('read') !== -1) {
                    properties |= 0x02;
                    if (characteristic.secure.indexOf('read') !== -1) {
                        secure |= 0x02;
                    }
                }
                if (characteristic.properties.indexOf('writeWithoutResponse') !== -1) {
                    properties |= 0x04;
                    if (characteristic.secure.indexOf('writeWithoutResponse') !== -1) {
                        secure |= 0x04;
                    }
                }
                if (characteristic.properties.indexOf('write') !== -1) {
                    properties |= 0x08;
                    if (characteristic.secure.indexOf('write') !== -1) {
                        secure |= 0x08;
                    }
                }
                if (characteristic.properties.indexOf('notify') !== -1) {
                    properties |= 0x10;
                    if (characteristic.secure.indexOf('notify') !== -1) {
                        secure |= 0x10;
                    }
                }
                if (characteristic.properties.indexOf('indicate') !== -1) {
                    properties |= 0x20;
                    if (characteristic.secure.indexOf('indicate') !== -1) {
                        secure |= 0x20;
                    }
                }
                handle++;
                const characteristicHandle = handle;
                handle++;
                const characteristicValueHandle = handle;
                this._handles[characteristicHandle] = {
                    type: 'characteristic',
                    uuid: characteristic.uuid,
                    properties,
                    secure,
                    attribute: characteristic,
                    startHandle: characteristicHandle,
                    valueHandle: characteristicValueHandle,
                };
                this._handles[characteristicValueHandle] = {
                    type: 'characteristicValue',
                    handle: characteristicValueHandle,
                    value: characteristic.value,
                };
                const hasCCCD = characteristic.descriptors.find((e) => e.uuid === '2902');
                if (hasCCCD || properties & 0x30) {
                    // notify or indicate
                    // add client characteristic configuration descriptor
                    handle++;
                    const clientCharacteristicConfigurationDescriptorHandle = handle;
                    this._handles[clientCharacteristicConfigurationDescriptorHandle] = {
                        type: 'descriptor',
                        handle: clientCharacteristicConfigurationDescriptorHandle,
                        uuid: '2902',
                        attribute: characteristic,
                        properties: 0x02 | 0x04 | 0x08,
                        secure: secure & 0x10 ? 0x02 | 0x04 | 0x08 : 0,
                        value: Buffer.from([0x00, 0x00]),
                    };
                }
                for (let k = 0; k < characteristic.descriptors.length; k++) {
                    const descriptor = characteristic.descriptors[k];
                    if (descriptor.uuid === '2902') {
                        continue;
                    }
                    handle++;
                    const descriptorHandle = handle;
                    this._handles[descriptorHandle] = {
                        type: 'descriptor',
                        handle: descriptorHandle,
                        uuid: descriptor.uuid,
                        attribute: descriptor,
                        properties: 0x02,
                        secure: 0x00,
                        value: descriptor.value,
                    };
                }
            }
            this._handles[serviceHandle] = Object.assign(Object.assign({}, serviceHandleData), { endHandle: handle });
        }
        // const debugHandles = [];
        // for (let i = 0; i < this._handles.length; i++) {
        //   const anHandle = this._handles[i];
        //   debugHandles[i] = {};
        //   for (let key in anHandle) {
        //     if (Buffer.isBuffer(anHandle[key])) {
        //       debugHandles[i][key] = anHandle[key] ? "Buffer('" + anHandle[key].toString("hex") + "', 'hex')" : null;
        //     } else if (key !== "attribute") {
        //       debugHandles[i][key] = anHandle[key];
        //     }
        //   }
        // }
        // debug("handles = " + JSON.stringify(debugHandles, null, 2));
    }
    setAclStream(aclStream) {
        this._mtu = 23;
        this._preparedWriteRequest = null;
        if (this._aclStream) {
            this._aclStream.end();
            this._aclStream.removeListener('data', this.onAclStreamDataBinded);
            this._aclStream.removeListener('end', this.onAclStreamEndBinded);
        }
        this._aclStream = aclStream;
        if (this._aclStream) {
            this._aclStream.on('data', this.onAclStreamDataBinded);
            this._aclStream.on('end', this.onAclStreamEndBinded);
        }
    }
    onAclStreamData(cid, data) {
        if (cid !== att_1.ATT.CID) {
            return;
        }
        this.handleRequest(data);
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
        for (let i = 0; i < this._handles.length; i++) {
            const targetHandle = this._handles[i];
            if (targetHandle && targetHandle.type === 'descriptor') {
                if (targetHandle.uuid === '2902' &&
                    targetHandle.value.readUInt16LE(0) !== 0) {
                    targetHandle.value = Buffer.from([0x00, 0x00]);
                    if (targetHandle.attribute && targetHandle.attribute.emit) {
                        targetHandle.attribute.emit('unsubscribe');
                    }
                }
            }
        }
    }
    send(data) {
        debug('send: ' + data.toString('hex'));
        if (!this._aclStream) {
            throw new Error('_aclStream is not found');
        }
        this._aclStream.write(att_1.ATT.CID, data);
    }
    handleRequest(request) {
        debug('handing request: ' + request.toString('hex'));
        const requestType = request[0];
        let response = null;
        switch (requestType) {
            case att_1.ATT.OP_MTU_REQ:
                response = this.handleMtuRequest(request);
                break;
            case att_1.ATT.OP_FIND_INFO_REQ:
                response = this.handleFindInfoRequest(request);
                break;
            case att_1.ATT.OP_FIND_BY_TYPE_REQ:
                response = this.handleFindByTypeRequest(request);
                break;
            case att_1.ATT.OP_READ_BY_TYPE_REQ:
                response = this.handleReadByTypeRequest(request);
                break;
            case att_1.ATT.OP_READ_REQ:
            case att_1.ATT.OP_READ_BLOB_REQ:
                response = this.handleReadOrReadBlobRequest(request);
                break;
            case att_1.ATT.OP_READ_BY_GROUP_REQ:
                response = this.handleReadByGroupRequest(request);
                break;
            case att_1.ATT.OP_WRITE_REQ:
            case att_1.ATT.OP_WRITE_CMD:
                response = this.handleWriteRequestOrCommand(request);
                break;
            case att_1.ATT.OP_PREPARE_WRITE_REQ:
                response = this.handlePrepareWriteRequest(request);
                break;
            case att_1.ATT.OP_EXECUTE_WRITE_REQ:
                response = this.handleExecuteWriteRequest(request);
                break;
            case att_1.ATT.OP_HANDLE_CNF:
                response = this.handleConfirmation(request);
                break;
            default:
            case att_1.ATT.OP_READ_MULTI_REQ:
            case att_1.ATT.OP_SIGNED_WRITE_CMD:
                response = this._gattCommon.errorResponse(requestType, 0x0000, att_1.ATT.ECODE_REQ_NOT_SUPP);
                break;
        }
        if (response) {
            debug('response: ' + response.toString('hex'));
            this.send(response);
        }
    }
    handleMtuRequest(request) {
        let mtu = request.readUInt16LE(1);
        if (mtu < 23) {
            mtu = 23;
        }
        else if (mtu > this.maxMtu) {
            mtu = this.maxMtu;
        }
        this._mtu = mtu;
        this.emit('mtuChange', this._mtu);
        const response = Buffer.alloc(3);
        response.writeUInt8(att_1.ATT.OP_MTU_RESP, 0);
        response.writeUInt16LE(mtu, 1);
        return response;
    }
    handleFindInfoRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const infos = [];
        let uuid = null;
        for (let i = startHandle; i <= endHandle; i++) {
            const handle = this._handles[i];
            if (!handle) {
                break;
            }
            uuid = null;
            if ('service' === handle.type) {
                uuid = '2800';
            }
            else if ('includedService' === handle.type) {
                uuid = '2802';
            }
            else if ('characteristic' === handle.type) {
                uuid = '2803';
            }
            else if ('characteristicValue' === handle.type) {
                const targetHandle = this._handles[i - 1];
                if (!targetHandle || targetHandle.type !== 'characteristic') {
                    throw new ObnizError_1.ObnizBleGattHandleError('cannot find target handle');
                }
                uuid = targetHandle.uuid;
            }
            else if ('descriptor' === handle.type) {
                uuid = handle.uuid;
            }
            if (uuid) {
                infos.push({
                    handle: i,
                    uuid,
                });
            }
        }
        if (infos.length) {
            const uuidSize = infos[0].uuid.length / 2;
            let numInfo = 1;
            for (let i = 1; i < infos.length; i++) {
                if (infos[0].uuid.length !== infos[i].uuid.length) {
                    break;
                }
                numInfo++;
            }
            const lengthPerInfo = uuidSize === 2 ? 4 : 18;
            const maxInfo = Math.floor((this._mtu - 2) / lengthPerInfo);
            numInfo = Math.min(numInfo, maxInfo);
            response = Buffer.alloc(2 + numInfo * lengthPerInfo);
            response[0] = att_1.ATT.OP_FIND_INFO_RESP;
            response[1] = uuidSize === 2 ? 0x01 : 0x2;
            for (let i = 0; i < numInfo; i++) {
                const info = infos[i];
                response.writeUInt16LE(info.handle, 2 + i * lengthPerInfo);
                uuid = bleHelper_1.default.hex2reversedBuffer(info.uuid);
                for (let j = 0; j < uuid.length; j++) {
                    response[2 + i * lengthPerInfo + 2 + j] = uuid[j];
                }
            }
        }
        else {
            response = this._gattCommon.errorResponse(att_1.ATT.OP_FIND_INFO_REQ, startHandle, att_1.ATT.ECODE_ATTR_NOT_FOUND);
        }
        return response;
    }
    handleFindByTypeRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = bleHelper_1.default.buffer2reversedHex(request.slice(5, 7));
        const value = bleHelper_1.default.buffer2reversedHex(request.slice(7));
        const handles = [];
        let handle;
        for (let i = startHandle; i <= endHandle; i++) {
            handle = this._handles[i];
            if (!handle) {
                break;
            }
            if ('2800' === uuid &&
                handle.type === 'service' &&
                handle.uuid === value) {
                handles.push({
                    start: handle.startHandle,
                    end: handle.endHandle,
                });
            }
        }
        if (handles.length) {
            const lengthPerHandle = 4;
            let numHandles = handles.length;
            const maxHandles = Math.floor((this._mtu - 1) / lengthPerHandle);
            numHandles = Math.min(numHandles, maxHandles);
            response = Buffer.alloc(1 + numHandles * lengthPerHandle);
            response[0] = att_1.ATT.OP_FIND_BY_TYPE_RESP;
            for (let i = 0; i < numHandles; i++) {
                handle = handles[i];
                response.writeUInt16LE(handle.start, 1 + i * lengthPerHandle);
                response.writeUInt16LE(handle.end, 1 + i * lengthPerHandle + 2);
            }
        }
        else {
            response = this._gattCommon.errorResponse(att_1.ATT.OP_FIND_BY_TYPE_REQ, startHandle, att_1.ATT.ECODE_ATTR_NOT_FOUND);
        }
        return response;
    }
    handleReadByGroupRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = bleHelper_1.default.buffer2reversedHex(request.slice(5));
        debug('read by group: startHandle = 0x' +
            startHandle.toString(16) +
            ', endHandle = 0x' +
            endHandle.toString(16) +
            ', uuid = 0x' +
            uuid);
        if ('2800' === uuid || '2802' === uuid) {
            const services = [];
            const type = '2800' === uuid ? 'service' : 'includedService';
            for (let i = startHandle; i <= endHandle; i++) {
                const handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === type) {
                    services.push(handle);
                }
            }
            if (services.length) {
                const uuidSize = services[0].uuid.length / 2;
                let numServices = 1;
                for (let i = 1; i < services.length; i++) {
                    if (services[0].uuid.length !== services[i].uuid.length) {
                        break;
                    }
                    numServices++;
                }
                const lengthPerService = uuidSize === 2 ? 6 : 20;
                const maxServices = Math.floor((this._mtu - 2) / lengthPerService);
                numServices = Math.min(numServices, maxServices);
                response = Buffer.alloc(2 + numServices * lengthPerService);
                response[0] = att_1.ATT.OP_READ_BY_GROUP_RESP;
                response[1] = lengthPerService;
                for (let i = 0; i < numServices; i++) {
                    const service = services[i];
                    response.writeUInt16LE(service.startHandle, 2 + i * lengthPerService);
                    response.writeUInt16LE(service.endHandle, 2 + i * lengthPerService + 2);
                    const serviceUuid = bleHelper_1.default.hex2reversedBuffer(service.uuid);
                    for (let j = 0; j < serviceUuid.length; j++) {
                        response[2 + i * lengthPerService + 4 + j] = serviceUuid[j];
                    }
                }
            }
            else {
                response = this._gattCommon.errorResponse(att_1.ATT.OP_READ_BY_GROUP_REQ, startHandle, att_1.ATT.ECODE_ATTR_NOT_FOUND);
            }
        }
        else {
            response = this._gattCommon.errorResponse(att_1.ATT.OP_READ_BY_GROUP_REQ, startHandle, att_1.ATT.ECODE_UNSUPP_GRP_TYPE);
        }
        return response;
    }
    handleReadByTypeRequest(request) {
        let response = null;
        const requestType = request[0];
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = bleHelper_1.default.buffer2reversedHex(request.slice(5));
        debug('read by type: startHandle = 0x' +
            startHandle.toString(16) +
            ', endHandle = 0x' +
            endHandle.toString(16) +
            ', uuid = 0x' +
            uuid);
        if ('2803' === uuid) {
            const characteristics = [];
            for (let i = startHandle; i <= endHandle; i++) {
                const handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === 'characteristic') {
                    characteristics.push(handle);
                }
            }
            if (characteristics.length) {
                const uuidSize = characteristics[0].uuid.length / 2;
                let numCharacteristics = 1;
                for (let i = 1; i < characteristics.length; i++) {
                    if (characteristics[0].uuid.length !== characteristics[i].uuid.length) {
                        break;
                    }
                    numCharacteristics++;
                }
                const lengthPerCharacteristic = uuidSize === 2 ? 7 : 21;
                const maxCharacteristics = Math.floor((this._mtu - 2) / lengthPerCharacteristic);
                numCharacteristics = Math.min(numCharacteristics, maxCharacteristics);
                response = Buffer.alloc(2 + numCharacteristics * lengthPerCharacteristic);
                response[0] = att_1.ATT.OP_READ_BY_TYPE_RESP;
                response[1] = lengthPerCharacteristic;
                for (let i = 0; i < numCharacteristics; i++) {
                    const characteristic = characteristics[i];
                    response.writeUInt16LE(characteristic.startHandle, 2 + i * lengthPerCharacteristic);
                    response.writeUInt8(characteristic.properties, 2 + i * lengthPerCharacteristic + 2);
                    response.writeUInt16LE(characteristic.valueHandle, 2 + i * lengthPerCharacteristic + 3);
                    const characteristicUuid = bleHelper_1.default.hex2reversedBuffer(characteristic.uuid);
                    for (let j = 0; j < characteristicUuid.length; j++) {
                        response[2 + i * lengthPerCharacteristic + 5 + j] =
                            characteristicUuid[j];
                    }
                }
            }
            else {
                response = this._gattCommon.errorResponse(att_1.ATT.OP_READ_BY_TYPE_REQ, startHandle, att_1.ATT.ECODE_ATTR_NOT_FOUND);
            }
        }
        else {
            let handleAttribute = null;
            let valueHandle = null;
            let secure = false;
            for (let i = startHandle; i <= endHandle; i++) {
                const handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === 'characteristic' && handle.uuid === uuid) {
                    handleAttribute = handle.attribute;
                    valueHandle = handle.valueHandle;
                    secure = (handle.secure & 0x02) !== 0;
                    break;
                }
                else if (handle.type === 'descriptor' && handle.uuid === uuid) {
                    valueHandle = i;
                    secure = (handle.secure & 0x02) !== 0;
                    break;
                }
            }
            if (secure && !(this._aclStream && this._aclStream.encrypted)) {
                response = this._gattCommon.errorResponse(att_1.ATT.OP_READ_BY_TYPE_REQ, startHandle, att_1.ATT.ECODE_AUTHENTICATION);
            }
            else if (valueHandle) {
                const callback = ((_valueHandle) => {
                    return (result, _data) => {
                        let callbackResponse = null;
                        if (att_1.ATT.ECODE_SUCCESS === result) {
                            const dataLength = Math.min(_data.length, this._mtu - 4);
                            callbackResponse = Buffer.alloc(4 + dataLength);
                            callbackResponse[0] = att_1.ATT.OP_READ_BY_TYPE_RESP;
                            callbackResponse[1] = dataLength + 2;
                            callbackResponse.writeUInt16LE(_valueHandle, 2);
                            for (let i = 0; i < dataLength; i++) {
                                callbackResponse[4 + i] = _data[i];
                            }
                        }
                        else {
                            callbackResponse = this._gattCommon.errorResponse(requestType, _valueHandle, result);
                        }
                        debug('read by type response: ' + callbackResponse.toString('hex'));
                        this.send(callbackResponse);
                    };
                })(valueHandle);
                const targetHandle = this._handles[valueHandle];
                if (!targetHandle || targetHandle.type !== 'characteristicValue') {
                    throw new ObnizError_1.ObnizBleGattHandleError('unknown characteristicValue handle');
                }
                const data = targetHandle.value;
                if (data) {
                    callback(att_1.ATT.ECODE_SUCCESS, data);
                }
                else if (handleAttribute) {
                    handleAttribute.emit('readRequest', 0, callback);
                }
                else {
                    callback(att_1.ATT.ECODE_UNLIKELY);
                }
            }
            else {
                response = this._gattCommon.errorResponse(att_1.ATT.OP_READ_BY_TYPE_REQ, startHandle, att_1.ATT.ECODE_ATTR_NOT_FOUND);
            }
        }
        return response;
    }
    handleReadOrReadBlobRequest(request) {
        let response = null;
        const requestType = request[0];
        const valueHandle = request.readUInt16LE(1);
        const offset = requestType === att_1.ATT.OP_READ_BLOB_REQ ? request.readUInt16LE(3) : 0;
        const handle = this._handles[valueHandle];
        if (handle) {
            let result = null;
            let data = null;
            const callback = ((_requestType, _valueHandle) => {
                return (_result, _data) => {
                    let callbackResponse = null;
                    if (att_1.ATT.ECODE_SUCCESS === _result) {
                        const dataLength = Math.min(_data.length, this._mtu - 1);
                        callbackResponse = Buffer.alloc(1 + dataLength);
                        callbackResponse[0] =
                            _requestType === att_1.ATT.OP_READ_BLOB_REQ
                                ? att_1.ATT.OP_READ_BLOB_RESP
                                : att_1.ATT.OP_READ_RESP;
                        for (let i = 0; i < dataLength; i++) {
                            callbackResponse[1 + i] = _data[i];
                        }
                    }
                    else {
                        callbackResponse = this._gattCommon.errorResponse(_requestType, _valueHandle, _result);
                    }
                    debug('read response: ' + callbackResponse.toString('hex'));
                    this.send(callbackResponse);
                };
            })(requestType, valueHandle);
            if (handle.type === 'service' || handle.type === 'includedService') {
                result = att_1.ATT.ECODE_SUCCESS;
                data = bleHelper_1.default.hex2reversedBuffer(handle.uuid);
            }
            else if (handle.type === 'characteristic') {
                const uuid = bleHelper_1.default.hex2reversedBuffer(handle.uuid);
                result = att_1.ATT.ECODE_SUCCESS;
                data = Buffer.alloc(3 + uuid.length);
                data.writeUInt8(handle.properties, 0);
                data.writeUInt16LE(handle.valueHandle, 1);
                for (let i = 0; i < uuid.length; i++) {
                    data[i + 3] = uuid[i];
                }
            }
            else if (handle.type === 'characteristicValue' ||
                handle.type === 'descriptor') {
                const targetHandle = handle.type === 'descriptor'
                    ? handle
                    : this._handles[valueHandle - 1];
                const handleProperties = targetHandle.properties;
                const handleSecure = targetHandle.secure;
                const handleAttribute = targetHandle.attribute;
                if (handleProperties & 0x02) {
                    if (handleSecure & 0x02 &&
                        !(this._aclStream && this._aclStream.encrypted)) {
                        result = att_1.ATT.ECODE_AUTHENTICATION;
                    }
                    else {
                        data = handle.value;
                        if (data) {
                            result = att_1.ATT.ECODE_SUCCESS;
                        }
                        else {
                            handleAttribute.emit('readRequest', offset, callback);
                        }
                    }
                }
                else {
                    result = att_1.ATT.ECODE_READ_NOT_PERM; // non-readable
                }
            }
            if (data && typeof data === 'string') {
                data = Buffer.from(data);
            }
            if (result === att_1.ATT.ECODE_SUCCESS && data && offset) {
                if (data.length < offset) {
                    result = att_1.ATT.ECODE_INVALID_OFFSET;
                    data = null;
                }
                else {
                    data = data.slice(offset);
                }
            }
            if (result !== null) {
                callback(result, data);
            }
        }
        else {
            response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handleWriteRequestOrCommand(request) {
        let response = null;
        const requestType = request[0];
        const withoutResponse = requestType === att_1.ATT.OP_WRITE_CMD;
        const valueHandle = request.readUInt16LE(1);
        const data = request.slice(3);
        const offset = 0;
        let handle = this._handles[valueHandle];
        if (handle) {
            if (handle.type === 'characteristicValue') {
                handle = this._handles[valueHandle - 1];
            }
            if (handle.type !== 'characteristic' && handle.type !== 'descriptor') {
                throw new ObnizError_1.ObnizBleGattHandleError('Request handle type is not valid');
            }
            const handleProperties = handle.properties;
            const handleSecure = handle.secure;
            if (handleProperties &&
                (withoutResponse ? handleProperties & 0x04 : handleProperties & 0x08)) {
                const callback = ((_requestType, _valueHandle, _withoutResponse) => {
                    return (result) => {
                        if (!_withoutResponse) {
                            let callbackResponse = null;
                            if (att_1.ATT.ECODE_SUCCESS === result) {
                                callbackResponse = Buffer.from([att_1.ATT.OP_WRITE_RESP]);
                            }
                            else {
                                callbackResponse = this._gattCommon.errorResponse(_requestType, _valueHandle, result);
                            }
                            debug('write response: ' + callbackResponse.toString('hex'));
                            this.send(callbackResponse);
                        }
                    };
                })(requestType, valueHandle, withoutResponse);
                if (handleSecure & (withoutResponse ? 0x04 : 0x08) &&
                    !(this._aclStream && this._aclStream.encrypted)) {
                    response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_AUTHENTICATION);
                }
                else if (handle.type === 'descriptor' && handle.uuid === '2902') {
                    let result = null;
                    if (data.length !== 2) {
                        result = att_1.ATT.ECODE_INVAL_ATTR_VALUE_LEN;
                    }
                    else {
                        const value = data.readUInt16LE(0);
                        const handleAttribute = handle.attribute;
                        handle.value = data;
                        if (value & 0x0003) {
                            const updateValueCallback = ((_valueHandle, _attribute) => {
                                return (_data) => {
                                    const dataLength = Math.min(_data.length, this._mtu - 3);
                                    const useNotify = _attribute.properties.indexOf('notify') !== -1;
                                    const useIndicate = _attribute.properties.indexOf('indicate') !== -1;
                                    let i;
                                    if (useNotify) {
                                        const notifyMessage = Buffer.alloc(3 + dataLength);
                                        notifyMessage.writeUInt8(att_1.ATT.OP_HANDLE_NOTIFY, 0);
                                        notifyMessage.writeUInt16LE(_valueHandle, 1);
                                        for (i = 0; i < dataLength; i++) {
                                            notifyMessage[3 + i] = _data[i];
                                        }
                                        debug('notify message: ' + notifyMessage.toString('hex'));
                                        this.send(notifyMessage);
                                        _attribute.emit('notify');
                                    }
                                    else if (useIndicate) {
                                        const indicateMessage = Buffer.alloc(3 + dataLength);
                                        indicateMessage.writeUInt8(att_1.ATT.OP_HANDLE_IND, 0);
                                        indicateMessage.writeUInt16LE(_valueHandle, 1);
                                        for (i = 0; i < dataLength; i++) {
                                            indicateMessage[3 + i] = _data[i];
                                        }
                                        this._lastIndicatedAttribute = _attribute;
                                        debug('indicate message: ' + indicateMessage.toString('hex'));
                                        this.send(indicateMessage);
                                    }
                                };
                            })(valueHandle - 1, handleAttribute);
                            if (handleAttribute.emit) {
                                handleAttribute.emit('subscribe', this._mtu - 3, updateValueCallback);
                            }
                        }
                        else {
                            handleAttribute.emit('unsubscribe');
                        }
                        result = att_1.ATT.ECODE_SUCCESS;
                    }
                    callback(result);
                }
                else {
                    handle.attribute.emit('writeRequest', data, offset, withoutResponse, callback);
                }
            }
            else {
                response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_WRITE_NOT_PERM);
            }
        }
        else {
            response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handlePrepareWriteRequest(request) {
        let response = null;
        const requestType = request[0];
        const valueHandle = request.readUInt16LE(1);
        const offset = request.readUInt16LE(3);
        const data = request.slice(5);
        let handle = this._handles[valueHandle];
        if (handle) {
            if (handle.type === 'characteristicValue') {
                handle = this._handles[valueHandle - 1];
                const handleProperties = handle.properties;
                const handleSecure = handle.secure;
                if (handleProperties && handleProperties & 0x08) {
                    if (handleSecure & 0x08 &&
                        !(this._aclStream && this._aclStream.encrypted)) {
                        response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_AUTHENTICATION);
                    }
                    else if (this._preparedWriteRequest) {
                        if (this._preparedWriteRequest.handle !== handle) {
                            response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_UNLIKELY);
                        }
                        else if (offset ===
                            this._preparedWriteRequest.offset +
                                this._preparedWriteRequest.data.length) {
                            this._preparedWriteRequest.data = Buffer.concat([
                                this._preparedWriteRequest.data,
                                data,
                            ]);
                            response = Buffer.alloc(request.length);
                            request.copy(response);
                            response[0] = att_1.ATT.OP_PREPARE_WRITE_RESP;
                        }
                        else {
                            response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_INVALID_OFFSET);
                        }
                    }
                    else {
                        this._preparedWriteRequest = {
                            handle,
                            valueHandle,
                            offset,
                            data,
                        };
                        response = Buffer.alloc(request.length);
                        request.copy(response);
                        response[0] = att_1.ATT.OP_PREPARE_WRITE_RESP;
                    }
                }
                else {
                    response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_WRITE_NOT_PERM);
                }
            }
            else {
                response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_ATTR_NOT_LONG);
            }
        }
        else {
            response = this._gattCommon.errorResponse(requestType, valueHandle, att_1.ATT.ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handleExecuteWriteRequest(request) {
        let response = null;
        const requestType = request[0];
        const flag = request[1];
        if (this._preparedWriteRequest) {
            if (flag === 0x00) {
                response = Buffer.from([att_1.ATT.OP_EXECUTE_WRITE_RESP]);
            }
            else if (flag === 0x01) {
                const callback = ((_requestType, _valueHandle) => {
                    return (result) => {
                        let callbackResponse = null;
                        if (att_1.ATT.ECODE_SUCCESS === result) {
                            callbackResponse = Buffer.from([att_1.ATT.OP_EXECUTE_WRITE_RESP]);
                        }
                        else {
                            callbackResponse = this._gattCommon.errorResponse(_requestType, _valueHandle, result);
                        }
                        debug('execute write response: ' + callbackResponse.toString('hex'));
                        this.send(callbackResponse);
                    };
                })(requestType, this._preparedWriteRequest.valueHandle);
                this._preparedWriteRequest.handle.attribute.emit('writeRequest', this._preparedWriteRequest.data, this._preparedWriteRequest.offset, false, callback);
            }
            else {
                response = this._gattCommon.errorResponse(requestType, 0x0000, att_1.ATT.ECODE_UNLIKELY);
            }
            this._preparedWriteRequest = null;
        }
        else {
            response = this._gattCommon.errorResponse(requestType, 0x0000, att_1.ATT.ECODE_UNLIKELY);
        }
        return response;
    }
    handleConfirmation(request) {
        if (this._lastIndicatedAttribute) {
            if (this._lastIndicatedAttribute.emit) {
                this._lastIndicatedAttribute.emit('indicate');
            }
            this._lastIndicatedAttribute = null;
        }
    }
}
exports.default = GattPeripheral;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @ignore
 */
const debug = () => {
    // do nothing.
};
/**
 * @ignore
 */
const LTK_INFO_SIZE = 36;
/**
 * @ignore
 */
const MGMT_OP_LOAD_LONG_TERM_KEYS = 0x0013;
/**
 * @ignore
 */
class Mgmt {
    constructor(hciProtocol) {
        this._ltkInfos = [];
        this._hci = hciProtocol;
    }
    nSocketData(data) {
        debug('on data ->' + data.toString('hex'));
    }
    nSocketError(error) {
        debug('on error ->' + error.message);
    }
    ddLongTermKey(address, addressType, authenticated, master, ediv, rand, key) {
        const ltkInfo = Buffer.alloc(LTK_INFO_SIZE);
        address.copy(ltkInfo, 0);
        ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one
        ltkInfo.writeUInt8(authenticated, 7);
        ltkInfo.writeUInt8(master, 8);
        ltkInfo.writeUInt8(key.length, 9);
        ediv.copy(ltkInfo, 10);
        rand.copy(ltkInfo, 12);
        key.copy(ltkInfo, 20);
        this._ltkInfos.push(ltkInfo);
        this.loadLongTermKeys();
    }
    learLongTermKeys() {
        this._ltkInfos = [];
        this.loadLongTermKeys();
    }
    oadLongTermKeys() {
        const numLongTermKeys = this._ltkInfos.length;
        const op = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);
        op.writeUInt16LE(numLongTermKeys, 0);
        for (let i = 0; i < numLongTermKeys; i++) {
            this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);
        }
        this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);
    }
}
exports.default = Mgmt;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 *
 * @ignore
 */
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const crypto_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/crypto.js"));
const mgmt_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.js"));
const smp_1 = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/common/smp.js");
/**
 * @ignore
 */
class Smp extends eventemitter3_1.default {
    constructor(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress, hciProtocol) {
        super();
        this._aclStream = aclStream;
        this._mgmt = new mgmt_1.default(hciProtocol);
        this._iat = Buffer.from([remoteAddressType === 'random' ? 0x01 : 0x00]);
        this._ia = bleHelper_1.default.hex2reversedBuffer(remoteAddress, ':');
        this._rat = Buffer.from([localAddressType === 'random' ? 0x01 : 0x00]);
        this._ra = bleHelper_1.default.hex2reversedBuffer(localAddress, ':');
        this._stk = null;
        this._random = null;
        this._diversifier = null;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(this);
        this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on('data', this.onAclStreamDataBinded);
        this._aclStream.on('encryptChange', this.onAclStreamEncryptChangeBinded);
        this._aclStream.on('ltkNegReply', this.onAclStreamLtkNegReplyBinded);
        this._aclStream.on('end', this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== smp_1.SMP.CID) {
            return;
        }
        const code = data.readUInt8(0);
        if (smp_1.SMP.PAIRING_REQUEST === code) {
            this.handlePairingRequest(data);
        }
        else if (smp_1.SMP.PAIRING_CONFIRM === code) {
            this.handlePairingConfirm(data);
        }
        else if (smp_1.SMP.PAIRING_RANDOM === code) {
            this.handlePairingRandom(data);
        }
        else if (smp_1.SMP.PAIRING_FAILED === code) {
            this.handlePairingFailed(data);
        }
    }
    onAclStreamEncryptChange(encrypted) {
        if (encrypted) {
            if (this._stk && this._diversifier && this._random) {
                this.write(Buffer.concat([Buffer.from([smp_1.SMP.ENCRYPT_INFO]), this._stk]));
                this.write(Buffer.concat([
                    Buffer.from([smp_1.SMP.MASTER_IDENT]),
                    this._diversifier,
                    this._random,
                ]));
            }
        }
    }
    onAclStreamLtkNegReply() {
        this.write(Buffer.from([smp_1.SMP.PAIRING_FAILED, smp_1.SMP.UNSPECIFIED]));
        this.emit('fail');
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('encryptChange', this.onAclStreamEncryptChangeBinded);
        this._aclStream.removeListener('ltkNegReply', this.onAclStreamLtkNegReplyBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
    }
    handlePairingRequest(data) {
        this._preq = data;
        this._pres = Buffer.from([
            smp_1.SMP.PAIRING_RESPONSE,
            0x03,
            0x00,
            0x01,
            0x10,
            0x00,
            0x01,
        ]);
        this.write(this._pres);
    }
    handlePairingConfirm(data) {
        this._pcnf = data;
        this._tk = Buffer.from('00000000000000000000000000000000', 'hex');
        this._r = crypto_1.default.r();
        this.write(Buffer.concat([
            Buffer.from([smp_1.SMP.PAIRING_CONFIRM]),
            crypto_1.default.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]));
    }
    handlePairingRandom(data) {
        const r = data.slice(1);
        const pcnf = Buffer.concat([
            Buffer.from([smp_1.SMP.PAIRING_CONFIRM]),
            crypto_1.default.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]);
        if (this._pcnf.toString('hex') === pcnf.toString('hex')) {
            this._diversifier = Buffer.from('0000', 'hex');
            this._random = Buffer.from('0000000000000000', 'hex');
            this._stk = crypto_1.default.s1(this._tk, this._r, r);
            this._mgmt.addLongTermKey(this._ia, this._iat, 0, 0, this._diversifier, this._random, this._stk);
            this.write(Buffer.concat([Buffer.from([smp_1.SMP.PAIRING_RANDOM]), this._r]));
        }
        else {
            this.write(Buffer.from([smp_1.SMP.PAIRING_FAILED, smp_1.SMP.PAIRING_CONFIRM]));
            this.emit('fail');
        }
    }
    handlePairingFailed(data) {
        this.emit('fail');
    }
    write(data) {
        this._aclStream.write(smp_1.SMP.CID, data);
    }
}
exports.default = Smp;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/display.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * Here we will show letters and pictures on display on obniz Board.
 * ![](media://obniz_display_sphere.gif)
 *
 * @category Embeds
 */
class Display extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, info) {
        super(obniz);
        this.autoFlush = true;
        this.fontSize = 16;
        this._pos = { x: 0, y: 0 };
        this._colorDepthCapabilities = [1];
        this._colorDepth = 1;
        this._color = '#000';
        this._paper_white = true;
        this._raw_alternate = false;
        this.width = info.width;
        this.height = info.height;
        this._colorDepthCapabilities = info.color_depth;
        this._paper_white = info.paper_white;
        this._raw_alternate = info.raw_alternate;
        this._canvas = undefined;
        this._reset();
    }
    /**
     * This changes the font.
     * The options for fontFamily and fontSize depend on your browser.
     * If you are using node.js, node-canvas is required.
     *
     * The default font is Arial 16px.
     * If you set the parameter to null, you will be using the default font.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.font('Avenir',30)
     * obniz.display.print("Avenir")
     *
     * obniz.display.font(null,30) //default font(Arial) 30px
     * obniz.display.font('Avenir') //Avenir with default size(16px)
     * ```
     * ![](media://obniz_display_samples3.jpg)
     * ![](media://obniz_display_samples2.jpg)
     * ![](media://obniz_display_samples1.jpg)
     *
     * @param font font name
     * @param size size of font
     */
    font(font, size) {
        const ctx = this._ctx(true);
        if (ctx) {
            if (typeof size !== 'number') {
                size = 16;
            }
            if (typeof font !== 'string') {
                font = 'Arial';
            }
            this.fontSize = size;
            ctx.font = '' + +' ' + size + 'px ' + font;
        }
    }
    /**
     * Setting color for fill/stroke style for further rendering.
     * If you are using node.js, node-canvas is required.
     *
     * ```javascript
     * obniz.display.color('#FF0000');
     * obniz.display.rect(0, 0, 10, 10, false)
     * obniz.display.color('blue');
     * obniz.display.rect(0, 10, 10, 10, false)
     * ```
     *
     * @param color css acceptable color definition
     */
    setColor(color) {
        const ctx = this._ctx(true);
        if (ctx) {
            this._color = color;
            ctx.fillStyle = this._color;
            ctx.strokeStyle = this._color;
        }
    }
    /**
     * Getting color for fill/stroke style for further rendering.
     *
     * ```javascript
     * const current = obniz.display.getColor();
     * ```
     *
     */
    getColor() {
        return this._color;
    }
    /**
     * Clear the display.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.clear();
     * ```
     */
    clear() {
        const ctx = this._ctx(false);
        this._pos.x = 0;
        this._pos.y = 0;
        if (ctx) {
            const currentFillStyle = ctx.fillStyle;
            ctx.fillStyle = this._paper_white ? '#FFF' : '#000';
            ctx.fillRect(0, 0, this.width, this.height);
            ctx.fillStyle = currentFillStyle;
            this.draw(ctx);
        }
        else {
            const obj = {};
            obj.display = {
                clear: true,
            };
            this.Obniz.send(obj);
        }
    }
    // eslint-disable-next-line rulesdir/non-ascii
    /**
     * It changes the display position of a text. If you are using print() to display a text, position it to top left.
     *
     * If you are using node.js, node-canvas is required.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.pos(0,30);
     * obniz.display.print("YES. こんにちは");
     * ```
     * ![](media://obniz_display_pos.jpg)
     *
     * @param x
     * @param y
     */
    pos(x, y) {
        this._ctx(true); // crete first
        if (typeof x === 'number') {
            this._pos.x = x;
        }
        if (typeof y === 'number') {
            this._pos.y = y;
        }
        return this._pos;
    }
    // eslint-disable-next-line rulesdir/non-ascii
    /**
     * Print text on display.
     *
     * If you are using node.js and text is included characters out of ASCII code range, node-canvas is required.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.print("Hello!");
     * ```
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.font('Serif',18)
     * obniz.display.print("Hello World🧡")
     * ```
     * ![](media://obniz_display_print.jpg)
     *
     * @param text Text to display. With browser, UTF8 string is available.
     */
    print(text) {
        const ctx = this._ctx(false);
        if (ctx) {
            ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);
            this.draw(ctx);
            this._pos.y += this.fontSize;
        }
        else {
            // eslint-disable-next-line no-control-regex
            if (!text.toString().match(/^[\x00-\x7F]*$/)) {
                this.warnCanvasAvailability();
            }
            const obj = {};
            obj.display = {
                text: '' + text,
            };
            this.Obniz.send(obj);
        }
    }
    /**
     * Draw a line between two points.
     * If you are using node.js, node-canvas is required.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.line(30, 30, 100, 30);
     * obniz.display.rect(20, 20, 20, 20);
     * obniz.display.circle(100, 30, 20);
     *
     * obniz.display.line(60, 50, 100, 30);
     * obniz.display.rect(50, 40, 20, 20, true);
     * obniz.display.line(50, 10, 100, 30);
     * obniz.display.circle(50, 10, 10, true);
     * ```
     *
     * ![](media://obniz_display_draws.jpg)
     *
     * @param x_0
     * @param y_0
     * @param x_1
     * @param y_1
     */
    line(x_0, y_0, x_1, y_1) {
        const ctx = this._ctx(true);
        if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x_0, y_0);
            ctx.lineTo(x_1, y_1);
            ctx.stroke();
            this.draw(ctx);
        }
    }
    /**
     * Draw a rectangle.
     * If you are using node.js, node-canvas is required.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.rect(10, 10, 20, 20);
     * obniz.display.rect(20, 20, 20, 20, true); // filled rect
     * ```
     *
     * @param x
     * @param y
     * @param width
     * @param height
     * @param mustFill
     */
    rect(x, y, width, height, mustFill) {
        const ctx = this._ctx(true);
        if (ctx) {
            if (mustFill) {
                ctx.fillRect(x, y, width, height);
            }
            else {
                ctx.strokeRect(x, y, width, height);
            }
            this.draw(ctx);
        }
    }
    /**
     * Draw a circle.
     * If you are using node.js, node-canvas is required.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.circle(40, 30, 20);
     * obniz.display.circle(90, 30, 20, true); // filled circle
     * ```
     *
     * @param x
     * @param y
     * @param r
     * @param mustFill
     */
    circle(x, y, r, mustFill) {
        const ctx = this._ctx(true);
        if (ctx) {
            ctx.beginPath();
            ctx.arc(x, y, r, 0, Math.PI * 2);
            if (mustFill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
            this.draw(ctx);
        }
    }
    /**
     * This shows QR code with given text and correction level.
     * The correction level can be
     *
     * - L
     * - M(default)
     * - Q
     * - H
     *
     * H is the strongest error correction.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.qr("https://obniz.io")
     * ```
     *
     * @param text
     * @param correction
     */
    qr(text, correction) {
        const obj = {};
        obj.display = {
            qr: {
                text,
            },
        };
        if (correction) {
            obj.display.qr.correction = correction;
        }
        this.Obniz.send(obj);
    }
    /**
     * Draw BMP image
     *
     * ```javascript
     * obniz.display.raw([255, 255,,,,,])
     * ```
     *
     * You should care about colorDepth before sending raw datas.
     *
     * @param data data array.
     * The order is as below.
     * {1byte} {2byte} {3byte}...{16byte}
     * {17byte} {18byte} {19byte}...
     * .....
     * .....................
     */
    raw(data) {
        const obj = {};
        obj.display = {
            raw: data,
        };
        if (this._colorDepth > 1) {
            obj.display.color_depth = this._colorDepth;
        }
        this.Obniz.send(obj);
    }
    /**
     * Setting color depth for all communication for the display
     * higher number will get more beautiful colors and lowest number 1 is just monochrome.
     * But 16 bit color mode is 16 times data bytes needed for same size rendering.
     *
     * ```javascript
     * obniz.display.setColorDepth(4); // => 4bit color mode.
     * ```
     *
     * @param depth monochrome display always 1. For color display 1(monochrome) and 4 and 16 can be selected.
     * default value is highest color depth for your display.
     * If you call just
     */
    setColorDepth(depth) {
        const found = this._colorDepthCapabilities.find((element) => element === depth);
        if (found) {
            this._colorDepth = depth;
        }
        else {
            throw new Error(`This device can't accept depth ${depth}. availables are ${JSON.stringify(this._colorDepthCapabilities)}`);
        }
    }
    /**
     * Getting color depth for all communication for the display
     *
     * ```javascript
     * const current = obniz.display.getColorDepth(); // => return current depth. 1 or higher
     * ```
     */
    getColorDepth() {
        return this._colorDepth;
    }
    /**
     * @ignore
     * @param io
     * @param moduleName
     * @param funcName
     */
    setPinName(io, moduleName, funcName) {
        const obj = {};
        obj.display = {};
        obj.display.pin_assign = {};
        obj.display.pin_assign[io] = {
            module_name: moduleName,
            pin_name: funcName,
        };
        this.Obniz.send(obj);
    }
    /**
     * @ignore
     * @param moduleName
     * @param data
     */
    setPinNames(moduleName, data) {
        const obj = {};
        obj.display = {};
        obj.display.pin_assign = {};
        let noAssignee = true;
        for (const key in data) {
            noAssignee = false;
            obj.display.pin_assign[key] = {
                module_name: moduleName,
                pin_name: data[key],
            };
        }
        if (!noAssignee) {
            this.Obniz.send(obj);
        }
    }
    /**
     * Draw Display from HTML5 Canvas context.
     * With node-canvas, this works with node.js.
     *
     * - on HTML, load ctx from existing
     *
     * ```javascript
     * let ctx = $("#canvas")[0].getContext('2d');
     *
     * ctx.fillStyle = "white";
     * ctx.font = "30px Avenir";
     * ctx.fillText('Avenir', 0, 40);
     *
     * obniz.display.draw(ctx);
     * ```
     *
     * - on HTML, create new canvas dom and load it.
     *
     * ```javascript
     *
     * let ctx = obniz.util.createCanvasContext(obniz.display.width, obniz.display.height);
     *
     * ctx.fillStyle = "white";
     * ctx.font = "30px Avenir";
     * ctx.fillText('Avenir', 0, 40);
     *
     * obniz.display.draw(ctx);
     * ```
     *
     * - running with node.js
     *
     * ```javascript
     * //    npm install canvas. ( version 2.0.0 or later required )
     * const { createCanvas } = require('canvas');
     * const canvas = createCanvas(128, 64);
     * const ctx = canvas.getContext('2d');
     *
     * ctx.fillStyle = "white";
     * ctx.font = "30px Avenir";
     * ctx.fillText('Avenir', 0, 40);
     *
     * obniz.display.draw(ctx);
     * ```
     *
     *
     * @param ctx
     */
    draw(ctx) {
        if (this.autoFlush) {
            this._draw(ctx);
        }
    }
    /**
     * You can specify to transfer the displayed data or not.
     * This affects only the functions that use canvas like clear/print/line/rect/circle/draw.
     * If you are using node.js, node-canvas is required.
     *
     * Use false to stop updating display and true to restart updating.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.drawing(false);
     * for (var i=0;i<100; i++) {
     *   var x0 = Math.random() * 128;
     *   var y0 = Math.random() * 64;
     *   var x1 = Math.random() * 128;
     *   var y1 = Math.random() * 64;
     *   obniz.display.clear();
     *   obniz.display.line(x0, y0, x1, y1);
     * }
     * obniz.display.drawing(true);
     * ```
     *
     * @param autoFlush
     */
    drawing(autoFlush) {
        this.autoFlush = !!autoFlush;
        const ctx = this._ctx(true);
        if (ctx) {
            this.draw(ctx);
        }
    }
    schemaBasePath() {
        return 'display';
    }
    _reset() {
        this.autoFlush = true;
        // reset to default
        this._pos = { x: 0, y: 0 };
        this._color = this._paper_white ? '#000' : '#FFF';
        this.fontSize = this.height > 200 ? 32 : 16;
        this._colorDepth = this._colorDepthCapabilities[this._colorDepthCapabilities.length - 1];
        this._reset_canvas();
    }
    warnCanvasAvailability() {
        if (this.Obniz.isNode) {
            throw new Error('obniz.js require node-canvas to draw rich contents or characters out of ASCII code range. see more detail on docs');
        }
        else {
            throw new Error('obniz.js cant create canvas element to body');
        }
    }
    _reset_canvas() {
        // reset canvas
        if (this._canvas) {
            const ctx = this._canvas.getContext('2d');
            ctx.fillStyle = this._paper_white ? '#FFF' : '#000';
            ctx.fillRect(0, 0, this.width, this.height);
            ctx.fillStyle = this._color;
            ctx.strokeStyle = this._color;
            ctx.font = `${this.fontSize}px Arial`;
        }
    }
    _preparedCanvas() {
        if (this._canvas) {
            return this._canvas;
        }
        if (this.Obniz.isNode) {
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const { createCanvas } = __webpack_require__("./dist/src/obniz/libs/webpackReplace/canvas.js");
                this._canvas = createCanvas(this.width, this.height);
                this._reset_canvas();
            }
            catch (e) {
                return undefined;
            }
        }
        else {
            const identifier = 'obnizcanvas-' + this.Obniz.id;
            let canvas = document.getElementById(identifier);
            if (canvas) {
                this._canvas = canvas;
                this._reset_canvas();
            }
            else {
                canvas = document.createElement('canvas');
                canvas.setAttribute('id', identifier);
                canvas.style.visibility = 'hidden';
                canvas.width = this.width;
                canvas.height = this.height;
                if (this._colorDepthCapabilities.length === 1) {
                    // for monochro display
                    canvas.style['-webkit-font-smoothing'] = 'none';
                }
                const body = document.getElementsByTagName('body')[0];
                body.appendChild(canvas);
                this._canvas = canvas;
                this._reset_canvas();
            }
        }
        return this._canvas;
    }
    _ctx(required = false) {
        const canvas = this._preparedCanvas();
        if (canvas) {
            return canvas.getContext('2d');
        }
        if (required) {
            this.warnCanvasAvailability();
        }
        return undefined;
    }
    _draw(ctx) {
        const raw = new Array((this.width * this.height * this._colorDepth) / 8);
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        if (this._colorDepth === 16) {
            for (let pixel_index = 0; pixel_index < this.width * this.height; pixel_index++) {
                const red = data[pixel_index * 4];
                const green = data[pixel_index * 4 + 1];
                const blue = data[pixel_index * 4 + 2];
                const hexColor = (((red >> 3) & 0x1f) << 11) |
                    (((green >> 2) & 0x3f) << 5) |
                    (((blue >> 3) & 0x1f) << 0);
                raw[pixel_index * 2] = (hexColor >> 8) & 0xff;
                raw[pixel_index * 2 + 1] = hexColor & 0xff;
            }
        }
        else if (this._colorDepth === 4) {
            const stride = this.width / 2;
            for (let pixel_index = 0; pixel_index < this.width * this.height; pixel_index++) {
                const red = data[pixel_index * 4];
                const green = data[pixel_index * 4 + 1];
                const blue = data[pixel_index * 4 + 2];
                const brightness = 0.34 * red + 0.5 * green + 0.16 * blue;
                const line = Math.floor(pixel_index / this.width);
                const col = Math.floor((pixel_index - line * this.width) / 2);
                const bits = Math.floor(pixel_index - line * this.width) % 2;
                let pixel = 0b0000;
                if (red > 0x7f) {
                    pixel |= 0b1000;
                }
                if (green > 0x7f) {
                    pixel |= 0b0100;
                }
                if (blue > 0x7f) {
                    pixel |= 0b0010;
                }
                if (brightness > 0x7f) {
                    pixel |= 0b0001;
                }
                if (bits === 0) {
                    raw[line * stride + col] = pixel << 4;
                }
                else {
                    raw[line * stride + col] |= pixel;
                }
            }
        }
        else {
            const stride = this.width / 8;
            for (let pixel_index = 0; pixel_index < this.width * this.height; pixel_index++) {
                const red = data[pixel_index * 4];
                const green = data[pixel_index * 4 + 1];
                const blue = data[pixel_index * 4 + 2];
                const brightness = 0.34 * red + 0.5 * green + 0.16 * blue;
                const row = Math.floor(pixel_index / this.width);
                const col = Math.floor((pixel_index - row * this.width) / 8);
                const bits = Math.floor(pixel_index - row * this.width) % 8;
                if (bits === 0) {
                    raw[row * stride + col] = 0x00;
                }
                if (brightness > 0x7f) {
                    raw[row * stride + col] |= 0x80 >> bits;
                }
            }
        }
        if (this._raw_alternate) {
            for (let i = 0; i < raw.length; i++) {
                raw[i] = ~raw[i] & 0xff;
            }
        }
        this.raw(raw);
    }
}
exports.default = Display;


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/switch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * The embedded switch on obniz Board.
 *
 * @category Embeds
 */
class ObnizSwitch extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, info) {
        super(obniz);
        this.on('/response/switch/change', (obj) => {
            this.state = obj.state;
            this.Obniz._runUserCreatedFunction(this.onchange, this.state);
        });
        this._reset();
    }
    /**
     * This determines the current status of the switch.
     *
     * ```javascript
     * // Javascript Example
     * obniz.display.clear();
     * var state = await obniz.switch.getWait();
     * if (state === "push") {
     *   obniz.display.print("Now Pressed");
     * }
     * ```
     *
     */
    async getWait() {
        const obj = {};
        obj.switch = 'get';
        const data = await this.sendAndReceiveJsonWait(obj, '/response/switch/change');
        return data.state;
    }
    /**
     * With this you wait until the switch status changes to state.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.switch.stateWait("push");
     * console.log("switch pushed");
     *
     * await obniz.switch.stateWait("left");
     * console.log("switch left");
     *
     * await obniz.switch.stateWait("right");
     * console.log("switch right");
     *
     * await obniz.switch.stateWait("none");
     * console.log("switch none");
     * ```
     *
     * @param state state for wait
     */
    async stateWait(state) {
        while (1) {
            const data = await this.receiveJsonWait('/response/switch/change');
            if (state === data.state) {
                return;
            }
        }
    }
    schemaBasePath() {
        return 'switch';
    }
    _reset() {
        this.state = 'none';
    }
}
exports.default = ObnizSwitch;


/***/ }),

/***/ "./dist/src/obniz/libs/hw/blelte_gw2.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"encored_lte\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"21\":{},\"25\":{},\"26\":{},\"33\":{}}},\"ad\":{\"units\":{}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/blewifi_gw2.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"blewifi_gw2\",\"peripherals\":{\"io\":{\"units\":{}},\"ad\":{\"units\":{}},\"pwm\":{\"units\":{}},\"spi\":{\"units\":{}},\"i2c\":{\"units\":{}}},\"embeds\":{\"ble\":{},\"display\":{\"paper_white\":true,\"raw_alternate\":true,\"width\":200,\"height\":200,\"color_depth\":[1]},\"storage\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/cc3235mod.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"esp32w\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"16\":{},\"17\":{},\"22\":{},\"23\":{},\"24\":{},\"25\":{},\"28\":{},\"29\":{},\"30\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"16\":{},\"17\":{},\"22\":{},\"23\":{},\"24\":{},\"25\":{},\"28\":{},\"29\":{},\"30\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/encored.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"encored\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"25\":{},\"26\":{},\"27\":{}}},\"ad\":{\"units\":{}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/encored_lte.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"encored_lte\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"21\":{},\"25\":{},\"26\":{},\"33\":{}}},\"ad\":{\"units\":{}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/esp32c3.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"esp32c3\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"18\":{},\"19\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{}}},\"spi\":{\"units\":{\"0\":{}}},\"i2c\":{\"units\":{\"0\":{},\"1\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/esp32p.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"esp32w\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"5\":{},\"9\":{},\"10\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"18\":{},\"19\":{},\"21\":{},\"22\":{},\"23\":{},\"25\":{},\"26\":{},\"27\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"ad\":{\"units\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/esp32w.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"esp32w\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"5\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"21\":{},\"22\":{},\"23\":{},\"25\":{},\"26\":{},\"27\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"ad\":{\"units\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"39\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
Object.defineProperty(exports, "__esModule", { value: true });
class HW {
    static getDefinitionFor(hw) {
        if (hw === 'obnizb1') {
            return __webpack_require__("./dist/src/obniz/libs/hw/obnizb1.json");
        }
        else if (hw === 'obnizb2') {
            return __webpack_require__("./dist/src/obniz/libs/hw/obnizb2.json");
        }
        else if (hw === 'esp32w') {
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32w.json");
        }
        else if (hw === 'esp32p') {
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32p.json");
        }
        else if (hw === 'm5stickc') {
            return __webpack_require__("./dist/src/obniz/libs/hw/m5stickc.json");
        }
        else if (hw === 'm5stack_basic') {
            return __webpack_require__("./dist/src/obniz/libs/hw/m5stack_basic.json");
        }
        else if (hw === 'encored') {
            return __webpack_require__("./dist/src/obniz/libs/hw/encored.json");
        }
        else if (hw === 'encored_lte') {
            return __webpack_require__("./dist/src/obniz/libs/hw/encored_lte.json");
        }
        else if (hw === 'cc3235mod') {
            return __webpack_require__("./dist/src/obniz/libs/hw/cc3235mod.json");
        }
        else if (hw === 'esp32c3') {
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32c3.json");
        }
        else if (hw === 'blewifi_gw2') {
            return __webpack_require__("./dist/src/obniz/libs/hw/blewifi_gw2.json");
        }
        else if (hw === 'blelte_gw2') {
            return __webpack_require__("./dist/src/obniz/libs/hw/blelte_gw2.json");
        }
        else {
            // default
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32w.json");
        }
    }
}
exports.default = HW;


/***/ }),

/***/ "./dist/src/obniz/libs/hw/m5stack_basic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Hardware
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizDevice_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizDevice.js"));
class M5StackBasic extends ObnizDevice_1.default {
    constructor(id, options) {
        super(id, options);
    }
    _beforeOnConnect() {
        super._beforeOnConnect();
        this.buttonA = this.wired('Button', { signal: 39 });
        this.buttonB = this.wired('Button', { signal: 38 });
        this.buttonC = this.wired('Button', { signal: 37 });
    }
    _prepareComponents() {
        super._prepareComponents();
        if (this.hw !== 'm5stack_basic') {
            throw new Error('Obniz.M5StackBasic only support ObnizOS for M5Stack Basic. Your device is not ObnizOS for M5Stack Basic.');
        }
    }
}
exports.M5StackBasic = M5StackBasic;


/***/ }),

/***/ "./dist/src/obniz/libs/hw/m5stack_basic.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"m5stack_basic\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"5\":{},\"12\":{},\"13\":{},\"15\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"21\":{},\"22\":{},\"23\":{},\"25\":{},\"26\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"ad\":{\"units\":{\"34\":{},\"35\":{},\"36\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{}}},\"i2c\":{\"units\":{\"0\":{},\"1\":{}}},\"grove\":{\"units\":{\"0\":{\"pin1\":22,\"pin2\":21}}}},\"embeds\":{\"ble\":{},\"display\":{\"paper_white\":true,\"raw_alternate\":false,\"width\":320,\"height\":240,\"color_depth\":[1,4,16]},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/m5stickc.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Hardware
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizDevice_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizDevice.js"));
class M5StickC extends ObnizDevice_1.default {
    constructor(id, options) {
        super(id, options);
    }
    gyroWait() {
        const supportedIMUNameArr = ['MPU6886', 'SH200Q'];
        if (!supportedIMUNameArr.includes(this.imu.constructor.name)) {
            throw new Error(`gyroWait is supported only on M5stickC with ${supportedIMUNameArr.join()}`);
        }
        return this.imu.getGyroWait();
    }
    accelerationWait() {
        const supportedIMUNameArr = ['MPU6886', 'SH200Q'];
        if (!supportedIMUNameArr.includes(this.imu.constructor.name)) {
            throw new Error(`accelerationWait is supported only on M5stickC with ${supportedIMUNameArr.join()}`);
        }
        return this.imu.getAccelWait();
    }
    setupIMUWait(imuName = 'MPU6886') {
        const i2c = this._m5i2c;
        const onerror = i2c.onerror;
        this.imu = this.wired(imuName, { i2c });
        // eslint-disable-next-line
        this.imu._reset = () => {
            // do nothing.
        };
        const p1 = this.imu.whoamiWait();
        const p2 = new Promise((resolve, reject) => {
            i2c.onerror = reject;
        });
        return Promise.race([p1, p2]).then(async (val) => {
            // restore
            i2c.onerror = onerror;
            if (!val) {
                throw new Error(`Cannot find IMU (${imuName}) on this M5StickC`);
            }
            switch (imuName) {
                case 'SH200Q':
                    await this.imu.initWait();
                    break;
                case 'MPU6886':
                    this.imu.init();
                    break;
                default:
                    break;
            }
            return this.imu;
        });
    }
    _beforeOnConnect() {
        super._beforeOnConnect();
        if (this.ir) {
            // already wired parts
            return;
        }
        this.ir = this.wired('InfraredLED', { anode: 9 });
        this.led = this.wired('LED', { cathode: 10 });
        this.buttonA = this.wired('Button', { signal: 37 });
        this.buttonB = this.wired('Button', { signal: 39 });
        const i2cParams = {
            sda: 21,
            scl: 22,
            clock: 100000,
            pull: '3v',
            mode: 'master',
        };
        this._m5i2c = this.i2c1;
        this._m5i2c.start(i2cParams);
        this.axp = this.wired('AXP192', { i2c: this._m5i2c });
        this.led.off();
    }
    _prepareComponents() {
        super._prepareComponents();
        if (this.hw !== 'm5stickc') {
            throw new Error('Obniz.M5StickC only support ObnizOS for M5StickC. Your device is not ObnizOS for M5StickC.');
        }
    }
}
exports.M5StickC = M5StickC;


/***/ }),

/***/ "./dist/src/obniz/libs/hw/m5stickc.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"3\",\"hw\":\"m5stickc\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"9\":{},\"10\":{},\"21\":{},\"22\":{},\"26\":{},\"27\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"39\":{}}},\"ad\":{\"units\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{}}},\"i2c\":{\"units\":{\"0\":{},\"1\":{}}},\"grove\":{\"units\":{\"0\":{\"pin1\":33,\"pin2\":32}}}},\"embeds\":{\"ble\":{},\"display\":{\"paper_white\":true,\"raw_alternate\":false,\"width\":160,\"height\":80,\"color_depth\":[1,4,16]}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{\"m5stickc_hat\":{\"units\":{\"0\":{},\"26\":{},\"36\":{}},\"i2c\":{\"sda\":0,\"scl\":26},\"uart\":{\"tx\":0,\"rx\":26}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/obnizb1.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"obnizb1\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{\"paper_white\":false,\"raw_alternate\":false,\"width\":128,\"height\":64,\"color_depth\":[1]},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/obnizb2.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"2\",\"hw\":\"obnizb2\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{\"paper_white\":true,\"raw_alternate\":true,\"width\":128,\"height\":64,\"color_depth\":[1]},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}},\"network\":{\"wifi\":{}},\"extraInterface\":{}}");

/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/ad.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * @category Peripherals
 */
class PeripheralAD extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this.on('/response/ad/get', (obj) => {
            this.value = obj;
            this.Obniz._runUserCreatedFunction(this.onchange, obj);
        });
        this._reset();
    }
    /**
     * This starts measuring voltage on ioX until end() is called.
     * ```Javascript
     * obniz.ad0.start(function(voltage){
     *  console.log("changed to "+voltage+" v")
     * });
     * ```
     *
     * @param callback  called when voltage gets changed.
     * @param callback.voltage  voltage
     */
    start(callback) {
        this.onchange = callback;
        const obj = {};
        obj['ad' + this.id] = {
            stream: true,
        };
        this.Obniz.send(obj);
        return this.value;
    }
    /**
     * This measures the voltage just once and returns its value.
     * This function will pause until ad result arrives to your js.
     *
     * ```javascript
     * obniz.io0.output(true)
     * var voltage = await obniz.ad0.getWait();
     * obniz.io0.output(false)
     * console.log(""+voltage+" should be closed to 5.00");
     * ```
     *
     * @return measured voltage
     *
     */
    async getWait() {
        const obj = {};
        obj['ad' + this.id] = {
            stream: false,
        };
        const data = await this.sendAndReceiveJsonWait(obj, '/response/ad/get');
        return data;
    }
    /**
     * This stops measuring voltage on ioX.
     * ```javascript
     * obniz.ad0.start();
     * obniz.ad0.end();
     * ```
     */
    end() {
        this.onchange = undefined;
        const obj = {};
        obj['ad' + this.id] = null;
        this.Obniz.send(obj);
        return;
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'ad' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.value = 0.0;
    }
}
exports.default = PeripheralAD;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * @category Peripherals
 */
class Directive extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.observers = [];
        this._animationIdentifier = 0;
        this.on('/response/ioAnimation/notify', (obj) => {
            if (obj.animation.status === 'finish') {
                for (let i = this.observers.length - 1; i >= 0; i--) {
                    if (obj.animation.name === this.observers[i].name) {
                        this.observers[i].resolve();
                        this.observers.splice(i, 1);
                    }
                }
            }
        });
        this._reset();
    }
    /**
     * io animation is used when you wish to accelerate the serial sequence change of io.
     *
     * "Loop" animation can be used.
     * io changes repeatedly in a sequential manner according to json array.
     * io and pwm json commands can only be used.
     *
     *
     * obnizOS ver >= 2.0.0 required.
     *
     * ```javascript
     * //javascript
     * // Javascript Example
     * obniz.io.animation("animation-1", "loop", [
     *  {
     *   duration: 10,
     *   state: function(index){ // index = 0
     *     obniz.io0.output(false)
     *     obniz.io1.output(true)
     *   }
     *  },{
     *    duration: 10,
     *    state: function(index){ // index = 1
     *      obniz.io0.output(true)
     *      obniz.io1.output(false)
     *    }
     *  }
     * ])
     * ```
     *
     * It will generate signals likes below
     *
     *  ![](media://ioanimation.png)
     *
     * - Remove animation
     *
     * ```javascript
     * obniz.io.animation("animation-1", "loop")
     * ```
     *
     * - Pause animation
     *
     * ```javascript
     * obniz.io.animation("animation-1", "pause")
     * ```
     *
     * - Resume paused animation
     *
     * ```javascript
     * obniz.io.animation("animation-1", "resume")
     * ```
     *
     * @param name name of animation
     * @param status status of animation
     * @param animations instructions. This is optional when status is pause``resume.
     * @param repeat The number of repeat count of animation. If not specified, it repeat endless.
     */
    animation(name, status, animations, repeat) {
        if ((typeof repeat === 'number' || status === 'registrate') &&
            semver_1.default.lt(this.Obniz.firmware_ver, '2.0.0')) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        const obj = {};
        obj.io = {
            animation: {
                name,
                status,
            },
        };
        if (typeof repeat === 'number') {
            obj.io.animation.repeat = repeat;
        }
        if (!animations) {
            animations = [];
        }
        const states = [];
        for (let i = 0; i < animations.length; i++) {
            const state = animations[i];
            const duration = state.duration;
            const operation = state.state;
            // dry run. and get json commands
            this.Obniz.startCommandPool();
            operation(i);
            const pooledJsonArray = this.Obniz.endCommandPool();
            states.push({
                duration,
                state: pooledJsonArray,
            });
        }
        if (status === 'loop' || status === 'registrate') {
            obj.io.animation.states = states;
        }
        this.Obniz.send(obj);
    }
    /**
     * It start io aniomation with limited repeat count. And It wait until done.
     *
     * ```javascript
     * // Javascript Example
     * await obniz.io.repeatWait([
     *   {
     *     duration: 1000,
     *     state: function(index){
     *       obniz.io0.output(true)
     *     }
     *   },{
     *     duration: 1000,
     *     state: function(index){
     *       obniz.io0.output(false)
     *    }
     *   }
     * ], 4)
     * ```
     *
     * @param animations instructions
     * @param repeat  The number of repeat count of animation.
     */
    repeatWait(animations, repeat) {
        if (semver_1.default.lt(this.Obniz.firmware_ver, '2.0.0')) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        if (typeof repeat !== 'number' || repeat < 1) {
            throw new Error('please specify repeat count > 0');
        }
        if (Math.floor(repeat) !== repeat) {
            throw new Error('please provide integer number like 1, 2, 3,,,');
        }
        return new Promise((resolve, reject) => {
            const name = '_repeatwait' + Date.now() + this._animationIdentifier;
            if (++this._animationIdentifier > 1000) {
                this._animationIdentifier = 0;
            }
            this.animation(name, 'loop', animations, repeat);
            this.addObserver(name, resolve, reject);
        });
    }
    schemaBasePath() {
        return 'io';
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        if (this.observers) {
            for (let i = 0; i < this.observers.length; i++) {
                this.observers[i].reject(new Error('reset called'));
            }
        }
        this.observers = [];
        this._animationIdentifier = 0;
    }
    addObserver(name, resolve, reject) {
        if (name && resolve && reject) {
            this.observers.push({
                name,
                resolve,
                reject,
            });
        }
    }
}
exports.default = Directive;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/grove.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * @category Peripherals
 */
class PeripheralGrove extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, no, params) {
        super(obniz);
        this.used = false;
        this._current = {};
        this.no = no;
        this._params = params;
        this._reset();
    }
    getDigital(drive = '5v', pinOption = 'default') {
        this.useWithType('digital', drive);
        const primary = this.Obniz.isValidIO(this._params.pin1)
            ? this.Obniz.getIO(this._params.pin1)
            : undefined;
        const secondary = this.Obniz.isValidIO(this._params.pin2)
            ? this.Obniz.getIO(this._params.pin2)
            : undefined;
        if (!primary) {
            // required
            throw new Error('grove digital primary pin ' + this._params.pin1 + ' is not valid io');
        }
        if (pinOption === 'default' && !primary) {
            // required
            throw new Error('grove digital primary pin ' + this._params.pin1 + ' is not valid io');
        }
        if (pinOption === 'secondaryOnly' && !secondary) {
            // required
            throw new Error('grove digital secondary pin ' + this._params.pin2 + ' is not valid io');
        }
        return { primary, secondary };
    }
    getAnalog(drive = '5v', pinOption = 'default') {
        this.useWithType('analog', drive);
        const primary = this.Obniz.isValidAD(this._params.pin1)
            ? this.Obniz.getAD(this._params.pin1)
            : undefined;
        const secondary = this.Obniz.isValidAD(this._params.pin2)
            ? this.Obniz.getAD(this._params.pin2)
            : undefined;
        if (pinOption === 'default' && !primary) {
            // required
            throw new Error('grove analog primary pin ' + this._params.pin1 + ' is not valid io');
        }
        if (pinOption === 'secondaryOnly' && !secondary) {
            // required
            throw new Error('grove analog secondary pin ' + this._params.pin2 + ' is not valid io');
        }
        return { primary, secondary };
    }
    getAnalogDigital(drive = '5v') {
        this.useWithType('analog-digital', drive);
        const analog = this.Obniz.isValidAD(this._params.pin1)
            ? this.Obniz.getAD(this._params.pin1)
            : undefined;
        const digital = this.Obniz.isValidIO(this._params.pin2)
            ? this.Obniz.getIO(this._params.pin2)
            : undefined;
        if (!analog) {
            // required
            throw new Error('grove analog pin ' + this._params.pin1 + ' is not valid io');
        }
        if (!digital) {
            // required
            throw new Error('grove digital pin ' + this._params.pin2 + ' is not valid io');
        }
        return { analog, digital };
    }
    getI2c(frequency, drive = '5v') {
        this.useWithType('i2c', drive);
        if (!this._current.i2c) {
            this._current.i2c = this.Obniz.getI2CWithConfig({
                mode: 'master',
                sda: this._params.pin2,
                scl: this._params.pin1,
                clock: frequency,
            });
        }
        return this._current.i2c;
    }
    getUart(baud, drive = '5v') {
        this.useWithType('uart', drive);
        this._current.uart = this.Obniz.getFreeUart();
        this._current.uart.start({
            rx: this._params.pin1,
            tx: this._params.pin2,
            baud,
            drive,
        });
        return this._current.uart;
    }
    getPwm(drive = '5v') {
        this.useWithType('pwm', drive);
        this._current.pwm = this.Obniz.getFreePwm();
        this._current.pwm.start({
            io: this._params.pin1,
        });
        return this._current.pwm;
    }
    /**
     * @ignore
     */
    _reset() {
        // do nothing.
    }
    end() {
        this.used = false;
        if (this._current.uart) {
            this._current.uart.end();
        }
        if (this._current.i2c) {
            this._current.i2c.end();
        }
        if (this._current.type === 'analog') {
            if (this.Obniz.isValidAD(this._params.pin1)) {
                this.Obniz.getAD(this._params.pin1).end();
            }
            if (this.Obniz.isValidAD(this._params.pin2)) {
                this.Obniz.getAD(this._params.pin2).end();
            }
        }
        else if (this._current.type === 'analog-digital') {
            if (this.Obniz.isValidAD(this._params.pin1)) {
                this.Obniz.getAD(this._params.pin1).end();
            }
            // if (this.Obniz.isValidIO(this._params.pin2)) {
            //   this.Obniz.getIO(this._params.pin2).end();
            // }
        }
        this._current = {};
    }
    /**
     * @ignore
     * @param obj
     */
    notified(obj) {
        // nothing
    }
    schemaBasePath() {
        return null;
    }
    useWithType(type, drive) {
        if (this.used) {
            if (this._current.type !== 'i2c' || this._current.drive !== drive) {
                throw new Error('Grove pins are already used.');
            }
        }
        this.used = true;
        this._current.type = type;
        this._current.drive = drive;
        this.Obniz.setVccGnd(this._params.vcc, this._params.gnd, drive);
        if (this.Obniz.isValidIO(this._params.pin1)) {
            this.Obniz.getIO(this._params.pin1).drive(drive);
        }
        if (this.Obniz.isValidIO(this._params.pin2)) {
            this.Obniz.getIO(this._params.pin2).drive(drive);
        }
    }
}
exports.default = PeripheralGrove;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/i2c.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizError_1 = __webpack_require__("./dist/src/obniz/ObnizError.js");
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * i2c can be used.
 * Master/Slave mode.
 * But slave mode only works with "written" events. You can't set data to be read.
 *
 * @category Peripherals
 */
class PeripheralI2C extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this.onerror = undefined;
        this.on('/response/i2c/slave', (obj) => {
            this.Obniz._runUserCreatedFunction(this.onwritten, obj.data, obj.address);
        });
        this.on('/response/i2c/error', (obj) => {
            const message = `i2c${this.id}: ${obj.error.message}`;
            if (typeof this.onerror === 'function') {
                this.Obniz._runUserCreatedFunction(this.onerror, new Error(message));
            }
            else {
                this.Obniz.error({
                    alert: 'error',
                    message,
                });
            }
        });
        this.on('/response/i2c/warning', (obj) => {
            this.Obniz.warning({
                alert: 'warning',
                message: `i2c${this.id}: ${obj.warning.message}`,
            });
        });
        this._reset();
    }
    /**
     * It starts i2c on given io sda, scl.
     *
     *
     * Internal pull up is optional for io output setting.
     * By default it is pull:null.
     * See more on obniz.ioX.pull().
     *
     * For using internal-pull-up, you should specify "3v" to connect to 3.3v targets, and "5v" for 5v targets.
     * When you choose internal pull up, speed is limited to up to 100khz, because internal pull up is not so tough.
     * Please add external pull-up resistor on scl/sda and choose pull:null when you need more speed.
     *
     *
     * ```javascript
     * // Javascript Example
     * obniz.i2c0.start({mode:"master", sda:2, scl:3, clock:400000});
     * obniz.i2c0.write(0x50, [0x00, 0x00, 0x12]);
     * var ret = await obniz.i2c0.readWait(0x50, 1);
     * console.log("read "+ret);
     * ```
     *
     * - use internal pull up
     *
     * ```javascript
     * obniz.i2c0.start({mode:"master", sda:2, scl:3, clock:400000, pull:"5v"});
     * ```
     *
     * - save mode
     *
     * ```javascript
     * obniz.i2c0.start({mode: "slave", sda: 0, scl: 1, slave_address: 0x01});
     * ```
     *
     * @param arg
     */
    start(arg) {
        const err = util_1.default._requiredKeys(arg, ['mode', 'sda', 'scl']);
        if (err) {
            throw new Error("I2C start param '" + err + "' required, but not found ");
        }
        this.state = util_1.default._keyFilter(arg, [
            'mode',
            'sda',
            'scl',
            'pull',
            'gnd',
        ]);
        const ioKeys = ['sda', 'scl', 'gnd'];
        for (const key of ioKeys) {
            if (this.state[key] && !this.Obniz.isValidIO(this.state[key])) {
                throw new Error("i2c start param '" + key + "' are to be valid io no");
            }
        }
        const mode = this.state.mode;
        const clock = typeof arg.clock === 'number' ? Math.floor(arg.clock) : null;
        const slave_address = typeof arg.slave_address === 'number'
            ? Math.floor(arg.slave_address)
            : null;
        const slave_address_length = typeof arg.slave_address_length === 'number'
            ? Math.floor(arg.slave_address_length)
            : null;
        if (mode !== 'master' && mode !== 'slave') {
            throw new Error('i2c: invalid mode ' + mode);
        }
        if (mode === 'master') {
            if (clock === null) {
                throw new Error('i2c: please specify clock when master mode');
            }
            if (clock <= 0 || clock > 1 * 1000 * 1000) {
                throw new Error('i2c: invalid clock ' + clock);
            }
            if (arg.pull === '5v' && clock > 400 * 1000) {
                throw new Error('i2c: please use under 400khz when internal 5v internal pull-up');
            }
            if (arg.pull === '3v' && clock > 100 * 1000) {
                throw new Error('i2c: please use under 100khz when internal 3v internal pull-up');
            }
        }
        else {
            if (slave_address === null) {
                throw new Error('i2c: please specify slave_address');
            }
            if (slave_address < 0 || slave_address > 0x7f) {
                throw new Error('i2c: invalid slave_address');
            }
            if (slave_address < 0 || slave_address > 0x7f) {
                throw new Error('i2c: invalid slave_address');
            }
            if (slave_address_length !== null && slave_address_length !== 7) {
                throw new Error('i2c: invalid slave_address_length. please specify 7');
            }
        }
        this.Obniz.getIO(this.state.sda).drive('open-drain');
        this.Obniz.getIO(this.state.scl).drive('open-drain');
        if (this.state.pull) {
            this.Obniz.getIO(this.state.sda).pull(this.state.pull);
            this.Obniz.getIO(this.state.scl).pull(this.state.pull);
        }
        else {
            this.Obniz.getIO(this.state.sda).pull(null);
            this.Obniz.getIO(this.state.scl).pull(null);
        }
        if (this.state.gnd !== undefined) {
            this.Obniz.getIO(this.state.gnd).output(false);
            const ioNames = {};
            ioNames[this.state.gnd] = 'gnd';
            if (this.Obniz.display) {
                this.Obniz.display.setPinNames('i2c' + this.id, ioNames);
            }
        }
        const startObj = util_1.default._keyFilter(this.state, [
            'mode',
            'sda',
            'scl',
        ]);
        if (mode === 'master') {
            startObj.clock = clock;
        }
        else {
            startObj.slave_address = slave_address;
            if (slave_address_length) {
                startObj.slave_address_length = slave_address_length;
            }
        }
        const obj = {};
        obj['i2c' + this.id] = startObj;
        this.used = true;
        this.Obniz.send(obj);
    }
    /**
     * It sends data to device which has the address
     *
     * ```
     * // Javascript Example
     * obniz.i2c0.start({mode: "master",sda:2, scl:3, clock:400000, pull:null});
     * obniz.i2c0.write(0x50, [0x00, 0x00, 0x12]);
     * ```
     *
     * @param address 7bit address only.
     * @param data Max length is 1024;
     */
    write(address, data) {
        if (!this.used) {
            throw new Error(`i2c${this.id} is not started`);
        }
        address = parseInt(address);
        if (isNaN(address)) {
            throw new Error('i2c: please specify address');
        }
        if (address < 0 || address > 0x7f) {
            throw new Error('i2c: invalid address');
        }
        if (!data) {
            throw new Error('i2c: please provide data');
        }
        if (data.length > 1024) {
            throw new Error('i2c: data should be under 1024 bytes');
        }
        const obj = {};
        obj['i2c' + this.id] = {
            address,
            data,
        };
        this.Obniz.send(obj);
    }
    /**
     * It reads data from the device. length defines the length of bytes. The treatment of address is same as write() function.
     * This function will wait until data is received.
     *
     * ```javascript
     * // Javascript Example
     * obniz.i2c0.start({mode: "master",sda:2, scl:3, clock:400000, pull:null});
     * var ret = await obniz.i2c0.readWait(0x50, 1);
     * console.log("read "+ret);
     * ```
     *
     * @param address
     * @param length Max is 1024;
     */
    async readWait(address, length) {
        if (!this.used) {
            throw new Error(`i2c${this.id} is not started`);
        }
        address = parseInt(address);
        if (isNaN(address)) {
            throw new Error('i2c: please specify address');
        }
        if (address < 0 || address > 0x7f) {
            throw new Error('i2c: invalid address');
        }
        length = parseInt(length);
        if (isNaN(length) || length < 0) {
            throw new Error('i2c: invalid length to read');
        }
        if (length > 1024) {
            throw new Error('i2c: data length should be under 1024 bytes');
        }
        const obj = {};
        obj['i2c' + this.id] = {
            address,
            read: length,
        };
        const errors = {
            '/response/i2c/error': ObnizError_1.ObnizI2cError,
            '/response/i2c/warning': ObnizError_1.ObnizI2cWarning,
        };
        const receiveData = await this.sendAndReceiveJsonWait(obj, '/response/i2c/master', { errors });
        return receiveData.data;
    }
    /**
     * @ignore
     */
    isUsed() {
        return this.used;
    }
    /**
     * end i2c .
     *
     * ```javascript
     * // Javascript Example
     * obniz.i2c0.start({mode:"master", sda:2, scl:3, clock:400000});
     * obniz.i2c0.end();
     * ```
     */
    end() {
        const obj = {};
        obj['i2c' + this.id] = null;
        this.Obniz.send(obj);
        this.used = false;
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'i2c' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.used = false;
        this.onwritten = undefined;
    }
}
exports.default = PeripheralI2C;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/io.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * General purpose IO
 * This is available on each io (for obniz Board series, it's io0 to io11)
 *
 * @category Peripherals
 */
class PeripheralIO extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this.on('/response/io/get', (obj) => {
            this.value = obj;
            this.Obniz._runUserCreatedFunction(this.onchange, obj);
        });
        this.on('/response/io/warning', (obj) => {
            this.Obniz.warning({
                alert: 'warning',
                message: `io${this.id}: ${obj.warning.message}`,
            });
        });
        this.on('/response/io/error', (obj) => {
            this.Obniz.error({
                alert: 'error',
                message: `io${this.id}: ${obj.error.message}`,
            });
        });
        this._reset();
    }
    /**
     * Make ioX to output mode and put out 1 or 0.
     *
     * ```javascript
     * // Javascript Example
     * obniz.io1.output(true); // io1 is 5v
     * obniz.io2.output(1); //  io2 is 5v
     * obniz.io3.drive("3v");
     * obniz.io3.output(1); // io3 is around 3v.
     * ```
     *
     * @param value output value
     */
    output(value) {
        value = !!value;
        const obj = {};
        obj['io' + this.id] = value;
        this.value = value;
        this.Obniz.send(obj);
    }
    /**
     * This allows you to change output drive method.
     * By default, it is set as push-pull 5v.
     *
     * ```javascript
     * // Javascript Example
     * obniz.io0.output(true); // output push-pull 5v
     *
     * obniz.io1.drive("3v");
     * obniz.io1.output(true); // output push-pull 3v
     *
     * obniz.io2.pull("5v");
     * obniz.io2.drive("open-drain");
     * obniz.io2.output(true); // output open-drain with 5v pull-up
     * ```
     *
     * @param drive
     *
     */
    drive(drive) {
        if (typeof drive !== 'string') {
            throw new Error('please specify drive methods in string');
        }
        let output_type = '';
        switch (drive) {
            case '5v':
                output_type = 'push-pull5v';
                break;
            case '3v':
                output_type = 'push-pull3v';
                break;
            case 'open-drain':
                output_type = 'open-drain';
                break;
            default:
                throw new Error('unknown drive method');
        }
        const obj = {};
        obj['io' + this.id] = {
            output_type,
        };
        this.Obniz.send(obj);
    }
    /**
     * This enables/disables internal weak pull up/down resistors.
     *
     * ```javascript
     * // Javascript Example
     * obniz.io0.pull("3v");
     * obniz.io0.drive("open-drain"); // output open-drain
     * obniz.io0.output(false);
     * ```
     *
     * @param updown
     *
     */
    pull(updown) {
        if (typeof updown !== 'string' && updown !== null) {
            throw new Error('please specify pull methods in string');
        }
        let pull_type = '';
        switch (updown) {
            case '5v':
                pull_type = 'pull-up5v';
                break;
            case '3v':
                pull_type = 'pull-up3v';
                break;
            case '0v':
                pull_type = 'pull-down';
                break;
            case null:
                pull_type = 'float';
                break;
            default:
                throw new Error('unknown pull_type method');
        }
        const obj = {};
        obj['io' + this.id] = {
            pull_type,
        };
        this.Obniz.send(obj);
    }
    /**
     * Make ioX to input mode.
     * Callback function will be called when io changes its input value.
     *
     *
     * @param callback
     */
    input(callback) {
        this.onchange = callback;
        const obj = {};
        obj['io' + this.id] = {
            direction: 'input',
            stream: true,
        };
        this.Obniz.send(obj);
        return this.value;
    }
    /**
     * Make ioX to input mode.
     *
     * And this will return the current input value.
     * It pauses the process until the value is returned.
     *
     * ```javascript
     * // Javascript Example
     * var value = await obniz.io0.inputWait();
     * console.log(value);
     * ```
     */
    async inputWait() {
        const obj = {};
        obj[this.schemaBasePath()] = {
            direction: 'input',
            stream: false,
        };
        const data = await this.sendAndReceiveJsonWait(obj, '/response/io/get');
        return data;
    }
    /**
     * This ends output/input on ioX.
     *
     *
     * This function is effective only when using ioX.output() or ioX.input().
     * This won't be called when AD/UART/etc are used.
     * Pull-up down also will not affected.
     *
     * ```
     * // Javascript Example
     * obniz.io0.output(true)
     * obniz.io0.end();
     * ```
     *
     */
    end() {
        const obj = {};
        obj['io' + this.id] = null;
        this.Obniz.send(obj);
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'io' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.value = false;
    }
}
exports.default = PeripheralIO;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/pwm.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * We will now generate PWM.
 * Maximum current depends on the driving mode. See [[PeripheralIO|io]].
 *
 * @category Peripherals
 */
class PeripheralPWM extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        /**
         * @ignore
         */
        this.used = false;
        this.id = id;
        this._reset();
    }
    /**
     * This starts a pwm on a given io.
     * freq=1khz, duty=0% at start.
     *
     * io drive and pull can be configured. See more details on [[PeripheralIO|io]]
     *
     * ```javascript
     * // Javascript Example
     * var pwm = obniz.getFreePwm();
     * pwm.start({io:0}); // start pwm. output at io0
     * pwm.freq(1000);
     * pwm.duty(50);
     *
     * var pwm2 = obniz.getFreePwm();
     * pwm2.start({io:1, drive:"open-drain", pull:"5v"});
     * ```
     *
     * @param params
     */
    start(params) {
        const err = util_1.default._requiredKeys(params, ['io']);
        if (err) {
            throw new Error("pwm start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, ['io', 'drive', 'pull']);
        const io = this.params.io;
        const ioObj = this.Obniz.getIO(io);
        ioObj.drive(this.params.drive || '5v');
        ioObj.pull(this.params.pull || null);
        this.state = {
            io,
            freq: 1000,
        };
        this.sendWS({
            io,
        });
        this.used = true;
    }
    /**
     * Set frequency, not pulse duration.
     *
     *
     * For example, this value will be 1khz with DC motor.
     *
     * ```javascript
     * // Javascript Example
     * var pwm = obniz.getFreePwm();
     * pwm.start({io:0});
     * pwm.freq(1000); // set pwm. frequency to 1khz
     * ```
     *
     * @param freq frequency (Hz)
     */
    freq(freq) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        freq *= 1;
        if (typeof freq !== 'number') {
            throw new Error('please provide freq in number');
        }
        this.state.freq = freq;
        this.sendWS({
            freq,
        });
        if (typeof this.state.duty === 'number') {
            this.duty(this.state.duty);
        }
    }
    /**
     * Set pulse duty
     *
     * ```javascript
     * // Javascript Example
     * var pwm = obniz.getFreePwm();
     * pwm.start({io:0});
     * pwm.freq(2000); // set pwm frequency to 2khz
     * pwm.pulse(0.5) // set pwm pulse 0.5ms.  so this is  25% ratio.
     * ```
     *
     * @param pulse_width pulse time (ms).
     */
    pulse(pulse_width) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.state.pulse = pulse_width;
        delete this.state.duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    /**
     * Set pulse duty in terms of ratio.
     *
     * ```javascript
     * // Javascript Example
     * var pwm = obniz.getFreePwm();
     * pwm.start({io:0});
     * pwm.freq(2000); // set pwm frequency to 2khz
     * pwm.duty(50) // set pwm pulse width 50%
     * ```
     *
     * @param duty
     */
    duty(duty) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        duty *= 1;
        if (typeof this.state.freq !== 'number' || this.state.freq <= 0) {
            throw new Error('please provide freq first.');
        }
        if (typeof duty !== 'number') {
            throw new Error('please provide duty in number');
        }
        if (duty < 0) {
            duty = 0;
        }
        if (duty > 100) {
            duty = 100;
        }
        const pulse_width = (1.0 / this.state.freq) * 1000 * duty * 0.01;
        this.state.duty = duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    /**
     * @ignore
     */
    isUsed() {
        return this.used;
    }
    /**
     * It stops pwm and releases io.
     *
     * ```javascript
     * // Javascript Example
     * var pwm = obniz.getFreePwm();
     * pwm.start({io:0});
     * pwm.end();
     * ```
     */
    end() {
        this.state = {};
        this.sendWS(null);
        this.used = false;
    }
    /**
     * This modulates pwm with data.
     *
     * Modulation can be chosen from below.
     *
     * 1. "am"
     *
     * ### am modulation
     * data "1" means put out the pwm with duty ratio of 50%. "0" means stop pwm. io will be 0.
     * Interval defines the symbol baud rate.
     * Duty is fixed at 50%.
     *
     *
     * ![](media://pwm_modu.png)
     *
     * This is useful to generate IR signal (Remote control).
     * Frequency of 38kHz gets modulated with signals.
     *
     * @param type
     * @param symbol_length
     * @param data data array. All data[index] is 0 or 1.
     */
    modulate(type, symbol_length, data) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.sendWS({
            modulate: {
                type,
                symbol_length,
                data,
            },
        });
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'pwm' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.state = {};
        this.used = false;
    }
    sendWS(obj) {
        const wsObj = {};
        wsObj['pwm' + this.id] = obj;
        this.Obniz.send(wsObj);
    }
}
exports.default = PeripheralPWM;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/spi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * It is General Purpose SPI
 *
 * @category Peripherals
 */
class PeripheralSPI extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this._reset();
    }
    /**
     * It starts spi. Now the mode is only "master".
     *
     *
     * drive and pull are optional settings for io output.
     * Default settings are drive:5v, pull:null.
     * See more using obniz.io.drive() or pull().
     *
     * ```javascript
     * // Javascript Example
     * obniz.spi0.start({mode:"master", clk :0, mosi:1, miso:2, frequency:1000000});
     * var ret = await obniz.spi0.writeWait([0x12, 0x98]);
     * console.log("received: "+ret);
     *
     * // drive and pull is optional
     * obniz.spi0.start({mode:"master", clk :0, mosi:1, miso:2, frequency:1000000, drive: "5v", pull:null});
     * ```
     *
     * @param params spi parameters
     */
    start(params) {
        const err = util_1.default._requiredKeys(params, ['mode', 'frequency']);
        if (err) {
            throw new Error("spi start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            'mode',
            'clk',
            'mosi',
            'miso',
            'frequency',
            'drive',
            'pull',
            'gnd',
        ]);
        const obj = {};
        const ioKeys = [
            'clk',
            'mosi',
            'miso',
            'gnd',
        ];
        for (const key of ioKeys) {
            if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {
                throw new Error("spi start param '" + key + "' are to be valid io no");
            }
        }
        obj['spi' + this.id] = {
            mode: this.params.mode,
            clock: this.params.frequency,
        };
        if (this.params.clk !== undefined) {
            obj['spi' + this.id].clk = this.params.clk;
        }
        if (this.params.mosi !== undefined) {
            obj['spi' + this.id].mosi = this.params.mosi;
        }
        if (this.params.miso !== undefined) {
            obj['spi' + this.id].miso = this.params.miso;
        }
        if (this.params.drive) {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).drive(this.params.drive);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).drive(this.params.drive);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).drive(this.params.drive);
            }
        }
        else {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).drive('5v');
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).drive('5v');
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).drive('5v');
            }
        }
        if (this.params.pull) {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).pull(this.params.pull);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).pull(this.params.pull);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).pull(this.params.pull);
            }
        }
        else {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).pull(null);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).pull(null);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).pull(null);
            }
        }
        if (this.params.gnd !== undefined) {
            this.Obniz.getIO(this.params.gnd).output(false);
            const ioNames = {};
            ioNames[this.params.gnd] = 'gnd';
            if (this.Obniz.display) {
                this.Obniz.display.setPinNames('spi' + this.id, ioNames);
            }
        }
        this.used = true;
        this.Obniz.send(obj);
    }
    /**
     * It sends data to spi and wait until data are received.
     * The received data length is the same as the sent data.
     *
     * ```javascript
     * // Javascript Example
     * obniz.spi0.start({mode:"master", clk :0, mosi:1, miso:2, frequency:1000000});
     * var ret = await obniz.spi0.writeWait([0x12, 0x98]);
     * console.log("received: "+ret);
     * ```
     *
     *
     * @param data Max length is 1024 bytes.
     * @return received data
     */
    async writeWait(data) {
        if (!this.used) {
            throw new Error(`spi${this.id} is not started`);
        }
        if (semver_1.default.lte(this.Obniz.firmware_ver, '1.0.2') && data.length > 32) {
            throw new Error(`with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`);
        }
        const obj = {};
        obj['spi' + this.id] = {
            data,
            read: true,
        };
        const receiveData = await this.sendAndReceiveJsonWait(obj, '/response/spi/read');
        return receiveData.data;
    }
    /**
     * It only sends data to spi and does not receive it.
     *
     * ```javascript
     * // Javascript Example
     * obniz.spi0.start({mode:"master", clk :0, mosi:1, miso:2, frequency:1000000});
     * obniz.spi0.write([0x12, 0x98]);
     * ```
     *
     * @param data Max length is 1024 bytes.
     */
    write(data) {
        if (!this.used) {
            throw new Error(`spi${this.id} is not started`);
        }
        if (semver_1.default.lte(this.Obniz.firmware_ver, '1.0.2') && data.length > 32) {
            throw new Error(`with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`);
        }
        const obj = {};
        obj['spi' + this.id] = {
            data,
            read: false,
        };
        this.Obniz.send(obj);
    }
    /**
     * @ignore
     */
    isUsed() {
        return this.used;
    }
    /**
     * It ends spi
     *
     * ```javascript
     * // Javascript Example
     * obniz.spi0.start({mode:"master", clk :0, mosi:1, miso:2, clock:1000000});
     * obniz.spi0.write([0x12, 0x98]);
     * obniz.spi0.end();
     * ```
     *
     * @param reuse
     * - True : getFreeSpi will not return this object
     * - False : getFreeSpi will return this object
     */
    end(reuse) {
        const obj = {};
        obj['spi' + this.id] = null;
        this.params = null;
        this.Obniz.send(obj);
        if (!reuse) {
            this.used = false;
        }
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'spi' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.used = false;
        this.params = null;
    }
}
exports.default = PeripheralSPI;


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/uart.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * Uart module
 *
 * @category Peripherals
 */
class PeripheralUART extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this.on('/response/uart/receive', (obj) => {
            if (this.onreceive) {
                const string = this.tryConvertString(obj.data);
                this.Obniz._runUserCreatedFunction(this.onreceive, obj.data, string);
            }
            else {
                if (!this.received) {
                    this.received = [];
                }
                this.received.push(...obj.data);
            }
        });
        this._reset();
    }
    /**
     * It starts uart on io tx, rx.
     *
     * You can start uart without much configuration. Just use as below.
     *
     * @param params
     */
    start(params) {
        const err = util_1.default._requiredKeys(params, ['tx', 'rx']);
        if (err) {
            throw new Error("uart start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            'tx',
            'rx',
            'baud',
            'stop',
            'bits',
            'parity',
            'flowcontrol',
            'rts',
            'cts',
            'drive',
            'pull',
            'gnd',
        ]);
        const ioKeys = ['rx', 'tx', 'rts', 'cts', 'gnd'];
        for (const key of ioKeys) {
            if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {
                throw new Error("uart start param '" + key + "' are to be valid io no");
            }
        }
        // eslint-disable-next-line no-prototype-builtins
        if (this.params.hasOwnProperty('drive')) {
            this.Obniz.getIO(this.params.rx).drive(this.params.drive);
            this.Obniz.getIO(this.params.tx).drive(this.params.drive);
        }
        else {
            this.Obniz.getIO(this.params.rx).drive('5v');
            this.Obniz.getIO(this.params.tx).drive('5v');
        }
        // eslint-disable-next-line no-prototype-builtins
        if (this.params.hasOwnProperty('pull')) {
            this.Obniz.getIO(this.params.rx).pull(this.params.pull);
            this.Obniz.getIO(this.params.tx).pull(this.params.pull);
        }
        else {
            this.Obniz.getIO(this.params.rx).pull(null);
            this.Obniz.getIO(this.params.tx).pull(null);
        }
        // eslint-disable-next-line no-prototype-builtins
        if (this.params.hasOwnProperty('gnd')) {
            this.Obniz.getIO(this.params.gnd).output(false);
            const ioNames = {};
            ioNames[this.params.gnd] = 'gnd';
            if (this.Obniz.display) {
                this.Obniz.display.setPinNames('uart' + this.id, ioNames);
            }
        }
        const obj = {};
        const sendParams = util_1.default._keyFilter(this.params, [
            'tx',
            'rx',
            'baud',
            'stop',
            'bits',
            'parity',
            'flowcontrol',
            'rts',
            'cts',
        ]);
        obj['uart' + this.id] = sendParams;
        this.Obniz.send(obj);
        this.received = [];
        this.used = true;
    }
    /**
     * This sends data.
     *
     * Available formats are
     *
     * - string
     * utf8 encoded byte array. Does not include null terminate
     *
     * - number
     * will be one byte data
     *
     * - array of number
     * array of bytes
     *
     * - Buffer
     * array of bytes
     *
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     * obniz.uart0.send("Hi");
     * obniz.uart0.send(0x11);
     * obniz.uart0.send([0x11, 0x45, 0x44]);
     * ```
     *
     * @param data
     */
    send(data) {
        if (!this.used) {
            throw new Error(`uart${this.id} is not started`);
        }
        let send_data = null;
        if (data === undefined) {
            return;
        }
        if (typeof data === 'number') {
            data = [data];
        }
        if (this.Obniz.isNode && data instanceof Buffer) {
            send_data = [...data];
        }
        else if (data.constructor === Array) {
            send_data = data;
        }
        else if (typeof data === 'string') {
            const buf = Buffer.from(data);
            send_data = [...buf];
        }
        const obj = {};
        obj['uart' + this.id] = {};
        obj['uart' + this.id].data = send_data;
        //  console.log(obj);
        this.Obniz.send(obj);
    }
    /**
     * It checks if there are data received but not yet used.
     * If there are, it returns true.
     *
     * If you are using onreceive callback, it will always be false because you receive the data with the callback function as the data arrives.
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     *
     * while(1){
     *   if(obniz.uart0.isDataExists()){
     *      console.log(obniz.uart0.readText());
     *   }
     *   await obniz.wait(10);  //wait for 10ms
     * }
     * ```
     *
     */
    isDataExists() {
        return this.received && this.received.length > 0;
    }
    /**
     * It returns the data array that are received but not yet used.
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     *
     * while(1){
     *   if(obniz.uart0.isDataExists()){
     *      console.log(obniz.uart0.readBytes());
     *   }
     *   await obniz.wait(10);  //wait for 10ms
     * }
     * ```
     *
     * @return received data. If not exist data, return [].
     */
    readBytes() {
        const results = [];
        if (this.isDataExists()) {
            for (let i = 0; i < this.received.length; i++) {
                results.push(this.received[i]);
            }
        }
        this.received = [];
        return results;
    }
    /**
     * It returns the one byte that are received but not yet used.
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     *
     * while(1){
     *    if(obniz.uart0.isDataExists()){
     *      console.log(obniz.uart0.readBytes());
     *    }
     *    await obniz.wait(10);  //wait for 10ms
     * }
     * ```
     *
     * @return received data. If not exist data, return null.
     */
    readByte() {
        const results = [];
        if (this.isDataExists()) {
            return results.unshift();
        }
        return null;
    }
    /**
     * It returns the data that are received but not yet used as string.
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     *
     * while(1){
     *   if(obniz.uart0.isDataExists()){
     *     console.log(obniz.uart0.readText());
     *   }
     *   await obniz.wait(10);  //wait for 10ms
     * }
     * ```
     *
     * @return received text data. If not exist data, return null.
     */
    readText() {
        let string = null;
        if (this.isDataExists()) {
            const data = this.readBytes();
            string = this.tryConvertString(data);
        }
        this.received = [];
        return string;
    }
    /**
     * @ignore
     */
    isUsed() {
        return this.used;
    }
    /**
     * It stops uart and releases io.
     *
     * ```javascript
     * // Javascript Example
     * obniz.uart0.start({tx:0, rx:1})
     * obniz.uart0.send("Hi");
     * obniz.uart0.end();
     * ```
     */
    end() {
        const obj = {};
        obj['uart' + this.id] = null;
        this.params = null;
        this.Obniz.send(obj);
        this.used = false;
    }
    /**
     * Convert data array to string.
     *
     * @param data data array
     *
     * @return converted string. If convert failed, return null.
     */
    tryConvertString(data) {
        return util_1.default.dataArray2string(data);
    }
    /**
     * @ignore
     * @private
     */
    schemaBasePath() {
        return 'uart' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.received = [];
        this.used = false;
    }
}
exports.default = PeripheralUART;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/measurements/logicanalyzer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * LogicAnalyzer records samples read from io periodically.
 * This is useful for digital bus signal check.
 *
 * Only one LogicAnalyzer can be used per obniz Board.
 *
 * ### How it works
 * LogicAnalyzer starts logging by a trigger.
 * The default trigger is "value change".
 *
 * When it occurs, data will be recorded for a desired duration.
 * After that is done, LogicAnalyzer starts monitoring changes in io (= continue working).
 * One sample becomes one 1/0.
 *
 * ![](media://logiana_0.png)
 *
 * Sampling interval and duration can be configured.
 * For example, if interval is 1 ms and duration is 800ms, you will get 800 arrays of data.
 * The data will be in multiples of 8.
 *
 * @category Measurement
 */
class LogicAnalyzer extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz) {
        super(obniz);
        this.on('/response/logicAnalyzer/data', (obj) => {
            if (this.onmeasured) {
                this.Obniz._runUserCreatedFunction(this.onmeasured, obj.data);
            }
            else {
                if (!this.measured) {
                    this.measured = [];
                }
                this.measured.push(obj.data);
            }
        });
        this._reset();
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.onmeasured = undefined;
    }
    /**
     * This starts the logic analyzer on a given io.
     *
     * For example, if you want to collect the data after io0 changes every 2ms for 1sec long, set as below.
     *
     * ```javascript
     * // Javascript Example
     * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000});  // start on io0. 2ms interval and 1sec long.
     * obniz.logicAnalyzer.onmeasured = function(array) {
     *   console.log(array);
     * }
     * ```
     *
     * The trigger is an optional configuration.
     *
     * Without this, logicAnalyzer recognizes any io level change as trigger and start. Trigger specifies the start position.
     * Value means start value, true/false. Samples means how much that value consists.
     * So, with the below sample code, you will only receive data that start with "0, 0, 0"
     *
     * ```javascript
     * // Javascript Example
     * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000, triggerValue:false, triggerValueSamples:3});  // start on io0. 2ms interval and 1sec long.
     * obniz.logicAnalyzer.onmeasured = function(array) {
     *   console.log(array);
     * }
     * ```
     *
     * @param params
     */
    start(params) {
        const err = util_1.default._requiredKeys(params, ['io', 'interval', 'duration']);
        if (err) {
            throw new Error("LogicAnalyzer start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            'io',
            'interval',
            'duration',
            'triggerValue',
            'triggerValueSamples',
        ]);
        const obj = {};
        obj.logic_analyzer = {
            io: [this.params.io],
            interval: this.params.interval,
            duration: this.params.duration,
        };
        if (this.params.triggerValueSamples > 0) {
            obj.logic_analyzer.trigger = {
                value: !!this.params.triggerValue,
                samples: this.params.triggerValueSamples,
            };
        }
        this.Obniz.send(obj);
        return;
    }
    /**
     * This stops the logicAnalyzer.
     *
     * ```javascript
     * // Javascript Example
     * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000});  // start on io0. 1ms interval and 1sec long.
     * obniz.logicAnalyzer.end();
     * ```
     */
    end() {
        const obj = {
            logic_analyzer: null,
        };
        this.Obniz.send(obj);
        return;
    }
    schemaBasePath() {
        return 'logic_analyzer';
    }
}
exports.default = LogicAnalyzer;


/***/ }),

/***/ "./dist/src/obniz/libs/measurements/measure.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/**
 * The measure module provides hardware level measurement.
 *
 * @category Measurement
 */
class ObnizMeasure extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz) {
        super(obniz);
        this._reset();
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.observers = [];
    }
    /**
     * Some electrical parts or circuits accept "pulse" and echo the "pulse" after delay.
     * This module is best suited for measuring that delay.
     *
     * This module generates one pulse shot on an io, then measures the response time.
     *
     *
     * ```javascript
     * // Javascript Example
     * obniz.measure.echo({
     *   io_pulse: 0, // io for generate pulse
     *   io_echo: 1, // io to be measured
     *   pulse: "positive", // generate pulse pattern
     *   pulse_width: 0.1,  // generate pulse width
     *   measure_edges: 3, // 1 to 4. maximum edges to measure
     *   timeout: 1000, // this is optional. 1000(1sec) is default
     *   callback: function(edges) {
     *     // callback function
     *     console.log(edges);
     *   }
     * });
     * ```
     *
     * @param params
     */
    echo(params) {
        const err = util_1.default._requiredKeys(params, [
            'io_pulse',
            'pulse',
            'pulse_width',
            'io_echo',
            'measure_edges',
        ]);
        if (err) {
            throw new Error("Measure start param '" + err + "' required, but not found ");
        }
        params = util_1.default._keyFilter(params, [
            'io_pulse',
            'pulse',
            'pulse_width',
            'io_echo',
            'measure_edges',
            'timeout',
            'callback',
        ]);
        const echo = {};
        echo.io_pulse = params.io_pulse;
        echo.pulse = params.pulse;
        echo.pulse_width = params.pulse_width;
        echo.io_echo = params.io_echo;
        echo.measure_edges = params.measure_edges;
        if (typeof params.timeout === 'number') {
            echo.timeout = params.timeout;
        }
        if (typeof params.callback === 'function') {
            this.onceQueue('/response/measure/echo', (obj) => {
                this.Obniz._runUserCreatedFunction(params.callback, obj.echo);
            });
        }
        this.Obniz.send({
            measure: {
                echo,
            },
        });
    }
    schemaBasePath() {
        return 'measure';
    }
}
exports.default = ObnizMeasure;


/***/ }),

/***/ "./dist/src/obniz/libs/network/wifi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
class WiFi {
    constructor(obniz, id) {
        this.Obniz = obniz;
        this._reset();
    }
    /**
     * Scan WiFi
     *
     * ```javascript
     * // Javascript Example
     * console.log(await obniz.wifi.scanWait());
     * ```
     *
     */
    scanWait() {
        if (semver_1.default.lt(this.Obniz.firmware_ver, '3.3.0')) {
            throw new Error(`Please update obniz firmware >= 3.3.0`);
        }
        this.connectObservers = [];
        return new Promise((resolve, reject) => {
            this._addConnectObserver(resolve);
            this.Obniz.send({ wifi: { scan: true } });
        });
    }
    /**
     *
     * ```javascript
     * // Javascript Example
     * obniz.wifi.end();
     * ```
     */
    end() {
        this._reset();
    }
    /**
     * @ignore
     * @param obj
     */
    notified(obj) {
        if (obj.scan) {
            /* Connectino state update. response of connect(), close from destination, response from */
            const callback = this.connectObservers.shift();
            if (callback) {
                callback(obj.scan);
            }
        }
    }
    _reset() {
        this.connectObservers = [];
    }
    _addConnectObserver(callback) {
        if (callback) {
            this.connectObservers.push(callback);
        }
    }
}
exports.default = WiFi;


/***/ }),

/***/ "./dist/src/obniz/libs/plugin/plugin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class Plugin {
    constructor(obniz, id) {
        this.Obniz = obniz;
    }
    /**
     * Scan WiFi
     *
     * ```javascript
     * // Javascript Example
     * obniz.plugin.send("obniz.js send data")
     *
     * obniz.plugin.send([0x00, 0x01, 0x02])
     * ```
     *
     */
    send(data) {
        if (semver_1.default.lt(this.Obniz.firmware_ver, '3.4.0')) {
            throw new Error(`Please update obniz firmware >= 3.4.0`);
        }
        let send_data = null;
        if (data === undefined) {
            return;
        }
        if (typeof data === 'number') {
            data = [data];
        }
        if (this.Obniz.isNode && data instanceof Buffer) {
            send_data = [...data];
        }
        else if (data.constructor === Array) {
            send_data = data;
        }
        else if (typeof data === 'string') {
            const buf = Buffer.from(data);
            send_data = [...buf];
        }
        this.Obniz.send({ plugin: { send: send_data } });
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        // do nothing.
    }
    /**
     * @ignore
     * @param obj
     */
    notified(obj) {
        if (obj.receive) {
            /* Connectino state update. response of connect(), close from destination, response from */
            const string = util_1.default.dataArray2string(obj.receive);
            this.Obniz._runUserCreatedFunction(this.onreceive, obj.receive, string);
        }
    }
}
exports.default = Plugin;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/protocol/tcp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module ObnizCore.Components
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(__webpack_require__("./node_modules/semver/semver.js"));
const ComponentAbstact_1 = __webpack_require__("./dist/src/obniz/libs/ComponentAbstact.js");
/**
 * Create a TCP connection from a device throught the network the device is currently connected to.
 *
 * @category Protocol
 */
class Tcp extends ComponentAbstact_1.ComponentAbstract {
    constructor(obniz, id) {
        super(obniz);
        this.id = id;
        this.on('/response/tcp/connection', (obj) => {
            /* Connectino state update. response of connect(), close from destination, response from */
            this.Obniz._runUserCreatedFunction(this.onconnection, obj.connection.connected);
            if (!obj.connection.connected) {
                this._reset();
            }
        });
        this.on('/response/tcp/read', (obj) => {
            this.Obniz._runUserCreatedFunction(this.onreceive, obj.read.data);
            const callback = this.readObservers.shift();
            if (callback) {
                callback(obj.read.data);
            }
        });
        this.on('/response/tcp/connect', (obj) => {
            /* response of connect() */
            /* `this.connection` will called before this function */
            if (obj.connect.code !== 0) {
                this.Obniz._runUserCreatedFunction(this.onerror, obj.connect);
            }
            const callback = this.connectObservers.shift();
            if (callback) {
                callback(obj.connect.code);
            }
        });
        this._reset();
    }
    /**
     * Starts a connection on the port and domain for which TCP is specified.
     *
     * ```javascript
     * // Javascript Example
     * var tcp = obniz.getFreeTcp();
     * tcp.connectWait(80,"obniz.io");
     * ```
     *
     * @param port
     * @param domain
     */
    connectWait(port, domain) {
        if (semver_1.default.lt(this.Obniz.firmware_ver, '2.1.0')) {
            throw new Error(`Please update obniz firmware >= 2.1.0`);
        }
        // TODO
        // if (this.used) {
        //   throw new Error(`tcp${this.id} is in used`);
        // }
        if (port < 0 || port > 65535) {
            throw new Error(`tcp${this.id} is invalid port`);
        }
        if (domain.length > 30) {
            throw new Error(`tcp${this.id} is domain length over`);
        }
        this.connectObservers = [];
        this.used = true;
        return new Promise((resolve, reject) => {
            this._addConnectObserver(resolve);
            const obj = {};
            obj['tcp' + this.id] = {
                connect: {
                    port,
                    domain,
                },
            };
            this.Obniz.send(obj);
        });
    }
    /**
     * The argument data is sent by TCP.
     *
     * If you pass a string or Array type argument, the data will be sent.
     *
     * ```javascript
     * // Javascript Example
     * var tcp = obniz.getFreeTcp();
     * tcp.connectWait(80,"obniz.io");
     *
     * // Array
     * tcp.write([0,1,2,3,4]);
     *
     * // Text
     * tcp.write('hello');
     * ```
     *
     * @param data
     */
    write(data) {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not started`);
        }
        if (data === undefined) {
            return;
        }
        if (typeof data === 'number') {
            data = [data];
        }
        let send_data = null;
        if (this.Obniz.isNode && data instanceof Buffer) {
            send_data = [...data];
        }
        else if (data.constructor === Array) {
            send_data = data;
        }
        else if (typeof data === 'string') {
            const buf = Buffer.from(data);
            send_data = [...buf];
        }
        const obj = {};
        obj['tcp' + this.id] = {
            write: {
                data: send_data,
            },
        };
        this.Obniz.send(obj);
    }
    /**
     * Wait for TCP reception.
     *
     * ```javascript
     * // Javascript Example
     * var tcp = obniz.getFreeTcp();
     * tcp.connectWait(80,"obniz.io");
     *
     * let data = await tcp.readWait();
     * console.log(data);
     * ```
     */
    readWait() {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not started`);
        }
        return new Promise((resolve, reject) => {
            this._addReadObserver(resolve);
        });
    }
    /**
     * Terminates the TCP session.
     *
     * ```javascript
     * // Javascript Example
     * var tcp = obniz.getFreeTcp();
     * tcp.end();
     * ```
     */
    end() {
        this.close();
    }
    /**
     * @ignore
     */
    isUsed() {
        return this.used;
    }
    schemaBasePath() {
        return 'tcp' + this.id;
    }
    /**
     * @ignore
     * @private
     */
    _reset() {
        this.connectObservers = [];
        this.readObservers = [];
        this.used = false;
    }
    close() {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not used`);
        }
        const obj = {};
        obj['tcp' + this.id] = {
            disconnect: true,
        };
        this.Obniz.send(obj);
    }
    _addConnectObserver(callback) {
        if (callback) {
            this.connectObservers.push(callback);
        }
    }
    _addReadObserver(callback) {
        if (callback) {
            this.readObservers.push(callback);
        }
    }
}
exports.default = Tcp;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/utils/qr.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable */
/* Thanks Kazuhiko Arase */
/* https://github.com/kazuhikoarase/qrcode-generator/tree/master/js */
// ---------------------------------------------------------------------
//
// QR Code Generator for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//  http://www.opensource.org/licenses/mit-license.php
//
// The word 'QR Code' is registered trademark of
// DENSO WAVE INCORPORATED
//  http://www.denso-wave.com/qrcode/faqpatent-e.html
//
// ---------------------------------------------------------------------
const _qrcode = (() => {
    // --------------------------------------------------------------------
    // qrcode
    // ---------------------------------------------------------------------
    /**
     * qrcode
     * @param _typeNumber 1 to 40
     * @param errorCorrectionLevelStr 'L','M','Q','H'
     */
    const qrcode = (_typeNumber, errorCorrectionLevelStr) => {
        const PAD0 = 0xec;
        const PAD1 = 0x11;
        const _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevelStr];
        let _modules = null;
        let _moduleCount = 0;
        let _dataCache = null;
        const _dataList = [];
        const _this = {};
        const makeImpl = (test, maskPattern) => {
            _moduleCount = _typeNumber * 4 + 17;
            _modules = ((moduleCount) => {
                const modules = new Array(moduleCount);
                for (let row = 0; row < moduleCount; row += 1) {
                    modules[row] = new Array(moduleCount);
                    for (let col = 0; col < moduleCount; col += 1) {
                        modules[row][col] = null;
                    }
                }
                return modules;
            })(_moduleCount);
            setupPositionProbePattern(0, 0);
            setupPositionProbePattern(_moduleCount - 7, 0);
            setupPositionProbePattern(0, _moduleCount - 7);
            setupPositionAdjustPattern();
            setupTimingPattern();
            setupTypeInfo(test, maskPattern);
            if (_typeNumber >= 7) {
                setupTypeNumber(test);
            }
            if (_dataCache === null) {
                _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
            }
            mapData(_dataCache, maskPattern);
        };
        const setupPositionProbePattern = (row, col) => {
            for (let r = -1; r <= 7; r += 1) {
                if (row + r <= -1 || _moduleCount <= row + r) {
                    continue;
                }
                for (let c = -1; c <= 7; c += 1) {
                    if (col + c <= -1 || _moduleCount <= col + c) {
                        continue;
                    }
                    if ((0 <= r && r <= 6 && (c === 0 || c === 6)) ||
                        (0 <= c && c <= 6 && (r === 0 || r === 6)) ||
                        (2 <= r && r <= 4 && 2 <= c && c <= 4)) {
                        _modules[row + r][col + c] = true;
                    }
                    else {
                        _modules[row + r][col + c] = false;
                    }
                }
            }
        };
        const getBestMaskPattern = () => {
            let minLostPoint = 0;
            let pattern = 0;
            for (let i = 0; i < 8; i += 1) {
                makeImpl(true, i);
                const lostPoint = QRUtil.getLostPoint(_this);
                if (i === 0 || minLostPoint > lostPoint) {
                    minLostPoint = lostPoint;
                    pattern = i;
                }
            }
            return pattern;
        };
        const setupTimingPattern = () => {
            for (let r = 8; r < _moduleCount - 8; r += 1) {
                if (_modules[r][6] !== null) {
                    continue;
                }
                _modules[r][6] = r % 2 === 0;
            }
            for (let c = 8; c < _moduleCount - 8; c += 1) {
                if (_modules[6][c] !== null) {
                    continue;
                }
                _modules[6][c] = c % 2 === 0;
            }
        };
        const setupPositionAdjustPattern = () => {
            const pos = QRUtil.getPatternPosition(_typeNumber);
            for (let i = 0; i < pos.length; i += 1) {
                for (let j = 0; j < pos.length; j += 1) {
                    const row = pos[i];
                    const col = pos[j];
                    if (_modules[row][col] !== null) {
                        continue;
                    }
                    for (let r = -2; r <= 2; r += 1) {
                        for (let c = -2; c <= 2; c += 1) {
                            if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {
                                _modules[row + r][col + c] = true;
                            }
                            else {
                                _modules[row + r][col + c] = false;
                            }
                        }
                    }
                }
            }
        };
        const setupTypeNumber = (test) => {
            const bits = QRUtil.getBCHTypeNumber(_typeNumber);
            for (let i = 0; i < 18; i += 1) {
                const mod = !test && ((bits >> i) & 1) === 1;
                _modules[Math.floor(i / 3)][(i % 3) + _moduleCount - 8 - 3] = mod;
            }
            for (let i = 0; i < 18; i += 1) {
                const mod = !test && ((bits >> i) & 1) === 1;
                _modules[(i % 3) + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
            }
        };
        const setupTypeInfo = (test, maskPattern) => {
            const data = (_errorCorrectionLevel << 3) | maskPattern;
            const bits = QRUtil.getBCHTypeInfo(data);
            // vertical
            for (let i = 0; i < 15; i += 1) {
                const mod = !test && ((bits >> i) & 1) === 1;
                if (i < 6) {
                    _modules[i][8] = mod;
                }
                else if (i < 8) {
                    _modules[i + 1][8] = mod;
                }
                else {
                    _modules[_moduleCount - 15 + i][8] = mod;
                }
            }
            // horizontal
            for (let i = 0; i < 15; i += 1) {
                const mod = !test && ((bits >> i) & 1) === 1;
                if (i < 8) {
                    _modules[8][_moduleCount - i - 1] = mod;
                }
                else if (i < 9) {
                    _modules[8][15 - i - 1 + 1] = mod;
                }
                else {
                    _modules[8][15 - i - 1] = mod;
                }
            }
            // fixed module
            _modules[_moduleCount - 8][8] = !test;
        };
        const mapData = (data, maskPattern) => {
            let inc = -1;
            let row = _moduleCount - 1;
            let bitIndex = 7;
            let byteIndex = 0;
            const maskFunc = QRUtil.getMaskFunction(maskPattern);
            for (let col = _moduleCount - 1; col > 0; col -= 2) {
                if (col === 6) {
                    col -= 1;
                }
                while (true) {
                    for (let c = 0; c < 2; c += 1) {
                        if (_modules[row][col - c] === null) {
                            let dark = false;
                            if (byteIndex < data.length) {
                                dark = ((data[byteIndex] >>> bitIndex) & 1) === 1;
                            }
                            const mask = maskFunc(row, col - c);
                            if (mask) {
                                dark = !dark;
                            }
                            _modules[row][col - c] = dark;
                            bitIndex -= 1;
                            if (bitIndex === -1) {
                                byteIndex += 1;
                                bitIndex = 7;
                            }
                        }
                    }
                    row += inc;
                    if (row < 0 || _moduleCount <= row) {
                        row -= inc;
                        inc = -inc;
                        break;
                    }
                }
            }
        };
        const createBytes = (buffer, rsBlocks) => {
            let offset = 0;
            let maxDcCount = 0;
            let maxEcCount = 0;
            const dcdata = new Array(rsBlocks.length);
            const ecdata = new Array(rsBlocks.length);
            for (let r = 0; r < rsBlocks.length; r += 1) {
                const dcCount = rsBlocks[r].dataCount;
                const ecCount = rsBlocks[r].totalCount - dcCount;
                maxDcCount = Math.max(maxDcCount, dcCount);
                maxEcCount = Math.max(maxEcCount, ecCount);
                dcdata[r] = new Array(dcCount);
                for (let i = 0; i < dcdata[r].length; i += 1) {
                    dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];
                }
                offset += dcCount;
                const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
                const rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);
                const modPoly = rawPoly.mod(rsPoly);
                ecdata[r] = new Array(rsPoly.getLength() - 1);
                for (let i = 0; i < ecdata[r].length; i += 1) {
                    const modIndex = i + modPoly.getLength() - ecdata[r].length;
                    ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
                }
            }
            let totalCodeCount = 0;
            for (let i = 0; i < rsBlocks.length; i += 1) {
                totalCodeCount += rsBlocks[i].totalCount;
            }
            const data = new Array(totalCodeCount);
            let index = 0;
            for (let i = 0; i < maxDcCount; i += 1) {
                for (let r = 0; r < rsBlocks.length; r += 1) {
                    if (i < dcdata[r].length) {
                        data[index] = dcdata[r][i];
                        index += 1;
                    }
                }
            }
            for (let i = 0; i < maxEcCount; i += 1) {
                for (let r = 0; r < rsBlocks.length; r += 1) {
                    if (i < ecdata[r].length) {
                        data[index] = ecdata[r][i];
                        index += 1;
                    }
                }
            }
            return data;
        };
        const createData = (typeNumber, errorCorrectionLevel, dataList) => {
            const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);
            const buffer = qrBitBuffer();
            for (let i = 0; i < dataList.length; i += 1) {
                const data = dataList[i];
                buffer.put(data.getMode(), 4);
                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));
                data.write(buffer);
            }
            // calc num max data.
            let totalDataCount = 0;
            for (let i = 0; i < rsBlocks.length; i += 1) {
                totalDataCount += rsBlocks[i].dataCount;
            }
            if (buffer.getLengthInBits() > totalDataCount * 8) {
                throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
            }
            // end code
            if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
                buffer.put(0, 4);
            }
            // padding
            while (buffer.getLengthInBits() % 8 !== 0) {
                buffer.putBit(false);
            }
            // padding
            while (true) {
                if (buffer.getLengthInBits() >= totalDataCount * 8) {
                    break;
                }
                buffer.put(PAD0, 8);
                if (buffer.getLengthInBits() >= totalDataCount * 8) {
                    break;
                }
                buffer.put(PAD1, 8);
            }
            return createBytes(buffer, rsBlocks);
        };
        _this.addData = (data, mode) => {
            mode = mode || "Byte";
            let newData = null;
            switch (mode) {
                case "Numeric":
                    newData = qrNumber(data);
                    break;
                case "Alphanumeric":
                    newData = qrAlphaNum(data);
                    break;
                case "Byte":
                    newData = qr8BitByte(data);
                    break;
                case "Kanji":
                    newData = qrKanji(data);
                    break;
                default:
                    throw new Error("mode:" + mode);
            }
            _dataList.push(newData);
            _dataCache = null;
        };
        _this.getModules = () => {
            return _modules;
        };
        _this.isDark = (row, col) => {
            if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
                throw new Error(row + "," + col);
            }
            return _modules[row][col];
        };
        _this.getModuleCount = () => {
            return _moduleCount;
        };
        _this.make = () => {
            if (_typeNumber < 1) {
                let typeNumber = 1;
                for (; typeNumber < 40; typeNumber++) {
                    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);
                    const buffer = qrBitBuffer();
                    for (let i = 0; i < _dataList.length; i++) {
                        const data = _dataList[i];
                        buffer.put(data.getMode(), 4);
                        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));
                        data.write(buffer);
                    }
                    let totalDataCount = 0;
                    for (let i = 0; i < rsBlocks.length; i++) {
                        totalDataCount += rsBlocks[i].dataCount;
                    }
                    if (buffer.getLengthInBits() <= totalDataCount * 8) {
                        break;
                    }
                }
                _typeNumber = typeNumber;
            }
            makeImpl(false, getBestMaskPattern());
        };
        _this.createTableTag = (cellSize, margin) => {
            cellSize = cellSize || 2;
            margin = typeof margin === "undefined" ? cellSize * 4 : margin;
            let qrHtml = "";
            qrHtml += '<table style="';
            qrHtml += " border-width: 0px; border-style: none;";
            qrHtml += " border-collapse: collapse;";
            qrHtml += " padding: 0px; margin: " + margin + "px;";
            qrHtml += '">';
            qrHtml += "<tbody>";
            for (let r = 0; r < _this.getModuleCount(); r += 1) {
                qrHtml += "<tr>";
                for (let c = 0; c < _this.getModuleCount(); c += 1) {
                    qrHtml += '<td style="';
                    qrHtml += " border-width: 0px; border-style: none;";
                    qrHtml += " border-collapse: collapse;";
                    qrHtml += " padding: 0px; margin: 0px;";
                    qrHtml += " width: " + cellSize + "px;";
                    qrHtml += " height: " + cellSize + "px;";
                    qrHtml += " background-color: ";
                    qrHtml += _this.isDark(r, c) ? "#000000" : "#ffffff";
                    qrHtml += ";";
                    qrHtml += '"/>';
                }
                qrHtml += "</tr>";
            }
            qrHtml += "</tbody>";
            qrHtml += "</table>";
            return qrHtml;
        };
        _this.renderTo2dContext = (context, cellSize) => {
            cellSize = cellSize || 2;
            const length = _this.getModuleCount();
            for (let row = 0; row < length; row++) {
                for (let col = 0; col < length; col++) {
                    context.fillStyle = _this.isDark(row, col) ? "black" : "white";
                    context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
                }
            }
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // qrcode.stringToBytes
    // ---------------------------------------------------------------------
    qrcode.stringToBytesFuncs = {
        default(s) {
            const bytes = [];
            for (let i = 0; i < s.length; i += 1) {
                const c = s.charCodeAt(i);
                bytes.push(c & 0xff);
            }
            return bytes;
        },
    };
    qrcode.stringToBytes = qrcode.stringToBytesFuncs.default;
    // ---------------------------------------------------------------------
    // qrcode.createStringToBytes
    // ---------------------------------------------------------------------
    /**
     * @param unicodeData base64 string of byte array.
     * [16bit Unicode],[16bit Bytes], ...
     * @param numChars
     */
    qrcode.createStringToBytes = (unicodeData, numChars) => {
        // create conversion map.
        const unicodeMap = (() => {
            const bin = base64DecodeInputStream(unicodeData);
            const read = () => {
                const b = bin.read();
                if (b === -1) {
                    throw new Error("eof");
                }
                return b;
            };
            let count = 0;
            const result = {};
            while (true) {
                const b0 = bin.read();
                if (b0 === -1) {
                    break;
                }
                const b1 = read();
                const b2 = read();
                const b3 = read();
                const k = String.fromCharCode((b0 << 8) | b1);
                const v = (b2 << 8) | b3;
                result[k] = v;
                count += 1;
            }
            if (count !== numChars) {
                throw new Error(count + " !==" + numChars);
            }
            return result;
        })();
        const unknownChar = "?".charCodeAt(0);
        return (s) => {
            const bytes = [];
            for (let i = 0; i < s.length; i += 1) {
                const c = s.charCodeAt(i);
                if (c < 128) {
                    bytes.push(c);
                }
                else {
                    const b = unicodeMap[s.charAt(i)];
                    if (typeof b === "number") {
                        if ((b & 0xff) === b) {
                            // 1byte
                            bytes.push(b);
                        }
                        else {
                            // 2bytes
                            bytes.push(b >>> 8);
                            bytes.push(b & 0xff);
                        }
                    }
                    else {
                        bytes.push(unknownChar);
                    }
                }
            }
            return bytes;
        };
    };
    // ---------------------------------------------------------------------
    // QRMode
    // ---------------------------------------------------------------------
    const QRMode = {
        MODE_NUMBER: 1 << 0,
        MODE_ALPHA_NUM: 1 << 1,
        MODE_8BIT_BYTE: 1 << 2,
        MODE_KANJI: 1 << 3,
    };
    // ---------------------------------------------------------------------
    // QRErrorCorrectionLevel
    // ---------------------------------------------------------------------
    const QRErrorCorrectionLevel = {
        L: 1,
        M: 0,
        Q: 3,
        H: 2,
    };
    // ---------------------------------------------------------------------
    // QRMaskPattern
    // ---------------------------------------------------------------------
    const QRMaskPattern = {
        PATTERN000: 0,
        PATTERN001: 1,
        PATTERN010: 2,
        PATTERN011: 3,
        PATTERN100: 4,
        PATTERN101: 5,
        PATTERN110: 6,
        PATTERN111: 7,
    };
    // ---------------------------------------------------------------------
    // QRUtil
    // ---------------------------------------------------------------------
    const QRUtil = (() => {
        const PATTERN_POSITION_TABLE = [
            [],
            [6, 18],
            [6, 22],
            [6, 26],
            [6, 30],
            [6, 34],
            [6, 22, 38],
            [6, 24, 42],
            [6, 26, 46],
            [6, 28, 50],
            [6, 30, 54],
            [6, 32, 58],
            [6, 34, 62],
            [6, 26, 46, 66],
            [6, 26, 48, 70],
            [6, 26, 50, 74],
            [6, 30, 54, 78],
            [6, 30, 56, 82],
            [6, 30, 58, 86],
            [6, 34, 62, 90],
            [6, 28, 50, 72, 94],
            [6, 26, 50, 74, 98],
            [6, 30, 54, 78, 102],
            [6, 28, 54, 80, 106],
            [6, 32, 58, 84, 110],
            [6, 30, 58, 86, 114],
            [6, 34, 62, 90, 118],
            [6, 26, 50, 74, 98, 122],
            [6, 30, 54, 78, 102, 126],
            [6, 26, 52, 78, 104, 130],
            [6, 30, 56, 82, 108, 134],
            [6, 34, 60, 86, 112, 138],
            [6, 30, 58, 86, 114, 142],
            [6, 34, 62, 90, 118, 146],
            [6, 30, 54, 78, 102, 126, 150],
            [6, 24, 50, 76, 102, 128, 154],
            [6, 28, 54, 80, 106, 132, 158],
            [6, 32, 58, 84, 110, 136, 162],
            [6, 26, 54, 82, 110, 138, 166],
            [6, 30, 58, 86, 114, 142, 170],
        ];
        const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
        const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
        const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
        const _this = {};
        const getBCHDigit = (data) => {
            let digit = 0;
            while (data !== 0) {
                digit += 1;
                data >>>= 1;
            }
            return digit;
        };
        _this.getBCHTypeInfo = (data) => {
            let d = data << 10;
            while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {
                d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15));
            }
            return ((data << 10) | d) ^ G15_MASK;
        };
        _this.getBCHTypeNumber = (data) => {
            let d = data << 12;
            while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {
                d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18));
            }
            return (data << 12) | d;
        };
        _this.getPatternPosition = (typeNumber) => {
            return PATTERN_POSITION_TABLE[typeNumber - 1];
        };
        _this.getMaskFunction = (maskPattern) => {
            switch (maskPattern) {
                case QRMaskPattern.PATTERN000:
                    return (i, j) => {
                        return (i + j) % 2 === 0;
                    };
                case QRMaskPattern.PATTERN001:
                    return (i, j) => {
                        return i % 2 === 0;
                    };
                case QRMaskPattern.PATTERN010:
                    return (i, j) => {
                        return j % 3 === 0;
                    };
                case QRMaskPattern.PATTERN011:
                    return (i, j) => {
                        return (i + j) % 3 === 0;
                    };
                case QRMaskPattern.PATTERN100:
                    return (i, j) => {
                        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
                    };
                case QRMaskPattern.PATTERN101:
                    return (i, j) => {
                        return ((i * j) % 2) + ((i * j) % 3) === 0;
                    };
                case QRMaskPattern.PATTERN110:
                    return (i, j) => {
                        return (((i * j) % 2) + ((i * j) % 3)) % 2 === 0;
                    };
                case QRMaskPattern.PATTERN111:
                    return (i, j) => {
                        return (((i * j) % 3) + ((i + j) % 2)) % 2 === 0;
                    };
                default:
                    throw new Error("bad maskPattern:" + maskPattern);
            }
        };
        _this.getErrorCorrectPolynomial = (errorCorrectLength) => {
            let a = qrPolynomial([1], 0);
            for (let i = 0; i < errorCorrectLength; i += 1) {
                a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));
            }
            return a;
        };
        _this.getLengthInBits = (mode, type) => {
            if (1 <= type && type < 10) {
                // 1 - 9
                switch (mode) {
                    case QRMode.MODE_NUMBER:
                        return 10;
                    case QRMode.MODE_ALPHA_NUM:
                        return 9;
                    case QRMode.MODE_8BIT_BYTE:
                        return 8;
                    case QRMode.MODE_KANJI:
                        return 8;
                    default:
                        throw new Error("mode:" + mode);
                }
            }
            else if (type < 27) {
                // 10 - 26
                switch (mode) {
                    case QRMode.MODE_NUMBER:
                        return 12;
                    case QRMode.MODE_ALPHA_NUM:
                        return 11;
                    case QRMode.MODE_8BIT_BYTE:
                        return 16;
                    case QRMode.MODE_KANJI:
                        return 10;
                    default:
                        throw new Error("mode:" + mode);
                }
            }
            else if (type < 41) {
                // 27 - 40
                switch (mode) {
                    case QRMode.MODE_NUMBER:
                        return 14;
                    case QRMode.MODE_ALPHA_NUM:
                        return 13;
                    case QRMode.MODE_8BIT_BYTE:
                        return 16;
                    case QRMode.MODE_KANJI:
                        return 12;
                    default:
                        throw new Error("mode:" + mode);
                }
            }
            else {
                throw new Error("type:" + type);
            }
        };
        _this.getLostPoint = (__qrcode) => {
            const moduleCount = __qrcode.getModuleCount();
            let lostPoint = 0;
            // LEVEL1
            for (let row = 0; row < moduleCount; row += 1) {
                for (let col = 0; col < moduleCount; col += 1) {
                    let sameCount = 0;
                    const dark = __qrcode.isDark(row, col);
                    for (let r = -1; r <= 1; r += 1) {
                        if (row + r < 0 || moduleCount <= row + r) {
                            continue;
                        }
                        for (let c = -1; c <= 1; c += 1) {
                            if (col + c < 0 || moduleCount <= col + c) {
                                continue;
                            }
                            if (r === 0 && c === 0) {
                                continue;
                            }
                            if (dark === __qrcode.isDark(row + r, col + c)) {
                                sameCount += 1;
                            }
                        }
                    }
                    if (sameCount > 5) {
                        lostPoint += 3 + sameCount - 5;
                    }
                }
            }
            // LEVEL2
            for (let row = 0; row < moduleCount - 1; row += 1) {
                for (let col = 0; col < moduleCount - 1; col += 1) {
                    let count = 0;
                    if (__qrcode.isDark(row, col)) {
                        count += 1;
                    }
                    if (__qrcode.isDark(row + 1, col)) {
                        count += 1;
                    }
                    if (__qrcode.isDark(row, col + 1)) {
                        count += 1;
                    }
                    if (__qrcode.isDark(row + 1, col + 1)) {
                        count += 1;
                    }
                    if (count === 0 || count === 4) {
                        lostPoint += 3;
                    }
                }
            }
            // LEVEL3
            for (let row = 0; row < moduleCount; row += 1) {
                for (let col = 0; col < moduleCount - 6; col += 1) {
                    if (__qrcode.isDark(row, col) &&
                        !__qrcode.isDark(row, col + 1) &&
                        __qrcode.isDark(row, col + 2) &&
                        __qrcode.isDark(row, col + 3) &&
                        __qrcode.isDark(row, col + 4) &&
                        !__qrcode.isDark(row, col + 5) &&
                        __qrcode.isDark(row, col + 6)) {
                        lostPoint += 40;
                    }
                }
            }
            for (let col = 0; col < moduleCount; col += 1) {
                for (let row = 0; row < moduleCount - 6; row += 1) {
                    if (__qrcode.isDark(row, col) &&
                        !__qrcode.isDark(row + 1, col) &&
                        __qrcode.isDark(row + 2, col) &&
                        __qrcode.isDark(row + 3, col) &&
                        __qrcode.isDark(row + 4, col) &&
                        !__qrcode.isDark(row + 5, col) &&
                        __qrcode.isDark(row + 6, col)) {
                        lostPoint += 40;
                    }
                }
            }
            // LEVEL4
            let darkCount = 0;
            for (let col = 0; col < moduleCount; col += 1) {
                for (let row = 0; row < moduleCount; row += 1) {
                    if (__qrcode.isDark(row, col)) {
                        darkCount += 1;
                    }
                }
            }
            const ratio = Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;
            lostPoint += ratio * 10;
            return lostPoint;
        };
        return _this;
    })();
    // ---------------------------------------------------------------------
    // QRMath
    // ---------------------------------------------------------------------
    const QRMath = (() => {
        const EXP_TABLE = new Array(256);
        const LOG_TABLE = new Array(256);
        // initialize tables
        for (let i = 0; i < 8; i += 1) {
            EXP_TABLE[i] = 1 << i;
        }
        for (let i = 8; i < 256; i += 1) {
            EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];
        }
        for (let i = 0; i < 255; i += 1) {
            LOG_TABLE[EXP_TABLE[i]] = i;
        }
        const _this = {};
        _this.glog = (n) => {
            if (n < 1) {
                throw new Error("glog(" + n + ")");
            }
            return LOG_TABLE[n];
        };
        _this.gexp = (n) => {
            while (n < 0) {
                n += 255;
            }
            while (n >= 256) {
                n -= 255;
            }
            return EXP_TABLE[n];
        };
        return _this;
    })();
    // ---------------------------------------------------------------------
    // qrPolynomial
    // ---------------------------------------------------------------------
    function qrPolynomial(num, shift) {
        if (typeof num.length === "undefined") {
            throw new Error(num.length + "/" + shift);
        }
        const _num = (() => {
            let offset = 0;
            while (offset < num.length && num[offset] === 0) {
                offset += 1;
            }
            const __num = new Array(num.length - offset + shift);
            for (let i = 0; i < num.length - offset; i += 1) {
                __num[i] = num[i + offset];
            }
            return __num;
        })();
        const _this = {};
        _this.getAt = (index) => {
            return _num[index];
        };
        _this.getLength = () => {
            return _num.length;
        };
        _this.multiply = (e) => {
            const ___num = new Array(_this.getLength() + e.getLength() - 1);
            for (let i = 0; i < _this.getLength(); i += 1) {
                for (let j = 0; j < e.getLength(); j += 1) {
                    ___num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));
                }
            }
            return qrPolynomial(___num, 0);
        };
        _this.mod = (e) => {
            if (_this.getLength() - e.getLength() < 0) {
                return _this;
            }
            const ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));
            const __num = new Array(_this.getLength());
            for (let i = 0; i < _this.getLength(); i += 1) {
                __num[i] = _this.getAt(i);
            }
            for (let i = 0; i < e.getLength(); i += 1) {
                __num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);
            }
            // recursive call
            return qrPolynomial(__num, 0).mod(e);
        };
        return _this;
    }
    // ---------------------------------------------------------------------
    // QRRSBlock
    // ---------------------------------------------------------------------
    const QRRSBlock = (() => {
        const RS_BLOCK_TABLE = [
            // L
            // M
            // Q
            // H
            // 1
            [1, 26, 19],
            [1, 26, 16],
            [1, 26, 13],
            [1, 26, 9],
            // 2
            [1, 44, 34],
            [1, 44, 28],
            [1, 44, 22],
            [1, 44, 16],
            // 3
            [1, 70, 55],
            [1, 70, 44],
            [2, 35, 17],
            [2, 35, 13],
            // 4
            [1, 100, 80],
            [2, 50, 32],
            [2, 50, 24],
            [4, 25, 9],
            // 5
            [1, 134, 108],
            [2, 67, 43],
            [2, 33, 15, 2, 34, 16],
            [2, 33, 11, 2, 34, 12],
            // 6
            [2, 86, 68],
            [4, 43, 27],
            [4, 43, 19],
            [4, 43, 15],
            // 7
            [2, 98, 78],
            [4, 49, 31],
            [2, 32, 14, 4, 33, 15],
            [4, 39, 13, 1, 40, 14],
            // 8
            [2, 121, 97],
            [2, 60, 38, 2, 61, 39],
            [4, 40, 18, 2, 41, 19],
            [4, 40, 14, 2, 41, 15],
            // 9
            [2, 146, 116],
            [3, 58, 36, 2, 59, 37],
            [4, 36, 16, 4, 37, 17],
            [4, 36, 12, 4, 37, 13],
            // 10
            [2, 86, 68, 2, 87, 69],
            [4, 69, 43, 1, 70, 44],
            [6, 43, 19, 2, 44, 20],
            [6, 43, 15, 2, 44, 16],
            // 11
            [4, 101, 81],
            [1, 80, 50, 4, 81, 51],
            [4, 50, 22, 4, 51, 23],
            [3, 36, 12, 8, 37, 13],
            // 12
            [2, 116, 92, 2, 117, 93],
            [6, 58, 36, 2, 59, 37],
            [4, 46, 20, 6, 47, 21],
            [7, 42, 14, 4, 43, 15],
            // 13
            [4, 133, 107],
            [8, 59, 37, 1, 60, 38],
            [8, 44, 20, 4, 45, 21],
            [12, 33, 11, 4, 34, 12],
            // 14
            [3, 145, 115, 1, 146, 116],
            [4, 64, 40, 5, 65, 41],
            [11, 36, 16, 5, 37, 17],
            [11, 36, 12, 5, 37, 13],
            // 15
            [5, 109, 87, 1, 110, 88],
            [5, 65, 41, 5, 66, 42],
            [5, 54, 24, 7, 55, 25],
            [11, 36, 12, 7, 37, 13],
            // 16
            [5, 122, 98, 1, 123, 99],
            [7, 73, 45, 3, 74, 46],
            [15, 43, 19, 2, 44, 20],
            [3, 45, 15, 13, 46, 16],
            // 17
            [1, 135, 107, 5, 136, 108],
            [10, 74, 46, 1, 75, 47],
            [1, 50, 22, 15, 51, 23],
            [2, 42, 14, 17, 43, 15],
            // 18
            [5, 150, 120, 1, 151, 121],
            [9, 69, 43, 4, 70, 44],
            [17, 50, 22, 1, 51, 23],
            [2, 42, 14, 19, 43, 15],
            // 19
            [3, 141, 113, 4, 142, 114],
            [3, 70, 44, 11, 71, 45],
            [17, 47, 21, 4, 48, 22],
            [9, 39, 13, 16, 40, 14],
            // 20
            [3, 135, 107, 5, 136, 108],
            [3, 67, 41, 13, 68, 42],
            [15, 54, 24, 5, 55, 25],
            [15, 43, 15, 10, 44, 16],
            // 21
            [4, 144, 116, 4, 145, 117],
            [17, 68, 42],
            [17, 50, 22, 6, 51, 23],
            [19, 46, 16, 6, 47, 17],
            // 22
            [2, 139, 111, 7, 140, 112],
            [17, 74, 46],
            [7, 54, 24, 16, 55, 25],
            [34, 37, 13],
            // 23
            [4, 151, 121, 5, 152, 122],
            [4, 75, 47, 14, 76, 48],
            [11, 54, 24, 14, 55, 25],
            [16, 45, 15, 14, 46, 16],
            // 24
            [6, 147, 117, 4, 148, 118],
            [6, 73, 45, 14, 74, 46],
            [11, 54, 24, 16, 55, 25],
            [30, 46, 16, 2, 47, 17],
            // 25
            [8, 132, 106, 4, 133, 107],
            [8, 75, 47, 13, 76, 48],
            [7, 54, 24, 22, 55, 25],
            [22, 45, 15, 13, 46, 16],
            // 26
            [10, 142, 114, 2, 143, 115],
            [19, 74, 46, 4, 75, 47],
            [28, 50, 22, 6, 51, 23],
            [33, 46, 16, 4, 47, 17],
            // 27
            [8, 152, 122, 4, 153, 123],
            [22, 73, 45, 3, 74, 46],
            [8, 53, 23, 26, 54, 24],
            [12, 45, 15, 28, 46, 16],
            // 28
            [3, 147, 117, 10, 148, 118],
            [3, 73, 45, 23, 74, 46],
            [4, 54, 24, 31, 55, 25],
            [11, 45, 15, 31, 46, 16],
            // 29
            [7, 146, 116, 7, 147, 117],
            [21, 73, 45, 7, 74, 46],
            [1, 53, 23, 37, 54, 24],
            [19, 45, 15, 26, 46, 16],
            // 30
            [5, 145, 115, 10, 146, 116],
            [19, 75, 47, 10, 76, 48],
            [15, 54, 24, 25, 55, 25],
            [23, 45, 15, 25, 46, 16],
            // 31
            [13, 145, 115, 3, 146, 116],
            [2, 74, 46, 29, 75, 47],
            [42, 54, 24, 1, 55, 25],
            [23, 45, 15, 28, 46, 16],
            // 32
            [17, 145, 115],
            [10, 74, 46, 23, 75, 47],
            [10, 54, 24, 35, 55, 25],
            [19, 45, 15, 35, 46, 16],
            // 33
            [17, 145, 115, 1, 146, 116],
            [14, 74, 46, 21, 75, 47],
            [29, 54, 24, 19, 55, 25],
            [11, 45, 15, 46, 46, 16],
            // 34
            [13, 145, 115, 6, 146, 116],
            [14, 74, 46, 23, 75, 47],
            [44, 54, 24, 7, 55, 25],
            [59, 46, 16, 1, 47, 17],
            // 35
            [12, 151, 121, 7, 152, 122],
            [12, 75, 47, 26, 76, 48],
            [39, 54, 24, 14, 55, 25],
            [22, 45, 15, 41, 46, 16],
            // 36
            [6, 151, 121, 14, 152, 122],
            [6, 75, 47, 34, 76, 48],
            [46, 54, 24, 10, 55, 25],
            [2, 45, 15, 64, 46, 16],
            // 37
            [17, 152, 122, 4, 153, 123],
            [29, 74, 46, 14, 75, 47],
            [49, 54, 24, 10, 55, 25],
            [24, 45, 15, 46, 46, 16],
            // 38
            [4, 152, 122, 18, 153, 123],
            [13, 74, 46, 32, 75, 47],
            [48, 54, 24, 14, 55, 25],
            [42, 45, 15, 32, 46, 16],
            // 39
            [20, 147, 117, 4, 148, 118],
            [40, 75, 47, 7, 76, 48],
            [43, 54, 24, 22, 55, 25],
            [10, 45, 15, 67, 46, 16],
            // 40
            [19, 148, 118, 6, 149, 119],
            [18, 75, 47, 31, 76, 48],
            [34, 54, 24, 34, 55, 25],
            [20, 45, 15, 61, 46, 16],
        ];
        const qrRSBlock = (totalCount, dataCount) => {
            const result = {};
            result.totalCount = totalCount;
            result.dataCount = dataCount;
            return result;
        };
        const _this = {};
        const getRsBlockTable = (typeNumber, errorCorrectionLevel) => {
            switch (errorCorrectionLevel) {
                case QRErrorCorrectionLevel.L:
                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
                case QRErrorCorrectionLevel.M:
                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
                case QRErrorCorrectionLevel.Q:
                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
                case QRErrorCorrectionLevel.H:
                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
                default:
                    return undefined;
            }
        };
        _this.getRSBlocks = (typeNumber, errorCorrectionLevel) => {
            const rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
            if (typeof rsBlock === "undefined") {
                throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel);
            }
            const length = rsBlock.length / 3;
            const list = [];
            for (let i = 0; i < length; i += 1) {
                const count = rsBlock[i * 3 + 0];
                const totalCount = rsBlock[i * 3 + 1];
                const dataCount = rsBlock[i * 3 + 2];
                for (let j = 0; j < count; j += 1) {
                    list.push(qrRSBlock(totalCount, dataCount));
                }
            }
            return list;
        };
        return _this;
    })();
    // ---------------------------------------------------------------------
    // qrBitBuffer
    // ---------------------------------------------------------------------
    const qrBitBuffer = () => {
        const _buffer = [];
        let _length = 0;
        const _this = {};
        _this.getBuffer = () => {
            return _buffer;
        };
        _this.getAt = (index) => {
            const bufIndex = Math.floor(index / 8);
            return ((_buffer[bufIndex] >>> (7 - (index % 8))) & 1) === 1;
        };
        _this.put = (num, length) => {
            for (let i = 0; i < length; i += 1) {
                _this.putBit(((num >>> (length - i - 1)) & 1) === 1);
            }
        };
        _this.getLengthInBits = () => {
            return _length;
        };
        _this.putBit = (bit) => {
            const bufIndex = Math.floor(_length / 8);
            if (_buffer.length <= bufIndex) {
                _buffer.push(0);
            }
            if (bit) {
                _buffer[bufIndex] |= 0x80 >>> _length % 8;
            }
            _length += 1;
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // qrNumber
    // ---------------------------------------------------------------------
    const qrNumber = (_data) => {
        const _mode = QRMode.MODE_NUMBER;
        const _this = {};
        _this.getMode = () => {
            return _mode;
        };
        _this.getLength = (buffer) => {
            return _data.length;
        };
        _this.write = (buffer) => {
            const data = _data;
            let i = 0;
            while (i + 2 < data.length) {
                buffer.put(strToNum(data.substring(i, i + 3)), 10);
                i += 3;
            }
            if (i < data.length) {
                if (data.length - i === 1) {
                    buffer.put(strToNum(data.substring(i, i + 1)), 4);
                }
                else if (data.length - i === 2) {
                    buffer.put(strToNum(data.substring(i, i + 2)), 7);
                }
            }
        };
        const strToNum = (s) => {
            let num = 0;
            for (let i = 0; i < s.length; i += 1) {
                num = num * 10 + chatToNum(s.charAt(i));
            }
            return num;
        };
        const chatToNum = (c) => {
            if ("0" <= c && c <= "9") {
                return c.charCodeAt(0) - "0".charCodeAt(0);
            }
            throw new Error("illegal char :" + c);
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // qrAlphaNum
    // ---------------------------------------------------------------------
    const qrAlphaNum = (data) => {
        const _mode = QRMode.MODE_ALPHA_NUM;
        const _data = data;
        const _this = {};
        _this.getMode = () => {
            return _mode;
        };
        _this.getLength = (buffer) => {
            return _data.length;
        };
        _this.write = (buffer) => {
            const s = _data;
            let i = 0;
            while (i + 1 < s.length) {
                buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);
                i += 2;
            }
            if (i < s.length) {
                buffer.put(getCode(s.charAt(i)), 6);
            }
        };
        const getCode = (c) => {
            if ("0" <= c && c <= "9") {
                return c.charCodeAt(0) - "0".charCodeAt(0);
            }
            else if ("A" <= c && c <= "Z") {
                return c.charCodeAt(0) - "A".charCodeAt(0) + 10;
            }
            else {
                switch (c) {
                    case " ":
                        return 36;
                    case "$":
                        return 37;
                    case "%":
                        return 38;
                    case "*":
                        return 39;
                    case "+":
                        return 40;
                    case "-":
                        return 41;
                    case ".":
                        return 42;
                    case "/":
                        return 43;
                    case ":":
                        return 44;
                    default:
                        throw new Error("illegal char :" + c);
                }
            }
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // qr8BitByte
    // ---------------------------------------------------------------------
    const qr8BitByte = (data) => {
        const _mode = QRMode.MODE_8BIT_BYTE;
        const _data = data;
        const _bytes = qrcode.stringToBytes(data);
        const _this = {};
        _this.getMode = () => {
            return _mode;
        };
        _this.getLength = (buffer) => {
            return _bytes.length;
        };
        _this.write = (buffer) => {
            for (let i = 0; i < _bytes.length; i += 1) {
                buffer.put(_bytes[i], 8);
            }
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // qrKanji
    // ---------------------------------------------------------------------
    const qrKanji = (data) => {
        const _mode = QRMode.MODE_KANJI;
        const _data = data;
        const stringToBytes = qrcode.stringToBytesFuncs.SJIS;
        if (!stringToBytes) {
            throw new Error("sjis not supported.");
        }
        // tslint:disable:no-unused-expression
        // @ts-ignore
        !((c, code) => {
            // self test for sjis support.
            const test = stringToBytes(c);
            if (test.length !== 2 || ((test[0] << 8) | test[1]) !== code) {
                throw new Error("sjis not supported.");
            }
        })("\u53cb", 0x9746);
        // tslint:enable:no-unused-expression
        const _bytes = stringToBytes(data);
        const _this = {};
        _this.getMode = () => {
            return _mode;
        };
        _this.getLength = (buffer) => {
            return ~~(_bytes.length / 2);
        };
        _this.write = (buffer) => {
            const __data = _bytes;
            let i = 0;
            while (i + 1 < __data.length) {
                let c = ((0xff & __data[i]) << 8) | (0xff & __data[i + 1]);
                if (0x8140 <= c && c <= 0x9ffc) {
                    c -= 0x8140;
                }
                else if (0xe040 <= c && c <= 0xebbf) {
                    c -= 0xc140;
                }
                else {
                    throw new Error("illegal char at " + (i + 1) + "/" + c);
                }
                c = ((c >>> 8) & 0xff) * 0xc0 + (c & 0xff);
                buffer.put(c, 13);
                i += 2;
            }
            if (i < __data.length) {
                throw new Error("illegal char at " + (i + 1));
            }
        };
        return _this;
    };
    // =====================================================================
    // GIF Support etc.
    //
    // ---------------------------------------------------------------------
    // byteArrayOutputStream
    // ---------------------------------------------------------------------
    const byteArrayOutputStream = () => {
        const _bytes = [];
        const _this = {};
        _this.writeByte = (b) => {
            _bytes.push(b & 0xff);
        };
        _this.writeShort = (i) => {
            _this.writeByte(i);
            _this.writeByte(i >>> 8);
        };
        _this.writeBytes = (b, off, len) => {
            off = off || 0;
            len = len || b.length;
            for (let i = 0; i < len; i += 1) {
                _this.writeByte(b[i + off]);
            }
        };
        _this.writeString = (s) => {
            for (let i = 0; i < s.length; i += 1) {
                _this.writeByte(s.charCodeAt(i));
            }
        };
        _this.toByteArray = () => {
            return _bytes;
        };
        _this.toString = () => {
            let s = "";
            s += "[";
            for (let i = 0; i < _bytes.length; i += 1) {
                if (i > 0) {
                    s += ",";
                }
                s += _bytes[i];
            }
            s += "]";
            return s;
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // base64EncodeOutputStream
    // ---------------------------------------------------------------------
    const base64EncodeOutputStream = () => {
        let _buffer = 0;
        let _buflen = 0;
        let _length = 0;
        let _base64 = "";
        const _this = {};
        const writeEncoded = (b) => {
            _base64 += String.fromCharCode(encode(b & 0x3f));
        };
        const encode = (n) => {
            if (n < 0) {
                // error.
            }
            else if (n < 26) {
                return 0x41 + n;
            }
            else if (n < 52) {
                return 0x61 + (n - 26);
            }
            else if (n < 62) {
                return 0x30 + (n - 52);
            }
            else if (n === 62) {
                return 0x2b;
            }
            else if (n === 63) {
                return 0x2f;
            }
            throw new Error("n:" + n);
        };
        _this.writeByte = (n) => {
            _buffer = (_buffer << 8) | (n & 0xff);
            _buflen += 8;
            _length += 1;
            while (_buflen >= 6) {
                writeEncoded(_buffer >>> (_buflen - 6));
                _buflen -= 6;
            }
        };
        _this.flush = () => {
            if (_buflen > 0) {
                writeEncoded(_buffer << (6 - _buflen));
                _buffer = 0;
                _buflen = 0;
            }
            if (_length % 3 !== 0) {
                // padding
                const padlen = 3 - (_length % 3);
                for (let i = 0; i < padlen; i += 1) {
                    _base64 += "=";
                }
            }
        };
        _this.toString = () => {
            return _base64;
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // base64DecodeInputStream
    // ---------------------------------------------------------------------
    const base64DecodeInputStream = (str) => {
        const _str = str;
        let _pos = 0;
        let _buffer = 0;
        let _buflen = 0;
        const _this = {};
        _this.read = () => {
            while (_buflen < 8) {
                if (_pos >= _str.length) {
                    if (_buflen === 0) {
                        return -1;
                    }
                    throw new Error("unexpected end of file./" + _buflen);
                }
                const c = _str.charAt(_pos);
                _pos += 1;
                if (c === "=") {
                    _buflen = 0;
                    return -1;
                }
                else if (c.match(/^\s$/)) {
                    // ignore if whitespace.
                    continue;
                }
                _buffer = (_buffer << 6) | decode(c.charCodeAt(0));
                _buflen += 6;
            }
            const n = (_buffer >>> (_buflen - 8)) & 0xff;
            _buflen -= 8;
            return n;
        };
        const decode = (c) => {
            if (0x41 <= c && c <= 0x5a) {
                return c - 0x41;
            }
            else if (0x61 <= c && c <= 0x7a) {
                return c - 0x61 + 26;
            }
            else if (0x30 <= c && c <= 0x39) {
                return c - 0x30 + 52;
            }
            else if (c === 0x2b) {
                return 62;
            }
            else if (c === 0x2f) {
                return 63;
            }
            else {
                throw new Error("c:" + c);
            }
        };
        return _this;
    };
    // ---------------------------------------------------------------------
    // returns qrcode function.
    return qrcode;
})();
// multibyte support
// tslint:disable-next-line:no-unused-expression
// @ts-ignore
// tslint:disable-next-line:no-unused-expression
!(() => {
    _qrcode.stringToBytesFuncs["UTF-8"] = (s) => {
        // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
        function toUTF8Array(str) {
            const utf8 = [];
            for (let i = 0; i < str.length; i++) {
                let charcode = str.charCodeAt(i);
                if (charcode < 0x80) {
                    utf8.push(charcode);
                }
                else if (charcode < 0x800) {
                    utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
                }
                else if (charcode < 0xd800 || charcode >= 0xe000) {
                    utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
                }
                else {
                    i++;
                    // UTF-16 encodes 0x10000-0x10FFFF by
                    // subtracting 0x10000 and splitting the
                    // 20 bits of 0x0-0xFFFFF into two halves
                    charcode = 0x10000 + (((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));
                    utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
                }
            }
            return utf8;
        }
        return toUTF8Array(s);
    };
})();
exports.default = _qrcode;


/***/ }),

/***/ "./dist/src/obniz/libs/utils/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module ObnizCore
 */
class ObnizUtil {
    constructor(obniz) {
        this.obniz = obniz;
    }
    /**
     * @ignore
     * @param params
     * @param keys
     * @private
     */
    static _keyFilter(params, keys) {
        let filterdParams = {};
        if (typeof params !== 'object') {
            return filterdParams;
        }
        filterdParams = Object.keys(params)
            .filter((key) => keys.includes(key))
            .reduce((obj, key) => {
            obj[key] = params[key];
            return obj;
        }, {});
        return filterdParams;
    }
    /**
     * @ignore
     * @return {String} key name of not found.
     */
    static _requiredKeys(params, keys) {
        if (typeof params !== 'object') {
            return keys[0];
        }
        for (const index in keys) {
            if (!(keys[index] in params)) {
                return keys[index];
            }
        }
        return null;
    }
    /**
     * convert from data array to string
     *
     * @param data
     */
    static dataArray2string(data) {
        let string = null;
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
            if (StringDecoder) {
                string = new StringDecoder('utf8').write(Buffer.from(data));
            }
        }
        catch (e) {
            // this.obniz.error(e);
        }
        return string;
    }
    /**
     * convert from string to data array
     *
     * @param str
     */
    static string2dataArray(str) {
        const buf = Buffer.from(str);
        return [...buf];
    }
    /**
     * @ignore
     * @param data
     * @param reverse
     */
    static hexToBinary(data, reverse = false) {
        const array = [];
        const hex = data.toLowerCase().replace(/[^0-9abcdef]/g, '');
        for (let i = 0; i < hex.length / 2; i++) {
            array[i] = parseInt(hex[i * 2] + hex[i * 2 + 1], 16);
        }
        if (reverse) {
            array.reverse();
        }
        return array;
    }
    /**
     * @ignore
     * @param min
     * @param max
     * @param variable_name
     * @param variable
     */
    static assertNumber(min, max, variable_name, variable) {
        if (!(min <= variable && variable <= max)) {
            throw new Error(`${variable_name} is out of range.Input value : ${variable} .value range [ ${min} <= ${variable_name} <= ${max} ]`);
        }
    }
    /**
     * This creates a Canvas context.
     * It will add a canvas dom to body(in html).
     *
     * ```javascript
     * // Example
     * const ctx = obniz.util.createCanvasContext(128, 64);
     * ctx.font = "9px sans-serif";
     * ctx.fillText('Hello', 0, 7);
     * ```
     *
     * @param width
     * @param height
     */
    createCanvasContext(width, height) {
        if (this.obniz.isNode) {
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const { createCanvas } = __webpack_require__("./dist/src/obniz/libs/webpackReplace/canvas.js");
                const canvas = createCanvas(width, height);
                const ctx = canvas.getContext('2d');
                return ctx;
            }
            catch (e) {
                throw new Error('obniz.js require node-canvas to draw rich contents. see more detail on docs');
            }
        }
        else {
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            canvas.style['-webkit-font-smoothing'] = 'none';
            const body = document.getElementsByTagName('body')[0];
            body.appendChild(canvas);
            const ctx = canvas.getContext('2d');
            return ctx;
        }
    }
}
exports.default = ObnizUtil;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace/canvas.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
// load from webpack
Object.defineProperty(exports, "__esModule", { value: true });
const canvas = 'canvas';
exports.default = canvas;


/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace/dialogPollyfill-browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
// load from webpack
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_polyfill_1 = __importDefault(__webpack_require__("./node_modules/dialog-polyfill/dist/dialog-polyfill.esm.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const dialog_polyfill_css_1 = __importDefault(__webpack_require__("./node_modules/dialog-polyfill/dist/dialog-polyfill.css"));
exports.default = { dialogPolyfill: dialog_polyfill_1.default, css: dialog_polyfill_css_1.default };


/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace/require-context-browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
exports.default = {};


/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace/ws.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
// load from webpack
Object.defineProperty(exports, "__esModule", { value: true });
let ws;
if (typeof WebSocket !== 'undefined') {
    ws = WebSocket;
}
else if (typeof MozWebSocket !== 'undefined') {
    ws = MozWebSocket; // eslint-disable-line
}
else {
    ws = window.WebSocket || window.MozWebSocket;
}
class CompatibleWebSocket extends ws {
    constructor(url, protocols) {
        super(url, protocols);
        this.eventFunctionKetMap = {
            open: 'onopen',
            message: 'onmessage',
            close: 'onclose',
            error: 'onerror',
        };
        this.binaryType = 'arraybuffer';
    }
    on(event, f) {
        if (event === 'open') {
            this.onopen = (_) => {
                f();
            };
        }
        else if (event === 'message') {
            this.onmessage = (me) => {
                f(me.data);
            };
        }
        else if (event === 'close') {
            this.onclose = (ce) => {
                f(ce.code);
            };
        }
        else if (event === 'error') {
            this.onerror = (e) => {
                f(e);
            };
        }
    }
    removeAllListeners(event) {
        const functionName = this.eventFunctionKetMap[event];
        if (functionName) {
            this[functionName] = null;
        }
    }
}
exports.default = CompatibleWebSocket;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand sync recursive":
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./dist/src/obniz/libs/wscommand sync recursive";

/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommand.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @ignore
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const WSSchema_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSSchema.js"));
const commandClasses = {};
class WSCommand {
    constructor() {
        this._hw = {
            hw: undefined,
            firmware: undefined,
        };
        // constants
        this.COMMAND_FUNC_ID_ERROR = 0xff;
        this.ioNotUsed = 0xff;
    }
    static get schema() {
        return WSSchema_1.default;
    }
    static get CommandClasses() {
        return commandClasses;
    }
    get WSCommandNotFoundError() {
        return WSCommandNotFoundError;
    }
    static addCommandClass(name, classObj) {
        commandClasses[name] = classObj;
    }
    static framed(module, func, payload) {
        let payload_length = 0;
        if (payload) {
            payload_length = payload.length;
        }
        let length_type;
        if (payload_length <= 0x3f) {
            length_type = 0;
        }
        else if (payload_length <= 0x3fff) {
            length_type = 1;
        }
        else if (payload_length <= 0x3fffffff) {
            length_type = 2;
        }
        else {
            throw new Error('too big payload');
        }
        let length_extra_bytse = length_type === 0 ? 0 : length_type === 1 ? 1 : 3;
        const header_length = 3 + length_extra_bytse;
        const result = new Uint8Array(header_length + payload_length);
        let index = 0;
        result[index++] = module & 0x7f;
        result[index++] = func;
        result[index++] =
            (length_type << 6) | (payload_length >> (length_extra_bytse * 8));
        while (length_extra_bytse > 0) {
            length_extra_bytse--;
            result[index++] = payload_length >> (length_extra_bytse * 8);
        }
        if (payload_length === 0 || !payload) {
            return result;
        }
        else {
            result.set(payload, header_length);
            return result;
        }
    }
    /**
     * Dequeue a next wscommands from binary array.
     *
     * @param buf binary array received from obniz cloud.
     * @returns chunk
     */
    static dequeueOne(buf) {
        if (!buf || buf.byteLength === 0) {
            return null;
        }
        if (buf.byteLength < 3) {
            throw new Error('something wrong. buf less than 3');
        }
        if (buf[0] & 0x80) {
            throw new Error('reserved bit 1');
        }
        const module = 0x7f & buf[0];
        const func = buf[1];
        const length_type = (buf[2] >> 6) & 0x3;
        const length_extra_bytse = length_type === 0 ? 0 : length_type === 1 ? 1 : 3;
        if (length_type === 4) {
            throw new Error('invalid length');
        }
        let length = (buf[2] & 0x3f) << (length_extra_bytse * 8);
        let index = 3;
        let shift = length_extra_bytse;
        while (shift > 0) {
            shift--;
            length += buf[index] << (shift * 8);
            index++;
        }
        return {
            module,
            func,
            payload: buf.slice(3 + length_extra_bytse, 3 + length_extra_bytse + length),
            next: buf.slice(3 + length_extra_bytse + length),
        };
    }
    static compress(wscommands, json) {
        let ret = null;
        const append = (module, func, payload) => {
            const frame = WSCommand.framed(module, func, payload);
            if (ret) {
                const combined = new Uint8Array(ret.length + frame.length);
                combined.set(ret, 0);
                combined.set(frame, ret.length);
                ret = combined;
            }
            else {
                ret = frame;
            }
        };
        for (const wscommand of wscommands) {
            wscommand.parsed = append;
            wscommand.parseFromJson(json);
        }
        return ret;
    }
    setHw(obj) {
        this._hw = obj;
    }
    sendCommand(func, payload) {
        if (this.parsed) {
            this.parsed(this.module, func, payload);
        }
    }
    parseFromJson(json) {
        // abstract
    }
    // NOTE: payload is sent from obniz OS.
    notifyFromBinary(objToSend, func, payload) {
        if (func === this.COMMAND_FUNC_ID_ERROR) {
            if (!objToSend.debug) {
                objToSend.debug = {};
            }
            const err = {
                module: this.module,
                _args: [...payload],
                message: ``,
            };
            if (payload.byteLength === 3) {
                err.err0 = payload[0];
                err.err1 = payload[1];
                err.function = payload[2];
                // NOTE: Why two errors exist?
                err.message = `obnizOS recieved wscommand(moduleNo=${this.module}, funcNo=${err.function}) but it encountered an error(err0=${err.err0}, returned=${err.err1}).`;
            }
            else {
                err.message = `obnizOS recieved wscommand(moduleNo=${this.module}) but it encountered an error(errDetails(payload)=${err._args}).`;
            }
            objToSend.debug.error = err;
        }
        else {
            // unknown
        }
    }
    envelopWarning(objToSend, module_key, obj) {
        if (!objToSend[module_key]) {
            objToSend[module_key] = {};
        }
        objToSend[module_key].warning = obj;
    }
    envelopError(objToSend, module_key, obj) {
        if (!objToSend[module_key]) {
            objToSend[module_key] = {};
        }
        objToSend[module_key].error = obj;
    }
    isValidIO(io) {
        return typeof io === 'number' && 0 <= io && io <= 11;
    }
    getSchema(uri) {
        // chack isFirst
        return WSSchema_1.default.getSchema(uri);
    }
    validateCommandSchema(uriList, json, rootPath, customArg) {
        const res = { valid: 0, invalid: 0, results: [], invalidButLike: [] };
        for (const oneRow of uriList) {
            const errors = this.validate(oneRow.uri, json);
            res.results.push(errors);
            if (errors.valid) {
                res.valid++;
                if (oneRow.onValid) {
                    oneRow.onValid.bind(this)(this.filter(oneRow.uri, json), customArg);
                }
            }
            else {
                res.invalid++;
                const message = this.onlyTypeErrorMessage(errors, rootPath);
                if (message) {
                    res.invalidButLike.push({ uri: oneRow.uri, message });
                }
            }
        }
        return res;
    }
    validate(commandUri, json) {
        const schema = this.getSchema(commandUri);
        const results = WSSchema_1.default.validateMultiple(json, schema);
        return results;
    }
    fastValidate(commandUri, json) {
        const schema = this.getSchema(commandUri);
        const results = WSSchema_1.default.validate(json, schema);
        return results;
    }
    onlyTypeErrorMessage(validateError, rootPath) {
        if (validateError.valid) {
            return true;
        }
        if (validateError.missing && validateError.missing.length > 0) {
            return false;
        }
        const badErrorCodes = [
            WSSchema_1.default.errorCodes.ANY_OF_MISSING,
            WSSchema_1.default.errorCodes.ONE_OF_MISSING,
            WSSchema_1.default.errorCodes.ONE_OF_MULTIPLE,
            WSSchema_1.default.errorCodes.NOT_PASSED,
            WSSchema_1.default.errorCodes.OBJECT_REQUIRED,
            WSSchema_1.default.errorCodes.OBJECT_ADDITIONAL_PROPERTIES,
            WSSchema_1.default.errorCodes.CIRCULAR_REFERENCE,
            WSSchema_1.default.errorCodes.FORMAT_CUSTOM,
            WSSchema_1.default.errorCodes.KEYWORD_CUSTOM,
            WSSchema_1.default.errorCodes.UNKNOWN_PROPERTY,
        ];
        const messages = [];
        for (const error of validateError.errors) {
            if (error.code === WSSchema_1.default.errorCodes.INVALID_TYPE) {
                if (error.params.type === 'object' ||
                    error.params.expected === 'object') {
                    return false;
                }
            }
            else if (badErrorCodes.includes(error.code)) {
                return false;
            }
            const path = rootPath + (error.dataPath || '').replace(/\//g, '.');
            messages.push(`[${path}]${error.message}`);
        }
        return messages.join(';');
    }
    filter(commandUri, json) {
        const schema = this.getSchema(commandUri);
        return this._filterSchema(schema, json);
    }
    _filterSchema(schema, json) {
        if (schema.$ref) {
            const refSchema = WSSchema_1.default.getSchema(schema.$ref);
            return this._filterSchema(refSchema, json);
        }
        if (json === undefined) {
            return schema.default;
        }
        if (schema.type === 'string' ||
            schema.type === 'integer' ||
            schema.type === 'boolean' ||
            schema.type === 'number' ||
            schema.type === 'null' ||
            schema.filter === 'pass_all') {
            return json;
        }
        if (schema.type === 'array') {
            const results = [];
            for (const key in json) {
                results[key] = this._filterSchema(schema.items, json[key]);
            }
            return results;
        }
        if (schema.type === 'object') {
            const results = {};
            for (const key in schema.properties) {
                results[key] = this._filterSchema(schema.properties[key], json[key]);
            }
            for (const pattern in schema.patternProperties) {
                const reg = new RegExp(pattern);
                for (const key of Object.keys(json)) {
                    if (reg.test(key)) {
                        results[key] = this._filterSchema(schema.patternProperties[pattern], json[key]);
                    }
                }
            }
            return results;
        }
        throw Error('unknown json schema type');
    }
}
exports.default = WSCommand;
/* eslint max-classes-per-file: 0 */
class WSCommandNotFoundError extends Error {
}


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandAD.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandAD extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 7;
        this._CommandInitNormalInterval = 0;
        this._CommandDeinit = 1;
        this._CommandNotifyValue = 2;
        this._CommandDoOnece = 3;
    }
    // Commands
    get(params, no) {
        const buf = new Uint8Array([no]);
        this.sendCommand(params.stream ? this._CommandInitNormalInterval : this._CommandDoOnece, buf);
    }
    deinit(params, no) {
        const buf = new Uint8Array([no]);
        this.sendCommand(this._CommandDeinit, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < 40; i++) {
            const module = json['ad' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/ad/deinit', onValid: this.deinit },
                { uri: '/request/ad/get', onValid: this.get },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'ad' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[ad${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandNotifyValue) {
            for (let i = 0; i + 2 < payload.byteLength; i += 3) {
                let value;
                if (this._hw.hw === 'cc3235mod') {
                    // 12bit mode
                    value = ((payload[i + 1] & 0x0f) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                    value = (1.467 * value) / 4095.0; // 4095.0 ===0xFFF // vdd is not always
                    value = Math.round(value * 1000) / 1000;
                }
                else {
                    if (payload[i + 1] & 0x80) {
                        // 10bit mode
                        value = ((payload[i + 1] & 0x03) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                        value = (5.0 * value) / 1023.0; // 1023.0 ===0x3FF
                        value = Math.round(value * 1000) / 1000;
                    }
                    else if (payload[i + 1] & 0x40) {
                        // 12bit mode
                        value = ((payload[i + 1] & 0x0f) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                        value = (3.3 * value) / 4095.0; // 4095.0 ===0xFFF // vdd is not always 3.3v but...
                        value = Math.round(value * 1000) / 1000;
                    }
                    else {
                        // unsigned 100 times mode. (0 to 500 from 0v to 5v).
                        value = (payload[i + 1] << 8) + payload[i + 2];
                        value = value / 100.0;
                    }
                }
                objToSend['ad' + payload[i]] = value;
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandAD;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandBle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const jsonBinaryConverter_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/jsonBinaryConverter.js"));
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
const WSCommandBleHci_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandBleHci.js"));
class WSCommandBle extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 11;
        this.uuidLength = 16 + 2;
        this._CommandSetAdvData = 0;
        this._CommandSetScanRespData = 1;
        this._CommandStartAdv = 2;
        this._CommandStopAdv = 3;
        this._CommandScan = 4;
        this._CommandStartScan = 4;
        this._CommandStopScan = 5;
        this._CommandScanResults = 6;
        this._CommandConnect = 7;
        this._CommandServices = 8;
        this._CommandCharacteristics = 9;
        this._CommandWriteCharacteristics = 10;
        this._CommandReadCharacteristics = 11;
        this._CommandRegisterNotifyCharacteristic = 12;
        this._CommandUnregisterNotifyCharacteristic = 13;
        this._CommandDescriptors = 14;
        this._CommandWriteDescriptor = 15;
        this._CommandReadDescriptor = 16;
        this._CommandNotifyCharacteristic = 17;
        this._CommandSetDeviceName = 19;
        this._CommandServerStartPeripheral = 20;
        this._CommandServerNotifyConnect = 21;
        this._CommandServerAddService = 22;
        this._CommandServerAddCharacteristic = 23;
        this._CommandServerAddDescriptor = 24;
        this._CommandServerWriteCharavteristicValue = 25;
        this._CommandServerReadCharavteristicValue = 26;
        this._CommandServerNotifyWriteCharavteristicValue = 27;
        this._CommandServerNotifyReadCharavteristicValue = 28;
        this._CommandServerWriteDescriptorValue = 29;
        this._CommandServerReadDescriptorValue = 30;
        this._CommandServerNotifyWriteDescriptorValue = 31;
        this._CommandServerNotifyReadDescriptorValue = 32;
        this._CommandServerNotifyCharavteristic = 33;
        this._CommandServerStartStopService = 34;
        this._CommandSecuritySetAuth = 35;
        this._CommandSecuritySetEncryptionLevel = 36;
        this._CommandSecuritySetEnableKeyTypes = 37;
        this._CommandSecuritySetKeyMaxSize = 38;
        this._CommandSecuritySetIOCapability = 39;
        this._CommandSecurityClearBondingDevices = 40;
        this._CommandScanResultsDevice = {
            breder: 0x01,
            ble: 0x02,
            dumo: 0x03,
        };
        /// BLE device address type
        this._CommandScanResultsDeviceAddress = {
            public: 0x00,
            random: 0x01,
            rpa_public: 0x02,
            rpa_random: 0x03,
        };
        this._CommandScanResultsEvet = {
            inquiry_result: 0 /* !< Inquiry result for a peer device. */,
            inquiry_complete: 1 /* !< Inquiry complete. */,
            discovery_result: 2 /* !< Discovery result for a peer device. */,
            discovery_ble_result: 3 /* !< Discovery result for BLE GATT based service on a peer device. */,
            discovery_cmoplete: 4 /* !< Discovery complete. */,
            discovery_di_cmoplete: 5 /* !< Discovery complete. */,
            cancelled: 6 /* !< Search cancelled */,
        };
        this._CommandScanResultsBleEvent = {
            connectable_advertisemnt: 0x00 /* !< Connectable undirected advertising (ADV_IND) */,
            connectable_directed_advertisemnt: 0x01 /* !< Connectable directed advertising (ADV_DIRECT_IND) */,
            scannable_advertising: 0x02 /* !< Scannable undirected advertising (ADV_SCAN_IND) */,
            non_connectable_advertising: 0x03 /* !< Non connectable undirected advertising (ADV_NONCONN_IND) */,
            scan_response: 0x04 /* !< Scan Response (SCAN_RSP) */,
        };
        this._CommandCharacteristicsProperties = {
            broadcast: 0x01,
            read: 0x02,
            write_without_response: 0x04,
            write: 0x08,
            notify: 0x10,
            indicate: 0x20,
            auth: 0x40,
            extended_properties: 0x80,
        };
        this._commandResults = {
            success: 0,
            failed: 1,
        };
        this._securityAuthValues = {
            0x01: 'bonding',
            0x04: 'mitm',
            0x08: 'secure_connection',
        };
        this._securityEncryotionLevels = {
            none: 0x01,
            encryption: 0x02,
            mitm: 0x03,
        };
        this._securityKeyTypes = {
            0x01: 'ltk',
            0x02: 'irk',
            0x04: 'csrk',
        };
        this.hciCommand = new WSCommandBleHci_1.default(this);
        const funcList = {};
        funcList[this._CommandScanResults] = this.notifyFromBinaryScanResponse.bind(this);
        funcList[this._CommandConnect] = this.notifyFromBinaryConnect.bind(this);
        funcList[this._CommandServices] = this.notifyFromBinaryServices.bind(this);
        funcList[this._CommandCharacteristics] = this.notifyFromBinaryChacateristics.bind(this);
        funcList[this._CommandWriteCharacteristics] = this.notifyFromBinaryWriteChacateristics.bind(this);
        funcList[this._CommandReadCharacteristics] = this.notifyFromBinaryReadChacateristics.bind(this);
        funcList[this._CommandRegisterNotifyCharacteristic] = this.notifyFromBinaryRegisterNotifyChacateristic.bind(this);
        funcList[this._CommandUnregisterNotifyCharacteristic] = this.notifyFromBinaryUnregisterNotifyChacateristic.bind(this);
        funcList[this._CommandNotifyCharacteristic] = this.notifyFromBinaryNotifyChacateristic.bind(this);
        funcList[this._CommandDescriptors] = this.notifyFromBinaryDescriptors.bind(this);
        funcList[this._CommandWriteDescriptor] = this.notifyFromBinaryWriteDescriptor.bind(this);
        funcList[this._CommandReadDescriptor] = this.notifyFromBinaryReadDescriptor.bind(this);
        funcList[this._CommandServerNotifyConnect] = this.notifyFromBinaryServerConnectionState.bind(this);
        funcList[this._CommandServerReadCharavteristicValue] = this.notifyFromBinaryServerReadCharavteristicValue.bind(this);
        funcList[this._CommandServerWriteCharavteristicValue] = this.notifyFromBinaryServerWriteCharavteristicValue.bind(this);
        funcList[this._CommandServerNotifyReadCharavteristicValue] = this.notifyFromBinaryServerNotifyReadCharavteristicValue.bind(this);
        funcList[this._CommandServerNotifyWriteCharavteristicValue] = this.notifyFromBinaryServerNotifyWriteCharavteristicValue.bind(this);
        funcList[this._CommandServerReadDescriptorValue] = this.notifyFromBinaryServerReadDescriptorValue.bind(this);
        funcList[this._CommandServerWriteDescriptorValue] = this.notifyFromBinaryServerWriteDescriptorValue.bind(this);
        funcList[this._CommandServerNotifyReadDescriptorValue] = this.notifyFromBinaryServerNotifyReadDescriptorValue.bind(this);
        funcList[this._CommandServerNotifyWriteDescriptorValue] = this.notifyFromBinaryServerNotifyWriteDescriptorValue.bind(this);
        funcList[this.COMMAND_FUNC_ID_ERROR] = this.notifyFromBinaryError.bind(this);
        Object.assign(funcList, this.hciCommand.notifyFunctionList());
        this._funcList = funcList;
    }
    /* CENTRAL   */
    centralScanStart(params) {
        const schema = [
            { path: 'scan.duration', length: 4, type: 'int', default: 30 },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandStartScan, buf);
    }
    centralScanStop(params) {
        this.sendCommand(this._CommandStopScan, null);
    }
    centralConnect(params) {
        const schema = [
            {
                path: 'connect.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            { path: null, length: 1, type: 'char', default: false },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandConnect, buf);
    }
    centralDisconnect(params) {
        const schema = [
            {
                path: 'disconnect.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            { path: null, length: 1, type: 'char', default: true },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandConnect, buf);
    }
    centralServiceGet(params) {
        const schema = [
            {
                path: 'get_services.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServices, buf);
    }
    centralCharacteristicGet(params) {
        const schema = [
            {
                path: 'get_characteristics.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'get_characteristics.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandCharacteristics, buf);
    }
    centralCharacteristicRead(params) {
        const schema = [
            {
                path: 'read_characteristic.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'read_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'read_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandReadCharacteristics, buf);
    }
    centralCharacteristicWrite(params) {
        const schema = [
            {
                path: 'write_characteristic.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'write_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'write_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'write_characteristic.needResponse',
                length: 1,
                type: 'char',
                default: 1,
            },
            { path: 'write_characteristic.data', length: null, type: 'dataArray' },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandWriteCharacteristics, buf);
    }
    centralCharacteristicRegisterNotify(params) {
        const schema = [
            {
                path: 'register_notify_characteristic.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'register_notify_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'register_notify_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandRegisterNotifyCharacteristic, buf);
    }
    centralCharacteristicUnregisterNotify(params) {
        const schema = [
            {
                path: 'unregister_notify_characteristic.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'unregister_notify_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'unregister_notify_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandUnregisterNotifyCharacteristic, buf);
    }
    centralDescriptorGet(params) {
        const schema = [
            {
                path: 'get_descriptors.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'get_descriptors.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'get_descriptors.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandDescriptors, buf);
    }
    centralDescriptorRead(params) {
        const schema = [
            {
                path: 'read_descriptor.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'read_descriptor.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'read_descriptor.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'read_descriptor.descriptor_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandReadDescriptor, buf);
    }
    centralDescriptorWrite(params) {
        const schema = [
            {
                path: 'write_descriptor.address',
                length: 6,
                type: 'hex',
                required: true,
                endianness: 'little',
            },
            {
                path: 'write_descriptor.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'write_descriptor.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'write_descriptor.descriptor_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'write_descriptor.needResponse',
                length: 1,
                type: 'char',
                default: 1,
            },
            { path: 'write_descriptor.data', length: null, type: 'dataArray' },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandWriteDescriptor, buf);
    }
    /* PERIPHERAL   */
    peripheralAdvertisementStart(params) {
        this.sendCommand(this._CommandSetAdvData, new Uint8Array(params.advertisement.adv_data));
        if (params.advertisement.scan_resp) {
            this.sendCommand(this._CommandSetScanRespData, new Uint8Array(params.advertisement.scan_resp));
        }
        this.sendCommand(this._CommandStartAdv, null);
    }
    peripheralAdvertisementStop(params) {
        this.sendCommand(this._CommandStopAdv, null);
    }
    peripheralServiceStart(params) {
        const val = params.peripheral;
        const propFlags = {
            0x01: 'broadcast',
            0x02: 'read',
            0x04: 'write_without_response',
            0x08: 'write',
            0x10: 'notify',
            0x20: 'indiate',
            0x40: 'auth',
            0x80: 'ext_prop',
        };
        const permissionFlags = {
            0x001: 'read',
            0x002: 'read_encrypted',
            0x004: 'read_encrypted_mitm',
            0x010: 'write',
            0x020: 'write_encrypted',
            0x040: 'write_encrypted_mitm',
            0x080: 'write_signed',
            0x100: 'write_signed_mitm',
        };
        const schema = {
            service: {
                command: this._CommandServerAddService,
                schema: [{ path: 'uuid', length: 18, type: 'uuid', required: true }],
            },
            characteristic: {
                command: this._CommandServerAddCharacteristic,
                schema: [
                    { path: 'service_uuid', length: 18, type: 'uuid', required: true },
                    { path: 'uuid', length: 18, type: 'uuid', required: true },
                    {
                        path: 'permissions',
                        length: 2,
                        type: 'flag',
                        default: ['write', 'read'],
                        flags: permissionFlags,
                    },
                    {
                        path: 'properties',
                        length: 1,
                        type: 'flag',
                        default: ['write', 'read'],
                        flags: propFlags,
                    },
                    { path: 'data', type: 'dataArray' },
                ],
            },
            descriptor: {
                command: this._CommandServerAddDescriptor,
                schema: [
                    { path: 'service_uuid', length: 18, type: 'uuid', required: true },
                    {
                        path: 'characteristic_uuid',
                        length: 18,
                        type: 'uuid',
                        required: true,
                    },
                    { path: 'uuid', length: 18, type: 'uuid', required: true },
                    {
                        path: 'permissions',
                        length: 2,
                        type: 'flag',
                        default: ['write', 'read'],
                        flags: permissionFlags,
                    },
                    { path: 'data', type: 'dataArray' },
                ],
            },
            startService: {
                command: this._CommandServerStartStopService,
                schema: [
                    { path: 'uuid', length: 18, type: 'uuid', required: true },
                    { path: null, length: 1, type: 'char', default: 0 },
                ],
            },
        };
        const sendBufs = [];
        const startServiceBufs = [];
        let buf;
        for (const serviceIndex in val.services) {
            const service = val.services[serviceIndex];
            buf = jsonBinaryConverter_1.default.createSendBuffer(schema.service.schema, service);
            if (buf.length === 0) {
                return;
            }
            sendBufs.push({ command: schema.service.command, buffer: buf });
            buf = jsonBinaryConverter_1.default.createSendBuffer(schema.startService.schema, service);
            startServiceBufs.push({
                command: schema.startService.command,
                buffer: buf,
            });
            for (const charaIndex in service.characteristics) {
                const chara = service.characteristics[charaIndex];
                chara.service_uuid = service.uuid;
                buf = jsonBinaryConverter_1.default.createSendBuffer(schema.characteristic.schema, chara);
                if (buf.length === 0) {
                    return;
                }
                sendBufs.push({
                    command: schema.characteristic.command,
                    buffer: buf,
                });
                for (const descIndex in chara.descriptors) {
                    const desc = chara.descriptors[descIndex];
                    desc.service_uuid = service.uuid;
                    desc.characteristic_uuid = chara.uuid;
                    buf = jsonBinaryConverter_1.default.createSendBuffer(schema.descriptor.schema, desc);
                    if (buf.length === 0) {
                        return;
                    }
                    sendBufs.push({ command: schema.descriptor.command, buffer: buf });
                }
            }
        }
        for (const index in sendBufs) {
            this.sendCommand(sendBufs[index].command, sendBufs[index].buffer);
        }
        for (const index in startServiceBufs) {
            this.sendCommand(startServiceBufs[index].command, startServiceBufs[index].buffer);
        }
    }
    peripheralServiceStop(params) {
        const schema = [
            {
                path: 'peripheral.stop_service.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            { path: null, length: 1, type: 'char', default: 1 },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerStartStopService, buf);
    }
    peripheralServiceStopAll() {
        this.sendCommand(this._CommandServerStartPeripheral, new Uint8Array([1]));
    }
    peripheralCharacteristicRead(params) {
        const schema = [
            {
                path: 'peripheral.read_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.read_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerReadCharavteristicValue, buf);
    }
    peripheralCharacteristicWrite(params) {
        const schema = [
            {
                path: 'peripheral.write_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.write_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            { path: 'peripheral.write_characteristic.data', type: 'dataArray' },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerWriteCharavteristicValue, buf);
    }
    peripheralCharacteristicNotify(params) {
        const schema = [
            {
                path: 'peripheral.notify_characteristic.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.notify_characteristic.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerNotifyCharavteristic, buf);
    }
    peripheralDescriptorRead(params) {
        const schema = [
            {
                path: 'peripheral.read_descriptor.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.read_descriptor.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.read_descriptor.descriptor_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerReadDescriptorValue, buf);
    }
    peripheralDescriptorWrite(params) {
        const schema = [
            {
                path: 'peripheral.write_descriptor.service_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.write_descriptor.characteristic_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            {
                path: 'peripheral.write_descriptor.descriptor_uuid',
                length: 18,
                type: 'uuid',
                required: true,
            },
            { path: 'peripheral.write_descriptor.data', type: 'dataArray' },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandServerWriteDescriptorValue, buf);
    }
    securityAuth(params) {
        const schema = [
            {
                path: 'security.auth',
                type: 'flag',
                length: 1,
                required: true,
                flags: this._securityAuthValues,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandSecuritySetAuth, buf);
    }
    securityIndicateLevel(params) {
        const schema = [
            {
                path: 'security.indicate_security_level',
                type: 'char',
                length: 1,
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandSecuritySetEncryptionLevel, buf);
    }
    securityKeyType(params) {
        const schema = [
            {
                path: 'security.key.type',
                type: 'flag',
                length: 1,
                required: true,
                flags: this._securityKeyTypes,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandSecuritySetEnableKeyTypes, buf);
    }
    securityKeySize(params) {
        const schema = [
            {
                path: 'security.key.max_size',
                type: 'char',
                length: 1,
                required: true,
            },
        ];
        const buf = jsonBinaryConverter_1.default.createSendBuffer(schema, params);
        this.sendCommand(this._CommandSecuritySetKeyMaxSize, buf);
    }
    clearBondingDevicesList(params) {
        const buf = new Uint8Array([]); // noting to send
        this.sendCommand(this._CommandSecurityClearBondingDevices, buf);
    }
    parseFromJson(json) {
        const module = json.ble;
        if (module === undefined) {
            return;
        }
        const schemaData = [
            {
                uri: '/request/ble/central/scan_start',
                onValid: this.centralScanStart,
            },
            { uri: '/request/ble/central/scan_stop', onValid: this.centralScanStop },
            { uri: '/request/ble/central/connect', onValid: this.centralConnect },
            {
                uri: '/request/ble/central/disconnect',
                onValid: this.centralDisconnect,
            },
            {
                uri: '/request/ble/central/service_get',
                onValid: this.centralServiceGet,
            },
            {
                uri: '/request/ble/central/characteristic_get',
                onValid: this.centralCharacteristicGet,
            },
            {
                uri: '/request/ble/central/characteristic_read',
                onValid: this.centralCharacteristicRead,
            },
            {
                uri: '/request/ble/central/characteristic_write',
                onValid: this.centralCharacteristicWrite,
            },
            {
                uri: '/request/ble/central/characteristic_register_notify',
                onValid: this.centralCharacteristicRegisterNotify,
            },
            {
                uri: '/request/ble/central/characteristic_unregister_notify',
                onValid: this.centralCharacteristicUnregisterNotify,
            },
            {
                uri: '/request/ble/central/descriptor_get',
                onValid: this.centralDescriptorGet,
            },
            {
                uri: '/request/ble/central/descriptor_read',
                onValid: this.centralDescriptorRead,
            },
            {
                uri: '/request/ble/central/descriptor_write',
                onValid: this.centralDescriptorWrite,
            },
            {
                uri: '/request/ble/peripheral/advertisement_start',
                onValid: this.peripheralAdvertisementStart,
            },
            {
                uri: '/request/ble/peripheral/advertisement_stop',
                onValid: this.peripheralAdvertisementStop,
            },
            {
                uri: '/request/ble/peripheral/service_start',
                onValid: this.peripheralServiceStart,
            },
            {
                uri: '/request/ble/peripheral/service_stop',
                onValid: this.peripheralServiceStop,
            },
            {
                uri: '/request/ble/peripheral/service_stop_all',
                onValid: this.peripheralServiceStopAll,
            },
            {
                uri: '/request/ble/peripheral/characteristic_read',
                onValid: this.peripheralCharacteristicRead,
            },
            {
                uri: '/request/ble/peripheral/characteristic_write',
                onValid: this.peripheralCharacteristicWrite,
            },
            {
                uri: '/request/ble/peripheral/characteristic_notify',
                onValid: this.peripheralCharacteristicNotify,
            },
            {
                uri: '/request/ble/peripheral/descriptor_read',
                onValid: this.peripheralDescriptorRead,
            },
            {
                uri: '/request/ble/peripheral/descriptor_write',
                onValid: this.peripheralDescriptorWrite,
            },
            {
                uri: '/request/ble/security/auth',
                onValid: this.securityAuth,
            },
            {
                uri: '/request/ble/security/indicate_security_level',
                onValid: this.securityIndicateLevel,
            },
            {
                uri: '/request/ble/security/key_type',
                onValid: this.securityKeyType,
            },
            {
                uri: '/request/ble/security/key_max_size',
                onValid: this.securityKeySize,
            },
            {
                uri: '/request/ble/security/devices_clear',
                onValid: this.clearBondingDevicesList,
            },
        ];
        schemaData.push(...this.hciCommand.schemaData());
        const res = this.validateCommandSchema(schemaData, module, 'ble');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[ble]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (this._funcList[func]) {
            this._funcList[func](objToSend, payload);
        }
    }
    notifyFromBinaryScanResponse(objToSend, payload) {
        if (payload.byteLength > 1) {
            const schema = [
                {
                    name: 'event_type',
                    type: 'enum',
                    length: 1,
                    enum: this._CommandScanResultsEvet,
                },
                { name: 'address', type: 'hex', length: 6, endianness: 'little' },
                {
                    name: 'device_type',
                    type: 'enum',
                    length: 1,
                    enum: this._CommandScanResultsDevice,
                },
                {
                    name: 'address_type',
                    type: 'enum',
                    length: 1,
                    enum: this._CommandScanResultsDeviceAddress,
                },
                {
                    name: 'ble_event_type',
                    type: 'enum',
                    length: 1,
                    enum: this._CommandScanResultsBleEvent,
                },
                { name: 'rssi', type: 'signed number', length: 4 },
                { name: 'adv_data', type: 'dataArray', length: 31 * 2 },
                { name: 'flag', type: 'number', length: 4 },
                { name: 'num_response', type: 'number', length: 4 },
                { name: 'advertise_length', type: 'number', length: 1 },
                { name: 'scan_response_length', type: 'number', length: 1 },
            ];
            const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
            results.scan_resp = results.adv_data.slice(results.advertise_length, results.advertise_length + results.scan_response_length);
            results.adv_data = results.adv_data.slice(0, results.advertise_length);
            delete results.num_response;
            delete results.advertise_length;
            delete results.scan_response_length;
            delete results.advertise_data;
            if (results.event_type === 'inquiry_result') {
                delete results.event_type;
                this._addRowForPath(objToSend, 'ble.scan_result', results);
            }
            else if (results.event_type === 'inquiry_complete') {
                this._addRowForPath(objToSend, 'ble.scan_result_finish', true);
            }
        }
    }
    notifyFromBinaryConnect(objToSend, payload) {
        if (payload.length === 7) {
            const schema = [
                { name: 'address', type: 'hex', length: 6, endianness: 'little' },
                {
                    name: 'status',
                    type: 'enum',
                    length: 1,
                    enum: { connected: 0, disconnected: 1 },
                },
            ];
            const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
            this._addRowForPath(objToSend, 'ble.status_update', results);
        }
    }
    notifyFromBinaryServices(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        if (results.service_uuid !== null) {
            this._addRowForPath(objToSend, 'ble.get_service_result', results);
        }
        else {
            delete results.service_uuid;
            this._addRowForPath(objToSend, 'ble.get_service_result_finish', results);
        }
    }
    notifyFromBinaryChacateristics(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            {
                name: 'properties',
                type: 'enum',
                length: 1,
                enum: this._CommandCharacteristicsProperties,
                flags: true,
            },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        if (results.characteristic_uuid !== null) {
            this._addRowForPath(objToSend, 'ble.get_characteristic_result', results);
        }
        else {
            delete results.characteristic_uuid;
            delete results.properties;
            this._addRowForPath(objToSend, 'ble.get_characteristic_result_finish', results);
        }
    }
    notifyFromBinaryReadChacateristics(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.read_characteristic_result', results);
    }
    notifyFromBinaryWriteChacateristics(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.write_characteristic_result', results);
    }
    notifyFromBinaryRegisterNotifyChacateristic(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.register_notify_characteristic_result', results);
    }
    notifyFromBinaryUnregisterNotifyChacateristic(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.unregister_notify_characteristic_result', results);
    }
    notifyFromBinaryNotifyChacateristic(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'is_notify', type: 'int', length: 1 },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.is_notify = results.is_notify === 1;
        this._addRowForPath(objToSend, 'ble.notify_characteristic', results);
    }
    notifyFromBinaryDescriptors(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        if (results.descriptor_uuid !== null) {
            this._addRowForPath(objToSend, 'ble.get_descriptor_result', results);
        }
        else {
            delete results.descriptor_uuid;
            this._addRowForPath(objToSend, 'ble.get_descriptor_result_finish', results);
        }
    }
    notifyFromBinaryReadDescriptor(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.read_descriptor_result', results);
    }
    notifyFromBinaryWriteDescriptor(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.write_descriptor_result', results);
    }
    notifyFromBinaryServerConnectionState(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            {
                name: 'status',
                type: 'enum',
                length: 1,
                enum: { connected: 1, disconnected: 0 },
            },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        this._addRowForPath(objToSend, 'ble.peripheral.connection_status', results);
    }
    notifyFromBinaryServerWriteCharavteristicValue(objToSend, payload) {
        const schema = [
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.peripheral.write_characteristic_result', results);
    }
    notifyFromBinaryServerReadCharavteristicValue(objToSend, payload) {
        const schema = [
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result = 'success'; // always success
        this._addRowForPath(objToSend, 'ble.peripheral.read_characteristic_result', results);
    }
    notifyFromBinaryServerNotifyReadCharavteristicValue(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        this._addRowForPath(objToSend, 'ble.peripheral.notify_read_characteristic', results);
    }
    notifyFromBinaryServerNotifyWriteCharavteristicValue(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        this._addRowForPath(objToSend, 'ble.peripheral.notify_write_characteristic', results);
    }
    notifyFromBinaryServerReadDescriptorValue(objToSend, payload) {
        const schema = [
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result = 'success'; // always success
        this._addRowForPath(objToSend, 'ble.peripheral.read_descriptor_result', results);
    }
    notifyFromBinaryServerWriteDescriptorValue(objToSend, payload) {
        const schema = [
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'result', type: 'int', length: 1 },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        results.result =
            results.result === this._commandResults.success ? 'success' : 'failed';
        this._addRowForPath(objToSend, 'ble.peripheral.write_descriptor_result', results);
    }
    notifyFromBinaryServerNotifyReadDescriptorValue(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        this._addRowForPath(objToSend, 'ble.peripheral.notify_read_descriptor', results);
    }
    notifyFromBinaryServerNotifyWriteDescriptorValue(objToSend, payload) {
        const schema = [
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'data', type: 'dataArray', length: null },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        this._addRowForPath(objToSend, 'ble.peripheral.notify_write_descriptor', results);
    }
    notifyFromBinaryError(objToSend, payload) {
        const schema = [
            { name: 'module_error_code', type: 'char', length: 1 },
            { name: 'error_code', type: 'char', length: 1 },
            { name: 'function_code', type: 'char', length: 1 },
            { name: 'address', type: 'hex', length: 6, endianness: 'little' },
            { name: 'service_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'characteristic_uuid', type: 'uuid', length: this.uuidLength },
            { name: 'descriptor_uuid', type: 'uuid', length: this.uuidLength },
        ];
        const results = jsonBinaryConverter_1.default.convertFromBinaryToJson(schema, payload);
        const errorMessage = {
            0x00: 'no error',
            0x01: 'device not connected',
            0x02: 'service not found',
            0x03: 'charavteristic not found',
            0x04: 'descriptor not found',
            0x05: 'no permission',
            0x06: 'device not found',
            0x07: 'ble is busy',
            0x08: 'service already running',
            0x09: 'security param are already set',
            0xff: 'error',
        };
        const functionMessage = {
            0: 'on setting advertisement data',
            1: 'on setting scan response data',
            2: 'on starting advertisement',
            3: 'on stopping advertisement',
            4: 'on starting scan',
            5: 'on stoping scan',
            6: '',
            7: 'on connecting device',
            8: 'on getting services',
            9: 'on getting characteristic',
            10: 'on writing characteristic',
            11: 'on reading characteristic',
            14: 'on getting descriptor',
            15: 'on writing descriptor',
            16: 'on reading descriptor',
            20: 'on start pheripheral',
            21: 'on notify connect',
            22: 'on adding service',
            23: 'on adding characteristic',
            24: 'on adding descriptor',
            25: 'on writing characteristic',
            26: 'on reading characteristic',
            27: 'on writing characteristic from remote',
            28: 'on reading characteristic from remote',
            29: 'on writing descriptor',
            30: 'on reading descriptor',
            31: 'on writing descriptor from remote',
            32: 'on reading descriptor from remote',
            33: 'on notify characteristic',
            34: 'on start/stop service',
            35: 'on set security auth param',
            36: 'on set security encryption level param',
            37: 'on set security key type param',
            38: 'on set security key size param',
            39: 'on set security io capability',
            40: 'on clear bonding devices list',
        };
        results.message =
            errorMessage[results.error_code] +
                ' ' +
                functionMessage[results.function_code];
        this.envelopError(objToSend, 'ble', results);
    }
    _addRowForPath(sendObj, path, row) {
        const keys = path.split('.');
        let target = sendObj;
        for (let index = 0; index < keys.length - 1; index++) {
            target[keys[index]] = target[keys[index]] || {};
            target = target[keys[index]];
        }
        target[keys[keys.length - 1]] = row;
    }
}
exports.default = WSCommandBle;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandBleHci.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
class WSCommandBleHci {
    constructor(delegate) {
        this._CommandHCIInit = 41;
        this._CommandHCIDeinit = 42;
        this._CommandHCISend = 43;
        this._CommandHCIRecv = 44;
        this._CommandHCIAdvertisementFilter = 45;
        this._delegate = delegate;
    }
    schemaData() {
        return [
            { uri: '/request/ble/hci/init', onValid: this.init.bind(this) },
            { uri: '/request/ble/hci/deinit', onValid: this.deinit.bind(this) },
            { uri: '/request/ble/hci/write', onValid: this.send.bind(this) },
            {
                uri: '/request/ble/hci/advertisement_filter',
                onValid: this.advertisementFilter.bind(this),
            },
        ];
    }
    notifyFunctionList() {
        const funcList = {};
        funcList[this._CommandHCIRecv] = this.recv.bind(this);
        return funcList;
    }
    init(params, module) {
        const buf = new Uint8Array(0);
        this._delegate.sendCommand(this._CommandHCIInit, buf);
    }
    deinit(params, module) {
        const buf = new Uint8Array(0);
        this._delegate.sendCommand(this._CommandHCIDeinit, buf);
    }
    send(params, module) {
        const buf = new Uint8Array(params.hci.write.length);
        buf.set(params.hci.write);
        this._delegate.sendCommand(this._CommandHCISend, buf);
    }
    recv(objToSend, payload) {
        const arr = new Array(payload.byteLength);
        for (let i = 0; i < arr.length; i++) {
            arr[i] = payload[i];
        }
        objToSend.ble = objToSend.ble || {};
        objToSend.ble.hci = objToSend.ble.hci || {};
        objToSend.ble.hci.read = { data: arr };
    }
    advertisementFilter(params) {
        const sendData = [];
        params.hci.advertisement_filter.forEach((e) => {
            const one = [
                e.range.index,
                e.range.length,
                e.value.length,
                ...e.value,
            ];
            sendData.push(...one);
        });
        const buf = new Uint8Array(sendData.length);
        buf.set(sendData);
        this._delegate.sendCommand(this._CommandHCIAdvertisementFilter, buf);
    }
}
exports.default = WSCommandBleHci;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandDirective.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const semver = __webpack_require__("./node_modules/semver/semver.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
const WSCommandIO_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandIO.js"));
const WSCommandPWM_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandPWM.js"));
class WSCommandDirective extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 1;
        this._CommandRegistrate = 0;
        this._CommandPause = 1;
        this._CommandResume = 2;
        this._CommandNotify = 3;
        this.availableCommands = [new WSCommandIO_1.default(), new WSCommandPWM_1.default()];
    }
    // Commands
    init(params, originalParams) {
        const nameArray = util_1.default.string2dataArray(params.animation.name);
        let frame;
        let offset = 0;
        if (semver.lt(this._hw.firmware || '1.0.0', '2.0.0')) {
            // < 2.0.0
            frame = new Uint8Array(1 + nameArray.length + 1);
            // name //
            frame[offset++] = nameArray.length + 1;
            frame.set(nameArray, offset);
            offset += nameArray.length;
            frame[offset++] = 0; // null string
            if (params.animation.status === 'registrate' ||
                typeof params.animation.repeat === 'number') {
                throw new Error('you need to update your firmware >= 2.0.0');
            }
        }
        else {
            frame = new Uint8Array(1 + nameArray.length + 1 + 1 + 4);
            // name //
            frame[offset++] = nameArray.length + 1;
            frame.set(nameArray, offset);
            offset += nameArray.length;
            frame[offset++] = 0; // null string
            // type and count //
            let type = 0;
            let repeat_count = 0;
            if (params.animation.status === 'loop') {
                type = 1; // auto start
            }
            if (typeof params.animation.repeat === 'number') {
                repeat_count = params.animation.repeat;
                type += 2;
            }
            frame[offset++] = type;
            frame[offset++] = repeat_count >> (8 * 3);
            frame[offset++] = repeat_count >> (8 * 2);
            frame[offset++] = repeat_count >> (8 * 1);
            frame[offset++] = repeat_count;
        }
        const commandJsonArray = params.animation.states;
        for (let i = 0; i < commandJsonArray.length; i++) {
            const obj = commandJsonArray[i];
            const duration = Math.floor(obj.duration * 1000);
            const state = obj.state;
            // Dry run commands
            let parsedCommands = JSON.parse(JSON.stringify(state));
            if (!Array.isArray(parsedCommands)) {
                parsedCommands = [parsedCommands];
            }
            let compressed = null;
            for (let commandIndex = 0; commandIndex < parsedCommands.length; commandIndex++) {
                const _frame = WSCommand_1.default.compress(this.availableCommands, parsedCommands[commandIndex]);
                if (!_frame) {
                    throw new Error('[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.');
                }
                if (compressed) {
                    const _combined = new Uint8Array(compressed.length + _frame.length);
                    _combined.set(compressed, 0);
                    _combined.set(_frame, compressed.length);
                    compressed = _combined;
                }
                else {
                    compressed = _frame;
                }
            }
            if (!compressed) {
                throw new Error('[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.');
            }
            const length = compressed.byteLength;
            const commandHeader = new Uint8Array(8);
            commandHeader[0] = length >> (8 * 3);
            commandHeader[1] = length >> (8 * 2);
            commandHeader[2] = length >> (8 * 1);
            commandHeader[3] = length;
            commandHeader[4] = duration >> (8 * 3);
            commandHeader[5] = duration >> (8 * 2);
            commandHeader[6] = duration >> (8 * 1);
            commandHeader[7] = duration;
            const combined = new Uint8Array(frame.byteLength + commandHeader.byteLength + compressed.byteLength);
            combined.set(frame, 0);
            combined.set(commandHeader, frame.byteLength);
            combined.set(compressed, frame.byteLength + commandHeader.byteLength);
            frame = combined;
        }
        if (frame.byteLength > 1000) {
            // 1kbyte over
            throw new Error('[io.animation]Too big animation datas');
        }
        this.sendCommand(this._CommandRegistrate, frame);
    }
    changeState(params) {
        if (params.animation.status === 'resume') {
            const nameArray = util_1.default.string2dataArray(params.animation.name);
            const frame = new Uint8Array(nameArray.length + 2);
            frame[0] = nameArray.length + 1;
            frame.set(nameArray, 1);
            frame[frame.byteLength - 1] = 0;
            this.sendCommand(this._CommandResume, frame);
        }
        else if (params.animation.status === 'pause') {
            const nameArray = util_1.default.string2dataArray(params.animation.name);
            const frame = new Uint8Array(nameArray.length + 2);
            frame[0] = nameArray.length + 1;
            frame.set(nameArray, 1);
            frame[frame.byteLength - 1] = 0;
            this.sendCommand(this._CommandPause, frame);
        }
    }
    parseFromJson(json) {
        let parentCommandNotFound = false;
        try {
            super.parseFromJson(json);
        }
        catch (err) {
            if (err instanceof this.WSCommandNotFoundError) {
                parentCommandNotFound = true;
            }
            else {
                throw err;
            }
        }
        const module = json.io;
        if (module === undefined) {
            return;
        }
        const schemaData = [
            { uri: '/request/ioAnimation/init', onValid: this.init },
            { uri: '/request/ioAnimation/changeState', onValid: this.changeState },
        ];
        const res = this.validateCommandSchema(schemaData, module, 'io', module);
        if (res.valid === 0 && parentCommandNotFound) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                const WSCommandNotFoundError = this.WSCommandNotFoundError;
                throw new WSCommandNotFoundError(`[io.animation]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandNotify) {
            const name = util_1.default.dataArray2string(payload.slice(2, payload.byteLength - 1)); // remove null string
            objToSend.io = {
                animation: {
                    name,
                    status: 'finish',
                },
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandDirective;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandDisplay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const qr_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/qr.js"));
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandDisplay extends WSCommand_1.default {
    constructor() {
        super(...arguments);
        this.module = 8;
        this._CommandClear = 0;
        this._CommandPrint = 1;
        this._CommandDrawCampusVerticalBytes = 2;
        this._CommandDrawCampusHorizonalBytes = 3;
        this._CommandDrawIOState = 4;
        this._CommandSetPinName = 5;
        this._CommandDrawCampusRawColors = 6;
    }
    // Commands
    clear(params) {
        this.sendCommand(this._CommandClear, null);
    }
    print(buf) {
        this.sendCommand(this._CommandPrint, buf);
    }
    printText(text) {
        const buf = Buffer.from(text, 'utf8');
        const result = new Uint8Array(buf);
        this.print(result);
    }
    text(params) {
        this.printText(params.text);
    }
    raw(params) {
        if (typeof params.color_depth === 'number' && params.color_depth > 1) {
            this.drawRawColors(params.raw, params.color_depth);
        }
        else {
            this.drawHorizonally(new Uint8Array(params.raw));
        }
    }
    qr(params) {
        const text = params.qr.text;
        const correctionLevel = params.qr.correction || 'M';
        const typeNumber = 0; // auto detect type.
        const qr = qr_1.default(typeNumber, correctionLevel);
        qr.addData(text);
        qr.make();
        let size = qr.getModuleCount();
        if (size) {
            size *= 2;
            const modules = qr.getModules();
            const vram = new Uint8Array(1024);
            vram.fill(0);
            for (let row = 0; row < 2; row++) {
                for (let col = 0; col < size + 4; col++) {
                    vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;
                    vram[Math.floor((row + size + 2) * 16 + col / 8)] |= 0x80 >> col % 8;
                }
            }
            for (let row = 2; row < size + 2; row++) {
                for (let col = 0; col < 2; col++) {
                    vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;
                }
                for (let col = size + 2; col < size + 4; col++) {
                    vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;
                }
            }
            for (let row = 0; row < size; row++) {
                for (let col = 0; col < size; col++) {
                    if (!modules[Math.floor(row / 2)][Math.floor(col / 2)]) {
                        vram[Math.floor((row + 2) * 16 + (col + 2) / 8)] |=
                            0x80 >> (col + 2) % 8;
                    }
                }
            }
            this.drawHorizonally(vram);
        }
    }
    pinName(params) {
        for (let i = 0; i < 40; i++) {
            if (typeof params.pin_assign[i] === 'object') {
                this.setPinName(i, params.pin_assign[i].module_name || '?', params.pin_assign[i].pin_name || '?');
            }
        }
    }
    drawVertically(buf) {
        this.sendCommand(this._CommandDrawCampusVerticalBytes, buf);
    }
    drawHorizonally(buf) {
        this.sendCommand(this._CommandDrawCampusHorizonalBytes, buf);
    }
    drawIOState(val) {
        const buf = new Uint8Array([!val ? 1 : 0]);
        this.sendCommand(this._CommandDrawIOState, buf);
    }
    setPinName(no, moduleName, pinName) {
        let str = moduleName.slice(0, 4) + ' ' + pinName;
        str = str.slice(0, 9);
        const buf = new Uint8Array(1);
        buf[0] = no;
        const stringarray = new Uint8Array(Buffer.from(str, 'utf8'));
        const combined = new Uint8Array(buf.length + stringarray.length);
        combined.set(buf, 0);
        combined.set(stringarray, 1);
        this.sendCommand(this._CommandSetPinName, combined);
    }
    drawRawColors(raw, colorDepth) {
        const buf = new Uint8Array(1 + raw.length);
        buf[0] = colorDepth;
        buf.set(raw, 1);
        this.sendCommand(this._CommandDrawCampusRawColors, buf);
    }
    parseFromJson(json) {
        const module = json.display;
        if (module === undefined) {
            return;
        }
        const schemaData = [
            { uri: '/request/display/clear', onValid: this.clear },
            { uri: '/request/display/text', onValid: this.text },
            { uri: '/request/display/raw', onValid: this.raw },
            { uri: '/request/display/pin_assign', onValid: this.pinName },
            { uri: '/request/display/qr', onValid: this.qr },
        ];
        const res = this.validateCommandSchema(schemaData, module, 'display');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[display]unknown command`);
            }
        }
    }
}
exports.default = WSCommandDisplay;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandI2C.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandI2C extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 6;
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandWrite = 2;
        this._CommandRead = 3;
        this._CommandSlvWritten = 4;
    }
    // Commands
    initMaster(params, module) {
        const mode = 0;
        const sda = parseInt(params.sda);
        const scl = parseInt(params.scl);
        const clock = parseInt(params.clock);
        const buf = new Uint8Array(8);
        buf[0] = module;
        buf[1] = mode;
        buf[2] = sda;
        buf[3] = scl;
        buf[4] = clock >> (3 * 8);
        buf[5] = clock >> (2 * 8);
        buf[6] = clock >> (1 * 8);
        buf[7] = clock;
        this.sendCommand(this._CommandInit, buf);
    }
    initSlave(params, module) {
        const mode = 1;
        const sda = parseInt(params.sda);
        const scl = parseInt(params.scl);
        const clock = 0;
        let addressLength = params.slave_address_length;
        const address = params.slave_address;
        if (address > 0x7f) {
            addressLength = 10;
        }
        const buf = new Uint8Array(11);
        buf[0] = module;
        buf[1] = mode;
        buf[2] = sda;
        buf[3] = scl;
        buf[4] = clock >> (3 * 8);
        buf[5] = clock >> (2 * 8);
        buf[6] = clock >> (1 * 8);
        buf[7] = clock;
        buf[8] = addressLength;
        buf[9] = address >> 8;
        buf[10] = address;
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params, module) {
        const buf = new Uint8Array([module]);
        this.sendCommand(this._CommandDeinit, buf);
    }
    write(params, module) {
        let address = parseInt(params.address);
        if (params.address_bits === 10 || address > 0x7f) {
            address = address | 0x8000; // mark 10bit mode
        }
        const buf = new Uint8Array(3 + params.data.length);
        buf[0] = module;
        buf[1] = address >> 8;
        buf[2] = address;
        buf.set(params.data, 3);
        this.sendCommand(this._CommandWrite, buf);
    }
    read(params, module) {
        let address = parseInt(params.address);
        if (params.address_bits === 10 || address > 0x7f) {
            address = address | 0x8000; // mark 10bit mode
        }
        const read_length = params.read;
        const buf = new Uint8Array(7);
        buf[0] = module;
        buf[1] = address >> 8;
        buf[2] = address;
        buf[3] = read_length >> (3 * 8);
        buf[4] = read_length >> (2 * 8);
        buf[5] = read_length >> (1 * 8);
        buf[6] = read_length;
        this.sendCommand(this._CommandRead, buf);
    }
    parseFromJson(json) {
        // 0
        for (let i = 0; i < 2; i++) {
            const module = json['i2c' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/i2c/init_master', onValid: this.initMaster },
                { uri: '/request/i2c/init_slave', onValid: this.initSlave },
                { uri: '/request/i2c/write', onValid: this.write },
                { uri: '/request/i2c/read', onValid: this.read },
                { uri: '/request/i2c/deinit', onValid: this.deinit },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'i2c' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[i2c${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandRead && payload.byteLength > 3) {
            const module_index = payload[0];
            const address = (payload[1] << 8) + payload[2];
            const arr = new Array(payload.byteLength - 3);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = payload[i + 3];
            }
            objToSend['i2c' + module_index] = {
                mode: 'master',
                address,
                data: arr,
            };
        }
        else if (func === this._CommandSlvWritten && payload.byteLength > 4) {
            const module_index = payload[0];
            // let address_bit_length = payload[1];
            const address = (payload[2] << 8) + payload[3];
            const arr = new Array(payload.byteLength - 4);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = payload[i + 4];
            }
            objToSend['i2c' + module_index] = {
                mode: 'slave',
                is_fragmented: true,
                address,
                data: arr,
            };
        }
        else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength > 2) {
            // const _esperr = payload[0];
            const err = payload[1];
            const ref_func_id = payload[2];
            if (ref_func_id === this._CommandWrite ||
                ref_func_id === this._CommandRead) {
                let reason = '' +
                    (ref_func_id === this._CommandWrite ? 'writing' : 'reading') +
                    ' error. ';
                if (err === 7) {
                    // in fact. it is 0x107. but truncated
                    reason += 'Communication Timeout. Maybe, target is not connected.';
                }
                else if (err === 255) {
                    reason += 'Communication Failed. Maybe, target is not connected.';
                }
                this.envelopError(objToSend, `i2c0`, { message: reason });
            }
            else {
                super.notifyFromBinary(objToSend, func, payload);
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandI2C;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandIO.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
const COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_HIGH = 1;
const COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_LOW = 2;
const COMMAND_IO_ERRORS_IO_TOO_LOW = 3;
const COMMAND_IO_ERRORS_IO_TOO_HIGH = 4;
const COMMAND_IO_ERRORS_IO_FORCE_RELEASED = 0xf0;
const COMMAND_IO_ERROR_MESSAGES = {
    0: 'unknown error',
    1: 'heavy output. output voltage is too low when driving high',
    2: 'heavy output. output voltage is too high when driving low',
    3: 'output voltage is too low when driving high. io state has changed output to input',
    4: 'output voltage is too high when driving low. io state has changed output to input',
};
const COMMAND_IO_MUTEX_NAMES = {
    1: 'io.input',
    2: 'io.output',
    3: 'pwm',
    4: 'uart',
    5: 'i2c',
    6: 'spi',
    7: 'LogicAnalyzer',
    8: 'Measure',
};
class WSCommandIO extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 2;
        this._CommandOutput = 0;
        this._CommandInputStream = 1;
        this._CommandInputOnece = 2;
        this._CommandOutputType = 3;
        this._CommandPullResisterType = 4;
        this._CommandEnd = 5;
    }
    // Commands
    output(value, id) {
        const buf = new Uint8Array([id, value]);
        this.sendCommand(this._CommandOutput, buf);
    }
    outputDetail(params, id) {
        const buf = new Uint8Array([id, params.value]);
        this.sendCommand(this._CommandOutput, buf);
    }
    input(params, id) {
        const buf = new Uint8Array([id]);
        this.sendCommand(this._CommandInputOnece, buf);
    }
    inputDetail(params, id) {
        const buf = new Uint8Array([id]);
        this.sendCommand(params.stream ? this._CommandInputStream : this._CommandInputOnece, buf);
    }
    outputType(params, id) {
        const buf = new Uint8Array(2);
        buf[0] = id;
        if (params.output_type === 'push-pull5v') {
            buf[1] = 0;
        }
        else if (params.output_type === 'push-pull3v') {
            buf[1] = 2;
        }
        else if (params.output_type === 'open-drain') {
            buf[1] = 3;
        }
        else {
            return 'io unknown outputtype: ' + params.output_type;
        }
        this.sendCommand(this._CommandOutputType, buf);
    }
    pullType(params, id) {
        const buf = new Uint8Array(2);
        buf[0] = id;
        if (params.pull_type === 'float') {
            buf[1] = 0;
        }
        else if (params.pull_type === 'pull-up3v') {
            buf[1] = 1;
        }
        else if (params.pull_type === 'pull-down') {
            buf[1] = 2;
        }
        else if (params.pull_type === 'pull-up5v') {
            buf[1] = 3;
        }
        else {
            return 'io unknown pull_type: ' + params.pull_type;
        }
        this.sendCommand(this._CommandPullResisterType, buf);
    }
    deinit(params, id) {
        const buf = new Uint8Array([id]);
        this.sendCommand(this._CommandEnd, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < 40; i++) {
            const module = json['io' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/io/input', onValid: this.input },
                { uri: '/request/io/input_detail', onValid: this.inputDetail },
                { uri: '/request/io/output', onValid: this.output },
                { uri: '/request/io/output_detail', onValid: this.outputDetail },
                { uri: '/request/io/output_type', onValid: this.outputType },
                { uri: '/request/io/pull_type', onValid: this.pullType },
                { uri: '/request/io/deinit', onValid: this.deinit },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'io' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[io${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandInputStream || func === this._CommandInputOnece) {
            for (let i = 0; i < payload.byteLength; i += 2) {
                objToSend['io' + payload[i]] = payload[i + 1] > 0;
            }
        }
        else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength >= 4) {
            // const esperr = payload[0];
            const err = payload[1];
            // const ref_func_id = payload[2];
            const module_index = payload[3];
            if (err === COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_HIGH ||
                err === COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_LOW) {
                this.envelopWarning(objToSend, `io${module_index}`, {
                    message: COMMAND_IO_ERROR_MESSAGES[err],
                });
            }
            else if (err === COMMAND_IO_ERRORS_IO_TOO_LOW ||
                err === COMMAND_IO_ERRORS_IO_TOO_HIGH) {
                this.envelopError(objToSend, `io${module_index}`, {
                    message: COMMAND_IO_ERROR_MESSAGES[err],
                });
            }
            else if (err === COMMAND_IO_ERRORS_IO_FORCE_RELEASED &&
                payload.byteLength >= 6) {
                const oldMutexOwner = payload[4];
                const newMutexOwner = payload[5];
                this.envelopWarning(objToSend, 'debug', {
                    message: `io${module_index} binded "${COMMAND_IO_MUTEX_NAMES[oldMutexOwner]}" was stopped. "${COMMAND_IO_MUTEX_NAMES[newMutexOwner]}" have started using this io.`,
                });
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandIO;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandLogicAnalyzer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandLogicAnalyzer extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 10;
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandRecv = 2;
    }
    // Commands
    init(params) {
        const io = params.io[0];
        const intervalUsec = params.interval * 1000;
        const durationUsec = params.duration * 1000;
        const matchValue = parseInt(params.trigger.value);
        const matchCount = params.trigger.samples;
        const buf = new Uint8Array(12);
        buf[0] = 1;
        buf[1] = io;
        buf[2] = intervalUsec >> (8 * 3);
        buf[3] = intervalUsec >> (8 * 2);
        buf[4] = intervalUsec >> (8 * 1);
        buf[5] = intervalUsec;
        buf[6] = durationUsec >> (8 * 3);
        buf[7] = durationUsec >> (8 * 2);
        buf[8] = durationUsec >> (8 * 1);
        buf[9] = durationUsec;
        buf[10] = matchValue;
        buf[11] = matchCount;
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params) {
        const buf = new Uint8Array(0);
        this.sendCommand(this._CommandDeinit, buf);
    }
    parseFromJson(json) {
        const module = json.logic_analyzer;
        if (module === undefined) {
            return;
        }
        const schemaData = [
            { uri: '/request/logicAnalyzer/init', onValid: this.init },
            { uri: '/request/logicAnalyzer/deinit', onValid: this.deinit },
        ];
        const res = this.validateCommandSchema(schemaData, module, 'logic_analyzer');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[logic_analyzer]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandRecv) {
            const arr = new Array(payload.byteLength * 8);
            let offset = 0;
            for (let i = 0; i < payload.byteLength; i++) {
                const byte = payload[i];
                for (let bit = 0; bit < 8; bit++) {
                    arr[offset] = byte & (0x80 >>> bit) ? 1 : 0;
                    offset++;
                }
            }
            objToSend.logic_analyzer = {
                data: arr,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandLogicAnalyzer;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandMeasurement.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandMeasurement extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 12;
        this._CommandMeasurementEcho = 0;
    }
    // Commands
    echo(params) {
        const triggerIO = params.echo.io_pulse;
        const triggerPosNeg = params.echo.pulse === 'negative' ? false : true;
        const triggerWidthUs = Math.floor(params.echo.pulse_width * 1000);
        const echoIO = params.echo.io_echo;
        const responseCount = params.echo.measure_edges;
        let timeoutUs = params.echo.timeout * 1000;
        timeoutUs = Math.floor(timeoutUs);
        const buf = new Uint8Array(13);
        buf[0] = 0;
        buf[1] = triggerIO;
        buf[2] = triggerPosNeg ? 1 : 0;
        buf[3] = triggerWidthUs >> (8 * 3);
        buf[4] = triggerWidthUs >> (8 * 2);
        buf[5] = triggerWidthUs >> 8;
        buf[6] = triggerWidthUs;
        buf[7] = echoIO;
        buf[8] = responseCount;
        buf[9] = timeoutUs >> (8 * 3);
        buf[10] = timeoutUs >> (8 * 2);
        buf[11] = timeoutUs >> 8;
        buf[12] = timeoutUs;
        this.sendCommand(this._CommandMeasurementEcho, buf);
    }
    parseFromJson(json) {
        const module = json.measure;
        if (module === undefined) {
            return;
        }
        const schemaData = [{ uri: '/request/measure/echo', onValid: this.echo }];
        const res = this.validateCommandSchema(schemaData, module, 'measure');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[measure]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandMeasurementEcho) {
            let index = 0;
            const count = payload[index++];
            const array = [];
            for (let i = 0; i < count; i++) {
                let timing;
                const edge = payload[index++] > 0 ? true : false;
                timing = payload[index++] << (8 * 3);
                timing += payload[index++] << (8 * 2);
                timing += payload[index++] << 8;
                timing += payload[index++];
                timing = timing / 1000;
                array.push({
                    edge,
                    timing,
                });
            }
            objToSend.measure = {
                echo: array,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandMeasurement;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandPWM.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandPWM extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 3;
        this.ModuleNum = 6;
        this.resetInternalStatus();
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandSetFreq = 2;
        this._CommandSetDuty = 3;
        this._CommandAMModulate = 4;
    }
    resetInternalStatus() {
        this.pwms = [];
        for (let i = 0; i < this.ModuleNum; i++) {
            this.pwms.push({});
        }
    }
    // Commands
    init(params, module) {
        const buf = new Uint8Array(2);
        buf[0] = module;
        buf[1] = params.io;
        this.pwms[module].io = params.io;
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params, module) {
        const buf = new Uint8Array(1);
        buf[0] = module;
        this.pwms[module] = {};
        this.sendCommand(this._CommandDeinit, buf);
    }
    freq(params, module) {
        const buf = new Uint8Array(5);
        buf[0] = module;
        buf[1] = params.freq >> (8 * 3);
        buf[2] = params.freq >> (8 * 2);
        buf[3] = params.freq >> (8 * 1);
        buf[4] = params.freq;
        this.pwms[module].freq = params.freq;
        this.sendCommand(this._CommandSetFreq, buf);
    }
    pulse(params, module) {
        const buf = new Uint8Array(5);
        const pulseUSec = params.pulse * 1000;
        buf[0] = module;
        buf[1] = pulseUSec >> (8 * 3);
        buf[2] = pulseUSec >> (8 * 2);
        buf[3] = pulseUSec >> (8 * 1);
        buf[4] = pulseUSec;
        this.pwms[module].pulseUSec = pulseUSec;
        this.sendCommand(this._CommandSetDuty, buf);
    }
    amModulate(params, module) {
        const bitLength = params.modulate.data.length;
        const byteLength = Math.floor((bitLength + 7) / 8);
        const buf = new Uint8Array(5 + byteLength);
        const symbol_length_usec = params.modulate.symbol_length * 1000;
        buf[0] = module;
        buf[1] = symbol_length_usec >> (8 * 3);
        buf[2] = symbol_length_usec >> (8 * 2);
        buf[3] = symbol_length_usec >> (8 * 1);
        buf[4] = symbol_length_usec;
        let bitIndex = 0;
        for (let byte = 0; byte < byteLength; byte++) {
            buf[5 + byte] = 0;
            for (let bit = 0; bit < 8; bit++) {
                if (params.modulate.data[bitIndex++]) {
                    buf[5 + byte] |= 0x80 >>> bit;
                }
            }
        }
        this.sendCommand(this._CommandAMModulate, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < this.ModuleNum; i++) {
            const module = json['pwm' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/pwm/init', onValid: this.init },
                { uri: '/request/pwm/freq', onValid: this.freq },
                { uri: '/request/pwm/pulse', onValid: this.pulse },
                { uri: '/request/pwm/modulate', onValid: this.amModulate },
                { uri: '/request/pwm/deinit', onValid: this.deinit },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'pwm' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[pwm${i}]unknown command`);
                }
            }
        }
    }
}
exports.default = WSCommandPWM;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandPlugin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandPlugin extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 15;
        this._CommandSend = 0;
        this._CommandReceive = 1;
    }
    send(params, index) {
        const buf = new Uint8Array(params.send);
        this.sendCommand(this._CommandSend, buf);
    }
    parseFromJson(json) {
        const module = json.plugin;
        if (module === undefined) {
            return;
        }
        const schemaData = [{ uri: '/request/plugin/send', onValid: this.send }];
        const res = this.validateCommandSchema(schemaData, module, 'plugin');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[network]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        switch (func) {
            case this._CommandReceive: {
                // convert buffer to array
                const arr = new Array(payload.byteLength);
                for (let i = 0; i < arr.length; i++) {
                    arr[i] = payload[i];
                }
                objToSend.plugin = {
                    receive: arr,
                };
                break;
            }
        }
    }
}
exports.default = WSCommandPlugin;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandSPI.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandSPI extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 5;
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandWriteRead = 2;
        this._CommandWrite = 3;
    }
    // Commands
    initMaster(params, module) {
        const mode = 0; // master mode
        let clk = params.clk;
        let mosi = params.mosi;
        let miso = params.miso;
        let cs = params.cs;
        const clock = params.clock;
        if (clk === null && mosi === null && miso === null) {
            throw new Error('spi: master mode require one of clk/mosi/miso');
        }
        if (clk === null) {
            clk = this.ioNotUsed;
        }
        if (mosi === null) {
            mosi = this.ioNotUsed;
        }
        if (miso === null) {
            miso = this.ioNotUsed;
        }
        if (cs === null) {
            cs = this.ioNotUsed;
        }
        const buf = new Uint8Array(11);
        buf[0] = module;
        buf[1] = mode;
        buf[2] = clk;
        buf[3] = mosi;
        buf[4] = miso;
        buf[5] = this.ioNotUsed; // wp
        buf[6] = this.ioNotUsed; // hd
        buf[7] = clock >> (3 * 8);
        buf[8] = clock >> (2 * 8);
        buf[9] = clock >> (1 * 8);
        buf[10] = clock;
        buf[11] = cs;
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params, module) {
        const buf = new Uint8Array([module]);
        this.sendCommand(this._CommandDeinit, buf);
    }
    write(params, module) {
        const buf = new Uint8Array(1 + params.data.length);
        buf[0] = module;
        buf.set(params.data, 1);
        if (params.read) {
            this.sendCommand(this._CommandWriteRead, buf);
        }
        else {
            this.sendCommand(this._CommandWrite, buf);
        }
    }
    parseFromJson(json) {
        for (let i = 0; i < 2; i++) {
            const module = json['spi' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/spi/init_master', onValid: this.initMaster },
                { uri: '/request/spi/write', onValid: this.write },
                { uri: '/request/spi/deinit', onValid: this.deinit },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'spi' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[spi${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandWriteRead && payload.byteLength > 1) {
            const module_index = payload[0];
            // var received = payload.slice(1);
            const arr = new Array(payload.byteLength - 1);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = payload[i + 1];
            }
            objToSend['spi' + module_index] = {
                data: arr,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandSPI;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandSwitch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandSwitch extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 9;
        this._CommandNotifyValue = 0;
        this._CommandOnece = 1;
    }
    // Commands
    get(params) {
        const buf = new Uint8Array(0);
        this.sendCommand(this._CommandOnece, buf);
    }
    parseFromJson(json) {
        const module = json.switch;
        if (module === undefined) {
            return;
        }
        const schemaData = [{ uri: '/request/switch/get', onValid: this.get }];
        const res = this.validateCommandSchema(schemaData, module, 'switch');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[switch]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if ((func === this._CommandOnece || func === this._CommandNotifyValue) &&
            payload.byteLength === 1) {
            const state = payload[0];
            const states = ['none', 'push', 'left', 'right'];
            objToSend.switch = {
                state: states[state],
            };
            if (func === this._CommandOnece) {
                objToSend.switch.action = 'get';
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandSwitch;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandSystem.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandSystem extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 0;
        this._CommandReboot = 0;
        this._CommandReset = 2;
        this._CommandSelfCheck = 3;
        this._CommandWait = 4;
        this._CommandResetOnDisconnect = 5;
        this._CommandPingPong = 8;
        this._CommandVCC = 9;
        this._CommandSleepSeconds = 10;
        this._CommandSleepMinute = 11;
        this._CommandSleepIoTrigger = 12;
    }
    // Commands
    reboot(params) {
        this.sendCommand(this._CommandReboot, null);
    }
    reset(params) {
        this.sendCommand(this._CommandReset, null);
    }
    selfCheck(params) {
        this.sendCommand(this._CommandSelfCheck, null);
    }
    wait(params) {
        const msec = params.wait;
        const buf = new Uint8Array([msec >> 8, msec]);
        this.sendCommand(this._CommandWait, buf);
    }
    keepWorkingAtOffline(params) {
        this.resetOnDisconnect(!params.keep_working_at_offline);
    }
    ping(params) {
        const unixtime = new Date().getTime();
        const buf = new Uint8Array(params.ping.key.length + 8);
        const upper = Math.floor(unixtime / Math.pow(2, 32));
        const lower = unixtime - upper * Math.pow(2, 32);
        buf[0] = upper >> (8 * 3);
        buf[1] = upper >> (8 * 2);
        buf[2] = upper >> (8 * 1);
        buf[3] = upper >> (8 * 0);
        buf[4] = lower >> (8 * 3);
        buf[5] = lower >> (8 * 2);
        buf[6] = lower >> (8 * 1);
        buf[7] = lower >> (8 * 0);
        for (let i = 0; i < params.ping.key.length; i++) {
            buf[8 + i] = params.ping.key[i];
        }
        this.sendCommand(this._CommandPingPong, buf);
    }
    resetOnDisconnect(mustReset) {
        const buf = new Uint8Array([mustReset ? 1 : 0]);
        this.sendCommand(this._CommandResetOnDisconnect, buf);
    }
    parseFromJson(json) {
        const module = json.system;
        if (module === undefined) {
            return;
        }
        const schemaData = [
            { uri: '/request/system/reboot', onValid: this.reboot },
            { uri: '/request/system/reset', onValid: this.reset },
            { uri: '/request/system/wait', onValid: this.wait },
            { uri: '/request/system/selfCheck', onValid: this.selfCheck },
            {
                uri: '/request/system/keepWorkingAtOffline',
                onValid: this.keepWorkingAtOffline,
            },
            { uri: '/request/system/ping', onValid: this.ping },
            { uri: '/request/system/sleepSeconds', onValid: this.sleepSeconds },
            { uri: '/request/system/sleepMinute', onValid: this.sleepMinute },
            { uri: '/request/system/sleepIoTrigger', onValid: this.sleepIoTrigger },
        ];
        const res = this.validateCommandSchema(schemaData, module, 'system');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[system]unknown command`);
            }
        }
    }
    pong(objToSend, payload) {
        objToSend.system = objToSend.system || {};
        const pongServerTime = new Date().getTime();
        if (payload.length >= 16) {
            payload = Buffer.from(payload);
            const obnizTime = payload.readUIntBE(0, 4) * Math.pow(2, 32) + payload.readUIntBE(4, 4);
            const pingServerTime = payload.readUIntBE(8, 4) * Math.pow(2, 32) + payload.readUIntBE(12, 4);
            const key = [];
            for (let i = 16; i < payload.length; i++) {
                key.push(payload[i]);
            }
            objToSend.system.pong = {
                key,
                obnizTime,
                pingServerTime,
                pongServerTime,
            };
        }
        else {
            objToSend.system.pong = {
                pongServerTime,
            };
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        switch (func) {
            case this._CommandVCC:
                if (payload.byteLength === 3) {
                    let value = (payload[1] << 8) + payload[2];
                    value = value / 100.0;
                    this.envelopWarning(objToSend, 'debug', {
                        message: `Low Voltage ${value}v. connect obniz to more powerful USB.`,
                    });
                }
                break;
            case this._CommandPingPong:
                this.pong(objToSend, payload);
                break;
            default:
                super.notifyFromBinary(objToSend, func, payload);
                break;
        }
    }
    sleepSeconds(params) {
        const sec = params.sleep_seconds;
        const buf = new Uint8Array([sec >> 8, sec]);
        this.sendCommand(this._CommandSleepSeconds, buf);
    }
    sleepMinute(params) {
        const minute = params.sleep_minute;
        const buf = new Uint8Array([minute >> 8, minute]);
        this.sendCommand(this._CommandSleepMinute, buf);
    }
    sleepIoTrigger(params) {
        let trigger = params.sleep_io_trigger;
        if (trigger === true) {
            trigger = 1;
        }
        else {
            trigger = 0;
        }
        const buf = new Uint8Array([trigger]);
        this.sendCommand(this._CommandSleepIoTrigger, buf);
    }
}
exports.default = WSCommandSystem;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandTcp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandTcp extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 13;
        this._MaxPort = 8;
        this._CommandConnect = 0;
        this._CommandClose = 1;
        // Notification
        this._CommandConnection = 2;
        this._CommandWrite = 3;
        // Notification
        this._CommandRead = 4;
    }
    connect(params, index) {
        const domain = new Uint8Array(Buffer.from(params.connect.domain, 'utf8'));
        const buf = new Uint8Array(domain.length + 3);
        buf[0] = index;
        buf[1] =  true && params.connect.port >> 8;
        buf[2] =  true && params.connect.port;
        for (let i = 0; i < domain.length; i++) {
            buf[3 + i] = domain[i];
        }
        this.sendCommand(this._CommandConnect, buf);
    }
    disconnect(params, index) {
        const buf = new Uint8Array([index]);
        this.sendCommand(this._CommandClose, buf);
    }
    write(params, index) {
        const buf = new Uint8Array(params.write.data.length + 1);
        buf[0] = index;
        for (let i = 0; i < params.write.data.length; i++) {
            buf[1 + i] = params.write.data[i];
        }
        this.sendCommand(this._CommandWrite, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < this._MaxPort; i++) {
            const module = json['tcp' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/tcp/connect', onValid: this.connect },
                { uri: '/request/tcp/disconnect', onValid: this.disconnect },
                { uri: '/request/tcp/write', onValid: this.write },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'tcp' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[tcp${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        switch (func) {
            case this._CommandConnect: {
                let state = 'Error';
                switch (payload[1]) {
                    case 0:
                        state = 'ok';
                        break;
                    case 1:
                        state = 'Port Used';
                        break;
                    case 2:
                        state = 'Port Area Error';
                        break;
                    case 3:
                        state = 'Lookup Error';
                        break;
                    case 4:
                        state = 'Error';
                        break;
                }
                const module_index = payload[0];
                objToSend['tcp' + module_index] = {
                    connect: {
                        message: state,
                        code: payload[1],
                    },
                };
                break;
            }
            case this._CommandConnection:
                if (payload.length === 2 && payload[1] === 0) {
                    const module_index = payload[0];
                    objToSend['tcp' + module_index] = {
                        connection: {
                            connected: true,
                        },
                    };
                }
                else {
                    const module_index = payload[0];
                    objToSend['tcp' + module_index] = {
                        connection: {
                            connected: false,
                        },
                    };
                }
                break;
            case this._CommandRead:
                if (payload.length >= 1) {
                    const module_index = payload[0];
                    const arr = new Array(payload.byteLength - 1);
                    for (let i = 0; i < arr.length; i++) {
                        arr[i] = payload[i + 1];
                    }
                    objToSend['tcp' + module_index] = {
                        read: {
                            data: arr,
                        },
                    };
                }
                break;
        }
    }
}
exports.default = WSCommandTcp;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandUart.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandUart extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 4;
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandSend = 2;
        this._CommandRecv = 3;
    }
    // Commands
    init(params, module) {
        const buf = new Uint8Array(13);
        buf[0] = module;
        buf[1] = parseInt(params.tx);
        buf[2] = parseInt(params.rx);
        buf[3] = params.baud >> (3 * 8);
        buf[4] = params.baud >> (2 * 8);
        buf[5] = params.baud >> (1 * 8);
        buf[6] = params.baud;
        if (params.stop === 1) {
            buf[7] = 1;
        }
        else if (params.stop === 1.5) {
            buf[7] = 2;
        }
        else if (params.stop === 2) {
            buf[7] = 3;
        }
        else if (params.stop === 0) {
            buf[7] = 0;
        }
        else {
            throw new Error('uart: invalid stop bits');
        }
        buf[8] = params.bits;
        if (params.parity === 'even') {
            buf[9] = 2;
        }
        else if (params.parity === 'odd') {
            buf[9] = 3;
        }
        if (params.flowcontrol === 'rts') {
            buf[10] = 2;
        }
        else if (params.flowcontrol === 'cts') {
            buf[10] = 3;
        }
        else if (params.flowcontrol === 'rts-cts') {
            buf[10] = 4;
        }
        if (params.rts !== null) {
            buf[11] = params.rts;
        }
        if (params.cts !== null) {
            buf[12] = params.cts;
        }
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params, module) {
        const buf = new Uint8Array(1);
        buf[0] = module;
        this.sendCommand(this._CommandDeinit, buf);
    }
    send(params, module) {
        const buf = new Uint8Array(1 + params.data.length);
        buf[0] = module;
        buf.set(params.data, 1);
        this.sendCommand(this._CommandSend, buf);
    }
    parseFromJson(json) {
        // 0~2
        for (let i = 0; i < 3; i++) {
            const module = json['uart' + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: '/request/uart/init', onValid: this.init },
                { uri: '/request/uart/send', onValid: this.send },
                { uri: '/request/uart/deinit', onValid: this.deinit },
            ];
            const res = this.validateCommandSchema(schemaData, module, 'uart' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[uart${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandRecv && payload.byteLength > 1) {
            const module_index = payload[0];
            const arr = new Array(payload.byteLength - 1);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = payload[i + 1];
            }
            objToSend['uart' + module_index] = {
                data: arr,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandUart;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSCommandWiFi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const jsonBinaryConverter_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/jsonBinaryConverter.js"));
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
class WSCommandWiFi extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 14;
        this._CommandScan = 0;
    }
    scan(params, index) {
        this.sendCommand(this._CommandScan, null);
    }
    parseFromJson(json) {
        const module = json.wifi;
        if (module === undefined) {
            return;
        }
        const schemaData = [{ uri: '/request/wifi/scan', onValid: this.scan }];
        const res = this.validateCommandSchema(schemaData, module, 'wifi');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[network]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        switch (func) {
            case this._CommandScan: {
                let ScanState;
                (function (ScanState) {
                    ScanState[ScanState["SCAN_SSID_LEN"] = 0] = "SCAN_SSID_LEN";
                    ScanState[ScanState["SCAN_SSID"] = 1] = "SCAN_SSID";
                    ScanState[ScanState["SCAN_MAC"] = 2] = "SCAN_MAC";
                    ScanState[ScanState["SCAN_RSSI"] = 3] = "SCAN_RSSI";
                })(ScanState || (ScanState = {}));
                let mode = ScanState.SCAN_SSID_LEN;
                let tmpIndex = 0;
                let ssid = '';
                let macAddress = '';
                let rssi = 0;
                const scanArray = [];
                for (let i = 0; i < payload.length; i++) {
                    switch (mode) {
                        case ScanState.SCAN_SSID_LEN:
                            tmpIndex = payload[i];
                            mode = ScanState.SCAN_SSID;
                            break;
                        case ScanState.SCAN_SSID:
                            ssid += String.fromCharCode(payload[i]);
                            tmpIndex--;
                            if (tmpIndex === 0) {
                                mode = ScanState.SCAN_MAC;
                                tmpIndex = 0;
                            }
                            break;
                        case ScanState.SCAN_MAC:
                            macAddress += String.fromCharCode(payload[i]);
                            tmpIndex++;
                            if (tmpIndex === 12) {
                                mode = ScanState.SCAN_RSSI;
                            }
                            break;
                        case ScanState.SCAN_RSSI:
                            rssi = jsonBinaryConverter_1.default.signedNumberFromBinary([payload[i]]);
                            mode = ScanState.SCAN_SSID_LEN;
                            scanArray.push({
                                ssid,
                                macAddress,
                                rssi,
                            });
                            ssid = '';
                            macAddress = '';
                            rssi = 0;
                            break;
                    }
                }
                objToSend.wifi = {
                    scan: scanArray,
                };
                break;
            }
        }
    }
}
exports.default = WSCommandWiFi;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/WSSchema.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const tv4 = __webpack_require__("./node_modules/tv4/tv4.js");
tv4.defineError('UNIQUE_KEYS', 10001, '{uniqueKeys} are must be unique value.');
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
tv4.defineKeyword('uniqueKeys', ((data, value, schema) => {
    // tslint:disable-line
    if (!Array.isArray(value)) {
        return null;
    }
    const targets = [];
    for (const key of value) {
        if (data[key] !== null && data[key] !== undefined) {
            targets.push(data[key]);
        }
    }
    const duplicated = targets.filter((x, i, self) => {
        return self.indexOf(x) !== self.lastIndexOf(x);
    });
    if (duplicated.length > 0) {
        return {
            code: tv4.errorCodes.UNIQUE_KEYS,
            message: { uniqueKeys: value.join(',') },
        };
    }
    return null;
}));
const wsSchema = [];
const require_context_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/webpackReplace/require-context-browser.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
__webpack_require__("./dist/src/obniz/libs/wscommand sync recursive").context = require_context_1.default;
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
if (__webpack_require__("./dist/src/obniz/libs/wscommand sync recursive").context && __webpack_require__("./dist/src/obniz/libs/wscommand sync recursive").context.setBaseDir) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    __webpack_require__("./dist/src/obniz/libs/wscommand sync recursive").context.setBaseDir(__dirname);
}
const context = __webpack_require__("./dist/src/json_schema sync recursive \\.yml$");
for (const path of context.keys()) {
    const oneSchema = context(path);
    wsSchema.push(oneSchema);
}
wsSchema.map(tv4.addSchema);
exports.default = tv4;

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
const WSCommand_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommand.js"));
const WSCommandAD_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandAD.js"));
const WSCommandBle_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandBle.js"));
const WSCommandDirective_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandDirective.js"));
const WSCommandDisplay_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandDisplay.js"));
const WSCommandI2C_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandI2C.js"));
const WSCommandIO_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandIO.js"));
const WSCommandLogicAnalyzer_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandLogicAnalyzer.js"));
const WSCommandMeasurement_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandMeasurement.js"));
const WSCommandPlugin_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandPlugin.js"));
const WSCommandPWM_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandPWM.js"));
const WSCommandSPI_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandSPI.js"));
const WSCommandSwitch_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandSwitch.js"));
const WSCommandSystem_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandSystem.js"));
const WSCommandTcp_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandTcp.js"));
const WSCommandUart_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandUart.js"));
const WSCommandWiFi_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/wscommand/WSCommandWiFi.js"));
/* eslint-disable */
WSCommand_1.default.addCommandClass("WSCommandSystem", WSCommandSystem_1.default);
WSCommand_1.default.addCommandClass("WSCommandDirective", WSCommandDirective_1.default);
WSCommand_1.default.addCommandClass("WSCommandIO", WSCommandIO_1.default);
WSCommand_1.default.addCommandClass("WSCommandPWM", WSCommandPWM_1.default);
WSCommand_1.default.addCommandClass("WSCommandUart", WSCommandUart_1.default);
WSCommand_1.default.addCommandClass("WSCommandAD", WSCommandAD_1.default);
WSCommand_1.default.addCommandClass("WSCommandSPI", WSCommandSPI_1.default);
WSCommand_1.default.addCommandClass("WSCommandI2C", WSCommandI2C_1.default);
WSCommand_1.default.addCommandClass("WSCommandLogicAnalyzer", WSCommandLogicAnalyzer_1.default);
WSCommand_1.default.addCommandClass("WSCommandDisplay", WSCommandDisplay_1.default);
WSCommand_1.default.addCommandClass("WSCommandSwitch", WSCommandSwitch_1.default);
WSCommand_1.default.addCommandClass("WSCommandBle", WSCommandBle_1.default);
WSCommand_1.default.addCommandClass("WSCommandMeasurement", WSCommandMeasurement_1.default);
WSCommand_1.default.addCommandClass("WSCommandTcp", WSCommandTcp_1.default);
WSCommand_1.default.addCommandClass("WSCommandWiFi", WSCommandWiFi_1.default);
WSCommand_1.default.addCommandClass("WSCommandPlugin", WSCommandPlugin_1.default);
exports.default = WSCommand_1.default;


/***/ }),

/***/ "./dist/src/obniz/libs/wscommand/jsonBinaryConverter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @ignore
 */
class JsonBinaryConverter {
    static convertFromBinaryToJson(schema, binary) {
        const types = {
            hex: this.hexFromBinary.bind(this),
            uuid: this.uuidFromBinary.bind(this),
            number: this.numberFromBinary.bind(this),
            'signed number': this.signedNumberFromBinary.bind(this),
            int: this.numberFromBinary.bind(this),
            char: this.numberFromBinary.bind(this),
            enum: this.enumFromBinary.bind(this),
            dataArray: this.dataArrayFromBinary.bind(this),
        };
        const json = {};
        let count = 0;
        for (let i = 0; i < schema.length; i++) {
            const data = binary.slice(count, schema[i].length ? count + schema[i].length : undefined);
            json[schema[i].name] = types[schema[i].type](data, schema[i]);
            if (schema[i].length) {
                count += schema[i].length;
            }
            else {
                break;
            }
        }
        return json;
    }
    static hexFromBinary(data, schema) {
        let str = '';
        for (let i = 0; i < data.length; i++) {
            if (schema.endianness && schema.endianness === 'little') {
                str = ('00' + data[i].toString(16)).slice(-2) + str;
            }
            else {
                str = str + ('00' + data[i].toString(16)).slice(-2);
            }
        }
        return str;
    }
    static uuidFromBinary(data) {
        const len = data[0] * 16 + data[1];
        if (len === 0) {
            return null;
        }
        const uuidData = data.slice(2);
        let str = '';
        for (let i = 0; i < len; i++) {
            str = ('00' + uuidData[i].toString(16)).slice(-2) + str;
        }
        return str;
    }
    static signedNumberFromBinary(data) {
        // big adian
        let val = data[0] & 0x7f;
        for (let i = 1; i < data.length; i++) {
            val = val * 256 + data[i];
        }
        if ((data[0] & 0x80) !== 0) {
            val = val - Math.pow(2, data.length * 8 - 1);
        }
        return val;
    }
    static numberFromBinary(data) {
        // big adian
        let val = 0;
        for (let i = 0; i < data.length; i++) {
            val = val * 256 + data[i];
        }
        return val;
    }
    static keyForVal(enumvals, val) {
        return Object.keys(enumvals).filter((k) => {
            return enumvals[k] === val;
        })[0];
    }
    static enumFromBinary(data, schema) {
        const enumVals = schema.enum;
        let val = this.numberFromBinary(data);
        if (schema.flags === true) {
            const temp = [];
            for (const key of Object.keys(enumVals)) {
                const flag = enumVals[key] & val;
                if (flag) {
                    temp.push(key);
                }
            }
            val = temp;
        }
        else {
            const tmp = this.keyForVal(enumVals, val);
            if (tmp) {
                val = tmp;
            }
        }
        return val;
    }
    static dataArrayFromBinary(data) {
        const arr = new Array(data.length);
        for (let i = 0; i < data.length; i++) {
            arr[i] = data[i];
        }
        return arr;
    }
    static createSendBuffer(schema, data) {
        const array = [];
        for (let i = 0; i < schema.length; i++) {
            const schemaRow = schema[i];
            let row;
            if (Array.isArray(schemaRow)) {
                for (const key in schemaRow) {
                    const customSchemaRow = Object.assign({}, schemaRow[key], {
                        required: true,
                    });
                    row = this.analyzeSchema(data, customSchemaRow);
                    if (row) {
                        break;
                    }
                }
            }
            else {
                row = this.analyzeSchema(data, schemaRow);
            }
            Array.prototype.push.apply(array, row);
        }
        return new Uint8Array(array);
    }
    static analyzeSchema(allData, schemaRow) {
        const types = {
            hex: this.hexToBinary.bind(this),
            uuid: this.uuidToBinary.bind(this),
            int: this.intToBinary.bind(this),
            char: this.charToBinary.bind(this),
            dataArray: this.dataArrayToBinary.bind(this),
            enum: this.enumToBinary.bind(this),
            string: this.stringToBinary.bind(this),
            text: this.stringToBinary.bind(this),
            flag: this.flagToBinary.bind(this),
        };
        let val;
        if (schemaRow.path) {
            val = this.getProperty(allData, schemaRow.path);
        }
        if (val === undefined && schemaRow.required) {
            return null;
        }
        if (val === undefined && schemaRow.default) {
            val = schemaRow.default;
        }
        const row = types[schemaRow.type](val, schemaRow);
        if (schemaRow.length && row.length !== schemaRow.length) {
            console.log('JSON->BINARY SCHEMA ERROR: (', val, ')', schemaRow);
        }
        return row;
    }
    static getProperty(object, path) {
        if (path === '' || path === undefined) {
            return object;
        }
        if (typeof path === 'string') {
            path = path.split('.');
        }
        if (!Array.isArray(path)) {
            path = [path];
        }
        let index = 0;
        const length = path.length;
        while (index < length) {
            object = object[path[index++]];
            if (object === undefined) {
                return undefined;
            }
        }
        return index && index === length ? object : undefined;
    }
    static hexToBinary(data, schema) {
        const array = [];
        const hex = data.toLowerCase().replace(/[^0-9abcdef]/g, '');
        for (let i = 0; i < hex.length / 2; i++) {
            array[i] = parseInt(hex[i * 2] + hex[i * 2 + 1], 16);
        }
        if (schema && schema.endianness && schema.endianness === 'little') {
            array.reverse();
        }
        return array;
    }
    static intToBinary(data) {
        const array = [];
        array[0] = (data >> (8 * 3)) & 0xff;
        array[1] = (data >> (8 * 2)) & 0xff;
        array[2] = (data >> (8 * 1)) & 0xff;
        array[3] = (data >> (8 * 0)) & 0xff;
        return array;
    }
    static charToBinary(data) {
        const array = [];
        array[0] = data & 0xff;
        return array;
    }
    static dataArrayToBinary(data) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        return data;
    }
    static uuidToBinary(data) {
        const uuid = this.hexToBinary(data);
        uuid.reverse(); // big endianness -> little endianness;
        const length = uuid.length;
        const array = [];
        array[0] = (length >> (8 * 1)) & 0xff;
        array[1] = (length >> (8 * 0)) & 0xff;
        Array.prototype.push.apply(array, uuid);
        for (let i = array.length; i < 16 + 2; i++) {
            array[i] = 0;
        }
        return array;
    }
    static enumToBinary(data, schema) {
        const array = [];
        array.push(schema.enum[data]);
        return array;
    }
    static flagToBinary(data, schema) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        const flags = schema.flags;
        let value = 0;
        for (const key in flags) {
            if (data.includes(flags[key])) {
                value += parseInt(key);
            }
        }
        const array = [];
        const length = schema.length || 1;
        for (let i = length - 1; i >= 0; i--) {
            array.push((value >> (i * 8)) & 0xff);
        }
        return array;
    }
    static stringToBinary(data) {
        return new Uint8Array(Buffer.from(data, 'utf8'));
    }
}
exports.default = JsonBinaryConverter;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts sync recursive \\.js$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ADConverter/hx711/index.js": "./dist/src/parts/ADConverter/hx711/index.js",
	"./Accessory/USB/index.js": "./dist/src/parts/Accessory/USB/index.js",
	"./Biological/PULSE08-M5STICKC-S/index.js": "./dist/src/parts/Biological/PULSE08-M5STICKC-S/index.js",
	"./Ble/2jcie/index.js": "./dist/src/parts/Ble/2jcie/index.js",
	"./Ble/ENERTALK/index.js": "./dist/src/parts/Ble/ENERTALK/index.js",
	"./Ble/EXTxx/index.js": "./dist/src/parts/Ble/EXTxx/index.js",
	"./Ble/EXVital/index.js": "./dist/src/parts/Ble/EXVital/index.js",
	"./Ble/HEM_6233T/index.js": "./dist/src/parts/Ble/HEM_6233T/index.js",
	"./Ble/HEM_9200T/index.js": "./dist/src/parts/Ble/HEM_9200T/index.js",
	"./Ble/KankiAirMier/index.js": "./dist/src/parts/Ble/KankiAirMier/index.js",
	"./Ble/LogttaAD/index.js": "./dist/src/parts/Ble/LogttaAD/index.js",
	"./Ble/LogttaAccel/index.js": "./dist/src/parts/Ble/LogttaAccel/index.js",
	"./Ble/LogttaCO2/index.js": "./dist/src/parts/Ble/LogttaCO2/index.js",
	"./Ble/LogttaTemp/index.js": "./dist/src/parts/Ble/LogttaTemp/index.js",
	"./Ble/MESH_100AC/index.js": "./dist/src/parts/Ble/MESH_100AC/index.js",
	"./Ble/MESH_100BU/index.js": "./dist/src/parts/Ble/MESH_100BU/index.js",
	"./Ble/MESH_100GP/index.js": "./dist/src/parts/Ble/MESH_100GP/index.js",
	"./Ble/MESH_100LE/index.js": "./dist/src/parts/Ble/MESH_100LE/index.js",
	"./Ble/MESH_100MD/index.js": "./dist/src/parts/Ble/MESH_100MD/index.js",
	"./Ble/MESH_100PA/index.js": "./dist/src/parts/Ble/MESH_100PA/index.js",
	"./Ble/MESH_100TH/index.js": "./dist/src/parts/Ble/MESH_100TH/index.js",
	"./Ble/MESH_js/MESH_js_AC.js": "./dist/src/parts/Ble/MESH_js/MESH_js_AC.js",
	"./Ble/MESH_js/MESH_js_BU.js": "./dist/src/parts/Ble/MESH_js/MESH_js_BU.js",
	"./Ble/MESH_js/MESH_js_Error.js": "./dist/src/parts/Ble/MESH_js/MESH_js_Error.js",
	"./Ble/MESH_js/MESH_js_GP.js": "./dist/src/parts/Ble/MESH_js/MESH_js_GP.js",
	"./Ble/MESH_js/MESH_js_LE.js": "./dist/src/parts/Ble/MESH_js/MESH_js_LE.js",
	"./Ble/MESH_js/MESH_js_MD.js": "./dist/src/parts/Ble/MESH_js/MESH_js_MD.js",
	"./Ble/MESH_js/MESH_js_PA.js": "./dist/src/parts/Ble/MESH_js/MESH_js_PA.js",
	"./Ble/MESH_js/MESH_js_TH.js": "./dist/src/parts/Ble/MESH_js/MESH_js_TH.js",
	"./Ble/MESH_js/index.js": "./dist/src/parts/Ble/MESH_js/index.js",
	"./Ble/MINEW_S1/index.js": "./dist/src/parts/Ble/MINEW_S1/index.js",
	"./Ble/MT_500BT/index.js": "./dist/src/parts/Ble/MT_500BT/index.js",
	"./Ble/MiniBreeze/index.js": "./dist/src/parts/Ble/MiniBreeze/index.js",
	"./Ble/PLS_01BT/index.js": "./dist/src/parts/Ble/PLS_01BT/index.js",
	"./Ble/REX_BTPM25V/index.js": "./dist/src/parts/Ble/REX_BTPM25V/index.js",
	"./Ble/RS_BTEVS1/index.js": "./dist/src/parts/Ble/RS_BTEVS1/index.js",
	"./Ble/RS_BTIREX2/index.js": "./dist/src/parts/Ble/RS_BTIREX2/index.js",
	"./Ble/RS_BTWATTCH2/index.js": "./dist/src/parts/Ble/RS_BTWATTCH2/index.js",
	"./Ble/RS_SEEK3/index.js": "./dist/src/parts/Ble/RS_SEEK3/index.js",
	"./Ble/STM550B/index.js": "./dist/src/parts/Ble/STM550B/index.js",
	"./Ble/TR4/index.js": "./dist/src/parts/Ble/TR4/index.js",
	"./Ble/TR7/index.js": "./dist/src/parts/Ble/TR7/index.js",
	"./Ble/UA1200BLE/index.js": "./dist/src/parts/Ble/UA1200BLE/index.js",
	"./Ble/UA651BLE/index.js": "./dist/src/parts/Ble/UA651BLE/index.js",
	"./Ble/UC421BLE/index.js": "./dist/src/parts/Ble/UC421BLE/index.js",
	"./Ble/UT201BLE/index.js": "./dist/src/parts/Ble/UT201BLE/index.js",
	"./Ble/VitalBand/index.js": "./dist/src/parts/Ble/VitalBand/index.js",
	"./Ble/iBS01/index.js": "./dist/src/parts/Ble/iBS01/index.js",
	"./Ble/iBS01G/index.js": "./dist/src/parts/Ble/iBS01G/index.js",
	"./Ble/iBS01H/index.js": "./dist/src/parts/Ble/iBS01H/index.js",
	"./Ble/iBS01RG/index.js": "./dist/src/parts/Ble/iBS01RG/index.js",
	"./Ble/iBS01T/index.js": "./dist/src/parts/Ble/iBS01T/index.js",
	"./Ble/iBS02IR/index.js": "./dist/src/parts/Ble/iBS02IR/index.js",
	"./Ble/iBS02PIR/index.js": "./dist/src/parts/Ble/iBS02PIR/index.js",
	"./Ble/iBS03/index.js": "./dist/src/parts/Ble/iBS03/index.js",
	"./Ble/iBS03G/index.js": "./dist/src/parts/Ble/iBS03G/index.js",
	"./Ble/iBS03R/index.js": "./dist/src/parts/Ble/iBS03R/index.js",
	"./Ble/iBS03T/index.js": "./dist/src/parts/Ble/iBS03T/index.js",
	"./Ble/iBS03TP/index.js": "./dist/src/parts/Ble/iBS03TP/index.js",
	"./Ble/iBS03T_RH/index.js": "./dist/src/parts/Ble/iBS03T_RH/index.js",
	"./Ble/iBS04/index.js": "./dist/src/parts/Ble/iBS04/index.js",
	"./Ble/iBS04i/index.js": "./dist/src/parts/Ble/iBS04i/index.js",
	"./Ble/iBS05H/index.js": "./dist/src/parts/Ble/iBS05H/index.js",
	"./Ble/linking/index.js": "./dist/src/parts/Ble/linking/index.js",
	"./Ble/linking/modules/advertising.js": "./dist/src/parts/Ble/linking/modules/advertising.js",
	"./Ble/linking/modules/device.js": "./dist/src/parts/Ble/linking/modules/device.js",
	"./Ble/linking/modules/ieee754.js": "./dist/src/parts/Ble/linking/modules/ieee754.js",
	"./Ble/linking/modules/service-notification.js": "./dist/src/parts/Ble/linking/modules/service-notification.js",
	"./Ble/linking/modules/service-operation.js": "./dist/src/parts/Ble/linking/modules/service-operation.js",
	"./Ble/linking/modules/service-property.js": "./dist/src/parts/Ble/linking/modules/service-property.js",
	"./Ble/linking/modules/service-sensor.js": "./dist/src/parts/Ble/linking/modules/service-sensor.js",
	"./Ble/linking/modules/service-setting.js": "./dist/src/parts/Ble/linking/modules/service-setting.js",
	"./Ble/linking/modules/service.js": "./dist/src/parts/Ble/linking/modules/service.js",
	"./Ble/scbtgaaac/index.js": "./dist/src/parts/Ble/scbtgaaac/index.js",
	"./Ble/tm511/index.js": "./dist/src/parts/Ble/tm511/index.js",
	"./Ble/tm530/index.js": "./dist/src/parts/Ble/tm530/index.js",
	"./Ble/toio_corecube/index.js": "./dist/src/parts/Ble/toio_corecube/index.js",
	"./Ble/uprism/index.js": "./dist/src/parts/Ble/uprism/index.js",
	"./Ble/utils/abstracts/Logtta.js": "./dist/src/parts/Ble/utils/abstracts/Logtta.js",
	"./Ble/utils/abstracts/MESH.js": "./dist/src/parts/Ble/utils/abstracts/MESH.js",
	"./Ble/utils/abstracts/iBS.js": "./dist/src/parts/Ble/utils/abstracts/iBS.js",
	"./Ble/utils/advertisement/advertismentAnalyzer.js": "./dist/src/parts/Ble/utils/advertisement/advertismentAnalyzer.js",
	"./Ble/utils/services/batteryService.js": "./dist/src/parts/Ble/utils/services/batteryService.js",
	"./Ble/utils/services/genericAccess.js": "./dist/src/parts/Ble/utils/services/genericAccess.js",
	"./Camera/ArduCAMMini/index.js": "./dist/src/parts/Camera/ArduCAMMini/index.js",
	"./Camera/JpegSerialCam/index.js": "./dist/src/parts/Camera/JpegSerialCam/index.js",
	"./ColorSensor/PT550/index.js": "./dist/src/parts/ColorSensor/PT550/index.js",
	"./ColorSensor/S11059/index.js": "./dist/src/parts/ColorSensor/S11059/index.js",
	"./DAConverter/MCP4725/index.js": "./dist/src/parts/DAConverter/MCP4725/index.js",
	"./Display/7SegmentLED/index.js": "./dist/src/parts/Display/7SegmentLED/index.js",
	"./Display/7SegmentLEDArray/index.js": "./dist/src/parts/Display/7SegmentLEDArray/index.js",
	"./Display/7SegmentLED_MAX7219/index.js": "./dist/src/parts/Display/7SegmentLED_MAX7219/index.js",
	"./Display/MatrixLED_HT16K33/index.js": "./dist/src/parts/Display/MatrixLED_HT16K33/index.js",
	"./Display/MatrixLED_MAX7219/index.js": "./dist/src/parts/Display/MatrixLED_MAX7219/index.js",
	"./Display/ST7735S/index.js": "./dist/src/parts/Display/ST7735S/index.js",
	"./Display/SainSmartTFT18LCD/index.js": "./dist/src/parts/Display/SainSmartTFT18LCD/index.js",
	"./Display/SharpMemoryTFT/index.js": "./dist/src/parts/Display/SharpMemoryTFT/index.js",
	"./DistanceSensor/GP2Y0A21YK0F/index.js": "./dist/src/parts/DistanceSensor/GP2Y0A21YK0F/index.js",
	"./DistanceSensor/HC-SR04/index.js": "./dist/src/parts/DistanceSensor/HC-SR04/index.js",
	"./DistanceSensor/VL53L0X/index.js": "./dist/src/parts/DistanceSensor/VL53L0X/index.js",
	"./Ethernet/W5500/index.js": "./dist/src/parts/Ethernet/W5500/index.js",
	"./GPS/GYSFDMAXB/index.js": "./dist/src/parts/GPS/GYSFDMAXB/index.js",
	"./GasSensor/CCS811/index.js": "./dist/src/parts/GasSensor/CCS811/index.js",
	"./GasSensor/MH_Z19B/index.js": "./dist/src/parts/GasSensor/MH_Z19B/index.js",
	"./GasSensor/MQ135/index.js": "./dist/src/parts/GasSensor/MQ135/index.js",
	"./GasSensor/MQ2/index.js": "./dist/src/parts/GasSensor/MQ2/index.js",
	"./GasSensor/MQ3/index.js": "./dist/src/parts/GasSensor/MQ3/index.js",
	"./GasSensor/MQ4/index.js": "./dist/src/parts/GasSensor/MQ4/index.js",
	"./GasSensor/MQ5/index.js": "./dist/src/parts/GasSensor/MQ5/index.js",
	"./GasSensor/MQ6/index.js": "./dist/src/parts/GasSensor/MQ6/index.js",
	"./GasSensor/MQ7/index.js": "./dist/src/parts/GasSensor/MQ7/index.js",
	"./GasSensor/MQ8/index.js": "./dist/src/parts/GasSensor/MQ8/index.js",
	"./GasSensor/MQ9/index.js": "./dist/src/parts/GasSensor/MQ9/index.js",
	"./GasSensor/MQGas/index.js": "./dist/src/parts/GasSensor/MQGas/index.js",
	"./Grove/Grove_3AxisAccelerometer/index.js": "./dist/src/parts/Grove/Grove_3AxisAccelerometer/index.js",
	"./Grove/Grove_Button/index.js": "./dist/src/parts/Grove/Grove_Button/index.js",
	"./Grove/Grove_Buzzer/index.js": "./dist/src/parts/Grove/Grove_Buzzer/index.js",
	"./Grove/Grove_DistanceSensor/index.js": "./dist/src/parts/Grove/Grove_DistanceSensor/index.js",
	"./Grove/Grove_EARTH/index.js": "./dist/src/parts/Grove/Grove_EARTH/index.js",
	"./Grove/Grove_EarHeartRate/index.js": "./dist/src/parts/Grove/Grove_EarHeartRate/index.js",
	"./Grove/Grove_GPS/index.js": "./dist/src/parts/Grove/Grove_GPS/index.js",
	"./Grove/Grove_GestureSensor/index.js": "./dist/src/parts/Grove/Grove_GestureSensor/index.js",
	"./Grove/Grove_JoyStick/index.js": "./dist/src/parts/Grove/Grove_JoyStick/index.js",
	"./Grove/Grove_LightSensor/index.js": "./dist/src/parts/Grove/Grove_LightSensor/index.js",
	"./Grove/Grove_MP3/index.js": "./dist/src/parts/Grove/Grove_MP3/index.js",
	"./Grove/Grove_MicroSwitch/index.js": "./dist/src/parts/Grove/Grove_MicroSwitch/index.js",
	"./Grove/Grove_PressureSensor/index.js": "./dist/src/parts/Grove/Grove_PressureSensor/index.js",
	"./Grove/Grove_Relay/index.js": "./dist/src/parts/Grove/Grove_Relay/index.js",
	"./Grove/Grove_RotaryAngleSensor/index.js": "./dist/src/parts/Grove/Grove_RotaryAngleSensor/index.js",
	"./Grove/Grove_SHT35Sensor/index.js": "./dist/src/parts/Grove/Grove_SHT35Sensor/index.js",
	"./Grove/Grove_SoilMoistureSensor/index.js": "./dist/src/parts/Grove/Grove_SoilMoistureSensor/index.js",
	"./Grove/Grove_Speaker/index.js": "./dist/src/parts/Grove/Grove_Speaker/index.js",
	"./Grove/Grove_WaterLevelSensor/index.js": "./dist/src/parts/Grove/Grove_WaterLevelSensor/index.js",
	"./GyroSensor/ENC03R_Module/index.js": "./dist/src/parts/GyroSensor/ENC03R_Module/index.js",
	"./Infrared/IRModule/index.js": "./dist/src/parts/Infrared/IRModule/index.js",
	"./Infrared/IRSensor/index.js": "./dist/src/parts/Infrared/IRSensor/index.js",
	"./Infrared/InfraredLED/index.js": "./dist/src/parts/Infrared/InfraredLED/index.js",
	"./Infrared/YG1006/index.js": "./dist/src/parts/Infrared/YG1006/index.js",
	"./Keyestudio/Keyestudio_Button/index.js": "./dist/src/parts/Keyestudio/Keyestudio_Button/index.js",
	"./Keyestudio/Keyestudio_Buzzer/index.js": "./dist/src/parts/Keyestudio/Keyestudio_Buzzer/index.js",
	"./Keyestudio/Keyestudio_HT16K33/index.js": "./dist/src/parts/Keyestudio/Keyestudio_HT16K33/index.js",
	"./Keyestudio/Keyestudio_MoistureSensor/index.js": "./dist/src/parts/Keyestudio/Keyestudio_MoistureSensor/index.js",
	"./Keyestudio/Keyestudio_PIR/index.js": "./dist/src/parts/Keyestudio/Keyestudio_PIR/index.js",
	"./Keyestudio/Keyestudio_TemperatureSensor/index.js": "./dist/src/parts/Keyestudio/Keyestudio_TemperatureSensor/index.js",
	"./Keyestudio/Keyestudio_TrafficLight/index.js": "./dist/src/parts/Keyestudio/Keyestudio_TrafficLight/index.js",
	"./Light/FullColorLED/index.js": "./dist/src/parts/Light/FullColorLED/index.js",
	"./Light/LED/index.js": "./dist/src/parts/Light/LED/index.js",
	"./Light/WS2811/index.js": "./dist/src/parts/Light/WS2811/index.js",
	"./Light/WS2812/index.js": "./dist/src/parts/Light/WS2812/index.js",
	"./Light/WS2812B/index.js": "./dist/src/parts/Light/WS2812B/index.js",
	"./Logic/MCP23S08/index.js": "./dist/src/parts/Logic/MCP23S08/index.js",
	"./Logic/SNx4HC595/index.js": "./dist/src/parts/Logic/SNx4HC595/index.js",
	"./M5Stack/M5StickC_ADC/index.js": "./dist/src/parts/M5Stack/M5StickC_ADC/index.js",
	"./M5Stack/M5StickC_DAC/index.js": "./dist/src/parts/M5Stack/M5StickC_DAC/index.js",
	"./M5Stack/M5StickC_FINGER/index.js": "./dist/src/parts/M5Stack/M5StickC_FINGER/index.js",
	"./M5Stack/M5StickC_JoyStick/index.js": "./dist/src/parts/M5Stack/M5StickC_JoyStick/index.js",
	"./M5Stack/M5StickC_RS485/index.js": "./dist/src/parts/M5Stack/M5StickC_RS485/index.js",
	"./M5Stack/M5StickC_ToF/index.js": "./dist/src/parts/M5Stack/M5StickC_ToF/index.js",
	"./M5Stack/M5StickC_Yun/index.js": "./dist/src/parts/M5Stack/M5StickC_Yun/index.js",
	"./Magnet/CT10/index.js": "./dist/src/parts/Magnet/CT10/index.js",
	"./Magnet/HMC5883L/index.js": "./dist/src/parts/Magnet/HMC5883L/index.js",
	"./Memory/24LC256/index.js": "./dist/src/parts/Memory/24LC256/index.js",
	"./MovementSensor/AK09916/index.js": "./dist/src/parts/MovementSensor/AK09916/index.js",
	"./MovementSensor/AK8963/index.js": "./dist/src/parts/MovementSensor/AK8963/index.js",
	"./MovementSensor/Button/index.js": "./dist/src/parts/MovementSensor/Button/index.js",
	"./MovementSensor/FlickHat/index.js": "./dist/src/parts/MovementSensor/FlickHat/index.js",
	"./MovementSensor/HC-SR505/index.js": "./dist/src/parts/MovementSensor/HC-SR505/index.js",
	"./MovementSensor/ICM20948/index.js": "./dist/src/parts/MovementSensor/ICM20948/index.js",
	"./MovementSensor/IPM-165/index.js": "./dist/src/parts/MovementSensor/IPM-165/index.js",
	"./MovementSensor/JoyStick/index.js": "./dist/src/parts/MovementSensor/JoyStick/index.js",
	"./MovementSensor/KXR94-2050/index.js": "./dist/src/parts/MovementSensor/KXR94-2050/index.js",
	"./MovementSensor/KXSC7-2050/index.js": "./dist/src/parts/MovementSensor/KXSC7-2050/index.js",
	"./MovementSensor/MPU6050/index.js": "./dist/src/parts/MovementSensor/MPU6050/index.js",
	"./MovementSensor/MPU6500/index.js": "./dist/src/parts/MovementSensor/MPU6500/index.js",
	"./MovementSensor/MPU6886/index.js": "./dist/src/parts/MovementSensor/MPU6886/index.js",
	"./MovementSensor/MPU9250/index.js": "./dist/src/parts/MovementSensor/MPU9250/index.js",
	"./MovementSensor/PaPIRsVZ/index.js": "./dist/src/parts/MovementSensor/PaPIRsVZ/index.js",
	"./MovementSensor/Potentiometer/index.js": "./dist/src/parts/MovementSensor/Potentiometer/index.js",
	"./MovementSensor/SH200Q/index.js": "./dist/src/parts/MovementSensor/SH200Q/index.js",
	"./Moving/DCMotor/index.js": "./dist/src/parts/Moving/DCMotor/index.js",
	"./Moving/PCA9685/index.js": "./dist/src/parts/Moving/PCA9685/index.js",
	"./Moving/ServoMotor/index.js": "./dist/src/parts/Moving/ServoMotor/index.js",
	"./Moving/Solenoid/index.js": "./dist/src/parts/Moving/Solenoid/index.js",
	"./Moving/StepperMotor/index.js": "./dist/src/parts/Moving/StepperMotor/index.js",
	"./Power/AXP192/index.js": "./dist/src/parts/Power/AXP192/index.js",
	"./PressureSensor/BMP280/index.js": "./dist/src/parts/PressureSensor/BMP280/index.js",
	"./PressureSensor/DPS310/index.js": "./dist/src/parts/PressureSensor/DPS310/index.js",
	"./PressureSensor/FSR-40X/index.js": "./dist/src/parts/PressureSensor/FSR-40X/index.js",
	"./SoilSensor/SEN0114/index.js": "./dist/src/parts/SoilSensor/SEN0114/index.js",
	"./Sound/Speaker/index.js": "./dist/src/parts/Sound/Speaker/index.js",
	"./TemperatureSensor/analog/AnalogTemperatureSensor.js": "./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js",
	"./TemperatureSensor/analog/LM35DZ/index.js": "./dist/src/parts/TemperatureSensor/analog/LM35DZ/index.js",
	"./TemperatureSensor/analog/LM60/index.js": "./dist/src/parts/TemperatureSensor/analog/LM60/index.js",
	"./TemperatureSensor/analog/LM61/index.js": "./dist/src/parts/TemperatureSensor/analog/LM61/index.js",
	"./TemperatureSensor/analog/LMT87/index.js": "./dist/src/parts/TemperatureSensor/analog/LMT87/index.js",
	"./TemperatureSensor/analog/MCP9700/index.js": "./dist/src/parts/TemperatureSensor/analog/MCP9700/index.js",
	"./TemperatureSensor/analog/MCP9701/index.js": "./dist/src/parts/TemperatureSensor/analog/MCP9701/index.js",
	"./TemperatureSensor/analog/S8100B/index.js": "./dist/src/parts/TemperatureSensor/analog/S8100B/index.js",
	"./TemperatureSensor/analog/S8120C/index.js": "./dist/src/parts/TemperatureSensor/analog/S8120C/index.js",
	"./TemperatureSensor/i2c/ADT7410/index.js": "./dist/src/parts/TemperatureSensor/i2c/ADT7410/index.js",
	"./TemperatureSensor/i2c/AM2320/index.js": "./dist/src/parts/TemperatureSensor/i2c/AM2320/index.js",
	"./TemperatureSensor/i2c/AMG8833/index.js": "./dist/src/parts/TemperatureSensor/i2c/AMG8833/index.js",
	"./TemperatureSensor/i2c/BME280/index.js": "./dist/src/parts/TemperatureSensor/i2c/BME280/index.js",
	"./TemperatureSensor/i2c/D6T44L/index.js": "./dist/src/parts/TemperatureSensor/i2c/D6T44L/index.js",
	"./TemperatureSensor/i2c/DHT12/index.js": "./dist/src/parts/TemperatureSensor/i2c/DHT12/index.js",
	"./TemperatureSensor/i2c/S-5851A/index.js": "./dist/src/parts/TemperatureSensor/i2c/S-5851A/index.js",
	"./TemperatureSensor/i2c/SHT20/index.js": "./dist/src/parts/TemperatureSensor/i2c/SHT20/index.js",
	"./TemperatureSensor/i2c/SHT31/index.js": "./dist/src/parts/TemperatureSensor/i2c/SHT31/index.js",
	"./TemperatureSensor/spi/ADT7310/index.js": "./dist/src/parts/TemperatureSensor/spi/ADT7310/index.js",
	"./Wireless/MFRC522/index.js": "./dist/src/parts/Wireless/MFRC522/index.js",
	"./Wireless/RN42/index.js": "./dist/src/parts/Wireless/RN42/index.js",
	"./Wireless/XBee/index.js": "./dist/src/parts/Wireless/XBee/index.js",
	"./i2cCompass.js": "./dist/src/parts/i2cCompass.js",
	"./i2cImu6.js": "./dist/src/parts/i2cImu6.js",
	"./i2cParts.js": "./dist/src/parts/i2cParts.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./dist/src/parts sync recursive \\.js$";

/***/ }),

/***/ "./dist/src/parts/ADConverter/hx711/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.hx711
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Hx711 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sck', 'dout'];
        this.requiredKeys = ['sck', 'dout'];
        this._offset = 0;
        this._scale = 1;
    }
    static info() {
        return {
            name: 'hx711',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.spi = obniz.getFreeSpi();
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        const ioKeys = ['clk', 'dout'];
        for (const key of ioKeys) {
            if (this.params[key] && !this.obniz.isValidIO(this.params[key])) {
                throw new Error("spi start param '" + key + "' are to be valid io no");
            }
        }
        this.sck = obniz.getIO(this.params.sck);
        this.dout = obniz.getIO(this.params.dout);
        this.sck.output(true);
        obniz.wait(500);
    }
    async readWait() {
        this.sck.output(false);
        while (true) {
            const val = await this.dout.inputWait();
            if (val === false) {
                break;
            }
        }
        this.spi.start({
            mode: 'master',
            mosi: this.params.sck,
            miso: this.params.dout,
            frequency: 500 * 1000,
        });
        const ret_double = await this.spi.writeWait([
            0xaa,
            0xaa,
            0xaa,
            0xaa,
            0xaa,
            0xaa,
            0x80,
        ]);
        this.spi.end(true);
        this.sck.output(false);
        const ret = [
            this.doubleBit2singleBit(ret_double[0], ret_double[1]),
            this.doubleBit2singleBit(ret_double[2], ret_double[3]),
            this.doubleBit2singleBit(ret_double[4], ret_double[5]),
        ];
        const flag = (ret[0] & 0x80) === 0 ? 1 : -1;
        return flag * (((ret[0] & 0x7f) << 16) + (ret[1] << 8) + (ret[2] << 0));
    }
    doubleBit2singleBit(a, b) {
        return ((this.bit(a, 7) << 7) |
            (this.bit(a, 5) << 6) |
            (this.bit(a, 3) << 5) |
            (this.bit(a, 1) << 4) |
            (this.bit(b, 7) << 3) |
            (this.bit(b, 5) << 2) |
            (this.bit(b, 3) << 1) |
            (this.bit(b, 1) << 0));
    }
    bit(a, n) {
        return a & (1 << n) ? 1 : 0;
    }
    async readAverageWait(times) {
        const results = [];
        for (let i = 0; i < times; i++) {
            results.push(await this.readWait());
        }
        return (results.reduce((prev, current, i) => {
            return prev + current;
        }, 0) / results.length);
    }
    powerDown() {
        this.sck.output(true);
    }
    powerUp() {
        this.sck.output(false);
    }
    async zeroAdjustWait(times) {
        times = parseInt(times) || 1;
        this._offset = await this.readAverageWait(times);
    }
    async getValueWait(times) {
        times = parseInt(times) || 1;
        const val = await this.readAverageWait(times);
        return (val - this._offset) / this._scale;
    }
    setOffset(offset) {
        if (typeof offset !== 'number') {
            throw new Error('offset variable is Number');
        }
        this._offset = offset;
    }
    setScale(scale) {
        if (typeof scale !== 'number') {
            throw new Error('scale variable is Number');
        }
        this._scale = scale;
    }
}
exports.default = Hx711;


/***/ }),

/***/ "./dist/src/parts/Accessory/USB/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class USB {
    constructor() {
        this.keys = ['vcc', 'gnd'];
        this.requiredKeys = ['vcc', 'gnd'];
        this.displayIoNames = {
            vcc: 'vcc',
            gnd: 'gnd',
        };
    }
    static info() {
        return {
            name: 'USB',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_vdd = obniz.getIO(this.params.vcc);
        this.io_gnd = obniz.getIO(this.params.gnd);
        this.io_gnd.output(false);
    }
    on() {
        this.io_vdd.output(true);
    }
    off() {
        this.io_vdd.output(false);
    }
}
exports.default = USB;


/***/ }),

/***/ "./dist/src/parts/Biological/PULSE08-M5STICKC-S/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.Puls08M5stickcS
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Puls08M5stickcS {
    constructor() {
        this.keys = ['vcc', 'gnd', 'tx', 'rx'];
        this.requiredKeys = ['tx', 'rx'];
        this.delimiter = 0x0a;
    }
    static info() {
        return {
            name: 'Puls08M5stickcS',
        };
    }
    onbpmupdate(bpm) {
        return;
    }
    onrawupdate(values) {
        return;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.uart = obniz.getFreeUart();
        this.uart.start({ tx: this.params.tx, rx: this.params.rx, baud: 19200 });
        this.receivingData = [];
        this.init();
        this.uart.onreceive = (data, text) => {
            const dataToCallback = [];
            data.forEach((e) => {
                if (e !== this.delimiter) {
                    this.receivingData.push(e);
                    return;
                }
                else {
                    const row = this.receivingData;
                    if (row[0] === '#'.charCodeAt(0)) {
                        row[0] = ' '.charCodeAt(0);
                        const str = this.decode(row);
                        const val = parseInt(str);
                        const bpm = val > 0 ? 60000 / val : null;
                        this.onbpmupdate(bpm);
                    }
                    else {
                        const str = this.decode(row);
                        const val = parseInt(str);
                        dataToCallback.push(val);
                    }
                    this.receivingData = [];
                }
            });
            if (dataToCallback.length > 0) {
                this.onrawupdate(dataToCallback);
            }
        };
    }
    decode(data) {
        return Buffer.from(data).toString('utf8');
        // if (typeof TextDecoder !== 'undefined') {
        //   let enc = new TextDecoder('utf-8');
        //   let arr = new Uint8Array(data);
        //   return enc.decode(arr);
        // } else if (typeof Buffer !== 'undefined') {
        // return Buffer.from(data).toString('utf8');
        // }
        // throw new Error('cannot decode');
    }
    init() {
        this.uart.send('@OF30');
        this.uart.send(0x0a);
        this.uart.send('@RG2');
        this.uart.send(0x0a);
    }
}
exports.default = Puls08M5stickcS;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/2jcie/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.OMRON_2JCIE
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** 2JCIE management class 2JCIEを管理するクラス */
class OMRON_2JCIE {
    constructor(peripheral) {
        this._peripheral = null;
        this.vibrationState = {
            0x00: 'NONE',
            0x01: 'during vibration (Earthquake judgment in progress)',
            0x02: 'during earthquake',
        };
        if (peripheral && !OMRON_2JCIE.isDevice(peripheral)) {
            throw new Error('peripheral is not OMRON_2JCIE');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: '2JCIE',
        };
    }
    /**
     * Verify that the received peripheral is from the 2JCIE Environmental Sensor series of OMRON
     *
     * 受け取ったperipheralがOMRON 環境センサ 2JCIEシリーズのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the 2JCIE Environmental Sensor series of OMRON
     *
     * OMRON 環境センサ 2JCIEシリーズかどうか
     */
    static isDevice(peripheral) {
        return ((peripheral.localName && peripheral.localName.indexOf('Env') >= 0) ||
            (peripheral.localName && peripheral.localName.indexOf('IM') >= 0) ||
            (peripheral.localName && peripheral.localName.indexOf('Rbt') >= 0));
    }
    /**
     * Get a data from advertisement mode of the 2JCIE Environmental Sensor series of OMRON
     *
     * advertisementモードのOMRON 環境センサ 2JCIEシリーズからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the sensor センサから受け取ったデータ
     *
     * `2JCIE-BL01(BAG type バッグ形状) localName: IM`
     *
     * → {@linkplain OMRON_2JCIE_AdvData}
     *
     *
     * `2JCIE-BU01(USB connection USB接続) localName: Rbt`
     *
     * → {@linkplain OMRON_2JCIE_AdvSensorData}
     */
    static getData(peripheral) {
        const adv_data = peripheral.adv_data;
        if (peripheral.localName && peripheral.localName.indexOf('IM') >= 0) {
            return {
                temperature: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[9], adv_data[8]) *
                    0.01,
                relative_humidity: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[11], adv_data[10]) * 0.01,
                light: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[13], adv_data[12]) * 1,
                uv_index: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[15], adv_data[14]) * 0.01,
                barometric_pressure: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[17], adv_data[16]) * 0.1,
                sound_noise: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[19], adv_data[18]) * 0.01,
                acceleration_x: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[21], adv_data[20]),
                acceleration_y: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[23], adv_data[22]),
                acceleration_z: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[25], adv_data[24]),
                battery: (adv_data[26] + 100) / 100,
            };
        }
        else if (peripheral.localName &&
            peripheral.localName.indexOf('Rbt') >= 0 &&
            adv_data[6] === 0x02 &&
            adv_data[6] === 0x02 &&
            adv_data[7] === 0x01) {
            return {
                temperature: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[10], adv_data[9]) *
                    0.01,
                relative_humidity: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[12], adv_data[11]) * 0.01,
                light: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[14], adv_data[13]) * 1,
                barometric_pressure: ObnizPartsBleInterface_1.default.signed32FromBinary(adv_data[18], adv_data[17], adv_data[16], adv_data[15]) * 0.001,
                sound_noise: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[20], adv_data[19]) * 0.01,
                etvoc: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[22], adv_data[21]),
                eco2: ObnizPartsBleInterface_1.default.signed16FromBinary(adv_data[24], adv_data[23]),
            };
        }
        return null;
    }
    wired(obniz) {
        this.obniz = obniz;
    }
    /**
     * Search for the 2JCIE Environmental Sensor series of OMRON
     *
     * OMRON 環境センサ 2JCIEシリーズを検索
     *
     * @returns if found: Instance of BleRemotePeripheral / if not found: null
     *
     * 見つかった場合: BleRemotePeripheralのインスタンス / 見つからなかった場合: null
     */
    async findWait() {
        const target = {
            localName: ['Env', 'Rbt'],
        };
        await this.obniz.ble.initWait();
        this._peripheral = await this.obniz.ble.scan.startOneWait(target);
        return this._peripheral;
    }
    omron_uuid(uuid, type) {
        if (type === 'BAG') {
            return `0C4C${uuid}-7700-46F4-AA96D5E974E32A54`;
        }
        else if (type === 'USB') {
            return `AB70${uuid}-0A3A-11E8-BA89-0ED5F89F718B`;
        }
        else {
            return undefined;
        }
    }
    /**
     * (Search for the device and) connect the sensor
     *
     * Throw an error if the device is not found
     *
     * (デバイスを検索し、)センサへ接続
     *
     * デバイスが見つからなかった場合はエラーをthrow
     *
     * `supported types&modes 対応形状&モード`
     * - 2JCIE-BL01(BAG type バッグ形状) localName: Env
     * - 2JCIE-BU01(USB connection USB接続) localName: Rbt
     */
    async connectWait() {
        if (!this._peripheral) {
            await this.findWait();
        }
        if (!this._peripheral) {
            throw new Error('2JCIE not found');
        }
        if (!this._peripheral.connected) {
            this._peripheral.ondisconnect = (reason) => {
                if (typeof this.ondisconnect === 'function') {
                    this.ondisconnect(reason);
                }
            };
            await this._peripheral.connectWait();
        }
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        if (this._peripheral && this._peripheral.connected) {
            await this._peripheral.disconnectWait();
        }
    }
    signedNumberFromBinary(data) {
        // little endian
        let val = data[data.length - 1] & 0x7f;
        for (let i = data.length - 2; i >= 0; i--) {
            val = val * 256 + data[i];
        }
        if ((data[data.length - 1] & 0x80) !== 0) {
            val = val - Math.pow(2, data.length * 8 - 1);
        }
        return val;
    }
    unsignedNumberFromBinary(data) {
        // little endian
        let val = data[data.length - 1];
        for (let i = data.length - 2; i >= 0; i--) {
            val = val * 256 + data[i];
        }
        return val;
    }
    /**
     * @deprecated Please use {@linkplain getLatestDataWait}
     *
     * {@linkplain getLatestDataWait} の使用を推奨
     */
    async getLatestDataBAGWait() {
        return this.getLatestDataWait();
    }
    /**
     * @deprecated Please use {@linkplain getLatestDataWait}
     *
     * {@linkplain getLatestDataWait} の使用を推奨
     */
    getLatestData() {
        return this.getLatestDataWait();
    }
    /**
     * Get the latest data from the 2JCIE-BL01(BAG type) sensor
     *
     * 2JCIE-BL01(バッグ形状)のセンサの最新のデータを取得
     *
     * @returns received data from the sensor センサから受け取ったデータ
     *
     */
    async getLatestDataWait() {
        await this.connectWait();
        const c = this._peripheral.getService(this.omron_uuid('3000', 'BAG')).getCharacteristic(this.omron_uuid('3001', 'BAG'));
        const data = await c.readWait();
        const json = {
            row_number: data[0],
            temperature: this.signedNumberFromBinary(data.slice(1, 3)) * 0.01,
            relative_humidity: this.signedNumberFromBinary(data.slice(3, 5)) * 0.01,
            light: this.signedNumberFromBinary(data.slice(5, 7)) * 1,
            uv_index: this.signedNumberFromBinary(data.slice(7, 9)) * 0.01,
            barometric_pressure: this.signedNumberFromBinary(data.slice(9, 11)) * 0.1,
            sound_noise: this.signedNumberFromBinary(data.slice(11, 13)) * 0.01,
            discomfort_index: this.signedNumberFromBinary(data.slice(13, 15)) * 0.01,
            heatstroke_risk_factor: this.signedNumberFromBinary(data.slice(15, 17)) * 0.01,
            battery_voltage: this.unsignedNumberFromBinary(data.slice(17, 19)) * 0.001,
        };
        return json;
    }
    /**
     * @deprecated Please use {@linkplain getLatestSensorDataUSBWait}
     *
     * {@linkplain getLatestSensorDataUSBWait} の使用を推奨
     */
    getLatestSensorDataUSB() {
        return this.getLatestSensorDataUSBWait();
    }
    /**
     * Get the latest data from the 2JCIE-BU01(USB connection) sensor
     *
     * 2JCIE-BU01(USB接続)のセンサの最新のデータを取得
     *
     * @returns received data from the sensor センサから受け取ったデータ
     */
    async getLatestSensorDataUSBWait() {
        await this.connectWait();
        const c = this._peripheral.getService(this.omron_uuid('5010', 'USB')).getCharacteristic(this.omron_uuid('5012', 'USB'));
        const data = await c.readWait();
        const json = {
            sequence_number: data[0],
            temperature: this.signedNumberFromBinary(data.slice(1, 3)) * 0.01,
            relative_humidity: this.signedNumberFromBinary(data.slice(3, 5)) * 0.01,
            light: this.signedNumberFromBinary(data.slice(5, 7)) * 1,
            barometric_pressure: this.signedNumberFromBinary(data.slice(7, 11)) * 0.001,
            sound_noise: this.signedNumberFromBinary(data.slice(11, 13)) * 0.01,
            etvoc: this.signedNumberFromBinary(data.slice(13, 15)) * 1,
            eco2: this.signedNumberFromBinary(data.slice(15, 17)) * 1,
        };
        return json;
    }
    /**
     * @deprecated Please use {@linkplain getLatestCalculationDataUSBWait}
     *
     * {@linkplain getLatestCalculationDataUSBWait} の使用を推奨
     */
    getLatestCalculationDataUSB() {
        return this.getLatestCalculationDataUSBWait();
    }
    /**
     * Get the latest index data and acceleration data from the 2JCIE-BU01(USB connection) sensor
     *
     * 2JCIE-BU01(USB接続)のセンサの最新の指標データや加速度データを取得
     *
     * @returns received data from the sensor センサから受け取ったデータ
     */
    async getLatestCalculationDataUSBWait() {
        await this.connectWait();
        const c = this._peripheral.getService(this.omron_uuid('5010', 'USB')).getCharacteristic(this.omron_uuid('5013', 'USB'));
        const data = await c.readWait();
        const json = {
            sequence_number: data[0],
            discomfort_index: this.signedNumberFromBinary(data.slice(1, 3)) * 0.01,
            heatstroke_risk_factor: this.signedNumberFromBinary(data.slice(3, 5)) * 0.01,
            vibration_information: this.vibrationState[data[5]],
            si_value: this.unsignedNumberFromBinary(data.slice(6, 8)) * 0.1,
            pga: this.unsignedNumberFromBinary(data.slice(8, 10)) * 0.1,
            seismic_intensity: this.unsignedNumberFromBinary(data.slice(10, 12)) * 0.001,
            acceleration_x: this.signedNumberFromBinary(data.slice(12, 14)) * 1,
            acceleration_y: this.signedNumberFromBinary(data.slice(14, 16)) * 1,
            acceleration_z: this.signedNumberFromBinary(data.slice(16, 18)) * 1,
        };
        return json;
    }
}
exports.default = OMRON_2JCIE;


/***/ }),

/***/ "./dist/src/parts/Ble/ENERTALK/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.ENERTALK_TOUCH
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const batteryService_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/services/batteryService.js"));
/** ENERTALK TOUCH management class ENERTALK TOUCHを管理するクラス */
class ENERTALK_TOUCH {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        this.onbuttonpressed = null;
        this._peripheral = null;
        this._uuids = {
            service: '3526797e-448b-4bbb-9145-c5083e0e09dc',
            temperatureChar: '2A6E',
            humidityChar: '2A6F',
            illuminanceChar: '74c3fe9d-25b2-4903-8dcd-680e5ef0a6b3',
            accelerometerChar: '71ef0979-0e2c-4a55-8d3c-78083869fae6',
        };
        this._service = null;
        this._temperatureChar = null;
        this._humidityChar = null;
        this._illuminanceChar = null;
        this._accelerometerChar = null;
        if (peripheral && !ENERTALK_TOUCH.isDevice(peripheral)) {
            throw new Error('peripheral is not ENERTALK_TOUCH');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'ENERTALK_TOUCH',
        };
    }
    /**
     * Verify that the received peripheral is from the ENERTALK TOUCH
     *
     * 受け取ったperipheralがENERTALK TOUCHのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the ENERTALK TOUCH
     *
     * ENERTALK TOUCHかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName && peripheral.localName.startsWith('ensensor_')) {
            return true;
        }
        return false;
    }
    /**
     * Connect the sensor
     *
     * Throw an error if the device is not found
     *
     * センサへ接続
     *
     * デバイスが見つからなかった場合はエラーをthrow
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('ENERTALK_TOUCH is not find.');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        this._service = this._peripheral.getService(this._uuids.service);
        if (!this._service) {
            await this._peripheral.disconnectWait();
            throw new Error('service is not find.');
        }
        this._temperatureChar = this._service.getCharacteristic(this._uuids.temperatureChar);
        this._humidityChar = this._service.getCharacteristic(this._uuids.humidityChar);
        this._illuminanceChar = this._service.getCharacteristic(this._uuids.illuminanceChar);
        this._accelerometerChar = this._service.getCharacteristic(this._uuids.accelerometerChar);
        const service180F = this._peripheral.getService('180F');
        if (service180F) {
            this.batteryService = new batteryService_1.default(service180F);
        }
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        var _a;
        await ((_a = this._peripheral) === null || _a === void 0 ? void 0 : _a.disconnectWait());
    }
    /**
     * Get the temperature data from the sensor
     *
     * センサから温度データを取得
     *
     * @returns temperature value 温度の値
     *
     * Range 範囲: -1000~5000
     *
     * (Unit 単位: 0.01 degC)
     */
    async getTemperatureWait() {
        if (!this._temperatureChar) {
            throw new Error('device is not connected');
        }
        const tempData = await this._temperatureChar.readWait();
        const buf = Buffer.from(tempData);
        const temp = buf.readInt16BE(0) / 100;
        return temp;
    }
    /**
     * Get the humidity data from the sensor
     *
     * センサから湿度データを取得
     *
     * @returns humidity value 湿度の値
     *
     * Range 範囲: 0~100
     *
     * (Unit 単位: 1 %RH)
     */
    async getHumidityWait() {
        if (!this._humidityChar) {
            throw new Error('device is not connected');
        }
        const humidityData = await this._humidityChar.readWait();
        const humidity = humidityData[0];
        return humidity;
    }
    /**
     * Get the illumination data from the sensor
     *
     * センサから照度データを取得
     *
     * @returns illumination value 照度の値
     *
     * Range 範囲: 0~65535
     *
     * (Unit 単位: 1 lx)
     */
    async getIlluminationWait() {
        if (!this._illuminanceChar) {
            throw new Error('device is not connected');
        }
        const illuminanceData = await this._illuminanceChar.readWait();
        const buf = Buffer.from(illuminanceData);
        const illuminance = buf.readInt16BE(0);
        return illuminance;
    }
    /**
     * Get the acceleration data from the sensor
     *
     * センサから加速度データを取得
     *
     * @returns acceleration values 加速度の値
     *
     * Range 範囲: -2000~2000
     *
     * (Unit 単位: 1 mg)
     */
    async getAccelerometerWait() {
        if (!this._accelerometerChar) {
            throw new Error('device is not connected');
        }
        const accelerometerData = await this._accelerometerChar.readWait();
        const buf = Buffer.from(accelerometerData);
        const x = buf.readInt16BE(0) / 1000;
        const y = buf.readInt16BE(2) / 1000;
        const z = buf.readInt16BE(4) / 1000;
        return { x, y, z };
    }
}
exports.default = ENERTALK_TOUCH;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/EXTxx/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.EXTxx
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** EXTxx management class EXTxxを管理するクラス */
class EXTxx extends ObnizPartsBleInterface_1.default {
    constructor(peripheral) {
        super();
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'EXTxx',
        };
    }
    /**
     * (with instantiation) Get a data from the beacon
     *
     * (インスタンス化する場合) ビーコンからデータを取得
     *
     * @returns received data from the beacon ビーコンから受け取ったデータ
     */
    getData() {
        var _a;
        const advData = (_a = this._peripheral) === null || _a === void 0 ? void 0 : _a.adv_data;
        if (!advData)
            throw new Error('advData is null');
        return {
            uuid: advData
                .slice(6, 22)
                .map((d, i) => ([2, 3, 4, 5].includes(i / 2) ? '-' : '') +
                ('00' + d.toString(16)).slice(-2))
                .join(''),
            major: unsigned16(advData.slice(22, 24)),
            minor: unsigned16(advData.slice(24, 26)),
            power: advData[26],
            battery: advData[27],
        };
    }
    /**
     * (without instantiation) Get a data from the beacon
     *
     * (インスタンス化しない場合) ビーコンからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the beacon ビーコンから受け取ったデータ
     */
    static getData(peripheral) {
        if (!EXTxx.isDevice(peripheral)) {
            return null;
        }
        const dev = new EXTxx(peripheral);
        return dev.getData();
    }
    /**
     * Verify that the received peripheral is from the EXTxx
     *
     * 受け取ったperipheralがEXTxxのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the EXTxx
     *
     * EXTxxかどうか
     */
    static isDevice(peripheral) {
        return (this.DefaultAdvData.filter((d, i) => d !== -1 && d !== peripheral.adv_data[i]).length === 0 &&
            this.DefaultAdvData.length === peripheral.adv_data.length);
    }
}
exports.default = EXTxx;
EXTxx.PartsName = 'EXTxx';
EXTxx.AvailableBleMode = 'Beacon';
EXTxx.DefaultAdvData = [
    0x1c,
    0xff,
    0xf5,
    0x03,
    0x02,
    0x15,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    0x00,
];
const unsigned16 = (value) => {
    return (value[0] << 8) | value[1];
};


/***/ }),

/***/ "./dist/src/parts/Ble/EXVital/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.EXVital
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** EXVital management class EXVitalを管理するクラス */
class EXVital extends ObnizPartsBleInterface_1.default {
    constructor(peripheral) {
        super();
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'EXVital',
        };
    }
    /**
     * (with instantiation) Get a data from the beacon
     *
     * (インスタンス化する場合) ビーコンからデータを取得
     *
     * @returns received data from the beacon ビーコンから受け取ったデータ
     */
    getData() {
        var _a;
        const advData = (_a = this._peripheral) === null || _a === void 0 ? void 0 : _a.adv_data;
        if (!advData)
            throw new Error('advData is null');
        return {
            major: unsigned16(advData.slice(11, 13)),
            minor: unsigned16(advData.slice(13, 15)),
            power: advData[14],
            diastolic_pressure: advData[15],
            systolic_pressure: advData[16],
            arm_temp: unsigned16(advData.slice(17, 19)) * 0.1,
            body_temp: unsigned16(advData.slice(19, 21)) * 0.1,
            heart_rate: advData[21],
            // blood_oxygen: advData[22],
            // fall: advData[23] > 0,
            battery: unsigned16(advData.slice(24, 26)) * 0.001,
            steps: unsigned16(advData.slice(26, 28)),
        };
    }
    /**
     * (without instantiation) Get a data from the beacon
     *
     * (インスタンス化しない場合) ビーコンからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the beacon ビーコンから受け取ったデータ
     */
    static getData(peripheral) {
        if (!EXVital.isDevice(peripheral)) {
            return null;
        }
        const dev = new EXVital(peripheral);
        return dev.getData();
    }
    /**
     * Verify that the received peripheral is from the EXVital
     *
     * 受け取ったperipheralがEXVitalのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the EXVital
     *
     * EXVitalかどうか
     */
    static isDevice(peripheral) {
        return (this.DefaultAdvData.filter((d, i) => d !== -1 && d !== peripheral.adv_data[i]).length === 0 &&
            this.DefaultAdvData.length === peripheral.adv_data.length);
    }
}
exports.default = EXVital;
EXVital.partsName = 'EXVital';
EXVital.availableBleMode = 'Beacon';
EXVital.DefaultAdvData = [
    0x02,
    0x01,
    -1,
    0x18,
    0xff,
    0xf5,
    0x03,
    0x04,
    0x02,
    0x00,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
];
const unsigned16 = (value) => {
    return (value[0] << 8) | value[1];
};


/***/ }),

/***/ "./dist/src/parts/Ble/HEM_6233T/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.HEM_6233T
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** HEM_6233T management class HEM_6233Tを管理するクラス */
class HEM_6233T {
    /**
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @param timezoneOffsetMinute difference from UTC (Unit: minutes) 協定世界時との差(単位: 分)
     *
     */
    constructor(peripheral, timezoneOffsetMinute) {
        this.keys = [];
        this.requiredKeys = [];
        this._peripheral = null;
        // if (peripheral && !HEM_6233T.isDevice(peripheral)) {
        //   throw new Error("peripheral is not HEM_6233T");
        // }
        this._peripheral = peripheral;
        this._timezoneOffsetMinute = timezoneOffsetMinute;
    }
    static info() {
        return {
            name: 'HEM_6233T',
        };
    }
    /**
     * Verify that the received peripheral is from the HEM_6233T
     *
     * 受け取ったPeripheralがHEM_6233Tのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the HEM_6233T
     *
     * HEM_6233Tかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName &&
            (peripheral.localName.startsWith('BLESmart_') ||
                peripheral.localName.startsWith('BLEsmart_'))) {
            return true;
        }
        return false;
    }
    /**
     * Connect to the device, get data, and then disconnect from the device
     *
     * You can get only data that the device has not yet sent
     *
     * デバイスに接続しデータを取得後、デバイスとの接続を切断
     *
     * 取得できるデータはデバイスが未送信のデータのみです
     *
     * @param pairingKeys pairing keys ペアリングキー
     *
     * @returns received data from the HEM_6233T HEM_6233Tから受け取ったデータ
     */
    async getDataWait(pairingKeys) {
        if (!this._peripheral) {
            throw new Error('HEM_6233T is not find.');
        }
        await this._peripheral.connectWait({
            autoDiscovery: true,
            pairingOption: {
                keys: pairingKeys,
            },
        });
        const results = [];
        const waitDisconnect = new Promise((resolve, reject) => {
            this._peripheral.ondisconnect = (reason) => {
                resolve(results);
            };
        });
        await this.subscribeWait('1805', '2A2B'); // current time
        await this.subscribeWait('180F', '2A19', async () => {
            // send command (unknown meaning)
            // In the command meaning, it should send to central from peripheral, but send to peripheral...?
            this._peripheral.obnizBle.hci.write([
                0x02,
                0x00,
                0x00,
                0x09,
                0x00,
                0x05,
                0x00,
                0x04,
                0x00,
                0x01,
                0x06,
                0x01,
                0x00,
                0x0a,
            ]);
            this._writeTimeCharWait(this._timezoneOffsetMinute);
        }); // battery Level
        await this.subscribeWait('1810', '2A35', async (data) => {
            // console.log('SUCCESS', data);
            results.push(this._analyzeData(data));
        }); // blood pressure
        return await waitDisconnect;
    }
    /**
     * Execute a callback function when data is received from any service characteristic
     *
     * 任意のサービス・キャラクタティスティックからデータを受け取ると、コールバック関数を実行
     *
     * @param service service サービス
     *
     * @param char characteristic キャラクタリスティック
     *
     * @param callback callback function when received data
     * データを受け取ったときのコールバック関数
     */
    async subscribeWait(service, char, callback) {
        if (!this._peripheral) {
            throw new Error('HEM_6233T is not find.');
        }
        const characteristics = this._peripheral
            .getService(service)
            .getCharacteristic(char);
        await characteristics.registerNotifyWait(async (data) => {
            if (callback) {
                callback(data);
            }
        });
    }
    /**
     * Set the current time
     *
     * 現在時刻を設定
     *
     * @param timeOffsetMinute difference from UTC (Unit: minutes) 協定世界時との差(単位: 分)
     */
    async _writeTimeCharWait(timeOffsetMinute) {
        if (!this._peripheral) {
            throw new Error('HEM_6233T is not find.');
        }
        const timeChar = this._peripheral
            .getService('1805')
            .getCharacteristic('2A2B');
        const date = new Date();
        date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);
        const buf = Buffer.alloc(7);
        buf.writeUInt16LE(date.getUTCFullYear(), 0);
        buf.writeUInt8(date.getUTCMonth() + 1, 2);
        buf.writeUInt8(date.getUTCDate(), 3);
        buf.writeUInt8(date.getUTCHours(), 4);
        buf.writeUInt8(date.getUTCMinutes(), 5);
        buf.writeUInt8(date.getUTCSeconds(), 6);
        const arr = Array.from(buf);
        await timeChar.writeWait(arr);
    }
    _readFloatLE(buffer, index) {
        const data = buffer.readUInt16LE(index);
        let mantissa = data & 0x0fff;
        if ((mantissa & 0x0800) > 0) {
            mantissa = -1 * (~(mantissa - 0x01) & 0x0fff);
        }
        const exponential = data >> 12;
        return mantissa * Math.pow(10, exponential);
    }
    _readSFloatLE(buffer, index) {
        const data = buffer.readUInt32LE(index);
        let mantissa = data & 0x00ffffff;
        if ((mantissa & 0x00800000) > 0) {
            mantissa = -1 * (~(mantissa - 0x01) & 0x00ffffff);
        }
        const exponential = data >> 24;
        return mantissa * Math.pow(10, exponential);
    }
    _analyzeData(data) {
        const buf = Buffer.from(data);
        const flags = buf.readUInt8(0);
        let index = 1;
        const result = {};
        let scale = 1;
        if (flags & 0x01) {
            // kPa
            scale = 7.501;
        }
        result.bloodPressure = {
            systolic: this._readFloatLE(buf, index) * scale,
            diastolic: this._readFloatLE(buf, index + 2) * scale,
            meanArterialPressure: this._readFloatLE(buf, index + 4) * scale,
            unit: 'mmHg',
        };
        index += 6;
        if (flags & 0x02) {
            // Time Stamp field present
            result.date = {
                year: buf.readUInt16LE(index),
                month: buf.readUInt8(index + 2),
                day: buf.readUInt8(index + 3),
                hour: buf.readUInt8(index + 4),
                minute: buf.readUInt8(index + 5),
                second: buf.readUInt8(index + 6),
            };
            index += 7;
        }
        if (flags & 0x04) {
            result.pulseRate = buf.readUInt16LE(index);
            index += 2;
        }
        if (flags & 0x08) {
            result.userId = buf.readUInt8(index);
            index += 1;
        }
        if (flags & 0x10) {
            const statusFlag = {
                0x01: 'BodyMovementDetection',
                0x02: 'CuffFitDetection',
                0x04: 'IrregularPulseDetection',
                0x08: 'PulseRateRangeDetection',
                0x10: 'MeasurementPositionDetection',
            };
            const measurementStatus = buf.readUInt16LE(index);
            index++;
            result.measurementStatus = [];
            for (const f in statusFlag) {
                if (+f & measurementStatus) {
                    result.measurementStatus.push(statusFlag[f]);
                }
            }
        }
        return result;
    }
}
exports.default = HEM_6233T;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/HEM_9200T/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.HEM-9200T
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** HEM_9200T management class HEM_9200Tを管理するクラス */
class HEM_9200T {
    constructor(peripheral, options = {}) {
        this.keys = [];
        this.requiredKeys = [];
        this._peripheral = null;
        // if (peripheral && !HEM_9200T.isDevice(peripheral)) {
        //   throw new Error("peripheral is not HEM_9200T");
        // }
        this._peripheral = peripheral;
        this._timezoneOffsetMinute = options.timezoneOffsetMinute || 0;
        this._passkey = options.passkey || 0;
    }
    static info() {
        return {
            name: 'HEM_9200T',
        };
    }
    /**
     * Verify that the received peripheral is from the HEM_9200T
     *
     * 受け取ったPeripheralがHEM_9200Tのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the HEM_9200T
     *
     * HEM_9200Tかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName &&
            (peripheral.localName.startsWith('BLESmart_') ||
                peripheral.localName.startsWith('BLEsmart_'))) {
            return true;
        }
        return false;
    }
    /**
     * Connect to the device, get data, and then disconnect from the device
     *
     * You can get only data that the device has not yet sent
     *
     * デバイスに接続しデータを取得後、デバイスとの接続を切断
     *
     * 取得できるデータはデバイスが未送信のデータのみです
     *
     * @returns received data from the HEM_9200T HEM_9200Tから受け取ったデータ
     */
    async getDataWait() {
        if (!this._peripheral) {
            throw new Error('HEM_9200T is not find.');
        }
        // console.log(`connecting HEM passkey ${this._passkey}`);
        await this._peripheral.connectWait({
            pairingOption: {
                passkeyCallback: async () => {
                    // console.log(`passkey called`);
                    return this._passkey;
                },
            },
        });
        // console.log(`connected HEM`);
        // const passkeyCallback = async () => {
        //   // HTML prompt
        //   const pass = 16393;
        //   return pass;
        // };
        // // pairing with user input passkey.
        // console.log("connected. pairing...");
        // const key = await this._peripheral.pairingWait({ passkeyCallback });
        // console.log("paired");
        const results = [];
        // TODO: check alternative method
        // eslint-disable-next-line no-async-promise-executor
        return await new Promise(async (resolve) => {
            this._peripheral.ondisconnect = (reason) => {
                resolve(results);
            };
            await this.subscribeWait('1805', '2A2B'); // current time
            await this.subscribeWait('180F', '2A19'); // battery level
            await this.subscribeWait('1810', '2A35', async (data) => {
                // console.log(data);
                results.push(this._analyzeData(data));
            }); // blood pressure
        });
        /* const waitDisconnect = new Promise<HEM_9200TResult[]>((resolve, reject) => {
          this._peripheral!.ondisconnect = (reason: any) => {
            resolve(results);
          };
        });
        await this.subscribeWait('1805', '2A2B'); // current time
        await this.subscribeWait('180F', '2A19'); // battery level
        await this.subscribeWait('1810', '2A35', async (data: any) => {
          // console.log(data);
          results.push(this._analyzeData(data));
        }); // blood pressure
        return await waitDisconnect;*/
    }
    /**
     * Execute a callback function when data is received from any service characteristic
     *
     * 任意のサービス・キャラクタティスティックからデータを受け取ると、コールバック関数を実行
     *
     * @param service service サービス
     *
     * @param char characteristic キャラクタリスティック
     *
     * @param callback callback function when received data
     * データを受け取ったときのコールバック関数
     */
    async subscribeWait(service, char, callback) {
        if (!this._peripheral) {
            throw new Error('HEM_9200T is not find.');
        }
        const characteristics = this._peripheral
            .getService(service)
            .getCharacteristic(char);
        await characteristics.registerNotifyWait(async (data) => {
            if (callback) {
                callback(data);
            }
        });
    }
    _analyzeData(data) {
        const buf = Buffer.from(data);
        const flags = buf.readUInt8(0);
        let index = 1;
        const result = {};
        let scale = 1;
        if (flags & 0x01) {
            // kPa
            scale = 7.501;
        }
        result.bloodPressure = {
            systolic: this._readSFloat(buf, index) * scale,
            diastolic: this._readSFloat(buf, index + 2) * scale,
            meanArterialPressure: this._readSFloat(buf, index + 4) * scale,
            unit: 'mmHg',
        };
        index += 6;
        if (flags & 0x02) {
            // Time Stamp field present
            result.date = {
                year: buf.readUInt16LE(index),
                month: buf.readUInt8(index + 2),
                day: buf.readUInt8(index + 3),
                hour: buf.readUInt8(index + 4),
                minute: buf.readUInt8(index + 5),
                second: buf.readUInt8(index + 6),
            };
            index += 7;
        }
        if (flags & 0x04) {
            result.pulseRate = this._readSFloat(buf, index);
            index += 2;
        }
        if (flags & 0x08) {
            result.userId = buf.readUInt8(index);
            index += 1;
        }
        if (flags & 0x10) {
            const statusFlag = {
                0x01: 'BodyMovementDetection',
                0x02: 'CuffFitDetection',
                0x04: 'IrregularPulseDetection',
                0x08: 'PulseRateRangeDetection',
                0x10: 'MeasurementPositionDetection',
            };
            const mesurementStatus = buf.readUInt16LE(index);
            index++;
            result.measurementStatus = [];
            for (const f in statusFlag) {
                if (+f & mesurementStatus) {
                    result.measurementStatus.push(statusFlag[f]);
                }
            }
        }
        return result;
    }
    _readSFloat(buffer, index) {
        const data = buffer.readUInt16LE(index);
        let mantissa = data & 0x0fff;
        if ((mantissa & 0x0800) > 0) {
            mantissa = -1 * (0x0fff + 1 - mantissa);
        }
        const exponential = data >> 12;
        return mantissa * Math.pow(10, exponential);
    }
}
exports.default = HEM_9200T;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/KankiAirMier/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.KankiAirMier
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const advertismentAnalyzer_1 = __webpack_require__("./dist/src/parts/Ble/utils/advertisement/advertismentAnalyzer.js");
/** Kanki AirMier management class 換気エアミエルを管理するクラス */
class KankiAirMier {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'KankiAirMier',
        };
    }
    /**
     * Verify that the received peripheral is from the Kanki AirMier
     *
     * 受け取ったPeripheralが換気エアミエルのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Kanki AirMier
     *
     * 換気エアミエルかどうか
     */
    static isDevice(peripheral) {
        return KankiAirMier._deviceAdvAnalyzer.validate(peripheral.adv_data);
    }
    /**
     * Get a data from the Kanki AirMier
     *
     * 換気エアミエルからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the Kanki AirMier 換気エアミエルから受け取ったデータ
     */
    static getData(peripheral) {
        if (!KankiAirMier.isDevice(peripheral)) {
            return null;
        }
        const allData = KankiAirMier._deviceAdvAnalyzer.getAllData(peripheral.adv_data);
        const temperatureRaw = Buffer.from(allData.manufacture.temperature).readInt16LE(0);
        const co2Raw = Buffer.from(allData.manufacture.co2).readInt16LE(0);
        const humidityRaw = Buffer.from(allData.manufacture.humidity).readInt16LE(0);
        const sequenceNumber = allData.manufacture.sequence[0] >> 5;
        const deviceName = Buffer.from(allData.manufacture.deviceName).toString('utf8');
        return {
            co2: co2Raw,
            temperature: temperatureRaw / 10,
            humidity: humidityRaw / 10,
            sequenceNumber,
            deviceName,
        };
    }
}
exports.default = KankiAirMier;
KankiAirMier._deviceAdvAnalyzer = new advertismentAnalyzer_1.BleAdvBinaryAnalyzer()
    .groupStart('manufacture')
    .addTarget('length', [0x1e])
    .addTarget('type', [0xff])
    .addTarget('companyId', [0x9e, 0x09])
    .addTarget('appearance', [0x01])
    .addTarget('co2', [-1, -1])
    .addTarget('temperature', [-1, -1])
    .addTarget('humidity', [-1, -1])
    .addTarget('battery', [0xfe])
    .addTarget('interval', [0x02, 0x00])
    .addTarget('sequence', [-1])
    .addTarget('firmwareVersion', [-1])
    .addTargetByLength('deviceName', 15) // from datasheet length=14, but device send length=13
    .groupEnd();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/LogttaAD/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Logtta_AD
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const Logtta_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/abstracts/Logtta.js"));
/** Logtta_AD management class Logtta_ADを管理するクラス */
class Logtta_AD extends Logtta_1.default {
    constructor() {
        super(...arguments);
        this.staticClass = Logtta_AD;
    }
    /**
     * @deprecated
     *
     * Verify that the received peripheral is from the Logtta_AD
     *
     * 受け取ったPeripheralがLogtta_ADのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Logtta_AD
     *
     * Logtta_ADかどうか
     */
    static isDevice(peripheral) {
        return this.getDeviceMode(peripheral) === 'Connectable';
    }
    static parseAmpereData(data, func = ObnizPartsBleAbstract_1.uint) {
        return (16 / 916) * func(data);
    }
    static parseVoltData(data, func = ObnizPartsBleAbstract_1.uint) {
        return (4 / 916) * func(data);
    }
    /**
     * Get the current value from the Logtta_AD
     *
     * Logtta_ADから電流値を取得
     *
     * @returns the current value from the Logtta_AD
     *
     * Logtta_ADから受け取った電流値
     */
    async getAmpereWait() {
        return (await this.getDataWait()).ampere;
    }
    /**
     * Get the voltage value from the Logtta_AD
     *
     * Logtta_ADから電圧値を取得
     *
     * @returns the voltage value from the Logtta_AD
     *
     * Logtta_ADから受け取った電圧値
     */
    async getVoltWait() {
        return (await this.getDataWait()).volt;
    }
    /**
     * Get the count data from the Logtta_AD
     *
     * Logtta_ADからカウントデータを取得
     *
     * @returns the count data from the Logtta_AD
     *
     * Logtta_ADから受け取ったカウントデータ
     */
    async getCountWait() {
        return (await this.getDataWait()).count;
    }
    /**
     * @deprecated
     *
     * Get all data available from the Logtta_AD
     *
     * Logtta_ADから取得可能なデータを全て取得
     *
     * @returns all data available from the Logtta_AD
     *
     * Logtta_ADから受け取った全てのデータ
     */
    async getAllWait() {
        try {
            return await this.getDataWait();
        }
        catch (_a) {
            return null;
        }
    }
    parseData(data) {
        return {
            ampere: this.staticClass.parseAmpereData(data.slice(0, 2), ObnizPartsBleAbstract_1.uintBE),
            volt: this.staticClass.parseVoltData(data.slice(0, 2), ObnizPartsBleAbstract_1.uintBE),
            count: ObnizPartsBleAbstract_1.uintBE(data.slice(2, 4)),
        };
    }
}
exports.default = Logtta_AD;
Logtta_AD.PartsName = 'Logtta_AD';
Logtta_AD.ServiceUuids = {
    Connectable: '4e43ae20-6687-4f3c-a1c3-1c327583f29d',
    Beacon: null,
};
Logtta_AD.BeaconDataStruct = {
    Connectable: null,
    Beacon: {
        appearance: {
            index: 0,
            type: 'check',
            data: 0x04,
        },
        ampere: {
            index: 1,
            length: 2,
            type: 'custom',
            func: (data) => Logtta_AD.parseAmpereData(data, ObnizPartsBleAbstract_1.uintBE),
        },
        volt: {
            index: 1,
            length: 2,
            type: 'custom',
            func: (data) => Logtta_AD.parseVoltData(data, ObnizPartsBleAbstract_1.uintBE),
        },
        count: {
            index: 3,
            length: 2,
            type: 'unsignedNumBE',
        },
        battery: {
            index: 5,
            type: 'unsignedNumBE',
        },
        interval: {
            index: 6,
            length: 2,
            type: 'unsignedNumBE',
        },
    },
};


/***/ }),

/***/ "./dist/src/parts/Ble/LogttaAccel/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Logtta_Accel
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const Logtta_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/abstracts/Logtta.js"));
/**
 * Logtta_Accel management class Logtta_Accelを管理するクラス
 *
 * Only support in beacon mode
 *
 * ビーコンモードのときのみ動作します
 */
class Logtta_Accel extends Logtta_1.default {
    constructor() {
        super(...arguments);
        this.staticClass = Logtta_Accel;
    }
    static parseAccelSamplingData(data) {
        return 50 * 2 ** (4 - data);
    }
    static parseAccelRangeData(data) {
        return 2 ** ((data & 0b00000011) + 1) * 1000 * 1000;
    }
    static parseAccelAxis(data) {
        return ['z', 'y', 'x'].filter((key, i) => (data & (2 ** i)) > 0);
    }
    parseData(data) {
        return data;
    }
    /**
     * @deprecated
     *
     * Get a scan data from the Logtta_Accel
     *
     * Note: work only in beacon mode
     *
     * Logtta_Accelからスキャンデータを取得
     *
     * 注: ビーコンモードのときのみ動作
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns scan data from Logtta_Accel
     *
     * Logtta_Accelから受け取ったスキャンデータ
     */
    static getScanData(peripheral) {
        if (!Logtta_Accel.isDevice(peripheral)) {
            return null;
        }
        if (peripheral.adv_data && peripheral.adv_data.length === 31) {
            const d = peripheral.adv_data;
            let sampling = 0;
            switch (d[18]) {
                case 0x00:
                    sampling = 800;
                    break;
                case 0x01:
                    sampling = 400;
                    break;
                case 0x02:
                    sampling = 200;
                    break;
                case 0x03:
                    sampling = 100;
                    break;
                case 0x04:
                    sampling = 50;
                    break;
            }
            const alertArray = [];
            alertArray.push((d[26] & 0b11110000) >> 4);
            alertArray.push(d[26] & 0b00001111);
            alertArray.push((d[27] & 0b11110000) >> 4);
            alertArray.push(d[27] & 0b00001111);
            return {
                revision: d[5],
                sequence: d[6],
                battery: d[7],
                name: new TextDecoder().decode(new Uint8Array(d.slice(8, 16))),
                setting: {
                    temp_cycle: d[16] | (d[17] << 8),
                    accel_sampling: sampling,
                    hpf: !!(d[19] & 0b00010000),
                    accel_range: 2 * ((d[19] & 0b00000011) + 1),
                    accel_axis: d[20] & 0b00000111,
                    accel_resolution: d[21],
                },
                temperature: Math.floor((((d[22] | (d[23] << 8)) / 65535) * 175 - 45) * 100) / 100,
                humidity: Math.floor(((d[24] | (d[25] << 8)) / 65535) * 100 * 100) / 100,
                alert: alertArray,
            };
        }
        return null;
    }
    /**
     * @deprecated
     *
     * Get a acceleration data from the Logtta_Accel
     *
     * Note: work only in beacon mode
     *
     * Logtta_Accelから加速度データを取得
     *
     * 注: ビーコンモードのときのみ動作
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns acceleration data from Logtta_Accel
     *
     * Logtta_Accelから受け取った加速度データ
     */
    static getAccelData(peripheral) {
        if (!Logtta_Accel.isDevice(peripheral)) {
            return null;
        }
        if (peripheral.scan_resp && peripheral.scan_resp.length === 31) {
            const d = peripheral.scan_resp;
            // console.log(
            //   `x peak ${data.x.peak} rms ${data.x.rms} y peak ${data.y.peak} rms ${data.y.rms} z peak ${data.z.peak} rms ${data.z.rms} address ${data.address}`,
            // );
            return {
                x: {
                    peak: d[5] | (d[6] << 8),
                    rms: d[7] |
                        (d[8] << 8) |
                        (d[9] << 16) |
                        (d[10] << 24) |
                        (d[11] << 32) |
                        (d[12] << 40),
                },
                y: {
                    peak: d[13] | (d[14] << 8),
                    rms: d[15] |
                        (d[16] << 8) |
                        (d[17] << 16) |
                        (d[18] << 24) |
                        (d[19] << 32) |
                        (d[20] << 40),
                },
                z: {
                    peak: d[21] | (d[22] << 8),
                    rms: d[23] |
                        (d[24] << 8) |
                        (d[25] << 16) |
                        (d[26] << 24) |
                        (d[27] << 32) |
                        (d[28] << 40),
                },
            };
        }
        return null;
    }
}
exports.default = Logtta_Accel;
Logtta_Accel.PartsName = 'Logtta_Accel';
Logtta_Accel.AvailableBleMode = 'Beacon';
Logtta_Accel.ServiceUuids = {
    Connectable: 'c2de0000-a6c7-437f-8538-54e07f7845df',
    Beacon: null,
};
Logtta_Accel.BeaconDataLength = {
    Connectable: undefined,
    Beacon: 0x1e,
};
Logtta_Accel.BeaconDataLength_ScanResponse = {
    Connectable: undefined,
    Beacon: 0x1e,
};
Logtta_Accel.CompanyID = {
    Connectable: undefined,
    Beacon: [0x10, 0x05],
};
Logtta_Accel.CompanyID_ScanResponse = {
    Connectable: undefined,
    Beacon: [0x10, 0x05],
};
Logtta_Accel.BeaconDataStruct = {
    Connectable: null,
    Beacon: {
        appearance: {
            index: 0,
            type: 'check',
            data: 0x05,
        },
        revision: {
            index: 1,
            type: 'unsignedNumLE',
        },
        sequence: {
            index: 2,
            type: 'unsignedNumLE',
        },
        battery: {
            index: 3,
            type: 'unsignedNumLE',
        },
        name: {
            index: 4,
            length: 8,
            type: 'string',
        },
        setting: {
            index: 12,
            length: 6,
            type: 'custom',
            func: (data) => ({
                temp_cycle: ObnizPartsBleAbstract_1.uint(data.slice(0, 2)),
                accel_sampling: Logtta_Accel.parseAccelSamplingData(data[2]),
                hpf: (data[3] & 0b00010000) > 0,
                accel_range: Logtta_Accel.parseAccelRangeData(data[3]),
                accel_axis: Logtta_Accel.parseAccelAxis(data[4]),
                accel_resolution: data[5],
            }),
        },
        temperature: {
            index: 18,
            length: 2,
            type: 'custom',
            func: (data) => (ObnizPartsBleAbstract_1.uint(data) / 0x10000) * 175 - 45,
        },
        humidity: {
            index: 20,
            length: 2,
            type: 'custom',
            func: (data) => (ObnizPartsBleAbstract_1.uint(data) / 0x10000) * 100,
        },
        alert: {
            index: 22,
            length: 2,
            type: 'custom',
            func: (data) => [
                (data[0] & 0b11110000) >> 4,
                data[0] & 0b00001111,
                (data[1] & 0b11110000) >> 4,
                data[1] & 0b00001111,
            ],
        },
        appearance_sr: {
            index: 0,
            type: 'check',
            data: 0x05,
            scanResponse: true,
        },
        accel_peak: {
            index: 0,
            length: 24,
            type: 'custom',
            func: (data, peripheral) => {
                if (!peripheral.manufacturerSpecificData)
                    throw new Error('Manufacturer specific data is null.');
                const range = Logtta_Accel.parseAccelRangeData(peripheral.manufacturerSpecificData[17]);
                const resolution = peripheral.manufacturerSpecificData[19];
                return Object.fromEntries(['x', 'y', 'z'].map((key, i) => [
                    key,
                    (ObnizPartsBleAbstract_1.uint(data.slice(i * 8, i * 8 + 2)) / (2 ** resolution - 1)) *
                        range,
                ]));
            },
            scanResponse: true,
        },
        accel_rms: {
            index: 0,
            length: 24,
            type: 'custom',
            func: (data, peripheral) => {
                if (!peripheral.manufacturerSpecificData)
                    throw new Error('Manufacturer specific data is null.');
                const range = Logtta_Accel.parseAccelRangeData(peripheral.manufacturerSpecificData[17]);
                const resolution = peripheral.manufacturerSpecificData[19];
                const n = Logtta_Accel.parseAccelSamplingData(peripheral.manufacturerSpecificData[16]) * ObnizPartsBleAbstract_1.uint(peripheral.manufacturerSpecificData.slice(14, 16));
                return Object.fromEntries(['x', 'y', 'z'].map((key, i) => [
                    key,
                    (range / (2 ** resolution - 1)) *
                        Math.sqrt(ObnizPartsBleAbstract_1.uint(data.slice(i * 8 + 2, i * 8 + 8)) / n),
                ]));
            },
            scanResponse: true,
        },
    },
};


/***/ }),

/***/ "./dist/src/parts/Ble/LogttaCO2/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Logtta_CO2
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const Logtta_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/abstracts/Logtta.js"));
/** Logtta_CO2 management class Logtta_CO2を管理するクラス */
class Logtta_CO2 extends Logtta_1.default {
    constructor() {
        super(...arguments);
        this.staticClass = Logtta_CO2;
        // TODO: delete
        // In order to maintain compatibility, when callback is placed from arguments, the behavior of the document street
        this.callbackFlag = false;
    }
    /**
     * @deprecated
     *
     * Verify that the received peripheral is from the Logtta_CO2
     *
     * 受け取ったPeripheralがLogtta_CO2のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Logtta_CO2
     *
     * Logtta_CO2かどうか
     */
    static isDevice(peripheral) {
        return this.getDeviceMode(peripheral) === 'Connectable';
    }
    /**
     * @deprecated
     *
     * Verify that the received advertisement is from the Logtta_CO2 (in Beacon Mode)
     *
     * 受け取ったAdvertisementがLogtta_CO2のものかどうか確認する(ビーコンモード中)
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Logtta_CO2
     *
     * Logtta_CO2かどうか
     */
    static isAdvDevice(peripheral) {
        return this.getDeviceMode(peripheral) === 'Beacon';
    }
    /**
     * Notify when the CO2 concentration data have got from the Logtta_CO2 with connected state
     *
     * 接続している状態でLogtta_CO2からCO2濃度データを取得したとき通知
     *
     * @returns
     */
    async startNotifyWait(callback) {
        // TODO: delete try-catch
        try {
            this.checkConnected();
        }
        catch (e) {
            console.error(e);
            return;
        }
        // TODO: delete if
        if (callback) {
            this.callbackFlag = true;
            this.onNotify = callback;
        }
        return await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x21), (data) => {
            if (this.onNotify) {
                if (this.callbackFlag)
                    this.onNotify(this.parseData(data));
                else
                    this.onNotify(this.parseData(data).co2);
            }
        });
    }
    /**
     * @deprecated
     *
     * Get CO2 concentration data with connected state
     *
     * 接続している状態でCO2濃度データを取得
     *
     * @returns CO2 concentration data from the Logtta_CO2
     *
     * Logtta_CO2から受け取ったCO2濃度データ
     */
    async getWait() {
        try {
            return (await this.getDataWait()).co2;
        }
        catch (_a) {
            return null;
        }
    }
    /**
     * @deprecated
     *
     * Set enable / disable for beacon mode (periodic beacon transmission)
     *
     * Call this function after authenticating with the sensor
     *
     * After setting, disconnect once to enable it
     *
     * To stop beacon mode, you need to hold the button on the sensor for more than 2 seconds
     *
     * (For more detail, please see http://www.uni-elec.co.jp/logtta_page.html )
     *
     * ビーコンモード(定期的なビーコン発信)の有効/無効の設定
     *
     * センサとの認証を済ませた状態で実行してください
     *
     * 設定後に切断した後から有効になります
     *
     * ビーコンモードの終了は、デバイスのボタンを2秒以上長押しする操作が必要です(詳しくは http://www.uni-elec.co.jp/logtta_page.html )
     *
     * @param enable enable the beacon mode or not ビーコンモードを有効にするかどうか
     *
     * @returns
     */
    setBeaconMode(enable) {
        return this.setBeaconModeWait(enable);
    }
    parseData(data) {
        return {
            co2: ObnizPartsBleAbstract_1.uintBE(data),
        };
    }
}
exports.default = Logtta_CO2;
Logtta_CO2.PartsName = 'Logtta_CO2';
Logtta_CO2.ServiceUuids = {
    Connectable: '31f3ab20-bd1c-46b1-91e4-f57abcf7d449',
    Beacon: null,
};
Logtta_CO2.BeaconDataStruct = {
    Connectable: null,
    Beacon: {
        appearance: {
            index: 0,
            type: 'check',
            data: 0x02,
        },
        co2: {
            index: 1,
            length: 2,
            type: 'unsignedNumBE',
        },
        battery: {
            index: 5,
            type: 'unsignedNumBE',
        },
        interval: {
            index: 6,
            length: 2,
            type: 'unsignedNumBE',
        },
        /* alert: {
          index: 8,
          type: 'uint8',
        },
        name: {
          index: 9,
          length: 15,
          type: 'string',
        } */
        // TODO: delete
        address: {
            index: 0,
            type: 'custom',
            func: (data, peripheral) => peripheral.address,
        },
    },
};


/***/ }),

/***/ "./dist/src/parts/Ble/LogttaTemp/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Logtta_TH
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const Logtta_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/abstracts/Logtta.js"));
/**
 * Logtta_TH(Logtta_Temp) management class
 *
 * Logtta_TH(Logtta_Temp)を管理するクラス
 */
class Logtta_TH extends Logtta_1.default {
    constructor() {
        super(...arguments);
        this.staticClass = Logtta_TH;
    }
    static parseTemperatureData(data, func = ObnizPartsBleAbstract_1.uint) {
        return (func(data) / 0x10000) * 175.72 - 46.85;
    }
    static parseHumidityData(data, func = ObnizPartsBleAbstract_1.uint) {
        return (func(data) / 0x10000) * 125 - 6;
    }
    /**
     * @deprecated
     *
     * Verify that the received peripheral is from the Logtta_TH(Logtta_Temp)
     *
     * 受け取ったPeripheralがLogtta_TH(Logtta_Temp)のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Logtta_TH(Logtta_Temp)
     *
     * Logtta_TH(Logtta_Temp)かどうか
     */
    static isDevice(peripheral) {
        return this.getDeviceMode(peripheral) === 'Connectable';
    }
    /**
     * @deprecated
     *
     * Verify that the received advertisement is from the Logtta_TH(Logtta_Temp) (in Beacon Mode)
     *
     * 受け取ったAdvertisementがLogtta_TH(Logtta_Temp)のものかどうか確認する(ビーコンモード中)
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Logtta_TH(Logtta_Temp)
     *
     * Logtta_TH(Logtta_Temp)かどうか
     */
    static isAdvDevice(peripheral) {
        return this.getDeviceMode(peripheral) === 'Beacon';
    }
    /**
     * @deprecated
     *
     * Get all data with connected state
     *
     * 接続している状態で全てのデータを取得
     *
     * @returns all data from the Logtta_TH(Logtta_Temp)
     *
     * Logtta_TH(Logtta_Temp)から受け取った全てのデータ
     */
    async getAllWait() {
        try {
            return await this.getDataWait();
        }
        catch (_a) {
            return null;
        }
    }
    /**
     * Get the temperature data with connected state
     *
     * 接続している状態で温度のデータを取得
     *
     * @returns temperature data from the Logtta_TH(Logtta_Temp)
     *
     * Logtta_TH(Logtta_Temp)から受け取った温度データ
     */
    async getTemperatureWait() {
        return (await this.getDataWait()).temperature;
    }
    /**
     * Get the humidity data with connected state
     *
     * 接続している状態で湿度のデータを取得
     *
     * @returns humidity data from the Logtta_TH(Logtta_Temp)
     *
     * Logtta_TH(Logtta_Temp)から受け取った湿度データ
     */
    async getHumidityWait() {
        return (await this.getDataWait()).humidity;
    }
    /**
     * @deprecated
     *
     * Set enable / disable for beacon mode (periodic beacon transmission)
     *
     * Call this function after authenticating with the sensor
     *
     * After setting, disconnect once to enable it
     *
     * To stop beacon mode, you need to hold the button on the sensor for more than 2 seconds
     *
     * (For more detail, please see http://www.uni-elec.co.jp/logtta_page.html )
     *
     * ビーコンモード(定期的なビーコン発信)の有効/無効の設定
     *
     * センサとの認証を済ませた状態で実行してください
     *
     * 設定後に切断した後から有効になります
     *
     * ビーコンモードの終了は、デバイスのボタンを2秒以上長押しする操作が必要です(詳しくは http://www.uni-elec.co.jp/logtta_page.html )
     *
     * @param enable enable the beacon mode or not ビーコンモードを有効にするかどうか
     *
     * @returns
     */
    setBeaconMode(enable) {
        return this.setBeaconModeWait(enable);
    }
    parseData(data) {
        return {
            temperature: Logtta_TH.parseTemperatureData(data.slice(0, 2)),
            humidity: Logtta_TH.parseHumidityData(data.slice(2, 4)),
        };
    }
}
exports.default = Logtta_TH;
Logtta_TH.PartsName = 'Logtta_TH';
Logtta_TH.AvailableBleMode = [
    'Connectable',
    'Beacon',
];
Logtta_TH.LocalName = {
    Connectable: undefined,
    Beacon: /null/,
};
Logtta_TH.ServiceUuids = {
    Connectable: 'f7eeaa20-276e-4165-aa69-7e3de7fc627e',
    Beacon: null,
};
Logtta_TH.BeaconDataStruct = {
    Connectable: null,
    Beacon: {
        appearance: {
            index: 0,
            type: 'check',
            data: 0x01,
        },
        temperature: {
            index: 1,
            length: 2,
            type: 'custom',
            func: (data) => Logtta_TH.parseTemperatureData(data, ObnizPartsBleAbstract_1.uintBE),
        },
        humidity: {
            index: 3,
            length: 2,
            type: 'custom',
            func: (data) => Logtta_TH.parseHumidityData(data, ObnizPartsBleAbstract_1.uintBE),
        },
        battery: {
            index: 5,
            type: 'unsignedNumBE',
        },
        interval: {
            index: 6,
            length: 2,
            type: 'unsignedNumBE',
        },
        /* alert: {
          index: 7,
          type: 'uint8',
        },
        name: {
          index: 8,
          length: 15,
          type: 'string',
        } */
        // TODO: delete
        address: {
            index: 0,
            type: 'custom',
            func: (data, peripheral) => peripheral.address,
        },
    },
};


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100AC/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100AC
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_AC_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_AC.js");
/** MESH_100AC management class */
class MESH_100AC extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        // event handler
        this.onTapped = null;
        this.onShaked = null;
        this.onFlipped = null;
        this.onDirection = null;
        this.staticClass = MESH_100AC;
    }
    async getDataWait() {
        this.checkConnected();
        const _ac = this._mesh;
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
            accele_x: _ac.getAccele.x,
            accele_y: _ac.getAccele.y,
            accele_z: _ac.getAccele.z,
            face: _ac.getFace,
        };
    }
    // public setMode(event: number, mode: number, requestid = 0): void {
    //   if (!this._writeCharacteristic) {
    //     return;
    //   }
    //   const _ac = this._mesh as MESH_js_AC;
    //   this._writeCharacteristic
    //     .writeWait(_ac.parseSetmodeCommand(event, mode, requestid))
    //     .then((resp) => {
    //       console.log('response: ' + resp);
    //     });
    // }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100AC._LocalName) === 0;
    }
    prepareConnect() {
        this._mesh = new MESH_js_AC_1.MESH_js_AC();
        const _ac = this._mesh;
        _ac.onTapped = (accele) => {
            if (typeof this.onTapped !== 'function') {
                return;
            }
            this.onTapped(accele);
        };
        _ac.onShaked = (accele) => {
            if (typeof this.onShaked !== 'function') {
                return;
            }
            this.onShaked(accele);
        };
        _ac.onFlipped = (accele) => {
            if (typeof this.onFlipped !== 'function') {
                return;
            }
            this.onFlipped(accele);
        };
        _ac.onDirection = (face, accele) => {
            if (typeof this.onDirection !== 'function') {
                return;
            }
            this.onDirection(face, accele);
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100AC;
MESH_100AC.PartsName = 'MESH_100AC';
MESH_100AC._LocalName = 'MESH-100AC';


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100BU/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100BU
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_BU_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_BU.js");
/** MESH_100BU management class */
class MESH_100BU extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        /** event handler */
        this.onSinglePressed = null;
        this.onLongPressed = null;
        this.onDoublePressed = null;
        this.staticClass = MESH_100BU;
    }
    async getDataWait() {
        this.checkConnected();
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
        };
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100BU._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_BU_1.MESH_js_BU();
        const _bu = this._mesh;
        _bu.onSinglePressed = () => {
            if (typeof this.onSinglePressed !== 'function') {
                return;
            }
            this.onSinglePressed();
        };
        _bu.onLongPressed = () => {
            if (typeof this.onLongPressed !== 'function') {
                return;
            }
            this.onLongPressed();
        };
        _bu.onDoublePressed = () => {
            if (typeof this.onDoublePressed !== 'function') {
                return;
            }
            this.onDoublePressed();
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100BU;
MESH_100BU.PartsName = 'MESH_100BU';
MESH_100BU._LocalName = 'MESH-100BU';


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100GP/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100GP
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_GP_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_GP.js");
/** MESH_100GA management class */
class MESH_100GP extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        this.DigitalPins = this
            ._mesh.DigitalPins;
        // event handler
        this.onDigitalInEventNotify = null;
        this.onAnalogInEventNotify = null;
        this.onDigitalInNotify = null;
        this.onAnalogInNotify = null;
        this.onVOutNotify = null;
        this.onDigitalOutNotify = null;
        this.onPwmNotify = null;
        this.staticClass = MESH_100GP;
    }
    async getDataWait() {
        this.checkConnected();
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
        };
    }
    /**
     * setMode
     *
     * @param din {p1:boolean, p2:boolean, p3:boolean}
     * @param din_notify {p1:boolean, p2:boolean, p3:boolean}
     * @param dout {p1:boolean, p2:boolean, p3:boolean}
     * @param pwm_ratio 0 ~ 255
     * @param vcc VCC.AUTO or VCC.ON or VCC.OFF
     * @param ain_range_upper 0.00 ~ 3.00[V], resolution 0.05[V]
     * @param ain_range_bottom 0.00 ~ 3.00[V], resolution 0.05[V]
     * @param ain_notify AnalogInputEventCondition.NotNotify or AnalogInputEventCondition.AboveThreshold or AnalogInputEventCondition.BelowThreshold
     */
    setMode(din, din_notify, dout, pwm_ratio, vcc, ain_range_upper, ain_range_bottom, ain_notify) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetmodeCommand(din, din_notify, dout, pwm_ratio, vcc, ain_range_upper, ain_range_bottom, ain_notify));
    }
    setDin(pin, request_id = 0) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetDinCommand(pin, request_id));
    }
    setAin(mode, request_id = 0) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetAinCommand(mode, request_id));
    }
    setVout(pin, request_id = 0) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetVoutCommand(pin, request_id));
    }
    setDout(pin, request_id = 0) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetDoutCommand(pin, request_id));
    }
    setPWMNotify(request_id = 0) {
        const _gp = this._mesh;
        this.writeWOResponse(_gp.parseSetPWMCommand(request_id));
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100GP._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_GP_1.MESH_js_GP();
        const _gp = this._mesh;
        _gp.onDigitalInEventNotify = (pin, state) => {
            if (typeof this.onDigitalInEventNotify !== 'function') {
                return;
            }
            this.onDigitalInEventNotify(pin, state);
        };
        _gp.onAnalogInEventNotify = (level) => {
            if (typeof this.onAnalogInEventNotify !== 'function') {
                return;
            }
            this.onAnalogInEventNotify(level);
        };
        _gp.onDigitalInNotify = (requestId, pin, state) => {
            if (typeof this.onDigitalInNotify !== 'function') {
                return;
            }
            this.onDigitalInNotify(requestId, pin, state);
        };
        _gp.onAnalogInNotify = (requestId, state, mode) => {
            if (typeof this.onAnalogInNotify !== 'function') {
                return;
            }
            this.onAnalogInNotify(requestId, state, mode);
        };
        _gp.onVOutNotify = (requestId, state) => {
            if (typeof this.onVOutNotify !== 'function') {
                return;
            }
            this.onVOutNotify(requestId, state);
        };
        _gp.onDigitalOutNotify = (requestId, pin, state) => {
            if (typeof this.onDigitalOutNotify !== 'function') {
                return;
            }
            this.onDigitalOutNotify(requestId, pin, state);
        };
        _gp.onPwmNotify = (requestId, level) => {
            if (typeof this.onPwmNotify !== 'function') {
                return;
            }
            this.onPwmNotify(requestId, level);
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100GP;
MESH_100GP.PartsName = 'MESH_100GP';
MESH_100GP._LocalName = 'MESH-100GP';
MESH_100GP.AnalogInputEventCondition = MESH_js_GP_1.MESH_js_GP.AnalogInputEventCondition;
MESH_100GP.Mode = MESH_js_GP_1.MESH_js_GP.Mode;
MESH_100GP.Pin = MESH_js_GP_1.MESH_js_GP.Pin;
MESH_100GP.State = MESH_js_GP_1.MESH_js_GP.State;
MESH_100GP.VCC = MESH_js_GP_1.MESH_js_GP.VCC;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100LE/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100LE
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_LE_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_LE.js");
/** MESH_100TH management class */
class MESH_100LE extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        this.staticClass = MESH_100LE;
    }
    async getDataWait() {
        this.checkConnected();
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
        };
    }
    /**
     * Light Up
     *
     * @param red 0 ~ 127
     * @param green 0 ~ 127
     * @param blue 0 ~ 127
     * @param time 0 ~ 65535 [ms]
     * @param cycle_on 0 ~ 65535 [ms]
     * @param cycle_off 0 ~ 65535 [ms]
     * @param pattern Pattern.Blink or Pattern.Soft
     * @returns
     */
    lightup(red, green, blue, time, cycle_on, cycle_off, pattern) {
        const _le = this._mesh;
        this.writeWOResponse(_le.parseLightupCommand(red, green, blue, time, cycle_on, cycle_off, pattern));
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100LE._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_LE_1.MESH_js_LE();
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100LE;
MESH_100LE.PartsName = 'MESH_100LE';
MESH_100LE._LocalName = 'MESH-100LE';
MESH_100LE.Pattern = MESH_js_LE_1.MESH_js_LE.Pattern;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100MD/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100MD
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_MD_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_MD.js");
/** MESH_100MD management class */
class MESH_100MD extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        // event handler
        this.onNotify = null;
        this.staticClass = MESH_100MD;
    }
    async getDataWait() {
        this.checkConnected();
        const _md = this._mesh;
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
            motion_state: _md.getResponse.motion_state,
            detection_mode: _md.getResponse.detection_mode,
            request_id: _md.getResponse.request_id,
        };
    }
    setMode(detection_mode, detection_time = 500, response_time = 500, requestid = 0) {
        const _md = this._mesh;
        this.writeWOResponse(_md.parseSetmodeCommand(detection_mode, detection_time, response_time, requestid));
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100MD._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_MD_1.MESH_js_MD();
        // set Event handler
        const _md = this._mesh;
        _md.onNotify = (response) => {
            if (typeof this.onNotify !== 'function') {
                return;
            }
            this.onNotify(response);
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100MD;
MESH_100MD.PartsName = 'MESH_100MD';
MESH_100MD._LocalName = 'MESH-100MD';


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100PA/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100PA
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_PA_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_PA.js");
/** MESH_100PA management class */
class MESH_100PA extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        // event handler
        this.onNotify = null;
        this.staticClass = MESH_100PA;
    }
    async getDataWait() {
        this.checkConnected();
        const _pa = this._mesh;
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
            proximity: _pa.getResponse.proximity,
            brightness: _pa.getResponse.brightness,
        };
    }
    setMode(type, request_id = 0) {
        const _pa = this._mesh;
        this.writeWOResponse(_pa.parseSetmodeCommand(type, request_id));
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100PA._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_PA_1.MESH_js_PA();
        const _pa = this._mesh;
        _pa.onNotify = (response) => {
            if (typeof this.onNotify !== 'function') {
                return;
            }
            this.onNotify(response);
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100PA;
MESH_100PA.PartsName = 'MESH_100PA';
MESH_100PA._LocalName = 'MESH-100PA';
MESH_100PA.NotifyType = MESH_js_PA_1.MESH_js_PA.NotifyType;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_100TH/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MESH_100TH
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const MESH_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/MESH.js");
const MESH_js_TH_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_TH.js");
/** MESH_100TH management class */
class MESH_100TH extends MESH_1.MESH {
    constructor() {
        super(...arguments);
        this.onNotify = null;
        this.staticClass = MESH_100TH;
    }
    async getDataWait() {
        this.checkConnected();
        const _th = this._mesh;
        return {
            name: this.peripheral.localName,
            address: this.peripheral.address,
            battery: this._mesh.battery,
            temperature: _th.getResponse.temperature,
            humidity: _th.getResponse.humidity,
        };
    }
    setMode(temperature_upper, temperature_bottom, temperature_condition, humidity_upper, humidity_bottom, humidity_condision, type, request_id = 0) {
        const _th = this._mesh;
        this.writeWOResponse(_th.parseSetmodeCommand(temperature_upper, temperature_bottom, humidity_upper, humidity_bottom, temperature_condition, humidity_condision, type, request_id));
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH_100TH._LocalName) !== -1;
    }
    prepareConnect() {
        this._mesh = new MESH_js_TH_1.MESH_js_TH();
        const _th = this._mesh;
        _th.onNotify = (response) => {
            if (typeof this.onNotify !== 'function') {
                return;
            }
            this.onNotify(response);
        };
        super.prepareConnect();
    }
    async beforeOnDisconnectWait(reason) {
        // do nothing
    }
}
exports.default = MESH_100TH;
MESH_100TH.PartsName = 'MESH_100TH';
MESH_100TH._LocalName = 'MESH-100TH';
MESH_100TH.NotifyType = MESH_js_TH_1.MESH_js_TH.NotifyType;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_AC.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
class MESH_js_AC extends _1.MESH_js {
    constructor() {
        super(...arguments);
        /**
         * MessageTypeID
         * command header
         */
        this.MessageTypeID = 1;
        this.accele = { x: -1, y: -1, z: -1 };
        this.face = -1;
        this.DataLength = 17;
        // event handler
        this.onTapped = null;
        this.onShaked = null;
        this.onFlipped = null;
        this.onDirection = null;
    }
    notify(data) {
        super.notify(data);
        this.updateAccele(data);
        if (data[0] !== 1) {
            return;
        }
        switch (data[1]) {
            case 0: // Tap
                if (typeof this.onTapped === 'function') {
                    this.onTapped(this.accele);
                }
                break;
            case 1: // Shake
                if (typeof this.onShaked === 'function') {
                    this.onShaked(this.accele);
                }
                break;
            case 2: // Flip
                if (typeof this.onFlipped === 'function') {
                    this.onFlipped(this.accele);
                }
                break;
            case 3: // Direction
                if (typeof this.onDirection === 'function') {
                    this.face = data[2];
                    this.onDirection(this.face, this.accele);
                }
                break;
            default:
                break;
        }
    }
    get getAccele() {
        return this.accele;
    }
    get getFace() {
        return this.face;
    }
    /**
     * setMode
     *
     * @param type
     * @returns
     */
    //   public parseSetmodeCommand(
    //     event: number,
    //     mode: number,
    //     requestId = 0
    //   ): number[] {
    //     const HEADER: number[] = [this.MessageTypeID, 1, requestId];
    //     const data: number[] = HEADER.concat(event).concat(mode);
    //     data.push(this.checkSum(data));
    //     console.log('setMode: ' + data);
    //     return data;
    //   }
    updateAccele(data) {
        if (data.length !== this.DataLength) {
            return false;
        }
        if (data[0] !== 1) {
            return false;
        }
        const BASE = 1024;
        this.accele.x = this.complemnt(256 * data[5] + data[4]) / BASE;
        this.accele.y = this.complemnt(256 * data[7] + data[6]) / BASE;
        this.accele.z = this.complemnt(256 * data[9] + data[8]) / BASE;
        return true;
    }
    complemnt(val) {
        return val - (val > 32767 ? 65536 : 0);
    }
}
exports.MESH_js_AC = MESH_js_AC;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_BU.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
class MESH_js_BU extends _1.MESH_js {
    constructor() {
        super(...arguments);
        // event handler
        this.onSinglePressed = null;
        this.onLongPressed = null;
        this.onDoublePressed = null;
        this.DataLength = 4;
        this.MessageTypeID = 1;
        this.EventTypeID = 0;
        this.Type = { SINGLE: 1, LONG: 2, DOUBLE: 3 };
    }
    notify(data) {
        super.notify(data);
        if (data.length !== this.DataLength) {
            return;
        }
        if (data[0] !== this.MessageTypeID) {
            return;
        }
        if (data[1] !== this.EventTypeID) {
            return;
        }
        switch (data[2]) {
            case this.Type.SINGLE:
                if (typeof this.onSinglePressed === 'function') {
                    this.onSinglePressed();
                }
                break;
            case this.Type.LONG:
                if (typeof this.onLongPressed === 'function') {
                    this.onLongPressed();
                }
                break;
            case this.Type.DOUBLE:
                if (typeof this.onDoublePressed === 'function') {
                    this.onDoublePressed();
                }
                break;
            default:
                break;
        }
    }
}
exports.MESH_js_BU = MESH_js_BU;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_Error.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MESH_js_Error extends Error {
    constructor(code, e) {
        super(e);
        this.code = code;
        this.name = new.target.name;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.MESH_js_Error = MESH_js_Error;
class MESHOutOfRangeError extends MESH_js_Error {
    constructor(property, min, max) {
        super(1, property +
            ' is out of range. ' +
            (min !== void 0 && max !== void 0
                ? property + ' must be ' + min + ' ~ ' + max + '.'
                : ''));
        this.property = property;
    }
}
exports.MESHOutOfRangeError = MESHOutOfRangeError;
class MESHInvalidValue extends MESH_js_Error {
    constructor(property) {
        super(2, property + 'is invalid value.');
        this.property = property;
    }
}
exports.MESHInvalidValue = MESHInvalidValue;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_GP.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
const MESH_js_Error_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_Error.js");
class MESH_js_GP extends _1.MESH_js {
    constructor() {
        super(...arguments);
        // Event Handler
        this.onDigitalInEventNotify = null;
        this.onAnalogInEventNotify = null;
        this.onDigitalInNotify = null;
        this.onAnalogInNotify = null;
        this.onVOutNotify = null;
        this.onDigitalOutNotify = null;
        this.onPwmNotify = null;
        this.DigitalPins = { p1: false, p2: false, p3: false };
        this.MessageTypeID = 1;
        this.DigitalInEventID = 0;
        this.AnalogInEventID = 1;
        this.DigitalInID = 2;
        this.AnalogInID = 3;
        this.VOutID = 4;
        this.DigitalOutID = 5;
        this.PwmID = 6;
    }
    /**
     * notify
     *
     * @param data
     * @returns
     */
    notify(data) {
        super.notify(data);
        if (data[0] !== this.MessageTypeID) {
            return;
        }
        switch (data[1]) {
            case this.DigitalInEventID: {
                if (typeof this.onDigitalInEventNotify !== 'function') {
                    return;
                }
                const _pin = data[2];
                const _state = data[3];
                this.onDigitalInEventNotify(_pin, _state);
                break;
            }
            case this.AnalogInEventID: {
                if (typeof this.onAnalogInEventNotify !== 'function') {
                    return;
                }
                const _level = data[5];
                this.onAnalogInEventNotify(_level);
                break;
            }
            case this.DigitalInID: {
                if (typeof this.onDigitalInNotify !== 'function') {
                    return;
                }
                const _request_id = data[2];
                const _pin = data[3];
                const _state = data[4];
                this.onDigitalInNotify(_request_id, _pin, _state);
                break;
            }
            case this.AnalogInID: {
                if (typeof this.onAnalogInNotify !== 'function') {
                    return;
                }
                const _request_id = data[2];
                const _state = data[4];
                const _mode = data[5];
                this.onAnalogInNotify(_request_id, _state, _mode);
                break;
            }
            case this.VOutID: {
                if (typeof this.onVOutNotify !== 'function') {
                    return;
                }
                const _request_id = data[2];
                const _state = data[4];
                this.onVOutNotify(_request_id, _state);
                break;
            }
            case this.DigitalOutID: {
                if (typeof this.onDigitalOutNotify !== 'function') {
                    return;
                }
                const _request_id = data[2];
                const _pin = data[3];
                const _state = data[4];
                this.onDigitalOutNotify(_request_id, _pin, _state);
                break;
            }
            case this.PwmID: {
                if (typeof this.onPwmNotify !== 'function') {
                    return;
                }
                const _request_id = data[2];
                const _level = data[4];
                this.onPwmNotify(_request_id, _level);
                break;
            }
            default:
                break;
        }
    }
    /**
     * parseSetmodeCommand
     *
     * @param din {p1:boolean, p2:boolean, p3:boolean}
     * @param din_notify {p1:boolean, p2:boolean, p3:boolean}
     * @param dout {p1:boolean, p2:boolean, p3:boolean}
     * @param pwm_ratio 0 ~ 255
     * @param vcc VCC.AUTO or VCC.ON or VCC.OFF
     * @param ain_range_upper 0.00 ~ 3.00[V], resolution 0.05[V]
     * @param ain_range_bottom 0.00 ~ 3.00[V], resolution 0.05[V]
     * @param ain_notify AnalogInputEventCondition.NotNotify or AnalogInputEventCondition.AboveThreshold or AnalogInputEventCondition.BelowThreshold
     * @returns command
     */
    parseSetmodeCommand(din, din_notify, dout, pwm_ratio, vcc, ain_range_upper, ain_range_bottom, ain_notify) {
        // Error Handle
        const _PwmMin = 0;
        const _PwmMax = 255;
        if (pwm_ratio < _PwmMin || _PwmMax < pwm_ratio) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('pwm_ratio', _PwmMin, _PwmMax);
        }
        if (vcc !== MESH_js_GP.VCC.AUTO &&
            vcc !== MESH_js_GP.VCC.ON &&
            vcc !== MESH_js_GP.VCC.OFF) {
            throw new MESH_js_Error_1.MESHInvalidValue('vcc');
        }
        const _AinRangeMin = 0;
        const _AinRangeMax = 3;
        if (ain_range_upper < _AinRangeMin || _AinRangeMax < ain_range_upper) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('ain_range_upper', _AinRangeMin, _AinRangeMax);
        }
        if (ain_range_bottom < _AinRangeMin || _AinRangeMax < ain_range_bottom) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('ain_range_bottom', _AinRangeMin, _AinRangeMax);
        }
        if (ain_notify !== MESH_js_GP.AnalogInputEventCondition.NotNotify &&
            ain_notify !== MESH_js_GP.AnalogInputEventCondition.AboveThreshold &&
            ain_notify !== MESH_js_GP.AnalogInputEventCondition.BelowThreshold) {
            throw new MESH_js_Error_1.MESHInvalidValue('ain_notify');
        }
        // Generate Command
        const HEADER = [this.MessageTypeID, 1];
        const BODY = [
            this.pin2num(din),
            this.pin2num(din_notify),
            this.pin2num(dout),
            pwm_ratio,
            vcc,
            ain_range_upper,
            ain_range_bottom,
            ain_notify,
        ];
        const data = HEADER.concat(BODY);
        data.push(this.checkSum(data));
        return data;
    }
    /**
     * parseSetDinCommand
     *
     * @param pin
     * @param requestId
     * @returns
     */
    parseSetDinCommand(pin, requestId = 0) {
        return this._parseSetCommand(this.DigitalInID, pin, requestId);
    }
    /**
     * parseSetAinCommand
     *
     * @param mode
     * @param requestId
     * @returns
     */
    parseSetAinCommand(mode, requestId = 0) {
        return this._parseSetCommand(this.AnalogInID, mode, requestId);
    }
    /**
     * parseSetVoutCommand
     *
     * @param pin
     * @param requestId
     * @returns
     */
    parseSetVoutCommand(pin, requestId = 0) {
        return this._parseSetCommand(this.VOutID, pin, requestId);
    }
    /**
     * parseSetDoutCommand
     *
     * @param pin
     * @param requestId
     * @returns
     */
    parseSetDoutCommand(pin, requestId = 0) {
        return this._parseSetCommand(this.DigitalOutID, pin, requestId);
    }
    /**
     * parseSetPWMCommand
     *
     * @param requestId
     * @returns
     */
    parseSetPWMCommand(requestId = 0) {
        return this._parseSetCommand(this.PwmID, MESH_js_GP.Pin.p3, requestId);
    }
    _parseSetCommand(eventId, param, requestId) {
        const HEADER = [this.MessageTypeID, eventId, requestId];
        const data = HEADER.concat(param);
        data.push(this.checkSum(data));
        return data;
    }
    pin2num(pins) {
        return (pins.p1 ? 1 : 0) + (pins.p2 ? 2 : 0) + (pins.p3 ? 4 : 0);
    }
}
exports.MESH_js_GP = MESH_js_GP;
MESH_js_GP.AnalogInputEventCondition = {
    NotNotify: 0,
    AboveThreshold: 1,
    BelowThreshold: 2,
};
MESH_js_GP.Mode = {
    Always: 0,
    Once: 1,
    AlwaysAndOnce: 2,
};
MESH_js_GP.Pin = { p1: 0, p2: 1, p3: 2 };
MESH_js_GP.State = { Low2High: 1, High2Low: 2 };
MESH_js_GP.VCC = { AUTO: 0, ON: 1, OFF: 2 };


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_LE.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
const MESH_js_Error_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_Error.js");
class MESH_js_LE extends _1.MESH_js {
    parseLightupCommand(red, green, blue, total_time, cycle_on_time, cycle_off_time, pattern) {
        // Error Handle
        const _ColorMin = 0;
        const _ColorMax = 127;
        if (red < _ColorMin || _ColorMax < red) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('red', _ColorMin, _ColorMax);
        }
        if (green < _ColorMin || _ColorMax < green) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('green', _ColorMin, _ColorMax);
        }
        if (blue < _ColorMin || _ColorMax < blue) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('blue', _ColorMin, _ColorMax);
        }
        const _TimeMin = 0;
        const _TimeMax = 65535;
        if (total_time < _TimeMin || _TimeMax < total_time) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('time', _TimeMin, _TimeMax);
        }
        if (cycle_on_time < _TimeMin || _TimeMax < cycle_on_time) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('cycle_on', _TimeMin, _TimeMax);
        }
        if (cycle_off_time < _TimeMin || _TimeMax < cycle_off_time) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('cycle_off', _TimeMin, _TimeMax);
        }
        if (pattern !== MESH_js_LE.Pattern.Blink &&
            pattern !== MESH_js_LE.Pattern.Soft) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('pattern');
        }
        // Generate Command
        const _MessageTypeID = 1;
        const _EventTypeID = 0;
        const _Fixed = 0;
        const _Byte = 256;
        const data = [
            _MessageTypeID,
            _EventTypeID,
            red,
            _Fixed,
            green,
            _Fixed,
            blue,
            total_time % _Byte,
            Math.floor(total_time / _Byte),
            cycle_on_time % _Byte,
            Math.floor(cycle_on_time / _Byte),
            cycle_off_time % _Byte,
            Math.floor(cycle_off_time / _Byte),
            pattern,
        ];
        data.push(this.checkSum(data));
        return data;
    }
}
exports.MESH_js_LE = MESH_js_LE;
MESH_js_LE.Pattern = { Blink: 1, Soft: 2 };


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_MD.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
const MESH_js_Error_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_Error.js");
class MESH_js_MD extends _1.MESH_js {
    constructor() {
        super(...arguments);
        this.DetectionMode = {
            DETECTED: 0x01,
            NOTDETECTED: 0x02,
            ONESHOT: 0x10,
            CONTINUOUS: 0x20,
        };
        this.MotionState = {
            SETUP: 0x00,
            DETECTED: 0x01,
            NOTDETECTED: 0x02,
        };
        this.onNotify = null;
        this.MessageTypeID = 1;
        this.EventTypeID = 0;
        this.response = { request_id: -1, motion_state: -1, detection_mode: -1 };
    }
    notify(data) {
        super.notify(data);
        if (data[0] !== this.MessageTypeID) {
            return;
        }
        if (data[1] !== this.EventTypeID) {
            return;
        }
        this.response.request_id = data[2];
        this.response.motion_state = data[3];
        this.response.detection_mode = data[4];
        if (typeof this.onNotify !== 'function') {
            return;
        }
        this.onNotify(this.response);
    }
    get getResponse() {
        return this.response;
    }
    parseSetmodeCommand(detection_mode, detection_time = 500, response_time = 500, request_id = 0) {
        // Error Handle
        const _DetectionTimeMin = 200;
        const _DetectionTimeMax = 60000;
        if (detection_time < _DetectionTimeMin ||
            _DetectionTimeMax < detection_time) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('detection_time', _DetectionTimeMin, _DetectionTimeMax);
        }
        const _ResponseTimeMin = 500;
        const _ResponseTimeMax = 60000;
        if (response_time < _ResponseTimeMin || _ResponseTimeMax < response_time) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('response_time', _ResponseTimeMin, _ResponseTimeMax);
        }
        // Generate Command
        const HEADER = [this.MessageTypeID, this.EventTypeID, request_id];
        const _Byte = 256;
        const BODY = [
            detection_mode,
            detection_time % _Byte,
            Math.floor(detection_time / _Byte),
            response_time % _Byte,
            Math.floor(response_time / _Byte),
        ];
        const data = HEADER.concat(BODY);
        data.push(this.checkSum(data));
        return data;
    }
}
exports.MESH_js_MD = MESH_js_MD;


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_PA.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
const MESH_js_Error_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_Error.js");
class MESH_js_PA extends _1.MESH_js {
    constructor() {
        super(...arguments);
        this.onNotify = null;
        this.MessageTypeID = 1;
        this.EventTypeID = 0;
        this.response = { requestId: -1, proximity: -1, brightness: -1 };
    }
    notify(data) {
        super.notify(data);
        if (data[0] !== this.MessageTypeID) {
            return;
        }
        if (data[1] !== this.EventTypeID) {
            return;
        }
        const _Byte = 256;
        this.response.requestId = data[2];
        this.response.proximity = _Byte * data[5] + data[4];
        this.response.brightness = _Byte * data[7] + data[6];
        if (typeof this.onNotify !== 'function') {
            return;
        }
        this.onNotify(this.response);
    }
    get getResponse() {
        return this.response;
    }
    /**
     *
     * @param notifyType
     * @param requestId
     * @returns command
     */
    parseSetmodeCommand(notifyType, requestId = 0) {
        // Error Handle
        if (notifyType % 4 !== 0) {
            throw new MESH_js_Error_1.MESHInvalidValue('notifyType');
        }
        const _notifytypeMin = 4;
        const _notifytypeMax = 60;
        if (notifyType < _notifytypeMin || _notifytypeMax < notifyType) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('notifyType');
        }
        // Generate Command
        const _HEADER = [this.MessageTypeID, this.EventTypeID, requestId];
        const _FIXED = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2];
        const data = _HEADER.concat(_FIXED).concat(notifyType);
        data.push(this.checkSum(data));
        return data;
    }
}
exports.MESH_js_PA = MESH_js_PA;
MESH_js_PA.NotifyType = {
    UpdateProximity: 4,
    UpdateBrightness: 8,
    Once: 16,
    Always: 32,
};


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/MESH_js_TH.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
const MESH_js_Error_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/MESH_js_Error.js");
class MESH_js_TH extends _1.MESH_js {
    constructor() {
        super(...arguments);
        // Event handler
        this.onNotify = null;
        /**
         * MessageTypeID
         * command header
         */
        this.MessageTypeID = 1;
        /**
         * EventTypeID
         * command header
         */
        this.EventTypeID = 0;
        this.MaxTemperature = 50;
        this.MinTemperature = -10;
        this.MaxHumidity = 100;
        this.MinHumidity = 0;
        this.response = { request_id: -1, temperature: -1, humidity: -1 };
    }
    notify(data) {
        super.notify(data);
        if (data[0] !== this.MessageTypeID) {
            return;
        }
        if (data[1] !== this.EventTypeID) {
            return;
        }
        this.response.request_id = data[2];
        const _Byte = 256;
        const temp = this.complemnt(_Byte * data[5] + data[4]) / 10;
        this.response.temperature = Math.min(Math.max(this.MinTemperature, temp), this.MaxTemperature);
        const hum_ori = _Byte * data[7] + data[6];
        this.response.humidity = Math.min(Math.max(this.MinHumidity, hum_ori), this.MaxHumidity);
        if (typeof this.onNotify !== 'function') {
            return;
        }
        this.onNotify(this.response);
    }
    get getResponse() {
        return this.response;
    }
    parseSetmodeCommand(temperature_range_upper, temperature_range_bottom, temperature_condition, humidity_range_upper, humidity_range_bottom, humidity_condision, type, request_id = 0) {
        // Error Handle
        if (temperature_range_bottom < this.MinTemperature ||
            this.MaxTemperature < temperature_range_upper) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('temperature_range', this.MinTemperature, this.MaxTemperature);
        }
        if (humidity_range_bottom < this.MinHumidity ||
            this.MaxHumidity < humidity_range_upper) {
            throw new MESH_js_Error_1.MESHOutOfRangeError('humidity_range', this.MinHumidity, this.MaxHumidity);
        }
        // Generate Command
        const _HEADER = [this.MessageTypeID, this.EventTypeID, request_id];
        const TEMP_UPPER = this.num2array(10 * this.invcomplemnt(temperature_range_upper));
        const TEMP_BOTTOM = this.num2array(10 * this.invcomplemnt(temperature_range_bottom));
        const HUMI_UPPER = this.num2array(humidity_range_upper);
        const HUMI_BOTTOM = this.num2array(humidity_range_bottom);
        const data = _HEADER
            .concat(TEMP_UPPER)
            .concat(TEMP_BOTTOM)
            .concat(HUMI_UPPER)
            .concat(HUMI_BOTTOM)
            .concat([temperature_condition, humidity_condision, type]);
        data.push(this.checkSum(data));
        return data;
    }
    num2array(val) {
        const _Byte = 256;
        return [val % _Byte, Math.floor(val / _Byte)];
    }
    complemnt(val) {
        const _2Byte = 65536;
        const _2ByteHalf = Math.floor(_2Byte / 2) - 1;
        return val - (val > _2ByteHalf ? _2Byte : 0);
    }
    invcomplemnt(val) {
        const _2Byte = 65536;
        return val + (val < 0 ? _2Byte : 0);
    }
}
exports.MESH_js_TH = MESH_js_TH;
MESH_js_TH.NotifyType = {
    UpdateTemperature: 4,
    UpdateHumidity: 8,
    Once: 16,
    Always: 32,
};


/***/ }),

/***/ "./dist/src/parts/Ble/MESH_js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MESH_js {
    constructor() {
        this.UUIDS = {
            serviceId: '72C90001-57A9-4D40-B746-534E22EC9F9E',
            characteristics: {
                Indicate: '72c90005-57a9-4d40-b746-534e22ec9f9e',
                Notify: '72c90003-57a9-4d40-b746-534e22ec9f9e',
                Write: '72c90004-57a9-4d40-b746-534e22ec9f9e',
                WriteWOResponse: '72c90002-57a9-4d40-b746-534e22ec9f9e',
            },
        };
        // event handler
        this.onBattery = null;
        this.onStatusButtonPressed = null;
        this._feature_command = [0, 2, 1, 3];
        this._battery = -1;
    }
    get feature() {
        return this._feature_command;
    }
    get battery() {
        return this._battery;
    }
    indicate(data) {
        if (data.length !== 16) {
            return;
        }
        if (data[0] !== 0) {
            return;
        }
        if (data[1] !== 2) {
            return;
        }
        this._battery = data[14];
    }
    notify(data) {
        this._updateBattery(data);
        this._updateStatusButton(data);
    }
    printData(message) {
        console.log('bat: ' + this._battery + ', ' + message);
    }
    checkSum(command) {
        let sum = 0;
        command.forEach((val) => {
            sum += val;
        });
        return sum % 256;
    }
    errorMessage(message) {
        console.log('[Error] Can not parse; ' + message);
    }
    errorOutOfRange(message) {
        console.log(this.errorMessage('out of range ' + message));
    }
    _updateBattery(data) {
        if (data.length !== 4) {
            return false;
        }
        if (data[0] !== 0) {
            return false;
        }
        if (data[1] !== 0) {
            return false;
        }
        // if (data[2] === this.battery) {
        //   return;
        // }
        this._battery = data[2];
        if (typeof this.onBattery !== 'function') {
            return false;
        }
        this.onBattery(this._battery);
        return true;
    }
    _updateStatusButton(data) {
        if (data.length !== 4) {
            return false;
        }
        if (data[0] !== 0) {
            return false;
        }
        if (data[1] !== 1) {
            return false;
        }
        if (data[2] !== 0) {
            return false;
        }
        if (typeof this.onStatusButtonPressed !== 'function') {
            return false;
        }
        this.onStatusButtonPressed();
        return true;
    }
}
exports.MESH_js = MESH_js;


/***/ }),

/***/ "./dist/src/parts/Ble/MINEW_S1/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MINEW_S1_HT
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/** MINEW_S1 management class MINEW_S1を管理するクラス */
class MINEW_S1 {
    constructor() {
        this._peripheral = null;
        // non-wired device
        this.keys = [];
        this.requiredKeys = [];
        this.params = {};
    }
    static info() {
        return { name: 'MINEW_S1' };
    }
    /**
     * Verify that the received peripheral is from the MINEW_S1
     *
     * 受け取ったPeripheralがMINEW_S1のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @param macAddress (optional: If you want to specify a MAC address) MAC address
     *
     * (任意: MACアドレスを指定したい場合) MACアドレス
     *
     * @returns Whether it is the MINEW_S1
     *
     * MINEW_S1かどうか
     *
     * true: HT Sensor SLOT / Info SLOT
     *
     * false: iBeacon SLOT / UID SLOT / URL SLOT / TLM SLOT / other advertisements
     */
    static isDevice(peripheral, macAddress = null) {
        if (!this._hasPrefix(peripheral)) {
            return false;
        }
        if (macAddress) {
            const data = this.getInfoData(peripheral) || this.getHTData(peripheral);
            if (data && data.macAddress === macAddress) {
                return true;
            }
            return false;
        }
        return true;
    }
    /**
     * Get device information data from the MINEW_S1
     *
     * MINEW_S1からのデバイス情報データを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received device information data from the MINEW_S1
     *
     * MINEW_S1から受け取ったデバイス情報データ
     */
    static getInfoData(peripheral) {
        if (!this._hasPrefix(peripheral)) {
            return null;
        }
        if (!peripheral.adv_data || peripheral.adv_data.length < 20) {
            return null;
        }
        const frameType = peripheral.adv_data[11];
        const versionNumber = peripheral.adv_data[12];
        if (frameType !== 0xa1 || versionNumber !== 0x08) {
            return null;
        }
        const batteryLevel = peripheral.adv_data[13];
        const macAddress = peripheral.adv_data
            .slice(14, 20)
            .map((e) => ('0' + e.toString(16)).slice(-2))
            .join('')
            .match(/.{1,2}/g)
            .reverse()
            .join('');
        const name = util_1.default.dataArray2string(peripheral.adv_data.slice(20));
        return {
            frameType,
            versionNumber,
            batteryLevel,
            name,
            macAddress,
        };
    }
    /**
     * Get temperature and humidity data from the MINEW_S1
     *
     * MINEW_S1からの温湿度データを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received temperature and humidity data from the MINEW_S1
     *
     * MINEW_S1から受け取った温湿度データ
     */
    static getHTData(peripheral) {
        if (!this._hasPrefix(peripheral)) {
            return null;
        }
        if (!peripheral.adv_data || peripheral.adv_data.length !== 24) {
            return null;
        }
        const frameType = peripheral.adv_data[11];
        const versionNumber = peripheral.adv_data[12];
        if (frameType !== 0xa1 || versionNumber !== 0x01) {
            return null;
        }
        const batteryLevel = peripheral.adv_data[13];
        const temperatureH = peripheral.adv_data[14];
        const temperatureL = peripheral.adv_data[15];
        const temperature = temperatureH + (temperatureL * 1) / (1 << 8);
        const humidityH = peripheral.adv_data[16];
        const humidityL = peripheral.adv_data[17];
        const humidity = humidityH + (humidityL * 1) / (1 << 8);
        const macAddress = peripheral.adv_data
            .splice(18)
            .map((e) => ('0' + e.toString(16)).slice(-2))
            .join('')
            .match(/.{1,2}/g)
            .reverse()
            .join('');
        return {
            frameType,
            versionNumber,
            batteryLevel,
            temperature,
            humidity,
            macAddress,
        };
    }
    static _hasPrefix(peripheral) {
        if (!peripheral.adv_data || peripheral.adv_data.length < 10) {
            return false;
        }
        const target = [
            // flag
            0x02,
            0x01,
            0x06,
            // 16bit uuid
            0x03,
            0x03,
            0xe1,
            0xff,
            // service data
            -1,
            0x16,
            0xe1,
            0xff,
        ];
        for (const index in target) {
            if (target[index] >= 0 && target[index] !== peripheral.adv_data[index]) {
                return false;
            }
        }
        return true;
    }
    wired(obniz) {
        // do nothing.
    }
}
exports.default = MINEW_S1;


/***/ }),

/***/ "./dist/src/parts/Ble/MT_500BT/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.MT_500BT
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __importDefault(__webpack_require__("./node_modules/eventemitter3/index.js"));
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
/** MT_500BT management class MT_500BTを管理するクラス */
class MT_500BT {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        this._uuids = {
            MSDPService: '1ef19620a8034af0ae954b4b0aa26f29',
            rxChar: '1ef19621a8034af0ae954b4b0aa26f29',
            txChar: '1ef19622a8034af0ae954b4b0aa26f29',
        };
        if (peripheral && !MT_500BT.isDevice(peripheral)) {
            throw new Error('peripheral is not MT_500BT');
        }
        this._peripheral = peripheral;
        this._emitter = new eventemitter3_1.default();
    }
    static info() {
        return {
            name: 'MT_500BT',
        };
    }
    /**
     * Verify that the received peripheral is from the MT_500BT
     *
     * 受け取ったPeripheralがMT_500BTのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the MT_500BT
     *
     * MT_500BTかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName && peripheral.localName.startsWith('MT-500')) {
            return true;
        }
        return false;
    }
    /**
     * Get IFUID from the localName
     *
     * localNameからIFUIDを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns IFUID
     */
    static getIFUID(peripheral) {
        if (!this.isDevice(peripheral) || peripheral.localName.length < 12) {
            return null;
        }
        const hexStr = peripheral.localName.slice(7, 11);
        return Buffer.from(hexStr, 'hex').readUInt16BE(0);
    }
    /**
     * Decrypt CNKEY from IFUID
     *
     * IFUIDからCNKEYを復号
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns decrypted CNKEY 復号されたされたCNKEY
     */
    static getCNKey(peripheral) {
        const ifuid = this.getIFUID(peripheral);
        if (ifuid === null) {
            return null;
        }
        const cnkey = (((ifuid ^ 0xb452) << 3) & 0xffff) | ((ifuid ^ 0xb452) >> (16 - 3));
        return cnkey;
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect (and authenticate) the sensor
     *
     * センサへ接続(+ センサの認証)
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('MT-500BT is not find.');
        }
        this._peripheral.ondisconnect = (reason) => {
            // console.log("disconnect");
            if (this.ondisconnect) {
                this.ondisconnect(reason);
            }
        };
        // console.log("connecting");
        await this._peripheral.connectWait();
        try {
            // console.log("connected");
            this.MSDPService = this._peripheral.getService(this._uuids.MSDPService);
            this.MSDPRxChar = this.MSDPService.getCharacteristic(this._uuids.rxChar);
            this.MSDPTxChar = this.MSDPService.getCharacteristic(this._uuids.txChar);
            // console.log("char set");
            await this.MSDPRxChar.registerNotifyWait((data) => {
                // console.log("recv array", data);
                if (data.length !== 20) {
                    throw new Error('unknown format received');
                }
                if (data[0] !== 0xe7) {
                    throw new Error('unknown header');
                }
                const calcedChecksum = this._checksum(data.slice(0, 19));
                if (data[19] !== calcedChecksum) {
                    throw new Error('checksum failed');
                }
                const replyBuf = Buffer.from(data);
                this._emitter.emit('' + replyBuf.readUInt8(1), replyBuf);
            });
            // console.log("registerNotifyWait");
            await this.startCommunicationCommandWait();
        }
        catch (e) {
            await this.disconnectWait();
        }
    }
    /**
     * Send the communication start command
     *
     * 通信開始コマンドを送信
     */
    async startCommunicationCommandWait() {
        const cnkey = '' + MT_500BT.getCNKey(this._peripheral); // to string
        const CNKeyBuf = Buffer.from(cnkey, 'utf8');
        const startCommand = this._createCommand(0xfd, Array.from(CNKeyBuf));
        // console.log("sendDataReplyWait");
        const res = await this._sendDataReplyWait(startCommand);
        if (res.readUInt8(2) !== 0) {
            throw new Error('StartCommunicationError ' + res.readUInt8(2));
        }
    }
    /**
     * Get device information from the MT_500BT
     *
     * MT_500BTからのデバイス情報データ取得
     *
     * @returns received device information data from the MT_500BT
     *
     * MT_500BTからのデバイス情報データ
     *
     * ```
     * {
     *
     * cls: device type デバイスタイプ
     *
     * ('Pulse rate meter', 'SpO2(BO)', 'Thermometer', 'SpO2(MP)', 'Blood pressure meter'),
     *
     * dvnm: product information 製品情報,
     *
     * swif: detailed information 詳細情報
     *
     * }
     * ```
     */
    async getDeviceInformationWait() {
        const res1 = await this._sendDataReplyWait(this._createCommand(0x00, [0x01]));
        const res2 = await this._sendDataReplyWait(this._createCommand(0x00, [0x02]));
        const deviceType = {
            2: 'Pulse rate meter',
            3: 'SpO2(BO)',
            4: 'Thermometer',
            5: 'SpO2(MP)',
            6: 'Blood pressure meter',
        };
        return {
            cls: deviceType[res1.readUInt8(3)],
            dvnm: util_1.default.dataArray2string(Array.from(res1.slice(4, -1))),
            swif: util_1.default.dataArray2string(Array.from(res2.slice(3, -1))),
        };
    }
    // device always throw error
    // public async getDatetimeWait(): Promise<any> {
    //   const res = await this._sendDataReplyWait(this._createCommand(0x01, [0x00]));
    //   const year = res.readUInt8(3) !== 0xff ? res.readUInt8(3) : undefined;
    //   const month = res.readUInt8(4) !== 0xff ? res.readUInt8(4) : undefined;
    //   const day = res.readUInt8(5) !== 0xff ? res.readUInt8(5) : undefined;
    //   const hour = res.readUInt8(6) !== 0xff ? res.readUInt8(6) : undefined;
    //   const minute = res.readUInt8(7) !== 0xff ? res.readUInt8(7) : undefined;
    //   const second = res.readUInt8(8) !== 0xff ? res.readUInt8(8) : undefined;
    //   return {
    //     year,
    //     month,
    //     day,
    //     hour,
    //     minute,
    //     second,
    //   };
    // }
    //
    // device always throw error
    // public async setDatetimeWait(timeOffsetMinute: number): Promise<any> {
    //   const date = new Date();
    //   date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);
    //
    //   const res = await this._sendDataReplyWait(
    //     this._createCommand(0x01, [
    //       0x01, // write
    //       date.getUTCFullYear() - 2000,
    //       date.getUTCMonth() + 1,
    //       date.getUTCDate(),
    //       date.getUTCHours(),
    //       date.getUTCMinutes(),
    //       date.getUTCSeconds(),
    //     ]),
    //   );
    //   if (res.readUInt8(3) !== 0) {
    //     throw new Error("setDatetimeWait error " + res.readUInt8(3));
    //   }
    // }
    /**
     * Get temperature and humidity data from the MT_500BT
     *
     * MT_500BTから温湿度データを取得
     *
     * @returns received temperature and humidity data from the MT_500BT
     *
     * MT_500BTからの温湿度データ
     *
     * ```
     * {
     *
     * timestamp: timestamp タイムスタンプ,
     *
     * temperature: {
     *
     *   body: body temperature 体温,
     *
     *   material: material temperature 物体温度,
     *
     *   air: air temperature 気温
     *
     *   }
     *
     * }
     * ```
     */
    async getTemperatureWait() {
        const res = await this._sendDataReplyWait(this._createCommand(0x80));
        const year = res.readUInt8(3) !== 0xff ? res.readUInt8(3) + 2000 : undefined;
        const month = res.readUInt8(4) !== 0xff ? res.readUInt8(4) : undefined;
        const day = res.readUInt8(5) !== 0xff ? res.readUInt8(5) : undefined;
        const hour = res.readUInt8(6) !== 0xff ? res.readUInt8(6) : undefined;
        const minute = res.readUInt8(7) !== 0xff ? res.readUInt8(7) : undefined;
        const second = res.readUInt8(8) !== 0xff ? res.readUInt8(8) : undefined;
        const bodyTemperature = res.readUInt16LE(9) !== 0xff7f ? res.readUInt16LE(9) / 10 : undefined;
        const materialTemperature = res.readUInt16LE(11) !== 0xff7f ? res.readUInt16LE(11) / 10 : undefined;
        const airTemperature = res.readUInt16LE(13) !== 0xff7f ? res.readUInt16LE(13) / 10 : undefined;
        return {
            timestamp: {
                year,
                month,
                day,
                hour,
                minute,
                second,
            },
            temperature: {
                body: bodyTemperature,
                material: materialTemperature,
                air: airTemperature,
            },
        };
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        if (!this._peripheral) {
            throw new Error('MT-500BT is not find.');
        }
        if (this._peripheral.connected) {
            await this._peripheral.disconnectWait();
        }
    }
    _createCommand(cid, data = []) {
        if (data.length >= 18) {
            throw new Error('too many data length');
        }
        const command = [0xe7, cid, ...data];
        for (let i = 0; i < 19; i++) {
            if (command[i] === undefined) {
                command[i] = 0xff; // N/A
            }
        }
        command.push(this._checksum(command));
        return Buffer.from(command);
    }
    _checksum(data) {
        if (data.length !== 19) {
            throw Error('unknown format');
        }
        const sum = data.reduce((a, b) => a + b, 0);
        const inv = (0xa5 + sum) & 0xff;
        const result = (inv ^ 0xff) + 1;
        return result;
    }
    _sendDataReplyWait(sendData) {
        return new Promise((resolve, reject) => {
            if (!this.MSDPRxChar) {
                reject(new Error('MSDPRxChar is not found'));
                return;
            }
            if (!this.MSDPTxChar) {
                reject(new Error('MSDPTxChar is not found'));
                return;
            }
            // console.log("write array", Array.from(sendData));
            this._emitter.once('' + sendData.readUInt8(1), resolve);
            this.MSDPTxChar.writeWait(Array.from(sendData));
        });
    }
}
exports.default = MT_500BT;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/MiniBreeze/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.MiniBreeze
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** MiniBreeze management class MiniBreezeを管理するクラス */
class MiniBreeze {
    constructor() {
        this._peripheral = null;
        // non-wired device
        this.keys = [];
        this.requiredKeys = [];
        this.params = {};
    }
    static info() {
        return { name: 'MiniBreeze' };
    }
    /**
     * @returns object of gas types list ガスタイプの一覧のオブジェクト
     */
    static gasType() {
        return {
            0: 'none',
            1: 'HCHO',
            2: 'CO',
            3: 'CO2',
            5: 'Rn',
            6: 'PM1.0',
            7: 'PM2.5',
            8: 'PM10',
        };
    }
    /**
     * @returns object of battery status list バッテリーの状態の一覧のオブジェクト
     */
    static status() {
        return {
            0: 'BatteryEmpty',
            1: 'BatteryLow',
            2: 'BatteryNormal',
            3: 'BatteryCharging',
        };
    }
    /**
     * Verify that the received peripheral is from the MiniBreeze
     *
     * 受け取ったPeripheralがMiniBreezeのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the MiniBreeze
     *
     * MiniBreezeかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.adv_data.length !== 31 || !this._hasPrefix(peripheral)) {
            return false;
        }
        return true;
    }
    /**
     * Get a data from the MiniBreeze
     *
     * MiniBreezeからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the MiniBreeze
     *
     * MiniBreezeから受け取ったデータ
     */
    static getData(peripheral) {
        if (!this._hasPrefix(peripheral)) {
            return null;
        }
        if (!peripheral.adv_data ||
            peripheral.adv_data.length !== 31 ||
            !peripheral.localName) {
            return null;
        }
        const buf = Buffer.from(peripheral.adv_data.splice(7));
        const gasType = MiniBreeze.gasType()[buf.readUInt8(0)] || 'unknown';
        const sensVal = buf.readUInt16LE(1);
        const temperature = buf.readUInt8(3);
        const humidity = buf.readUInt8(4);
        const version = buf.readUInt8(5) + '.' + buf.readUInt8(6) + '.' + buf.readUInt8(7);
        const status = MiniBreeze.status()[buf.readUInt8(9)] || 'Invalid';
        return {
            gasType,
            sensVal,
            temperature,
            humidity,
            version,
            status,
            devName: peripheral.localName,
        };
    }
    static _hasPrefix(peripheral) {
        if (!peripheral.adv_data || peripheral.adv_data.length < 10) {
            return false;
        }
        const target = [
            // flag
            0x02,
            0x01,
            0x06,
            // ManufactureData
            0x0d,
            0xff,
            0xff,
            0x02,
        ];
        for (const index in target) {
            if (target[index] >= 0 && target[index] !== peripheral.adv_data[index]) {
                return false;
            }
        }
        return true;
    }
    wired(obniz) {
        // do nothing.
    }
}
exports.default = MiniBreeze;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/PLS_01BT/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.PLS_01BT
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** PLS_01BT management class PLS_01BTを管理するクラス */
class PLS_01BT {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        /**
         * Callback when receiving the measured data
         *
         * 計測結果を受け取ったときにコールバック
         */
        this.onmeasured = null;
        this._uuids = {
            service: 'CDEACB80-5235-4C07-8846-93A37EE6B86D',
            rxChar: 'CDEACB81-5235-4C07-8846-93A37EE6B86D',
        };
        this._peripheral = null;
        this._rxCharacteristic = null;
        this._txCharacteristic = null;
        if (peripheral && !PLS_01BT.isDevice(peripheral)) {
            throw new Error('peripheral is not PLS_01BT');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'PLS_01BT',
        };
    }
    /**
     * Verify that the received peripheral is from the PLS_01BT
     *
     * 受け取ったPeripheralがPLS_01BTのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the PLS_01BT
     *
     * PLS_01BTかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName &&
            peripheral.localName.startsWith('My Oximeter')) {
            return true;
        }
        return false;
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect the sensor
     *
     * センサへ接続
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('PLS_01BT is not find.');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (this.ondisconnect) {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        this._rxCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.rxChar);
        if (!this._rxCharacteristic) {
            throw new Error('device is not PLS_01BT');
        }
        await this._rxCharacteristic.registerNotifyWait((data) => {
            if (data.length === 4 && data[0] === 0x81) {
                if (data[1] !== 255 && data[2] !== 177) {
                    const pulseRate = data[1];
                    const bloodOxygenLevel = data[2];
                    const perfusionIndex = data[3];
                    if (this.onmeasured) {
                        this.onmeasured({
                            pulseRate,
                            bloodOxygenLevel,
                            perfusionIndex,
                        });
                    }
                }
            }
        });
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        if (!this._peripheral) {
            throw new Error('PLS_01BT is not find.');
        }
        await this._peripheral.disconnectWait();
    }
}
exports.default = PLS_01BT;


/***/ }),

/***/ "./dist/src/parts/Ble/REX_BTPM25V/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.REX_BTPM25V
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** REX_BTPM25V management class REX_BTPM25Vを管理するクラス */
class REX_BTPM25V {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        /**
         * Callback when the button is pressed
         *
         * ボタンが押されたときにコールバック
         */
        this.onbuttonpressed = null;
        this._peripheral = null;
        this._uuids = {
            service: '00001523-1212-EFDE-1523-785FEABCD123',
            buttonChar: '000000A1-1212-EFDE-1523-785FEABCD123',
            continuousMeasurementChar: '000000A5-1212-EFDE-1523-785FEABCD123',
            oneShotMeasurementChar: '000000A8-1212-EFDE-1523-785FEABCD123',
            ledChar: '000000A9-1212-EFDE-1523-785FEABCD123',
        };
        this._oneShotMeasurementCharacteristic = null;
        this._continuousMeasurementCharacteristic = null;
        this._ledCharacteristic = null;
        this._buttonCharacteristic = null;
        if (peripheral && !REX_BTPM25V.isDevice(peripheral)) {
            throw new Error('peripheral is not REX_BTPM25V');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'REX_BTPM25V',
        };
    }
    /**
     * Verify that the received peripheral is from the REX_BTPM25V
     *
     * 受け取ったPeripheralがREX_BTPM25Vのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the REX_BTPM25V
     *
     * REX_BTPM25Vかどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName !== 'PM25V') {
            return false;
        }
        return true;
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect the sensor
     *
     * センサへ接続
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('REX_BTPM25V is not find.');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        this._oneShotMeasurementCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.oneShotMeasurementChar);
        this._continuousMeasurementCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.continuousMeasurementChar);
        this._ledCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.ledChar);
        this._buttonCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.buttonChar);
        if (this._buttonCharacteristic) {
            this._buttonCharacteristic.registerNotify((data) => {
                if (typeof this.onbuttonpressed === 'function') {
                    this.onbuttonpressed(data[0] === 1);
                }
            });
        }
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        var _a;
        await ((_a = this._peripheral) === null || _a === void 0 ? void 0 : _a.disconnectWait());
    }
    /**
     * Do one shot measurement
     *
     * ワンショット計測
     *
     * @returns one shot measurement data ワンショット計測データ
     *
     * ```
     * {
     *
     * pm2_5: PM2.5 concentration PM2.5濃度 (25~1000 [ug/m3]),
     *
     * pm10: PM10 concentration M10濃度 (25~1000 [ug/m3]),
     *
     * barometricPressure: barometric pressure 気圧 (300~1100 [hPa]),
     *
     * temperature: temperature 温度 (-20~85 [degC]),
     *
     * humidity: relative humidity 湿度 (10~70 [%RH]),
     *
     * lux: illuminance 照度 (0~65535 [lx]),
     *
     * mode: mode flag モードフラグ (0: 連続計測, 1: 最新計測データ, 3: ワンショット)
     *
     * }
     * ```
     *
     */
    async measureOneShotWait() {
        if (!this._oneShotMeasurementCharacteristic) {
            throw new Error('device is not connected');
        }
        const sendData = new Array(20);
        sendData[0] = 0x01;
        const data = await this._sendAndReceiveWait(this._oneShotMeasurementCharacteristic, sendData);
        return this._analyzeResult(data);
    }
    /**
     * Do extended one shot measurement
     *
     * 拡張ワンショット計測
     *
     * @returns one extended shot measurement data 拡張ワンショット計測データ
     *
     * ```
     * {
     *
     * pm2_5: PM2.5 concentration PM2.5濃度 (25~1000 [ug/m3]),
     *
     * pm10: PM10 concentration M10濃度 (25~1000 [ug/m3]),
     *
     * barometricPressure: barometric pressure 気圧 (300.0~1100.0 [hPa]),
     *
     * temperature: temperature 温度 (-20.0~85.0 [degC]),
     *
     * humidity: relative humidity 湿度 (0.0~100.0 [%RH]),
     *
     * lux: illuminance 照度 (0~65534 [lx]),
     *
     * tvoc: TVOC (Total Volatile Organic Compounds) (0~1187 [ppb])
     *
     * eco2: eCO2 (equivalent CO2) 等価CO2濃度 (400~8190 [ppm])
     *
     * uv: UV Index (0~11)
     *
     * }
     * ```
     */
    async measureOneShotExtWait() {
        if (!this._oneShotMeasurementCharacteristic) {
            throw new Error('device is not connected');
        }
        const sendData = new Array(20);
        sendData[0] = 0x10;
        const data = await this._sendAndReceiveWait(this._oneShotMeasurementCharacteristic, sendData);
        return this._analyzeResultExt(data);
    }
    /**
     * @deprecated Please use {@linkplain getLedModeWait}
     *
     * {@linkplain getLedModeWait} の使用を推奨
     *
     * @returns
     */
    getLedMode() {
        return this.getLedModeWait();
    }
    /**
     * Get LED mode LEDモードの取得
     *
     * @returns current LED mode 現在のLEDモード
     *
     * 0: off 消灯
     *
     * 1: PM2.5 mode PM2.5モード
     *
     * 2: PM10 mode PM10モード
     *
     * 3: VOC mode VOCモード
     *
     * 4: UV mode UVモード
     *
     * 5: temperature mode 温度モード
     *
     * 6: humidity mode 湿度モード
     *
     * 128: power LED 電源LED
     */
    async getLedModeWait() {
        if (!this._ledCharacteristic) {
            throw new Error('device is not connected');
        }
        const data = this._sendAndReceiveWait(this._ledCharacteristic, [
            0xff,
            0x00,
        ]);
    }
    _sendAndReceiveWait(char, data) {
        return new Promise((resolve) => {
            char.registerNotifyWait(resolve).then(() => {
                return char.writeWait(data);
            });
        });
    }
    _analyzeResult(data) {
        const buf = Buffer.from(data);
        const [minutes, hour, day, month, year] = buf.slice(0, 5);
        const pm2_5 = buf.readInt16LE(5);
        const pm10 = buf.readInt16LE(7);
        const barometricPressure = buf.readInt16LE(9);
        const temperature = buf.readInt8(11);
        const humidity = buf.readInt8(12);
        const lux = buf.readUInt16LE(13);
        const dummy = buf.slice(15, 19);
        const mode = buf.readInt8(19);
        return {
            // minutes,
            // hour,
            // day,
            // month,
            // year,
            pm2_5,
            pm10,
            barometricPressure,
            temperature,
            humidity,
            lux,
            mode,
        };
    }
    _bitValue(buffer, location) {
        const startLoc = {
            byte: Math.floor(location.start / 8),
            bit: location.start % 8,
        };
        const endLoc = {
            byte: Math.floor(location.end / 8),
            bit: location.end % 8,
        };
        let result = 0;
        result =
            buffer.readUInt8(endLoc.byte) & (~(0xff << (endLoc.bit + 1)) & 0xff);
        if (startLoc.byte === endLoc.byte) {
            return result >> startLoc.bit;
        }
        for (let byte = endLoc.byte - 1; byte > startLoc.byte; byte--) {
            result = result << (8 + buffer.readInt8(byte));
        }
        result =
            (result << (8 - startLoc.bit)) +
                (buffer.readUInt8(startLoc.byte) >> startLoc.bit);
        return result;
    }
    _analyzeResultExt(data) {
        const buf = Buffer.from(data);
        const buf1 = buf.slice(0, 4);
        const minutes = this._bitValue(buf1, { start: 5, end: 10 });
        const hour = this._bitValue(buf1, { start: 11, end: 15 });
        const day = this._bitValue(buf1, { start: 16, end: 20 });
        const month = this._bitValue(buf1, { start: 21, end: 24 });
        const year = this._bitValue(buf1, { start: 25, end: 31 });
        const buf2 = buf.slice(4, 8);
        const pm2_5 = this._bitValue(buf2, { start: 0, end: 9 });
        const pm10 = this._bitValue(buf2, { start: 10, end: 19 });
        const uv = this._bitValue(buf2, { start: 20, end: 23 });
        const buf3 = buf.slice(8, 12);
        const temperature = this._bitValue(buf3, { start: 0, end: 10 }) / 10 - 40;
        const humidity = this._bitValue(buf3, { start: 11, end: 20 }) / 10;
        const buf4 = buf.slice(12, 16);
        const barometricPressure = this._bitValue(buf4, { start: 0, end: 13 }) / 10;
        const vocState_init = this._bitValue(buf4, { start: 14, end: 14 });
        const vocState_wakeup = this._bitValue(buf4, { start: 15, end: 15 });
        const lux = this._bitValue(buf4, { start: 16, end: 31 });
        const buf5 = buf.slice(16, 20);
        const tvoc = this._bitValue(buf5, { start: 0, end: 10 });
        const eco2 = this._bitValue(buf5, { start: 11, end: 23 });
        const mode = this._bitValue(buf5, { start: 24, end: 31 });
        return {
            // minutes,
            // hour,
            // day,
            // month,
            // year,
            pm2_5,
            pm10,
            barometricPressure,
            temperature,
            humidity,
            lux,
            // mode,
            tvoc,
            eco2,
            uv,
        };
    }
}
exports.default = REX_BTPM25V;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/RS_BTEVS1/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.RS_BTEVS1
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const LED_DISPLAY_MODE = ['Disable', 'PM2.5', 'CO2'];
const PM2_5_CONCENTRATION_MODE = ['Mass', 'Number'];
/** RS_BTEVS1 management class RS_BTEVS1を管理するクラス */
class RS_BTEVS1 extends ObnizPartsBleAbstract_1.ObnizPartsBleConnectable {
    constructor() {
        super(...arguments);
        this.staticClass = RS_BTEVS1;
        /** Event handler for button ボタンのイベントハンドラー */
        this.onButtonPressed = null;
        /** Event handler for temperature sensor 温度センサーのイベントハンドラー */
        this.onTempMeasured = null;
        /** Event handler for co2 sensor CO2センサーのイベントハンドラー */
        this.onCo2Measured = null;
        /** Event handler for PM2.5 sensor PM2.5センサーのイベントハンドラー */
        this.onPm2_5Measured = null;
        this.serviceUuid = 'F9CC15234E0A49E58CF30007E819EA1E';
        this.firmwareRevision = '';
    }
    /**
     * Connect to the services of a device
     *
     * デバイスのサービスに接続
     */
    async connectWait() {
        await super.connectWait();
        this.firmwareRevision = Buffer.from(await this.readCharWait('180A', '2A26')).toString();
    }
    async getDataWait() {
        if (this.firmwareRevision.startsWith('Ver.1.0')) {
            throw new Error('This operation is not supported.');
        }
        this.checkConnected();
        const data = await this.readCharWait(this.serviceUuid, this.getCharUuid(0x152a));
        const buf = Buffer.from(data);
        return {
            temp: ObnizPartsBleAbstract_1.uint(data.slice(0, 2)) * 0.1,
            humid: data[2],
            co2: ObnizPartsBleAbstract_1.uint(data.slice(3, 5)),
            pm1_0: buf.readFloatLE(5),
            pm2_5: buf.readFloatLE(9),
            pm4_0: buf.readFloatLE(13),
            pm10_0: buf.readFloatLE(17),
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore for compatibility
            pm5_0: buf.readFloatLE(13),
        };
    }
    async beforeOnDisconnectWait() {
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1524));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1525));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1526));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1527));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1528));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x1529));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x152a));
        // await this.unsubscribeWait(this.serviceUuid, this.getCharUuid(0x152b));
    }
    /**
     * Get device settings デバイスの設定を取得
     *
     * @returns Instance of RS_BTEVS1_Config RS_BTEVS1_Configのインスタンス
     */
    async getConfigWait() {
        this.checkConnected();
        const data = await this.readCharWait(this.serviceUuid, this.getCharUuid(0x1525));
        const buf = Buffer.from(data);
        const measureOperation = buf.readInt8(12);
        return {
            tempInterval: buf.readUInt32LE(0),
            pm2_5Interval: buf.readUInt32LE(4),
            co2Interval: buf.readUInt32LE(8),
            tempMeasureOperation: (measureOperation & 0b100) > 0,
            pm2_5MeasureOperation: (measureOperation & 0b010) > 0,
            co2MeasureOperation: (measureOperation & 0b000) > 0,
            ledDisplay: LED_DISPLAY_MODE[buf.readInt8(13)],
            advertisementBeacon: buf.readInt8(14) === 1,
            pm2_5ConcentrationMode: PM2_5_CONCENTRATION_MODE[buf.readInt8(15)],
        };
    }
    /**
     * Write device settings, blanks write initial values
     *
     * デバイス設定の書き込み、空欄は初期値を書き込み
     *
     * @param config Instance of RS_BTEVS1_Config RS_BTEVS1_Configのインスタンス
     * @returns Write result 書き込み結果
     */
    async setConfigWait(config) {
        var _a, _b, _c;
        await this.checkConnected();
        const buf = Buffer.alloc(16);
        buf.writeUInt32LE((_a = config.tempInterval, (_a !== null && _a !== void 0 ? _a : 10000)), 0);
        buf.writeUInt32LE((_b = config.pm2_5Interval, (_b !== null && _b !== void 0 ? _b : 10000)), 4);
        buf.writeUInt32LE((_c = config.co2Interval, (_c !== null && _c !== void 0 ? _c : 10000)), 8);
        buf.writeUInt8((config.co2MeasureOperation ? 0b001 : 0) +
            (config.pm2_5MeasureOperation ? 0b010 : 0) +
            (config.tempMeasureOperation ? 0b100 : 0), 12);
        buf.writeUInt8(LED_DISPLAY_MODE.indexOf(config.ledDisplay && LED_DISPLAY_MODE.indexOf(config.ledDisplay) >= 0
            ? config.ledDisplay
            : 'Disable'), 13);
        buf.writeUInt8(config.advertisementBeacon ? 1 : 0, 14);
        buf.writeUInt8(this.firmwareRevision.startsWith('Ver.1.0')
            ? PM2_5_CONCENTRATION_MODE.indexOf(config.pm2_5ConcentrationMode &&
                PM2_5_CONCENTRATION_MODE.indexOf(config.pm2_5ConcentrationMode) >=
                    0
                ? config.pm2_5ConcentrationMode
                : 'Number')
            : 0, 15);
        return await this.writeCharWait(this.serviceUuid, this.getCharUuid(0x1525), Array.from(buf));
    }
    /**
     * Change pairing LED flashing status
     *
     * ペアリングLEDの点滅状態の変更
     *
     * @param blink Whether it blinks 点滅するかどうか
     * @returns Write result 書き込み結果
     */
    async setModeLEDWait(blink) {
        await this.checkConnected();
        return await this.writeCharWait(this.serviceUuid, this.getCharUuid(0x1529), [blink ? 1 : 0]);
    }
    /**
     * Start reading the button state
     *
     * ボタンの状態読み取りを開始
     */
    async buttonChangeStartWait() {
        this.checkConnected();
        await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x1524), (data) => {
            if (typeof this.onButtonPressed !== 'function')
                return;
            this.onButtonPressed(data[0] === 1);
        });
    }
    /**
     * @deprecated
     *
     * Start reading the temperature sensor
     *
     * 温度センサーの読み取りを開始
     */
    async tempMeasureStartWait() {
        this.checkConnected();
        await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x1526), (data) => {
            if (typeof this.onTempMeasured !== 'function')
                return;
            this.onTempMeasured(ObnizPartsBleAbstract_1.int(data.slice(0, 2)), data[2]);
        });
    }
    /**
     * @deprecated
     *
     * Start reading the co2 sensor
     *
     * CO2センサーの読み取りを開始
     */
    async co2MeasureStartWait() {
        this.checkConnected();
        await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x1527), (data) => {
            if (typeof this.onCo2Measured !== 'function')
                return;
            this.onCo2Measured(ObnizPartsBleAbstract_1.uint(data));
        });
    }
    /**
     * @deprecated
     *
     * Start reading the PM2.5 sensor
     *
     * PM2.5センサーの読み取りを開始
     */
    async pm2_5MeasureStartWait() {
        this.checkConnected();
        await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x1528), (data) => {
            if (typeof this.onPm2_5Measured !== 'function')
                return;
            const buf = Buffer.from(data);
            this.onPm2_5Measured({
                mass_pm1: buf.readFloatLE(0),
                mass_pm2_5: buf.readFloatLE(4),
                mass_pm4: buf.readFloatLE(8),
                mass_pm10: buf.readFloatLE(12),
                number_pm0_5: buf.readFloatLE(16),
            });
        });
    }
    getCharUuid(code) {
        return `${this.serviceUuid.slice(0, 4)}${code.toString(16)}${this.serviceUuid.slice(8)}`;
    }
}
exports.default = RS_BTEVS1;
RS_BTEVS1.AvailableBleMode = ['Connectable', 'Beacon'];
RS_BTEVS1.PartsName = 'RS_BTEVS1';
/**
 * BTEVS-1234: ~1.0.2
 * EVS-1234: 1.1.2~
 */
RS_BTEVS1.LocalName = /^(BT)?EVS-[0-9A-F]{4}/;
// public static readonly BeaconDataLength: ObnizPartsBleCompare<
//   number | null
// > = 0x0c;
RS_BTEVS1.CompanyID = [
    0x00,
    0xff,
];
RS_BTEVS1.BeaconDataStruct = {
    co2: {
        index: 0,
        length: 2,
        type: 'unsignedNumLE',
    },
    pm1_0: {
        index: 2,
        type: 'unsignedNumLE',
    },
    pm2_5: {
        index: 3,
        type: 'unsignedNumLE',
    },
    pm4_0: {
        index: 4,
        type: 'unsignedNumLE',
    },
    pm5_0: {
        // for compatibility
        index: 4,
        type: 'unsignedNumLE',
    },
    pm10_0: {
        index: 5,
        type: 'unsignedNumLE',
    },
    temp: {
        index: 6,
        length: 2,
        type: 'custom',
        multiple: 0.1,
        func: (data, p) => {
            var _a, _b, _c;
            return (_b = (_a = p.manufacturerSpecificData) === null || _a === void 0 ? void 0 : _a.length, (_b !== null && _b !== void 0 ? _b : 0)) + 1 === 0x0b &&
                (_c = p.localName, (_c !== null && _c !== void 0 ? _c : '')).startsWith('BT')
                ? data[0]
                : ObnizPartsBleAbstract_1.int(data) * 0.1;
        },
    },
    humid: {
        index: 7,
        length: 2,
        type: 'custom',
        func: (data, p) => {
            var _a, _b, _c;
            return (_b = (_a = p.manufacturerSpecificData) === null || _a === void 0 ? void 0 : _a.length, (_b !== null && _b !== void 0 ? _b : 0)) + 1 === 0x0b &&
                (_c = p.localName, (_c !== null && _c !== void 0 ? _c : '')).startsWith('BT')
                ? data[0]
                : data[1];
        },
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/RS_BTIREX2/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.RS_BTIREX2
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
// not working
/** 【NOT WORKING】 RS_BTIREX2 management class RS_BTIREX2を管理するクラス */
class RS_BTIREX2 {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        /**
         * Callback when the button is pressed
         *
         * ボタンが押されたときにコールバック
         */
        this.onbuttonpressed = null;
        this._uuids = {
            service: '6e400001-b5a3-f393-e0a9-e50e24dcca9e',
            rxChar: '6e400002-b5a3-f393-e0a9-e50e24dcca9e',
            txChar: '6e400003-b5a3-f393-e0a9-e50e24dcca9e',
        };
        this._peripheral = null;
        this._rxCharacteristic = null;
        this._txCharacteristic = null;
        if (peripheral && !RS_BTIREX2.isDevice(peripheral)) {
            throw new Error('peripheral is not RS_BTIREX2');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'RS_BTIREX2',
        };
    }
    /**
     * Verify that the received peripheral is from the RS_BTIREX2
     *
     * 受け取ったPeripheralがRS_BTIREX2のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the RS_BTIREX2
     *
     * RS_BTIREX2かどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName && peripheral.localName.startsWith('BTIR')) {
            return true;
        }
        return false;
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect the sensor
     *
     * センサへ接続
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('RS_BTIREX2 is not find.');
        }
        this._peripheral.ondisconnect = () => {
            console.log('disconnect');
        };
        await this._peripheral.connectWait();
        console.error('encrypt start');
        // const handle = this._peripheral.obnizBle.centralBindings._handles[this._peripheral.address];
        // this._peripheral.obnizBle.centralBindings._aclStreams[handle].encrypt();
        this._rxCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.rxChar);
        this._txCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.txChar);
    }
    /**
     * Make and send a command
     *
     * コマンドの作成と送信
     *
     * @param payload payload ペイロード
     *
     * @param crc CRC of the payload ペイロードのCRC
     *
     * @returns
     */
    _sendAndReceiveWait(payload, crc = 0xb6) {
        if (!this._rxCharacteristic || !this._txCharacteristic) {
            throw new Error('device is not connected');
        }
        const data = new Array(payload.length + 4);
        data[0] = 0xaa;
        data[1] = 0;
        data[2] = payload.length;
        for (let index = 0; index < payload.length; index++) {
            data[3 + index] = payload[index];
        }
        data[payload.length + 3] = crc;
        const tx = this._txCharacteristic;
        const p = new Promise((resolve) => {
            tx.registerNotify((resultData) => {
                console.error('CRC ' + crc);
                resolve(resultData);
            });
        });
        this._rxCharacteristic.write(data);
        return p;
    }
}
exports.default = RS_BTIREX2;


/***/ }),

/***/ "./dist/src/parts/Ble/RS_BTWATTCH2/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.RS_BTWATTCH2
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** RS_BTWATTCH2 management class RS_BTWATTCH2を管理するクラス */
class RS_BTWATTCH2 {
    /**
     * Constructor.
     *
     * If you want to change the RTC auto-configuration option from the default,
     *
     * set it as an argument at this time.
     *
     * コンストラクタ
     *
     * RTC自動設定オプションをデフォルトから変更する場合は、このタイミングで引数に設定
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @param options set auto RTC or not RTC自動設定の有無
     */
    constructor(peripheral, options) {
        this.keys = ['rtcAutoset'];
        this.requiredKeys = [];
        // parsing
        this._totalSize = -1;
        this._received = [];
        this._waitings = [];
        if (peripheral && !RS_BTWATTCH2.isDevice(peripheral)) {
            throw new Error('peripheral is not RS_BTWATTCH2');
        }
        this._peripheral = peripheral;
        this.params = options || {};
    }
    static info() {
        return {
            name: 'RS_BTWATTCH2',
        };
    }
    /**
     * Verify that the received peripheral is from the RS_BTWATTCH2
     *
     * 受け取ったPeripheralがRS_BTWATTCH2のものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the RS_BTWATTCH2
     *
     * RS_BTWATTCH2かどうか
     */
    static isDevice(peripheral) {
        return (peripheral.localName &&
            (peripheral.localName.indexOf('BTWATTCH2_') >= 0 ||
                peripheral.localName.indexOf('btwattch2_') >= 0));
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Check if device is under pairing mode(over 3 seconds button pressing)
     *
     * デバイスがペアリングモード中であることを検出する (3秒間本体のボタンを押してください)
     *
     * @returns Whether there is a device under pairing mode
     *
     * ペアリングモード中のデバイスがあるかどうか
     */
    isPairingMode() {
        return this._peripheral.localName.indexOf('BTWATTCH2_') < 0;
    }
    /**
     * Get the pairing key under pairing mode
     *
     * ペアリングモード中にペアリングキーを取得
     *
     * @returns pairing key ペアリングキー
     */
    async firstPairingWait() {
        if (!this._peripheral) {
            throw new Error('No Peripheral Found');
        }
        if (this.isPairingMode() === false) {
            throw new Error(`peripheral is not pairing mode. Press Pairing Button on device over 3 seconds. LED will start blinking then it is under pairing mode.`);
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        try {
            let gotKeys;
            await this._peripheral.connectWait({
                pairingOption: {
                    onPairedCallback: (keys) => {
                        gotKeys = keys;
                    },
                    onPairingFailed: (e) => {
                        throw e;
                    },
                },
            });
            if (!gotKeys) {
                const keys = await this._peripheral.pairingWait();
                gotKeys = keys;
            }
            await this._peripheral.disconnectWait();
            return gotKeys;
        }
        catch (e) {
            try {
                if (this._peripheral.connected) {
                    await this._peripheral.disconnectWait();
                }
            }
            catch (disconErr) {
                // ignore when disconnection failed.
                console.log(disconErr);
            }
            throw e;
        }
    }
    /**
     * Connect to the target device with pairing key
     *
     * ペアリングキーを用いてデバイスと接続
     *
     * @param keys pairing key ペアリングキー
     */
    async connectWait(keys) {
        if (!keys) {
            throw new Error(`You should get keys before. call firstPairingWait() to get keys and provide this`);
        }
        if (this.isPairingMode()) {
            throw new Error(`peripheral is pairing mode. Unplug and plug it again to change to normal mode.`);
        }
        await this._peripheral.connectWait();
        await this._peripheral.pairingWait({
            keys,
        });
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        const service = this._peripheral.getService('6e400001b5a3f393e0a9e50e24dcca9e');
        if (!service) {
            throw new Error(`no service found`);
        }
        this._rxFromTargetCharacteristic = service.getCharacteristic('6e400003b5a3f393e0a9e50e24dcca9e');
        this._txToTargetCharacteristic = service.getCharacteristic('6e400002b5a3f393e0a9e50e24dcca9e');
        try {
            await this._rxFromTargetCharacteristic.registerNotifyWait((data) => {
                this._pushData(data);
            });
            if (this.params.rtcAutoset !== false) {
                await this.setRTCWait();
            }
        }
        catch (e) {
            try {
                if (this._peripheral.connected) {
                    await this._peripheral.disconnectWait();
                }
            }
            catch (disconErr) {
                // ignore when disconnection failed.
                console.log(disconErr);
            }
            throw e;
        }
    }
    /**
     * Disconnect from the device
     *
     * デバイスとの接続を切断
     */
    async disconnectWait() {
        await this._peripheral.disconnectWait();
    }
    /**
     * @deprecated Please use {@linkplain setRTCWait}
     *
     * {@linkplain setRTCWait} の使用を推奨
     *
     * @param date
     */
    setRTC(date) {
        return this.setRTCWait(date);
    }
    /**
     * Set device RTC (date)
     *
     * デバイスのRTC(日時)の設定
     *
     * @param date instance of Date Dateのインスタンス
     */
    async setRTCWait(date) {
        if (!date) {
            date = new Date();
        }
        const ret = await this._transactionWait([
            0x01,
            date.getSeconds(),
            date.getMinutes(),
            date.getHours(),
            date.getDate(),
            date.getMonth(),
            date.getFullYear() - 1900,
        ]);
        if (ret.length !== 2) {
            throw new Error(`communication error`);
        }
        if (ret[1] !== 0x00) {
            throw new Error(`set rtc failed`);
        }
    }
    /**
     * Set relay ON/OFF
     *
     * リレーのON/OFFを設定する
     *
     * @param isOn set relay or not
     *
     * リレーを設定するかどうか
     */
    async setPowerStateWait(isOn) {
        const ret = await this._transactionWait([0xa7, isOn ? 0x01 : 0x00]);
        if (ret.length !== 3) {
            throw new Error(`communication error`);
        }
        if (ret[1] === 0x01) {
            throw new Error(`set power failed`);
        }
    }
    /**
     * Get current relay state
     *
     * 現在のリレーの状態を取得
     *
     * @returns the relay in set or not
     *
     * リレーが設定されているかどうか
     */
    async getPowerStateWait() {
        return (await this.getRealTimeDataWait()).powerState;
    }
    /**
     * Get realtime measurement data(voltage[Vrms]・electric current[Irms]・electric power[Wa]) and relay state
     *
     * リアルタイム計測データ(電圧[Vrms]・電流[Irms]・電力[Wa])とリレーの状態を取得
     *
     * @returns received realtime measurement data and relay state
     *
     * 受けとったリアルタイム計測データとリレーの状態
     */
    async getRealTimeDataWait() {
        const ret = await this._transactionWait([0x08]);
        if (ret.length !== 27) {
            throw new Error(`communication error`);
        }
        if (ret[1] !== 0x00) {
            throw new Error(`get data failed`);
        }
        const obj = {};
        // Relay
        obj.powerState = ret[26] === 0x01;
        // measured
        let vrms = ((ret[2] + ret[3]) << (8 * 1)) +
            (ret[4] << (8 * 2)) +
            (ret[5] << (8 * 3)) +
            (ret[6] << (8 * 4)) +
            (ret[7] << (8 * 5));
        vrms /= Math.pow(2, 24);
        obj.vrms = vrms;
        let irms = ((ret[8] + ret[9]) << (8 * 1)) +
            (ret[10] << (8 * 2)) +
            (ret[11] << (8 * 3)) +
            (ret[12] << (8 * 4)) +
            (ret[13] << (8 * 5));
        irms /= Math.pow(2, 30);
        obj.irms = irms;
        let wa = ((ret[14] + ret[15]) << (8 * 1)) +
            (ret[16] << (8 * 2)) +
            (ret[17] << (8 * 3)) +
            (ret[18] << (8 * 4)) +
            (ret[19] << (8 * 5));
        wa /= Math.pow(2, 24);
        obj.wa = wa;
        obj.date = new Date(1900 + ret[25], ret[24], ret[23], ret[22], ret[21], ret[20], 0);
        return obj;
    }
    _pushData(data) {
        if (this._waitings.length === 0) {
            return;
        }
        if (this._totalSize === -1) {
            if (data[0] !== 0xaa) {
                return;
            }
            this._totalSize = (data[1] << 8) + data[2]; // Not found in maker's docs
            this._received = [];
            data = data.splice(3);
        }
        this._received.push(...data);
        if (this._received.length === this._totalSize + 1) {
            this._received.pop(); // => CRC
            this._onReceived(this._received);
            this._received = [];
            this._totalSize = -1;
        }
    }
    _onReceived(data) {
        const one = this._waitings.shift();
        if (!one) {
            return;
        }
        if (one.command !== data[0]) {
            one.reject(new Error(`received command does not matched`));
            return;
        }
        one.resolve(data);
    }
    async _transactionWait(data) {
        let timeoutFunc = null;
        const timeout = setTimeout(() => {
            if (timeoutFunc)
                timeoutFunc('Timed out for waiting');
        }, 30 * 1000);
        try {
            const waitData = new Promise((resolve, reject) => {
                timeoutFunc = reject;
                this._waitings.push({
                    command: data[0],
                    resolve: (received) => {
                        clearTimeout(timeout);
                        resolve(received);
                    },
                    reject: (e) => {
                        clearTimeout(timeout);
                        reject(e);
                    },
                });
            });
            const send = this._createData(data);
            await this._txToTargetCharacteristic.writeWait(send);
            return await waitData;
        }
        catch (e) {
            clearTimeout(timeout);
            throw e;
        }
    }
    _createData(data) {
        const cmd = Buffer.alloc(data.length + 4);
        cmd.writeUInt8(0xaa, 0);
        cmd.writeUInt16BE(data.length, 1);
        Buffer.from(data).copy(cmd, 3);
        cmd.writeUInt8(this._GetCRC8(data), data.length + 3);
        return [...cmd];
    }
    _GetCRC8(arr) {
        const CRC8Table = [
            0x00,
            0x85,
            0x8f,
            0x0a,
            0x9b,
            0x1e,
            0x14,
            0x91,
            0xb3,
            0x36,
            0x3c,
            0xb9,
            0x28,
            0xad,
            0xa7,
            0x22,
            0xe3,
            0x66,
            0x6c,
            0xe9,
            0x78,
            0xfd,
            0xf7,
            0x72,
            0x50,
            0xd5,
            0xdf,
            0x5a,
            0xcb,
            0x4e,
            0x44,
            0xc1,
            0x43,
            0xc6,
            0xcc,
            0x49,
            0xd8,
            0x5d,
            0x57,
            0xd2,
            0xf0,
            0x75,
            0x7f,
            0xfa,
            0x6b,
            0xee,
            0xe4,
            0x61,
            0xa0,
            0x25,
            0x2f,
            0xaa,
            0x3b,
            0xbe,
            0xb4,
            0x31,
            0x13,
            0x96,
            0x9c,
            0x19,
            0x88,
            0x0d,
            0x07,
            0x82,
            0x86,
            0x03,
            0x09,
            0x8c,
            0x1d,
            0x98,
            0x92,
            0x17,
            0x35,
            0xb0,
            0xba,
            0x3f,
            0xae,
            0x2b,
            0x21,
            0xa4,
            0x65,
            0xe0,
            0xea,
            0x6f,
            0xfe,
            0x7b,
            0x71,
            0xf4,
            0xd6,
            0x53,
            0x59,
            0xdc,
            0x4d,
            0xc8,
            0xc2,
            0x47,
            0xc5,
            0x40,
            0x4a,
            0xcf,
            0x5e,
            0xdb,
            0xd1,
            0x54,
            0x76,
            0xf3,
            0xf9,
            0x7c,
            0xed,
            0x68,
            0x62,
            0xe7,
            0x26,
            0xa3,
            0xa9,
            0x2c,
            0xbd,
            0x38,
            0x32,
            0xb7,
            0x95,
            0x10,
            0x1a,
            0x9f,
            0x0e,
            0x8b,
            0x81,
            0x04,
            0x89,
            0x0c,
            0x06,
            0x83,
            0x12,
            0x97,
            0x9d,
            0x18,
            0x3a,
            0xbf,
            0xb5,
            0x30,
            0xa1,
            0x24,
            0x2e,
            0xab,
            0x6a,
            0xef,
            0xe5,
            0x60,
            0xf1,
            0x74,
            0x7e,
            0xfb,
            0xd9,
            0x5c,
            0x56,
            0xd3,
            0x42,
            0xc7,
            0xcd,
            0x48,
            0xca,
            0x4f,
            0x45,
            0xc0,
            0x51,
            0xd4,
            0xde,
            0x5b,
            0x79,
            0xfc,
            0xf6,
            0x73,
            0xe2,
            0x67,
            0x6d,
            0xe8,
            0x29,
            0xac,
            0xa6,
            0x23,
            0xb2,
            0x37,
            0x3d,
            0xb8,
            0x9a,
            0x1f,
            0x15,
            0x90,
            0x01,
            0x84,
            0x8e,
            0x0b,
            0x0f,
            0x8a,
            0x80,
            0x05,
            0x94,
            0x11,
            0x1b,
            0x9e,
            0xbc,
            0x39,
            0x33,
            0xb6,
            0x27,
            0xa2,
            0xa8,
            0x2d,
            0xec,
            0x69,
            0x63,
            0xe6,
            0x77,
            0xf2,
            0xf8,
            0x7d,
            0x5f,
            0xda,
            0xd0,
            0x55,
            0xc4,
            0x41,
            0x4b,
            0xce,
            0x4c,
            0xc9,
            0xc3,
            0x46,
            0xd7,
            0x52,
            0x58,
            0xdd,
            0xff,
            0x7a,
            0x70,
            0xf5,
            0x64,
            0xe1,
            0xeb,
            0x6e,
            0xaf,
            0x2a,
            0x20,
            0xa5,
            0x34,
            0xb1,
            0xbb,
            0x3e,
            0x1c,
            0x99,
            0x93,
            0x16,
            0x87,
            0x02,
            0x08,
            0x8d,
        ];
        let crc8 = 0x00;
        for (const data of arr) {
            crc8 = CRC8Table[(crc8 ^ (data & 0xff)) & 0xff];
        }
        return crc8;
    }
}
exports.default = RS_BTWATTCH2;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/RS_SEEK3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.RS_Seek3
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** RS_Seek3 management class RS_Seek3を管理するクラス */
class RS_Seek3 {
    constructor(peripheral) {
        this.keys = [];
        this.requiredKeys = [];
        /**
         * Callback when the button is pressed
         *
         * ボタンが押されたときにコールバック
         */
        this.onpressed = null;
        this._peripheral = null;
        this._uuids = {
            service: '0EE71523-981A-46B8-BA64-019261C88478',
            buttonChar: '0EE71524-981A-46B8-BA64-019261C88478',
            tempHumidChar: '0EE7152C-981A-46B8-BA64-019261C88478',
        };
        this._buttonCharacteristic = null;
        this._tempHumidCharacteristic = null;
        if (peripheral && !RS_Seek3.isDevice(peripheral)) {
            throw new Error('peripheral is not RS_Seek3');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'RS_Seek3',
        };
    }
    /**
     * Verify that the received peripheral is from the RS_Seek3
     *
     * 受け取ったPeripheralがRS_Seek3のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the RS_Seek3
     *
     * RS_Seek3かどうか
     */
    static isDevice(peripheral) {
        if (peripheral.localName !== 'Seek3') {
            return false;
        }
        return true;
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect the sensor
     *
     * センサへ接続
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('RS_Seek3 is not find.');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        this._buttonCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.buttonChar);
        this._tempHumidCharacteristic = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.tempHumidChar);
        if (this._buttonCharacteristic) {
            this._buttonCharacteristic.registerNotify((data) => {
                if (typeof this.onpressed === 'function') {
                    this.onpressed();
                }
            });
        }
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        var _a;
        await ((_a = this._peripheral) === null || _a === void 0 ? void 0 : _a.disconnectWait());
    }
    /**
     * Get temperature and humidity data from the RS_SEEK3
     *
     * RS_SEEK3から温湿度データを取得
     *
     * @returns temperature and humidity data 温湿度データ
     *
     * ```
     * {
     *
     * temperature: temperature 温度,
     *
     * humidity: humidity 湿度
     *
     * }
     * ```
     */
    async getTempHumidWait() {
        if (!this._tempHumidCharacteristic) {
            throw new Error('device is not connected');
        }
        const data = await this._tempHumidCharacteristic.readWait();
        return { temperature: data[0], humidity: data[1] };
    }
}
exports.default = RS_Seek3;


/***/ }),

/***/ "./dist/src/parts/Ble/STM550B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.STM550B
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const round_to_1 = __importDefault(__webpack_require__("./node_modules/round-to/index.js"));
const dataSizeTable = {
    0b00: 1,
    0b01: 2,
    0b10: 4,
    0b11: 255,
};
const dataTypeTable = {
    0x00: { type: 'temperature', encoding: 'numLE' },
    0x01: { type: 'voltage', encoding: 'numLE' },
    0x02: { type: 'energy_level', encoding: 'unsignedNumLE' },
    0x04: { type: 'illumination_solar_cell', encoding: 'unsignedNumLE' },
    0x05: { type: 'illumination_sensor', encoding: 'unsignedNumLE' },
    0x06: { type: 'humidity', encoding: 'unsignedNumLE' },
    0x0a: { type: 'acceleration_vector', encoding: 'unsignedNumLE' },
    0x23: { type: 'magnet_contact', encoding: 'bool0001' },
};
const readData = (rawData, dataSize, encoding) => {
    switch (encoding) {
        case 'numBE':
            if (dataSize === 1) {
                return rawData.readInt8(0);
            }
            else if (dataSize === 2) {
                return rawData.readInt16BE(0);
            }
            return rawData.readInt32BE(0);
        case 'numLE':
            if (dataSize === 1) {
                return rawData.readInt8(0);
            }
            else if (dataSize === 2) {
                return rawData.readInt16LE(0);
            }
            return rawData.readInt32LE(0);
        case 'unsignedNumBE':
            if (dataSize === 1) {
                return rawData.readUInt8(0);
            }
            else if (dataSize === 2) {
                return rawData.readUInt16BE(0);
            }
            return rawData.readUInt32BE(0);
        case 'unsignedNumLE':
            if (dataSize === 1) {
                return rawData.readUInt8(0);
            }
            else if (dataSize === 2) {
                return rawData.readUInt16LE(0);
            }
            else if (dataSize === 4) {
                return readAcceleVector(rawData.readUInt32LE(0));
            }
            return rawData.readUInt32LE(0);
        case 'bool0001':
            if (rawData.readUInt8(0) & 0x01) {
                return true;
            }
            return false;
    }
};
const readAcceleVector = (data) => {
    const status = (data & 0xc0000000) >> 30;
    const z = (data & 0x3ff00000) >> 20;
    const y = (data & 0x000ffc00) >> 10;
    const x = data & 0x000003ff;
    return { x: (x - 512) / 100, y: (y - 512) / 100, z: (z - 512) / 100 };
};
const findType = (type, multiple = 1, precision = 0) => {
    return (data, peripheral) => {
        const buf = Buffer.from(data);
        for (let i = 0; i < buf.length;) {
            const descriptor = buf.readUInt8(i);
            const dataSizeType = (descriptor >> 6) & 0x03;
            const dataSize = dataSizeTable[dataSizeType];
            const dataTypeNumber = descriptor & 0x3f;
            const dataType = dataTypeTable[dataTypeNumber];
            if (!dataType || dataType.type !== type) {
                i += dataSize + 1;
                continue;
            }
            const rawData = buf.slice(i + 1, i + 1 + dataSize);
            let result = readData(rawData, dataSize, dataType.encoding);
            if (result && typeof result === 'number') {
                result = round_to_1.default(result * multiple, precision);
            }
            return result;
        }
        return undefined;
    };
};
class STM550B extends ObnizPartsBleAbstract_1.ObnizPartsBle {
    constructor(peripheral, mode) {
        super(peripheral, mode);
        this.staticClass = STM550B;
    }
}
exports.default = STM550B;
STM550B.PartsName = 'STM550B';
STM550B.AvailableBleMode = 'Beacon';
STM550B.BeaconDataStruct = {
    temperature: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('temperature', 0.01),
    },
    voltage: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('voltage', 0.5),
    },
    energy_level: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('energy_level', 0.5),
    },
    illumination_solar_cell: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('illumination_solar_cell'),
    },
    illumination_sensor: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('illumination_sensor'),
    },
    humidity: {
        index: 4,
        length: 255,
        type: 'custom',
        func: findType('humidity', 0.5),
    },
    magnet_contact: {
        index: 7,
        length: 255,
        type: 'custom',
        func: findType('magnet_contact'),
    },
    acceleration_vector: {
        index: 7,
        length: 255,
        type: 'custom',
        func: findType('acceleration_vector'),
    },
};
STM550B.CompanyID = {
    Beacon: [0xda, 0x03],
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/TR4/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.TR4
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const advertismentAnalyzer_1 = __webpack_require__("./dist/src/parts/Ble/utils/advertisement/advertismentAnalyzer.js");
/** Tr4 series management class Tr4シリーズを管理するクラス */
class Tr4 {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'TR4',
        };
    }
    /**
     * Verify that the received peripheral is from the Tr4
     *
     * 受け取ったPeripheralがTr4のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Tr4
     *
     * Tr4かどうか
     */
    static isDevice(peripheral) {
        return Tr4._deviceAdvAnalyzer.validate(peripheral.adv_data);
    }
    /**
     * Get a data from the Tr4
     *
     * Tr4からデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the Tr4 Tr4から受け取ったデータ
     *
     * ```
     * {
     *
     * temperature: temperature 温度 (Unit 単位: 0.1 degC)
     *
     * }
     * ```
     */
    static getData(peripheral) {
        if (!Tr4.isDevice(peripheral)) {
            return null;
        }
        const measureData = Tr4._deviceAdvAnalyzer.getData(peripheral.adv_data, 'manufacture', 'measureData');
        if (!measureData) {
            return null;
        }
        if (measureData[0] === 0xee && measureData[1] === 0xee) {
            // sensor error
            return null;
        }
        const temperatureRaw = Buffer.from(measureData).readInt16LE(0);
        return {
            temperature: (temperatureRaw - 1000) / 10,
        };
    }
}
exports.default = Tr4;
Tr4._deviceAdvAnalyzer = new advertismentAnalyzer_1.BleAdvBinaryAnalyzer()
    .addTarget('flag', [0x02, 0x01, 0x06])
    .groupStart('manufacture')
    .addTarget('length', [0x1b])
    .addTarget('type', [0xff])
    .addTarget('companyId', [0x92, 0x03])
    .addTargetByLength('deviceSerial', 4)
    .addTarget('security', [-1])
    .addTarget('formatNo', [1])
    .addTarget('measureData', [-1, -1])
    .addTarget('reserved', [-1, -1])
    .addTarget('battery', [5])
    .addTargetByLength('reserved2', 13) // from datasheet length=14, but device send length=13
    .groupEnd()
    // local name adv is exist, but cannot use for filter
    .groupStart('localName')
    .groupEnd();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/TR7/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.TR7
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const advertismentAnalyzer_1 = __webpack_require__("./dist/src/parts/Ble/utils/advertisement/advertismentAnalyzer.js");
/**
 * Class that manages TR7 series.
 *
 * TR7シリーズを管理するクラス。
 */
class TR7 {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'TR7',
        };
    }
    /**
     * Verify that the received peripheral is from the TR7.
     *
     * 受け取ったPeripheralがTR7シリーズのものかどうかを確認する。
     *
     * @param peripheral Instance of BleRemotePeripheral. BleRemotePeripheralのインスタンス。
     *
     * @returns Whether it is the TR7 or not. TR7かどうか。
     *
     */
    static isDevice(peripheral) {
        return this._deviceAdvAnalyzer.validate(peripheral.adv_data);
    }
    /**
     * Get data from TR7 series.
     *
     * T7シリーズからデータを取得。
     *
     * @param peripheral Instance of BleRemotePeripheral. BleRemotePeripheralのインスタンス。
     *
     * @returns Data recieved from TR7. TR7から受け取ったデータ。
     *
     * ```
     * {
     *    temperature: temperature 温度 (Unit: 0.1 degC)
     *    humidity: humidity 湿度 (Unit: 0.1 %)
     * }
     * ```
     */
    static getData(peripheral) {
        if (!this.isDevice(peripheral))
            return null;
        const temperatureBytes = this._deviceAdvAnalyzer.getData(peripheral.adv_data, 'manufacture', 'measuredDataCh1');
        const humidityBytes = this._deviceAdvAnalyzer.getData(peripheral.adv_data, 'manufacture', 'measuredDataCh2');
        if (!temperatureBytes || !humidityBytes)
            return null;
        const rawTemperature = temperatureBytes === [0xee, 0xee] // error
            ? null
            : Buffer.from(temperatureBytes).readInt16LE(0);
        const rawHumidity = humidityBytes === [0xee, 0xee] // error
            ? null
            : Buffer.from(humidityBytes).readInt16LE(0);
        if (!rawTemperature || !rawHumidity)
            return null;
        return {
            temperature: (rawTemperature - 1000) / 10,
            humidity: (rawHumidity - 1000) / 10,
        };
    }
}
exports.default = TR7;
TR7._deviceAdvAnalyzer = new advertismentAnalyzer_1.BleAdvBinaryAnalyzer()
    .addTarget('flags', [0x02, 0x01, 0x06]) // NOTE: length, ad type, ad data
    .addTarget('32bitServiceUuids', [0x05, 0x05, 0x0a, 0x18, 0x00, 0x00]) // NOTE: little endian
    .groupStart('manufacture')
    .addTarget('length', [0x15])
    .addTarget('type', [0xff])
    .addTarget('companyId', [0x92, 0x03]) // NOTE: little endian
    .addTargetByLength('deviceSerial', 4)
    .addTargetByLength('controlCode', 1)
    .addTargetByLength('counter', 1)
    .addTargetByLength('statusCode1', 1)
    .addTargetByLength('statusCode2', 1)
    .addTargetByLength('measuredDataCh1', 2)
    .addTargetByLength('measuredDataCh2', 2)
    .addTargetByLength('spare', 4)
    .addTargetByLength('unused', 2)
    .groupEnd();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/UA1200BLE/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.UA1200BLE
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** UA1200BLE management class UA1200BLEを管理するクラス */
class UA1200BLE {
    constructor(peripheral, timezoneOffsetMinute) {
        if (!peripheral || !UA1200BLE.isDevice(peripheral)) {
            throw new Error('peripheral is not UA1200BLE');
        }
        this._peripheral = peripheral;
        this._timezoneOffsetMinute = timezoneOffsetMinute;
    }
    static info() {
        return {
            name: 'UA1200BLE',
        };
    }
    /**
     * Verify that the received peripheral is from the UA1200BLE
     *
     * 受け取ったPeripheralがUA1200BLEのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is UA1200BLE
     *
     * UA1200BLEかどうか
     */
    static isDevice(peripheral) {
        return (peripheral.localName && peripheral.localName.startsWith('UA-1200BLE_'));
    }
    /**
     * Judge whether it is cooperation mode
     *
     * (When in cooperation mode, no data exists even when connected)
     *
     * 連携モードかどうかの判定
     *
     * (連携モードのときは接続してもデータが存在しません)
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is cooperation mode or not
     *
     * 連携モードかどうか
     */
    static isCooperationMode(peripheral) {
        const peripheralHex = peripheral.adv_data
            .map((e) => e.toString(16))
            .join('');
        const peripheralArray = [
            // "2",
            // "1",
            // "6",
            // "11",
            // "7",
            'e4',
            'ab',
            '90',
            '56',
            'd',
            '0',
            '5c',
            '97',
            '6d',
            '1b',
            '34',
            '5a',
            '0',
            'f0',
            '3b',
            '23',
        ].join('');
        return peripheralHex.indexOf(peripheralArray) > -1;
    }
    /**
     * Pair with the device
     *
     * デバイスとペアリング
     *
     * @returns pairing key ペアリングキー
     */
    async pairingWait() {
        if (!this._peripheral) {
            throw new Error('UA1200BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        let key = null;
        await this._peripheral.connectWait({
            pairingOption: {
                onPairedCallback: (pairingKey) => {
                    key = pairingKey;
                },
            },
        });
        const { customServiceChar } = this._getCharsCoopMode();
        await customServiceChar.writeWait([2, 1, 3]); // disconnect req
        return key;
    }
    /**
     * Get data from the UA1200BLE
     *
     * UA1200BLEからデータを取得
     *
     * @returns data from the UA1200BLE UA1200BLEから受け取ったデータ
     */
    async getDataWait() {
        if (!this._peripheral) {
            throw new Error('UA1200BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (this.ondisconnect) {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        if (!this._peripheral) {
            throw new Error('UA1200BLE not found');
        }
        const results = [];
        // Advertise mode (BP-00 or BP-01 in pp.7)
        // const { bloodPressureMeasurementChar, customServiceChar } = this._getCharsCoopMode();
        // await customServiceChar.writeWait([2, 0, 0xe1]);
        // bloodPressureMeasurementChar.registerNotifyWait((data: number[]) => {
        //   results.push(this._analyzeData(data));
        // });
        // await this._writeTimeCharWait(this._timezoneOffsetMinute);
        // await this._writeCCCDChar();
        const { bloodPressureMeasurementChar, timeChar, } = this._getCharsSingleMode();
        await this._writeTimeCharWait(this._timezoneOffsetMinute);
        await bloodPressureMeasurementChar.registerNotifyWait((data) => {
            results.push(this._analyzeData(data));
        });
        return await new Promise((resolve, reject) => {
            if (!this._peripheral)
                return;
            this._peripheral.ondisconnect = (reason) => {
                resolve(results);
                if (this.ondisconnect) {
                    this.ondisconnect(reason);
                }
            };
        });
    }
    _readSFLOAT_LE(buffer, index) {
        // convert SFLOAT Little Endian (not sfloat!) to numerical value
        const data = buffer.readUInt16LE(index);
        let mantissa = data & 0x0fff;
        if ((mantissa & 0x0800) > 0) {
            mantissa = -1 * (~(mantissa - 0x01) & 0x0fff);
        }
        const exponential = data >> 12;
        return mantissa * Math.pow(10, exponential);
    }
    _analyzeData(data) {
        const buf = Buffer.from(data);
        const flags = buf.readUInt8(0);
        let index = 1;
        const result = {};
        if (flags & 0x01) {
            // Blood Pressure Unit Flag
            // kPa
            result.SystolicPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.DiastolicPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.MeanArterialPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        else {
            // mmHg
            result.SystolicPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.DiastolicPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.MeanArterialPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        if (flags & 0x02) {
            // Time Stamp Flag
            // TODO: get Time stamp
            // result.date = {
            //   year: buf.readUInt16LE(index),
            //   month: buf.readUInt8(index + 2),
            //   day: buf.readUInt8(index + 3),
            //   hour: buf.readUInt8(index + 4),
            //   minute: buf.readUInt8(index + 5),
            //   second: buf.readUInt8(index + 6),
            // };
            index += 7;
        }
        if (flags & 0x04) {
            // Pulse Rate Flag
            result.PulseRate = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        if (flags & 0x08) {
            // UserIdFlag
            index += 1;
        }
        if (flags & 0x10) {
            // UserIdFlag
            const ms = buf[index];
            result.bodyMoved = (ms & 0b1) !== 0;
            result.cuffFitLoose = (ms & 0b10) !== 0;
            result.irregularPulseDetected = (ms & 0b100) !== 0;
            result.improperMeasurement = (ms & 0b100000) !== 0;
            index += 1;
        }
        return result;
    }
    _getCharsCoopMode() {
        if (!this._peripheral) {
            throw new Error('UA1200BLE not found');
        }
        const bloodPressureMeasurementChar = this._peripheral
            .getService('1810')
            .getCharacteristic('2A35');
        const customServiceChar = this._peripheral
            .getService('233bf0005a341b6d975c000d5690abe4') // Primary Service Custom Service(pp.26)
            .getCharacteristic('233bf0015a341b6d975c000d5690abe4'); // Custom Characteristic(pp.27)
        return {
            bloodPressureMeasurementChar,
            customServiceChar,
        };
    }
    _getCharsSingleMode() {
        if (!this._peripheral) {
            throw new Error('UA1200BLE not found');
        }
        const bloodPressureMeasurementChar = this._peripheral
            .getService('1810')
            .getCharacteristic('2A35');
        const timeChar = this._peripheral
            .getService('1805')
            .getCharacteristic('2A2B');
        // const CCCDChar = this._peripheral.getService("1810")!.getCharacteristic("2902")!;
        return {
            bloodPressureMeasurementChar,
            timeChar,
        };
    }
    async _writeTimeCharWait(timeOffsetMinute) {
        const { timeChar } = this._getCharsSingleMode();
        const date = new Date();
        date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);
        const buf = Buffer.alloc(9);
        // Current Time Service(pp.11)
        buf.writeUInt16LE(date.getUTCFullYear(), 0);
        buf.writeUInt8(date.getUTCMonth() + 1, 2);
        buf.writeUInt8(date.getUTCDate(), 3);
        buf.writeUInt8(date.getUTCHours(), 4);
        buf.writeUInt8(date.getUTCMinutes(), 5);
        buf.writeUInt8(date.getUTCSeconds(), 6);
        buf.writeUInt8(date.getDay(), 7);
        buf.writeUInt8(0, 8);
        const arr = Array.from(buf);
        await timeChar.writeWait(arr);
    }
}
exports.default = UA1200BLE;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/UA651BLE/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.UA651BLE
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** UA651BLE management class UA651BLEを管理するクラス */
class UA651BLE {
    constructor(peripheral, timezoneOffsetMinute) {
        if (!peripheral) {
            throw new Error('no peripheral');
        }
        this._peripheral = peripheral;
        this._timezoneOffsetMinute = timezoneOffsetMinute;
    }
    static info() {
        return {
            name: 'UA651BLE',
        };
    }
    /**
     * Verify that the received peripheral is from the UA651BLE
     *
     * 受け取ったPeripheralがUA651BLEのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is UA651BLE
     *
     * UA651BLEかどうか
     */
    static isDevice(peripheral) {
        return (peripheral.localName && peripheral.localName.startsWith('A&D_UA-651BLE_'));
    }
    isPairingMode() {
        if (!this._peripheral) {
            throw new Error('UA651BLE not found');
        }
        // adv_data[2]はFlagsで、bit0が1の場合Pairng Mode(Limited Discoverable Mode)
        if (this._peripheral.adv_data[2] === 5) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Pair with the device
     *
     * デバイスとペアリング
     *
     * @returns pairing key ペアリングキー
     */
    async pairingWait() {
        if (!this._peripheral) {
            throw new Error('UA651BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        let key = null;
        await this._peripheral.connectWait({
            pairingOption: {
                onPairedCallback: (pairingKey) => {
                    key = pairingKey;
                },
            },
        });
        const { bloodPressureMeasurementChar, timeChar, customServiceChar, } = this._getChars();
        await this._writeTimeCharWait(this._timezoneOffsetMinute);
        await customServiceChar.writeWait([2, 1, 3]); // disconnect req
        return key;
    }
    /**
     * Get data from the UA651BLE
     *
     * UA651BLEからデータを取得
     *
     * @returns data from the UA651BLE UA651BLEから受け取ったデータ
     */
    async getDataWait(pairingKeys) {
        if (!this._peripheral) {
            throw new Error('UA651BLE not found');
        }
        await this._peripheral.connectWait({
            pairingOption: {
                keys: pairingKeys,
            },
        });
        if (!this._peripheral) {
            throw new Error('UA651BLE not found');
        }
        const results = [];
        const { bloodPressureMeasurementChar, timeChar, customServiceChar, batteryChar, } = this._getChars();
        const waitDisconnect = new Promise((resolve, reject) => {
            if (!this._peripheral)
                return;
            this._peripheral.ondisconnect = (reason) => {
                resolve(results);
            };
        });
        const battery = await batteryChar.readWait();
        await customServiceChar.writeWait([2, 0, 0xe1]); // send all data
        await this._writeTimeCharWait(this._timezoneOffsetMinute);
        await bloodPressureMeasurementChar.registerNotifyWait((data) => {
            results.push(this._analyzeData(data, battery));
        });
        return waitDisconnect;
    }
    _readSFLOAT_LE(buffer, index) {
        const data = buffer.readUInt16LE(index);
        let mantissa = data & 0x0fff;
        if ((mantissa & 0x0800) > 0) {
            mantissa = -1 * (~(mantissa - 0x01) & 0x0fff);
        }
        const exponential = data >> 12;
        return mantissa * Math.pow(10, exponential);
    }
    _analyzeData(data, battery) {
        const buf = Buffer.from(data);
        const flags = buf.readUInt8(0);
        let index = 1;
        const result = {};
        if (flags & 0x01) {
            // Blood Pressure Unit Flag
            // kPa
            result.SystolicPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.DiastolicPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.MeanArterialPressure_kPa = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        else {
            // mmHg
            result.SystolicPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.DiastolicPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
            result.MeanArterialPressure_mmHg = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        if (flags & 0x02) {
            // // Time Stamp Flag
            // TODO: get Time Stamp
            // result.date = {
            //   year: buf.readUInt16LE(index),
            //   month: buf.readUInt8(index + 2),
            //   day: buf.readUInt8(index + 3),
            //   hour: buf.readUInt8(index + 4),
            //   minute: buf.readUInt8(index + 5),
            //   second: buf.readUInt8(index + 6),
            // };
            index += 7;
        }
        if (flags & 0x04) {
            // Pulse Rate Flag
            result.PulseRate = this._readSFLOAT_LE(buf, index);
            index += 2;
        }
        if (flags & 0x08) {
            // UserIdFlag
            index += 1;
        }
        if (flags & 0x10) {
            // UserIdFlag
            const ms = buf[index];
            result.bodyMoved = (ms & 0b1) !== 0;
            result.cuffFitLoose = (ms & 0b10) !== 0;
            result.irregularPulseDetected = (ms & 0b100) !== 0;
            result.improperMeasurement = (ms & 0b100000) !== 0;
            index += 1;
        }
        result.battery = battery[0];
        return result;
    }
    _getChars() {
        if (!this._peripheral) {
            throw new Error('UA651BLE not found');
        }
        const bloodPressureMeasurementChar = this._peripheral
            .getService('1810')
            .getCharacteristic('2A35');
        const timeChar = this._peripheral
            .getService('1810')
            .getCharacteristic('2A08');
        const customServiceChar = this._peripheral
            .getService('233bf0005a341b6d975c000d5690abe4') // Primary Service Custom Service(pp.14)
            .getCharacteristic('233bf0015a341b6d975c000d5690abe4'); // Custom Characteristic(pp.14)
        const batteryChar = this._peripheral
            .getService('180F')
            .getCharacteristic('2A19');
        return {
            bloodPressureMeasurementChar,
            timeChar,
            customServiceChar,
            batteryChar,
        };
    }
    async _writeTimeCharWait(timeOffsetMinute) {
        const { timeChar } = this._getChars();
        const date = new Date();
        date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);
        const buf = Buffer.alloc(7);
        buf.writeUInt16LE(date.getUTCFullYear(), 0);
        buf.writeUInt8(date.getUTCMonth() + 1, 2);
        buf.writeUInt8(date.getUTCDate(), 3);
        buf.writeUInt8(date.getUTCHours(), 4);
        buf.writeUInt8(date.getUTCMinutes(), 5);
        buf.writeUInt8(date.getUTCSeconds(), 6);
        const arr = Array.from(buf);
        await timeChar.writeWait(arr);
    }
}
exports.default = UA651BLE;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/UC421BLE/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.UC421BLE
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = __webpack_require__("./node_modules/eventemitter3/index.js");
const moment_1 = __importDefault(__webpack_require__("./node_modules/moment/moment.js"));
const arrUserNoType = [1, 2, 3, 4, 5];
const arrGuestUserNoType = [99];
/**
 * Class for managing UC421BLE.
 *
 * UC421BLEを管理するクラス
 */
class UC421BLE {
    constructor(peripheral) {
        if (!peripheral || !UC421BLE.isDevice(peripheral)) {
            throw new Error('peripheral is not UC421BLE');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'UC421BLE',
        };
    }
    /**
     * Judge if the peripheral is UC421BLE or not
     *
     * ペリフェラルがUC421BLEかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Judgement if the peripheral is UC421BLE or not ペリフェラルがUC421BLEかどうかの判定
     */
    static isDevice(peripheral) {
        if (!peripheral.localName)
            return false;
        return peripheral.localName.startsWith('UC-421BLE_');
    }
    /**
     * Extract a manufacturer specific data from an advertisement sent from UC421BLE.
     *
     * UC421BLEから送られたアドバタイズメントからmanufacturer specific dataを取得する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns manufacturer specific data
     */
    static getManufacturerSpecificDataFromAdv(peripheral) {
        if (!this.isDevice(peripheral))
            throw new Error('Peripheral is not UC-421BLE');
        const manufacturerSpecificData = peripheral.manufacturerSpecificData;
        let offset = 0;
        const buf = Buffer.from(manufacturerSpecificData);
        const companyCode = buf.readUInt16LE(offset);
        const byteLenCompanyCode = 2;
        offset += byteLenCompanyCode;
        const opMode = buf.readUInt16LE(offset);
        const bit0 = 0b000000001;
        const bit1 = 0b000000010;
        const bit2 = 0b000000100;
        const bit3 = 0b000001000;
        const bit4 = 0b000010000;
        const bit5 = 0b000100000;
        const bit6 = 0b001000000;
        const bit7 = 0b010000000;
        const bit8 = 0b100000000;
        const runningMode = opMode & bit0 ? 'measurementWithoutApp' : 'measurementWithApp';
        const isMedicalExamModeOn = opMode & bit1 ? true : false;
        const isTimeSet = opMode & bit2 ? true : false;
        const hasMemoryForUser1 = opMode & bit3 ? true : false;
        const hasMemoryForUser2 = opMode & bit4 ? true : false;
        const hasMemoryForUser3 = opMode & bit5 ? true : false;
        const hasMemoryForUser4 = opMode & bit6 ? true : false;
        const hasMemoryForUser5 = opMode & bit7 ? true : false;
        const haveSeatsForNewUser = opMode & bit8 ? true : false;
        const byteLenOpMode = 2;
        offset += byteLenOpMode;
        const id = buf.readUInt8(offset);
        return {
            companyCode,
            opMode: {
                runningMode,
                isMedicalExamModeOn,
                isTimeSet,
                hasMemoryForUser1,
                hasMemoryForUser2,
                hasMemoryForUser3,
                hasMemoryForUser4,
                hasMemoryForUser5,
                haveSeatsForNewUser,
            },
            id,
        };
    }
    /**
     * Connect to the peripheral without a pairing
     *
     * ペアリングせずにペリフェラルに接続する
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('UC421BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        await this._peripheral.connectWait();
        await this._setTimeWait();
    }
    /**
     * Do the pairing with the peripheral
     *
     * ペリフェラルとペアリングする
     *
     * @returns pairing key ペアリングキー
     */
    async pairingWait() {
        if (!this._peripheral) {
            throw new Error('UC421BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        let key = null;
        await this._peripheral.connectWait({
            pairingOption: {
                onPairedCallback: (pairingKey) => {
                    key = pairingKey;
                },
            },
        });
        await this._setTimeWait();
        return key;
    }
    /**
     * Aquire a new user No
     *
     * 新規ユーザNoを取得
     *
     * @param cc cc is short for 'consent code' and used along with the user No when authorizing a user. It should be a range from 0 to 9999. ccは'consent code'の略でユーザ認証の際にuser Noと一緒に使う。0 ~ 9999で指定する。
     *
     * @returns user No ranging from 1 to 5. 1 ~ 5のユーザNo
     */
    async aquireNewUserNoWait(cc) {
        const ccArr = this._toCcArr(cc);
        let no = null;
        const opcodeRegister = 0x01;
        const opcodeResponse = 0x20;
        const responseValueSuccess = 0x01;
        const responseValueErrorInvalidParameter = 0x03;
        const responseValueErrorOperationFailed = 0x04;
        const _analyzeData = (data) => {
            const opcode = data[0];
            const requestedOpcode = data[1];
            const responseValue = data[2];
            if (opcode === opcodeResponse && requestedOpcode === opcodeRegister) {
                if (responseValue === responseValueSuccess) {
                    const responseParameter = data[3];
                    no = responseParameter;
                }
                else {
                    switch (responseValue) {
                        case responseValueErrorInvalidParameter:
                            throw new Error('cc is too long or payload too big.');
                        case responseValueErrorOperationFailed:
                            throw new Error('All user No. are already used.');
                        default:
                            throw new Error('Unkonw response value.');
                    }
                }
            }
        };
        const userControlPointChar = await this._getUserControlPointCharWait();
        await userControlPointChar.registerNotifyWait(_analyzeData);
        await userControlPointChar.writeWait([opcodeRegister, ...ccArr]);
        if (!no)
            throw new Error('Failed to register new user.');
        return no;
    }
    /**
     * Authorize a user
     *
     * ユーザ認証
     *
     * @param  userNo User No aquired from the aquireNewUserNoWait function. But when you authorizing a guest user, pass in 99. aquireNewUserNoWait関数で取得したユーザNo。ただしゲストユーザの認証を行う場合は99を指定。
     * @param cc cc that you have passed in as an argument when calling the aquireNewUserNoWait function. But when you authorizing a guest user, pass in 9999. aquireNewUserNoWait関数で引数に指定したcc。ただしゲストユーザの認証を行う際は9999を指定。
     *
     */
    async authorizeUserWait(userNo, cc) {
        let authorized = false;
        const validUserNo = [...arrUserNoType, ...arrGuestUserNoType];
        if (!validUserNo.includes(userNo))
            throw new Error('UserNo must be 1-5 for a normal user or 99 for a guest user.');
        const ccArr = this._toCcArr(cc);
        const opcodeAuthorize = 0x02;
        const opcodeResponse = 0x20;
        const responseValueSuccess = 0x01;
        const responseValueErrorPayloadTooLong = 0x03;
        const responseValueErrorFailedThreeTimes = 0x04;
        const responseValueErrorCcMismatch = 0x05;
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitNotification = new Promise((res, rej) => evtEmitter.on('notified', res));
        const _analyzeData = (data) => {
            const opcode = data[0];
            const requestedOpcode = data[1];
            const responseValue = data[2];
            if (opcode === opcodeResponse && requestedOpcode === opcodeAuthorize) {
                if (responseValue === responseValueSuccess) {
                    authorized = true;
                    evtEmitter.emit('notified');
                }
                else {
                    switch (responseValue) {
                        case responseValueErrorPayloadTooLong:
                            throw new Error('Requested data is too long.');
                        case responseValueErrorFailedThreeTimes:
                            throw new Error('Failed authorization three times in a row.');
                        case responseValueErrorCcMismatch:
                            throw new Error('Given cc mismatches to one of given user no.');
                        default:
                            throw new Error('Unknown response value.');
                    }
                }
            }
        };
        const userControlPointChar = await this._getUserControlPointCharWait();
        await userControlPointChar.registerNotifyWait(_analyzeData);
        await userControlPointChar.writeWait([opcodeAuthorize, userNo, ...ccArr]);
        await waitNotification;
        if (!authorized)
            throw new Error('Authorization failed.');
    }
    /**
     * Update a user info. After aquiring a new user No, it's recommended to register an initial user info attached to it.
     * To use this function, you first need to authorize a user by calling authorizeUserWait function.
     * After that, you can update a personal info of the user.
     *
     * ユーザ情報更新。新規ユーザNoを取得した後は、この関数でユーザ情報を登録することを推奨。
     * この関数を使うにはまずauthorizeUserWait関数を使ってユーザ認証を行う必要がある。
     * 認証後、そのユーザのユーザ情報を更新できるようになる。
     *
     * @param  userInfo UC421BLEUserInfoData object. UC421BLEUserInfoDataオブジェクト
     *
     */
    async updateUserInfoDataWait(userInfo) {
        const updateFunctions = [];
        if (userInfo.firstName !== undefined) {
            const buf = Buffer.from(userInfo.firstName, 'utf-8');
            if (buf.length > 20 || buf.length === 0)
                throw new Error('The byte length of firstName should be a range from 1 to 20.');
            const updateFirstName = async () => {
                const firstNameChar = await this._getFirstNameCharWait();
                await firstNameChar.writeWait(buf);
            };
            updateFunctions.push(updateFirstName);
        }
        if (userInfo.lastName !== undefined) {
            const buf = Buffer.from(userInfo.lastName, 'utf-8');
            if (buf.length > 20 || buf.length === 0)
                throw new Error('The byte length of lastName should be a range from 1 to 20.');
            const updateLastName = async () => {
                const lastNameChar = await this._getLastNameCharWait();
                await lastNameChar.writeWait(buf);
            };
            updateFunctions.push(updateLastName);
        }
        if (userInfo.email !== undefined) {
            const buf = Buffer.from(userInfo.email, 'utf-8');
            if (buf.length > 16 || buf.length === 0)
                throw new Error('The byte length of email should be a range from 1 to 16.');
            const updateEmail = async () => {
                const emailChar = await this._getEmailCharWait();
                await emailChar.writeWait(buf);
            };
            updateFunctions.push(updateEmail);
        }
        if (userInfo.birth !== undefined) {
            const { year, month, day } = userInfo.birth;
            const age = this._getAge(year, month, day);
            if (age < 5 || age > 99)
                throw new Error('Age must be within a range from 5 to 99.');
            // 1977, 1, 2 -> [0xB9, 0x07, 0x01, 0x02]
            const buf = Buffer.alloc(4);
            buf.writeUInt16LE(year, 0);
            buf.writeUInt8(month, 2);
            buf.writeUInt8(day, 3);
            const arr = Array.from(buf);
            const updateBirth = async () => {
                const birthChar = await this._getBirthCharWait();
                await birthChar.writeWait(arr);
            };
            updateFunctions.push(updateBirth);
        }
        if (userInfo.gender !== undefined) {
            const arr = new Array(1);
            switch (userInfo.gender) {
                case 'male':
                    arr[0] = 0x00;
                    break;
                case 'female':
                    arr[0] = 0x01;
                    break;
                case 'unspecified':
                    // NOTE: The peripheral won't mesure the body composition data in this case.
                    arr[0] = 0x02;
                    break;
                default:
                    throw new Error('Unknown gender.');
            }
            const updateGender = async () => {
                const genderChar = await this._getGenderCharWait();
                await genderChar.writeWait(arr);
            };
            updateFunctions.push(updateGender);
        }
        if (userInfo.height !== undefined) {
            const height = userInfo.height;
            if (height < 90 || height > 220)
                throw new Error('Height must be within a range from 90 to 220.');
            // Acceptable value ranges from 90 to 220.
            const buf = Buffer.alloc(2);
            buf.writeUInt16LE(height, 0);
            const arr = Array.from(buf);
            const updateHeight = async () => {
                const heightChar = await this._getHeightCharWait();
                await heightChar.writeWait(arr);
            };
            updateFunctions.push(updateHeight);
        }
        // update the info
        for (const updateFunc of updateFunctions) {
            await updateFunc();
        }
    }
    /**
     * Get a user info. To use this function, you first need to authorize a user by calling authorizeUserWait function.
     * Then you can get a personal info of the user.
     *
     * ユーザ情報取得。この関数を使うにはまずauthorizeUserWait関数でユーザ認証を行う必要がある。
     * 認証後、そのユーザのユーザ情報を取得できるようになる。
     *
     * @returns UC421BLEUserInfoData object. UC421BLEUserInfoDataオブジェクト。
     */
    async getUserInfoDataWait() {
        const firstNameChar = await this._getFirstNameCharWait();
        const lastNameChar = await this._getLastNameCharWait();
        const emailChar = await this._getEmailCharWait();
        const birthChar = await this._getBirthCharWait();
        const heightChar = await this._getHeightCharWait();
        const genderChar = await this._getGenderCharWait();
        const firstNameBytes = await firstNameChar.readWait();
        const lastNameBytes = await lastNameChar.readWait();
        const emailBytes = await emailChar.readWait();
        const birthBytes = await birthChar.readWait();
        const heightBytes = await heightChar.readWait();
        const genderBytes = await genderChar.readWait();
        const firstName = String.fromCharCode(...firstNameBytes);
        const lastName = String.fromCharCode(...lastNameBytes);
        const email = String.fromCharCode(...emailBytes);
        const bufBirth = Buffer.from(birthBytes);
        const birth = {
            year: bufBirth.readUInt16LE(0),
            month: bufBirth.readUInt8(2),
            day: bufBirth.readUInt8(3),
        };
        const bHeight = Buffer.from(heightBytes);
        const height = bHeight.readInt16LE(0);
        let gender = 'unspecified';
        switch (genderBytes[0]) {
            case 0x00:
                gender = 'male';
                break;
            case 0x01:
                gender = 'female';
                break;
        }
        const userInfo = {
            firstName,
            lastName,
            email,
            birth,
            height,
            gender,
        };
        return userInfo;
    }
    /**
     * Get a list of measured weight data. To use this function, you first need to authorize a user by calling authorizeUserWait function.
     * After that, you can get the data attached to the user. If the multiple weight data are stored in memory, multiple data will be returned.
     *
     * 体重情報取得。この関数を使うにはまずauthorizeUserWait関数でユーザ認証を行う必要がある。
     * 認証後、そのユーザの体重データを取得できるようになる。データがメモリに複数保存されている場合はデータが複数返ってくる。
     *
     * @returns List of UC421BLEWeightResult object. UC421BLEWeightResultオブジェクトの配列。
     */
    async getWeightDataWait() {
        const results = [];
        const weightScaleChar = await this._getWeightScaleMeasurementCharWait();
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitGettingAllData = new Promise((res, rej) => evtEmitter.on('noDataFor500ms', async () => {
            // NOTE: We assume that all data has been notified if 500 ms passed with no data notified.
            await weightScaleChar.unregisterNotifyWait();
            res(results);
        }));
        const startGettingAllData = async () => {
            const _analyzeData = (data) => {
                const result = {};
                const buf = Buffer.from(data);
                let offset = 0;
                // flags
                const flags = buf.readUInt8(offset);
                const bit0 = 0b00000001;
                const bit1 = 0b00000010;
                const bit2 = 0b00000100;
                const bit3 = 0b00001000;
                const measurementUnit = flags & bit0 ? 'lb' : 'kg';
                const timeStampPresent = flags & bit1 ? true : false;
                const userIdPresent = flags & bit2 ? true : false;
                const bmiAndHeightPresent = flags & bit3 ? true : false;
                const byteLenFlags = 1;
                offset += byteLenFlags;
                const errorValue = Buffer.from([0xff, 0xff]).readUInt16LE(0);
                // get weight
                const resolutionWeight = measurementUnit === 'kg' ? 0.005 : 0.01;
                const weightInt = buf.readUInt16LE(offset);
                if (weightInt === errorValue) {
                    result.weight = null;
                }
                else {
                    const weightFloat = weightInt * resolutionWeight;
                    result.weight = { unit: measurementUnit, value: weightFloat };
                }
                const byteLenWeight = 2;
                offset += byteLenWeight;
                // get ts
                if (timeStampPresent) {
                    const year = buf.readUInt16LE(offset);
                    const byteLenYear = 2;
                    offset += byteLenYear;
                    const month = buf.readUInt8(offset);
                    const byteLenMonth = 1;
                    offset += byteLenMonth;
                    const day = buf.readUInt8(offset);
                    const byteLenDay = 1;
                    offset += byteLenDay;
                    const hour = buf.readUInt8(offset);
                    const byteLenHour = 1;
                    offset += byteLenHour;
                    const minute = buf.readUInt8(offset);
                    const byteLenMinute = 1;
                    offset += byteLenMinute;
                    const second = buf.readUInt8(offset);
                    const byteLenSecond = 1;
                    offset += byteLenSecond;
                    result.timestamp = {
                        year,
                        month,
                        day,
                        hour,
                        minute,
                        second,
                    };
                }
                if (userIdPresent) {
                    // Do nothing about user id.
                    const byteLenUserId = 1;
                    offset += byteLenUserId;
                }
                // get bmi
                if (bmiAndHeightPresent) {
                    const resolutionBmi = 0.1;
                    const bmiMass = buf.readUInt16LE(offset);
                    const bmi = bmiMass * resolutionBmi;
                    const byteLenBmi = 2;
                    offset += byteLenBmi;
                    const resolutionHeight = 0.1;
                    const heightMass = buf.readUInt16LE(offset);
                    const height = heightMass * resolutionHeight;
                    const byteLenHeight = 2;
                    offset += byteLenHeight;
                    result.bmi = bmi;
                    result.height = height;
                }
                return result;
            };
            let timeout = setTimeout(() => evtEmitter.emit('noDataFor500ms'), 500);
            const resetTimeout = () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => evtEmitter.emit('noDataFor500ms'), 500);
            };
            await weightScaleChar.registerNotifyWait((data) => {
                resetTimeout();
                results.push(_analyzeData(data));
            });
        };
        await startGettingAllData();
        return await waitGettingAllData;
    }
    /**
     * Get a list of measured body composition data. To use this function, you first need to authorize a user by calling authorizeUserWait function.
     * After that, you can get the data attached to the user. If the multiple body composition data are stored in memory, multiple data will be returned.
     *
     * 体組成情報取得。この関数を使うにはまずauthorizeUserWait関数でユーザ認証を行う必要がある。
     * 認証後、そのユーザの体組成データを取得できるようになる。データがメモリに複数保存されている場合はデータが複数返ってくる。
     *
     * @returns List of UC421BLEBodyCompositionResult object. UC421BLEBodyCompositionResultオブジェクトの配列。
     */
    async getBodyCompositionDataWait() {
        const results = [];
        const bodyCompositionChar = await this._getBodyCompositionMeasurementCharWait();
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitGettingAllData = new Promise((res, rej) => evtEmitter.on('noDataFor500ms', async () => {
            await bodyCompositionChar.unregisterNotifyWait();
            res(results);
        }));
        const startGettingAllData = async () => {
            const _analyzeData = (data) => {
                const result = {};
                const buf = Buffer.from(data);
                let offset = 0;
                // flags
                const flags = buf.readUInt16LE(offset);
                // add a leading 0 to make it more readable
                const bit00 = 0b0000000000000001;
                const bit01 = 0b0000000000000010;
                const bit02 = 0b0000000000000100;
                const bit03 = 0b0000000000001000;
                const bit04 = 0b0000000000010000;
                const bit05 = 0b0000000000100000;
                const bit06 = 0b0000000001000000;
                const bit07 = 0b0000000010000000;
                const bit08 = 0b0000000100000000;
                const bit09 = 0b0000001000000000;
                const bit10 = 0b0000010000000000;
                const bit11 = 0b0000100000000000;
                const bit12 = 0b0001000000000000;
                // some flags are not used but write them to make it more readable
                const measurementUnit = flags & bit00 ? 'lb' : 'kg';
                const timeStampPresent = flags & bit01 ? true : false;
                const userIdPresent = flags & bit02 ? true : false;
                const basalMetabolismPresent = flags & bit03 ? true : false;
                const musclePercentagePresent = flags & bit04 ? true : false; // not used
                const mascleMassPresent = flags & bit05 ? true : false;
                const fatFreeMassPresent = flags & bit06 ? true : false; // not used
                const softLeanMassPresent = flags & bit07 ? true : false; // not used
                const bodyWaterMassPresent = flags & bit08 ? true : false;
                const impedancePresent = flags & bit09 ? true : false; // not used
                const weightPresent = flags & bit10 ? true : false; // not used
                const heightPresent = flags & bit11 ? true : false; // not used
                const multiplePacketPresent = flags & bit12 ? true : false; // not used
                const byteLenFlags = 2;
                offset += byteLenFlags;
                const errorValue = Buffer.from([0xff, 0xff]).readUInt16LE(0);
                // body fat percentage
                const resolutionBodyFatPercentage = 0.1;
                const bodyFatPercentageInt = buf.readUInt16LE(offset);
                if (bodyFatPercentageInt === errorValue) {
                    result.bodyFatPercentage = null;
                }
                else {
                    const bodyFatPercentageFloat = bodyFatPercentageInt * resolutionBodyFatPercentage;
                    result.bodyFatPercentage = bodyFatPercentageFloat;
                }
                const byteLenBodyFatPercentage = 2;
                offset += byteLenBodyFatPercentage;
                // ts
                if (timeStampPresent) {
                    const year = buf.readUInt16LE(offset);
                    const byteLenYear = 2;
                    offset += byteLenYear;
                    const month = buf.readUInt8(offset);
                    const byteLenMonth = 1;
                    offset += byteLenMonth;
                    const day = buf.readUInt8(offset);
                    const byteLenDay = 1;
                    offset += byteLenDay;
                    const hour = buf.readUInt8(offset);
                    const byteLenHour = 1;
                    offset += byteLenHour;
                    const minute = buf.readUInt8(offset);
                    const byteLenMinute = 1;
                    offset += byteLenMinute;
                    const second = buf.readUInt8(offset);
                    const byteLenSecond = 1;
                    offset += byteLenSecond;
                    result.timestamp = {
                        year,
                        month,
                        day,
                        hour,
                        minute,
                        second,
                    };
                }
                if (userIdPresent) {
                    // Do nothing about user id.
                    const byteLenUserId = 1;
                    offset += byteLenUserId;
                }
                // basal metabolism
                if (basalMetabolismPresent) {
                    const basalMetabolismInt = buf.readUInt16LE(offset); // resolution is 1
                    if (basalMetabolismInt === errorValue) {
                        result.basalMetabolismKj = null;
                    }
                    else {
                        result.basalMetabolismKj = basalMetabolismInt;
                    }
                    const byteLenBasalMetabolism = 2;
                    offset += byteLenBasalMetabolism;
                }
                // mascle mass
                if (mascleMassPresent) {
                    const resolutionMascleMass = measurementUnit === 'kg' ? 0.005 : 0.01;
                    const mascleMassInt = buf.readUInt16LE(offset);
                    if (mascleMassInt === errorValue) {
                        result.muscleMass = null;
                    }
                    else {
                        const mascleMassFloat = mascleMassInt * resolutionMascleMass;
                        result.muscleMass = {
                            unit: measurementUnit,
                            value: mascleMassFloat,
                        };
                    }
                    const byteLenMascleMass = 2;
                    offset += byteLenMascleMass;
                }
                // body water mass
                if (bodyWaterMassPresent) {
                    const resolutionBodyWaterMass = measurementUnit === 'kg' ? 0.005 : 0.01;
                    const bodyWaterMassInt = buf.readUInt16LE(offset);
                    if (bodyWaterMassInt === errorValue) {
                        result.bodyWaterMass = null;
                    }
                    else {
                        const bodyWaterMassFloat = bodyWaterMassInt * resolutionBodyWaterMass;
                        result.bodyWaterMass = {
                            unit: measurementUnit,
                            value: bodyWaterMassFloat,
                        };
                    }
                    const byteLenBodyWaterMass = 2;
                    offset += byteLenBodyWaterMass;
                }
                return result;
            };
            let timeout = setTimeout(() => evtEmitter.emit('noDataFor500ms'), 500);
            const resetTimeout = () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => evtEmitter.emit('noDataFor500ms'), 500);
            };
            await bodyCompositionChar.registerNotifyWait((data) => {
                resetTimeout();
                results.push(_analyzeData(data));
            });
        };
        await startGettingAllData();
        return await waitGettingAllData;
    }
    /**
     * Change the runnning mode. By default it's 'measurement' mode, and if you want to do some setting, call this function with an argument 'setting' and go into 'setting' mode.
     * After 180 seconds passed since this function called, it gets back to its normal 'measurement' mode from 'setting' mode.
     *
     * 動作モード変更。デフォルトでは'measurement'(測定)モードだが、本体設定を行いたい時はこの関数を呼んで'setting'(設定)モードに変更する。
     * この関数を呼んでから180秒後に、通常の'measurement'(測定)モードに戻る。
     *
     * @param mode Target mode you want the peripheral to go into. 'measurement' or 'setting'. 変更したいモード。'measurement'または'setting'。
     */
    async changeRunningModeWait(mode) {
        const runningMode = {
            measurement: 0x02,
            setting: 0x03,
        };
        if (!runningMode[mode])
            throw new Error('Unknown mode passed in.');
        const aAndDCustomNotificationChar = await this._getAAndDCustomNotificationCharWait();
        const aAndDCustomWriteReadChar = await this._getAAndDCustomWriteReadCharWait();
        const cmdDirectionPeriToObniz = 0x00;
        const cmdDirectionObnizToPeri = 0x01;
        const cmd = 0x05;
        const cmdId = 0x0a;
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitNotification = new Promise((res, rej) => evtEmitter.on('notified', res));
        const _analyzeData = (data) => {
            const lenNotifiedCmd = 0x04;
            const resultOk = 0x00;
            const cmdOk = [
                lenNotifiedCmd,
                cmdDirectionPeriToObniz,
                cmd,
                cmdId,
                resultOk,
            ];
            if (data.length === cmdOk.length &&
                data[0] === lenNotifiedCmd &&
                data[1] === cmdDirectionPeriToObniz &&
                data[2] === cmd &&
                data[3] === cmdId) {
                if (data[4] === resultOk) {
                    evtEmitter.emit('notified');
                }
                else {
                    throw new Error('Failed to change running mode.');
                }
            }
        };
        await aAndDCustomNotificationChar.registerNotifyWait(_analyzeData);
        const lenWriteCmd = 0x04;
        await aAndDCustomWriteReadChar.writeWait([
            lenWriteCmd,
            cmdDirectionObnizToPeri,
            cmd,
            cmdId,
            runningMode[mode],
        ]);
        await waitNotification;
    }
    /**
     * Set medical exam mode. To use this function, you first need to have the peripheral go into 'setting' mode by calling changeRunningModeWait function.
     * Medical exam mode does not require normal users(No: 1 ~ 5 and cc: 0 ~ 9999), it only uses a guest user(No: 99 and cc: 9999) and no data is saved in memory.
     * This mode supports two situations. 'measurementWithApp' and 'measurementWithoutApp' both indicated in an advertisement.
     * Currently, obniz.js only supports the 'measurementWithoutApp' situation, so you can only get the weight data with this mode.
     *
     * 検診モード設定。この関数を使うには、まずchangeRunningModeWait関数を呼んで動作モードを'setting'にする必要がある。
     * 検診モードは通常のユーザではなくゲストユーザを使用し、測定値はメモリに保存されない。
     * このモードは2つのシチュエーションに対応している。（'アプリ有り計測'と'アプリ無し計測'。アドバタイズメントの中で確認できる）
     * obniz.jsでは現在'アプリ無し計測'のみ対応しており、この場合は体重データのみ取得可能。
     *
     * @param mode 'on' or 'off'
     */
    async setMedicalExamModeWait(mode) {
        // NOTE: We have to go into 'setting' mode before configuring this mode.
        if (!(mode === 'on' || mode === 'off'))
            throw new Error("mode should be either 'on' or 'off'");
        const aAndDCustomNotificationChar = await this._getAAndDCustomNotificationCharWait();
        const aAndDCustomWriteReadChar = await this._getAAndDCustomWriteReadCharWait();
        const cmdDirectionPeriToObniz = 0x00;
        const cmdDirectionObnizToPeri = 0x01;
        const cmd = 0x05;
        const cmdId = 0x28;
        const cmdOff = 0x00;
        const cmdOn = 0x01;
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitNotification = new Promise((res, rej) => evtEmitter.on('notified', res));
        const _analyzeData = (data) => {
            const lenNotifiedCmd = 0x04;
            const resultOk = 0x00;
            const cmdOk = [
                lenNotifiedCmd,
                cmdDirectionPeriToObniz,
                cmd,
                cmdId,
                resultOk,
            ];
            if (data.length === cmdOk.length &&
                data[0] === lenNotifiedCmd &&
                data[1] === cmdDirectionPeriToObniz &&
                data[2] === cmd &&
                data[3] === cmdId) {
                if (data[4] === resultOk) {
                    evtEmitter.emit('notified');
                }
                else {
                    throw new Error('Failed to set medical exam mode.');
                }
            }
        };
        await aAndDCustomNotificationChar.registerNotifyWait(_analyzeData);
        const lenWriteCmd = 0x04;
        await aAndDCustomWriteReadChar.writeWait([
            lenWriteCmd,
            cmdDirectionObnizToPeri,
            cmd,
            cmdId,
            mode === 'on' ? cmdOn : cmdOff,
        ]);
        await waitNotification;
    }
    /**
     * Get if the medical exam mode is on or off.
     *
     * 検診モード設定状況取得。
     *
     * @returns true for medical exam mode on and false for off
     */
    async isMedicalExamModeOnWait() {
        const aAndDCustomWriteReadChar = await this._getAAndDCustomWriteReadCharWait();
        const aAndDCustomNotificationChar = await this._getAAndDCustomNotificationCharWait();
        const evtEmitter = new eventemitter3_1.EventEmitter();
        const waitNotification = new Promise((res, rej) => evtEmitter.on('notified', res));
        let isMedicalExamModeOn = false;
        const _analyzeData = (data) => {
            isMedicalExamModeOn = data[4] === 0x01 ? true : false;
            evtEmitter.emit('notified');
        };
        await aAndDCustomNotificationChar.registerNotifyWait(_analyzeData);
        await aAndDCustomWriteReadChar.writeWait([0x03, 0x01, 0x05, 0x29]);
        await waitNotification;
        return isMedicalExamModeOn;
    }
    /**
     * Send disconnect request to peripheral.
     *
     * 切断要求をペリフェラルに送信。
     */
    async disconnectWait() {
        await this._peripheral.disconnectWait();
    }
    /*
      PRIVSTE METHODS
    */
    // utils
    _toCcArr(cc) {
        if (cc < 0 || cc > 9999) {
            throw new Error('cc must be within the range from 0000 to 9999.');
        }
        const buf = Buffer.alloc(2);
        buf.writeUInt16LE(cc, 0);
        const ccArr = Array.from(buf);
        return ccArr;
    }
    _getAge(year, month, day) {
        // NOTE: Add leading zeros if needed.
        const yearStr = year.toString().padStart(4, '0');
        const monthStr = month.toString().padStart(2, '0');
        const dayStr = day.toString().padStart(2, '0');
        const birthdayStr = `${yearStr}-${monthStr}-${dayStr}`;
        const ageYears = moment_1.default().diff(birthdayStr, 'years');
        if (Number.isNaN(ageYears))
            throw new Error('Invalid birthday recieved.');
        return ageYears;
    }
    async _setTimeWait() {
        const currentTimeChar = await this._getCurrentTimeCharWait();
        const year = new Date().getFullYear();
        const month = new Date().getMonth() + 1;
        const day = new Date().getDate();
        const hour = new Date().getHours();
        const minute = new Date().getMinutes();
        const second = new Date().getSeconds();
        const dayOfWeek = 0x00; // fixed
        const secondFraction = 0x00; // fixed
        const adjustReason = 0b00000000; // 8 bits. Don't know the purpose of this param... No explanations about this on doc:(
        const byteLenYear = 2;
        const byteLenMonth = 1;
        const byteLenDay = 1;
        const byteLenHour = 1;
        const byteLenMinute = 1;
        const byteLenSecond = 1;
        const byteLenDayOfWeek = 1;
        const byteLenSecondFraction = 1;
        const byteLenAdjustReason = 1;
        const buf = Buffer.alloc(byteLenYear +
            byteLenMonth +
            byteLenDay +
            byteLenHour +
            byteLenMinute +
            byteLenSecond +
            byteLenDayOfWeek +
            byteLenSecondFraction +
            byteLenAdjustReason);
        let offset = 0;
        buf.writeUInt16LE(year, offset);
        offset += byteLenYear;
        buf.writeUInt8(month, offset);
        offset += byteLenMonth;
        buf.writeUInt8(day, offset);
        offset += byteLenDay;
        buf.writeUInt8(hour, offset);
        offset += byteLenHour;
        buf.writeUInt8(minute, offset);
        offset += byteLenMinute;
        buf.writeUInt8(second, offset);
        offset += byteLenSecond;
        buf.writeUInt8(dayOfWeek, offset);
        offset += byteLenDayOfWeek;
        buf.writeUInt8(secondFraction, offset);
        offset += byteLenSecondFraction;
        buf.writeUInt8(adjustReason, offset);
        offset += byteLenAdjustReason;
        const arrCurrentTime = Array.from(buf);
        await currentTimeChar.writeWait(arrCurrentTime);
    }
    // services
    async _getCurrentTimeServiceWait() {
        const currentTimeService = this._peripheral.getService('1805');
        if (!currentTimeService)
            throw new Error('Failed to get CurrentTimeService.');
        return currentTimeService;
    }
    async _getUserDataServiceWait() {
        const userDataService = this._peripheral.getService('181C');
        if (!userDataService)
            throw new Error('Failed to get UserDataService.');
        return userDataService;
    }
    async _getWeightScaleServiceWait() {
        const weightScaleService = this._peripheral.getService('181D');
        if (!weightScaleService)
            throw new Error('Failed to get WeightScaleService.');
        return weightScaleService;
    }
    async _getBodyCompositionServiceWait() {
        const bodyCompositionService = this._peripheral.getService('181B');
        if (!bodyCompositionService)
            throw new Error('Failed to get BodyCompositionService.');
        return bodyCompositionService;
    }
    async _getAAndDCustomServiceWait() {
        const aAndDCustomService = this._peripheral.getService('11127000-B364-11E4-AB27-0800200C9A66');
        if (!aAndDCustomService)
            throw new Error('Failed to get AAndDCustomService.');
        return aAndDCustomService;
    }
    // charactaristics
    async _getCurrentTimeCharWait() {
        const currentTimeService = await this._getCurrentTimeServiceWait();
        const currentTimeChar = currentTimeService.getCharacteristic('2A2B');
        if (!currentTimeChar)
            throw new Error('Failed to get CurrentTime charactaristic.');
        return currentTimeChar;
    }
    async _getUserControlPointCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const userControlPointChar = userDataService.getCharacteristic('2A9F');
        if (!userControlPointChar)
            throw new Error('Failed to get UserControlPoint charactaristic.');
        return userControlPointChar;
    }
    async _getFirstNameCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const fistNameChar = userDataService.getCharacteristic('2A8A');
        if (!fistNameChar)
            throw new Error('Failed to get FirstName charactaristic.');
        return fistNameChar;
    }
    async _getLastNameCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const lastNameChar = userDataService.getCharacteristic('2A90');
        if (!lastNameChar)
            throw new Error('Failed to get LastName charactaristic.');
        return lastNameChar;
    }
    async _getEmailCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const emailChar = userDataService.getCharacteristic('2A87');
        if (!emailChar)
            throw new Error('Failed to get Email charactaristic.');
        return emailChar;
    }
    async _getBirthCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const birthChar = userDataService.getCharacteristic('2A85');
        if (!birthChar)
            throw new Error('Failed to get Birth charactaristic.');
        return birthChar;
    }
    async _getGenderCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const genderChar = userDataService.getCharacteristic('2A8C');
        if (!genderChar)
            throw new Error('Failed to get Gender charactaristic.');
        return genderChar;
    }
    async _getHeightCharWait() {
        const userDataService = await this._getUserDataServiceWait();
        const heightChar = userDataService.getCharacteristic('2A8E');
        if (!heightChar)
            throw new Error('Failed to get Height charactaristic.');
        return heightChar;
    }
    async _getWeightScaleMeasurementCharWait() {
        const weightScaleService = await this._getWeightScaleServiceWait();
        const weightScaleMeasurementChar = weightScaleService.getCharacteristic('2A9D');
        if (!weightScaleMeasurementChar)
            throw new Error('Failed to get Weight Measurement charactaristic.');
        return weightScaleMeasurementChar;
    }
    async _getBodyCompositionMeasurementCharWait() {
        const bodyCompositionService = await this._getBodyCompositionServiceWait();
        const bodyCompositionMeasurementChar = bodyCompositionService.getCharacteristic('2A9C');
        if (!bodyCompositionMeasurementChar)
            throw new Error('Failed to get Body Composition Measurement charactaristic.');
        return bodyCompositionMeasurementChar;
    }
    async _getAAndDCustomWriteReadCharWait() {
        const aAndDCustomService = await this._getAAndDCustomServiceWait();
        const aAndDCustomWriteReadChar = aAndDCustomService.getCharacteristic('11127001-B364-11E4-AB27-0800200C9A66');
        if (!aAndDCustomWriteReadChar)
            throw new Error('Failed to get A&D Custom Read Write charactaristic.');
        return aAndDCustomWriteReadChar;
    }
    async _getAAndDCustomNotificationCharWait() {
        const aAndDCustomService = await this._getAAndDCustomServiceWait();
        const aAndDCustomNotificationChar = aAndDCustomService.getCharacteristic('11127002-B364-11E4-AB27-0800200C9A66');
        if (!aAndDCustomNotificationChar)
            throw new Error('Failed to get A&D Custom Notification charactaristic.');
        return aAndDCustomNotificationChar;
    }
}
exports.default = UC421BLE;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/UT201BLE/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.UT201BLE
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** UT201BLE management class UT201BLEを管理するクラス */
class UT201BLE {
    constructor(peripheral, timezoneOffsetMinute) {
        if (!peripheral || !UT201BLE.isDevice(peripheral)) {
            throw new Error('peripheral is not UT201BLE');
        }
        this._peripheral = peripheral;
        this._timezoneOffsetMinute = timezoneOffsetMinute;
    }
    static info() {
        return {
            name: 'UT201BLE',
        };
    }
    /**
     * Verify that the received peripheral is from the UT201BLE
     *
     * 受け取ったPeripheralがUT201BLEのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is UT201BLE
     *
     * UT201BLEかどうか
     */
    static isDevice(peripheral) {
        return (peripheral.localName && peripheral.localName.startsWith('A&D_UT201BLE_'));
    }
    isPairingMode() {
        if (!this._peripheral) {
            throw new Error('UT201BLE not found');
        }
        // adv_data[2]はFlagsで、bit0が1の場合Pairng Mode(Limited Discoverable Mode)
        if (this._peripheral.adv_data[2] === 5) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Pair with the device
     *
     * デバイスとペアリング
     *
     * @returns pairing key ペアリングキー
     */
    async pairingWait() {
        if (!this._peripheral) {
            throw new Error('UT201BLE not found');
        }
        this._peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        let key = null;
        await this._peripheral.connectWait({
            pairingOption: {
                onPairedCallback: (pairingKey) => {
                    key = pairingKey;
                },
            },
        });
        const { timeChar, customServiceChar } = this._getChars();
        await this._writeTimeCharWait(this._timezoneOffsetMinute);
        await customServiceChar.writeWait([2, 1, 3]); // disconnect req
        return key;
    }
    /**
     * Get data from the UT201BLE
     *
     * UT201BLEからデータを取得
     *
     * @param pairingKeys pairing key ペアリングキー
     *
     * @returns data from the UT201BLE UT201BLEから受け取ったデータ
     */
    async getDataWait(pairingKeys) {
        if (!this._peripheral) {
            throw new Error('UT201BLE not found');
        }
        await this._peripheral.connectWait({
            pairingOption: {
                keys: pairingKeys,
            },
        });
        if (!this._peripheral) {
            throw new Error('UT201BLE not found');
        }
        const results = [];
        const { temperatureMeasurementChar, timeChar, customServiceChar, batteryChar, } = this._getChars();
        const waitDisconnect = new Promise((resolve, reject) => {
            if (!this._peripheral)
                return;
            this._peripheral.ondisconnect = (reason) => {
                resolve(results);
            };
        });
        const battery = await batteryChar.readWait();
        await customServiceChar.writeWait([2, 0, 0xe1]); // send all data
        await this._writeTimeCharWait(this._timezoneOffsetMinute);
        await temperatureMeasurementChar.registerNotifyWait((data) => {
            results.push(this._analyzeData(data, battery));
        });
        return await waitDisconnect;
    }
    _readFloatLE(buffer, index) {
        const data = buffer.readUInt32LE(index);
        let mantissa = data & 0x00ffffff;
        if ((mantissa & 0x00800000) > 0) {
            mantissa = -1 * (~(mantissa - 0x01) & 0x00ffffff);
        }
        const exponential = data >> 24;
        return mantissa * Math.pow(10, exponential);
    }
    _analyzeData(data, battery) {
        const buf = Buffer.from(data);
        const flags = buf.readUInt8(0);
        let index = 1;
        const result = {};
        if (flags & 0x01) {
            // Fahrenheit
            result.fahrenheit = this._readFloatLE(buf, index);
            index += 4;
        }
        else {
            // Celsius
            result.celsius = this._readFloatLE(buf, index);
            index += 4;
        }
        if (flags & 0x02) {
            // Time Stamp field present
            result.date = {
                year: buf.readUInt16LE(index),
                month: buf.readUInt8(index + 2),
                day: buf.readUInt8(index + 3),
                hour: buf.readUInt8(index + 4),
                minute: buf.readUInt8(index + 5),
                second: buf.readUInt8(index + 6),
            };
            index += 7;
        }
        if (flags & 0x04) {
            const types = [
                'unknown',
                'Armpit',
                'Body',
                'Ear',
                'Finger',
                'Gastro-intestinal Tract',
                'Mouth',
                'Rectum',
                'Toe',
                'Tympanum',
            ];
            const value = buf.readUInt8(index);
            index++;
            result.temperatureType = types[value] || 'unknown';
            result.battery = battery[0];
        }
        return result;
    }
    _getChars() {
        if (!this._peripheral) {
            throw new Error('UT201BLE not found');
        }
        const temperatureMeasurementChar = this._peripheral
            .getService('1809')
            .getCharacteristic('2A1C');
        const timeChar = this._peripheral
            .getService('1809')
            .getCharacteristic('2A08');
        const customServiceChar = this._peripheral
            .getService('233bf0005a341b6d975c000d5690abe4')
            .getCharacteristic('233bf0015a341b6d975c000d5690abe4');
        const batteryChar = this._peripheral
            .getService('180F')
            .getCharacteristic('2A19');
        return {
            temperatureMeasurementChar,
            timeChar,
            customServiceChar,
            batteryChar,
        };
    }
    async _writeTimeCharWait(timeOffsetMinute) {
        const { timeChar } = this._getChars();
        const date = new Date();
        date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);
        const buf = Buffer.alloc(7);
        buf.writeUInt16LE(date.getUTCFullYear(), 0);
        buf.writeUInt8(date.getUTCMonth() + 1, 2);
        buf.writeUInt8(date.getUTCDate(), 3);
        buf.writeUInt8(date.getUTCHours(), 4);
        buf.writeUInt8(date.getUTCMinutes(), 5);
        buf.writeUInt8(date.getUTCSeconds(), 6);
        const arr = Array.from(buf);
        await timeChar.writeWait(arr);
    }
}
exports.default = UT201BLE;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/VitalBand/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.VitalBand
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
class VitalBand extends ObnizPartsBleAbstract_1.ObnizPartsBle {
    constructor() {
        super(...arguments);
        this.staticClass = VitalBand;
    }
}
exports.default = VitalBand;
VitalBand.AvailableBleMode = 'Beacon';
VitalBand.PartsName = 'VitalBand';
VitalBand.CompanyID = [0xff, 0xff];
VitalBand.Config = {
    SN: {
        type: 'numBE',
        index: 0,
        length: 3,
    },
    heart_rate: {
        type: 'numBE',
        index: 3,
    },
    body_temp: {
        type: 'numLE',
        index: 4,
        length: 2,
        multiple: 0.01,
    },
    blood_pleasure_high: {
        type: 'numBE',
        index: 6,
    },
    blood_pleasure_low: {
        type: 'numBE',
        index: 7,
    },
    Sp02: {
        type: 'numBE',
        index: 8,
    },
    battery: {
        type: 'numBE',
        index: 9,
    },
    steps: {
        type: 'numLE',
        index: 10,
        length: 3,
    },
};
VitalBand.BeaconDataStruct = {
    SN: VitalBand.Config.SN,
    heart_rate: VitalBand.Config.heart_rate,
    body_temp: VitalBand.Config.body_temp,
    blood_pleasure_high: VitalBand.Config.blood_pleasure_high,
    blood_pleasure_low: VitalBand.Config.blood_pleasure_low,
    Sp02: VitalBand.Config.Sp02,
    battery: VitalBand.Config.battery,
    steps: VitalBand.Config.steps,
};


/***/ }),

/***/ "./dist/src/parts/Ble/iBS01/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS01
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/**
 * @deprecated
 *
 * iBS01 management class iBS01を管理するクラス
 *
 * Recommend use iBS01G, iBS01H
 *
 * Use only if you are using an old iBS01 series sensor
 *
 * iBS01G, iBS01H の使用を推奨
 *
 * 旧iBS01シリーズのセンサを使用している場合のみお使いください
 */
class iBS01 extends iBS_1.BaseiBS01 {
    constructor() {
        super(...arguments);
        this.staticClass = iBS01;
    }
}
exports.default = iBS01;
iBS01.PartsName = 'iBS01';
iBS01.BeaconDataStruct = {
    battery: iBS_1.BaseiBS01.Config.battery,
    button: iBS_1.BaseiBS01.Config.button,
    moving: iBS_1.BaseiBS01.Config.moving,
    hall_sensor: iBS_1.BaseiBS01.Config.event,
    fall: iBS_1.BaseiBS01.Config.fall,
    // subtype=0x03 older version has no subtype
    magic: iBS_1.BaseiBS01.getUniqueData(1, -1).magic,
};


/***/ }),

/***/ "./dist/src/parts/Ble/iBS01G/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS01G
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS01G management class iBS01Gを管理するクラス */
class iBS01G extends iBS_1.BaseiBS01 {
    constructor() {
        super(...arguments);
        this.staticClass = iBS01G;
    }
}
exports.default = iBS01G;
iBS01G.PartsName = 'iBS01G';
iBS01G.BeaconDataLength = 0x19;
iBS01G.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS01.Config.battery, button: iBS_1.BaseiBS01.Config.button, moving: iBS_1.BaseiBS01.Config.moving, fall: iBS_1.BaseiBS01.Config.fall }, iBS_1.BaseiBS01.getUniqueData(1, 0x06));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS01H/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS01H
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS01H management class iBS01Hを管理するクラス */
class iBS01H extends iBS_1.BaseiBS01 {
    constructor() {
        super(...arguments);
        this.staticClass = iBS01H;
    }
}
exports.default = iBS01H;
iBS01H.PartsName = 'iBS01H';
iBS01H.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS01.Config.battery, button: iBS_1.BaseiBS01.Config.button, hall_sensor: iBS_1.BaseiBS01.Config.event }, iBS_1.BaseiBS01.getUniqueData(1, 0x04));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS01RG/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS01RG
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
class iBS01RG extends iBS_1.BaseiBS01 {
    constructor() {
        super(...arguments);
        this.staticClass = iBS01RG;
    }
}
exports.default = iBS01RG;
iBS01RG.PartsName = 'iBS01RG';
iBS01RG.BeaconDataLength = 0x19;
iBS01RG.BeaconDataStruct = {
    battery: Object.assign(Object.assign({}, iBS_1.BaseiBS01.Config.battery), { type: 'custom', func: (data) => ObnizPartsBleAbstract_1.uint([data[0], data[1] & 0x0f]) * 0.01 }),
    active: Object.assign(Object.assign({}, iBS_1.BaseiBS01.Config.event), { type: 'bool00010000' }),
    button: Object.assign(Object.assign({}, iBS_1.BaseiBS01.Config.button), { type: 'bool00100000' }),
    acceleration: iBS_1.BaseiBS01.Config.acceleration,
    magic: iBS_1.BaseiBS01.getUniqueData(1.1, -1).magic,
};


/***/ }),

/***/ "./dist/src/parts/Ble/iBS01T/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS01T
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS01T management class iBS01Tを管理するクラス */
class iBS01T extends iBS_1.BaseiBS01 {
    constructor() {
        super(...arguments);
        this.staticClass = iBS01T;
    }
}
exports.default = iBS01T;
iBS01T.PartsName = 'iBS01T';
iBS01T.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS01.Config.battery, button: iBS_1.BaseiBS01.Config.button, moving: iBS_1.BaseiBS01.Config.moving, reed: iBS_1.BaseiBS01.Config.event, temperature: iBS_1.BaseiBS01.Config.temperature, humidity: iBS_1.BaseiBS01.Config.humidity }, iBS_1.BaseiBS01.getUniqueData(1, 0x05));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS02IR/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS02IR
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS02IR management class iBS02IRを管理するクラス */
class iBS02IR extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS02IR;
    }
}
exports.default = iBS02IR;
iBS02IR.PartsName = 'iBS02IR';
iBS02IR.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, event: iBS_1.BaseiBS.Config.event }, iBS_1.BaseiBS.getUniqueData(2, 0x02));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS02PIR/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS02PIR
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS02PIR management class iBS02PIRを管理するクラス */
class iBS02PIR extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS02PIR;
    }
}
exports.default = iBS02PIR;
iBS02PIR.PartsName = 'iBS02PIR';
iBS02PIR.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, event: iBS_1.BaseiBS.Config.event }, iBS_1.BaseiBS.getUniqueData(2, 0x01));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS03
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS03 management class iBS03を管理するクラス */
class iBS03 extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS03;
    }
}
exports.default = iBS03;
iBS03.PartsName = 'iBS03';
iBS03.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button, moving: iBS_1.BaseiBS.Config.moving, hall_sensor: iBS_1.BaseiBS.Config.event }, iBS_1.BaseiBS.getUniqueData(3, 0x10));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03G/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS03G
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS03G management class iBS03Gを管理するクラス */
class iBS03G extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS03G;
    }
}
exports.default = iBS03G;
iBS03G.PartsName = 'iBS03G';
iBS03G.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button, moving: iBS_1.BaseiBS.Config.moving, fall: iBS_1.BaseiBS.Config.fall }, iBS_1.BaseiBS.getUniqueData(3, 0x16));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03R/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS04i
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** iBS03R management class iBS03Rを管理するクラス */
class IBS03R {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'iBS03R',
        };
    }
    /**
     * Verify that the received peripheral is from the iBS03R
     *
     * 受け取ったPeripheralがiBS03Rのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the iBS03R
     *
     * iBS03Rかどうか
     */
    static isDevice(peripheral) {
        return IBS03R.getDeviceArray(peripheral) !== null;
    }
    /**
     * Get a data from the iBS03R
     *
     * iBS03Rからデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the iBS03R iBS03Rから受け取ったデータ
     */
    static getData(peripheral) {
        const adv = IBS03R.getDeviceArray(peripheral);
        if (adv === null) {
            return null;
        }
        const data = {
            battery: (adv[5] + adv[6] * 256) * 0.01,
            button: Boolean(adv[7]),
            distance: adv[10] + adv[11] * 256,
            address: peripheral.address,
        };
        return data;
    }
    static getDeviceArray(peripheral) {
        const advertise = !peripheral.advertise_data_rows
            ? []
            : peripheral.advertise_data_rows.filter((adv) => {
                let find = false;
                if (this.deviceAdv.length > adv.length) {
                    return find;
                }
                for (let index = 0; index < this.deviceAdv.length; index++) {
                    if (this.deviceAdv[index] === -1) {
                        continue;
                    }
                    if (adv[index] === this.deviceAdv[index]) {
                        find = true;
                        continue;
                    }
                    find = false;
                    break;
                }
                return find;
            });
        if (advertise.length !== 1) {
            return null;
        }
        return advertise[0];
    }
}
exports.default = IBS03R;
IBS03R.deviceAdv = [
    0xff,
    0x0d,
    0x00,
    0x83,
    0xbc,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    0x13,
    -1,
    -1,
    -1,
];


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03T/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS03T
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS03T management class iBS03Tを管理するクラス */
class iBS03T extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS03T;
    }
}
exports.default = iBS03T;
iBS03T.PartsName = 'iBS03T';
iBS03T.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button, moving: iBS_1.BaseiBS.Config.moving, hall_sensor: iBS_1.BaseiBS.Config.event, temperature: iBS_1.BaseiBS.Config.temperature }, iBS_1.BaseiBS.getUniqueData(3, 0x15));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03TP/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS03TP
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS03TP management class iBS03TPを管理するクラス */
class iBS03TP extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS03TP;
    }
}
exports.default = iBS03TP;
iBS03TP.PartsName = 'iBS03TP';
iBS03TP.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button, moving: iBS_1.BaseiBS.Config.moving, hall_sensor: iBS_1.BaseiBS.Config.event, temperature: iBS_1.BaseiBS.Config.temperature, probe_temperature: Object.assign(Object.assign({}, iBS_1.BaseiBS.Config.temperature), { index: 7 }) }, iBS_1.BaseiBS.getUniqueData(3, 0x17));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS03T_RH/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS03T_RH
 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
class iBS03T_RH extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS03T_RH;
    }
}
exports.default = iBS03T_RH;
iBS03T_RH.PartsName = 'iBS03T_RH';
iBS03T_RH.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button, moving: iBS_1.BaseiBS.Config.moving, hall_sensor: iBS_1.BaseiBS.Config.event, temperature: iBS_1.BaseiBS.Config.temperature, humidity: iBS_1.BaseiBS.Config.humidity }, iBS_1.BaseiBS.getUniqueData(3, 0x14));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS04/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS04
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS04 management class iBS04を管理するクラス */
class iBS04 extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS04;
    }
}
exports.default = iBS04;
iBS04.PartsName = 'iBS04';
iBS04.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, button: iBS_1.BaseiBS.Config.button }, iBS_1.BaseiBS.getUniqueData(4, 0x19));


/***/ }),

/***/ "./dist/src/parts/Ble/iBS04i/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS04i
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS04i management class iBS04iを管理するクラス */
class iBS04i extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS04i;
    }
}
exports.default = iBS04i;
iBS04i.PartsName = 'iBS04i';
iBS04i.CompanyID = ObnizPartsBleAbstract_1.iBeaconCompanyID;
iBS04i.CompanyID_ScanResponse = iBS_1.BaseiBS.CompanyID;
iBS04i.BeaconDataLength = 0x1a;
iBS04i.BeaconDataLength_ScanResponse = iBS_1.BaseiBS.BeaconDataLength;
iBS04i.BeaconDataStruct = Object.assign(Object.assign({ battery: Object.assign(Object.assign({}, iBS_1.BaseiBS.Config.battery), { scanResponse: true }), button: Object.assign(Object.assign({}, iBS_1.BaseiBS.Config.button), { scanResponse: true }) }, iBS_1.BaseiBS.getUniqueData(4, 0x18, 0, true)), ObnizPartsBleAbstract_1.iBeaconData);


/***/ }),

/***/ "./dist/src/parts/Ble/iBS05H/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS05H
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const iBS_1 = __webpack_require__("./dist/src/parts/Ble/utils/abstracts/iBS.js");
/** iBS05H management class iBS05Hを管理するクラス */
class iBS05H extends iBS_1.BaseiBS {
    constructor() {
        super(...arguments);
        this.staticClass = iBS05H;
    }
}
exports.default = iBS05H;
iBS05H.PartsName = 'iBS05H';
iBS05H.CompanyID = [0x2c, 0x08];
iBS05H.BeaconDataStruct = Object.assign({ battery: iBS_1.BaseiBS.Config.battery, hall_sensor: iBS_1.BaseiBS.Config.event, count: iBS_1.BaseiBS.Config.count }, iBS_1.BaseiBS.getUniqueData(5, 0x31));


/***/ }),

/***/ "./dist/src/parts/Ble/linking/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const advertising_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/advertising.js"));
const device_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/device.js"));
/** products supporting Linking management class Linking対応製品を管理するクラス */
class Linking {
    constructor(params) {
        /** not used */
        this.PRIMARY_SERVICE_UUID_LIST = [
            'b3b3690150d34044808d50835b13a6cd',
            'fe4e',
        ];
        this.initialized = false;
        this.keys = [];
        this.requiredKeys = [];
        this.peripheral = null;
        this.onadvertisement = null;
        this.ondiscover = null;
        // Private properties
        this._discover_status = false;
        this._discover_wait = 3000; // ms
        this._discover_timer = null;
        this._peripherals = {};
    }
    static info() {
        return {
            name: 'Linking',
        };
    }
    get LinkingAdvertising() {
        return advertising_1.default;
    }
    get LinkingDevice() {
        return device_1.default;
    }
    wired(obniz) {
        this.obniz = obniz;
    }
    /**
     * Use {@linkplain initWait}
     *
     * {@linkplain initWait} を使ってください
     *
     * @deprecated
     */
    init() {
        return this.initWait();
    }
    /**
     * Initialize BLE module
     *
     * BLEを初期化
     */
    async initWait() {
        await this.obniz.ble.initWait();
        this.initialized = true;
    }
    /**
     * Use {@linkplain discoverWait}
     *
     * {@linkplain discoverWait} を使ってください
     *
     * @deprecated
     * @param p
     */
    discover(p) {
        return this.discoverWait(p);
    }
    /**
     * Search for devices with specified parameters
     *
     * 指定したパラメータのデバイスを探索
     *
     * @param p Parameters for device デバイスに関するパラメータ
     *
     * @returns Array of device objects found {@linkplain LinkingDevice}
     *
     * 見つかったデバイスオブジェクトの配列 {@linkplain LinkingDevice}
     */
    discoverWait(p) {
        this._checkInitialized();
        let duration = 5000;
        let name_filter = '';
        let id_filter = '';
        let quick = false;
        if (p && typeof p === 'object') {
            if (p.duration !== undefined && p.duration !== null) {
                duration = p.duration;
                if (duration < 1000) {
                    duration = 1000;
                }
            }
            if (p.nameFilter !== undefined && p.nameFilter !== null) {
                name_filter = p.nameFilter;
            }
            if (p.idFilter !== undefined && p.idFilter !== null) {
                id_filter = p.idFilter;
            }
            if (p.quick !== undefined && p.quick !== null) {
                quick = p.quick;
            }
        }
        return new Promise((resolve, reject) => {
            let timer = null;
            const finishDiscovery = () => {
                if (timer) {
                    clearTimeout(timer);
                }
                this.stopScan();
                const device_list = [];
                for (const addr in this._peripherals) {
                    device_list.push(this._peripherals[addr]);
                }
                resolve(device_list);
            };
            this._peripherals = {};
            this.obniz.ble.scan.onfind = (peripheral) => {
                const dev = this._discoveredDevice(peripheral, name_filter, id_filter);
                if (quick && dev) {
                    finishDiscovery();
                    return;
                }
            };
            this._scanDevices();
            this._discover_status = true;
            timer = setTimeout(() => {
                finishDiscovery();
            }, duration);
        });
    }
    _checkInitialized() {
        if (this.initialized === false) {
            throw new Error('The `init()` method has not been called yet.');
        }
        if (this._discover_status === true) {
            throw new Error('The `discover()` or the `startScan()` method is in progress.');
        }
    }
    _discoveredDevice(peripheral, name_filter, id_filter) {
        if (!peripheral.localName) {
            return null;
        }
        // if (!peripheral.id) {
        //   return null;
        // }
        if (name_filter && peripheral.localName.indexOf(name_filter) !== 0) {
            return null;
        }
        // if (id_filter && peripheral.id.indexOf(id_filter) !== 0) {
        //   return null;
        // }
        const addr = peripheral.address;
        if (this._peripherals[addr]) {
            return null;
        }
        const device = new device_1.default(peripheral);
        if (this.ondiscover && typeof this.ondiscover === 'function') {
            this.ondiscover(device);
        }
        this._peripherals[addr] = device;
        return device;
    }
    _scanDevices() {
        this.obniz.ble.scan.onfinish = () => {
            // console.log("scan timeout!")
            this._discover_status = false;
        };
        // var target = {
        //   uuids: this.PRIMARY_SERVICE_UUID_LIST
        // };
        this.obniz.ble.scan.startWait();
        this._discover_status = true;
    }
    /**
     * Finish scanning device
     *
     * デバイスのスキャンを終了
     */
    stopScan() {
        if (this._discover_status === true) {
            this._discover_status = false;
            if (this._discover_timer !== null) {
                clearTimeout(this._discover_timer);
                this._discover_timer = null;
            }
            this.obniz.ble.scan.endWait();
        }
    }
    /**
     * Start scanning the device
     *
     * デバイスのスキャンを開始
     *
     * @param p Parameters for device デバイスに関するパラメータ
     */
    startScan(p) {
        this._checkInitialized();
        let name_filter = '';
        let id_filter = '';
        if (p && typeof p === 'object') {
            if (p.nameFilter !== undefined && p.nameFilter !== null) {
                name_filter = p.nameFilter;
            }
            if (p.idFilter !== undefined && p.idFilter !== null) {
                id_filter = p.idFilter;
            }
        }
        this.obniz.ble.scan.onfind = (peripheral) => {
            if (!peripheral.localName) {
                return;
            }
            if (name_filter && peripheral.localName.indexOf(name_filter) !== 0) {
                return;
            }
            // TODO
            // if (id_filter && peripheral.id.indexOf(id_filter) !== 0) {
            //   return;
            // }
            if (typeof this.onadvertisement === 'function') {
                const parsed = advertising_1.default.parse(peripheral);
                if (parsed) {
                    this.onadvertisement(parsed);
                }
            }
        };
        this._scanDevices();
    }
}
exports.default = Linking;


/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/advertising.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - advertising.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-11-02
 * ---------------------------------------------------------------- */

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ieee754_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/ieee754.js"));
class LinkingAdvertising {
    static parse(peripheral) {
        const ad = peripheral;
        if (ad.adv_data.length < 5) {
            return null;
        }
        const manu = Buffer.from(ad.adv_data.slice(5));
        //    const manu = ad.manufacturerData;
        if (!manu || manu.length < 8) {
            return null;
        }
        // Company identifier
        const company_id = manu.readUInt16LE(0);
        let company_name = 'Unknown';
        if (company_id === 0x02e2) {
            company_name = 'NTT docomo';
        }
        // Version
        const version = manu.readUInt8(2) >>> 4;
        // Vendor identifier
        const vendor_id = (manu.readUInt16BE(2) >>> 4) & 0b11111111;
        // Individual number
        const indi_num = (manu.readUInt32BE(3) >>> 8) & (Math.pow(2, 20) - 1);
        // Beacon Data
        const beacon_data_list = [];
        for (let offset = 6; offset < manu.length; offset += 2) {
            const beacon_buf = manu.slice(offset, offset + 2);
            // Beacon service data
            if (beacon_buf.length === 2) {
                const beacon_data = this._parseBeaconServiceData(beacon_buf);
                beacon_data_list.push(beacon_data);
            }
        }
        return {
            id: peripheral.id,
            uuid: peripheral.uuid,
            address: peripheral.address,
            localName: ad.localName,
            serviceUuids: ad.serviceUuids,
            txPowerLevel: 0,
            rssi: peripheral.rssi,
            distance: Math.pow(10, (ad.txPowerLevel - peripheral.rssi) / 20),
            companyId: company_id,
            companyName: company_name,
            version,
            vendorId: vendor_id,
            individualNumber: indi_num,
            beaconDataList: beacon_data_list,
        };
    }
    static _parseBeaconServiceData(buf) {
        const bufn = buf.readUInt16BE(0);
        const service_id = bufn >>> 12;
        const n = bufn & 0b0000111111111111;
        let res = {};
        if (service_id === 0) {
            res = {
                name: 'General',
            };
        }
        else if (service_id === 1) {
            res = {
                name: 'Temperature (°C)',
                temperature: ieee754_1.default.read(n, 1, 4, 7),
            };
        }
        else if (service_id === 2) {
            res = {
                name: 'Humidity (%)',
                humidity: ieee754_1.default.read(n, 0, 4, 8),
            };
        }
        else if (service_id === 3) {
            res = {
                name: 'Air pressure (hPa)',
                pressure: ieee754_1.default.read(n, 0, 5, 7),
            };
        }
        else if (service_id === 4) {
            res = {
                name: 'Remaining battery power (Threshold value or less)',
                chargeRequired: n & 0b0000100000000000 ? true : false,
                chargeLevel: Math.min((n & 0b0000011111111111) / 10, 100),
            };
        }
        else if (service_id === 5) {
            const code = n & 0b0000111111111111;
            let text = '';
            if (code === 0x00) {
                text = 'Power';
            }
            else if (code === 0x01) {
                text = 'Return';
            }
            else if (code === 0x02) {
                text = 'SingleClick';
            }
            else if (code === 0x03) {
                text = 'Home';
            }
            else if (code === 0x04) {
                text = 'DoubleClick';
            }
            else if (code === 0x05) {
                text = 'VolumeUp';
            }
            else if (code === 0x06) {
                text = 'VolumeDown';
            }
            else if (code === 0x07) {
                text = 'LongPress';
            }
            else if (code === 0x08) {
                text = 'Pause';
            }
            else if (code === 0x09) {
                text = 'LongPressRelease';
            }
            else if (code === 0x0a) {
                text = 'FastForward';
            }
            else if (code === 0x0b) {
                text = 'ReWind';
            }
            else if (code === 0x0c) {
                text = 'Shutter';
            }
            else if (code === 0x0d) {
                text = 'Up';
            }
            else if (code === 0x0e) {
                text = 'Down';
            }
            else if (code === 0x0f) {
                text = 'Left';
            }
            else if (code === 0x10) {
                text = 'Right';
            }
            else if (code === 0x11) {
                text = 'Enter';
            }
            else if (code === 0x12) {
                text = 'Menu';
            }
            else if (code === 0x13) {
                text = 'Play';
            }
            else if (code === 0x14) {
                text = 'Stop';
            }
            res = {
                name: 'Pressed button information',
                buttonId: code,
                buttonName: text,
            };
        }
        else if (service_id === 6) {
            res = {
                name: 'Opening/closing',
                openingStatus: n & 0b0000100000000000 ? true : false,
                openingCount: n & 0b0000011111111111,
            };
        }
        else if (service_id === 7) {
            res = {
                name: 'Human detection',
                humanDetectionResponse: n & 0b0000100000000000 ? true : false,
                humanDetectionCount: n & 0b0000011111111111,
            };
        }
        else if (service_id === 8) {
            res = {
                name: 'Vibration',
                moveResponse: n & 0b0000100000000000 ? true : false,
                moveCount: n & 0b0000011111111111,
            };
        }
        else if (service_id === 9) {
            let illuminance = n;
            if (n >> 11) {
                illuminance = (n - 2047) * 50 + 2000;
            }
            res = {
                name: 'Illuminance (lx)',
                illuminance,
            };
        }
        else if (service_id === 15) {
            res = {
                name: 'Vendor',
                bin: ('000000000000' + n.toString(2)).slice(-12),
            };
        }
        res.serviceId = service_id;
        return res;
    }
}
exports.default = LinkingAdvertising;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/device.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - device.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-11-03
 * ---------------------------------------------------------------- */

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const advertising_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/advertising.js"));
const service_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service.js"));
class LinkingDevice {
    constructor(peripheral) {
        this.PRIMARY_SERVICE_UUID = 'b3b3690150d34044808d50835b13a6cd';
        this.WRITE_CHARACTERRISTIC_UUID = 'b3b3910150d34044808d50835b13a6cd';
        this.INDICATE_CHARACTERRISTIC_UUID = 'b3b3910250d34044808d50835b13a6cd';
        this.info = {};
        this.connected = false;
        this.onconnect = null;
        this.onconnectprogress = null;
        this.ondisconnect = null;
        this.onnotify = null;
        this.services = {
            deviceName: null,
            led: null,
            vibration: null,
            button: null,
            gyroscope: null,
            accelerometer: null,
            orientation: null,
            battery: null,
            temperature: null,
            humidity: null,
            pressure: null,
            openclose: null,
            human: null,
            move: null,
            illuminance: null,
        };
        this._service = null;
        this._div_packet_queue = [];
        this._LinkingService = new service_1.default();
        this._onresponse = null;
        this._write_response_timeout = 30000; // msec
        this._generic_access_service = {
            SERVICE_UUID: '1800',
            service: null,
            device_name: {
                CHARACTERRISTIC_UUID: '2a00',
                char: null,
            },
        };
        this.advertisement = advertising_1.default.parse(peripheral);
        this._peripheral = peripheral;
    }
    /**
     * @deprecated
     * @param setting
     */
    connect(setting) {
        return this.connectWait(setting);
    }
    async connectWait(setting) {
        if (this.connected === true) {
            throw new Error('The device has been already connected.');
        }
        let onprogress = this.onconnectprogress;
        if (!this._isFunction(this.onconnectprogress)) {
            onprogress = () => {
                // do nothing.
            };
        }
        const peripheral = this._peripheral;
        onprogress({ step: 1, desc: 'CONNECTING' });
        try {
            peripheral.ondisconnect = async () => {
                await this._cleanWait();
                if (this._isFunction(this.ondisconnect)) {
                    this.ondisconnect({ wasClean: false });
                }
            };
            await peripheral.connectWait(setting);
            onprogress({ step: 2, desc: 'CONNECTION_ESTABLISHED' });
            onprogress({ step: 3, desc: 'GETTING_CHARACTERISTICS' });
            await this._getServicesAndChars();
            onprogress({ step: 4, desc: 'SUBSCRIBING' });
            await this._subscribeForIndicateWait();
            onprogress({ step: 5, desc: 'GETTING_DEVICE_INFOMATION' });
            let res;
            res = await this.write('GET_DEVICE_INFORMATION');
            this.info.id = '';
            if ('deviceId' in res.data) {
                this.info.id = res.data.deviceId;
            }
            this.info.uid = '';
            if ('deviceUid' in res.data) {
                this.info.uid = res.data.deviceUid;
            }
            this.info.services = {};
            if ('serviceList' in res.data) {
                res.data.serviceList.forEach((o) => {
                    this.info.services[o.name] = o.id;
                });
            }
            this.info.capabilities = {};
            if ('deviceCapability' in res.data) {
                res.data.deviceCapability.forEach((o) => {
                    this.info.capabilities[o.name] = o.id;
                });
            }
            this.info.exsensors = {};
            if ('exSensorType' in res.data) {
                res.data.exSensorType.forEach((o) => {
                    this.info.exsensors[o.name] = o.id;
                });
            }
            onprogress({ step: 6, desc: 'GETTING_NOTIFY_CATEGORIES' });
            res = await this._writeConfirmNotifyCategory();
            this.info.notifyCategories = {};
            if (res) {
                if ('notifyCategory' in res.data) {
                    res.data.notifyCategory.forEach((o) => {
                        this.info.notifyCategories[o.name] = o.id;
                    });
                }
            }
            onprogress({ step: 7, desc: 'GETTING_SETTING_INFORMATION' });
            res = await this._writeGetSettingInformation();
            this.info.settings = {};
            if (res) {
                if ('settingInformationData' in res.data) {
                    res.data.settingInformationData.forEach((o) => {
                        this.info.settings[o.name] = o;
                    });
                }
            }
            onprogress({ step: 8, desc: 'GETTING_LED_COLOR_NAMES' });
            res = await this._writeGetSettingName('LEDColorName');
            if (res) {
                this.info.settings.LED.colors = res.data.settingNameData;
            }
            onprogress({ step: 9, desc: 'GETTING_LED_PATTERN_NAMES' });
            res = await this._writeGetSettingName('LEDPatternName');
            if (res) {
                this.info.settings.LED.patterns = res.data.settingNameData;
            }
            onprogress({ step: 10, desc: 'GETTING_VIBRATION_PATTERN_NAMES' });
            res = await this._writeGetSettingName('VibrationPatternName');
            if (res) {
                this.info.settings.Vibration.patterns = res.data.settingNameData;
            }
            onprogress({ step: 11, desc: 'GETTING_BEEP_PATTERN_NAMES' });
            res = await this._writeGetSettingName('BeepPatternName');
            if (res) {
                this.info.settings.Beep.patterns = res.data.settingNameData;
            }
            this._LinkingService.setDeviceInfo(this.info);
            this._initServices();
            this.connected = true;
            if (this._isFunction(this.onconnect)) {
                this.onconnect();
            }
            onprogress({ step: 12, desc: 'COMPLETED' });
        }
        catch (e) {
            onprogress({ step: 0, desc: 'FAILED' });
            await this._cleanWait();
            throw e;
        }
    }
    _wait(msec) {
        const promise = new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve();
            }, msec);
        });
        return promise;
    }
    _writeConfirmNotifyCategory() {
        const promise = new Promise((resolve, reject) => {
            if (!('PeripheralDeviceNotification' in this.info.services)) {
                resolve(null);
                return;
            }
            this.write('CONFIRM_NOTIFY_CATEGORY')
                .then((res) => {
                resolve(res);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _writeGetSettingInformation() {
        const promise = new Promise((resolve, reject) => {
            if (!('PeripheralDeviceSettingOperation' in this.info.services)) {
                resolve(null);
                return;
            }
            this.write('GET_SETTING_INFORMATION')
                .then((res) => {
                resolve(res);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _writeGetSettingName(name) {
        const promise = new Promise((resolve, reject) => {
            if (!('PeripheralDeviceSettingOperation' in this.info.services)) {
                resolve(null);
                return;
            }
            const s = this.info.settings;
            if (name === 'LEDColorName') {
                if (!('LED' in s && s.LED.colorMax)) {
                    resolve(null);
                    return;
                }
            }
            else if (name === 'LEDPatternName') {
                if (!('LED' in s && s.LED.patternMax)) {
                    resolve(null);
                    return;
                }
            }
            else if (name === 'VibrationPatternName') {
                if (!('Vibration' in s && s.Vibration.patternMax)) {
                    resolve(null);
                    return;
                }
            }
            else if (name === 'BeepPatternName') {
                if (!('Beep' in s && s.Beep.patternMax)) {
                    resolve(null);
                    return;
                }
            }
            this.write('GET_SETTING_NAME', { SettingNameType: name })
                .then((res) => {
                resolve(res);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _isFunction(o) {
        return o && typeof o === 'function' ? true : false;
    }
    _getServicesAndChars() {
        const peripheral = this._peripheral;
        const service = peripheral.getService(this.PRIMARY_SERVICE_UUID);
        if (!service) {
            throw new Error('No service was found');
        }
        const write_char = service.getCharacteristic(this.WRITE_CHARACTERRISTIC_UUID);
        const indicate_char = service.getCharacteristic(this.INDICATE_CHARACTERRISTIC_UUID);
        if (!(write_char && indicate_char)) {
            throw new Error('No characteristic was found');
        }
        this.char_write = write_char;
        this.char_indicate = indicate_char;
        this._service = service;
        const ga_service = peripheral.getService(this._generic_access_service.SERVICE_UUID);
        if (ga_service) {
            const ga_char = ga_service.getCharacteristic(this._generic_access_service.device_name.CHARACTERRISTIC_UUID);
            if (ga_service && ga_char) {
                this._generic_access_service.service = ga_service;
                this._generic_access_service.device_name.char = ga_char;
            }
        }
    }
    /**
     * @deprecated
     */
    _subscribeForIndicate() {
        return this._subscribeForIndicateWait();
    }
    async _subscribeForIndicateWait() {
        await this.char_indicate.registerNotifyWait((data) => {
            this._receivedPacket(Buffer.from(data));
        });
    }
    _receivedPacket(buf) {
        // console.log("receive raw packet ", buf);
        const new_buf = Buffer.alloc(buf.length - 1);
        buf.copy(new_buf, 0, 1, buf.length);
        this._div_packet_queue.push(new_buf);
        if (this._isExecutedPacket(buf)) {
            const header_byte = Buffer.from([buf.readUInt8(0)]);
            this._div_packet_queue.unshift(header_byte);
            const total_buf = Buffer.concat(this._div_packet_queue);
            this._receivedIndicate(total_buf);
            this._div_packet_queue = [];
        }
    }
    _isExecutedPacket(buf) {
        const ph = buf.readUInt8(0);
        return ph & 0x00000001 ? true : false;
    }
    _receivedIndicate(buf) {
        const parsed = this._LinkingService.parseResponse(buf);
        // console.log("linking buf parse", buf, JSON.stringify(parsed, null, 2));
        if (!parsed) {
            return;
        }
        if (parsed.messageName.match(/_RESP$/)) {
            if (this._onresponse) {
                this._onresponse(parsed);
            }
        }
        else {
            // All notifications
            if (this._isFunction(this.onnotify)) {
                this.onnotify(parsed);
            }
            // Button
            if (parsed.serviceId === 2) {
                // PeripheralDeviceOperation Service
                if (parsed.messageId === 0) {
                    // NOTIFY_PD_OPERATION
                    // let f = this.services['button']['onnotify'];
                    let f = null;
                    if (this.services.button) {
                        if (this._isFunction(this.services.button.onnotify)) {
                            f = this.services.button.onnotify;
                        }
                    }
                    if (f) {
                        let button = null;
                        parsed.parameters.forEach((p) => {
                            if (p.parameterId === 2) {
                                // ButtonId
                                button = {
                                    buttonId: p.buttonId,
                                    buttonName: p.buttonName,
                                };
                            }
                        });
                        f(button);
                    }
                }
                // Sensors
            }
            else if (parsed.serviceId === 3) {
                // PeripheralDeviceSensorInformation Service
                if (parsed.messageId === 4) {
                    // NOTIFY_PD_SENSOR_INFO
                    let sensor_type = -1;
                    let res = {};
                    parsed.parameters.forEach((p) => {
                        const pid = p.parameterId;
                        if (pid === 2) {
                            // SensorType
                            sensor_type = p.sensorTypeCode;
                        }
                        else {
                            if (sensor_type.toString().match(/^(0|1|2)$/)) {
                                // Gyroscope, Accelerometer, Orientation
                                if (pid === 4) {
                                    // X_value
                                    res.x = p.xValue;
                                }
                                else if (pid === 5) {
                                    // Y_value
                                    res.y = p.yValue;
                                }
                                else if (pid === 6) {
                                    // Z_value
                                    res.z = p.zValue;
                                }
                            }
                            else if (sensor_type === 3) {
                                // Battery
                                res = {
                                    charge: p.charge,
                                    level: p.level,
                                };
                            }
                            else if (sensor_type === 4) {
                                // Temperature
                                res.temperature = p.temperature;
                            }
                            else if (sensor_type === 5) {
                                // Humidity
                                res.humidity = p.humidity;
                            }
                            else if (sensor_type === 6) {
                                // Aire pressure
                                res.pressure = p.pressure;
                            }
                            else if (sensor_type === 7) {
                                // Opening and closing
                                res.openclose = p.openclose;
                            }
                            else if (sensor_type === 8) {
                                // Human detection
                                res.human = p.human;
                            }
                            else if (sensor_type === 9) {
                                // Move
                                res.move = p.move;
                            }
                            else if (sensor_type === 0x0a) {
                                // Illuminance
                                res.illuminance = p.illuminance;
                            }
                        }
                    });
                    let f = null;
                    if (sensor_type === 0) {
                        if (this.services.gyroscope) {
                            f = this.services.gyroscope.onnotify;
                        }
                    }
                    else if (sensor_type === 1) {
                        if (this.services.accelerometer) {
                            f = this.services.accelerometer.onnotify;
                        }
                    }
                    else if (sensor_type === 2) {
                        if (this.services.orientation) {
                            f = this.services.orientation.onnotify;
                        }
                    }
                    else if (sensor_type === 3) {
                        if (this.services.battery) {
                            f = this.services.battery.onnotify;
                        }
                    }
                    else if (sensor_type === 4) {
                        if (this.services.temperature) {
                            f = this.services.temperature.onnotify;
                        }
                    }
                    else if (sensor_type === 5) {
                        if (this.services.humidity) {
                            f = this.services.humidity.onnotify;
                        }
                    }
                    else if (sensor_type === 6) {
                        if (this.services.pressure) {
                            f = this.services.pressure.onnotify;
                        }
                    }
                    else if (sensor_type === 7) {
                        if (this.services.openclose) {
                            f = this.services.openclose.onnotify;
                        }
                    }
                    else if (sensor_type === 8) {
                        if (this.services.human) {
                            f = this.services.human.onnotify;
                        }
                    }
                    else if (sensor_type === 9) {
                        if (this.services.move) {
                            f = this.services.move.onnotify;
                        }
                    }
                    else if (sensor_type === 0x0a) {
                        if (this.services.illuminance) {
                            f = this.services.illuminance.onnotify;
                        }
                    }
                    if (this._isFunction(f)) {
                        f(res);
                    }
                }
            }
        }
    }
    /**
     * @deprecated
     */
    disconnect() {
        return this.disconnectWait();
    }
    async disconnectWait() {
        if (this._peripheral) {
            if (this._peripheral.connected) {
                await this._peripheral.disconnectWait(); // ondisconnect will call
            }
            else {
                await this._cleanWait();
            }
        }
        else {
            await this._cleanWait();
        }
    }
    /**
     * @deprecated
     */
    _clean() {
        return this._cleanWait();
    }
    async _cleanWait() {
        const p = this._peripheral;
        if (!p) {
            return;
        }
        if (this.char_indicate) {
            await this.char_indicate.unregisterNotifyWait();
        }
        // p.removeAllListeners();
        this.connected = false;
        this._service = null;
        this.char_write = null;
        this.char_indicate = null;
        this._div_packet_queue = [];
        this._onresponse = null;
        if (p.connected) {
            await p.disconnectWait();
        }
    }
    write(message_name, params) {
        return this.writeWait(message_name, params);
    }
    async writeWait(message_name, params) {
        const buf = this._LinkingService.createRequest(message_name, params);
        if (!buf) {
            throw new Error('The specified parameters are invalid.');
        }
        const timer = setTimeout(() => {
            this._onresponse = null;
            throw new Error('Timeout');
        }, this._write_response_timeout);
        const waitResponse = new Promise((resolve, reject) => {
            this._onresponse = (res) => {
                if (res.messageName === message_name + '_RESP') {
                    this._onresponse = null;
                    clearTimeout(timer);
                    const data = this._margeResponsePrameters(res);
                    if (data) {
                        res.data = data;
                        resolve(res);
                    }
                    else {
                        throw new Error('Unknown response');
                    }
                }
            };
        });
        // console.log("linking write ", buf, message_name, JSON.stringify(params, null, 2));
        await this.char_write.writeWait(buf, true);
        return await waitResponse;
    }
    _margeResponsePrameters(res) {
        if (!res) {
            return null;
        }
        const parameters = res.parameters;
        if (parameters && Array.isArray(parameters) && parameters.length > 0) {
            const data = {};
            parameters.forEach((p) => {
                for (const k in p) {
                    if (!k.match(/^(name|parameterId)$/)) {
                        data[k] = p[k];
                    }
                }
            });
            return data;
        }
        else {
            return null;
        }
    }
    _initServices() {
        const device_name = this._peripheral.localName || '';
        // Device Name
        if (this._generic_access_service.device_name.char) {
            this.services.deviceName = {
                get: this._deviceNameSetWait.bind(this),
                set: this._deviceNameSetWait.bind(this),
            };
        }
        // Button
        if ('Button' in this.info.exsensors ||
            device_name.match(/^(Linking Board01|BLEAD-LK-TSH)/)) {
            this.services.button = {
                onnotify: null,
            };
        }
        // LED
        if ('LED' in this.info.settings) {
            const o = this.info.settings.LED;
            if (o.colors &&
                o.colors.length > 0 &&
                o.patterns &&
                o.patterns.length > 0) {
                const colors = {};
                for (let i = 0; i < o.colors.length; i++) {
                    colors[o.colors[i]] = i + 1;
                }
                const patterns = {};
                for (let i = 0; i < o.patterns.length; i++) {
                    patterns[o.patterns[i]] = i + 1;
                }
                this.services.led = {
                    colors,
                    patterns,
                    turnOn: this._ledTurnOn.bind(this),
                    turnOff: this._ledTurnOff.bind(this),
                };
            }
        }
        // Vibration
        if ('Vibration' in this.info.settings) {
            const o = this.info.settings.Vibration;
            if (o.patterns && o.patterns.length > 0) {
                const patterns = {};
                for (let i = 0; i < o.patterns.length; i++) {
                    patterns[o.patterns[i]] = i + 1;
                }
                this.services.vibration = {
                    patterns,
                    turnOn: this._vibrationTurnOn.bind(this),
                    turnOff: this._vibrationTurnOff.bind(this),
                };
            }
        }
        // Gyroscope
        if ('Gyroscope' in this.info.capabilities) {
            this.services.gyroscope = this._createSensorServiceObject(0x00);
        }
        // Accelerometer
        if ('Accelerometer' in this.info.capabilities) {
            this.services.accelerometer = this._createSensorServiceObject(0x01);
        }
        // Orientation
        if ('Orientation' in this.info.capabilities) {
            this.services.orientation = this._createSensorServiceObject(0x02);
        }
        // Battery
        if ('Battery' in this.info.capabilities) {
            this.services.battery = this._createSensorServiceObject(0x03);
        }
        // Temperature
        if ('Temperature' in this.info.capabilities) {
            this.services.temperature = this._createSensorServiceObject(0x04);
        }
        // Humidity
        if ('Humidity' in this.info.capabilities) {
            this.services.humidity = this._createSensorServiceObject(0x05);
        }
        // Atmospheric pressure
        if ('Atmospheric pressure' in this.info.capabilities) {
            this.services.pressure = this._createSensorServiceObject(0x06);
        }
        // Opening and closing
        if ('Opening and closing' in this.info.exsensors) {
            this.services.openclose = this._createSensorServiceObject(0x07);
        }
        // Human detection
        if ('Human detection' in this.info.exsensors) {
            this.services.human = this._createSensorServiceObject(0x08);
        }
        // Move
        if ('Move' in this.info.exsensors) {
            this.services.move = this._createSensorServiceObject(0x09);
        }
        // Illuminance
        if ('Illuminance' in this.info.exsensors) {
            this.services.illuminance = this._createSensorServiceObject(0x0a);
        }
    }
    /**
     * @deprecated
     */
    _deviceNameGet() {
        return this._deviceNameGetWait();
    }
    async _deviceNameGetWait() {
        const char = this._generic_access_service.device_name
            .char;
        const data = await char.readWait();
        return {
            deviceName: Buffer.from(data).toString('utf8'),
        };
    }
    /**
     * @deprecated
     * @param name
     */
    _deviceNameSet(name) {
        return this._deviceNameSetWait(name);
    }
    async _deviceNameSetWait(name) {
        if (!name) {
            throw new Error('Device name is required.');
        }
        else if (typeof name !== 'string') {
            throw new Error('Device name must be a string.');
        }
        else if (name.length > 32) {
            throw new Error('Device name is too long. The length must be in the range 1 to 32.');
        }
        const buf = Buffer.from(name, 'utf8');
        const char = this._generic_access_service.device_name
            .char;
        await char.writeWait(buf, false);
    }
    _ledTurnOn(color, pattern, duration) {
        let color_number = 1;
        if (color) {
            const colors = this.services.led.colors;
            if (typeof color === 'number') {
                for (const name in colors) {
                    if (colors[name] === color) {
                        color_number = color;
                        break;
                    }
                }
            }
            else if (typeof color === 'string') {
                if (color in colors) {
                    color_number = colors[color];
                }
            }
        }
        let pattern_number = 2;
        if (pattern) {
            const patterns = this.services.led.patterns;
            if (typeof pattern === 'number') {
                for (const name in patterns) {
                    if (patterns[name] === pattern) {
                        pattern_number = pattern;
                        break;
                    }
                }
            }
            else if (typeof pattern === 'string') {
                if (pattern in patterns) {
                    pattern_number = patterns[pattern];
                }
            }
        }
        if (!duration || typeof duration !== 'number' || duration % 1 !== 0) {
            duration = 5;
        }
        const promise = new Promise((resolve, reject) => {
            this.write('SELECT_SETTING_INFORMATION', {
                SettingInformationRequest: {
                    requestName: 'START_DEMONSTRATION',
                },
                SettingInformationData: [
                    {
                        settingName: 'LED',
                        colorNumber: color_number,
                        patternNumber: pattern_number,
                        duration,
                    },
                ],
            })
                .then((res) => {
                resolve(res.data);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _ledTurnOff() {
        const promise = new Promise((resolve, reject) => {
            this.write('SELECT_SETTING_INFORMATION', {
                SettingInformationRequest: {
                    requestName: 'STOP_DEMONSTRATION',
                },
            })
                .then((res) => {
                resolve(res.data);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _vibrationTurnOn(pattern, duration) {
        let pattern_number = 2;
        if (pattern) {
            const patterns = this.services.vibration.patterns;
            if (typeof pattern === 'number') {
                for (const name in patterns) {
                    if (patterns[name] === pattern) {
                        pattern_number = pattern;
                        break;
                    }
                }
            }
            else if (typeof pattern === 'string') {
                if (pattern in patterns) {
                    pattern_number = patterns[pattern];
                }
            }
        }
        if (!duration || typeof duration !== 'number' || duration % 1 !== 0) {
            duration = 5;
        }
        const promise = new Promise((resolve, reject) => {
            this.write('SELECT_SETTING_INFORMATION', {
                SettingInformationRequest: {
                    requestName: 'START_DEMONSTRATION',
                },
                SettingInformationData: [
                    {
                        settingName: 'Vibration',
                        patternNumber: pattern_number,
                        duration,
                    },
                ],
            })
                .then((res) => {
                resolve(res.data);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _vibrationTurnOff() {
        const promise = new Promise((resolve, reject) => {
            this.write('SELECT_SETTING_INFORMATION', {
                SettingInformationRequest: {
                    requestName: 'STOP_DEMONSTRATION',
                },
            })
                .then((res) => {
                resolve(res.data);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _createSensorServiceObject(sensor_type) {
        return {
            onnotify: null,
            start: () => {
                return this._setNotifySensorInfo(sensor_type, 1);
            },
            stop: () => {
                return this._setNotifySensorInfo(sensor_type, 0);
            },
            get: () => {
                return this._getSensorInfo(sensor_type);
            },
        };
    }
    _setNotifySensorInfo(sensor_type, status) {
        const promise = new Promise((resolve, reject) => {
            this.write('SET_NOTIFY_SENSOR_INFO', {
                SensorType: sensor_type,
                Status: status,
            })
                .then((res) => {
                resolve(res.data);
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
    _getSensorInfo(sensor_type) {
        const promise = new Promise((resolve, reject) => {
            this.write('GET_SENSOR_INFO', {
                SensorType: sensor_type,
            })
                .then((res) => {
                if (sensor_type.toString().match(/^(0|1|2)$/)) {
                    // Gyroscope, Accelerometer, Orientation
                    const d = res.data;
                    const data = {
                        x: d.xValue,
                        y: d.yValue,
                        z: d.zValue,
                    };
                    resolve(data);
                }
                else {
                    resolve(res.data);
                }
            })
                .catch((error) => {
                reject(error);
            });
        });
        return promise;
    }
}
exports.default = LinkingDevice;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/ieee754.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - ieee754.js
 *
 * Copyright (c) 2017, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2017-04-13
 * ---------------------------------------------------------------- */

Object.defineProperty(exports, "__esModule", { value: true });
class LinkingIEEE754 {
    static read(n, slen, elen, flen) {
        const sgn = slen ? (n >>> 11) & 0b1 : 0; // sign
        const max = Math.pow(2, elen) - 1; // maximum of exponent
        const exp = (n >>> flen) & max; // exponent
        let fra = 0; // fraction
        for (let i = 0; i < flen; i++) {
            if ((n >>> (flen - i - 1)) & 0b1) {
                fra += Math.pow(2, -(i + 1));
            }
        }
        if (exp === 0 && fra === 0) {
            return 0;
        }
        else if (exp === 0 && fra !== 0) {
            const m = Math.pow(2, elen - 1) - 1; // median (7 or 15)
            const v = Math.pow(-1, sgn) * fra * Math.pow(2, 1 - m);
            return v;
        }
        else if (exp >= 1 && exp <= max - 1) {
            const m = Math.pow(2, elen - 1) - 1; // median (7 or 15)
            const v = Math.pow(-1, sgn) * (1 + fra) * Math.pow(2, exp - m);
            return v;
        }
        else if (exp === max && fra === 0) {
            return Infinity;
        }
        else {
            return NaN;
        }
    }
}
exports.default = LinkingIEEE754;


/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service-notification.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service-notification.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-10-24
 * ---------------------------------------------------------------- */

Object.defineProperty(exports, "__esModule", { value: true });
/* ------------------------------------------------------------------
 * Constructor: LinkingServiceNotification()
 * ---------------------------------------------------------------- */
class LinkingServiceNotification {
    constructor() {
        this.SERVICE_ID = 0x01;
        this.SERVICE_NAME = 'PeripheralDeviceNotification';
        this.MESSAGE_NAME_MAP = {
            '00': 'CONFIRM_NOTIFY_CATEGORY',
            '01': 'CONFIRM_NOTIFY_CATEGORY_RESP',
            '02': 'NOTIFY_INFORMATION',
            '03': 'GET_PD_NOTIFY_DETAIL_DATA',
            '04': 'GET_PD_NOTIFY_DETAIL_DATA_RESP',
            '05': 'NOTIFY_PD_GENERAL_INFORMATION',
            '06': 'START_PD_APPLICATION',
            '07': 'START_PD_APPLICATION_RESP',
        };
        // Private
        this._WRITE_MESSAGE_ID_MAP = {
            CONFIRM_NOTIFY_CATEGORY: 0x00,
            NOTIFY_INFORMATION: 0x02,
            GET_PD_NOTIFY_DETAIL_DATA_RESP: 0x04,
            START_PD_APPLICATION_RESP: 0x07,
        };
        this._NOTIFY_CATEGORY_NAME_ID_MAP = {
            NotNotify: 0,
            All: 1,
            PhoneIncomingCall: 2,
            PhoneInCall: 3,
            PhoneIdle: 4,
            Mail: 5,
            Schedule: 6,
            General: 7,
            Etc: 8,
        };
        this._device = {};
    }
    setDeviceInfo(info) {
        this._device = info;
    }
    parsePayload(pnum, buf) {
        let offset = 0;
        const parameters = [];
        let notify_cateogry_id = 0;
        try {
            for (let i = 0; i < pnum; i++) {
                const pid = buf.readUInt8(offset++);
                let plen_buf = buf.slice(offset, offset + 3);
                plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);
                const plen = plen_buf.readUInt32LE(0);
                offset += 3;
                const pvalue_buf = buf.slice(offset, offset + plen);
                offset += plen;
                const p = this._parseParameter(pid, pvalue_buf);
                parameters.push(this._parseParameter(pid, pvalue_buf, notify_cateogry_id));
                if (pid === 0x04 && 'id' in p) {
                    notify_cateogry_id = p.id;
                }
            }
        }
        catch (e) {
            // do nothing.
        }
        return parameters;
    }
    _parseParameter(pid, buf, notify_cateogory_id) {
        let parsed = null;
        if (pid === 0x00) {
            parsed = this._parseResultCode(buf);
        }
        else if (pid === 0x01) {
            parsed = this._parseCancel(buf);
        }
        else if (pid === 0x02) {
            parsed = this._parseGetStatus(buf);
        }
        else if (pid === 0x03) {
            parsed = this._parseNotifyCategory(buf);
        }
        else if (pid === 0x04) {
            parsed = this._parseNotifyCategoryID(buf);
        }
        else if (pid === 0x05) {
            parsed = this._parseGetParameterID(buf);
        }
        else if (pid === 0x06) {
            parsed = this._parseGetParameterLength(buf);
        }
        else if (pid === 0x07) {
            parsed = this._parseParameterIdList(buf, notify_cateogory_id);
        }
        else if (pid === 0x08) {
            parsed = this._parseUniqueId(buf);
        }
        else if (pid === 0x09) {
            parsed = this._parseNotifyId(buf);
        }
        else if (pid === 0x0a) {
            parsed = this._parseNotificationOperation(buf);
        }
        else if (pid === 0x0b) {
            parsed = this._parseTittle(buf);
        }
        else if (pid === 0x0c) {
            parsed = this._parseText(buf);
        }
        else if (pid === 0x0d) {
            parsed = this._parseAppName(buf);
        }
        else if (pid === 0x0e) {
            parsed = this._parseAppNameLocal(buf);
        }
        else if (pid === 0x0f) {
            parsed = this._parseNotifyApp(buf);
        }
        else if (pid === 0x10) {
            parsed = this._parseRumblingSetting(buf);
        }
        else if (pid === 0x11) {
            parsed = this._parseVibrationPattern(buf);
        }
        else if (pid === 0x12) {
            parsed = this._parseLedPattern(buf);
        }
        else if (pid === 0x13) {
            parsed = this._parseSender(buf);
        }
        else if (pid === 0x14) {
            parsed = this._parseSenderAddress(buf);
        }
        else if (pid === 0x15) {
            parsed = this._parseReceiveDate(buf);
        }
        else if (pid === 0x16) {
            parsed = this._parseStartDate(buf);
        }
        else if (pid === 0x17) {
            parsed = this._parseEndDate(buf);
        }
        else if (pid === 0x18) {
            parsed = this._parseArea(buf);
        }
        else if (pid === 0x19) {
            parsed = this._parsePerson(buf);
        }
        else if (pid === 0x1a) {
            parsed = this._parseMimeTypeForImage(buf);
        }
        else if (pid === 0x1b) {
            parsed = this._parseMimeTypeForMedia(buf);
        }
        else if (pid === 0x1c) {
            parsed = this._parseImage(buf);
        }
        else if (pid >= 0x1d && pid <= 0x26) {
            parsed = this._parseContents(buf, pid);
        }
        else if (pid === 0x27) {
            parsed = this._parseMedia(buf);
        }
        else if (pid === 0x28) {
            parsed = this._parsePackage(buf);
        }
        else if (pid === 0x29) {
            parsed = this._parseClass(buf);
        }
        else if (pid === 0x2a) {
            parsed = this._parseSharingInformation(buf);
        }
        else if (pid === 0x2b) {
            parsed = this._parseBeepPattern(buf);
        }
        if (parsed) {
            parsed.parameterId = pid;
        }
        return parsed;
    }
    _parseResultCode(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        return {
            name: 'ResultCode',
            resultCode: code,
            resultText: text,
        };
    }
    _parseCancel(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'User cancel';
        }
        return {
            name: 'Cancel',
            cancelCode: code,
            cancelText: text,
        };
    }
    _parseGetStatus(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'OK, request processed ,but some parameter not';
        }
        else if (code === 0x02) {
            text = 'Cancel';
        }
        else if (code === 0x03) {
            text = 'Error, failed';
        }
        else if (code === 0x04) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x05) {
            text = 'Error, data not available';
        }
        else if (code === 0x06) {
            text = 'Error, not supported';
        }
        return {
            name: 'GetStatus',
            statusCode: code,
            statusText: text,
        };
    }
    _parseNotifyCategory(buf) {
        const list = [];
        const v1 = buf.readUInt8(0);
        if (v1 & 0b00000001) {
            list.push({
                id: 0,
                name: 'NotNotify',
            });
        }
        if (v1 & 0b00000010) {
            list.push({
                id: 1,
                name: 'All',
            });
        }
        if (v1 & 0b00000100) {
            list.push({
                id: 2,
                name: 'PhoneIncomingCall',
            });
        }
        if (v1 & 0b00001000) {
            list.push({
                id: 3,
                name: 'PhoneInCall',
            });
        }
        if (v1 & 0b00010000) {
            list.push({
                id: 4,
                name: 'PhoneIdle',
            });
        }
        if (v1 & 0b00100000) {
            list.push({
                id: 5,
                name: 'Mail',
            });
        }
        if (v1 & 0b01000000) {
            list.push({
                id: 6,
                name: 'Schedule',
            });
        }
        if (v1 & 0b10000000) {
            list.push({
                id: 7,
                name: 'General',
            });
        }
        const v2 = buf.readUInt8(1);
        if (v2 & 0b00000001) {
            list.push({
                id: 8,
                name: 'Etc',
            });
        }
        return {
            name: 'NotifyCategory',
            notifyCategory: list,
        };
    }
    _parseNotifyCategoryID(buf) {
        let res = null;
        const v1 = buf.readUInt8(0);
        const v2 = buf.readUInt8(1);
        if (v1 & 0b00000001) {
            res = { id: 0, text: 'NotNotify' };
        }
        else if (v1 & 0b00000010) {
            res = { id: 1, text: 'All' };
        }
        else if (v1 & 0b00000100) {
            res = { id: 2, text: 'PhoneIncomingCall' };
        }
        else if (v1 & 0b00001000) {
            res = { id: 3, text: 'PhoneInCall' };
        }
        else if (v1 & 0b00010000) {
            res = { id: 4, text: 'PhoneIdle' };
        }
        else if (v1 & 0b00100000) {
            res = { id: 5, text: 'Mail' };
        }
        else if (v1 & 0b01000000) {
            res = { id: 6, text: 'Schedule' };
        }
        else if (v1 & 0b10000000) {
            res = { id: 7, text: 'General' };
        }
        else if (v2 & 0b00000001) {
            res = { id: 8, text: 'Etc' };
        }
        return {
            name: 'NotifyCategoryID',
            notifyCategoryId: res.id,
            NotifyCategoryText: res.text,
        };
    }
    _parseGetParameterID(buf) {
        return {
            name: 'GetParameterID',
            getParameterId: buf.readUInt8(0),
        };
    }
    _parseGetParameterLength(buf) {
        return {
            name: 'GetParameterLength',
            getParameterLength: buf.readUInt32LE(0),
        };
    }
    _parseParameterIdList(buf, notify_cateogry_id) {
        const v = buf.readUInt16LE(0);
        const list = [];
        if (notify_cateogry_id >= 2 && notify_cateogry_id <= 4) {
            // PhoneIncomingCall/PhoneInCall/PhoneIdle
            if (v & 0b0000000000000001) {
                list.push({ id: 0x09, name: 'NotifyId' });
            }
            if (v & 0b0000000000000010) {
                list.push({ id: 0x04, name: 'NotifyCategoryID' });
            }
        }
        else if (notify_cateogry_id === 5) {
            // Mail
            if (v & 0b0000000000000001) {
                list.push({ id: 0x0d, name: 'AppName' });
            }
            if (v & 0b0000000000000010) {
                list.push({ id: 0x0e, name: 'AppNameLocal' });
            }
            if (v & 0b0000000000000100) {
                list.push({ id: 0x28, name: 'Package' });
            }
            if (v & 0b0000000000001000) {
                list.push({ id: 0x0b, name: 'Tittle' });
            }
            if (v & 0b0000000000010000) {
                list.push({ id: 0x0c, name: 'Text' });
            }
            if (v & 0b0000000000100000) {
                list.push({ id: 0x13, name: 'Sender' });
            }
            if (v & 0b0000000001000000) {
                list.push({ id: 0x14, name: 'SenderAddress' });
            }
            if (v & 0b0000000010000000) {
                list.push({ id: 0x15, name: 'ReceiveDate' });
            }
            if (v & 0b0000000100000000) {
                list.push({ id: 0x09, name: 'NotifyId' });
            }
            if (v & 0b0000001000000000) {
                list.push({ id: 0x04, name: 'NotifyCategoryID' });
            }
        }
        else if (notify_cateogry_id === 6) {
            // Schedule
            if (v & 0b0000000000000001) {
                list.push({ id: 0x0d, name: 'AppName' });
            }
            if (v & 0b0000000000000010) {
                list.push({ id: 0x0e, name: 'AppNameLocal' });
            }
            if (v & 0b0000000000000100) {
                list.push({ id: 0x28, name: 'Package' });
            }
            if (v & 0b0000000000001000) {
                list.push({ id: 0x0b, name: 'Tittle' });
            }
            if (v & 0b0000000000010000) {
                list.push({ id: 0x16, name: 'StartDate' });
            }
            if (v & 0b0000000000100000) {
                list.push({ id: 0x17, name: 'EndDate' });
            }
            if (v & 0b0000000001000000) {
                list.push({ id: 0x18, name: 'Area' });
            }
            if (v & 0b0000000010000000) {
                list.push({ id: 0x19, name: 'Person' });
            }
            if (v & 0b0000000100000000) {
                list.push({ id: 0x0c, name: 'Text' });
            }
            if (v & 0b0000001000000000) {
                list.push({ id: 0x1d, name: 'Contents1' });
            }
            if (v & 0b0000010000000000) {
                list.push({ id: 0x1e, name: 'Contents2' });
            }
            if (v & 0b0000100000000000) {
                list.push({ id: 0x1f, name: 'Contents3' });
            }
            if (v & 0b0001000000000000) {
                list.push({ id: 0x09, name: 'NotifyId' });
            }
            if (v & 0b0010000000000000) {
                list.push({ id: 0x04, name: 'NotifyCategoryID' });
            }
        }
        else if (notify_cateogry_id === 7) {
            // General
            if (v & 0b0000000000000001) {
                list.push({ id: 0x0d, name: 'AppName' });
            }
            if (v & 0b0000000000000010) {
                list.push({ id: 0x0e, name: 'AppNameLocal' });
            }
            if (v & 0b0000000000000100) {
                list.push({ id: 0x28, name: 'Package' });
            }
            if (v & 0b0000000000001000) {
                list.push({ id: 0x0b, name: 'Tittle' });
            }
            if (v & 0b0000000000010000) {
                list.push({ id: 0x0c, name: 'Text' });
            }
            if (v & 0b0000000000100000) {
                list.push({ id: 0x09, name: 'NotifyId' });
            }
            if (v & 0b0000000001000000) {
                list.push({ id: 0x04, name: 'NotifyCategoryID' });
            }
        }
        else if (notify_cateogry_id === 8) {
            // Etc
            if (v & 0b0000000000000001) {
                list.push({ id: 0x0d, name: 'AppName' });
            }
            if (v & 0b0000000000000010) {
                list.push({ id: 0x0e, name: 'AppNameLocal' });
            }
            if (v & 0b0000000000000100) {
                list.push({ id: 0x28, name: 'Package' });
            }
            if (v & 0b0000000000001000) {
                list.push({ id: 0x1d, name: 'Contents1' });
            }
            if (v & 0b0000000000010000) {
                list.push({ id: 0x1e, name: 'Contents2' });
            }
            if (v & 0b0000000000100000) {
                list.push({ id: 0x1f, name: 'Contents3' });
            }
            if (v & 0b0000000001000000) {
                list.push({ id: 0x20, name: 'Contents4' });
            }
            if (v & 0b0000000010000000) {
                list.push({ id: 0x21, name: 'Contents5' });
            }
            if (v & 0b0000000100000000) {
                list.push({ id: 0x22, name: 'Contents6' });
            }
            if (v & 0b0000001000000000) {
                list.push({ id: 0x23, name: 'Contents7' });
            }
            if (v & 0b0000010000000000) {
                list.push({ id: 0x1b, name: 'MimeTypeForMedia' });
            }
            if (v & 0b0000100000000000) {
                list.push({ id: 0x27, name: 'Media' });
            }
            if (v & 0b0001000000000000) {
                list.push({ id: 0x1a, name: 'MimeTypeForImage' });
            }
            if (v & 0b0010000000000000) {
                list.push({ id: 0x1c, name: 'Image' });
            }
            if (v & 0b0100000000000000) {
                list.push({ id: 0x09, name: 'NotifyId' });
            }
            if (v & 0b1000000000000000) {
                list.push({ id: 0x04, name: 'NotifyCategoryID' });
            }
        }
        return {
            name: 'ParameterIdList',
            parameterIdList: list,
        };
    }
    _parseUniqueId(buf) {
        return {
            name: 'UniqueId',
            uniqueId: buf.readUInt16LE(0),
        };
    }
    _parseNotifyId(buf) {
        return {
            name: 'NotifyId',
            notifyId: buf.readUInt16LE(0),
        };
    }
    _parseNotificationOperation(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'AlreadyRead';
        }
        else if (code === 0x01) {
            text = 'Delete';
        }
        return {
            name: 'NotificationOperation',
            notificationOperationCode: code,
            notificationOperationText: text,
        };
    }
    _parseTittle(buf) {
        return {
            name: 'Tittle',
            title: buf.toString('UTF-8'),
        };
    }
    _parseText(buf) {
        return {
            name: 'Text',
            text: buf.toString('UTF-8'),
        };
    }
    _parseAppName(buf) {
        return {
            name: 'AppName',
            appName: buf.toString('UTF-8'),
        };
    }
    _parseAppNameLocal(buf) {
        return {
            name: 'AppNameLocal',
            appNameLocal: buf.toString('UTF-8'),
        };
    }
    _parseNotifyApp(buf) {
        return {
            name: 'NotifyApp',
            notifyApp: buf.toString('UTF-8'),
        };
    }
    _parseRumblingSetting(buf) {
        const list = [];
        const v = buf.readUInt8(0);
        if (v & 0b00000001) {
            list.push({ id: 0, name: 'LED' });
        }
        if (v & 0b00000010) {
            list.push({ id: 1, name: 'Vibration' });
        }
        if (v & 0b00000100) {
            list.push({ id: 2, name: 'Beep' });
        }
        return {
            name: 'RumblingSetting',
            rumblingSetting: list,
        };
    }
    _parseVibrationPattern(buf) {
        const list = [];
        let offset = 0;
        while (true) {
            const len = buf.readUInt8(offset++);
            let name = '';
            for (let i = 0; i < len; i++) {
                name += String.fromCharCode(buf.readUInt8(offset++));
            }
            list.push(name);
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'VibrationPattern',
            vibrationPattern: list,
        };
    }
    _parseLedPattern(buf) {
        const list = [];
        let offset = 0;
        while (true) {
            const len = buf.readUInt8(offset++);
            let name = '';
            for (let i = 0; i < len; i++) {
                name += String.fromCharCode(buf.readUInt8(offset++));
            }
            list.push(name);
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'LedPattern',
            LedPattern: list,
        };
    }
    _parseSender(buf) {
        return {
            name: 'Sender',
            sender: buf.toString('UTF-8'),
        };
    }
    _parseSenderAddress(buf) {
        return {
            name: 'SenderAddress',
            senderAddress: buf.toString('UTF-8'),
        };
    }
    _parseReceiveDate(buf) {
        const Y = buf.readUInt16LE(0);
        const M = buf.readUInt8(2);
        const D = buf.readUInt8(3);
        const h = buf.readUInt8(4);
        const m = buf.readUInt8(5);
        const s = buf.readUInt8(6);
        const dt = new Date(Y, M, D, h, m, s);
        return {
            name: 'ReceiveDate',
            receiveDate: dt,
        };
    }
    _parseStartDate(buf) {
        const Y = buf.readUInt16LE(0);
        const M = buf.readUInt8(2);
        const D = buf.readUInt8(3);
        const h = buf.readUInt8(4);
        const m = buf.readUInt8(5);
        const s = buf.readUInt8(6);
        const dt = new Date(Y, M, D, h, m, s);
        return {
            name: 'StartDate',
            startDate: dt,
        };
    }
    _parseEndDate(buf) {
        const Y = buf.readUInt16LE(0);
        const M = buf.readUInt8(2);
        const D = buf.readUInt8(3);
        const h = buf.readUInt8(4);
        const m = buf.readUInt8(5);
        const s = buf.readUInt8(6);
        const dt = new Date(Y, M, D, h, m, s);
        return {
            name: 'EndDate',
            endDate: dt,
        };
    }
    _parseArea(buf) {
        return {
            name: 'Area',
            area: buf.toString('UTF-8'),
        };
    }
    _parsePerson(buf) {
        const buf_list = [];
        let offset = 0;
        let start = 0;
        while (true) {
            if (buf.readUInt8(offset) === 0x00) {
                if (start !== offset) {
                    buf_list.push(buf.slice(start, offset));
                    start = offset;
                }
            }
            offset++;
            if (offset >= buf.length) {
                if (start !== offset) {
                    buf_list.push(buf.slice(start, offset));
                }
                break;
            }
        }
        const list = [];
        buf_list.forEach((b) => {
            list.push(b.toString('UTF-8'));
        });
        return {
            name: 'Person',
            person: list,
        };
    }
    _parseMimeTypeForImage(buf) {
        return {
            name: 'MimeTypeForImage',
            mimeTypeForImage: buf.toString('UTF-8'),
        };
    }
    _parseMimeTypeForMedia(buf) {
        return {
            name: 'MimeTypeForMedia',
            mimeTypeForMedia: buf.toString('UTF-8'),
        };
    }
    _parseImage(buf) {
        return {
            name: 'Image',
            image: buf,
        };
    }
    _parseContents(buf, pid) {
        return {
            name: 'Contents' + pid,
            contents: buf.toString('UTF-8'),
        };
    }
    _parseMedia(buf) {
        return {
            name: 'Media',
            media: buf,
        };
    }
    _parsePackage(buf) {
        return {
            name: 'Package',
            package: buf.toString('UTF-8'),
        };
    }
    _parseClass(buf) {
        return {
            name: 'Class',
            class: buf.toString('UTF-8'),
        };
    }
    _parseSharingInformation(buf) {
        return {
            name: 'SharingInformation',
            sharingInformation: buf.toString('UTF-8'),
        };
    }
    _parseBeepPattern(buf) {
        const list = [];
        let offset = 0;
        while (true) {
            const len = buf.readUInt8(offset++);
            let name = '';
            for (let i = 0; i < len; i++) {
                name += String.fromCharCode(buf.readUInt8(offset++));
            }
            list.push(name);
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'BeepPattern',
            beepPattern: list,
        };
    }
    createRequest(message_name, params) {
        if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {
            return null;
        }
        const buf_list = [];
        // packet header
        const header_buf = Buffer.alloc(1);
        header_buf.writeUInt8(parseInt('00000001', 2));
        buf_list.push(header_buf);
        // Service ID
        const sid_buf = Buffer.alloc(1);
        sid_buf.writeUInt8(this.SERVICE_ID);
        buf_list.push(sid_buf);
        // Message ID
        const mid_buf = Buffer.alloc(2);
        mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);
        buf_list.push(mid_buf);
        // Number of parameters + Payload
        const pl_buf = this._createPayload(message_name, params);
        if (!pl_buf) {
            return null;
        }
        buf_list.push(pl_buf);
        return Buffer.concat(buf_list);
    }
    _createPayload(message_name, params) {
        if (message_name === 'CONFIRM_NOTIFY_CATEGORY') {
            return this._createPayloadConfirmNotifyCategory(params);
        }
        else if (message_name === 'NOTIFY_INFORMATION') {
            return this._createPayloadNotifyInformation(params);
        }
        else if (message_name === 'GET_PD_NOTIFY_DETAIL_DATA_RESP') {
            return this._createPayloadGetPdNotifyDetailDataResp(params);
        }
        else if (message_name === 'START_PD_APPLICATION_RESP') {
            return this._createPayloadStartPdApplicationResp(params);
        }
        else {
            return null;
        }
    }
    _createPropertyBlockBuffer(pid, val_buf) {
        const pid_buf = Buffer.from([pid]);
        let len = 0;
        if (val_buf) {
            len = val_buf.length;
        }
        let len_buf = Buffer.alloc(4);
        len_buf.writeUInt32LE(len);
        len_buf = len_buf.slice(0, 3);
        const buf_list = [pid_buf, len_buf];
        if (val_buf) {
            buf_list.push(val_buf);
        }
        return Buffer.concat(buf_list);
    }
    _createPayloadConfirmNotifyCategory(params) {
        const pnum_buf = Buffer.alloc(1);
        pnum_buf.writeUInt8(0);
        return pnum_buf;
    }
    _createPayloadNotifyInformation(params) {
        /*
            NotifyCategory   M 2 0x03
            UniqueId         M 2 0x08
            ParameterIdList  M 2 0x07
            RumblingSetting  O 1 0x10
            VibrationPattern O   0x11
            LedPattern       O   0x12
            BeepPattern      O   0x2B
            */
        /*
            let pnum = 0;
            let notify_category = null;
            let notify_category_name = '';
            if('NotifyCategory' in params) {
                notify_category =  params['NotifyCategory'];
                if(typeof(notify_category) === 'number') {
                    if(notify_category >= 0 && notify_category <= 0xFF && notify_category % 1 === 0) {
                        let hit = false;
                        for(let name in this._NOTIFY_CATEGORY_NAME_ID_MAP) {
                            if(this._NOTIFY_CATEGORY_NAME_ID_MAP[name] === notify_category) {
                                hit = true;
                                notify_category_name = name;
                                break;
                            }
                        }
                        if(hit === true) {
                            pnum ++;
                        } else {
                            return null;
                        }
                    } else {
                        return null;
                    }
                } else if(typeof(notify_category) === 'string') {
                    if(notify_category in this._NOTIFY_CATEGORY_NAME_ID_MAP) {
                        notify_category = this._NOTIFY_CATEGORY_NAME_ID_MAP[notify_category];
                        notify_category_name = notify_category;
                        pnum ++;
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
            } else {
                return null;
            }
            let uid = null;
            if(('UniqueId' in params) && typeof(params['UniqueId']) === 'number' && params['UniqueId'] >= 0 && params['UniqueId'] <= 0xFFFF && params['UniqueId'] % 1 === 0) {
                uid = params['UniqueId'];
                pnum ++;
            } else {
                return null;
            }
            // buffer list
            let buf_list = [];
            // Number of parameters
            let pnum_buf = Buffer.from([pnum]);
            buf_list.push(pnum_buf);
            // NotifyCategory
            if(notify_category !== null) {
                let n = 1 << notify_category;
                let val_buf = Buffer.alloc(2);
                val_buf.writeUInt16LE(n);
                buf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));
            }
            // UniqueId
            if(uid !== null) {
                let val_buf = Buffer.alloc(2);
                val_buf.writeUInt16LE(uid);
                buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));
            }
            // Create a packet
            return Buffer.concat(buf_list);
            */
        return null;
    }
    _createPayloadGetPdNotifyDetailDataResp(params) {
        let pnum = 0;
        let rcode = null;
        if ('ResultCode' in params &&
            typeof params.ResultCode === 'number' &&
            params.ResultCode >= 0 &&
            params.ResultCode <= 0xff &&
            params.ResultCode % 1 === 0) {
            rcode = params.ResultCode;
            pnum++;
        }
        else {
            return null;
        }
        let uid = null;
        if ('UniqueId' in params &&
            typeof params.UniqueId === 'number' &&
            params.UniqueId >= 0 &&
            params.UniqueId <= 0xff &&
            params.UniqueId % 1 === 0) {
            uid = params.UniqueId;
            pnum++;
        }
        else {
            return null;
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // ResultCode
        if (rcode !== null) {
            const val_buf = Buffer.alloc(1);
            val_buf.writeUInt8(rcode);
            buf_list.push(this._createPropertyBlockBuffer(0x00, val_buf));
        }
        // UniqueId
        if (uid !== null) {
            const val_buf = Buffer.alloc(2);
            val_buf.writeUInt16LE(uid);
            buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
    _createPayloadStartPdApplicationResp(params) {
        let pnum = 0;
        let rcode;
        if ('ResultCode' in params &&
            typeof params.ResultCode === 'number' &&
            params.ResultCode >= 0 &&
            params.ResultCode <= 0xff &&
            params.ResultCode % 1 === 0) {
            rcode = params.ResultCode;
            pnum++;
        }
        else {
            return null;
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // ResultCode
        if (rcode !== null) {
            const val_buf = Buffer.alloc(1);
            val_buf.writeUInt8(rcode);
            buf_list.push(this._createPropertyBlockBuffer(0x00, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
}
exports.default = LinkingServiceNotification;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service-operation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service-operation.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-11-02
 * ---------------------------------------------------------------- */

Object.defineProperty(exports, "__esModule", { value: true });
class LinkingServiceOperation {
    constructor() {
        this.SERVICE_ID = 0x02;
        this.SERVICE_NAME = 'PeripheralDeviceOperation';
        this.MESSAGE_NAME_MAP = {
            '00': 'NOTIFY_PD_OPERATION',
        };
        this._device = {};
    }
    setDeviceInfo(info) {
        this._device = info;
    }
    parsePayload(pnum, buf) {
        let offset = 0;
        const parameters = [];
        try {
            for (let i = 0; i < pnum; i++) {
                const pid = buf.readUInt8(offset++);
                let plen_buf = buf.slice(offset, offset + 3);
                plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);
                const plen = plen_buf.readUInt32LE(0);
                offset += 3;
                const pvalue_buf = buf.slice(offset, offset + plen);
                offset += plen;
                parameters.push(this._parseParameter(pid, pvalue_buf));
            }
        }
        catch (e) {
            // do nothing.
        }
        return parameters;
    }
    _parseParameter(pid, buf) {
        let parsed = null;
        if (pid === 0x00) {
            parsed = this._parseResultCode(buf);
        }
        else if (pid === 0x01) {
            parsed = this._parseCancel(buf);
        }
        else if (pid === 0x02) {
            parsed = this._parseButtonId(buf);
        }
        if (parsed) {
            parsed.parameterId = pid;
        }
        return parsed;
    }
    _parseResultCode(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        return {
            name: 'ResultCode',
            resultCode: code,
            resultText: text,
        };
    }
    _parseCancel(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'User cancel';
        }
        return {
            name: 'Cancel',
            cancelCode: code,
            cancelText: text,
        };
    }
    _parseButtonId(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'Power';
        }
        else if (code === 0x01) {
            text = 'Return';
        }
        else if (code === 0x02) {
            text = 'SingleClick';
        }
        else if (code === 0x03) {
            text = 'Home';
        }
        else if (code === 0x04) {
            text = 'DoubleClick';
        }
        else if (code === 0x05) {
            text = 'VolumeUp';
        }
        else if (code === 0x06) {
            text = 'VolumeDown';
        }
        else if (code === 0x07) {
            text = 'LongPress';
        }
        else if (code === 0x08) {
            text = 'Pause';
        }
        else if (code === 0x09) {
            text = 'LongPressRelease';
        }
        else if (code === 0x0a) {
            text = 'FastForward';
        }
        else if (code === 0x0b) {
            text = 'ReWind';
        }
        else if (code === 0x0c) {
            text = 'Shutter';
        }
        else if (code === 0x0d) {
            text = 'Up';
        }
        else if (code === 0x0e) {
            text = 'Down';
        }
        else if (code === 0x0f) {
            text = 'Left';
        }
        else if (code === 0x10) {
            text = 'Right';
        }
        else if (code === 0x11) {
            text = 'Enter';
        }
        else if (code === 0x12) {
            text = 'Menu';
        }
        else if (code === 0x13) {
            text = 'Play';
        }
        else if (code === 0x14) {
            text = 'Stop';
        }
        return {
            name: 'ButtonId',
            buttonId: code,
            buttonName: text,
        };
    }
}
exports.default = LinkingServiceOperation;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service-property.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service-property.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-10-24
 * ---------------------------------------------------------------- */

Object.defineProperty(exports, "__esModule", { value: true });
class LinkingServiceProperty {
    constructor() {
        this.SERVICE_ID = 0x00;
        this.SERVICE_NAME = 'PeripheralDevicePropertyInformation';
        this.MESSAGE_NAME_MAP = {
            '00': 'GET_DEVICE_INFORMATION',
            '01': 'GET_DEVICE_INFORMATION_RESP',
        };
        // Private
        this._WRITE_MESSAGE_ID_MAP = {
            GET_DEVICE_INFORMATION: 0x00,
        };
        this._device = {};
    }
    setDeviceInfo(info) {
        this._device = info;
    }
    parsePayload(pnum, buf) {
        let offset = 0;
        const parameters = [];
        try {
            for (let i = 0; i < pnum; i++) {
                const pid = buf.readUInt8(offset++);
                let plen_buf = buf.slice(offset, offset + 3);
                plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);
                const plen = plen_buf.readUInt32LE(0);
                offset += 3;
                const pvalue_buf = buf.slice(offset, offset + plen);
                offset += plen;
                parameters.push(this._parseParameter(pid, pvalue_buf));
            }
        }
        catch (e) {
            // do nothing.
        }
        return parameters;
    }
    _parseParameter(pid, buf) {
        let parsed = null;
        if (pid === 0x00) {
            parsed = this._parseResultCode(buf);
        }
        else if (pid === 0x01) {
            parsed = this._parseCancel(buf);
        }
        else if (pid === 0x02) {
            parsed = this._parseServiceList(buf);
        }
        else if (pid === 0x03) {
            parsed = this._parseDeviceId(buf);
        }
        else if (pid === 0x04) {
            parsed = this._parseDeviceUid(buf);
        }
        else if (pid === 0x05) {
            parsed = this._parseDeviceCapability(buf);
        }
        else if (pid === 0x06) {
            parsed = this._parseOriginalInformation(buf);
        }
        else if (pid === 0x07) {
            parsed = this._parseExSensorType(buf);
        }
        if (parsed) {
            parsed.parameterId = pid;
        }
        return parsed;
    }
    _parseResultCode(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        return {
            name: 'ResultCode',
            resultCode: code,
            resultText: text,
        };
    }
    _parseCancel(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'User cancel';
        }
        return {
            name: 'Cancel',
            cancelCode: code,
            cancelText: text,
        };
    }
    _parseServiceList(buf) {
        const v = buf.readUInt8(0);
        const list = [];
        if (v & 0b00000001) {
            list.push({ id: 0, name: 'PeripheralDevicePropertyInformation' });
        }
        if (v & 0b00000010) {
            list.push({ id: 1, name: 'PeripheralDeviceNotification' });
        }
        if (v & 0b00000100) {
            list.push({ id: 2, name: 'PeripheralDeviceOperation' });
        }
        if (v & 0b00001000) {
            list.push({ id: 3, name: 'PeripheralDeviceSensorInformation' });
        }
        if (v & 0b00010000) {
            list.push({ id: 4, name: 'PeripheralDeviceSettingOperation' });
        }
        return {
            name: 'ServiceList',
            serviceList: list,
        };
    }
    _parseDeviceId(buf) {
        return {
            name: 'DeviceId',
            deviceId: buf.toString('hex'),
        };
    }
    _parseDeviceUid(buf) {
        return {
            name: 'DeviceUid',
            deviceUid: buf.toString('hex'),
        };
    }
    _parseDeviceCapability(buf) {
        const v = buf.readUInt8(0);
        const list = [];
        if (v & 0b00000010) {
            list.push({ id: 1, name: 'Gyroscope' });
        }
        if (v & 0b00000100) {
            list.push({ id: 2, name: 'Accelerometer' });
        }
        if (v & 0b00001000) {
            list.push({ id: 3, name: 'Orientation' });
        }
        if (v & 0b00010000) {
            list.push({ id: 4, name: 'Battery' });
        }
        if (v & 0b00100000) {
            list.push({ id: 5, name: 'Temperature' });
        }
        if (v & 0b01000000) {
            list.push({ id: 6, name: 'Humidity' });
        }
        if (v & 0b10000000) {
            list.push({ id: 7, name: 'Atmospheric pressure' });
        }
        return {
            name: 'DeviceCapability',
            deviceCapability: list,
        };
    }
    _parseOriginalInformation(buf) {
        const type = buf.readUInt8(0);
        let type_name = '';
        if (type === 0x00) {
            type_name = 'AppName';
        }
        else if (type === 0x01) {
            type_name = 'AppNameLocal';
        }
        else if (type === 0x02) {
            type_name = 'AppDLURL1';
        }
        else if (type === 0x03) {
            type_name = 'AppDLURL2';
        }
        else if (type === 0x04) {
            type_name = 'AppDLURL3';
        }
        else if (type === 0x05) {
            type_name = 'AppExecInfo1';
        }
        else if (type === 0x06) {
            type_name = 'AppExecInfo2';
        }
        else if (type === 0x07) {
            type_name = 'AppExecInfo3';
        }
        else if (type === 0x08) {
            type_name = 'AppPackage';
        }
        return {
            name: 'OriginalInformation',
            originalInformationCode: type,
            originalInformationName: type_name,
            originalInformationText: buf.slice(1).toString('UTF-8'),
        };
    }
    _parseExSensorType(buf) {
        const v = buf.readUInt8(0);
        const list = [];
        if (v & 0b00000001) {
            list.push({ id: 0, name: 'Version' });
        }
        if (v & 0b00000010) {
            list.push({ id: 1, name: 'Version' });
        }
        if (v & 0b00000100) {
            list.push({ id: 2, name: 'Flag' });
        }
        if (v & 0b00001000) {
            list.push({ id: 3, name: 'Button' });
        }
        if (v & 0b00010000) {
            list.push({ id: 4, name: 'Opening and closing' });
        }
        if (v & 0b00100000) {
            list.push({ id: 5, name: 'Human detection' });
        }
        if (v & 0b01000000) {
            list.push({ id: 6, name: 'Move' });
        }
        if (v & 0b10000000) {
            list.push({ id: 7, name: 'Illuminance' });
        }
        return {
            name: 'ExSensorType',
            exSensorType: list,
        };
    }
    createRequest(message_name, params) {
        if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {
            return null;
        }
        const buf_list = [];
        // packet header
        const header_buf = Buffer.alloc(1);
        header_buf.writeUInt8(parseInt('00000001', 2));
        buf_list.push(header_buf);
        // Service ID
        const sid_buf = Buffer.alloc(1);
        sid_buf.writeUInt8(this.SERVICE_ID);
        buf_list.push(sid_buf);
        // Message ID
        const mid_buf = Buffer.alloc(2);
        mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);
        buf_list.push(mid_buf);
        // Number of parameters + Payload
        const pl_buf = this._createPayload(message_name, params);
        if (!pl_buf) {
            return null;
        }
        buf_list.push(pl_buf);
        return Buffer.concat(buf_list);
    }
    _createPayload(message_name, params) {
        if (message_name === 'GET_DEVICE_INFORMATION') {
            return this._createPayloadGetDeviceInformation(params);
        }
        else {
            return null;
        }
    }
    _createPayloadGetDeviceInformation(params) {
        const pnum_buf = Buffer.alloc(1);
        pnum_buf.writeUInt8(0);
        return pnum_buf;
    }
}
exports.default = LinkingServiceProperty;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service-sensor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service-sensor.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-11-02
 * ---------------------------------------------------------------- */

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ieee754_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/ieee754.js"));
class LinkingServiceSensor {
    constructor() {
        this.SERVICE_ID = 0x03;
        this.SERVICE_NAME = 'PeripheralDeviceSensorInformation';
        this.MESSAGE_NAME_MAP = {
            '00': 'GET_SENSOR_INFO',
            '01': 'GET_SENSOR_INFO_RESP',
            '02': 'SET_NOTIFY_SENSOR_INFO',
            '03': 'SET_NOTIFY_SENSOR_INFO_RESP',
            '04': 'NOTIFY_PD_SENSOR_INFO',
        };
        // Private
        this._WRITE_MESSAGE_ID_MAP = {
            GET_SENSOR_INFO: 0x00,
            SET_NOTIFY_SENSOR_INFO: 0x02,
        };
        this._device = {};
    }
    setDeviceInfo(info) {
        this._device = info;
    }
    parsePayload(pnum, buf) {
        let offset = 0;
        const parameters = [];
        let sensor_type = 0;
        try {
            for (let i = 0; i < pnum; i++) {
                const pid = buf.readUInt8(offset++);
                let plen_buf = buf.slice(offset, offset + 3);
                plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);
                const plen = plen_buf.readUInt32LE(0);
                offset += 3;
                const pvalue_buf = buf.slice(offset, offset + plen);
                offset += plen;
                const p = this._parseParameter(pid, pvalue_buf, sensor_type);
                if (pid === 0x02 && 'sensorTypeCode' in p) {
                    sensor_type = p.sensorTypeCode;
                }
                parameters.push(p);
            }
        }
        catch (e) {
            // do nothing.
        }
        return parameters;
    }
    _parseParameter(pid, buf, sensor_type) {
        let parsed = {};
        if (pid === 0x00) {
            parsed = this._parseResultCode(buf);
        }
        else if (pid === 0x01) {
            parsed = this._parseCancel(buf);
        }
        else if (pid === 0x02) {
            parsed = this._parseSensorType(buf);
        }
        else if (pid === 0x03) {
            parsed = this._parseStatus(buf);
        }
        else if (pid === 0x04) {
            parsed = this._parseX_value(buf);
        }
        else if (pid === 0x05) {
            parsed = this._parseY_value(buf);
        }
        else if (pid === 0x06) {
            parsed = this._parseZ_value(buf);
        }
        else if (pid === 0x07) {
            parsed = this._parseX_threshold(buf);
        }
        else if (pid === 0x08) {
            parsed = this._parseY_threshold(buf);
        }
        else if (pid === 0x09) {
            parsed = this._parseZ_threshold(buf);
        }
        else if (pid === 0x0a) {
            parsed = this._parseOriginalData(buf, sensor_type);
        }
        parsed.parameterId = pid;
        return parsed;
    }
    _parseResultCode(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        return {
            name: 'ResultCode',
            resultCode: code,
            resultText: text,
        };
    }
    _parseCancel(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'User cancel';
        }
        return {
            name: 'Cancel',
            cancelCode: code,
            cancelText: text,
        };
    }
    _parseSensorType(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'Gyroscope';
        }
        else if (code === 0x01) {
            text = 'Accelerometer';
        }
        else if (code === 0x02) {
            text = 'Orientation';
        }
        else if (code === 0x03) {
            text = 'Battery';
        }
        else if (code === 0x04) {
            text = 'Temperature';
        }
        else if (code === 0x05) {
            text = 'Humidity';
        }
        else if (code === 0x06) {
            text = 'Atmospheric pressure';
        }
        else if (code === 0x07) {
            text = 'Opening and closing';
        }
        else if (code === 0x08) {
            text = 'Human detection';
        }
        else if (code === 0x09) {
            text = 'Move';
        }
        else if (code === 0x0a) {
            text = 'Illuminance';
        }
        return {
            name: 'SensorType',
            sensorTypeCode: code,
            sensorTypeText: text,
        };
    }
    _parseStatus(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OFF';
        }
        else if (code === 0x01) {
            text = 'ON';
        }
        return {
            name: 'Status',
            statusCode: code,
            statusText: text,
        };
    }
    _parseX_value(buf) {
        return {
            name: 'X_value',
            xValue: buf.readFloatLE(0),
        };
    }
    _parseY_value(buf) {
        return {
            name: 'Y_value',
            yValue: buf.readFloatLE(0),
        };
    }
    _parseZ_value(buf) {
        return {
            name: 'Z_value',
            zValue: buf.readFloatLE(0),
        };
    }
    _parseX_threshold(buf) {
        return {
            name: 'X_threshold',
            xThreshold: buf.readFloatLE(0),
        };
    }
    _parseY_threshold(buf) {
        return {
            name: 'Y_threshold',
            yThreshold: buf.readFloatLE(0),
        };
    }
    _parseZ_threshold(buf) {
        return {
            name: 'Z_threshold',
            zThreshold: buf.readFloatLE(0),
        };
    }
    _parseOriginalData(buf, sensor_type) {
        const n = buf.readUInt16LE(0) & 0b0000111111111111;
        if (sensor_type === 0x03) {
            // Battery
            return {
                chargeRequired: n & 0b0000100000000000 ? true : false,
                chargeLevel: Math.min((n & 0b0000011111111111) / 10, 100),
            };
        }
        else if (sensor_type === 0x04) {
            // Temperature
            return {
                temperature: ieee754_1.default.read(n, 1, 4, 7),
            };
        }
        else if (sensor_type === 0x05) {
            // Humidity
            const v = ieee754_1.default.read(n, 0, 4, 8);
            return {
                humidity: v,
            };
        }
        else if (sensor_type === 0x06) {
            // Atmospheric pressure
            return {
                pressure: buf.readFloatLE(0),
            };
        }
        else if (sensor_type === 0x07) {
            // Opening and closing
            return {
                openingStatus: n & 0b0000100000000000 ? true : false,
                openingCount: Math.min((n & 0b0000011111111111) / 10, 100),
            };
        }
        else if (sensor_type === 0x08) {
            // Human detection
            return {
                humanDetectionResponse: n & 0b0000100000000000 ? true : false,
                humanDetectionCount: n & 0b0000011111111111,
            };
        }
        else if (sensor_type === 0x09) {
            // Move (Vibration Sensor)
            return {
                moveResponse: n & 0b0000100000000000 ? true : false,
                moveCount: n & 0b0000011111111111,
            };
        }
        else if (sensor_type === 0x0a) {
            // Illuminance
            return {
                illuminance: buf.readFloatLE(0),
            };
        }
        else {
            return {};
        }
    }
    createRequest(message_name, params) {
        if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {
            return null;
        }
        const buf_list = [];
        // packet header
        const header_buf = Buffer.alloc(1);
        header_buf.writeUInt8(parseInt('00000001', 2));
        buf_list.push(header_buf);
        // Service ID
        const sid_buf = Buffer.alloc(1);
        sid_buf.writeUInt8(this.SERVICE_ID);
        buf_list.push(sid_buf);
        // Message ID
        const mid_buf = Buffer.alloc(2);
        mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);
        buf_list.push(mid_buf);
        // Number of parameters + Payload
        const pl_buf = this._createPayload(message_name, params);
        if (!pl_buf) {
            return null;
        }
        buf_list.push(pl_buf);
        return Buffer.concat(buf_list);
    }
    _createPayload(message_name, params) {
        if (message_name === 'GET_SENSOR_INFO') {
            return this._createPayloadGetSensorInfo(params);
        }
        else if (message_name === 'SET_NOTIFY_SENSOR_INFO') {
            return this._createPayloadSetNotifySensorInfo(params);
        }
        else {
            return null;
        }
    }
    _createPropertyBlockBuffer(pid, val_buf) {
        const pid_buf = Buffer.from([pid]);
        let len = 0;
        if (val_buf) {
            len = val_buf.length;
        }
        let len_buf = Buffer.alloc(4);
        len_buf.writeUInt32LE(len);
        len_buf = len_buf.slice(0, 3);
        const buf_list = [pid_buf, len_buf];
        if (val_buf) {
            buf_list.push(val_buf);
        }
        return Buffer.concat(buf_list);
    }
    _createPayloadGetSensorInfo(params) {
        let pnum = 0;
        let sensor_type = null;
        if ('SensorType' in params &&
            typeof params.SensorType === 'number' &&
            params.SensorType >= 0x00 &&
            params.SensorType <= 0xff &&
            params.SensorType % 1 === 0) {
            sensor_type = params.SensorType;
            pnum++;
        }
        else {
            return null;
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // SensorType
        if (sensor_type !== null) {
            const val_buf = Buffer.from([sensor_type]);
            buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
    _createPayloadSetNotifySensorInfo(params) {
        let pnum = 0;
        let sensor_type = null;
        if ('SensorType' in params &&
            typeof params.SensorType === 'number' &&
            params.SensorType >= 0x00 &&
            params.SensorType <= 0xff &&
            params.SensorType % 1 === 0) {
            sensor_type = params.SensorType;
            pnum++;
        }
        else {
            return null;
        }
        let status = null;
        if ('Status' in params) {
            status = params.Status ? 1 : 0;
            pnum++;
        }
        else {
            return null;
        }
        let x = null;
        let y = null;
        let z = null;
        if (sensor_type <= 0x02) {
            if ('X_threshold' in params) {
                if (typeof params.X_threshold === 'number') {
                    x = params.X_threshold;
                    pnum++;
                }
                else {
                    return null;
                }
            }
            if ('Y_threshold' in params) {
                if (typeof params.Y_threshold === 'number') {
                    y = params.Y_threshold;
                    pnum++;
                }
                else {
                    return null;
                }
            }
            if ('Z_threshold' in params) {
                if (typeof params.Z_threshold === 'number') {
                    z = params.Z_threshold;
                    pnum++;
                }
                else {
                    return null;
                }
            }
        }
        let odata = null;
        if ('OriginalData' in params) {
            if (params.OriginalData && params.OriginalData instanceof Buffer) {
                odata = params.OriginalData;
                pnum++;
            }
            else {
                return null;
            }
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // SensorType
        if (sensor_type !== null) {
            const val_buf = Buffer.from([sensor_type]);
            buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));
        }
        // Status
        if (status !== null) {
            const val_buf = Buffer.from([status]);
            buf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));
        }
        // X_threshold
        if (x !== null) {
            const val_buf = Buffer.alloc(4);
            val_buf.writeFloatLE(x, 0);
            buf_list.push(this._createPropertyBlockBuffer(0x07, val_buf));
        }
        // Y_threshold
        if (y !== null) {
            const val_buf = Buffer.alloc(4);
            val_buf.writeFloatLE(y, 0);
            buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));
        }
        // Z_threshold
        if (z !== null) {
            const val_buf = Buffer.alloc(4);
            val_buf.writeFloatLE(z, 0);
            buf_list.push(this._createPropertyBlockBuffer(0x09, val_buf));
        }
        // OriginalData
        if (odata !== null) {
            const val_buf = odata;
            buf_list.push(this._createPropertyBlockBuffer(0x0a, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
}
exports.default = LinkingServiceSensor;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service-setting.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service-setting.js
 *
 * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2019-10-24
 * ---------------------------------------------------------------- */

Object.defineProperty(exports, "__esModule", { value: true });
class LinkingServiceSetting {
    constructor() {
        this.SERVICE_ID = 0x04;
        this.SERVICE_NAME = 'PeripheralDeviceSettingOperation';
        this.MESSAGE_NAME_MAP = {
            '00': 'GET_APP_VERSION',
            '01': 'GET_APP_VERSION_RESP',
            '02': 'CONFIRM_INSTALL_APP',
            '03': 'CONFIRM_INSTALL_APP_RESP',
            '04': 'GET_SETTING_INFORMATION',
            '05': 'GET_SETTING_INFORMATION_RESP',
            '06': 'GET_SETTING_NAME',
            '07': 'GET_SETTING_NAME_RESP',
            '08': 'SELECT_SETTING_INFORMATION',
            '09': 'SELECT_SETTING_INFORMATION_RESP',
        };
        // Private
        this._WRITE_MESSAGE_ID_MAP = {
            GET_APP_VERSION: 0x00,
            CONFIRM_INSTALL_APP: 0x02,
            GET_SETTING_INFORMATION: 0x04,
            GET_SETTING_NAME: 0x06,
            SELECT_SETTING_INFORMATION: 0x08,
        };
        this._SETTING_NAME_TYPE_MAP = {
            LEDColorName: 0x00,
            LEDPatternName: 0x01,
            VibrationPatternName: 0x02,
            BeepPatternName: 0x03,
        };
        this._device = {};
    }
    setDeviceInfo(info) {
        this._device = info;
    }
    parsePayload(pnum, buf) {
        let offset = 0;
        const parameters = [];
        try {
            for (let i = 0; i < pnum; i++) {
                const pid = buf.readUInt8(offset++);
                let plen_buf = buf.slice(offset, offset + 3);
                plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);
                const plen = plen_buf.readUInt32LE(0);
                offset += 3;
                const pvalue_buf = buf.slice(offset, offset + plen);
                offset += plen;
                parameters.push(this._parseParameter(pid, pvalue_buf));
            }
        }
        catch (e) {
            // do nothing.
        }
        return parameters;
    }
    _parseParameter(pid, buf) {
        let parsed = null;
        if (pid === 0x00) {
            parsed = this._parseResultCode(buf);
        }
        else if (pid === 0x01) {
            parsed = this._parseCancel(buf);
        }
        else if (pid === 0x02) {
            parsed = this._parseSettingNameType(buf);
        }
        else if (pid === 0x03) {
            parsed = this._parseAppName(buf);
        }
        else if (pid === 0x04) {
            parsed = this._parseFileVer(buf);
        }
        else if (pid === 0x05) {
            parsed = this._parseFileSize(buf);
        }
        else if (pid === 0x06) {
            parsed = this._parseInstallConfirmStatus(buf);
        }
        else if (pid === 0x07) {
            parsed = this._parseSettingInformationRequest(buf);
        }
        else if (pid === 0x08) {
            parsed = this._parseSettingInformationData(buf);
        }
        else if (pid === 0x09) {
            parsed = this._parseSettingNameData(buf);
        }
        if (parsed) {
            parsed.parameterId = pid;
        }
        return parsed;
    }
    _parseResultCode(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, request processed correctly';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        return {
            name: 'ResultCode',
            resultCode: code,
            resultText: text,
        };
    }
    _parseCancel(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'User cancel';
        }
        return {
            name: 'Cancel',
            cancelCode: code,
            cancelText: text,
        };
    }
    _parseSettingNameType(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'LEDColorName';
        }
        else if (code === 0x01) {
            text = 'LEDPatternName';
        }
        else if (code === 0x02) {
            text = 'VibrationPatternName';
        }
        else if (code === 0x03) {
            text = 'BeepPatternName';
        }
        return {
            name: 'SettingNameType',
            settingNameTypeCode: code,
            settingNameTypeText: text,
        };
    }
    _parseAppName(buf) {
        return {
            name: 'AppName',
            appName: buf.toString('UTF-8'),
        };
    }
    _parseFileVer(buf) {
        const list = [];
        for (let i = 0; i < buf.length; i++) {
            list.push(buf.readUInt8(i));
        }
        return {
            name: 'FileVer',
            fileVer: list.join('.'),
        };
    }
    _parseFileSize(buf) {
        return {
            name: 'FileSize',
            fileSize: buf.readUInt32LE(0),
        };
    }
    _parseInstallConfirmStatus(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'OK, Device has been ready for install';
        }
        else if (code === 0x01) {
            text = 'Cancel';
        }
        else if (code === 0x02) {
            text = 'Error, failed';
        }
        else if (code === 0x03) {
            text = 'Error, no reason defined';
        }
        else if (code === 0x04) {
            text = 'Error, data not available';
        }
        else if (code === 0x05) {
            text = 'Error, not supported';
        }
        else if (code === 0x06) {
            text = 'Error, Device has no space to install';
        }
        else if (code === 0x07) {
            text = 'Error, Requested file was already installed';
        }
        else if (code === 0x08) {
            text = 'Error, Newest file was already installed';
        }
        return {
            name: 'InstallConfirmStatus',
            installConfirmStatusCode: code,
            installConfirmStatusText: text,
        };
    }
    _parseSettingInformationRequest(buf) {
        const code = buf.readUInt8(0);
        let text = '';
        if (code === 0x00) {
            text = 'SETTING';
        }
        else if (code === 0x01) {
            text = 'START_DEMONSTRATION';
        }
        else if (code === 0x02) {
            text = 'STOP_DEMONSTRATION';
        }
        let offset = 1;
        const settings = [];
        while (true) {
            const setting_code = buf.readUInt8(offset);
            if (setting_code === 0x00) {
                settings.push({
                    settingCode: setting_code,
                    settingName: 'LED',
                    colorMax: buf.readUInt8(offset + 1),
                    colorNumber: buf.readUInt8(offset + 2),
                    patternMax: buf.readUInt8(offset + 3),
                    patternNumber: buf.readUInt8(offset + 4),
                    duration: buf.readUInt8(offset + 5),
                });
                offset += 5;
            }
            else if (setting_code === 0x01) {
                settings.push({
                    settingCode: setting_code,
                    settingName: 'Vibration',
                    patternMax: buf.readUInt8(offset + 1),
                    patternNumber: buf.readUInt8(offset + 2),
                    duration: buf.readUInt8(offset + 3),
                });
                offset += 3;
            }
            else if (setting_code === 0x02) {
                settings.push({
                    settingCode: setting_code,
                    settingName: 'Beep',
                    patternMax: buf.readUInt8(offset + 1),
                    patternNumber: buf.readUInt8(offset + 2),
                    duration: buf.readUInt8(offset + 3),
                });
                offset += 3;
            }
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'SettingInformationRequest',
            settingInformationRequestCode: code,
            settingInformationRequestName: text,
            settingInformationRequestData: settings,
        };
    }
    _parseSettingInformationData(buf) {
        let offset = 0;
        const settings = [];
        while (true) {
            const setting_code = buf.readUInt8(offset);
            if (setting_code === 0x00) {
                settings.push({
                    id: setting_code,
                    name: 'LED',
                    colorMax: buf.readUInt8(offset + 1),
                    colorNumber: buf.readUInt8(offset + 2),
                    patternMax: buf.readUInt8(offset + 3),
                    patternNumber: buf.readUInt8(offset + 4),
                    duration: buf.readUInt8(offset + 5),
                });
                offset += 6;
            }
            else if (setting_code === 0x01) {
                settings.push({
                    id: setting_code,
                    name: 'Vibration',
                    patternMax: buf.readUInt8(offset + 1),
                    patternNumber: buf.readUInt8(offset + 2),
                    duration: buf.readUInt8(offset + 3),
                });
                offset += 4;
            }
            else if (setting_code === 0x02) {
                settings.push({
                    id: setting_code,
                    name: 'Beep',
                    patternMax: buf.readUInt8(offset + 1),
                    patternNumber: buf.readUInt8(offset + 2),
                    duration: buf.readUInt8(offset + 3),
                });
                offset += 4;
            }
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'SettingInformationData',
            settingInformationData: settings,
        };
    }
    _parseSettingNameData(buf) {
        const list = [];
        let offset = 0;
        while (true) {
            const len = buf.readUInt8(offset++);
            const name = buf.slice(offset, offset + len - 1).toString('utf-8');
            offset += len;
            list.push(name);
            if (offset >= buf.length) {
                break;
            }
        }
        return {
            name: 'SettingNameData',
            settingNameData: list,
        };
    }
    /* ------------------------------------------------------------------
     * Method: createRequest(message_name, params)
     * ---------------------------------------------------------------- */
    createRequest(message_name, params) {
        if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {
            return null;
        }
        const buf_list = [];
        // packet header
        const header_buf = Buffer.alloc(1);
        header_buf.writeUInt8(parseInt('00000001', 2));
        buf_list.push(header_buf);
        // Service ID
        const sid_buf = Buffer.alloc(1);
        sid_buf.writeUInt8(this.SERVICE_ID);
        buf_list.push(sid_buf);
        // Message ID
        const mid_buf = Buffer.alloc(2);
        mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);
        buf_list.push(mid_buf);
        // Number of parameters + Payload
        const pl_buf = this._createPayload(message_name, params);
        if (!pl_buf) {
            return null;
        }
        buf_list.push(pl_buf);
        return Buffer.concat(buf_list);
    }
    _createPayload(message_name, params) {
        if (!params || typeof params !== 'object') {
            params = {};
        }
        if (message_name === 'GET_APP_VERSION') {
            return this._createPayloadGetAppVersion(params);
        }
        else if (message_name === 'CONFIRM_INSTALL_APP') {
            return this._createPayloadConfirmInstallApp(params);
        }
        else if (message_name === 'GET_SETTING_INFORMATION') {
            return this._createPayloadGetSettingInformation(params);
        }
        else if (message_name === 'GET_SETTING_NAME') {
            return this._createPayloadGetSettingName(params);
        }
        else if (message_name === 'SELECT_SETTING_INFORMATION') {
            return this._createPayloadSelectSettingInformation(params);
        }
        else {
            return null;
        }
    }
    _createPropertyBlockBuffer(pid, val_buf) {
        const pid_buf = Buffer.from([pid]);
        let len = 0;
        if (val_buf) {
            len = val_buf.length;
        }
        let len_buf = Buffer.alloc(4);
        len_buf.writeUInt32LE(len);
        len_buf = len_buf.slice(0, 3);
        const buf_list = [pid_buf, len_buf];
        if (val_buf) {
            buf_list.push(val_buf);
        }
        return Buffer.concat(buf_list);
    }
    _createPayloadGetAppVersion(params) {
        let pnum = 0;
        let app_name = null;
        if ('AppName' in params && typeof params.AppName === 'string') {
            app_name = params.AppName;
            pnum++;
        }
        else {
            return null;
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // AppName
        if (app_name !== null) {
            const val_buf = Buffer.from(app_name);
            buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
    _createPayloadConfirmInstallApp(params) {
        let pnum = 0;
        let app_name = null;
        if ('AppName' in params && typeof params.AppName === 'string') {
            app_name = params.AppName;
            pnum++;
        }
        else {
            return null;
        }
        let file_ver = null;
        if ('FileVer' in params && typeof params.FileVer === 'string') {
            file_ver = params.FileVer;
            pnum++;
        }
        let file_size = null;
        if ('FileSize' in params &&
            typeof params.FileSize === 'number' &&
            file_size % 1 === 0) {
            file_size = params.FileSize;
            pnum++;
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // AppName
        if (app_name !== null) {
            const val_buf = Buffer.from(app_name);
            buf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));
        }
        // FileVer
        if (file_ver !== null) {
            const val_buf = Buffer.from(file_ver);
            buf_list.push(this._createPropertyBlockBuffer(0x04, val_buf));
        }
        // FileSize
        if (file_size !== null) {
            const val_buf = Buffer.alloc(4);
            val_buf.writeUInt32LE(file_size);
            buf_list.push(this._createPropertyBlockBuffer(0x05, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
    _createPayloadGetSettingInformation(params) {
        const pnum_buf = Buffer.from([0]);
        return pnum_buf;
    }
    _createPayloadGetSettingName(params) {
        let pnum = 0;
        let type = null;
        if ('SettingNameType' in params) {
            type = params.SettingNameType;
            if (typeof type === 'number') {
                let setting_name = '';
                for (const name in this._SETTING_NAME_TYPE_MAP) {
                    if (this._SETTING_NAME_TYPE_MAP[name] === type) {
                        setting_name = name;
                        break;
                    }
                }
                if (!setting_name) {
                    return null;
                }
            }
            else if (typeof type === 'string') {
                if (type in this._SETTING_NAME_TYPE_MAP) {
                    type = this._SETTING_NAME_TYPE_MAP[type];
                }
                else {
                    return null;
                }
            }
        }
        else {
            return null;
        }
        pnum++;
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // SettingNameType
        if (type !== null) {
            const val_buf = Buffer.from([type]);
            buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
    _createPayloadSelectSettingInformation(params) {
        let pnum = 0;
        let code = null;
        if ('SettingInformationRequest' in params &&
            typeof params.SettingInformationRequest === 'object') {
            const req = params.SettingInformationRequest;
            if ('requestCode' in req &&
                typeof req.requestCode === 'number' &&
                req.requestCode >= 0 &&
                req.requestCode <= 0x02 &&
                req.requestCode % 1 === 0) {
                code = req.requestCode;
            }
            else if ('requestName' in req && typeof req.requestName === 'string') {
                const name = req.requestName;
                if (name === 'SETTING') {
                    code = 0x00;
                }
                else if (name === 'START_DEMONSTRATION') {
                    code = 0x01;
                }
                else if (name === 'STOP_DEMONSTRATION') {
                    code = 0x02;
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
        pnum++;
        let settings = null;
        if ('SettingInformationData' in params) {
            if (Array.isArray(params.SettingInformationData)) {
                settings = [];
                for (let i = 0; i < params.SettingInformationData.length; i++) {
                    const s = params.SettingInformationData[i];
                    let scode = null;
                    let sname = '';
                    if ('settingCode' in s &&
                        typeof s.settingCode === 'number' &&
                        s.settingCode >= 0x00 &&
                        s.settingCode <= 0x02 &&
                        s.settingCode % 1 === 0) {
                        scode = s.settingCode;
                        if (scode === 0x00) {
                            sname = 'LED';
                        }
                        else if (scode === 0x01) {
                            sname = 'Vibration';
                        }
                        else if (scode === 0x02) {
                            sname = 'Beep';
                        }
                    }
                    else if ('settingName' in s && typeof s.settingName === 'string') {
                        sname = s.settingName;
                        if (sname === 'LED') {
                            scode = 0x00;
                        }
                        else if (sname === 'Vibration') {
                            scode = 0x01;
                        }
                        else if (sname === 'Beep') {
                            scode = 0x02;
                        }
                        else {
                            return null;
                        }
                    }
                    if (!(sname in this._device.settings)) {
                        return null;
                    }
                    let cn = null;
                    let cm = null;
                    if (scode === 0x00) {
                        // LED
                        if ('colorNumber' in s) {
                            if (typeof s.colorNumber === 'number' &&
                                s.colorNumber >= 0 &&
                                s.colorNumber <= this._device.settings.LED.colorMax &&
                                s.colorNumber % 1 === 0) {
                                cn = s.colorNumber;
                            }
                            else {
                                return null;
                            }
                        }
                        else {
                            cn = this._device.settings.LED.colorNumber;
                        }
                        cm = this._device.settings.LED.colorMax;
                    }
                    let pn = null;
                    if ('patternNumber' in s) {
                        if (typeof s.patternNumber === 'number' &&
                            s.patternNumber >= 0 &&
                            s.patternNumber <= this._device.settings[sname].patternMax &&
                            s.patternNumber % 1 === 0) {
                            pn = s.patternNumber;
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        pn = this._device.settings[sname].patternNumber;
                    }
                    const pm = this._device.settings[sname].patternMax;
                    let dur = null;
                    if ('duration' in s) {
                        if (typeof s.duration === 'number' &&
                            s.duration >= 0 &&
                            s.duration <= 0xff &&
                            s.duration % 1 === 0) {
                            dur = s.duration;
                            if (dur <= 0x05) {
                                dur = 0x05;
                            }
                            else if (dur <= 0x0a) {
                                dur = 0x0a;
                            }
                            else if (dur <= 0x1e) {
                                dur = 0x1e;
                            }
                            else if (dur <= 0x3c) {
                                dur = 0x3c;
                            }
                            else if (dur <= 0xb4) {
                                dur = 0xb4;
                            }
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        dur = this._device.settings[sname].duration;
                    }
                    settings.push({
                        settingCode: scode,
                        colorNumber: cn,
                        colorMax: cm,
                        patternNumber: pn,
                        patternMax: pm,
                        duration: dur,
                    });
                }
            }
            else {
                return null;
            }
            if (settings.length === 0) {
                settings = null;
            }
            else {
                pnum++;
            }
        }
        // buffer list
        const buf_list = [];
        // Number of parameters
        const pnum_buf = Buffer.from([pnum]);
        buf_list.push(pnum_buf);
        // SettingInformationRequest
        if (code !== null) {
            const val_buf = Buffer.from([code]);
            buf_list.push(this._createPropertyBlockBuffer(0x07, val_buf));
        }
        // SettingInformationData
        if (settings !== null) {
            const val_buf_list = [];
            settings.forEach((s) => {
                val_buf_list.push(Buffer.from([s.settingCode]));
                if (s.colorNumber !== null) {
                    val_buf_list.push(Buffer.from([s.colorMax, s.colorNumber]));
                }
                val_buf_list.push(Buffer.from([s.patternMax, s.patternNumber]));
                val_buf_list.push(Buffer.from([s.duration]));
            });
            const val_buf = Buffer.concat(val_buf_list);
            buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));
        }
        // Create a packet
        return Buffer.concat(buf_list);
    }
}
exports.default = LinkingServiceSetting;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/linking/modules/service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @packageDocumentation
 * @module Parts.Linking
 */
/* ------------------------------------------------------------------
 * node-linking - service.js
 *
 * Copyright (c) 2017, Futomi Hatano, All rights reserved.
 * Released under the MIT license
 * Date: 2017-04-15
 * ---------------------------------------------------------------- */

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_notification_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service-notification.js"));
const service_operation_js_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service-operation.js"));
const service_property_js_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service-property.js"));
const service_sensor_js_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service-sensor.js"));
const service_setting_js_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/linking/modules/service-setting.js"));
class LinkingService {
    constructor() {
        this._services = {
            '00': new service_property_js_1.default(),
            '01': new service_notification_1.default(),
            '02': new service_operation_js_1.default(),
            '03': new service_sensor_js_1.default(),
            '04': new service_setting_js_1.default(),
        };
        this._write_message_name_map = {
            // PeripheralDevicePropertyInformation Service
            GET_DEVICE_INFORMATION: '00',
            // PeripheralDeviceNotification Service
            CONFIRM_NOTIFY_CATEGORY: '01',
            NOTIFY_INFORMATION: '01',
            // PeripheralDeviceSensorInformation Service
            GET_SENSOR_INFO: '03',
            SET_NOTIFY_SENSOR_INFO: '03',
            // PeripheralDeviceSettingOperation Service
            GET_APP_VERSION: '04',
            CONFIRM_INSTALL_APP: '04',
            GET_SETTING_INFORMATION: '04',
            GET_SETTING_NAME: '04',
            SELECT_SETTING_INFORMATION: '04',
        };
        this._device_info = null;
    }
    setDeviceInfo(device_info) {
        for (const code in this._services) {
            this._services[code].setDeviceInfo(device_info);
        }
        this._device_info = device_info;
    }
    parseResponse(buf) {
        const service_id_hex = buf.slice(1, 2).toString('hex');
        const service = this._services[service_id_hex];
        if (!service) {
            return null;
        }
        const service_id = buf.readUInt8(1);
        const msg_id = buf.readUInt16LE(2);
        // let msg_id = buf.readUInt8(2);
        const msg_id_hex = buf.slice(2, 3).toString('hex');
        const pnum = buf.readUInt8(4);
        const payload_buf = buf.slice(5, buf.length);
        const parameters = service.parsePayload(pnum, payload_buf);
        const parsed = {
            buffer: buf,
            serviceId: service_id,
            serviceName: service.SERVICE_NAME,
            messageId: msg_id,
            messageName: service.MESSAGE_NAME_MAP[msg_id_hex],
            parameters,
        };
        return parsed;
    }
    createRequest(message_name, params) {
        if (!(message_name in this._write_message_name_map)) {
            return null;
        }
        const sid = this._write_message_name_map[message_name];
        const service = this._services[sid];
        const buf = service.createRequest(message_name, params);
        return buf;
    }
    isSupportedWriteMessageName(message_name) {
        if (!message_name) {
            return false;
        }
        let sid = this._write_message_name_map[message_name];
        if (!sid) {
            return false;
        }
        sid = parseInt(sid, 10);
        const services = this._device_info && this._device_info.services
            ? this._device_info.services
            : null;
        if (!services) {
            return false;
        }
        let res = false;
        for (const k in services) {
            if (services[k] === sid) {
                res = true;
                break;
            }
        }
        return res;
    }
}
exports.default = LinkingService;


/***/ }),

/***/ "./dist/src/parts/Ble/scbtgaaac/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SCBTGAAAC
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** SCBTGAAAC management class SCBTGAAACを管理するクラス */
class SCBTGAAAC {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'SCBTGAAAC',
        };
    }
    /**
     * Verify that the received peripheral is from the SCBTGAAAC
     *
     * 受け取ったPeripheralがSCBTGAAACのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the SCBTGAAAC
     *
     * SCBTGAAACかどうか
     */
    static isDevice(peripheral) {
        return SCBTGAAAC.getData(peripheral) !== null;
    }
    /**
     * Get leakage data from the SCBTGAAAC
     *
     * Get advertisement sent out by generating power at the leak
     *
     * SCBTGAAACから漏水データを取得する
     *
     * 漏水で発電することによって発信されたadvertisementを取得します
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns device name デバイス名
     */
    static getData(peripheral) {
        const data = SCBTGAAAC.searchTypeVal(peripheral.advertise_data_rows, 0xff);
        if (!data ||
            data[0] !== 0x31 ||
            data[1] !== 0x07 ||
            data[2] !== 0x02 ||
            data[3] !== 0x15 ||
            data.length !== 25) {
            return null;
        }
        const uuidData = data.slice(4, 20);
        let uuid = '';
        for (let i = 0; i < uuidData.length; i++) {
            uuid = uuid + ('00' + uuidData[i].toString(16)).slice(-2);
            if (i === 4 - 1 ||
                i === 4 + 2 - 1 ||
                i === 4 + 2 * 2 - 1 ||
                i === 4 + 2 * 3 - 1) {
                uuid += '-';
            }
        }
        const major = (data[20] << 8) + data[21];
        const minor = (data[22] << 8) + data[23];
        const power = data[24];
        if (uuid === '5d490d6c-7eb9-474e-8160-45bde999119a' && major === 3) {
            return `03-${('00000' + minor).slice(-5)}`;
        }
        return null;
    }
    static searchTypeVal(advertise_data_rows, type) {
        for (let i = 0; i < advertise_data_rows.length; i++) {
            if (advertise_data_rows[i][0] === type) {
                const results = [].concat(advertise_data_rows[i]);
                results.shift();
                return results;
            }
        }
        return undefined;
    }
}
exports.default = SCBTGAAAC;


/***/ }),

/***/ "./dist/src/parts/Ble/tm511/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.TM511
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** TM511 management class TM511を管理するクラス */
class TM511 {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'TM511',
        };
    }
    /**
     * Verify that the received peripheral is from the TM511
     *
     * 受け取ったPeripheralがTM511のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the TM511
     *
     * TM511かどうか
     */
    static isDevice(peripheral) {
        if (this.deviceAdv.length > peripheral.adv_data.length) {
            return false;
        }
        for (let index = 0; index < this.deviceAdv.length; index++) {
            if (this.deviceAdv[index] === -1) {
                continue;
            }
            if (peripheral.adv_data[index] === this.deviceAdv[index]) {
                continue;
            }
            return false;
        }
        return true;
    }
    /**
     * Get a data from the TM511
     *
     * TM511からのデータ取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the TM511 TM511から受け取ったデータ
     */
    static getData(peripheral) {
        if (!TM511.isDevice(peripheral)) {
            return null;
        }
        const data = {
            battery: peripheral.adv_data[13],
            x: peripheral.adv_data[14] +
                ObnizPartsBleInterface_1.default.readFraction(peripheral.adv_data[15]),
            y: peripheral.adv_data[16] +
                ObnizPartsBleInterface_1.default.readFraction(peripheral.adv_data[17]),
            z: peripheral.adv_data[18] +
                ObnizPartsBleInterface_1.default.readFraction(peripheral.adv_data[19]),
        };
        return data;
    }
}
exports.default = TM511;
TM511.deviceAdv = [
    0x02,
    0x01,
    0x06,
    0x03,
    0x03,
    0xe1,
    0xff,
    -1,
    -1,
    -1,
    -1,
    0xa1,
    0x03,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
];


/***/ }),

/***/ "./dist/src/parts/Ble/tm530/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.TM530
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** TM530 management class TM530を管理するクラス */
class TM530 {
    constructor() {
        this._peripheral = null;
    }
    static info() {
        return {
            name: 'TM530',
        };
    }
    /**
     * Verify that the received peripheral is from the TM530
     *
     * 受け取ったPeripheralがTM530のものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the TM530
     *
     * TM530かどうか
     */
    static isDevice(peripheral) {
        if (this.deviceAdv.length > peripheral.adv_data.length) {
            return false;
        }
        for (let index = 0; index < this.deviceAdv.length; index++) {
            if (this.deviceAdv[index] === -1) {
                continue;
            }
            if (peripheral.adv_data[index] === this.deviceAdv[index]) {
                continue;
            }
            return false;
        }
        return true;
    }
    /**
     * Get a data from the TM530
     *
     * TM530からデータを取得
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns received data from the TM530 TM530から受け取ったデータ
     */
    static getData(peripheral) {
        if (!TM530.isDevice(peripheral)) {
            return null;
        }
        const data = {
            battery: peripheral.adv_data[13],
            temperature: peripheral.adv_data[14] +
                ObnizPartsBleInterface_1.default.readFraction(peripheral.adv_data[15]),
            humidity: peripheral.adv_data[16] +
                ObnizPartsBleInterface_1.default.readFraction(peripheral.adv_data[17]),
        };
        return data;
    }
}
exports.default = TM530;
TM530.deviceAdv = [
    0x02,
    0x01,
    0x06,
    0x03,
    0x03,
    0xe1,
    0xff,
    -1,
    -1,
    -1,
    -1,
    -1,
    0x01,
    -1,
    -1,
    -1,
    -1,
    -1,
];


/***/ }),

/***/ "./dist/src/parts/Ble/toio_corecube/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Toio_CoreCube
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
/** Toio_CoreCube management class Toio_CoreCubeを管理するクラス */
class Toio_CoreCube {
    constructor(peripheral) {
        this.peripheral = null;
        this.functionButtonPress = null;
        this.functionMotionChange = null;
        this.keys = [];
        this.requiredKeys = [];
        this._uuids = {
            serviceID: '10B20100-5B3B-4571-9508-CF3EFCD7BBAE',
            characteristicIDMotor: '10B20102-5B3B-4571-9508-CF3EFCD7BBAE',
            characteristicIDPos: '10B20101-5B3B-4571-9508-CF3EFCD7BBAE',
            characteristicIDMotion: '10B20106-5B3B-4571-9508-CF3EFCD7BBAE',
            characteristicIDButton: '10B20107-5B3B-4571-9508-CF3EFCD7BBAE',
            characteristicIDBattery: '10B20108-5B3B-4571-9508-CF3EFCD7BBAE',
        };
        this.timeout = 100;
        this._buttonCharacteristic = null;
        this._motionCharacteristic = null;
        this._positionCharacteristic = null;
        this._motorCharacteristic = null;
        this._batteryCharacteristic = null;
        if (peripheral && !Toio_CoreCube.isDevice(peripheral)) {
            throw new Error('peripheral is not Toio_CoreCube');
        }
        this.peripheral = peripheral;
    }
    static info() {
        return {
            name: 'toio_CoreCube',
        };
    }
    /**
     * Verify that the received peripheral is from the Toio_CoreCube
     *
     * 受け取ったPeripheralがToio_CoreCubeのものかどうかを確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the Toio_CoreCube
     *
     * Toio_CoreCubeかどうか
     */
    static isDevice(peripheral) {
        var _a;
        // if (peripheral.localName === 'toio Core Cube') {
        if (((_a = peripheral.localName) === null || _a === void 0 ? void 0 : _a.indexOf('toio Core Cube')) !== -1) {
            return true;
        }
        else {
            return false;
        }
    }
    wired(obniz) {
        // do nothing.
    }
    /**
     * Connect to the device
     *
     * デバイスに接続
     *
     * @param timeout (not used)
     *
     * @returns
     */
    async connectWait(timeout) {
        if (!this.peripheral) {
            throw new Error('Toio_CoreCube is not find.');
        }
        this.peripheral.ondisconnect = (reason) => {
            if (typeof this.ondisconnect === 'function') {
                this.ondisconnect(reason);
            }
        };
        this.timeout = timeout;
        await this.peripheral.connectWait();
        this._buttonCharacteristic = this.peripheral
            .getService(this._uuids.serviceID)
            .getCharacteristic(this._uuids.characteristicIDButton);
        this._motorCharacteristic = this.peripheral
            .getService(this._uuids.serviceID)
            .getCharacteristic(this._uuids.characteristicIDMotor);
        this._motionCharacteristic = this.peripheral
            .getService(this._uuids.serviceID)
            .getCharacteristic(this._uuids.characteristicIDMotion);
        this._positionCharacteristic = this.peripheral
            .getService(this._uuids.serviceID)
            .getCharacteristic(this._uuids.characteristicIDPos);
        this._batteryCharacteristic = this.peripheral
            .getService(this._uuids.serviceID)
            .getCharacteristic(this._uuids.characteristicIDBattery);
        if (this._buttonCharacteristic) {
            if (typeof this.functionButtonPress === 'function') {
                this._buttonCharacteristic.registerNotify(this.functionButtonPress);
            }
        }
        if (this._buttonCharacteristic) {
            if (typeof this.functionMotionChange === 'function') {
                this._buttonCharacteristic.registerNotify(this.functionMotionChange);
            }
        }
        return 0;
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        var _a;
        await ((_a = this.peripheral) === null || _a === void 0 ? void 0 : _a.disconnectWait());
    }
    /**
     * Get the absolute position and angle of Toio_CoreCube
     *
     * (For more detail, please see https://toio.github.io/toio-spec/docs/ble_id )
     *
     * Toio_CoreCubeが存在している絶対位置や角度を取得
     *
     * (詳細は https://toio.github.io/toio-spec/docs/ble_id を参照してください。)
     *
     * @returns absolute position data 絶対位置データ
     *
     * ```
     * {
     *
     * posX: X coordinate value of the center of the cube キューブ中心のx座標 (Position ID),
     *
     * posY: Y coordinate value of the center of the cube キューブ中心のY座標 (Position ID),
     *
     * angle: angle value of the center of the cube キューブの角度 (Range 範囲: 0~360 deg),
     *
     * posSensorX: X coordinate value of the identification sensor 読み取りセンサーのX座標 (Position ID),
     *
     * posSensorY: Y coordinate value of the identification sensor 読み取りセンサーのY座標 (Position ID),
     *
     * posSensorAngle: angle value of the identification sensor 読み取りセンサーの角度 (Range 範囲: 0~360 deg)
     *
     * }
     * ```
     */
    async getPositionWait() {
        const readData = await this._positionCharacteristic.readWait();
        return {
            posX: (readData[2] << 8) | readData[1],
            posY: (readData[4] << 8) | readData[3],
            angle: (readData[6] << 8) | readData[5],
            posSensorX: (readData[8] << 8) | readData[7],
            posSensorY: (readData[10] << 8) | readData[9],
            posSensorAngle: (readData[12] << 8) | readData[11],
        };
    }
    /**
     * Get motion detection data from the Toio_CoreCube
     *
     * Toio_CoreCubeからのモーション検出データを取得
     *
     * @returns motion detection data モーション検出データ
     *
     * ```
     * {
     *
     * isHorizon: horizontal or not 水平かどうか,
     *
     * isCollision: detect collision or not 衝突検知したかどうか,
     *
     * isDoubletap: detect double tap or not ダブルタップ検出したかどうか,
     *
     * attitude: posture 姿勢
     *
     * (1: top faces upward 天面が上, 2: bottom faces upward 底面が上, 3: rear side faces upward 背面が上, 4: front side faces upward 正面が上. 5: right side faces upward 右側面が上, 6: left side faces upward 左側面が上)
     *
     * }
     * ```
     */
    async getMotionWait() {
        const readData = await this._motionCharacteristic.readWait();
        return {
            isHorizon: readData[1] === 1,
            isCollision: readData[2] === 1,
            isDoubletap: readData[3] === 1,
            attitude: readData[4],
        };
    }
    /**
     * Get button state from the Toio_CoreCube
     *
     * Toio_CoreCubeのボタンの状態を取得
     *
     * @returns Whether the button is pressed
     *
     * ボタンが押されたかどうか
     */
    async getButtonStateWait() {
        const readData = await this._buttonCharacteristic.readWait();
        if (readData[1] === 0x80) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Get the remaining battery power of the Toio_CoreCube
     *
     * Toio_CoreCubeのバッテリー残量を取得
     *
     * @returns remaining battery power バッテリー残量
     *
     * Range 範囲 0~100 (Unit 単位: 10 %)
     */
    async getBatteryStateWait() {
        const readData = await this._batteryCharacteristic.readWait();
        return readData[0];
    }
    /**
     * Turn the wheel to move the Toio_CoreCube
     *
     * タイヤを回してToio_CoreCubeを動かす
     *
     * @param _leftWheelPower left wheel power 左側のタイヤ出力 (Range 範囲: -255~255)
     *
     * a positive value rotates forward, a negative value rotates backward
     *
     * 正の値は前方、負の値は後方へ回転
     *
     * @param _rightWheelPower right wheel power 左側のタイヤ出力 (Range 範囲: -255~255)
     *
     * a positive value rotates forward, a negative value rotates backward
     *
     * 正の値は前方、負の値は後方へ回転
     */
    async moveAroundWait(_leftWheelPower = 0, _rightWheelPower = 0) {
        const constraintWheelPower = (wheelPower) => {
            // NOTE: Power is limited belong 0 to 255. And minus value is backward.
            if (wheelPower < -255) {
                wheelPower = -255;
            }
            else if (wheelPower > 255) {
                wheelPower = 255;
            }
            return wheelPower;
        };
        const numWheelDirection = (wheelPower) => {
            // NOTE: 1 is forward. and 2 is backward.
            if (wheelPower >= 0) {
                return 1;
            }
            else if (wheelPower < 0) {
                return 2;
            }
        };
        const leftWheelPower = constraintWheelPower(_leftWheelPower);
        const rightWheelPower = constraintWheelPower(_rightWheelPower);
        const leftWheelDirection = numWheelDirection(leftWheelPower);
        const rightWheelDirection = numWheelDirection(rightWheelPower);
        await this._motorCharacteristic.writeWait([
            1,
            1,
            leftWheelDirection,
            Math.abs(leftWheelPower),
            2,
            rightWheelDirection,
            Math.abs(rightWheelPower),
        ]);
    }
    /**
     * Directs the Toio_CoreCube to the specified Position ID
     *
     * (For more detail, please see https://toio.github.io/toio-spec/en/docs/ble_motor/#motor-control-with-target-specified )
     *
     * Toio_CoreCubeを指定したPosition IDへ移動
     *
     * (詳細は https://toio.github.io/toio-spec/docs/ble_motor#%E7%9B%AE%E6%A8%99%E6%8C%87%E5%AE%9A%E4%BB%98%E3%81%8D%E3%83%A2%E3%83%BC%E3%82%BF%E3%83%BC%E5%88%B6%E5%BE%A1 を参照してください)
     *
     * @param timeoutSec timeout タイムアウト (Unit 単位: 1 sec)
     *
     * @param moveType method of movement 移動タイプ
     *
     * (0: move while rotating 回転しながら移動, 1: move while rotating without moving backwards 後退せず回転しながら移動, 2: move after rotating 回転してから移動)
     *
     * @param maxWheelPower maximum motor speed モーターの最大速度 (Range 範囲 10~255)
     *
     * @param wheelPowerType speed change type 速度変化タイプ
     *
     * (0: constant 速度一定, 1: gradual acceleration 徐々に加速, 2: gradual deceleration 徐々に減速, 3: accelerate to the midpoint and decelerate to the target point 中間地点まで加速し目標地点まで減速)
     *
     * @param targetPosX target point X coordinates 目標地点のX座標 ([Position ID](https://toio.github.io/toio-spec/docs/hardware_position_id))
     *
     * Range 範囲: 0~65535 (65535: same as for write operation 書き込み操作時と同じ)
     *
     * @param targetPosY target point Y coordinates 目標地点のY座標 ([Position ID](https://toio.github.io/toio-spec/docs/hardware_position_id))
     *
     * Range 範囲: 0~65535 (65535: same as for write operation 書き込み操作時と同じ)
     *
     * @param targetAngle angle of the cube at the target point 目標地点でのキューブの角度
     */
    async movePositionWait(timeoutSec = 5, moveType = 0, maxWheelPower = 30, wheelPowerType = 0, targetPosX = 0, targetPosY = 0, targetAngle = 0) {
        const parseNumber = (pos) => {
            // NOTE: Pos is must hove belong 0 to 65535.
            if (pos > 65535) {
                pos = 65535;
            }
            else if (pos < 0) {
                pos = 0;
            }
            const buffer = new ArrayBuffer(2);
            const dv = new DataView(buffer);
            dv.setUint16(0, pos);
            const obj = {
                value1: dv.getUint8(0),
                value2: dv.getUint8(1),
            };
            return obj;
        };
        const posXObj = parseNumber(targetPosX);
        const posYObj = parseNumber(targetPosY);
        const targetAngleObj = parseNumber(targetAngle);
        await this._motorCharacteristic.writeWait([
            0x03,
            0x00,
            timeoutSec,
            moveType,
            maxWheelPower,
            wheelPowerType,
            0x00,
            posXObj.value2,
            posXObj.value1,
            posYObj.value2,
            posYObj.value1,
            targetAngleObj.value2,
            targetAngleObj.value1,
        ]);
    }
}
exports.default = Toio_CoreCube;


/***/ }),

/***/ "./dist/src/parts/Ble/uprism/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.uPRISM
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleInterface_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizPartsBleInterface.js"));
/** uPRISM management class uPRISMを管理するクラス */
class uPRISM {
    constructor(peripheral) {
        this._peripheral = null;
        this.readIndex = -1;
        this.accelRange = 1024;
        this._uuids = {
            service: 'a587905b-ac98-4cb1-8b1d-5e22ae747d17',
            settingEnableChar: '51bc99bd-b22e-4ff5-807e-b641d21af060',
            notifyChar: '0d6fcf18-d935-49d1-836d-384c7b857b83',
        };
        if (peripheral === null) {
            throw new Error('peripheral is null');
        }
        if (peripheral && !uPRISM.isDevice(peripheral)) {
            throw new Error('peripheral is not uPRISM');
        }
        this._peripheral = peripheral;
    }
    static info() {
        return {
            name: 'uPRISM',
        };
    }
    /**
     * Verify that the received peripheral is from the uPRISM
     *
     * 受け取ったPeripheralがuPRISMのものかどうか確認する
     *
     * @param peripheral instance of BleRemotePeripheral BleRemotePeripheralのインスタンス
     *
     * @returns Whether it is the uPRISM
     *
     * uPRISMかどうか
     */
    static isDevice(peripheral) {
        var _a;
        return ((_a = peripheral.localName) === null || _a === void 0 ? void 0 : _a.indexOf('uPrism_')) === 0;
    }
    /**
     * Connect the sensor
     *
     * センサへ接続
     */
    async connectWait() {
        if (!this._peripheral) {
            throw new Error('peripheral is not uPRISM');
        }
        if (!this._peripheral.connected) {
            this._peripheral.ondisconnect = (reason) => {
                if (typeof this.ondisconnect === 'function') {
                    this.ondisconnect(reason);
                }
            };
            await this._peripheral.connectWait();
        }
    }
    /**
     * Disconnect from the sensor
     *
     * センサから切断
     */
    async disconnectWait() {
        if (this._peripheral && this._peripheral.connected) {
            await this._peripheral.disconnectWait();
        }
    }
    /**
     * Set the range of values for the accelerometer
     *
     * uPRISM measures a set range with 4,096 steps of resolution
     *
     * 加速度センサーの値の範囲を設定
     *
     * uPRISMは設定された範囲を4096段階の分解能で計測します
     *
     * @param range range of values for the accelerometer 加速度センサーの値の範囲
     */
    setAccelRange(range) {
        switch (range) {
            case '2g':
                this.accelRange = 1024;
                break;
            case '4g':
                this.accelRange = 512;
                break;
            case '8g':
                this.accelRange = 256;
                break;
            case '16g':
                this.accelRange = 128;
                break;
        }
    }
    /**
     * Start notifying when the data have got from the uPRISM with connected state
     *
     * 接続状態でuPRISMからデータを取得したときの通知を開始
     */
    async startNotifyWait() {
        if (!this._peripheral || !this._peripheral.connected) {
            throw new Error('peripheral not connected uPRISM');
        }
        const rc = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.settingEnableChar);
        await rc.writeWait([0x04, 0x03, 0x01]);
        const c = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.notifyChar);
        await c.registerNotifyWait((data) => {
            if (data[1] !== 0x14) {
                return;
            }
            if (data[0] === 0xb1) {
                this.readIndex = data[19];
                this.readData = {
                    acceleration: {
                        x: ObnizPartsBleInterface_1.default.signed16FromBinary(data[3], data[2]) /
                            this.accelRange,
                        y: ObnizPartsBleInterface_1.default.signed16FromBinary(data[5], data[4]) /
                            this.accelRange,
                        z: ObnizPartsBleInterface_1.default.signed16FromBinary(data[7], data[6]) /
                            this.accelRange,
                    },
                    geomagnetic: {
                        x: ObnizPartsBleInterface_1.default.signed16FromBinary(data[9], data[8]) / 16,
                        y: ObnizPartsBleInterface_1.default.signed16FromBinary(data[11], data[10]) /
                            16,
                        z: ObnizPartsBleInterface_1.default.signed16FromBinary(data[13], data[12]) /
                            16,
                    },
                    time: {
                        year: 0,
                        month: 0,
                        day: 0,
                        hour: data[18],
                        minute: data[17],
                        second: data[16],
                        micro_second: (data[15] << 8) | data[14],
                    },
                    index: data[19],
                    temperature: 0,
                    humidity: 0,
                    ambient_light: 0,
                    uvi: 0,
                    pressure: 0,
                };
            }
            else if (data[0] === 0xb2) {
                if (this.readIndex === data[19] && this.readData) {
                    this.readData.temperature =
                        ObnizPartsBleInterface_1.default.signed16FromBinary(data[3], data[2]) / 100;
                    this.readData.humidity = ((data[5] << 8) | data[4]) / 100;
                    this.readData.ambient_light =
                        ((data[8] << 16) | (data[7] << 8) | data[6]) / 128;
                    this.readData.uvi = data[9] / 16;
                    this.readData.pressure =
                        ((data[13] << 16) | (data[12] << 8) | data[11]) / 100;
                    this.readData.time.day = data[16];
                    this.readData.time.month = data[17];
                    this.readData.time.year = data[18];
                    if (this.onNotify) {
                        this.onNotify(this.readData);
                    }
                    // const r = this.readData;
                    // console.log(
                    //   `accel x:${r.acceleration.x} y:${r.acceleration.y} z:${r.acceleration.z}\n` +
                    //     `geo x:${r.geomagnetic.x} y:${r.geomagnetic.y} z:${r.geomagnetic.z}\n` +
                    //     `temp:${r.temperature}degree humid:${r.humidity}% light:${r.ambient_light}lx pressure:${r.pressure}Pa UV index:${r.uvi} index:${r.index}\n` +
                    //     `date ${r.time.year}/${r.time.month}/${r.time.day} ${r.time.hour}:${r.time.minute}:${r.time.second}:${r.time.micro_second}`,
                    // );
                }
            }
        });
    }
    /**
     * Stop data notification
     *
     * データの通知を停止
     *
     * @returns
     */
    async stopNotifyWait() {
        if (!(this._peripheral && this._peripheral.connected)) {
            return;
        }
        const rc = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.settingEnableChar);
        await rc.writeWait([0x04, 0x03, 0x00]);
        const c = this._peripheral
            .getService(this._uuids.service)
            .getCharacteristic(this._uuids.notifyChar);
        await c.unregisterNotifyWait();
    }
}
exports.default = uPRISM;


/***/ }),

/***/ "./dist/src/parts/Ble/utils/abstracts/Logtta.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Logtta
 */
/* eslint rulesdir/non-ascii: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const batteryService_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/services/batteryService.js"));
const genericAccess_1 = __importDefault(__webpack_require__("./dist/src/parts/Ble/utils/services/genericAccess.js"));
const PinCodeFlag = {
    Authentication: 0x00,
    Rewrite: 0x01,
};
/** abstract class common to the Logtta series Logttaシリーズ共通の抽象クラス */
class Logtta extends ObnizPartsBleAbstract_1.ObnizPartsBleConnectable {
    constructor(peripheral, mode) {
        super(peripheral, mode);
        this.serviceUuid = '';
        this.authenticated = false;
    }
    /**
     * Connect to the services of a device
     *
     * デバイスのサービスに接続
     *
     * @param keys Key acquired when pairing previously 以前にペアリングしたときに取得されたキー
     */
    async connectWait(keys) {
        var _a;
        this.serviceUuid = (_a = this.staticClass.getServiceUuids('Connectable'), (_a !== null && _a !== void 0 ? _a : [
            '',
        ]))[0];
        await super.connectWait(keys);
        const service1800 = this.peripheral.getService('1800');
        if (service1800) {
            this.genericAccess = new genericAccess_1.default(service1800);
        }
        const service180F = this.peripheral.getService('180F');
        if (service180F) {
            this.batteryService = new batteryService_1.default(service180F);
        }
    }
    async beforeOnDisconnectWait() {
        this.authenticated = false;
        this.genericAccess = undefined;
        this.batteryService = undefined;
    }
    /**
     * Get data with connected state
     *
     * 接続状態でデータを取得
     *
     * @returns received value from each sensor それぞれのセンサから取得した値
     */
    async getDataWait() {
        this.checkConnected();
        const data = await this.readCharWait(this.serviceUuid, this.getCharUuid(0x21));
        return this.parseData(data);
    }
    /**
     * Notify when the data have got from the device with connected state
     *
     * 接続状態でデータを取得したとき通知
     *
     * @param callback callback function コールバック関数
     *
     * @returns
     */
    async startNotifyWait(callback) {
        // TODO: delete try-catch
        try {
            this.checkConnected();
        }
        catch (e) {
            console.error(e);
            return;
        }
        // TODO: delete if
        if (callback)
            this.onNotify = callback;
        return await this.subscribeWait(this.serviceUuid, this.getCharUuid(0x21), (data) => {
            if (this.onNotify) {
                this.onNotify(this.parseData(data));
            }
        });
    }
    /**
     * Authorize PIN code
     *
     * ピンコードを認証
     *
     * @param code PIN code ピンコード
     *
     * @returns Whether authentication was/is passed 認証が通った/通っているかどうか
     */
    async authPinCodeWait(code) {
        // TODO: delete try-catch
        try {
            this.checkConnected();
        }
        catch (e) {
            console.error(e);
            return false;
        }
        if (this.authenticated)
            return true;
        if (typeof code === 'string')
            code = parseInt(code); // TODO: delete string type
        this.authenticated = await this.sendPinCodeWait('Authentication', code);
        return this.authenticated;
    }
    async sendPinCodeWait(type, code) {
        if (code < 0 || code > 9999)
            throw new Error(`Authorization code can only be entered from 0000~9999. input: ${code}`);
        return await this.writeCharWait(this.serviceUuid, this.getCharUuid(0x30), [
            PinCodeFlag[type],
            Math.floor(code / 1000) % 10 | Math.floor(code / 100) % 10,
            Math.floor(code / 10) % 10 | Math.floor(code / 1) % 10,
        ]);
    }
    checkAuthenticated() {
        if (!this.authenticated)
            throw new Error('Certification is required, execute authPinCodeWait() in advance.');
    }
    /**
     * Set / unset to Beacon Mode
     *
     * ビーコンモードに設定/解除
     *
     * @param enable enable / disable 有効 / 無効
     *
     * @returns data write result
     */
    async setBeaconModeWait(enable) {
        // TODO: delete try-catch
        try {
            this.checkConnected();
            this.checkAuthenticated();
        }
        catch (e) {
            console.error(e);
            return false;
        }
        return this.writeCharWait(this.serviceUuid, this.getCharUuid(0x2d), [
            enable ? 1 : 0,
        ]);
    }
    getName() {
        const array = this.peripheral.adv_data.slice(16);
        return array
            .slice(0, array.indexOf(0) + 1)
            .map((d) => String.fromCharCode(d))
            .join('');
    }
    getCharUuid(code) {
        return `${this.serviceUuid.slice(0, 6)}${code.toString(16)}${this.serviceUuid.slice(8)}`;
    }
}
exports.default = Logtta;
Logtta.AvailableBleMode = ['Connectable', 'Beacon'];
Logtta.LocalName = {
    Connectable: undefined,
    Beacon: /null/,
};
Logtta.BeaconDataLength = {
    Connectable: null,
    Beacon: 0x1b,
};
Logtta.CompanyID = {
    Connectable: null,
    Beacon: [0x10, 0x05],
};


/***/ }),

/***/ "./dist/src/parts/Ble/utils/abstracts/MESH.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const MESH_js_1 = __webpack_require__("./dist/src/parts/Ble/MESH_js/index.js");
class MESH extends ObnizPartsBleAbstract_1.ObnizPartsBleConnectable {
    constructor() {
        super(...arguments);
        // event handler
        this.onBatteryNotify = null;
        this.onStatusButtonNotify = null;
        this.onResponseWrite = null;
        this._mesh = new MESH_js_1.MESH_js();
        this._indicateCharacteristic = null;
        this._notifyCharacteristic = null;
        this._writeCharacteristic = null;
        this._writeWOResponseCharacteristic = null;
    }
    static isMESHblock(peripheral) {
        const _name = peripheral.localName;
        if (!_name) {
            return false;
        }
        if (_name.length !== MESH.LOCAL_NAME_LENGTH) {
            return false;
        }
        return this._isMESHblock(_name);
    }
    static sameSirialNumberBlock(peripheral, sirialnumber) {
        var _a;
        if (!this.isMESHblock(peripheral)) {
            return false;
        }
        return ((_a = peripheral.localName) === null || _a === void 0 ? void 0 : _a.indexOf(sirialnumber)) !== -1;
    }
    /**
     * Connect to the services of a MESH
     */
    async connectWait() {
        this.prepareConnect();
        await this.peripheral.connectWait();
        this._indicateCharacteristic = this._getCharacteristic(this._mesh.UUIDS.characteristics.Indicate);
        this._notifyCharacteristic = this._getCharacteristic(this._mesh.UUIDS.characteristics.Notify);
        this._writeCharacteristic = this._getCharacteristic(this._mesh.UUIDS.characteristics.Write);
        this._writeWOResponseCharacteristic = this._getCharacteristic(this._mesh.UUIDS.characteristics.WriteWOResponse);
        if (!this._indicateCharacteristic) {
            return;
        }
        this._indicateCharacteristic.registerNotify((data) => {
            this._mesh.indicate(data);
        });
        if (!this._notifyCharacteristic) {
            return;
        }
        await this._notifyCharacteristic.registerNotifyWait((data) => {
            this._mesh.notify(data);
        });
        console.log('connect');
        await this._writeFeatureWait();
    }
    static _isMESHblock(name) {
        return name.indexOf(MESH._LocalName) === 0;
    }
    prepareConnect() {
        this._mesh.onBattery = (battery) => {
            if (typeof this.onBatteryNotify !== 'function') {
                return;
            }
            this.onBatteryNotify(battery);
        };
        this._mesh.onStatusButtonPressed = () => {
            if (typeof this.onStatusButtonNotify !== 'function') {
                return;
            }
            this.onStatusButtonNotify();
        };
    }
    async writeWait(data) {
        if (!this._writeCharacteristic) {
            return;
        }
        await this._writeCharacteristic.writeWait(data, true).then((resp) => {
            if (typeof this.onResponseWrite !== 'function') {
                return;
            }
            this.onResponseWrite(resp);
        });
    }
    writeWOResponse(data) {
        if (!this._writeWOResponseCharacteristic) {
            return;
        }
        this._writeWOResponseCharacteristic.writeWait(data, true);
    }
    _getCharacteristic(uuid) {
        return this.peripheral
            .getService(this._mesh.UUIDS.serviceId)
            .getCharacteristic(uuid);
    }
    async _writeFeatureWait() {
        await this.writeWait(this._mesh.feature);
    }
}
exports.MESH = MESH;
MESH.AvailableBleMode = 'Connectable';
MESH._LocalName = 'MESH-100';
MESH.LOCAL_NAME_LENGTH = 17;


/***/ }),

/***/ "./dist/src/parts/Ble/utils/abstracts/iBS.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.iBS
 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizPartsBleAbstract_1 = __webpack_require__("./dist/src/obniz/ObnizPartsBleAbstract.js");
const magic = {
    1: [0x80, 0xbc],
    1.1: [0x81, 0xbc],
    2: [0x82, 0xbc],
    3: [0x83, 0xbc],
    4: [0x83, 0xbc],
    5: [0x83, 0xbc],
};
/** abstract class common to the iBS series iBSシリーズ共通の抽象クラス */
class BaseiBS extends ObnizPartsBleAbstract_1.ObnizPartsBle {
    static getUniqueData(series, subtype, addLength, scanResponse) {
        return {
            magic: {
                index: 0,
                length: 2,
                type: 'check',
                data: magic[series],
                scanResponse,
            },
            subtype: {
                index: 11 + ((addLength !== null && addLength !== void 0 ? addLength : 0)),
                type: 'check',
                data: subtype,
                scanResponse,
            },
        };
    }
}
exports.BaseiBS = BaseiBS;
BaseiBS.AvailableBleMode = 'Beacon';
BaseiBS.BeaconDataLength = 0x12;
BaseiBS.CompanyID = [0x0d, 0x00];
BaseiBS.Config = {
    battery: {
        index: 2,
        length: 2,
        type: 'unsignedNumLE',
        multiple: 0.01,
    },
    button: {
        index: 4,
        type: 'bool0001',
    },
    moving: {
        index: 4,
        type: 'bool0010',
    },
    /** HallSensor / Reed / Event */
    event: {
        index: 4,
        type: 'bool0100',
    },
    fall: {
        index: 4,
        type: 'bool1000',
    },
    acceleration: {
        index: 4,
        length: 18,
        type: 'xyz',
    },
    temperature: {
        index: 5,
        length: 2,
        type: 'numLE',
        multiple: 0.01,
    },
    humidity: {
        index: 7,
        length: 2,
        type: 'numLE',
    },
    count: {
        index: 7,
        length: 2,
        type: 'unsignedNumLE',
    },
    user: {
        index: 9,
        length: 2,
        type: 'unsignedNumLE',
    },
};
/** abstract class for iBS iBS01のための抽象クラス */
class BaseiBS01 extends BaseiBS {
}
exports.BaseiBS01 = BaseiBS01;
BaseiBS01.CompanyID = [0x59, 0x00];
exports.default = BaseiBS;


/***/ }),

/***/ "./dist/src/parts/Ble/utils/advertisement/advertismentAnalyzer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.utils.advertisement
 */
Object.defineProperty(exports, "__esModule", { value: true });
class BleAdvBinaryAnalyzer {
    constructor(parent) {
        this._target = [];
        this._parent = parent;
    }
    addTarget(name, filter) {
        this._target.push({ name, filter });
        return this;
    }
    addTargetByLength(name, length) {
        this._target.push({ name, filter: new Array(length).fill(-1) });
        return this;
    }
    addGroup(name, group) {
        this._target.push({ name, filter: group });
        return this;
    }
    groupStart(name) {
        const filter = new BleAdvBinaryAnalyzer(this);
        this._target.push({ name, filter });
        return filter;
    }
    groupEnd() {
        if (!this._parent) {
            throw new Error('Cannot call parent of root');
        }
        return this._parent;
    }
    flat() {
        return this._target.reduce((acc, val) => {
            if (val.filter instanceof BleAdvBinaryAnalyzer) {
                return [...acc, ...val.filter.flat()];
            }
            return [...acc, ...val.filter];
        }, []);
    }
    length() {
        return this.flat().length;
    }
    validate(target) {
        const flat = this.flat();
        if (flat.length > target.length) {
            return false;
        }
        for (let index = 0; index < flat.length; index++) {
            if (flat[index] === -1) {
                continue;
            }
            if (target[index] === flat[index]) {
                continue;
            }
            return false;
        }
        return true;
    }
    getData(target, ...names) {
        if (!this.validate(target)) {
            return null;
        }
        if (!names || names.length === 0) {
            return target;
        }
        let index = 0;
        for (const one of this._target) {
            if (one.name === names[0]) {
                if (one.filter instanceof BleAdvBinaryAnalyzer) {
                    const newTarget = target.slice(index, index + one.filter.length());
                    return one.filter.getData(newTarget, ...names.slice(1));
                }
                else {
                    const newTarget = target.slice(index, index + one.filter.length);
                    return newTarget;
                }
            }
            if (one.filter instanceof BleAdvBinaryAnalyzer) {
                index += one.filter.length();
            }
            else {
                index += one.filter.length;
            }
        }
        return null;
    }
    getAllData(target) {
        if (!this.validate(target)) {
            return null;
        }
        const result = {};
        let index = 0;
        for (const one of this._target) {
            if (one.filter instanceof BleAdvBinaryAnalyzer) {
                const newTarget = target.slice(index, index + one.filter.length());
                result[one.name] = one.filter.getAllData(newTarget);
            }
            else {
                result[one.name] = target.slice(index, index + one.filter.length);
            }
            if (one.filter instanceof BleAdvBinaryAnalyzer) {
                index += one.filter.length();
            }
            else {
                index += one.filter.length;
            }
        }
        return result;
    }
}
exports.BleAdvBinaryAnalyzer = BleAdvBinaryAnalyzer;


/***/ }),

/***/ "./dist/src/parts/Ble/utils/services/batteryService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.utils.services
 */
Object.defineProperty(exports, "__esModule", { value: true });
class BleBatteryService {
    constructor(service) {
        this._service = service;
    }
    async getBatteryLevelWait() {
        const char = this._service.getCharacteristic('2A19');
        if (!char) {
            return null;
        }
        return await char.readNumberWait();
    }
    getBatteryLevel() {
        return this.getBatteryLevelWait();
    }
}
exports.default = BleBatteryService;


/***/ }),

/***/ "./dist/src/parts/Ble/utils/services/genericAccess.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.utils.services
 */
Object.defineProperty(exports, "__esModule", { value: true });
class BleGenericAccess {
    constructor(service) {
        this._service = service;
    }
    async getDeviceNameWait() {
        const char = this._service.getCharacteristic('2A00');
        if (!char) {
            return null;
        }
        return await char.readTextWait();
    }
}
exports.default = BleGenericAccess;


/***/ }),

/***/ "./dist/src/parts/Camera/ArduCAMMini/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.ArduCAMMini
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ArduCAMMini {
    constructor() {
        this.keys = [
            'cs',
            'mosi',
            'miso',
            'sclk',
            'gnd',
            'vcc',
            'sda',
            'scl',
            'spi',
            'i2c',
            'spi_frequency',
            'spi_drive',
            'module_version',
        ];
        this.requiredKeys = ['cs'];
        this.ioKeys = this.keys;
        this.displayName = 'Cam';
        this.regs = {
            ARDUCHIP_TEST1: 0x00,
            ARDUCHIP_MODE: 0x02,
            ARDUCHIP_FIFO: 0x04,
            BURST_FIFO_READ: 0x3c,
            ARDUCHIP_TRIG: 0x41,
            FIFO_SIZE1: 0x42,
            FIFO_SIZE2: 0x43,
            FIFO_SIZE3: 0x44,
        };
        this.configs = {
            OV2640_JPEG_INIT: [
                [0xff, 0x00],
                [0x2c, 0xff],
                [0x2e, 0xdf],
                [0xff, 0x01],
                [0x3c, 0x32],
                [0x11, 0x04],
                [0x09, 0x02],
                [0x04, 0x28],
                [0x13, 0xe5],
                [0x14, 0x48],
                [0x2c, 0x0c],
                [0x33, 0x78],
                [0x3a, 0x33],
                [0x3b, 0xfb],
                [0x3e, 0x00],
                [0x43, 0x11],
                [0x16, 0x10],
                [0x39, 0x92],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0x48, 0x00],
                [0x5b, 0x00],
                [0x42, 0x03],
                [0x4a, 0x81],
                [0x21, 0x99],
                [0x24, 0x40],
                [0x25, 0x38],
                [0x26, 0x82],
                [0x5c, 0x00],
                [0x63, 0x00],
                [0x61, 0x70],
                [0x62, 0x80],
                [0x7c, 0x05],
                [0x20, 0x80],
                [0x28, 0x30],
                [0x6c, 0x00],
                [0x6d, 0x80],
                [0x6e, 0x00],
                [0x70, 0x02],
                [0x71, 0x94],
                [0x73, 0xc1],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x37, 0xc0],
                [0x4f, 0x60],
                [0x50, 0xa8],
                [0x6d, 0x00],
                [0x3d, 0x38],
                [0x46, 0x3f],
                [0x4f, 0x60],
                [0x0c, 0x3c],
                [0xff, 0x00],
                [0xe5, 0x7f],
                [0xf9, 0xc0],
                [0x41, 0x24],
                [0xe0, 0x14],
                [0x76, 0xff],
                [0x33, 0xa0],
                [0x42, 0x20],
                [0x43, 0x18],
                [0x4c, 0x00],
                [0x87, 0xd5],
                [0x88, 0x3f],
                [0xd7, 0x03],
                [0xd9, 0x10],
                [0xd3, 0x82],
                [0xc8, 0x08],
                [0xc9, 0x80],
                [0x7c, 0x00],
                [0x7d, 0x00],
                [0x7c, 0x03],
                [0x7d, 0x48],
                [0x7d, 0x48],
                [0x7c, 0x08],
                [0x7d, 0x20],
                [0x7d, 0x10],
                [0x7d, 0x0e],
                [0x90, 0x00],
                [0x91, 0x0e],
                [0x91, 0x1a],
                [0x91, 0x31],
                [0x91, 0x5a],
                [0x91, 0x69],
                [0x91, 0x75],
                [0x91, 0x7e],
                [0x91, 0x88],
                [0x91, 0x8f],
                [0x91, 0x96],
                [0x91, 0xa3],
                [0x91, 0xaf],
                [0x91, 0xc4],
                [0x91, 0xd7],
                [0x91, 0xe8],
                [0x91, 0x20],
                [0x92, 0x00],
                [0x93, 0x06],
                [0x93, 0xe3],
                [0x93, 0x05],
                [0x93, 0x05],
                [0x93, 0x00],
                [0x93, 0x04],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x96, 0x00],
                [0x97, 0x08],
                [0x97, 0x19],
                [0x97, 0x02],
                [0x97, 0x0c],
                [0x97, 0x24],
                [0x97, 0x30],
                [0x97, 0x28],
                [0x97, 0x26],
                [0x97, 0x02],
                [0x97, 0x98],
                [0x97, 0x80],
                [0x97, 0x00],
                [0x97, 0x00],
                [0xc3, 0xed],
                [0xa4, 0x00],
                [0xa8, 0x00],
                [0xc5, 0x11],
                [0xc6, 0x51],
                [0xbf, 0x80],
                [0xc7, 0x10],
                [0xb6, 0x66],
                [0xb8, 0xa5],
                [0xb7, 0x64],
                [0xb9, 0x7c],
                [0xb3, 0xaf],
                [0xb4, 0x97],
                [0xb5, 0xff],
                [0xb0, 0xc5],
                [0xb1, 0x94],
                [0xb2, 0x0f],
                [0xc4, 0x5c],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x5a, 0xc8],
                [0x5b, 0x96],
                [0x5c, 0x00],
                [0xd3, 0x00],
                [0xc3, 0xed],
                [0x7f, 0x00],
                [0xda, 0x00],
                [0xe5, 0x1f],
                [0xe1, 0x67],
                [0xe0, 0x00],
                [0xdd, 0x7f],
                [0x05, 0x00],
                //
                [0x12, 0x40],
                [0xd3, 0x04],
                [0xc0, 0x16],
                [0xc1, 0x12],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x2c],
                [0x52, 0x24],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x5a, 0x2c],
                [0x5b, 0x24],
                [0x5c, 0x00],
                [0xff, 0xff],
            ],
            OV2640_YUV422: [
                [0xff, 0x00],
                [0x05, 0x00],
                [0xda, 0x10],
                [0xd7, 0x03],
                [0xdf, 0x00],
                [0x33, 0x80],
                [0x3c, 0x40],
                [0xe1, 0x77],
                [0x00, 0x00],
                [0xff, 0xff],
            ],
            OV2640_JPEG: [
                [0xe0, 0x14],
                [0xe1, 0x77],
                [0xe5, 0x1f],
                [0xd7, 0x03],
                [0xda, 0x10],
                [0xe0, 0x00],
                [0xff, 0x01],
                [0x04, 0x08],
                [0xff, 0xff],
            ],
            OV2640_160x120_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x92],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x28],
                [0x5b, 0x1e],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_176x144_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x92],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x2c],
                [0x5b, 0x24],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_320x240_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x50],
                [0x5b, 0x3c],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_352x288_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x58],
                [0x5b, 0x48],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_640x480_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x89],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0xa0],
                [0x5b, 0x78],
                [0x5c, 0x00],
                [0xd3, 0x04],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_800x600_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0xc8],
                [0x5b, 0x96],
                [0x5c, 0x00],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_1024x768_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x5a, 0x00],
                [0x5b, 0xc0],
                [0x5c, 0x01],
                [0xd3, 0x02],
                [0xff, 0xff],
            ],
            OV2640_1280x960_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0x40],
                [0x5b, 0xf0],
                [0x5c, 0x01],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_1600x1200_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0x90],
                [0x5b, 0x2c],
                [0x5c, 0x05],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
        };
    }
    static info() {
        return {
            name: 'ArduCAMMini',
        };
    }
    wired(obniz) {
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.io_cs = obniz.getIO(this.params.cs);
        this.io_cs.output(true);
        obniz.wait(100);
        this.sensor_addr = 0x30; // i2c
        this.params.module_version = this.params.module_version || 0;
        this.params.mode = this.params.mode || 'master';
        this.params.drive = this.params.spi_drive || '3v';
        this.params.frequency = this.params.spi_frequency || 4 * 1000 * 1000;
        this.params.clk = this.params.sclk;
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = 'master';
        this.params.pull = '5v';
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    spi_write(addr, byteData) {
        const data = [];
        data.push(addr);
        data.push(byteData);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    async spi_readWait(addr) {
        const data = [];
        data.push(addr);
        data.push(0x00);
        this.io_cs.output(false);
        const recv = await this.spi.writeWait(data);
        this.io_cs.output(true);
        return recv[1];
    }
    i2c_byte_write(addr, byteData) {
        this.i2c.write(this.sensor_addr, [addr, byteData]);
    }
    i2c_regs_write(regs) {
        for (let i = 0; i < regs.length; i++) {
            this.i2c.write(this.sensor_addr, regs[i]);
        }
    }
    spi_write_reg(addr, byteData) {
        this.spi_write(addr | 0x80, byteData);
    }
    async spi_read_regWait(addr) {
        return await this.spi_readWait(addr & 0x7f);
    }
    async spi_pingpongWait() {
        const testVal = 0x55;
        this.spi_write_reg(this.regs.ARDUCHIP_TEST1, testVal);
        const val = await this.spi_read_regWait(this.regs.ARDUCHIP_TEST1);
        if (val !== testVal) {
            throw new Error('spi bus fail');
        }
    }
    setMode(mode) {
        const modes = {
            MCU2LCD: 0x00,
            CAM2LCD: 0x01,
            LCD2MCU: 0x02,
        };
        if (typeof modes[mode] !== 'number') {
            throw new Error('unknown mode. options are ' + modes);
        }
        this.spi_write_reg(this.regs.ARDUCHIP_MODE, modes[mode]);
    }
    async getChipIdWait() {
        this.i2c.write(this.sensor_addr, [0x0a]);
        const val0 = await this.i2c.readWait(this.sensor_addr, 1);
        this.i2c.write(this.sensor_addr, [0x0b]);
        const val1 = await this.i2c.readWait(this.sensor_addr, 1);
        return (val0[0] << 8) + val1[0];
    }
    init() {
        this.i2c_byte_write(0xff, 0x01);
        this.i2c_byte_write(0x12, 0x80);
        this.obniz.wait(100);
        this.i2c_regs_write(this.configs.OV2640_JPEG_INIT);
        this.i2c_regs_write(this.configs.OV2640_YUV422);
        this.i2c_regs_write(this.configs.OV2640_JPEG);
        this.i2c_byte_write(0xff, 0x01);
        this.i2c_byte_write(0x15, 0x00);
        this.setSize('320x240');
    }
    async startupWait() {
        await this.spi_pingpongWait();
        this.setMode('MCU2LCD');
        const chipid = await this.getChipIdWait();
        if (chipid !== 0x2642 && chipid !== 0x2641) {
            throw new Error('unknown chip ' + chipid);
        }
        this.init();
    }
    async takeWait(size) {
        if (typeof size === 'string' && this._size !== size) {
            this.setSize(size);
            this.obniz.wait(1000);
        }
        this.flushFIFO();
        this.flushFIFO();
        this.startCapture();
        while (true) {
            if (await this.isCaptureDoneWait()) {
                break;
            }
        }
        return await this.readFIFOWait();
    }
    setSize(string) {
        if (this._size === string) {
            return;
        }
        const map = {
            '160x120': this.configs.OV2640_160x120_JPEG,
            '176x144': this.configs.OV2640_176x144_JPEG,
            '320x240': this.configs.OV2640_320x240_JPEG,
            '352x288': this.configs.OV2640_352x288_JPEG,
            '640x480': this.configs.OV2640_640x480_JPEG,
            '800x600': this.configs.OV2640_800x600_JPEG,
            '1024x768': this.configs.OV2640_1024x768_JPEG,
            '1280x960': this.configs.OV2640_1280x960_JPEG,
            '1600x1200': this.configs.OV2640_1600x1200_JPEG,
        };
        if (map[string]) {
            this._size = string;
            this.i2c_regs_write(map[string]);
        }
        else {
            throw new Error('unsupported size options are ' + Object.keys(map));
        }
    }
    updateFIFO(data) {
        //  FIFO_CLEAR_MASK    		0x01
        //  FIFO_START_MASK    		0x02
        //  FIFO_RDPTR_RST_MASK     0x10
        //  FIFO_WRPTR_RST_MASK     0x20
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, data);
    }
    flushFIFO() {
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x01);
    }
    async readFIFOLengthWait() {
        const len1 = await this.spi_read_regWait(this.regs.FIFO_SIZE1);
        const len2 = await this.spi_read_regWait(this.regs.FIFO_SIZE2);
        const len3 = (await this.spi_read_regWait(this.regs.FIFO_SIZE3)) & 0x07;
        return ((len3 << 16) | (len2 << 8) | len1) & 0x07ffff;
    }
    startCapture() {
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x02);
    }
    async isCaptureDoneWait() {
        const CAP_DONE_MASK = 0x08;
        const val = await this.spi_read_regWait(this.regs.ARDUCHIP_TRIG);
        return val & CAP_DONE_MASK ? true : false;
    }
    async readFIFOWait() {
        // get length of image data
        const length = await this.readFIFOLengthWait();
        // start bust
        this.io_cs.output(false);
        this.spi.write([this.regs.BURST_FIFO_READ]);
        if (this.params.module_version === 0) {
            this.spi.write([0xff]); // dummy read
        }
        const buf = [];
        while (buf.length < length) {
            let mustRead = length - buf.length;
            if (mustRead > 1024) {
                mustRead = 1024;
            }
            const arr = new Array(mustRead);
            arr.fill(0);
            const sliced = await this.spi.writeWait(arr);
            buf.push(...sliced);
        }
        // end burst
        this.io_cs.output(true);
        return buf;
    }
    arrayToBase64(array) {
        return Buffer.from(array).toString('base64');
    }
}
exports.default = ArduCAMMini;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Camera/JpegSerialCam/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.JpegSerialCam
 */
Object.defineProperty(exports, "__esModule", { value: true });
class JpegSerialCam {
    constructor() {
        this.keys = ['vcc', 'cam_tx', 'cam_rx', 'gnd'];
        this.requiredKeys = ['cam_tx', 'cam_rx'];
        this.ioKeys = this.keys;
        this.displayName = 'Jcam';
        this.displayIoNames = { cam_tx: 'camTx', cam_rx: 'camRx' };
    }
    static info() {
        return {
            name: 'JpegSerialCam',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.my_tx = this.params.cam_rx;
        this.my_rx = this.params.cam_tx;
        this.obniz.getIO(this.my_tx).drive('3v');
        this.uart = this.obniz.getFreeUart();
    }
    async _drainUntilWait(uart, search, recv) {
        if (!recv) {
            recv = [];
        }
        while (true) {
            const readed = uart.readBytes();
            recv = recv.concat(readed);
            const tail = this._seekTail(search, recv);
            if (tail >= 0) {
                recv.splice(0, tail);
                return recv;
            }
            await this.obniz.wait(10);
        }
    }
    _seekTail(search, src) {
        let f = 0;
        for (let i = 0; i < src.length; i++) {
            if (src[i] === search[f]) {
                f++;
                if (f === search.length) {
                    return i + 1;
                }
            }
            else {
                f = 0;
            }
        }
        return -1;
    }
    arrayToBase64(array) {
        return Buffer.from(array).toString('base64');
    }
    async startWait(obj) {
        if (!obj) {
            obj = {};
        }
        this.uart.start({
            tx: this.my_tx,
            rx: this.my_rx,
            baud: obj.baud || 38400,
        });
        this.obniz.display.setPinName(this.my_tx, 'JpegSerialCam', 'camRx');
        this.obniz.display.setPinName(this.my_rx, 'JpegSerialCam', 'camTx');
        await this.obniz.wait(2500);
    }
    async resetWait() {
        this.uart.send([0x56, 0x00, 0x26, 0x00]);
        await this._drainUntilWait(this.uart, [0x76, 0x00, 0x26, 0x00]);
        await this.obniz.wait(2500);
    }
    async setSizeWait(resolution) {
        let val;
        if (resolution === '640x480') {
            val = 0x00;
        }
        else if (resolution === '320x240') {
            val = 0x11;
        }
        else if (resolution === '160x120') {
            val = 0x22;
        }
        else {
            throw new Error('unsupported size');
        }
        this.uart.send([0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, val]);
        await this._drainUntilWait(this.uart, [0x76, 0x00, 0x31, 0x00]);
        await this.resetWait();
    }
    async setCompressibilityWait(compress) {
        const val = Math.floor((compress / 100) * 0xff);
        this.uart.send([0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, val]);
        await this._drainUntilWait(this.uart, [0x76, 0x00, 0x31, 0x00]);
        await this.resetWait();
    }
    async setBaudWait(baud) {
        let val;
        switch (baud) {
            case 9600:
                val = [0xae, 0xc8];
                break;
            case 19200:
                val = [0x56, 0xe4];
                break;
            case 38400:
                val = [0x2a, 0xf2];
                break;
            case 57600:
                val = [0x1c, 0x4c];
                break;
            case 115200:
                val = [0x0d, 0xa6];
                break;
            default:
                throw new Error('invalid baud rate');
        }
        this.uart.send([
            0x56,
            0x00,
            0x31,
            0x06,
            0x04,
            0x02,
            0x00,
            0x08,
            val[0],
            val[1],
        ]);
        await this._drainUntilWait(this.uart, [0x76, 0x00, 0x31, 0x00]);
        // await this.obniz.wait(1000);
        await this.startWait({
            baud,
        });
    }
    async takeWait() {
        const uart = this.uart;
        // console.log("stop a photo")
        uart.send([0x56, 0x00, 0x36, 0x01, 0x02]);
        await this._drainUntilWait(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);
        // console.log("take a photo")
        uart.send([0x56, 0x00, 0x36, 0x01, 0x00]);
        await this._drainUntilWait(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);
        // console.log("read length")
        uart.send([0x56, 0x00, 0x34, 0x01, 0x00]); // read length of image data
        let recv = await this._drainUntilWait(uart, [
            0x76,
            0x00,
            0x34,
            0x00,
            0x04,
            0x00,
            0x00,
        ]); // ack
        let XX;
        let YY;
        while (true) {
            const readed = uart.readBytes();
            // console.log(recv);
            recv = recv.concat(readed);
            if (recv.length >= 2) {
                XX = recv[0];
                YY = recv[1];
                break;
            }
            await this.obniz.wait(1000);
        }
        const databytes = XX * 256 + YY;
        // console.log("image: " + databytes + " Bytes");
        // const high = (databytes >> 8) & 0xff;
        // const low = databytes & 0xff;
        // console.log("start reading image")
        uart.send([
            0x56,
            0x00,
            0x32,
            0x0c,
            0x00,
            0x0a,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            XX,
            YY,
            0x00,
            0xff,
        ]);
        recv = await this._drainUntilWait(uart, [0x76, 0x00, 0x32, 0x00, 0x00]);
        // console.log("reading...");
        while (true) {
            const readed = uart.readBytes();
            recv = recv.concat(readed);
            // console.log(readed.length);
            if (recv.length >= databytes) {
                break;
            }
            await this.obniz.wait(10);
        }
        // console.log("done");
        recv = recv.splice(0, databytes); // remove tail
        recv = recv.concat([0xff, 0xd9]);
        return recv;
    }
}
exports.default = JpegSerialCam;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/ColorSensor/PT550/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.PT550
 */
Object.defineProperty(exports, "__esModule", { value: true });
class PT550 {
    constructor() {
        this.keys = ['signal', 'vcc', 'gnd'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'PT550',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.signal.getWait();
    }
}
exports.default = PT550;


/***/ }),

/***/ "./dist/src/parts/ColorSensor/S11059/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.S11059
 */
Object.defineProperty(exports, "__esModule", { value: true });
class S11059 {
    constructor() {
        this.keys = ['vcc', 'sda', 'scl', 'i2c', 'gnd'];
        this.requiredKeys = [];
        this.address = 0x2a;
        this.regAdrs = {
            ctrl: 0x00,
            manualTiming: 0x01,
            sensorRed: 0x03,
        };
    }
    static info() {
        return {
            name: 'S11059',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '3v');
        this.obniz.wait(100);
        this.params.clock = 100000;
        this.params.pull = '3v';
        this.params.mode = 'master';
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(100);
    }
    init(gain, intergerTime) {
        this.i2c.write(this.address, [this.regAdrs.ctrl, 0x80]); // Reset
        const val = (gain << 3) | intergerTime;
        this.i2c.write(this.address, [this.regAdrs.ctrl, val]); // Set gain,interger time
    }
    /**
     * @deprecated
     */
    getVal() {
        return this.getValWait();
    }
    async getValWait() {
        this.i2c.write(this.address, [this.regAdrs.sensorRed]);
        const ret = await this.i2c.readWait(this.address, 8);
        const level = [0, 0, 0, 0];
        level[0] = (ret[0] << 8) | ret[1];
        level[1] = (ret[2] << 8) | ret[3];
        level[2] = (ret[4] << 8) | ret[5];
        level[3] = (ret[6] << 8) | ret[7];
        return level;
    }
}
exports.default = S11059;


/***/ }),

/***/ "./dist/src/parts/DAConverter/MCP4725/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MCP4725
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MCP4725 {
    constructor() {
        this.cmd = {
            WRITEDAC: 0x40,
            WRITEDACEEPROM: 0x60,
        };
        this._vcc_voltage = 5.0;
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c'];
        this.requiredKeys = [];
        this.address = 0x60;
    }
    static info() {
        return {
            name: 'MCP4725',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.clock = 400000;
        this.params.pull = '5v';
        this.params.mode = 'master';
        this.i2c = this.obniz.getI2CWithConfig(this.params);
        this.obniz.wait(100);
    }
    setVCCVoltage(voltage) {
        this._vcc_voltage = voltage;
    }
    setVoltage(voltage, writeEEPROM = false) {
        if (voltage > this._vcc_voltage) {
            voltage = this._vcc_voltage;
        }
        else if (voltage < 0) {
            voltage = 0;
        }
        const mv = Math.round((voltage / this._vcc_voltage) * (4096 - 1));
        const hbits = mv >> 4;
        const lbits = (mv & 0x0f) << 4;
        if (writeEEPROM) {
            this.i2c.write(this.address, [this.cmd.WRITEDACEEPROM, hbits, lbits]);
        }
        else {
            this.i2c.write(this.address, [this.cmd.WRITEDAC, hbits, lbits]);
        }
    }
}
exports.default = MCP4725;


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.7SegmentLED
 */
Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLED {
    constructor() {
        this.keys = [
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'dp',
            'common',
            'commonType',
        ];
        this.requiredKeys = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
        this.digits = [
            0x3f,
            0x06,
            0x5b,
            0x4f,
            0x66,
            0x6d,
            0x7d,
            0x07,
            0x7f,
            0x6f,
            0x6f,
        ];
        this.displayIoNames = {
            a: 'a',
            b: 'b',
            c: 'c',
            d: 'd',
            e: 'e',
            f: 'f',
            g: 'g',
            dp: 'dp',
            common: 'com',
        };
        this.ios = [];
        this.isCathodeCommon = false;
    }
    static info() {
        return {
            name: '7SegmentLED',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.ios = [];
        this.ios.push(this.obniz.getIO(this.params.a));
        this.ios.push(this.obniz.getIO(this.params.b));
        this.ios.push(this.obniz.getIO(this.params.c));
        this.ios.push(this.obniz.getIO(this.params.d));
        this.ios.push(this.obniz.getIO(this.params.e));
        this.ios.push(this.obniz.getIO(this.params.f));
        this.ios.push(this.obniz.getIO(this.params.g));
        this.isCathodeCommon = this.params.commonType === 'anode' ? false : true;
        for (let i = 0; i < this.ios.length; i++) {
            this.ios[i].output(this.isCathodeCommon ? false : true);
        }
        if (this.obniz.isValidIO(this.params.dp)) {
            const dp = this.obniz.getIO(this.params.dp);
            dp.output(false);
            this.dp = dp;
        }
        if (this.obniz.isValidIO(this.params.common)) {
            this.common = this.obniz.getIO(this.params.common);
            this.on();
        }
    }
    print(data) {
        if (typeof data === 'number') {
            data = Math.floor(data);
            data = data % 10;
            for (let i = 0; i < 7; i++) {
                if (this.ios[i]) {
                    let val = this.digits[data] & (1 << i) ? true : false;
                    if (!this.isCathodeCommon) {
                        val = !val;
                    }
                    this.ios[i].output(val);
                }
            }
            this.on();
        }
    }
    printRaw(data) {
        if (typeof data === 'number') {
            for (let i = 0; i < 7; i++) {
                if (this.ios[i]) {
                    let val = data & (1 << i) ? true : false;
                    if (!this.isCathodeCommon) {
                        val = !val;
                    }
                    this.ios[i].output(val);
                }
            }
            this.on();
        }
    }
    dpState(show) {
        if (this.dp) {
            this.dp.output(this.isCathodeCommon ? show : !show);
        }
    }
    on() {
        if (this.common) {
            this.common.output(this.isCathodeCommon ? false : true);
        }
    }
    off() {
        if (this.common) {
            this.common.output(this.isCathodeCommon ? true : false);
        }
    }
}
exports.default = _7SegmentLED;


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLEDArray/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.7SegmentLEDArray
 */
Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLEDArray {
    constructor() {
        this.identifier = '' + new Date().getTime();
        this.keys = ['segments'];
        this.requiredKeys = this.keys;
    }
    static info() {
        return {
            name: '7SegmentLEDArray',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.segments = this.params.segments;
    }
    print(data) {
        if (typeof data === 'number') {
            data = Math.floor(data);
            const print = (index) => {
                let val = data;
                for (let i = 0; i < this.segments.length; i++) {
                    if (index === i) {
                        this.segments[i].print(val % 10);
                    }
                    else {
                        this.segments[i].off();
                    }
                    val = val / 10;
                }
            };
            const animations = [];
            for (let i = 0; i < this.segments.length; i++) {
                animations.push({
                    duration: 3,
                    state: print,
                });
            }
            this.obniz.io.animation(this.identifier, 'loop', animations);
        }
    }
    on() {
        this.obniz.io.animation(this.identifier, 'resume');
    }
    off() {
        this.obniz.io.animation(this.identifier, 'pause');
        for (let i = 0; i < this.segments.length; i++) {
            this.segments[i].off();
        }
    }
}
exports.default = _7SegmentLEDArray;


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLED_MAX7219/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.7SegmentLED_MAX7219
 */
Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLED_MAX7219 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'din', 'cs', 'clk'];
        this.requiredKeys = ['din', 'cs', 'clk'];
    }
    static info() {
        return {
            name: '7SegmentLED_MAX7219',
        };
    }
    wired(obniz) {
        this.cs = obniz.getIO(this.params.cs);
        // logich high must 3.5v <=
        if (obniz.isValidIO(this.params.vcc)) {
            obniz.getIO(this.params.vcc).output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        // max 10Mhz but motor driver can't
        this.params.frequency = this.params.frequency || 10 * 1000 * 1000;
        this.params.mode = 'master';
        this.params.mosi = this.params.din;
        this.params.drive = '3v';
        this.spi = this.obniz.getSpiWithConfig(this.params);
        // reset a onece
        this.cs.output(true);
        this.cs.output(false);
        this.cs.output(true);
    }
    init(numberOfDisplays, digits) {
        this.numOfDisp = numberOfDisplays;
        this.digits = digits;
        this.writeAllDisp([0x09, 0xff]); // Code B decode for digits 7-0
        this.writeAllDisp([0x0a, 0x05]); // brightness 11/32 0 to f
        this.writeAllDisp([0x0b, digits - 1]);
        this.writeAllDisp([0x0c, 0x01]); // Shutdown to normal operation
        this.writeAllDisp([0x0f, 0x00]);
        this.obniz.wait(10);
    }
    clear(disp) {
        for (let i = 0; i < this.digits; i++) {
            this.writeOneDisp(disp, [i + 1, 0x0f]);
        }
    }
    clearAll() {
        for (let i = 0; i < this.numOfDisp; i++) {
            for (let j = 0; j < this.digits; j++) {
                this.writeAllDisp([j + 1, 0x0f]);
            }
        }
    }
    test() {
        this.writeAllDisp([0x0f, 0x00]); // test command
    }
    brightness(display, value) {
        this.writeOneDisp(display, [0x0a, value]); // 0 to 15;
    }
    brightnessAll(value) {
        this.writeAllDisp([0x0a, value]); // 0 to 15;
    }
    writeAllDisp(data) {
        for (let i = 0; i < this.numOfDisp; i++) {
            this.writeOneDisp(i, data);
        }
    }
    writeOneDisp(disp, data) {
        this.cs.output(false);
        for (let i = 0; i < disp; i++) {
            this.spi.write([0x00, 0x00]);
        }
        this.spi.write(data);
        for (let i = 0; i < this.numOfDisp - (disp + 1); i++) {
            this.spi.write([0x00, 0x00]);
        }
        this.cs.output(true);
    }
    setNumber(display, digit, number, dp) {
        if (digit >= 0 && digit <= this.digits - 1) {
            this.writeOneDisp(display, [digit + 1, this.encodeBCD(number, dp)]);
        }
    }
    encodeBCD(decimal, dp) {
        const dpreg = dp === true ? 0x80 : 0x00;
        if (decimal >= 0 && decimal <= 9) {
            return decimal | dpreg;
        }
        else if (decimal === '-' || decimal === 10) {
            return 0x0a | dpreg;
        }
        else if (decimal === 'e' || decimal === 11) {
            return 0x0b | dpreg;
        }
        else if (decimal === 'h' || decimal === 12) {
            return 0x0c | dpreg;
        }
        else if (decimal === 'l' || decimal === 13) {
            return 0x0d | dpreg;
        }
        else if (decimal === 'p' || decimal === 14) {
            return 0x0e | dpreg;
        }
        else if (decimal === 'on') {
            // light all segments
            return 0x88;
        }
        else if (decimal === 'off') {
            return 0x0f | dpreg;
        }
        else {
            return 0x0f | dpreg;
        }
    }
}
exports.default = _7SegmentLED_MAX7219;


/***/ }),

/***/ "./dist/src/parts/Display/MatrixLED_HT16K33/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MatrixLED_HT16K33
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MatrixLED_HT16K33 {
    constructor() {
        this.width = 0;
        this.height = 0;
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c', 'address'];
        this.requiredKeys = [];
        this.command = {};
        this.command.blink = 0x80;
        this.command.brightness = 0xe0;
        this.blink_mode = {};
        this.blink_mode.display_on = 0x01;
        this.blink_mode.blink_off = 0x00;
        this.blink_mode.blink_2hz = 0x01;
        this.blink_mode.blink_1hz = 0x02;
        this.blink_mode.blink_halfhz = 0x03;
        this.vram = [];
    }
    static info() {
        return {
            name: 'MatrixLED_HT16K33',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.address = this.params.address || 0x70;
        this.params.pull = '5v';
        this.params.mode = 'master';
        this.params.clock = this.params.clock || 400 * 1000;
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(1000);
    }
    init(width) {
        // 8 or 16
        this.width = width;
        this.height = 8; // IC static setting
        this.prepareVram(width, this.height);
        this.i2c.write(this.address, [0x21]);
        this.blinkRate(this.blink_mode.blink_off);
        this.brightness(15);
        this.obniz.wait(10);
    }
    blinkRate(val) {
        if (val < 0) {
            val = 0;
        }
        if (val > 3) {
            val = 3;
        }
        this.i2c.write(this.address, [
            this.command.blink | this.blink_mode.display_on | (val << 1),
        ]);
    }
    brightness(val) {
        if (val < 0) {
            val = 0;
        }
        if (val > 15) {
            val = 15;
        }
        this.i2c.write(this.address, [this.command.brightness | val]);
    }
    clear() {
        for (let i = 0; i < this.height; i++) {
            this.vram[i] = 0x00;
        }
        this.writeVram();
    }
    draw(ctx) {
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < this.height; i++) {
            this.vram[i] = 0;
            for (let j = 0; j < this.width; j++) {
                const pos = i * this.height * 4 + j * 4;
                const brightness = 0.34 * data[pos] + 0.5 * data[pos + 1] + 0.16 * data[pos + 2];
                if (brightness > 0x7f) {
                    this.vram[i] |= 0x1 << j;
                }
            }
        }
        this.writeVram();
    }
    dots(data) {
        for (let i = 0; i < this.height; i++) {
            this.vram[i] = data[i];
        }
        this.writeVram();
    }
    writeVram() {
        const data = [0x00];
        for (let i = 0; i < this.height; i++) {
            data.push(this.vram[i] & 0xff);
            data.push((this.vram[i] >> 8) & 0xff);
        }
        this.i2c.write(this.address, data);
    }
    prepareVram(width, height) {
        this.vram = [];
        for (let i = 0; i < height; i++) {
            this.vram.push(0);
        }
    }
}
exports.default = MatrixLED_HT16K33;


/***/ }),

/***/ "./dist/src/parts/Display/MatrixLED_MAX7219/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MatrixLED_MAX7219
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MatrixLED_MAX7219 {
    constructor() {
        this.width = 0;
        this.height = 0;
        this.vram = [[]];
        this.keys = ['vcc', 'gnd', 'din', 'cs', 'clk'];
        this.requiredKeys = ['din', 'cs', 'clk'];
    }
    static info() {
        return {
            name: 'MatrixLED_MAX7219',
        };
    }
    wired(obniz) {
        this.cs = obniz.getIO(this.params.cs);
        // logich high must 3.5v <=
        if (obniz.isValidIO(this.params.vcc)) {
            obniz.getIO(this.params.vcc).output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        // max 10Mhz but motor driver can't
        this.params.frequency = this.params.frequency || 10 * 1000 * 1000;
        this.params.mode = 'master';
        this.params.mosi = this.params.din;
        this.params.drive = '3v';
        this.spi = this.obniz.getSpiWithConfig(this.params);
        // reset a onece
        this.cs.output(true);
        this.cs.output(false);
        this.cs.output(true);
    }
    init(width, height) {
        this.width = width;
        this.height = height;
        this.preparevram(width, height);
        this.initModule();
    }
    initModule() {
        this.write([0x09, 0x00]); // Code B decode for digits 3-0 No decode for digits 7-4
        this.write([0x0a, 0x05]); // brightness 9/32 0 to f
        this.write([0x0b, 0x07]); // Display digits 0 1 2 3 4 567
        this.write([0x0c, 0x01]); // Shutdown to normal operation
        this.write([0x0f, 0x00]);
        this.passingCommands();
        this.obniz.wait(10);
    }
    test() {
        this.write([0x0f, 0x00]); // test command
        this.passingCommands();
    }
    passingCommands() {
        for (let i = 8; i < this.width; i += 8) {
            // this needed for number of unit
            this.write([0x00, 0x00]);
        }
    }
    brightness(val) {
        this.write([0x0a, val]); // 0 to 15;
        this.passingCommands();
    }
    preparevram(width, height) {
        this.vram = [];
        for (let i = 0; i < height; i++) {
            const dots = new Array(width / 8);
            for (let ii = 0; ii < dots.length; ii++) {
                dots[ii] = 0x00;
            }
            this.vram.push(dots);
        }
    }
    write(data) {
        this.cs.output(false);
        this.spi.write(data);
        this.cs.output(true);
    }
    writeVram() {
        for (let line_num = 0; line_num < this.height; line_num++) {
            const addr = line_num + 1;
            const line = this.vram[line_num];
            const data = [];
            for (let col = 0; col < line.length; col++) {
                data.push(addr);
                data.push(line[col]);
            }
            this.write(data);
        }
    }
    clear() {
        for (let line_num = 0; line_num < this.height; line_num++) {
            const line = this.vram[line_num];
            for (let col = 0; col < line.length; col++) {
                this.vram[line_num][col] = 0x00;
            }
            this.writeVram();
        }
    }
    draw(ctx) {
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            const index = Math.floor(i / 4);
            const line = Math.floor(index / this.width);
            const col = Math.floor((index - line * this.width) / 8);
            const bits = Math.floor(index - line * this.width) % 8;
            if (bits === 0) {
                this.vram[line][col] = 0x00;
            }
            if (brightness > 0x7f) {
                this.vram[line][col] |= 0x80 >> bits;
            }
        }
        this.writeVram();
    }
}
exports.default = MatrixLED_MAX7219;


/***/ }),

/***/ "./dist/src/parts/Display/ST7735S/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ST7735S
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ST7735S {
    constructor() {
        this.debugprint = false;
        this.width = 0;
        this.height = 0;
        this.x_offset = 0;
        this.y_offset = 0;
        this.writeBuffer = [];
        this.keys = ['sclk', 'mosi', 'cs', 'res', 'dc'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'ST7735S',
        };
    }
    wired(obniz) {
        this.debugprint = false;
        this.obniz = obniz;
        this.io_dc = obniz.getIO(this.params.dc);
        this.io_res = obniz.getIO(this.params.res);
        this.io_cs = obniz.getIO(this.params.cs);
        this.params.frequency = 16 * 1000 * 1000; // 16MHz
        this.params.mode = 'master';
        this.params.clk = this.params.sclk;
        this.params.drive = '3v';
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.width = ST7735S_TFTWIDTH;
        this.height = ST7735S_TFTHEIGHT;
        this.rotation = 0;
        this.x_offset = 26;
        this.y_offset = 2;
        this.writeBuffer = []; // 1024bytes bufferring
        this._setPresetColor();
        this.init();
    }
    print_debug(v) {
        if (this.debugprint) {
            console.log(
            // eslint-disable-next-line prefer-rest-params
            'SainSmartTFT18LCD: ' + Array.prototype.slice.call(arguments).join(''));
        }
    }
    _deadSleep(waitMsec) {
        const startMsec = new Date();
        while (new Date() - startMsec < waitMsec)
            ;
    }
    _reset() {
        this.io_res.output(false);
        this._deadSleep(10);
        this.io_res.output(true);
        this._deadSleep(10);
    }
    writeCommand(cmd) {
        this.io_dc.output(false);
        this.io_cs.output(false);
        this.spi.write([cmd]);
        this.io_cs.output(true);
    }
    writeData(data) {
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    write(cmd, data) {
        if (data.length === 0) {
            return;
        }
        this.writeCommand(cmd);
        this.writeData(data);
    }
    async asyncwait() {
        return await this.spi.writeWait([0x00]);
    }
    _writeFlush() {
        while (this.writeBuffer.length > 0) {
            if (this.writeBuffer.length > 1024) {
                const data = this.writeBuffer.slice(0, 1024);
                this.writeData(data);
                this.writeBuffer.splice(0, 1024);
            }
            else {
                if (this.writeBuffer.length > 0) {
                    this.writeData(this.writeBuffer);
                }
                this.writeBuffer = [];
            }
        }
    }
    _writeBuffer(data) {
        if (data && data.length > 0) {
            this.writeBuffer = this.writeBuffer.concat(data);
        }
        else {
            this._writeFlush();
        }
    }
    color16(r, g, b) {
        //  1st byte  (r & 0xF8 | g >> 5)
        //  2nd byte  (g & 0xFC << 3 | b >> 3)
        return ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
    }
    complementaryColor16(color) {
        const r = (color & 0xf800) >> 8;
        const g = (color & 0x7e0) >> 3;
        const b = (color & 0x1f) << 3;
        const x = Math.max(r, g, b) + Math.min(r, g, b);
        return this.color16(x - r, x - g, x - b);
    }
    reverseColor16(color) {
        const r = (color & 0xf800) >> 8;
        const g = (color & 0x7e0) >> 3;
        const b = (color & 0x1f) << 3;
        const x = 0xff;
        return this.color16(x - r, x - g, x - b);
    }
    _initG() {
        // initialize display
        this.writeCommand(ST7735_SWRESET);
        this.obniz.wait(150);
        this.writeCommand(ST7735_SLPOUT); // Sleep out & booster on
        this.obniz.wait(500);
        this.write(ST7735_FRMCTR1, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR2, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR3, [0x01, 0x2c, 0x2d, 0x01, 0x2c, 0x2d]);
        this.write(ST7735_INVCTR, [0x07]);
        this.write(ST7735_PWCTR1, [0xa2, 0x02, 0x84]);
        this.write(ST7735_PWCTR2, [0xc5]);
        this.write(ST7735_PWCTR3, [0x0a, 0x00]);
        this.write(ST7735_PWCTR4, [0x8a, 0x2a]);
        this.write(ST7735_PWCTR5, [0x8a, 0xee]);
        this.write(ST7735_VMCTR1, [0x0e]);
        this.writeCommand(ST7735_INVOFF);
        this.write(ST7735_MADCTL, [0xc8]);
        this.write(ST7735_COLMOD, [0x05]);
        this.write(ST7735_CASET, [0x00, 0x00, 0x00, 0x7f]);
        this.write(ST7735_RASET, [0x00, 0x00, 0x00, 0x9f]);
        this.writeCommand(ST7735_INVON);
        this.write(ST7735_GMCTRP1, [
            0x02,
            0x1c,
            0x07,
            0x12,
            0x37,
            0x32,
            0x29,
            0x2d,
            0x29,
            0x25,
            0x2b,
            0x39,
            0x00,
            0x01,
            0x03,
            0x10,
        ]);
        this.write(ST7735_GMCTRN1, [
            0x03,
            0x1d,
            0x07,
            0x06,
            0x2e,
            0x2c,
            0x29,
            0x2d,
            0x2e,
            0x2e,
            0x37,
            0x3f,
            0x00,
            0x00,
            0x02,
            0x10,
        ]);
    }
    init() {
        this._reset();
        this._initG();
        this.setDisplayOn();
        this.setRotation(0);
    }
    setDisplayOn() {
        this.writeCommand(ST7735_DISPON);
    }
    setDisplayOff() {
        this.writeCommand(ST7735_DISPOFF);
    }
    setDisplay(on) {
        if (on === true) {
            this.setDisplayOn();
        }
        else {
            this.setDisplayOff();
        }
    }
    setInversionOn() {
        this.writeCommand(ST7735_INVON);
    }
    setInversionOff() {
        this.writeCommand(ST7735_INVOFF);
    }
    setInversion(inversion) {
        if (inversion === true) {
            this.setInversionOn();
        }
        else {
            this.setInversionOff();
        }
    }
    setRotation(m) {
        const MADCTL_MY = 0x80;
        const MADCTL_MX = 0x40;
        const MADCTL_MV = 0x20;
        // const MADCTL_ML = 0x10;
        const MADCTL_RGB = 0x00; // always RGB, never BGR
        // const MADCTL_MH = 0x04;
        let data = [];
        this.rotation = m % 4; // can't be higher than 3
        switch (this.rotation) {
            case 0:
                data = [MADCTL_MX | MADCTL_MY | MADCTL_RGB];
                this.width = ST7735S_TFTWIDTH;
                this.height = ST7735S_TFTHEIGHT;
                break;
            case 1:
                data = [MADCTL_MY | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735S_TFTHEIGHT;
                this.height = ST7735S_TFTWIDTH;
                break;
            case 2:
                data = [MADCTL_RGB];
                this.width = ST7735S_TFTWIDTH;
                this.height = ST7735S_TFTHEIGHT;
                break;
            case 3:
                data = [MADCTL_MX | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735S_TFTHEIGHT;
                this.height = ST7735S_TFTWIDTH;
                break;
        }
        this.write(ST7735_MADCTL, data);
        this.setAddrWindow(0, 0, this.width - 1, this.height - 1);
    }
    setAddrWindow(x0, y0, x1, y1) {
        this.print_debug(`setAddrWindow: (x0: ${x0}, y0: ${y0}) - (x1: ${x1}, y1: ${y1})`);
        if (x0 < 0) {
            x0 = 0;
        }
        if (y0 < 0) {
            y0 = 0;
        }
        if (x1 < 0) {
            x1 = 0;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        if (this.rotation === 0 || this.rotation === 2) {
            x0 = x0 + this.x_offset;
            x1 = x1 + this.x_offset;
            y0 = y0 + this.y_offset;
            y1 = y1 + this.y_offset;
        }
        else {
            x0 = x0 + this.y_offset;
            x1 = x1 + this.y_offset;
            y0 = y0 + this.x_offset;
            y1 = y1 + this.x_offset;
        }
        // column addr set
        this.write(ST7735_CASET, [0x00, x0, 0x00, x1]); // XSTART-XEND
        // row addr set
        this.write(ST7735_RASET, [0x00, y0, 0x00, y1]); // YSTART-YEND
        // write to RAM
        this.writeCommand(ST7735_RAMWR);
        this.writeBuffer = [];
    }
    // __swap(a, b) { let t = a; a = b; b = t; }
    fillScreen(color) {
        this.fillRect(0, 0, this.width, this.height, color);
    }
    fillRect(x, y, width, height, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + width - 1 >= this.width) {
            width = this.width - x;
        }
        if (y + height - 1 >= this.height) {
            height = this.height - y;
        }
        const pixels = this._color2pixels(width, height, color);
        this.rawBound16(x, y, width, height, pixels, true);
    }
    drawRect(x, y, width, height, color) {
        this.drawHLine(x, y, width, color);
        this.drawHLine(x, y + height - 1, width, color);
        this.drawVLine(x, y, height, color);
        this.drawVLine(x + width - 1, y, height, color);
    }
    drawCircle(center_x, center_y, radius, color) {
        let f = 1 - radius;
        let ddF_x = 1;
        let ddF_y = -2 * radius;
        let x = 0;
        let y = radius;
        this.drawPixel(center_x, center_y + radius, color);
        this.drawPixel(center_x, center_y - radius, color);
        this.drawPixel(center_x + radius, center_y, color);
        this.drawPixel(center_x - radius, center_y, color);
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            this.drawPixel(center_x + x, center_y + y, color);
            this.drawPixel(center_x - x, center_y + y, color);
            this.drawPixel(center_x + x, center_y - y, color);
            this.drawPixel(center_x - x, center_y - y, color);
            this.drawPixel(center_x + y, center_y + x, color);
            this.drawPixel(center_x - y, center_y + x, color);
            this.drawPixel(center_x + y, center_y - x, color);
            this.drawPixel(center_x - y, center_y - x, color);
        }
    }
    fillCircle(center_x, center_y, radius, color) {
        this.drawVLine(center_x, center_y - radius, 2 * radius + 1, color);
        this._fillCircleHelper(center_x, center_y, radius, 3, 0, color);
    }
    _fillCircleHelper(x0, y0, r, cornername, delta, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x1) {
                this.drawVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
            }
            if (cornername & 0x2) {
                this.drawVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
            }
        }
    }
    drawRoundRect(x, y, width, height, round, color) {
        this.drawHLine(x + round, y, width - 2 * round, color); // Top
        this.drawHLine(x + round, y + height - 1, width - 2 * round, color); // Bottom
        this.drawVLine(x, y + round, height - 2 * round, color); // Left
        this.drawVLine(x + width - 1, y + round, height - 2 * round, color); // Right
        this._drawCircleHelper(x + round, y + round, round, 1, color);
        this._drawCircleHelper(x + width - round - 1, y + round, round, 2, color);
        this._drawCircleHelper(x + width - round - 1, y + height - round - 1, round, 4, color);
        this._drawCircleHelper(x + round, y + height - round - 1, round, 8, color);
    }
    fillRoundRect(x, y, width, height, round, color) {
        this.fillRect(x + round, y, width - 2 * round, height, color);
        this._fillCircleHelper(x + width - round - 1, y + round, round, 1, height - 2 * round - 1, color);
        this._fillCircleHelper(x + round, y + round, round, 2, height - 2 * round - 1, color);
    }
    drawTriangle(x0, y0, x1, y1, x2, y2, color) {
        this.drawLine(x0, y0, x1, y1, color);
        this.drawLine(x1, y1, x2, y2, color);
        this.drawLine(x2, y2, x0, y0, color);
    }
    fillTriangle(x0, y0, x1, y1, x2, y2, color) {
        let a;
        let b;
        let y;
        let last;
        // Sort coordinates by Y order (y2 >= y1 >= y0)
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y1 > y2) {
            y2 = [y1, (y1 = y2)][0]; // this._swap(y2, y1);
            x2 = [x1, (x1 = x2)][0]; // this._swap(x2, x1);
        }
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y0 === y2) {
            // Handle awkward all-on-same-line case as its own thing
            a = b = x0;
            if (x1 < a) {
                a = x1;
            }
            else if (x1 > b) {
                b = x1;
            }
            if (x2 < a) {
                a = x2;
            }
            else if (x2 > b) {
                b = x2;
            }
            this.drawHLine(a, y0, b - a + 1, color);
            return;
        }
        const dx01 = x1 - x0;
        const dy01 = y1 - y0;
        const dx02 = x2 - x0;
        const dy02 = y2 - y0;
        const dx12 = x2 - x1;
        const dy12 = y2 - y1;
        let sa = 0;
        let sb = 0;
        if (y1 === y2) {
            last = y1;
        }
        else {
            last = y1 - 1;
        } // skip it
        for (y = y0; y <= last; y++) {
            a = x0 + Math.floor(sa / dy01);
            b = x0 + Math.floor(sb / dy02);
            sa += dx01;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
        sa = dx12 * (y - y1);
        sb = dx02 * (y - y0);
        for (; y <= y2; y++) {
            a = x1 + Math.floor(sa / dy12);
            b = x0 + Math.floor(sb / dy02);
            sa += dx12;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
    }
    drawVLine(x, y, height, color) {
        if (height < 0) {
            height = -height;
            y = y - height;
        }
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (y + height - 1 >= this.height) {
            height = this.height - y;
        }
        const pixels = this._color2pixels(1, height, color);
        this.rawBound16(x, y, 1, height, pixels, false);
    }
    drawHLine(x, y, width, color) {
        if (width < 0) {
            width = -width;
            x = x - width;
        }
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + width - 1 >= this.width) {
            width = this.width - x;
        }
        const pixels = this._color2pixels(width, 1, color);
        this.rawBound16(x, y, width, 1, pixels, false);
    }
    drawLine(x0, y0, x1, y1, color) {
        if (x0 === x1) {
            this.drawVLine(x0, y0, y1 - y0, color);
            return;
        }
        if (y0 === y1) {
            this.drawHLine(x0, y0, x1 - x0, color);
            return;
        }
        const step = Math.abs(y1 - y0) > Math.abs(x1 - x0);
        if (step) {
            y0 = [x0, (x0 = y0)][0]; // this._swap(x0, y0);
            y1 = [x1, (x1 = y1)][0]; // this._swap(x1, y1);
        }
        if (x0 > x1) {
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
        }
        const dx = x1 - x0;
        const dy = Math.abs(y1 - y0);
        let err = dx / 2;
        const ystep = y0 < y1 ? 1 : -1;
        for (; x0 <= x1; x0++) {
            if (step) {
                this.drawPixel(y0, x0, color);
            }
            else {
                this.drawPixel(x0, y0, color);
            }
            err -= dy;
            if (err < 0) {
                y0 += ystep;
                err += dx;
            }
        }
    }
    drawPixel(x, y, color) {
        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
            return;
        }
        this.rawBound16(x, y, 1, 1, [color], false);
    }
    drawChar(x, y, char, color, backgroundColor, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0) {
            // Clip top
            return;
        }
        if (color !== backgroundColor) {
            this.drawChar2(x, y, char, color, backgroundColor, size);
            return;
        }
        const c = char.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                if (line & 0x1) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, color);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, color);
                    }
                }
                else if (backgroundColor !== color) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, backgroundColor);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, backgroundColor);
                    }
                }
                line >>= 1;
            }
        }
    }
    drawChar2(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0 // Clip top
        ) {
            return;
        }
        const pixels = new Array(6 * 8 * size * size);
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                const cl = line & 0x1 ? color : bg;
                for (let w = 0; w < size; w++) {
                    for (let h = 0; h < size; h++) {
                        pixels[i * (1 * size) + w + (j * (6 * size * size) + h * (6 * size))] = cl;
                    }
                }
                line >>= 1;
            }
        }
        this.rawBound16(x, y, 6 * size, 8 * size, pixels);
    }
    rawBound16(x, y, width, height, pixels, flush) {
        const rgb = [];
        pixels.forEach((v) => {
            const v2 = ((v & 0xf800) >> 11) | (v & 0x7e0) | ((v & 0x1f) << 11);
            rgb.push((v2 & 0xff00) >> 8);
            rgb.push(v2 & 0xff);
        });
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        if (flush) {
            this._writeBuffer(rgb);
            this._writeBuffer(); // for flush
        }
        else {
            this.writeData(rgb);
        }
    }
    drawString(x, y, string, color, backgroundColor, size, wrap) {
        //  bg = bg || color;
        size = size || 1;
        //  wrap = wrap || true;
        for (let n = 0; n < string.length; n++) {
            const c = string.charAt(n);
            if (c === '\n') {
                y += size * 8;
                x = 0;
            }
            else if (c === '\r') {
                // skip em
            }
            else {
                this.drawChar(x, y, c, color, backgroundColor, size);
                x += size * 6;
                if (wrap && x > this.width - size * 6) {
                    y += size * 8;
                    x = 0;
                }
            }
        }
        return [x, y];
    }
    drawContextBound(context, x0, y0, width, height, x1, y1, gray) {
        x0 = x0 || 0;
        y0 = y0 || 0;
        width = width || context.canvas.clientWidth;
        height = height || context.canvas.clientHeight;
        x1 = x1 || 0;
        y1 = y1 || 0;
        gray = gray || false;
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        const imageData = context.getImageData(x0, y0, width, height).data;
        const rgb = [];
        for (let n = 0; n < imageData.length; n += 4) {
            const r = imageData[n + 0];
            const g = imageData[n + 1];
            const b = imageData[n + 2];
            if (!gray) {
                rgb.push(b);
                rgb.push(g);
                rgb.push(r);
            }
            else {
                const gs = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
                rgb.push(gs);
                rgb.push(gs);
                rgb.push(gs);
            }
        }
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x1, y1, x1 + width - 1, y1 + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    drawContext(context, gray) {
        gray = gray || false;
        this.drawContextBound(context, 0, 0, this.width, this.height, 0, 0, gray);
    }
    draw(context, gray) {
        this.drawContext(context, gray);
    }
    rawBound(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push(v & 0xff);
            rgb.push((v & 0xff00) >> 8);
            rgb.push((v & 0xff0000) >> 16);
        });
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    raw(pixels) {
        this.rawBound16(0, 0, this.width, this.height, pixels, true);
    }
    _setPresetColor() {
        this.color = {
            AliceBlue: 0xf7df,
            AntiqueWhite: 0xff5a,
            Aqua: 0x07ff,
            Aquamarine: 0x7ffa,
            Azure: 0xf7ff,
            Beige: 0xf7bb,
            Bisque: 0xff38,
            Black: 0x0000,
            BlanchedAlmond: 0xff59,
            Blue: 0x001f,
            BlueViolet: 0x895c,
            Brown: 0xa145,
            BurlyWood: 0xddd0,
            CadetBlue: 0x5cf4,
            Chartreuse: 0x7fe0,
            Chocolate: 0xd343,
            Coral: 0xfbea,
            CornflowerBlue: 0x64bd,
            Cornsilk: 0xffdb,
            Crimson: 0xd8a7,
            Cyan: 0x07ff,
            DarkBlue: 0x0011,
            DarkCyan: 0x0451,
            DarkGoldenRod: 0xbc21,
            DarkGray: 0xad55,
            DarkGreen: 0x0320,
            DarkKhaki: 0xbdad,
            DarkMagenta: 0x8811,
            DarkOliveGreen: 0x5345,
            DarkOrange: 0xfc60,
            DarkOrchid: 0x9999,
            DarkRed: 0x8800,
            DarkSalmon: 0xecaf,
            DarkSeaGreen: 0x8df1,
            DarkSlateBlue: 0x49f1,
            DarkSlateGray: 0x2a69,
            DarkTurquoise: 0x067a,
            DarkViolet: 0x901a,
            DeepPink: 0xf8b2,
            DeepSkyBlue: 0x05ff,
            DimGray: 0x6b4d,
            DodgerBlue: 0x1c9f,
            FireBrick: 0xb104,
            FloralWhite: 0xffde,
            ForestGreen: 0x2444,
            Fuchsia: 0xf81f,
            Gainsboro: 0xdefb,
            GhostWhite: 0xffdf,
            Gold: 0xfea0,
            GoldenRod: 0xdd24,
            Gray: 0x8410,
            Green: 0x0400,
            GreenYellow: 0xafe5,
            HoneyDew: 0xf7fe,
            HotPink: 0xfb56,
            IndianRed: 0xcaeb,
            Indigo: 0x4810,
            Ivory: 0xfffe,
            Khaki: 0xf731,
            Lavender: 0xe73f,
            LavenderBlush: 0xff9e,
            LawnGreen: 0x7fe0,
            LemonChiffon: 0xffd9,
            LightBlue: 0xaedc,
            LightCoral: 0xf410,
            LightCyan: 0xe7ff,
            LightGoldenRodYellow: 0xffda,
            LightGray: 0xd69a,
            LightGreen: 0x9772,
            LightPink: 0xfdb8,
            LightSalmon: 0xfd0f,
            LightSeaGreen: 0x2595,
            LightSkyBlue: 0x867f,
            LightSlateGray: 0x7453,
            LightSteelBlue: 0xb63b,
            LightYellow: 0xfffc,
            Lime: 0x07e0,
            LimeGreen: 0x3666,
            Linen: 0xff9c,
            Magenta: 0xf81f,
            Maroon: 0x8000,
            MediumAquaMarine: 0x6675,
            MediumBlue: 0x0019,
            MediumOrchid: 0xbaba,
            MediumPurple: 0x939b,
            MediumSeaGreen: 0x3d8e,
            MediumSlateBlue: 0x7b5d,
            MediumSpringGreen: 0x07d3,
            MediumTurquoise: 0x4e99,
            MediumVioletRed: 0xc0b0,
            MidnightBlue: 0x18ce,
            MintCream: 0xf7ff,
            MistyRose: 0xff3c,
            Moccasin: 0xff36,
            NavajoWhite: 0xfef5,
            Navy: 0x0010,
            OldLace: 0xffbc,
            Olive: 0x8400,
            OliveDrab: 0x6c64,
            Orange: 0xfd20,
            OrangeRed: 0xfa20,
            Orchid: 0xdb9a,
            PaleGoldenRod: 0xef55,
            PaleGreen: 0x9fd3,
            PaleTurquoise: 0xaf7d,
            PaleVioletRed: 0xdb92,
            PapayaWhip: 0xff7a,
            PeachPuff: 0xfed7,
            Peru: 0xcc27,
            Pink: 0xfe19,
            Plum: 0xdd1b,
            PowderBlue: 0xb71c,
            Purple: 0x8010,
            RebeccaPurple: 0x6193,
            Red: 0xf800,
            RosyBrown: 0xbc71,
            RoyalBlue: 0x435c,
            SaddleBrown: 0x8a22,
            Salmon: 0xfc0e,
            SandyBrown: 0xf52c,
            SeaGreen: 0x2c4a,
            SeaShell: 0xffbd,
            Sienna: 0xa285,
            Silver: 0xc618,
            SkyBlue: 0x867d,
            SlateBlue: 0x6ad9,
            SlateGray: 0x7412,
            Snow: 0xffdf,
            SpringGreen: 0x07ef,
            SteelBlue: 0x4416,
            Tan: 0xd5b1,
            Teal: 0x0410,
            Thistle: 0xddfb,
            Tomato: 0xfb08,
            Turquoise: 0x471a,
            Violet: 0xec1d,
            Wheat: 0xf6f6,
            White: 0xffff,
            WhiteSmoke: 0xf7be,
            Yellow: 0xffe0,
            YellowGreen: 0x9e66,
        };
    }
    _color2pixels(w, h, color) {
        return Array.from(new Array(Math.abs(w * h))).map((v, i) => color);
    }
    _drawCircleHelper(x0, y0, r, cornername, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x4) {
                this.drawPixel(x0 + x, y0 + y, color);
                this.drawPixel(x0 + y, y0 + x, color);
            }
            if (cornername & 0x2) {
                this.drawPixel(x0 + x, y0 - y, color);
                this.drawPixel(x0 + y, y0 - x, color);
            }
            if (cornername & 0x8) {
                this.drawPixel(x0 - y, y0 + x, color);
                this.drawPixel(x0 - x, y0 + y, color);
            }
            if (cornername & 0x1) {
                this.drawPixel(x0 - y, y0 - x, color);
                this.drawPixel(x0 - x, y0 - y, color);
            }
        }
    }
}
exports.default = ST7735S;
// ----------------------------------------------------------
const ST7735S_TFTWIDTH = 80;
const ST7735S_TFTHEIGHT = 160;
// const ST7735_NOP = 0x00;
const ST7735_SWRESET = 0x01;
// const ST7735_RDDID = 0x04;
// const ST7735_RDDST = 0x09;
// const ST7735_RDDPM = 0x0a;
// const ST7735_SLPIN = 0x10;
const ST7735_SLPOUT = 0x11;
// const ST7735_PTLON = 0x12;
// const ST7735_NORON = 0x13;
const ST7735_INVOFF = 0x20;
const ST7735_INVON = 0x21;
const ST7735_DISPOFF = 0x28;
const ST7735_DISPON = 0x29;
const ST7735_CASET = 0x2a;
const ST7735_RASET = 0x2b;
const ST7735_RAMWR = 0x2c;
// const ST7735_RAMRD = 0x2e;
const ST7735_MADCTL = 0x36;
// const ST7735_PTLAR = 0x30;
const ST7735_COLMOD = 0x3a;
const ST7735_FRMCTR1 = 0xb1;
const ST7735_FRMCTR2 = 0xb2;
const ST7735_FRMCTR3 = 0xb3;
const ST7735_INVCTR = 0xb4;
// const ST7735_DISSET5 = 0xb6;
const ST7735_PWCTR1 = 0xc0;
const ST7735_PWCTR2 = 0xc1;
const ST7735_PWCTR3 = 0xc2;
const ST7735_PWCTR4 = 0xc3;
const ST7735_PWCTR5 = 0xc4;
const ST7735_VMCTR1 = 0xc5;
// const ST7735_RDID1 = 0xda;
// const ST7735_RDID2 = 0xdb;
// const ST7735_RDID3 = 0xdc;
// const ST7735_RDID4 = 0xdd;
// const ST7735_PWCTR6 = 0xfc;
const ST7735_GMCTRP1 = 0xe0;
const ST7735_GMCTRN1 = 0xe1;
const ST7735_18bit = 0x06; // 18bit/pixel
const ST7735_16bit = 0x05; // 16bit/pixel
// standard ascii 5x7 font
const font = [
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3e,
    0x5b,
    0x4f,
    0x5b,
    0x3e,
    0x3e,
    0x6b,
    0x4f,
    0x6b,
    0x3e,
    0x1c,
    0x3e,
    0x7c,
    0x3e,
    0x1c,
    0x18,
    0x3c,
    0x7e,
    0x3c,
    0x18,
    0x1c,
    0x57,
    0x7d,
    0x57,
    0x1c,
    0x1c,
    0x5e,
    0x7f,
    0x5e,
    0x1c,
    0x00,
    0x18,
    0x3c,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xc3,
    0xe7,
    0xff,
    0x00,
    0x18,
    0x24,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xdb,
    0xe7,
    0xff,
    0x30,
    0x48,
    0x3a,
    0x06,
    0x0e,
    0x26,
    0x29,
    0x79,
    0x29,
    0x26,
    0x40,
    0x7f,
    0x05,
    0x05,
    0x07,
    0x40,
    0x7f,
    0x05,
    0x25,
    0x3f,
    0x5a,
    0x3c,
    0xe7,
    0x3c,
    0x5a,
    0x7f,
    0x3e,
    0x1c,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x1c,
    0x3e,
    0x7f,
    0x14,
    0x22,
    0x7f,
    0x22,
    0x14,
    0x5f,
    0x5f,
    0x00,
    0x5f,
    0x5f,
    0x06,
    0x09,
    0x7f,
    0x01,
    0x7f,
    0x00,
    0x66,
    0x89,
    0x95,
    0x6a,
    0x60,
    0x60,
    0x60,
    0x60,
    0x60,
    0x94,
    0xa2,
    0xff,
    0xa2,
    0x94,
    0x08,
    0x04,
    0x7e,
    0x04,
    0x08,
    0x10,
    0x20,
    0x7e,
    0x20,
    0x10,
    0x08,
    0x08,
    0x2a,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x1e,
    0x10,
    0x10,
    0x10,
    0x10,
    0x0c,
    0x1e,
    0x0c,
    0x1e,
    0x0c,
    0x30,
    0x38,
    0x3e,
    0x38,
    0x30,
    0x06,
    0x0e,
    0x3e,
    0x0e,
    0x06,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x5f,
    0x00,
    0x00,
    0x00,
    0x07,
    0x00,
    0x07,
    0x00,
    0x14,
    0x7f,
    0x14,
    0x7f,
    0x14,
    0x24,
    0x2a,
    0x7f,
    0x2a,
    0x12,
    0x23,
    0x13,
    0x08,
    0x64,
    0x62,
    0x36,
    0x49,
    0x56,
    0x20,
    0x50,
    0x00,
    0x08,
    0x07,
    0x03,
    0x00,
    0x00,
    0x1c,
    0x22,
    0x41,
    0x00,
    0x00,
    0x41,
    0x22,
    0x1c,
    0x00,
    0x2a,
    0x1c,
    0x7f,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x3e,
    0x08,
    0x08,
    0x00,
    0x80,
    0x70,
    0x30,
    0x00,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x00,
    0x00,
    0x60,
    0x60,
    0x00,
    0x20,
    0x10,
    0x08,
    0x04,
    0x02,
    0x3e,
    0x51,
    0x49,
    0x45,
    0x3e,
    0x00,
    0x42,
    0x7f,
    0x40,
    0x00,
    0x72,
    0x49,
    0x49,
    0x49,
    0x46,
    0x21,
    0x41,
    0x49,
    0x4d,
    0x33,
    0x18,
    0x14,
    0x12,
    0x7f,
    0x10,
    0x27,
    0x45,
    0x45,
    0x45,
    0x39,
    0x3c,
    0x4a,
    0x49,
    0x49,
    0x31,
    0x41,
    0x21,
    0x11,
    0x09,
    0x07,
    0x36,
    0x49,
    0x49,
    0x49,
    0x36,
    0x46,
    0x49,
    0x49,
    0x29,
    0x1e,
    0x00,
    0x00,
    0x14,
    0x00,
    0x00,
    0x00,
    0x40,
    0x34,
    0x00,
    0x00,
    0x00,
    0x08,
    0x14,
    0x22,
    0x41,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x00,
    0x41,
    0x22,
    0x14,
    0x08,
    0x02,
    0x01,
    0x59,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x5d,
    0x59,
    0x4e,
    0x7c,
    0x12,
    0x11,
    0x12,
    0x7c,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x36,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x22,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x41,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x01,
    0x3e,
    0x41,
    0x41,
    0x51,
    0x73,
    0x7f,
    0x08,
    0x08,
    0x08,
    0x7f,
    0x00,
    0x41,
    0x7f,
    0x41,
    0x00,
    0x20,
    0x40,
    0x41,
    0x3f,
    0x01,
    0x7f,
    0x08,
    0x14,
    0x22,
    0x41,
    0x7f,
    0x40,
    0x40,
    0x40,
    0x40,
    0x7f,
    0x02,
    0x1c,
    0x02,
    0x7f,
    0x7f,
    0x04,
    0x08,
    0x10,
    0x7f,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x51,
    0x21,
    0x5e,
    0x7f,
    0x09,
    0x19,
    0x29,
    0x46,
    0x26,
    0x49,
    0x49,
    0x49,
    0x32,
    0x03,
    0x01,
    0x7f,
    0x01,
    0x03,
    0x3f,
    0x40,
    0x40,
    0x40,
    0x3f,
    0x1f,
    0x20,
    0x40,
    0x20,
    0x1f,
    0x3f,
    0x40,
    0x38,
    0x40,
    0x3f,
    0x63,
    0x14,
    0x08,
    0x14,
    0x63,
    0x03,
    0x04,
    0x78,
    0x04,
    0x03,
    0x61,
    0x59,
    0x49,
    0x4d,
    0x43,
    0x00,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x00,
    0x41,
    0x41,
    0x41,
    0x7f,
    0x04,
    0x02,
    0x01,
    0x02,
    0x04,
    0x40,
    0x40,
    0x40,
    0x40,
    0x40,
    0x00,
    0x03,
    0x07,
    0x08,
    0x00,
    0x20,
    0x54,
    0x54,
    0x78,
    0x40,
    0x7f,
    0x28,
    0x44,
    0x44,
    0x38,
    0x38,
    0x44,
    0x44,
    0x44,
    0x28,
    0x38,
    0x44,
    0x44,
    0x28,
    0x7f,
    0x38,
    0x54,
    0x54,
    0x54,
    0x18,
    0x00,
    0x08,
    0x7e,
    0x09,
    0x02,
    0x18,
    0xa4,
    0xa4,
    0x9c,
    0x78,
    0x7f,
    0x08,
    0x04,
    0x04,
    0x78,
    0x00,
    0x44,
    0x7d,
    0x40,
    0x00,
    0x20,
    0x40,
    0x40,
    0x3d,
    0x00,
    0x7f,
    0x10,
    0x28,
    0x44,
    0x00,
    0x00,
    0x41,
    0x7f,
    0x40,
    0x00,
    0x7c,
    0x04,
    0x78,
    0x04,
    0x78,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x78,
    0x38,
    0x44,
    0x44,
    0x44,
    0x38,
    0xfc,
    0x18,
    0x24,
    0x24,
    0x18,
    0x18,
    0x24,
    0x24,
    0x18,
    0xfc,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x08,
    0x48,
    0x54,
    0x54,
    0x54,
    0x24,
    0x04,
    0x04,
    0x3f,
    0x44,
    0x24,
    0x3c,
    0x40,
    0x40,
    0x20,
    0x7c,
    0x1c,
    0x20,
    0x40,
    0x20,
    0x1c,
    0x3c,
    0x40,
    0x30,
    0x40,
    0x3c,
    0x44,
    0x28,
    0x10,
    0x28,
    0x44,
    0x4c,
    0x90,
    0x90,
    0x90,
    0x7c,
    0x44,
    0x64,
    0x54,
    0x4c,
    0x44,
    0x00,
    0x08,
    0x36,
    0x41,
    0x00,
    0x00,
    0x00,
    0x77,
    0x00,
    0x00,
    0x00,
    0x41,
    0x36,
    0x08,
    0x00,
    0x02,
    0x01,
    0x02,
    0x04,
    0x02,
    0x3c,
    0x26,
    0x23,
    0x26,
    0x3c,
    0x1e,
    0xa1,
    0xa1,
    0x61,
    0x12,
    0x3a,
    0x40,
    0x40,
    0x20,
    0x7a,
    0x38,
    0x54,
    0x54,
    0x55,
    0x59,
    0x21,
    0x55,
    0x55,
    0x79,
    0x41,
    0x21,
    0x54,
    0x54,
    0x78,
    0x41,
    0x21,
    0x55,
    0x54,
    0x78,
    0x40,
    0x20,
    0x54,
    0x55,
    0x79,
    0x40,
    0x0c,
    0x1e,
    0x52,
    0x72,
    0x12,
    0x39,
    0x55,
    0x55,
    0x55,
    0x59,
    0x39,
    0x54,
    0x54,
    0x54,
    0x59,
    0x39,
    0x55,
    0x54,
    0x54,
    0x58,
    0x00,
    0x00,
    0x45,
    0x7c,
    0x41,
    0x00,
    0x02,
    0x45,
    0x7d,
    0x42,
    0x00,
    0x01,
    0x45,
    0x7c,
    0x40,
    0xf0,
    0x29,
    0x24,
    0x29,
    0xf0,
    0xf0,
    0x28,
    0x25,
    0x28,
    0xf0,
    0x7c,
    0x54,
    0x55,
    0x45,
    0x00,
    0x20,
    0x54,
    0x54,
    0x7c,
    0x54,
    0x7c,
    0x0a,
    0x09,
    0x7f,
    0x49,
    0x32,
    0x49,
    0x49,
    0x49,
    0x32,
    0x32,
    0x48,
    0x48,
    0x48,
    0x32,
    0x32,
    0x4a,
    0x48,
    0x48,
    0x30,
    0x3a,
    0x41,
    0x41,
    0x21,
    0x7a,
    0x3a,
    0x42,
    0x40,
    0x20,
    0x78,
    0x00,
    0x9d,
    0xa0,
    0xa0,
    0x7d,
    0x39,
    0x44,
    0x44,
    0x44,
    0x39,
    0x3d,
    0x40,
    0x40,
    0x40,
    0x3d,
    0x3c,
    0x24,
    0xff,
    0x24,
    0x24,
    0x48,
    0x7e,
    0x49,
    0x43,
    0x66,
    0x2b,
    0x2f,
    0xfc,
    0x2f,
    0x2b,
    0xff,
    0x09,
    0x29,
    0xf6,
    0x20,
    0xc0,
    0x88,
    0x7e,
    0x09,
    0x03,
    0x20,
    0x54,
    0x54,
    0x79,
    0x41,
    0x00,
    0x00,
    0x44,
    0x7d,
    0x41,
    0x30,
    0x48,
    0x48,
    0x4a,
    0x32,
    0x38,
    0x40,
    0x40,
    0x22,
    0x7a,
    0x00,
    0x7a,
    0x0a,
    0x0a,
    0x72,
    0x7d,
    0x0d,
    0x19,
    0x31,
    0x7d,
    0x26,
    0x29,
    0x29,
    0x2f,
    0x28,
    0x26,
    0x29,
    0x29,
    0x29,
    0x26,
    0x30,
    0x48,
    0x4d,
    0x40,
    0x20,
    0x38,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x38,
    0x2f,
    0x10,
    0xc8,
    0xac,
    0xba,
    0x2f,
    0x10,
    0x28,
    0x34,
    0xfa,
    0x00,
    0x00,
    0x7b,
    0x00,
    0x00,
    0x08,
    0x14,
    0x2a,
    0x14,
    0x22,
    0x22,
    0x14,
    0x2a,
    0x14,
    0x08,
    0xaa,
    0x00,
    0x55,
    0x00,
    0xaa,
    0xaa,
    0x55,
    0xaa,
    0x55,
    0xaa,
    0x00,
    0x00,
    0x00,
    0xff,
    0x00,
    0x10,
    0x10,
    0x10,
    0xff,
    0x00,
    0x14,
    0x14,
    0x14,
    0xff,
    0x00,
    0x10,
    0x10,
    0xff,
    0x00,
    0xff,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x14,
    0x14,
    0x14,
    0xfc,
    0x00,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xff,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xfc,
    0x14,
    0x14,
    0x17,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0x1f,
    0x00,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0xff,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x14,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x17,
    0x00,
    0x00,
    0xfc,
    0x04,
    0xf4,
    0x14,
    0x14,
    0x17,
    0x10,
    0x17,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xf4,
    0x00,
    0x00,
    0xff,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x17,
    0x14,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0xf4,
    0x14,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x14,
    0x00,
    0x00,
    0x00,
    0xfc,
    0x14,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xf0,
    0x10,
    0x10,
    0xff,
    0x10,
    0xff,
    0x14,
    0x14,
    0x14,
    0xff,
    0x14,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xff,
    0xff,
    0xff,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x38,
    0x44,
    0x44,
    0x38,
    0x44,
    0x7c,
    0x2a,
    0x2a,
    0x3e,
    0x14,
    0x7e,
    0x02,
    0x02,
    0x06,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x7e,
    0x02,
    0x63,
    0x55,
    0x49,
    0x41,
    0x63,
    0x38,
    0x44,
    0x44,
    0x3c,
    0x04,
    0x40,
    0x7e,
    0x20,
    0x1e,
    0x20,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x02,
    0x99,
    0xa5,
    0xe7,
    0xa5,
    0x99,
    0x1c,
    0x2a,
    0x49,
    0x2a,
    0x1c,
    0x4c,
    0x72,
    0x01,
    0x72,
    0x4c,
    0x30,
    0x4a,
    0x4d,
    0x4d,
    0x30,
    0x30,
    0x48,
    0x78,
    0x48,
    0x30,
    0xbc,
    0x62,
    0x5a,
    0x46,
    0x3d,
    0x3e,
    0x49,
    0x49,
    0x49,
    0x00,
    0x7e,
    0x01,
    0x01,
    0x01,
    0x7e,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x44,
    0x44,
    0x5f,
    0x44,
    0x44,
    0x40,
    0x51,
    0x4a,
    0x44,
    0x40,
    0x40,
    0x44,
    0x4a,
    0x51,
    0x40,
    0x00,
    0x00,
    0xff,
    0x01,
    0x03,
    0xe0,
    0x80,
    0xff,
    0x00,
    0x00,
    0x08,
    0x08,
    0x6b,
    0x6b,
    0x08,
    0x36,
    0x12,
    0x36,
    0x24,
    0x36,
    0x06,
    0x0f,
    0x09,
    0x0f,
    0x06,
    0x00,
    0x00,
    0x18,
    0x18,
    0x00,
    0x00,
    0x00,
    0x10,
    0x10,
    0x00,
    0x30,
    0x40,
    0xff,
    0x01,
    0x01,
    0x00,
    0x1f,
    0x01,
    0x01,
    0x1e,
    0x00,
    0x19,
    0x1d,
    0x17,
    0x12,
    0x00,
    0x3c,
    0x3c,
    0x3c,
    0x3c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
];


/***/ }),

/***/ "./dist/src/parts/Display/SainSmartTFT18LCD/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SainSmartTFT18LCD
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SainSmartTFT18LCD {
    constructor() {
        this.debugprint = false;
        this.width = 0;
        this.height = 0;
        this.writeBuffer = [];
        this.keys = ['vcc', 'gnd', 'scl', 'sda', 'dc', 'res', 'cs'];
        this.requiredKeys = ['scl', 'sda', 'dc', 'res', 'cs'];
        this.displayIoNames = {
            vcc: 'vcc',
            gnd: 'gnd',
            scl: 'scl',
            sda: 'sda',
            dc: 'dc',
            res: 'res',
            cs: 'cs',
        };
    }
    static info() {
        return {
            name: 'SainSmartTFT18LCD',
        };
    }
    wired(obniz) {
        this.debugprint = false;
        this.obniz = obniz;
        this.io_dc = obniz.getIO(this.params.dc);
        this.io_res = obniz.getIO(this.params.res);
        this.io_cs = obniz.getIO(this.params.cs);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.frequency = 16 * 1000 * 1000; // 16MHz
        this.params.mode = 'master';
        this.params.clk = this.params.scl;
        this.params.mosi = this.params.sda;
        this.params.drive = '3v';
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.width = ST7735_TFTWIDTH;
        this.height = ST7735_TFTHEIGHT;
        this.writeBuffer = []; // 1024bytes bufferring
        this._setPresetColor();
        this.init();
    }
    print_debug(v) {
        if (this.debugprint) {
            console.log(
            // eslint-disable-next-line prefer-rest-params
            'SainSmartTFT18LCD: ' + Array.prototype.slice.call(arguments).join(''));
        }
    }
    _deadSleep(waitMsec) {
        const startMsec = new Date();
        while (new Date() - startMsec < waitMsec)
            ;
    }
    _reset() {
        this.io_res.output(false);
        this._deadSleep(10);
        this.io_res.output(true);
        this._deadSleep(10);
    }
    writeCommand(cmd) {
        this.io_dc.output(false);
        this.io_cs.output(false);
        this.spi.write([cmd]);
        this.io_cs.output(true);
    }
    writeData(data) {
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    write(cmd, data) {
        if (data.length === 0) {
            return;
        }
        this.writeCommand(cmd);
        this.writeData(data);
    }
    async asyncwait() {
        return await this.spi.writeWait([0x00]);
    }
    _writeFlush() {
        while (this.writeBuffer.length > 0) {
            if (this.writeBuffer.length > 1024) {
                const data = this.writeBuffer.slice(0, 1024);
                this.writeData(data);
                this.writeBuffer.splice(0, 1024);
            }
            else {
                if (this.writeBuffer.length > 0) {
                    this.writeData(this.writeBuffer);
                }
                this.writeBuffer = [];
            }
        }
    }
    _writeBuffer(data) {
        if (data && data.length > 0) {
            this.writeBuffer = this.writeBuffer.concat(data);
        }
        else {
            this._writeFlush();
        }
    }
    color16(r, g, b) {
        //  1st byte  (r & 0xF8 | g >> 5)
        //  2nd byte  (g & 0xFC << 3 | b >> 3)
        return ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
    }
    _initG() {
        // initialize for Green Tab
        this.writeCommand(ST7735_SLPOUT); // Sleep out & booster on
        this.obniz.wait(120);
        this.write(ST7735_FRMCTR1, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR2, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR3, [0x01, 0x2c, 0x2d, 0x01, 0x2c, 0x2d]);
        this.write(ST7735_INVCTR, [0x07]);
        this.write(ST7735_PWCTR1, [0xa2, 0x02, 0x84]);
        this.write(ST7735_PWCTR2, [0xc5]);
        this.write(ST7735_PWCTR3, [0x0a, 0x00]);
        this.write(ST7735_PWCTR4, [0x8a, 0x2a]);
        this.write(ST7735_PWCTR5, [0x8a, 0xee]);
        this.write(ST7735_VMCTR1, [0x0e]);
        this.write(ST7735_GMCTRP1, [
            0x02,
            0x1c,
            0x07,
            0x12,
            0x37,
            0x32,
            0x29,
            0x2d,
            0x29,
            0x25,
            0x2b,
            0x39,
            0x00,
            0x01,
            0x03,
            0x10,
        ]);
        this.write(ST7735_GMCTRN1, [
            0x03,
            0x1d,
            0x07,
            0x06,
            0x2e,
            0x2c,
            0x29,
            0x2d,
            0x2e,
            0x2e,
            0x37,
            0x3f,
            0x00,
            0x00,
            0x02,
            0x10,
        ]);
        this.write(ST7735_COLMOD, [ST7735_16bit]); // color format: 16bit/pixel
    }
    init() {
        this._reset();
        this._initG();
        this.setDisplayOn();
        this.setRotation(0);
    }
    setDisplayOn() {
        this.writeCommand(ST7735_DISPON);
    }
    setDisplayOff() {
        this.writeCommand(ST7735_DISPOFF);
    }
    setDisplay(on) {
        if (on === true) {
            this.setDisplayOn();
        }
        else {
            this.setDisplayOff();
        }
    }
    setInversionOn() {
        this.writeCommand(ST7735_INVON);
    }
    setInversionOff() {
        this.writeCommand(ST7735_INVOFF);
    }
    setInversion(inversion) {
        if (inversion === true) {
            this.setInversionOn();
        }
        else {
            this.setInversionOff();
        }
    }
    setRotation(m) {
        const MADCTL_MY = 0x80;
        const MADCTL_MX = 0x40;
        const MADCTL_MV = 0x20;
        // const MADCTL_ML = 0x10;
        const MADCTL_RGB = 0x00; // always RGB, never BGR
        // const MADCTL_MH = 0x04;
        let data;
        const rotation = m % 4; // can't be higher than 3
        switch (rotation) {
            case 0:
                data = [MADCTL_MX | MADCTL_MY | MADCTL_RGB];
                this.width = ST7735_TFTWIDTH;
                this.height = ST7735_TFTHEIGHT;
                break;
            case 1:
                data = [MADCTL_MY | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735_TFTHEIGHT;
                this.height = ST7735_TFTWIDTH;
                break;
            case 2:
                data = [MADCTL_RGB];
                this.width = ST7735_TFTWIDTH;
                this.height = ST7735_TFTHEIGHT;
                break;
            case 3:
                data = [MADCTL_MX | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735_TFTHEIGHT;
                this.height = ST7735_TFTWIDTH;
                break;
        }
        this.write(ST7735_MADCTL, data);
        this.setAddrWindow(0, 0, this.width - 1, this.height - 1);
    }
    setAddrWindow(x0, y0, x1, y1) {
        this.print_debug(`setAddrWindow: (x0: ${x0}, y0: ${y0}) - (x1: ${x1}, y1: ${y1})`);
        if (x0 < 0) {
            x0 = 0;
        }
        if (y0 < 0) {
            y0 = 0;
        }
        if (x1 < 0) {
            x1 = 0;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        // column addr set
        this.write(ST7735_CASET, [0x00, x0, 0x00, x1]); // XSTART-XEND
        // row addr set
        this.write(ST7735_RASET, [0x00, y0, 0x00, y1]); // YSTART-YEND
        // write to RAM
        this.writeCommand(ST7735_RAMWR);
        this.writeBuffer = [];
    }
    // __swap(a, b) { let t = a; a = b; b = t; }
    fillScreen(color) {
        this.fillRect(0, 0, this.width, this.height, color);
    }
    fillRect(x, y, width, height, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + width - 1 >= this.width) {
            width = this.width - x;
        }
        if (y + height - 1 >= this.height) {
            height = this.height - y;
        }
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        for (y = height; y > 0; y--) {
            for (x = width; x > 0; x--) {
                data.push(hi);
                data.push(lo);
            }
        }
        this._writeBuffer(data);
        this._writeBuffer(); // for flush
    }
    drawRect(x, y, width, height, color) {
        this.drawHLine(x, y, width, color);
        this.drawHLine(x, y + height - 1, width, color);
        this.drawVLine(x, y, height, color);
        this.drawVLine(x + width - 1, y, height, color);
    }
    drawCircle(center_x, center_y, radius, color) {
        let f = 1 - radius;
        let ddF_x = 1;
        let ddF_y = -2 * radius;
        let x = 0;
        let y = radius;
        this.drawPixel(center_x, center_y + radius, color);
        this.drawPixel(center_x, center_y - radius, color);
        this.drawPixel(center_x + radius, center_y, color);
        this.drawPixel(center_x - radius, center_y, color);
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            this.drawPixel(center_x + x, center_y + y, color);
            this.drawPixel(center_x - x, center_y + y, color);
            this.drawPixel(center_x + x, center_y - y, color);
            this.drawPixel(center_x - x, center_y - y, color);
            this.drawPixel(center_x + y, center_y + x, color);
            this.drawPixel(center_x - y, center_y + x, color);
            this.drawPixel(center_x + y, center_y - x, color);
            this.drawPixel(center_x - y, center_y - x, color);
        }
    }
    fillCircle(center_x, center_y, radius, color) {
        this.drawVLine(center_x, center_y - radius, 2 * radius + 1, color);
        this._fillCircleHelper(center_x, center_y, radius, 3, 0, color);
    }
    drawRoundRect(x, y, width, height, round, color) {
        this.drawHLine(x + round, y, width - 2 * round, color); // Top
        this.drawHLine(x + round, y + height - 1, width - 2 * round, color); // Bottom
        this.drawVLine(x, y + round, height - 2 * round, color); // Left
        this.drawVLine(x + width - 1, y + round, height - 2 * round, color); // Right
        this._drawCircleHelper(x + round, y + round, round, 1, color);
        this._drawCircleHelper(x + width - round - 1, y + round, round, 2, color);
        this._drawCircleHelper(x + width - round - 1, y + height - round - 1, round, 4, color);
        this._drawCircleHelper(x + round, y + height - round - 1, round, 8, color);
    }
    fillRoundRect(x, y, width, height, round, color) {
        this.fillRect(x + round, y, width - 2 * round, height, color);
        this._fillCircleHelper(x + width - round - 1, y + round, round, 1, height - 2 * round - 1, color);
        this._fillCircleHelper(x + round, y + round, round, 2, height - 2 * round - 1, color);
    }
    drawTriangle(x0, y0, x1, y1, x2, y2, color) {
        this.drawLine(x0, y0, x1, y1, color);
        this.drawLine(x1, y1, x2, y2, color);
        this.drawLine(x2, y2, x0, y0, color);
    }
    fillTriangle(x0, y0, x1, y1, x2, y2, color) {
        let a = 0;
        let b = 0;
        let y = 0;
        let last = 0;
        // Sort coordinates by Y order (y2 >= y1 >= y0)
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y1 > y2) {
            y2 = [y1, (y1 = y2)][0]; // this._swap(y2, y1);
            x2 = [x1, (x1 = x2)][0]; // this._swap(x2, x1);
        }
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y0 === y2) {
            // Handle awkward all-on-same-line case as its own thing
            a = b = x0;
            if (x1 < a) {
                a = x1;
            }
            else if (x1 > b) {
                b = x1;
            }
            if (x2 < a) {
                a = x2;
            }
            else if (x2 > b) {
                b = x2;
            }
            this.drawHLine(a, y0, b - a + 1, color);
            return;
        }
        const dx01 = x1 - x0;
        const dy01 = y1 - y0;
        const dx02 = x2 - x0;
        const dy02 = y2 - y0;
        const dx12 = x2 - x1;
        const dy12 = y2 - y1;
        let sa = 0;
        let sb = 0;
        if (y1 === y2) {
            last = y1;
        }
        else {
            last = y1 - 1;
        } // skip it
        for (y = y0; y <= last; y++) {
            a = x0 + Math.floor(sa / dy01);
            b = x0 + Math.floor(sb / dy02);
            sa += dx01;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
        sa = dx12 * (y - y1);
        sb = dx02 * (y - y0);
        for (; y <= y2; y++) {
            a = x1 + Math.floor(sa / dy12);
            b = x0 + Math.floor(sb / dy02);
            sa += dx12;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
    }
    drawVLine(x, y, height, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (y + height - 1 >= this.height) {
            height = this.height - y;
        }
        this.setAddrWindow(x, y, x, y + height - 1);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        while (height--) {
            data.push(hi);
            data.push(lo);
        }
        this.writeData(data);
    }
    drawHLine(x, y, width, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + width - 1 >= this.width) {
            width = this.width - x;
        }
        this.setAddrWindow(x, y, x + width - 1, y);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        while (width--) {
            data.push(hi);
            data.push(lo);
        }
        this.writeData(data);
    }
    drawLine(x0, y0, x1, y1, color) {
        const step = Math.abs(y1 - y0) > Math.abs(x1 - x0);
        if (step) {
            y0 = [x0, (x0 = y0)][0]; // this._swap(x0, y0);
            y1 = [x1, (x1 = y1)][0]; // this._swap(x1, y1);
        }
        if (x0 > x1) {
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
        }
        const dx = x1 - x0;
        const dy = Math.abs(y1 - y0);
        let err = dx / 2;
        const ystep = y0 < y1 ? 1 : -1;
        for (; x0 <= x1; x0++) {
            if (step) {
                this.drawPixel(y0, x0, color);
            }
            else {
                this.drawPixel(x0, y0, color);
            }
            err -= dy;
            if (err < 0) {
                y0 += ystep;
                err += dx;
            }
        }
    }
    drawPixel(x, y, color) {
        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
            return;
        }
        this.setAddrWindow(x, y, x + 1, y + 1);
        this.writeData([color >> 8, color & 0xff]);
    }
    drawChar(x, y, char, color, backgroundColor, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0) {
            // Clip top
            return;
        }
        if (color !== backgroundColor) {
            this.drawChar2(x, y, char, color, backgroundColor, size);
            return;
        }
        const c = char.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                if (line & 0x1) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, color);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, color);
                    }
                }
                else if (backgroundColor !== color) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, backgroundColor);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, backgroundColor);
                    }
                }
                line >>= 1;
            }
        }
    }
    drawString(x, y, string, color, backgroundColor, size, wrap) {
        //  bg = bg || color;
        size = size || 1;
        //  wrap = wrap || true;
        for (let n = 0; n < string.length; n++) {
            const c = string.charAt(n);
            if (c === '\n') {
                y += size * 8;
                x = 0;
            }
            else if (c === '\r') {
                // skip em
            }
            else {
                this.drawChar(x, y, c, color, backgroundColor, size);
                x += size * 6;
                if (wrap && x > this.width - size * 6) {
                    y += size * 8;
                    x = 0;
                }
            }
        }
        return [x, y];
    }
    drawContextBound(context, x0, y0, width, height, x1, y1, gray) {
        x0 = x0 || 0;
        y0 = y0 || 0;
        width = width || context.canvas.clientWidth;
        height = height || context.canvas.clientHeight;
        x1 = x1 || 0;
        y1 = y1 || 0;
        gray = gray || false;
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        const imageData = context.getImageData(x0, y0, width, height).data;
        const rgb = [];
        for (let n = 0; n < imageData.length; n += 4) {
            const r = imageData[n + 0];
            const g = imageData[n + 1];
            const b = imageData[n + 2];
            if (!gray) {
                rgb.push(r);
                rgb.push(g);
                rgb.push(b);
            }
            else {
                const gs = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
                rgb.push(gs);
                rgb.push(gs);
                rgb.push(gs);
            }
        }
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x1, y1, x1 + width - 1, y1 + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    drawContext(context, gray) {
        gray = gray || false;
        this.drawContextBound(context, 0, 0, this.width, this.height, 0, 0, gray);
    }
    rawBound(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push((v & 0xff0000) >> 16);
            rgb.push((v & 0xff00) >> 8);
            rgb.push(v & 0xff);
        });
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    raw(pixels) {
        this.rawBound(0, 0, this.width, this.height, pixels);
    }
    _setPresetColor() {
        this.color = {
            AliceBlue: 0xf7df,
            AntiqueWhite: 0xff5a,
            Aqua: 0x07ff,
            Aquamarine: 0x7ffa,
            Azure: 0xf7ff,
            Beige: 0xf7bb,
            Bisque: 0xff38,
            Black: 0x0000,
            BlanchedAlmond: 0xff59,
            Blue: 0x001f,
            BlueViolet: 0x895c,
            Brown: 0xa145,
            BurlyWood: 0xddd0,
            CadetBlue: 0x5cf4,
            Chartreuse: 0x7fe0,
            Chocolate: 0xd343,
            Coral: 0xfbea,
            CornflowerBlue: 0x64bd,
            Cornsilk: 0xffdb,
            Crimson: 0xd8a7,
            Cyan: 0x07ff,
            DarkBlue: 0x0011,
            DarkCyan: 0x0451,
            DarkGoldenRod: 0xbc21,
            DarkGray: 0xad55,
            DarkGreen: 0x0320,
            DarkKhaki: 0xbdad,
            DarkMagenta: 0x8811,
            DarkOliveGreen: 0x5345,
            DarkOrange: 0xfc60,
            DarkOrchid: 0x9999,
            DarkRed: 0x8800,
            DarkSalmon: 0xecaf,
            DarkSeaGreen: 0x8df1,
            DarkSlateBlue: 0x49f1,
            DarkSlateGray: 0x2a69,
            DarkTurquoise: 0x067a,
            DarkViolet: 0x901a,
            DeepPink: 0xf8b2,
            DeepSkyBlue: 0x05ff,
            DimGray: 0x6b4d,
            DodgerBlue: 0x1c9f,
            FireBrick: 0xb104,
            FloralWhite: 0xffde,
            ForestGreen: 0x2444,
            Fuchsia: 0xf81f,
            Gainsboro: 0xdefb,
            GhostWhite: 0xffdf,
            Gold: 0xfea0,
            GoldenRod: 0xdd24,
            Gray: 0x8410,
            Green: 0x0400,
            GreenYellow: 0xafe5,
            HoneyDew: 0xf7fe,
            HotPink: 0xfb56,
            IndianRed: 0xcaeb,
            Indigo: 0x4810,
            Ivory: 0xfffe,
            Khaki: 0xf731,
            Lavender: 0xe73f,
            LavenderBlush: 0xff9e,
            LawnGreen: 0x7fe0,
            LemonChiffon: 0xffd9,
            LightBlue: 0xaedc,
            LightCoral: 0xf410,
            LightCyan: 0xe7ff,
            LightGoldenRodYellow: 0xffda,
            LightGray: 0xd69a,
            LightGreen: 0x9772,
            LightPink: 0xfdb8,
            LightSalmon: 0xfd0f,
            LightSeaGreen: 0x2595,
            LightSkyBlue: 0x867f,
            LightSlateGray: 0x7453,
            LightSteelBlue: 0xb63b,
            LightYellow: 0xfffc,
            Lime: 0x07e0,
            LimeGreen: 0x3666,
            Linen: 0xff9c,
            Magenta: 0xf81f,
            Maroon: 0x8000,
            MediumAquaMarine: 0x6675,
            MediumBlue: 0x0019,
            MediumOrchid: 0xbaba,
            MediumPurple: 0x939b,
            MediumSeaGreen: 0x3d8e,
            MediumSlateBlue: 0x7b5d,
            MediumSpringGreen: 0x07d3,
            MediumTurquoise: 0x4e99,
            MediumVioletRed: 0xc0b0,
            MidnightBlue: 0x18ce,
            MintCream: 0xf7ff,
            MistyRose: 0xff3c,
            Moccasin: 0xff36,
            NavajoWhite: 0xfef5,
            Navy: 0x0010,
            OldLace: 0xffbc,
            Olive: 0x8400,
            OliveDrab: 0x6c64,
            Orange: 0xfd20,
            OrangeRed: 0xfa20,
            Orchid: 0xdb9a,
            PaleGoldenRod: 0xef55,
            PaleGreen: 0x9fd3,
            PaleTurquoise: 0xaf7d,
            PaleVioletRed: 0xdb92,
            PapayaWhip: 0xff7a,
            PeachPuff: 0xfed7,
            Peru: 0xcc27,
            Pink: 0xfe19,
            Plum: 0xdd1b,
            PowderBlue: 0xb71c,
            Purple: 0x8010,
            RebeccaPurple: 0x6193,
            Red: 0xf800,
            RosyBrown: 0xbc71,
            RoyalBlue: 0x435c,
            SaddleBrown: 0x8a22,
            Salmon: 0xfc0e,
            SandyBrown: 0xf52c,
            SeaGreen: 0x2c4a,
            SeaShell: 0xffbd,
            Sienna: 0xa285,
            Silver: 0xc618,
            SkyBlue: 0x867d,
            SlateBlue: 0x6ad9,
            SlateGray: 0x7412,
            Snow: 0xffdf,
            SpringGreen: 0x07ef,
            SteelBlue: 0x4416,
            Tan: 0xd5b1,
            Teal: 0x0410,
            Thistle: 0xddfb,
            Tomato: 0xfb08,
            Turquoise: 0x471a,
            Violet: 0xec1d,
            Wheat: 0xf6f6,
            White: 0xffff,
            WhiteSmoke: 0xf7be,
            Yellow: 0xffe0,
            YellowGreen: 0x9e66,
        };
    }
    _drawCircleHelper(x0, y0, r, cornername, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x4) {
                this.drawPixel(x0 + x, y0 + y, color);
                this.drawPixel(x0 + y, y0 + x, color);
            }
            if (cornername & 0x2) {
                this.drawPixel(x0 + x, y0 - y, color);
                this.drawPixel(x0 + y, y0 - x, color);
            }
            if (cornername & 0x8) {
                this.drawPixel(x0 - y, y0 + x, color);
                this.drawPixel(x0 - x, y0 + y, color);
            }
            if (cornername & 0x1) {
                this.drawPixel(x0 - y, y0 - x, color);
                this.drawPixel(x0 - x, y0 - y, color);
            }
        }
    }
    _fillCircleHelper(x0, y0, r, cornername, delta, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x1) {
                this.drawVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
            }
            if (cornername & 0x2) {
                this.drawVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
            }
        }
    }
    drawChar2(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0 // Clip top
        ) {
            return;
        }
        const pixels = new Array(6 * 8 * size * size);
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                const cl = line & 0x1 ? color : bg;
                for (let w = 0; w < size; w++) {
                    for (let h = 0; h < size; h++) {
                        pixels[i * (1 * size) + w + (j * (6 * size * size) + h * (6 * size))] = cl;
                    }
                }
                line >>= 1;
            }
        }
        this.rawBound16(x, y, 6 * size, 8 * size, pixels);
    }
    rawBound16(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push((v & 0xff00) >> 8);
            rgb.push(v & 0xff);
        });
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
    }
}
exports.default = SainSmartTFT18LCD;
// ----------------------------------------------------------
// commands
// const INITR_GREENTAB = 0x0;
// const INITR_REDTAB = 0x1;
// const INITR_BLACKTAB = 0x2;
const ST7735_TFTWIDTH = 128;
const ST7735_TFTHEIGHT = 160;
// const ST7735_NOP = 0x00;
// const ST7735_SWRESET = 0x01;
// const ST7735_RDDID = 0x04;
// const ST7735_RDDST = 0x09;
// const ST7735_RDDPM = 0x0a;
// const ST7735_SLPIN = 0x10;
const ST7735_SLPOUT = 0x11;
// const ST7735_PTLON = 0x12;
// const ST7735_NORON = 0x13;
const ST7735_INVOFF = 0x20;
const ST7735_INVON = 0x21;
const ST7735_DISPOFF = 0x28;
const ST7735_DISPON = 0x29;
const ST7735_CASET = 0x2a;
const ST7735_RASET = 0x2b;
const ST7735_RAMWR = 0x2c;
// const ST7735_RAMRD = 0x2e;
// const ST7735_PTLAR = 0x30;
const ST7735_COLMOD = 0x3a;
const ST7735_MADCTL = 0x36;
const ST7735_FRMCTR1 = 0xb1;
const ST7735_FRMCTR2 = 0xb2;
const ST7735_FRMCTR3 = 0xb3;
const ST7735_INVCTR = 0xb4;
// const ST7735_DISSET5 = 0xb6;
const ST7735_PWCTR1 = 0xc0;
const ST7735_PWCTR2 = 0xc1;
const ST7735_PWCTR3 = 0xc2;
const ST7735_PWCTR4 = 0xc3;
const ST7735_PWCTR5 = 0xc4;
const ST7735_VMCTR1 = 0xc5;
// const ST7735_RDID1 = 0xda;
// const ST7735_RDID2 = 0xdb;
// const ST7735_RDID3 = 0xdc;
// const ST7735_RDID4 = 0xdd;
// const ST7735_PWCTR6 = 0xfc;
const ST7735_GMCTRP1 = 0xe0;
const ST7735_GMCTRN1 = 0xe1;
// Color definitions
// const ST7735_BLACK = 0x0000;
// const ST7735_BLUE = 0x001f;
// const ST7735_RED = 0xf800;
// const ST7735_GREEN = 0x07e0;
// const ST7735_CYAN = 0x07ff;
// const ST7735_MAGENTA = 0xf81f;
// const ST7735_YELLOW = 0xffe0;
// const ST7735_WHITE = 0xffff;
const ST7735_18bit = 0x06; // 18bit/pixel
const ST7735_16bit = 0x05; // 16bit/pixel
// standard ascii 5x7 font
const font = [
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3e,
    0x5b,
    0x4f,
    0x5b,
    0x3e,
    0x3e,
    0x6b,
    0x4f,
    0x6b,
    0x3e,
    0x1c,
    0x3e,
    0x7c,
    0x3e,
    0x1c,
    0x18,
    0x3c,
    0x7e,
    0x3c,
    0x18,
    0x1c,
    0x57,
    0x7d,
    0x57,
    0x1c,
    0x1c,
    0x5e,
    0x7f,
    0x5e,
    0x1c,
    0x00,
    0x18,
    0x3c,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xc3,
    0xe7,
    0xff,
    0x00,
    0x18,
    0x24,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xdb,
    0xe7,
    0xff,
    0x30,
    0x48,
    0x3a,
    0x06,
    0x0e,
    0x26,
    0x29,
    0x79,
    0x29,
    0x26,
    0x40,
    0x7f,
    0x05,
    0x05,
    0x07,
    0x40,
    0x7f,
    0x05,
    0x25,
    0x3f,
    0x5a,
    0x3c,
    0xe7,
    0x3c,
    0x5a,
    0x7f,
    0x3e,
    0x1c,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x1c,
    0x3e,
    0x7f,
    0x14,
    0x22,
    0x7f,
    0x22,
    0x14,
    0x5f,
    0x5f,
    0x00,
    0x5f,
    0x5f,
    0x06,
    0x09,
    0x7f,
    0x01,
    0x7f,
    0x00,
    0x66,
    0x89,
    0x95,
    0x6a,
    0x60,
    0x60,
    0x60,
    0x60,
    0x60,
    0x94,
    0xa2,
    0xff,
    0xa2,
    0x94,
    0x08,
    0x04,
    0x7e,
    0x04,
    0x08,
    0x10,
    0x20,
    0x7e,
    0x20,
    0x10,
    0x08,
    0x08,
    0x2a,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x1e,
    0x10,
    0x10,
    0x10,
    0x10,
    0x0c,
    0x1e,
    0x0c,
    0x1e,
    0x0c,
    0x30,
    0x38,
    0x3e,
    0x38,
    0x30,
    0x06,
    0x0e,
    0x3e,
    0x0e,
    0x06,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x5f,
    0x00,
    0x00,
    0x00,
    0x07,
    0x00,
    0x07,
    0x00,
    0x14,
    0x7f,
    0x14,
    0x7f,
    0x14,
    0x24,
    0x2a,
    0x7f,
    0x2a,
    0x12,
    0x23,
    0x13,
    0x08,
    0x64,
    0x62,
    0x36,
    0x49,
    0x56,
    0x20,
    0x50,
    0x00,
    0x08,
    0x07,
    0x03,
    0x00,
    0x00,
    0x1c,
    0x22,
    0x41,
    0x00,
    0x00,
    0x41,
    0x22,
    0x1c,
    0x00,
    0x2a,
    0x1c,
    0x7f,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x3e,
    0x08,
    0x08,
    0x00,
    0x80,
    0x70,
    0x30,
    0x00,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x00,
    0x00,
    0x60,
    0x60,
    0x00,
    0x20,
    0x10,
    0x08,
    0x04,
    0x02,
    0x3e,
    0x51,
    0x49,
    0x45,
    0x3e,
    0x00,
    0x42,
    0x7f,
    0x40,
    0x00,
    0x72,
    0x49,
    0x49,
    0x49,
    0x46,
    0x21,
    0x41,
    0x49,
    0x4d,
    0x33,
    0x18,
    0x14,
    0x12,
    0x7f,
    0x10,
    0x27,
    0x45,
    0x45,
    0x45,
    0x39,
    0x3c,
    0x4a,
    0x49,
    0x49,
    0x31,
    0x41,
    0x21,
    0x11,
    0x09,
    0x07,
    0x36,
    0x49,
    0x49,
    0x49,
    0x36,
    0x46,
    0x49,
    0x49,
    0x29,
    0x1e,
    0x00,
    0x00,
    0x14,
    0x00,
    0x00,
    0x00,
    0x40,
    0x34,
    0x00,
    0x00,
    0x00,
    0x08,
    0x14,
    0x22,
    0x41,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x00,
    0x41,
    0x22,
    0x14,
    0x08,
    0x02,
    0x01,
    0x59,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x5d,
    0x59,
    0x4e,
    0x7c,
    0x12,
    0x11,
    0x12,
    0x7c,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x36,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x22,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x41,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x01,
    0x3e,
    0x41,
    0x41,
    0x51,
    0x73,
    0x7f,
    0x08,
    0x08,
    0x08,
    0x7f,
    0x00,
    0x41,
    0x7f,
    0x41,
    0x00,
    0x20,
    0x40,
    0x41,
    0x3f,
    0x01,
    0x7f,
    0x08,
    0x14,
    0x22,
    0x41,
    0x7f,
    0x40,
    0x40,
    0x40,
    0x40,
    0x7f,
    0x02,
    0x1c,
    0x02,
    0x7f,
    0x7f,
    0x04,
    0x08,
    0x10,
    0x7f,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x51,
    0x21,
    0x5e,
    0x7f,
    0x09,
    0x19,
    0x29,
    0x46,
    0x26,
    0x49,
    0x49,
    0x49,
    0x32,
    0x03,
    0x01,
    0x7f,
    0x01,
    0x03,
    0x3f,
    0x40,
    0x40,
    0x40,
    0x3f,
    0x1f,
    0x20,
    0x40,
    0x20,
    0x1f,
    0x3f,
    0x40,
    0x38,
    0x40,
    0x3f,
    0x63,
    0x14,
    0x08,
    0x14,
    0x63,
    0x03,
    0x04,
    0x78,
    0x04,
    0x03,
    0x61,
    0x59,
    0x49,
    0x4d,
    0x43,
    0x00,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x00,
    0x41,
    0x41,
    0x41,
    0x7f,
    0x04,
    0x02,
    0x01,
    0x02,
    0x04,
    0x40,
    0x40,
    0x40,
    0x40,
    0x40,
    0x00,
    0x03,
    0x07,
    0x08,
    0x00,
    0x20,
    0x54,
    0x54,
    0x78,
    0x40,
    0x7f,
    0x28,
    0x44,
    0x44,
    0x38,
    0x38,
    0x44,
    0x44,
    0x44,
    0x28,
    0x38,
    0x44,
    0x44,
    0x28,
    0x7f,
    0x38,
    0x54,
    0x54,
    0x54,
    0x18,
    0x00,
    0x08,
    0x7e,
    0x09,
    0x02,
    0x18,
    0xa4,
    0xa4,
    0x9c,
    0x78,
    0x7f,
    0x08,
    0x04,
    0x04,
    0x78,
    0x00,
    0x44,
    0x7d,
    0x40,
    0x00,
    0x20,
    0x40,
    0x40,
    0x3d,
    0x00,
    0x7f,
    0x10,
    0x28,
    0x44,
    0x00,
    0x00,
    0x41,
    0x7f,
    0x40,
    0x00,
    0x7c,
    0x04,
    0x78,
    0x04,
    0x78,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x78,
    0x38,
    0x44,
    0x44,
    0x44,
    0x38,
    0xfc,
    0x18,
    0x24,
    0x24,
    0x18,
    0x18,
    0x24,
    0x24,
    0x18,
    0xfc,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x08,
    0x48,
    0x54,
    0x54,
    0x54,
    0x24,
    0x04,
    0x04,
    0x3f,
    0x44,
    0x24,
    0x3c,
    0x40,
    0x40,
    0x20,
    0x7c,
    0x1c,
    0x20,
    0x40,
    0x20,
    0x1c,
    0x3c,
    0x40,
    0x30,
    0x40,
    0x3c,
    0x44,
    0x28,
    0x10,
    0x28,
    0x44,
    0x4c,
    0x90,
    0x90,
    0x90,
    0x7c,
    0x44,
    0x64,
    0x54,
    0x4c,
    0x44,
    0x00,
    0x08,
    0x36,
    0x41,
    0x00,
    0x00,
    0x00,
    0x77,
    0x00,
    0x00,
    0x00,
    0x41,
    0x36,
    0x08,
    0x00,
    0x02,
    0x01,
    0x02,
    0x04,
    0x02,
    0x3c,
    0x26,
    0x23,
    0x26,
    0x3c,
    0x1e,
    0xa1,
    0xa1,
    0x61,
    0x12,
    0x3a,
    0x40,
    0x40,
    0x20,
    0x7a,
    0x38,
    0x54,
    0x54,
    0x55,
    0x59,
    0x21,
    0x55,
    0x55,
    0x79,
    0x41,
    0x21,
    0x54,
    0x54,
    0x78,
    0x41,
    0x21,
    0x55,
    0x54,
    0x78,
    0x40,
    0x20,
    0x54,
    0x55,
    0x79,
    0x40,
    0x0c,
    0x1e,
    0x52,
    0x72,
    0x12,
    0x39,
    0x55,
    0x55,
    0x55,
    0x59,
    0x39,
    0x54,
    0x54,
    0x54,
    0x59,
    0x39,
    0x55,
    0x54,
    0x54,
    0x58,
    0x00,
    0x00,
    0x45,
    0x7c,
    0x41,
    0x00,
    0x02,
    0x45,
    0x7d,
    0x42,
    0x00,
    0x01,
    0x45,
    0x7c,
    0x40,
    0xf0,
    0x29,
    0x24,
    0x29,
    0xf0,
    0xf0,
    0x28,
    0x25,
    0x28,
    0xf0,
    0x7c,
    0x54,
    0x55,
    0x45,
    0x00,
    0x20,
    0x54,
    0x54,
    0x7c,
    0x54,
    0x7c,
    0x0a,
    0x09,
    0x7f,
    0x49,
    0x32,
    0x49,
    0x49,
    0x49,
    0x32,
    0x32,
    0x48,
    0x48,
    0x48,
    0x32,
    0x32,
    0x4a,
    0x48,
    0x48,
    0x30,
    0x3a,
    0x41,
    0x41,
    0x21,
    0x7a,
    0x3a,
    0x42,
    0x40,
    0x20,
    0x78,
    0x00,
    0x9d,
    0xa0,
    0xa0,
    0x7d,
    0x39,
    0x44,
    0x44,
    0x44,
    0x39,
    0x3d,
    0x40,
    0x40,
    0x40,
    0x3d,
    0x3c,
    0x24,
    0xff,
    0x24,
    0x24,
    0x48,
    0x7e,
    0x49,
    0x43,
    0x66,
    0x2b,
    0x2f,
    0xfc,
    0x2f,
    0x2b,
    0xff,
    0x09,
    0x29,
    0xf6,
    0x20,
    0xc0,
    0x88,
    0x7e,
    0x09,
    0x03,
    0x20,
    0x54,
    0x54,
    0x79,
    0x41,
    0x00,
    0x00,
    0x44,
    0x7d,
    0x41,
    0x30,
    0x48,
    0x48,
    0x4a,
    0x32,
    0x38,
    0x40,
    0x40,
    0x22,
    0x7a,
    0x00,
    0x7a,
    0x0a,
    0x0a,
    0x72,
    0x7d,
    0x0d,
    0x19,
    0x31,
    0x7d,
    0x26,
    0x29,
    0x29,
    0x2f,
    0x28,
    0x26,
    0x29,
    0x29,
    0x29,
    0x26,
    0x30,
    0x48,
    0x4d,
    0x40,
    0x20,
    0x38,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x38,
    0x2f,
    0x10,
    0xc8,
    0xac,
    0xba,
    0x2f,
    0x10,
    0x28,
    0x34,
    0xfa,
    0x00,
    0x00,
    0x7b,
    0x00,
    0x00,
    0x08,
    0x14,
    0x2a,
    0x14,
    0x22,
    0x22,
    0x14,
    0x2a,
    0x14,
    0x08,
    0xaa,
    0x00,
    0x55,
    0x00,
    0xaa,
    0xaa,
    0x55,
    0xaa,
    0x55,
    0xaa,
    0x00,
    0x00,
    0x00,
    0xff,
    0x00,
    0x10,
    0x10,
    0x10,
    0xff,
    0x00,
    0x14,
    0x14,
    0x14,
    0xff,
    0x00,
    0x10,
    0x10,
    0xff,
    0x00,
    0xff,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x14,
    0x14,
    0x14,
    0xfc,
    0x00,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xff,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xfc,
    0x14,
    0x14,
    0x17,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0x1f,
    0x00,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0xff,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x14,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x17,
    0x00,
    0x00,
    0xfc,
    0x04,
    0xf4,
    0x14,
    0x14,
    0x17,
    0x10,
    0x17,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xf4,
    0x00,
    0x00,
    0xff,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x17,
    0x14,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0xf4,
    0x14,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x14,
    0x00,
    0x00,
    0x00,
    0xfc,
    0x14,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xf0,
    0x10,
    0x10,
    0xff,
    0x10,
    0xff,
    0x14,
    0x14,
    0x14,
    0xff,
    0x14,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xff,
    0xff,
    0xff,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x38,
    0x44,
    0x44,
    0x38,
    0x44,
    0x7c,
    0x2a,
    0x2a,
    0x3e,
    0x14,
    0x7e,
    0x02,
    0x02,
    0x06,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x7e,
    0x02,
    0x63,
    0x55,
    0x49,
    0x41,
    0x63,
    0x38,
    0x44,
    0x44,
    0x3c,
    0x04,
    0x40,
    0x7e,
    0x20,
    0x1e,
    0x20,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x02,
    0x99,
    0xa5,
    0xe7,
    0xa5,
    0x99,
    0x1c,
    0x2a,
    0x49,
    0x2a,
    0x1c,
    0x4c,
    0x72,
    0x01,
    0x72,
    0x4c,
    0x30,
    0x4a,
    0x4d,
    0x4d,
    0x30,
    0x30,
    0x48,
    0x78,
    0x48,
    0x30,
    0xbc,
    0x62,
    0x5a,
    0x46,
    0x3d,
    0x3e,
    0x49,
    0x49,
    0x49,
    0x00,
    0x7e,
    0x01,
    0x01,
    0x01,
    0x7e,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x44,
    0x44,
    0x5f,
    0x44,
    0x44,
    0x40,
    0x51,
    0x4a,
    0x44,
    0x40,
    0x40,
    0x44,
    0x4a,
    0x51,
    0x40,
    0x00,
    0x00,
    0xff,
    0x01,
    0x03,
    0xe0,
    0x80,
    0xff,
    0x00,
    0x00,
    0x08,
    0x08,
    0x6b,
    0x6b,
    0x08,
    0x36,
    0x12,
    0x36,
    0x24,
    0x36,
    0x06,
    0x0f,
    0x09,
    0x0f,
    0x06,
    0x00,
    0x00,
    0x18,
    0x18,
    0x00,
    0x00,
    0x00,
    0x10,
    0x10,
    0x00,
    0x30,
    0x40,
    0xff,
    0x01,
    0x01,
    0x00,
    0x1f,
    0x01,
    0x01,
    0x1e,
    0x00,
    0x19,
    0x1d,
    0x17,
    0x12,
    0x00,
    0x3c,
    0x3c,
    0x3c,
    0x3c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
];


/***/ }),

/***/ "./dist/src/parts/Display/SharpMemoryTFT/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SharpMemoryTFT
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SharpMemoryTFT {
    constructor() {
        this.commands = {
            write: 0x80,
            clear: 0x20,
            vcom: 0x40,
        };
        this.width = 0;
        this.height = 0;
        this._pos = { x: 0, y: 0 };
        this.autoFlush = false;
        this.fontSize = 0;
        this.keys = [
            'vcc',
            'gnd',
            'vcc_a',
            'gnd_a',
            'sclk',
            'mosi',
            'cs',
            'disp',
            'extcomin',
            'extmode',
            'width',
            'height',
        ];
        this.requiredKeys = ['sclk', 'mosi', 'cs', 'width', 'height'];
        this._canvas = null;
        this._reset();
    }
    static info() {
        return {
            name: 'SharpMemoryTFT',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_cs = obniz.getIO(this.params.cs);
        if (this.params.disp && this.params.extcomin && this.params.extmode) {
            this.io_disp = obniz.getIO(this.params.disp);
            this.io_extcomin = obniz.getIO(this.params.extcomin);
            this.io_extmode = obniz.getIO(this.params.extmode);
            this.io_disp.output(true);
            this.io_extcomin.output(false);
            this.io_extmode.output(false);
        }
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        obniz.setVccGnd(this.params.vcc_a, this.params.gnd_a, '5v');
        this.params.mode = 'master';
        this.params.frequency = 1000 * 1000;
        this.params.clk = this.params.sclk;
        this.params.drive = '5v'; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.width = this.params.width;
        this.height = this.params.height;
        this.obniz.wait(100);
    }
    _reverseBits(data) {
        let revData = 0;
        for (let i = 0; i < 8; i++) {
            revData += data & 0x01;
            data >>= 1;
            if (i < 7) {
                revData <<= 1;
            }
        }
        return revData;
    }
    sendLSB(data) {
        this.spi.write([this._reverseBits(data)]);
    }
    sendClear() {
        this.io_cs.output(true);
        this.spi.write([this.commands.clear | 0x00, 0x00]);
        this.io_cs.output(false);
    }
    raw(rawData) {
        let oldline;
        let currentline;
        const totalbytes = (this.width * this.height) / 8;
        let array = new Array(1024);
        let index = 0;
        array[index++] = this.commands.write | this.commands.vcom;
        oldline = currentline = 1;
        array[index++] = this._reverseBits(currentline);
        this.io_cs.output(true);
        for (let i = 0; i < totalbytes; i++) {
            array[index++] = rawData[i]; // lsb
            currentline = Math.floor((i + 1) / (this.width / 8) + 1);
            if (currentline !== oldline) {
                array[index++] = 0x00;
                if (currentline <= this.height) {
                    array[index++] = this._reverseBits(currentline);
                }
                oldline = currentline;
            }
            if (index >= 1021) {
                // regarding SPI max.
                this.spi.write(array.slice(0, index));
                array = new Array(1024);
                index = 0;
            }
        }
        if (index > 0) {
            this.spi.write(array.slice(0, index));
        }
        this.spi.write([0x00]);
        this.io_cs.output(false);
    }
    // copy from display.js
    _reset() {
        this._pos = { x: 0, y: 0 };
        this.autoFlush = true;
    }
    warnCanvasAvailability() {
        if (this.obniz.isNode) {
            throw new Error('MemoryDisplay require node-canvas to draw rich contents. see more detail on docs');
        }
        else {
            throw new Error('MemoryDisplay cant create canvas element to body');
        }
    }
    _preparedCanvas() {
        if (this._canvas) {
            return this._canvas;
        }
        if (this.obniz.isNode) {
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const { createCanvas } = __webpack_require__("./dist/src/obniz/libs/webpackReplace/canvas.js");
                this._canvas = createCanvas(this.width, this.height);
            }
            catch (e) {
                // this.warnCanvasAvailability();
                return null;
            }
        }
        else {
            const identifier = 'MemoryDispCanvas-' + this.obniz.id;
            let canvas = document.getElementById(identifier);
            if (!canvas) {
                canvas = document.createElement('canvas');
                canvas.setAttribute('id', identifier);
                canvas.style.visibility = 'hidden';
                canvas.width = this.width;
                canvas.height = this.height;
                canvas.style['-webkit-font-smoothing'] = 'none';
                const body = document.getElementsByTagName('body')[0];
                body.appendChild(canvas);
            }
            this._canvas = canvas;
        }
        const ctx = this._canvas.getContext('2d');
        ctx.fillStyle = '#FFF';
        ctx.fillRect(0, 0, this.width, this.height);
        ctx.fillStyle = '#000';
        ctx.strokeStyle = '#000';
        this._pos.x = 0;
        this._pos.y = 0;
        this.fontSize = 16;
        ctx.font = `${this.fontSize}px Arial`;
        return this._canvas;
    }
    _ctx() {
        const canvas = this._preparedCanvas();
        return canvas.getContext('2d');
    }
    font(font, size) {
        const ctx = this._ctx();
        if (typeof size !== 'number') {
            size = 16;
        }
        if (typeof font !== 'string') {
            font = 'Arial';
        }
        this.fontSize = size;
        ctx.font = '' + size + 'px ' + font;
    }
    clear() {
        const ctx = this._ctx();
        this._pos.x = 0;
        this._pos.y = 0;
        if (ctx) {
            ctx.fillStyle = '#fff';
            ctx.fillRect(0, 0, this.width, this.height);
            ctx.fillStyle = '#000';
            ctx.strokeStyle = '#000';
            this.draw(ctx);
        }
        else {
            this.sendClear();
        }
    }
    pos(x, y) {
        this._ctx(); // crete first
        if (typeof x === 'number') {
            this._pos.x = x;
        }
        if (typeof y === 'number') {
            this._pos.y = y;
        }
        return this._pos;
    }
    print(text) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);
            this.draw(ctx);
            this._pos.y += this.fontSize;
        }
        else {
            /*
            let obj = {};
            obj['display'] = {
              text: '' + text,
            };
            this.obniz.send(obj);
            */
        }
    }
    line(x_0, y_0, x_1, y_1) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x_0, y_0);
            ctx.lineTo(x_1, y_1);
            ctx.stroke();
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    rect(x, y, width, height, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            if (mustFill) {
                ctx.fillRect(x, y, width, height);
            }
            else {
                ctx.strokeRect(x, y, width, height);
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    circle(x, y, r, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.arc(x, y, r, 0, Math.PI * 2);
            if (mustFill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    draw(ctx) {
        if (this.autoFlush) {
            this._draw(ctx);
        }
    }
    drawing(autoFlush) {
        this.autoFlush = autoFlush === true;
        const ctx = this._ctx();
        if (ctx) {
            this.draw(ctx);
        }
    }
    _draw(ctx) {
        const stride = this.width / 8;
        const vram = new Array(stride * 64);
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            const index = Math.floor(i / 4);
            const line = Math.floor(index / this.width);
            const col = Math.floor((index - line * this.width) / 8);
            const bits = Math.floor(index - line * this.width) % 8;
            if (bits === 0) {
                vram[line * stride + col] = 0x00;
            }
            if (brightness > 0x73) {
                vram[line * stride + col] |= 0x80 >> bits;
            }
        }
        this.raw(vram);
    }
}
exports.default = SharpMemoryTFT;


/***/ }),

/***/ "./dist/src/parts/DistanceSensor/GP2Y0A21YK0F/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.GP2Y0A21YK0F
 */
Object.defineProperty(exports, "__esModule", { value: true });
class GP2Y0A21YK0F {
    constructor() {
        this.displayIoNames = {
            vcc: 'vcc',
            gnd: 'gnd',
            signal: 'signal',
        };
        this._unit = 'mm';
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'GP2Y0A21YK0F',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        const io_signal = obniz.getIO(this.params.signal);
        io_signal.end();
        this.ad_signal = obniz.getAD(this.params.signal);
    }
    start(callback) {
        this.ad_signal.start((val) => {
            const distance = this._volt2distance(val);
            if (typeof callback === 'function') {
                callback(distance);
            }
        });
    }
    _volt2distance(val) {
        if (val <= 0) {
            val = 0.001;
        }
        let distance = 19988.34 * Math.pow((val / 5.0) * 1024, -1.25214) * 10;
        if (this._unit === 'mm') {
            distance = Math.floor(distance * 10) / 10;
        }
        else {
            distance *= 0.0393701;
            distance = Math.floor(distance * 1000) / 1000;
        }
        return distance;
    }
    async getWait() {
        const val = await this.ad_signal.getWait();
        const distance = this._volt2distance(val);
        return distance;
    }
    unit(unit) {
        if (unit === 'mm') {
            this._unit = 'mm';
        }
        else if (unit === 'inch') {
            this._unit = 'inch';
        }
        else {
            throw new Error('unknown unit ' + unit);
        }
    }
}
exports.default = GP2Y0A21YK0F;


/***/ }),

/***/ "./dist/src/parts/DistanceSensor/HC-SR04/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.HC-SR04
 */
Object.defineProperty(exports, "__esModule", { value: true });
class HCSR04 {
    constructor() {
        this._unit = 'mm';
        this.reset_alltime = false;
        this.temp = 15;
        this.keys = ['vcc', 'trigger', 'echo', 'gnd'];
        this.requiredKeys = ['vcc', 'trigger', 'echo'];
    }
    static info() {
        return {
            name: 'HC-SR04',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(null, this.params.gnd, '5v');
        this.vccIO = obniz.getIO(this.params.vcc);
        if (obniz.isValidIO(this.params.trigger) === false) {
            throw new Error(`trigger ${this.params.trigger} is invalid io`);
        }
        if (obniz.isValidIO(this.params.echo) === false) {
            throw new Error(`echo ${this.params.echo} is invalid io`);
        }
        this.trigger = this.params.trigger;
        this.echo = this.params.echo;
        this.vccIO.drive('5v');
        this.vccIO.output(true);
        this.obniz.wait(100);
    }
    measure(callback) {
        this.obniz.measure.echo({
            io_pulse: this.trigger,
            io_echo: this.echo,
            pulse: 'positive',
            pulse_width: 0.011,
            measure_edges: 3,
            timeout: (10 / 340) * 1000,
            callback: async (edges) => {
                if (this.reset_alltime) {
                    this.vccIO.output(false);
                    this.obniz.wait(100);
                    this.vccIO.output(true);
                    this.obniz.wait(100);
                }
                let distance;
                for (let i = 0; i < edges.length - 1; i++) {
                    // HCSR04's output of io_echo is initially high when trigger is finshed
                    if (edges[i].edge === true) {
                        const time = (edges[i + 1].timing - edges[i].timing) / 1000; // (1/4000 * 8) + is needed??
                        distance =
                            (time / 2) * 20.055 * Math.sqrt(this.temp + 273.15) * 1000;
                        if (this._unit === 'inch') {
                            distance = distance * 0.0393701;
                        }
                    }
                }
                if (typeof callback === 'function') {
                    callback(distance);
                }
            },
        });
    }
    async measureWait() {
        return new Promise((resolve) => {
            this.measure((distance) => {
                resolve(distance);
            });
        });
    }
    unit(unit) {
        if (unit === 'mm') {
            this._unit = 'mm';
        }
        else if (unit === 'inch') {
            this._unit = 'inch';
        }
        else {
            throw new Error('HCSR04: unknown unit ' + unit);
        }
    }
}
exports.default = HCSR04;


/***/ }),

/***/ "./dist/src/parts/DistanceSensor/VL53L0X/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.VL53L0X
 */
Object.defineProperty(exports, "__esModule", { value: true });
class VL53L0X {
    constructor() {
        this.requiredKeys = [];
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c'];
        this.address = 0x29;
        this.regs = {
            IDENTIFICATION_MODEL_ID: 0xc0,
            IDENTIFICATION_REVISION_ID: 0xc2,
            PRE_RANGE_CONFIG_VCSEL_PERIOD: 0x50,
            FINAL_RANGE_CONFIG_VCSEL_PERIOD: 0x70,
            SYSRANGE_START: 0x00,
            RESULT_INTERRUPT_STATUS: 0x13,
            RESULT_RANGE_STATUS: 0x14,
        };
        this.acnt = 0;
        this.scnt = 0;
        this.status = 0;
    }
    static info() {
        return {
            name: 'VL53L0X',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '3v');
        this.obniz.wait(100);
        this.params.clock = 100000;
        this.params.pull = '3v';
        this.params.mode = 'master';
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    async getWait() {
        this.i2c.write(this.address, [this.regs.SYSRANGE_START, 0x01]);
        let val = [0];
        let cnt = 0;
        while (cnt < 10) {
            await this.obniz.wait(10);
            this.i2c.write(this.address, [this.regs.RESULT_RANGE_STATUS]);
            val = await this.i2c.readWait(this.address, 1);
            if (val[0] & 0x01) {
                break;
            }
            else {
                cnt++;
            }
        }
        if (!(val[0] & 0x01)) {
            return null;
        } // sensor not ready
        this.i2c.write(this.address, [0x14]);
        const gbuf = await this.i2c.readWait(this.address, 12);
        this.acnt = this.makeuint16(gbuf[7], gbuf[6]);
        this.scnt = this.makeuint16(gbuf[9], gbuf[8]);
        const dist = this.makeuint16(gbuf[11], gbuf[10]);
        this.status = (gbuf[0] & 0x78) >> 3;
        return dist;
    }
    makeuint16(lsb, msb) {
        return ((msb & 0xff) << 8) | (lsb & 0xff);
    }
}
exports.default = VL53L0X;


/***/ }),

/***/ "./dist/src/parts/Ethernet/W5500/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-namespace */
/**
 * @packageDocumentation
 * @module Parts.W5500
 */
/* eslint max-classes-per-file: 0 */
/* eslint rulesdir/non-ascii: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
// Block select bit (BSB)
// ブロック選択ビット(BSB)
/** 00 Common register 共通レジスタ */
const BSB_COMMON = 0;
/**
 * 01/05/09/13/17/21/25/29 Socket 0\~7 register ソケット 0\~7 レジスタ
 *
 * @param socketId ソケットID
 */
const BSB_SOCKET_REGISTER = (socketId) => socketId * 4 + 1;
/**
 * 02/06/10/14/18/22/26/30 Socket 0\~7 TX buffer ソケット 0\~7 TXバッファ
 *
 * @param socketId ソケットID
 */
const BSB_SOCKET_TX_BUFFER = (socketId) => socketId * 4 + 2;
/**
 * 03/07/11/15/19/23/27/31 Socket 0\~7 RX buffer ソケット 0\~7 RXバッファ
 *
 * @param socketId ソケットID
 */
const BSB_SOCKET_RX_BUFFER = (socketId) => socketId * 4 + 3;
// Common register  NumberOfAddressesUsed Read&Write InitialValue Description
// 共通レジスタ  使用アドレス数 読み書き 初期値 説明
/** 1byte RW 0x00 Mode モード Reset/\_/WoL/PingBlock/PPPoE/\_/ForceARP/\_ */
const COMMON_MODE = 0x0000;
/** 4bytes RW 0x00000000 IPv4 address of default gateway デフォルトゲートウェイのIPv4アドレス */
const COMMON_GATEWAY_ADDRESS = 0x0001;
/** 4bytes RW 0x00000000 Subnet mask サブネットマスク */
const COMMON_SOURCE_SUBNET_MASK = 0x0005;
/** 6bytes RW 0x000000000000 MAC address MACアドレス */
const COMMON_SOURCE_HARDWARE_ADDRESS = 0x0009;
/** 4bytes RW 0x00000000 Local IPv4 address ローカルIPv4アドレス */
const COMMON_SOURCE_IP_ADDRESS = 0x000f;
/**
 * 2byte RW 0x0000
 *
 * Interrupt pin change interval -> Not required because the interrupt pin is not connected
 *
 * 割り込みピンの変更間隔 -> 割り込みピン未接続につき使用不要
 */
const COMMON_INTERRUPT_LOW_LEVEL_TIMER = 0x0013;
/** 1byte RW 0x00 Interrupt 割り込み IPConflict/DestUnreach/PPPoEClose/MagicPacket/\_/\_/\_/\_ */
const COMMON_INTERRUPT = 0x0015;
/**
 * 1byte RW 0x00
 *
 * Interrupt mask (Depending on the initial value, there is no interrupt at the time of initial setting)
 *
 * 割り込みマスク(初期値より、初期設定時は割り込みなし)
 */
const COMMON_INTERRUPT_MASK = 0x0016;
/**
 * 1byte RW 0x00
 *
 * Socket interrupt -> Not implemented this time
 *
 * ソケット割り込み -> 今回は未実装
 */
const COMMON_SOCKET_INTERRUPT = 0x0017;
/**
 * 1byte RW 0x00
 *
 * Socket interrupt mask (Depending on the initial value, there is no socket interrupt at the time of initial setting)
 *
 * ソケット割り込みマスク(初期値より、初期設定時はソケット割り込みなし)
 */
const COMMON_SOCKET_INTERRUPT_MASK = 0x0018;
/**
 * 2bytes RW 0x07D0
 *
 * Retry interval (Initial value: 100us\*2000=200ms)
 *
 * 再試行間隔(初期値: 100us\*2000=200ms)
 */
const COMMON_RETRY_TIME = 0x0019;
/**
 * 1byte RW 0x08
 *
 * Retry count (If exceeded, the Interrupt timeout for each Socket will be true)
 *
 * 再試行回数(超えると各ソケットの割り込みのタイムアウトがtrueに)
 */
const COMMON_RETRY_COUNT = 0x001b;
/**
 * 1byte RW 0x28
 *
 * Time to send echo request for Link Control Protocol (Initial value: 40\*25ms=1s)
 *
 * LinkControlプロトコルのechoリクエストを送っている時間(初期値: 40\*25ms=1s)
 */
const COMMON_PPP_LCP_REQUEST_TIMER = 0x001c;
/**
 * 1byte RW 0x00
 *
 * 1 byte of the 4 bytes magic number of the Link Control protocol echo request
 *
 * LinkControlプロトコルのechoリクエストの4bytesマジックナンバーの1byte
 */
const COMMON_PPP_LCP_MAGIC_NUMBER = 0x001d;
/** 6bytes RW 0x000000000000 MAC address of PPPoE server PPPoEサーバーのMACアドレス */
const COMMON_PPP_DESTINATION_MAC_ADDRESS = 0x001e;
/** 2bytes RW 0x0000 Session ID of PPPoE server PPPoEサーバーのセッションID */
const COMMON_PPP_SESSION_IDENTIFICATION = 0x0024;
/** 2bytes RW 0xFFFF Maximum receiving unit size of PPPoE PPPoEの最大受信ユニットサイズ */
const COMMON_PPP_MAXIMUM_SEGMENT_SIZE = 0x0026;
/**
 * 4bytes R- 0x00000000
 *
 * IPv4 address when the destination cannot be reached
 *
 * 宛先に到達できないときのIPv4アドレス
 */
const COMMON_UNREACHABLE_IP_ADDRESS = 0x0028;
/**
 * 2bytes R- 0x0000
 *
 * Port number when the destination cannot be reached
 *
 * 宛先に到達できないときのポート番号
 */
const COMMON_UNREACHABLE_PORT = 0x002c;
/**
 * 1byte RW 0b10111XXX Physical layer settings 物理層の設定
 *
 * Reset(1->0->1)/OperationMode/ConfigBit\*3/Duplex/Speed/Link
 *
 * - Reset
 *
 * Reset the internal physical layer, need to set this bit to 0 and then back to 1
 *
 * 内部の物理層をリセット、このビットを0にした後、1に戻す必要がある
 *
 * - OperationMode
 *
 * 1: Use the following 3-bit settings 次の3bitの設定を使用
 *
 * 0: Follow the hardware pin settings ハードウェアピンの設定に従う
 *
 * - ConfigBit
 *
 * The default setting for both hardware pins and registers is 111
 *
 * ハードウェアピン、レジスタともに初期設定は111
 *
 * - 000  10BT Half duplex 半二重 / 001  10BT Full duplex 全二重
 * - 010 100BT Half duplex 半二重 / 011 100BT Full duplex 全二重
 * - 100 100BT Half duplex enable auto negotiation 半二重 自動ネゴシエーションオン
 * - 110 Power Off Mode 電源オフモード
 * - 111 All available & Enable auto negotiation 全て使用可能 自動ネゴシエーションオン
 *
 * - Duplex  1: Full duplex 全二重 0: Half duplex 半二重
 * - Speed  1: 100Mbps 0: 10Mbps
 * - Link  1: Connected 接続済み 0: Disconnected 未接続
 */
const COMMON_PHY_CONFIGURATION = 0x002e;
/* 0x002F~0x0038 Reserved 予約済み */
/** 1byte R- 0x04 Chip Version チップバージョン */
const COMMON_CHIP_VERSION = 0x0039;
// Socket register  NumberOfAddressesUsed Read&Write InitialValue Description
// ソケットレジスタ  使用アドレス数 読み書き 初期値 説明
/**
 * 1byte RW 0x00 Mode モード
 *
 * Multicast(UDP)·MACFilter(MACRAW)/BroadcastBlock(MACRAW·UDP)/
 *
 * NoDelayACK(TCP)·MulticastVer(UDP)·MulticastBlock(MACRAW)/UnicastBlock(UDP)·IPv6Block(MACRAW)/
 *
 * Protocol\*4  0000: Closed · 0001: TCP · 0010: UDP · 0100: MACRAW
 */
const SOCKET_MODE = 0x0000;
/**
 * 1byte RW 0x00 Command コマンド
 *
 * 0x01: Open · 0x02: Listen(TCP) · 0x04: Connect(TCP) · 0x08: Disconnect(TCP) · 0x10: Close · 0x20: Send · 0x21: SendMAC(UDP) · 0x22: SendKeep(UDP) · 0x40: Receive
 */
const SOCKET_COMMAND = 0x0001;
/** 1byte RCW1 0x00 Interrupt 割り込み \_/\_/\_/SendOK/Timeout/Receive/Disconnect/Connected */
const SOCKET_INTERRUPT = 0x0002;
/**
 * 1byte R- 0x00 Status 状態
 *
 * 0x00: Closed · 0x13: Init(TCP) · 0x14: Listen(TCP) · 0x17: Established(TCP) · 0x1C: CloseWait(TCP) · 0x22: UDP · 0x32: MACRAW
 *
 * Temporary Status (Only TCP) 一時的な状態(TCPのみ)
 *
 * 0x15: SynSent · 0x16: SynReceive · 0x18: FinWait · 0x1A: Closing · 0x1B: TimeWait · 0x1D: LastACK
 */
const SOCKET_STATUS = 0x0003;
/** 2bytes RW 0x0000 Source port 差出ポート */
const SOCKET_SOURCE_PORT = 0x0004;
/**
 * 6bytes RW 0xFFFFFFFFFFFF
 *
 * Destination hardware address (UDP/ARP) -> Not used this time
 *
 * 宛先ハードウェアアドレス(UDP/ARP) -> 今回は未使用
 */
const SOCKET_DESTINATION_HARDWARE_ADDRESS = 0x0006;
/** 4 RW 0x00000000 Destination IPv4 address 宛先IPv4アドレス (TCP/UDP) */
const SOCKET_DESTINATION_IP_ADDRESS = 0x000c;
/** 2 RW 0x0000 Destination port 宛先ポート (TCP/UDP) */
const SOCKET_DESTINATION_PORT = 0x0010;
/**
 * 2bytes RW 0x0000
 *
 * Maximum segment size (TCP?) -> Not used this time?
 *
 * 最大セグメントサイズ(TCP?) -> 今回は未使用?
 */
const SOCKET_MAX_SEGMENT_SIZE = 0x0012;
/* 0x0014 Reserved 予約済み */
/**
 * 1byte RW 0x00
 *
 * Set before the Open command Openコマンドより前に設定
 *
 * [http://www.iana.org/assignments/ip-parameters](http://www.iana.org/assignments/ip-parameters)
 */
const SOCKET_IP_TYPE_OF_SERVICE = 0x0015;
/**
 * 1byte RW 0x00
 *
 * Set before the Open command Openコマンドより前に設定
 *
 * [http://www.iana.org/assignments/ip-parameters](http://www.iana.org/assignments/ip-parameters)
 */
const SOCKET_TTL = 0x0016;
/* 0x0017~0x001D Reserved 予約済み */
/** 1byte RW 0x00 RX buffer size RXバッファサイズ 0/1/2/4/8/16KB */
const SOCKET_RX_BUFFER_SIZE = 0x001e;
/** 1byte RW 0x02 TX buffer size TXバッファサイズ 0/1/2/4/8/16KB */
const SOCKET_TX_BUFFER_SIZE = 0x001f;
/** 2bytes R- 0x0800 TX free size TX空きサイズ */
const SOCKET_TX_FREE_SIZE = 0x0020;
/** 2bytes R- 0x0000 TX read pointer TX読込ポインタ */
const SOCKET_TX_READ_POINTER = 0x0022;
/** 2bytes RW 0x0000 TX write pointer TX書込ポインタ */
const SOCKET_TX_WRITE_POINTER = 0x0024;
/** 2bytes R- 0x0000 RX receive size RX受信サイズ */
const SOCKET_RX_RECEIVE_SIZE = 0x0026;
/** 2bytes RW 0x0000 RX read pointer RX読込ポインタ */
const SOCLET_RX_READ_DATA_POINTER = 0x0028;
/** 2bytes R- 0x0000 RX write pointer RX書込ポインタ */
const SOCKET_RX_WRITE_POINTER = 0x002a;
/**
 * 1byte RW 0xFF
 *
 * Interrupt mask -> Not going to change
 *
 * 割り込みマスク -> 変更しない
 */
const SOCKET_INTERRUPT_MASK = 0x002c;
/** 2bytes RW 0x4000 Fragment of IP header IPヘッダーのフラグメント */
const SOCKET_FRAGMENT = 0x002d;
/** 1byte RW 0x0000 keep-alive Timer keep-aliveタイマー (TCP) (Ex. 0x0A->50s) */
const SOCKET_KEEP_ALIVE_TIMER = 0x002f;
/* 0x0030~0xFFFF Reserved 予約済み */
/** Wait Xms Xミリ秒待つ @hidden */
const sleep = (msec) => new Promise((resolve) => setTimeout(resolve, msec));
/** [43, 227, 213] => '2BE3D5' @hidden */
const byteString = (bytes) => bytes.map((n) => ('00' + n.toString(16).toUpperCase()).slice(-2)).join('');
/** W5500 type definitions and constants W5500の型定義や定数 */
var W5500Parts;
(function (W5500Parts) {
    /** Flags corresponding to interrupts 割り込みに対応するフラグ */
    W5500Parts.InterruptFlags = {
        IPConflict: 0b10000000,
        DestUnreach: 0b01000000,
        PPPoEClose: 0b00100000,
        MagicPacket: 0b00010000,
    };
    /** Connection destination information 接続先情報 */
    class DestInfo {
        constructor(ip, port) {
            this.ip = ip;
            this.port = port;
            this.address = `${ip}:${port}`;
        }
    }
    W5500Parts.DestInfo = DestInfo;
})(W5500Parts = exports.W5500Parts || (exports.W5500Parts = {}));
/** W5500 management class W5500を管理するクラス */
class W5500 {
    constructor() {
        /**
         * Whether to communicate with a fixed length, forces true if no chip select pin is specified
         *
         * 固定長通信するかどうか、チップセレクトピンが指定されていない場合、強制的にtrue
         */
        this.fdm = false;
        /**
         * Holds a handler that catches interrupts by message
         *
         * 割り込みをメッセージ別でキャッチするハンドラーを保持
         */
        this.interruptHandlers = {};
        /** Array of socket instances ソケットのインスタンスの配列 */
        this.socketList = [];
        /** SPI status SPIのステータス */
        this.spiStatus = false;
        /**
         * Do not always check transfer when writing
         *
         * 常に書き込み時に転送チェックを行わない
         */
        this.forceNoCheckWrite = false;
        this.keys = ['frequency', 'reset', 'mosi', 'miso', 'sclk', 'cs'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'W5500',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        // W5500 may accept up to 26 Mhz. But it may fail on some devices. Reduce it when spi error occures. Increase it when no spi error occures and want to improve speed.
        this.params.frequency = this.params.frequency || 20 * 1000 * 1000;
        this.params.mosi = this.params.mosi || 23;
        this.params.miso = this.params.miso || 19;
        this.params.clk = this.params.clk || 18;
        this.params.drive = '3v';
        this.params.mode = 'master';
        this.spi = this.params.spi || this.obniz.getSpiWithConfig(this.params);
        this.spiStatus = true;
        this.resetPin = this.obniz.getIO(this.params.reset || 12);
        this.csPin = this.obniz.getIO(this.params.cs || 33);
    }
    /**
     * Initialize W5500 and write common settings
     *
     * W5500を初期化、共通設定の書き込み
     *
     * @param config W5500 config W5500の設定内容
     * @return Write result 書き込み結果
     */
    async initWait(config) {
        // Reset リセット
        await this.hardResetWait();
        // Use fixed length data mode 固定長通信の使用
        this.fdm = config.fdm === true;
        // SPI chip select SPIのセレクト
        this.csPin.drive('3v');
        this.csPin.output(!this.fdm);
        // Mode setting モード設定
        let result = await this.setModeWait(config);
        // Network initialization ネットワークの初期化
        if (config.gatewayIP) {
            result = result && (await this.setGatewayWait(config.gatewayIP));
        }
        if (config.subnetMask) {
            result = result && (await this.setSubnetMask(config.subnetMask));
        }
        if (config.macAddress) {
            result = result && (await this.setMacAddressWait(config.macAddress));
        }
        if (config.localIP) {
            result = result && (await this.setLocalIPWait(config.localIP));
        }
        // Turn on all interrupt masks 割り込みマスクを全てオンに
        result = result && (await this.setInterruptMaskWaut(0xff));
        // Other settings その他設定
        if (config.retryTime) {
            result = result && (await this.setRetryTimeWait(config.retryTime));
        }
        if (config.retryCount) {
            result = result && (await this.setRetryCountWait(config.retryCount));
        }
        if (config.linkControlProtocolRequestTimer) {
            result =
                result &&
                    (await this.setPPPLinkControlProtocolRequestTimerWait(config.linkControlProtocolRequestTimer));
        }
        if (config.linkControlProtocolMagicNumber) {
            result =
                result &&
                    (await this.setPPPLinkControlProtocolMagicNumberWait(config.linkControlProtocolMagicNumber));
        }
        if (config.pppoeDestMACAddress) {
            result =
                result &&
                    (await this.setPPPoEMacAddressWait(config.pppoeDestMACAddress));
        }
        if (config.pppoeSessionID) {
            result =
                result && (await this.setPPPoESessionIDWait(config.pppoeSessionID));
        }
        if (config.pppoeMaxSegmentSize) {
            result =
                result &&
                    (await this.setPPPoEMaxSegmentSizeWait(config.pppoeMaxSegmentSize));
        }
        if (config.phyConfig) {
            result = result && (await this.setPhysicalConfigWait(config.phyConfig));
        }
        this.forceNoCheckWrite = config.forceNoCheckWrite === true;
        // Interrupt handlers 割り込みハンドラー設定
        if (config.onIPConflictInterrupt) {
            this.setInterruptHandler('IPConflict', config.onIPConflictInterrupt);
        }
        if (config.onDestUnreachInterrupt) {
            this.setInterruptHandler('DestUnreach', config.onDestUnreachInterrupt);
        }
        if (config.onPPPoECloseInterrupt) {
            this.setInterruptHandler('PPPoEClose', config.onPPPoECloseInterrupt);
        }
        if (config.onMagicPacketInterrupt) {
            this.setInterruptHandler('MagicPacket', config.onMagicPacketInterrupt);
        }
        if (config.onAllInterrupt) {
            this.setAllInterruptHandler(config.onAllInterrupt);
        }
        return result;
    }
    /**
     * Terminates each socket and terminates SPI communication
     *
     * 各ソケットの終了処理をし、SPI通信を終了
     */
    async finalizeWait() {
        for (const socket of this.socketList) {
            if (socket !== undefined) {
                await socket.finalizeWait();
            }
        }
        this.spi.end();
        this.spiStatus = false;
    }
    /**
     * Set a handler to catch a specific interrupt
     *
     * Run checkInterruptWait() regularly to actually catch
     *
     * 特定の割り込みをキャッチするハンドラーを設定
     *
     * 実際にキャッチするにはcheckInterrupt()を定期的に実行
     *
     * @param name Name of the interrupt to get 取得する割り込みの名前 (IPConflict | DestUnreach | PPPoEClose | MagicPacket)
     * @param handler Callback function, extra is only when name=DestUnreach
     *
     * コールバック関数、extraはname=DestUnreachのときのみ
     */
    setInterruptHandler(name, handler) {
        this.interruptHandlers[name] = handler;
    }
    /**
     * Set handler to catch all interrupts
     *
     * Run checkInterruptWait() regularly to actually catch
     *
     * 全ての割り込みをキャッチするハンドラーを設定
     *
     * 実際にキャッチするにはcheckInterrupt()を定期的に実行
     *
     * @param handler Callback function, name is the name of the interrupt received, extra is only when name=DestUnreach
     *
     * コールバック関数、nameには受け取った割り込み名が入ります、extraはname=DestUnreachのときのみ
     */
    setAllInterruptHandler(handler) {
        this.allInterruptHandler = handler;
    }
    /**
     * Wait until the connection with the router is established
     *
     * ルーターとの接続が確立されるまで待機
     *
     * @return Physical layer status 物理層のステータス
     */
    async waitLinkUpWait() {
        let phy;
        while (true) {
            phy = await this.getPhysicalStatusWait();
            if (phy.link) {
                break;
            }
            await sleep(20);
        }
        return phy;
    }
    /**
     * Get an instance of W5500Socket, generate if necessary
     *
     * W5500Socketのインスタンスを取得、必要ならば生成
     *
     * @param socketId Socket ID (0\~7) ソケットID (0\~7)
     * @return Instance of W5500Socket W5500Socketのインスタンス
     */
    getSocket(socketId) {
        if (socketId < 0 || socketId > 7) {
            throw new Error('Socket id must take a value between 0 and 7.');
        }
        if (!this.socketList[socketId]) {
            this.socketList[socketId] = new W5500Socket(socketId, this);
        }
        return this.socketList[socketId];
    }
    /**
     * Create an instance of W5500Socket in the frame of the unused socket
     *
     * 使っていないソケットの枠にW5500Socketのインスタンスを生成
     *
     * @return Instance of W5500Socket W5500Socketのインスタンス
     */
    getNewSocket() {
        let id = 0;
        while (this.socketList[id] !== undefined) {
            id++;
        }
        if (id > 7) {
            return null;
        }
        else {
            return (this.socketList[id] = new W5500Socket(id, this));
        }
    }
    /**
     * Whether SPI is available
     *
     * SPIが利用可能かどうか
     *
     * @return SPI status SPIのステータス
     */
    getSpiStatus() {
        return this.spiStatus;
    }
    /**
     * Reset W5500 in hardware
     *
     * W5500をハードウェア的にリセット
     */
    async hardResetWait() {
        this.resetPin.drive('3v');
        this.resetPin.output(false);
        await sleep(10); // > 500ns
        this.resetPin.output(true);
        await sleep(100);
    }
    /**
     * Set mode モードを設定
     *
     * @param config WakeOnLAN(WoL), PingBlock, PPPoE and ForceARP
     * @return Write result 書き込み結果
     */
    setModeWait(config) {
        return this.numWriteWait(COMMON_MODE, BSB_COMMON, 0b00100000 * (config.wol === true ? 1 : 0) +
            0b00010000 * (config.pingBlock === true ? 1 : 0) +
            0b00001000 * (config.pppoe === true ? 1 : 0) +
            0b00000010 * (config.forceArp === true ? 1 : 0));
    }
    /**
     * Set IPv4 address of default gateway
     *
     * デフォルトゲートウェイのIPv4アドレスを設定
     *
     * @param ip IPv4 address IPv4アドレス
     * @return Write result 書き込み結果
     */
    setGatewayWait(ip) {
        return this.ipWriteWait(COMMON_GATEWAY_ADDRESS, BSB_COMMON, ip);
    }
    /**
     * Set subnet mask サブネットマスクを設定
     *
     * @param mask Subnet mask サブネットマスク
     * @return Write result 書き込み結果
     */
    setSubnetMask(mask) {
        return this.ipWriteWait(COMMON_SOURCE_SUBNET_MASK, BSB_COMMON, mask);
    }
    /**
     * Set MAC address MACアドレスを設定
     *
     * @param mac MAC address MACアドレス
     * @return Write result 書き込み結果
     */
    setMacAddressWait(mac) {
        return this.macWriteWait(COMMON_SOURCE_HARDWARE_ADDRESS, BSB_COMMON, mac);
    }
    /**
     * Set local IPv4 address ローカルIPv4アドレスを設定
     *
     * @param ip IPv4 address IPv4アドレス
     * @return Write result 書き込み結果
     */
    setLocalIPWait(ip) {
        return this.ipWriteWait(COMMON_SOURCE_IP_ADDRESS, BSB_COMMON, ip);
    }
    /**
     * Check for interrupts (doesn't work properly with VDM)
     *
     * Also check socket interrupts
     *
     * If there is an interrupt, call the preset handler
     *
     * 割り込みをチェック(VDMの時、正常に動作しません)
     *
     * ソケットの割り込みもチェックします
     *
     * 割り込みがあった場合、事前に設定されたhandlerを呼び出します
     *
     * @param disableAllSocketCheck When it's true, do not call checkInterruptWait() for all sockets
     *
     * trueの時、全ソケットのcheckInterrupt()呼び出しを行いません
     * @return Then whether you can check for interrupts
     *
     * 次に割り込みをチェックできるかどうか
     */
    async checkInterruptWait(disableAllSocketCheck) {
        if (!this.spiStatus) {
            return false;
        }
        const interrupt = await this.numReadWait(COMMON_INTERRUPT, BSB_COMMON);
        if (interrupt !== 0) {
            // リセット
            await this.numWriteWait(COMMON_INTERRUPT, BSB_COMMON, interrupt);
        }
        const msgList = Object.keys(W5500Parts.InterruptFlags).filter((msg) => (interrupt & W5500Parts.InterruptFlags[msg]) !==
            0);
        const extra = msgList.indexOf('DestUnreach') >= 0
            ? new W5500Parts.DestInfo(await this.getUnreachableIP(), await this.getUnreachablePort())
            : undefined;
        if (disableAllSocketCheck !== false) {
            for (const socket of this.socketList) {
                if (socket !== undefined && socket.getProtocol() !== null) {
                    await socket.checkInterruptWait();
                }
            }
        }
        for (const m in msgList) {
            const msg = msgList[m];
            // console.info(`Found Interrupt: ${msg}` + msg === "DestUnreach" ? ` address=${extra?.address}` : "");
            const handler = this.interruptHandlers[msg];
            if (handler !== undefined) {
                await handler(this, extra);
            }
            if (this.allInterruptHandler !== undefined) {
                await this.allInterruptHandler(this, msg, msg === 'DestUnreach' ? extra : undefined);
            }
        }
        return this.spiStatus;
    }
    /**
     * Set interrupt mask 割り込みマスクを設定
     *
     * @param mask Mask マスク
     * @return Write result 書き込み結果
     */
    setInterruptMaskWaut(mask) {
        return this.numWriteWait(COMMON_INTERRUPT_MASK, BSB_COMMON, mask);
    }
    /**
     * Set retry interval (Initial value: 200ms) 再試行間隔を設定 (初期値: 200ms)
     *
     * @param time Retry interval (in 0.2ms increments) 再試行間隔 (0.2ms刻み) (0\~6553.5ms)
     * @return Write result 書き込み結果
     */
    setRetryTimeWait(time) {
        return this.num2WriteWait(COMMON_RETRY_TIME, BSB_COMMON, time * 10);
    }
    /**
     * Set retry count (Initial value: 8 times) 再試行回数を設定 (初期値: 8回)
     *
     * @param count retry count 再試行回数 (0\~255)
     * @return Write result 書き込み結果
     */
    setRetryCountWait(count) {
        return this.numWriteWait(COMMON_RETRY_COUNT, BSB_COMMON, count);
    }
    /**
     * Set time to send echo request for Link Control Protocol
     *
     * LinkControlプロトコルのechoリクエストを送っている時間を設定
     *
     * @param time time (in 25ms increments) 時間 (25ms刻み) (0\~6375ms)
     * @return Write result 書き込み結果
     */
    setPPPLinkControlProtocolRequestTimerWait(time) {
        return this.numWriteWait(COMMON_PPP_LCP_REQUEST_TIMER, BSB_COMMON, time / 25);
    }
    /**
     * Set 1 byte of the 4 bytes magic number of the Link Control protocol echo request
     *
     * LinkControlプロトコルのechoリクエストの4bytesマジックナンバーの1byteを設定
     *
     * @param num Magic number マジックナンバー
     * @return Write result 書き込み結果
     */
    setPPPLinkControlProtocolMagicNumberWait(num) {
        return this.numWriteWait(COMMON_PPP_LCP_MAGIC_NUMBER, BSB_COMMON, num);
    }
    /**
     * Set MAC address of PPPoE server PPPoEサーバーのMACアドレスを設定
     *
     * @param mac MAC address MACアドレス
     * @return Write result 書き込み結果
     */
    setPPPoEMacAddressWait(mac) {
        return this.macWriteWait(COMMON_PPP_DESTINATION_MAC_ADDRESS, BSB_COMMON, mac);
    }
    /**
     * Set session ID of PPPoE server PPPoEサーバーのセッションIDを設定
     *
     * @param id Session ID セッションID
     * @return Write result 書き込み結果
     */
    setPPPoESessionIDWait(id) {
        return this.num2WriteWait(COMMON_PPP_SESSION_IDENTIFICATION, BSB_COMMON, id);
    }
    /**
     * Set maximum receiving unit size of PPPoE PPPoEの最大受信ユニットサイズを設定
     *
     * @param size Unit size ユニットサイズ
     * @return Write result 書き込み結果
     */
    setPPPoEMaxSegmentSizeWait(size) {
        return this.num2WriteWait(COMMON_PPP_MAXIMUM_SEGMENT_SIZE, BSB_COMMON, size);
    }
    /**
     * Get the IPv4 address when the destination could not be reached
     *
     * 宛先に到達できなかった時のIPv4アドレスを取得
     *
     * @return IPv4 address IPv4アドレス
     */
    getUnreachableIP() {
        return this.ipReadWait(COMMON_UNREACHABLE_IP_ADDRESS, BSB_COMMON);
    }
    /**
     * Get the port number when the destination could not be reached
     *
     * 宛先に到達できなかった時のポート番号を取得
     *
     * @return Port number ポート番号
     */
    getUnreachablePort() {
        return this.num2ReadWait(COMMON_UNREACHABLE_PORT, BSB_COMMON);
    }
    /**
     * Get physical layer status 物理層のステータス取得
     *
     * @return Physical layer status 物理層のステータス
     */
    async getPhysicalStatusWait() {
        const result = await this.numReadWait(COMMON_PHY_CONFIGURATION, BSB_COMMON);
        return {
            duplex: (result & 0b100) !== 0,
            speed: (result & 0b010) !== 0 ? 100 : 10,
            link: (result & 0b001) !== 0,
        };
    }
    /**
     * Set physical layer config 物理層の設定
     *
     * @param config Physical layer config 物理層の設定内容
     * @return Write result 書き込み結果
     */
    async setPhysicalConfigWait(config) {
        if (config.reset) {
            await this.numWriteWait(COMMON_PHY_CONFIGURATION, BSB_COMMON, 0);
            await sleep(500);
        }
        let value = 0b11111000;
        if (config.autoNegotiation === false) {
            value &= 0b11011000;
        } // 1bit目を0に
        if (config.speed === 10) {
            value &= 0b11001000;
        } // 1,2bit目を0に
        if (config.duplex === false) {
            value &= 0b11110000;
        } // 3bit目を0に
        if (config.powerOff === true) {
            value = 0b11110000;
        }
        return await this.numWriteWait(COMMON_PHY_CONFIGURATION, BSB_COMMON, value);
    }
    /**
     * Get chip version チップバージョンの取得
     *
     * @return Chip version チップバージョン
     */
    getVersion() {
        return this.numReadWait(COMMON_CHIP_VERSION, BSB_COMMON);
    }
    /**
     * Write after validating the IPv4 address of the character string
     *
     * 文字列のIPv4アドレスをバリデーションチェックしてから書き込み
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param ip IPv4 address IPv4アドレス
     * @return Write result 書き込み結果
     * @hidden
     */
    ipWriteWait(address, bsb, ip) {
        return this.addressWriteWait(address, bsb, ip, 'IP Address', '123.234.0.1', '.', 4, 10);
    }
    /**
     * Write after validating the MAC address of the character string
     *
     * 文字列のMACアドレスをバリデーションチェックしてから書き込み
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param mac MAC address MACアドレス
     * @return Write result 書き込み結果
     * @hidden
     */
    macWriteWait(address, bsb, mac) {
        return this.addressWriteWait(address, bsb, mac, 'MAC Address', '12:34:56:78:90:AB', ':', 6, 16);
    }
    /**
     * Writing large data
     *
     * Used when the length is larger than 4 in FDM
     *
     * Used when the length is greater than 1021 for VDM
     *
     * 大きいデータの書き込み
     *
     * FDMのとき、長さが4より大きいときに使用
     *
     * VDMのとき、長さが1021より大きいときに使用
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param data Raw byte data Raw byte data バイト列データ
     * @param noWait Do not use spi.writeWait() when writing data データ書き込み時、spi.writeWait()を使用しない
     * @return Write result 書き込み結果
     * @hidden
     */
    async bigWriteWait(address, bsb, data, noWait) {
        const maxLength = this.fdm ? 4 : 1021; // FDM(4) / VDM(1024-3)
        let result = true;
        for (let i = 0; i < data.length; i += maxLength) {
            const size = i + maxLength <= data.length ? maxLength : data.length - i;
            result =
                result &&
                    (await this.writeWait(address + i, bsb, data.slice(i, i + size), noWait));
        }
        return result;
    }
    /**
     * Writing a value to the area for one address
     *
     * 1アドレス分の領域への値の書き込み
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param num Value 値 (0\~255)
     * @return Write result 書き込み結果
     * @hidden
     */
    numWriteWait(address, bsb, num) {
        return this.writeWait(address, bsb, [num]);
    }
    /**
     * Writing a value to the area for two addresses
     *
     * 2アドレス分の領域への値の書き込み
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param num Value 値 (0\~65535)
     * @return Write result 書き込み結果
     * @hidden
     */
    num2WriteWait(address, bsb, num) {
        return this.writeWait(address, bsb, [(num & 0xff00) >> 8, num & 0xff]);
    }
    /**
     * Read IPv4 address data IPv4アドレスデータの読み込み
     *
     * @param address Start address of read destination 読み込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @return IPv4 address IPv4アドレス
     * @hidden
     */
    async ipReadWait(address, bsb) {
        return (await this.readWait(address, bsb, 4)).join('.');
    }
    /**
     * Reading large data
     *
     * Used when the length is larger than 4 in FDM
     *
     * Used when the length is greater than 1021 for VDM
     *
     * 大きいデータの読み込み
     *
     * FDMのとき、長さが4より大きいときに使用
     *
     * VDMのとき、長さが1021より大きいときに使用
     *
     * @param address Start address of read destination 読み込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param length Data length (byte length) データの長さ (バイト長)
     * @return Read data 読み込みデータ
     * @hidden
     */
    async bigReadWait(address, bsb, length) {
        const maxLength = this.fdm ? 4 : 1021; // FDM(4) / VDM(1024-3)
        let data = [];
        for (let i = 0; i < length; i += maxLength) {
            const size = i + maxLength <= length ? maxLength : length - i;
            data = data.concat(await this.readWait(address + i, bsb, size));
        }
        return data;
    }
    /**
     * Reading values from the area for one address
     *
     * 1アドレス分の領域からの値の読み込み
     *
     * @param address Start address of read destination 読み込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @return Value 値 (0\~255)
     * @hidden
     */
    async numReadWait(address, bsb) {
        const result = await this.readWait(address, bsb, 1);
        return result[0];
    }
    /**
     * Reading values from the area for two addresses
     *
     * 2アドレス分の領域からの値の読み込み
     *
     * @param address Start address of read destination 読み込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @return Value 値 (0\~65535)
     * @hidden
     */
    async num2ReadWait(address, bsb) {
        const result = await this.readWait(address, bsb, 2);
        return (result[0] << 8) + result[1];
    }
    /**
     * Validate and write the address based on the definition
     *
     * アドレスを定義に基づいてバリデーションチェックして書き込み
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param val String of the address to write 書き込むアドレスの文字列
     * @param name Type name of the address アドレスの種類名
     * @param example Sample string of the address, for errors アドレスのサンプル文字列、エラー用
     * @param splitVal Address split character アドレスの分割文字
     * @param length Length when the address is divided by the split character アドレスを分割文字で分割した時の長さ
     * @param radix Description format of numbers in the address (N-ary) アドレス内の数字の記述形式 (N進数)
     * @hidden
     */
    async addressWriteWait(address, bsb, val, name, example, splitVal, length, radix) {
        if (typeof val !== 'string') {
            throw new Error(`Given ${name} must be string.`);
        }
        const valList = val.split(splitVal).map((addr) => parseInt(addr, radix));
        if (valList.filter((addr) => typeof addr === 'number').length !== length) {
            throw new Error(`${name} format must be '${example}'.`);
        }
        if (length > 4 && this.fdm) {
            return await this.bigWriteWait(address, bsb, valList);
        }
        else {
            return await this.writeWait(address, bsb, valList);
        }
        // const func = length > 4 && this.fdm ? this.bigWriteWait : this.writeWait;
        // return func(address, bsb, valList);
    }
    /**
     * Writing normal data
     *
     * For FDM, the length is up to 4
     *
     * For VDM, the length is up to 1021
     *
     * 通常データの書き込み
     *
     * FDMのとき、長さは4まで
     *
     * VDMのとき、長さは1021まで
     *
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param data Raw byte data バイト列データ
     * @param noWait Do not use spi.writeWait() when writing data データ書き込み時、spi.writeWait()を使用しない
     * @return Write result 書き込み結果
     * @hidden
     */
    async writeWait(address, bsb, data, noWait) {
        if (!Array.isArray(data)) {
            throw new Error('Given data must be array.');
        }
        if (data.length === 3 && this.fdm) {
            data[3] = 0;
        }
        if (data.length === 0) {
            throw new Error('Given data is empty.');
        }
        if (data.length > 4 && this.fdm) {
            throw new Error('Given data length must be 1, 2 or 4.');
        }
        if (data.length > 1021 && !this.fdm) {
            throw new Error('Given data length must be 1021 or less.');
        }
        if (data.filter((addr) => 0x00 <= addr && addr <= 0xff).length !== data.length) {
            throw new Error('Given data field must take a value between 0(0x00) and 255(0xFF).');
        }
        if (this.forceNoCheckWrite === true && noWait === undefined) {
            noWait = true;
        }
        const result = await this.sendWait(address, bsb, 'Write', data, noWait);
        if (typeof result === 'object') {
            throw new Error('Unexpected Result');
        }
        else {
            return result;
        }
    }
    /**
     * Reading normal data
     *
     * 通常データの読み込み
     *
     * @param address Start address of read destination 読み込み先の先頭アドレス
     * @param bsb Block select bit ブロック選択ビット
     * @param length Data length (byte length) データの長さ (バイト長)
     * @return Read data 読み込みデータ
     * @hidden
     */
    async readWait(address, bsb, length) {
        const result = await this.sendWait(address, bsb, 'Read', Array(length).fill(0));
        if (typeof result === 'boolean') {
            throw new Error('Unexpected Result');
        }
        else {
            return result;
        }
    }
    /**
     * 読み書き共通のメソッド、返却されたデータを検証
     *
     * Common read / write method, verify returned data
     *
     * @param address Start address of operation destination 操作先の先頭アドレス (0x0000\~0xFFFF)
     * @param bsb Block select bit ブロック選択ビット (0b00000\~0b11111)
     * @param mode Read or write 読み込みか書き込みか (Read|Write)
     * @param data Raw byte data バイト列データ (0xFF\*1\~4(FDM), \*1\~1021(VDM))
     * @param noWait Do not use spi.writeWait for communication 通信にspi.writeWaitを使用しない
     * @return Write: Write result  Read: Read data
     *
     * 書込: 書き込み結果  読込: 読み込みデータ
     * @hidden
     */
    async sendWait(address, bsb, mode, data, noWait) {
        const write = [
            (address & 0xff00) >> 8,
            address & 0x00ff,
            (bsb << 3) +
                (mode === 'Write' ? 0b0100 : 0b0000) +
                (this.fdm ? (data.length < 4 ? data.length : 0b11) : 0),
            ...data,
        ];
        if (!this.fdm && this.csPin) {
            this.csPin.output(true);
            this.csPin.output(false);
        }
        const result = noWait === true ? this.spi.write(write) : await this.spi.writeWait(write);
        if (!this.fdm && this.csPin) {
            this.csPin.output(true);
            this.csPin.output(false);
        }
        if (typeof result === 'undefined') {
            return true;
        }
        if (result[0] === 1 && result[1] === 2 && result[2] === 3) {
            return mode === 'Write' ? true : result.slice(3);
        }
        else {
            throw new Error(`${mode} Error\n address: 0x${('0000' + address.toString(16).toUpperCase()).slice(-4)}  bsb: ${bsb}\n send: 0x${byteString(write)}\n receive: 0x${byteString(result)}\n`);
        }
    }
}
exports.W5500 = W5500;
/** W5500 socket definitions and constants W5500のソケットの定義や定数 */
var W5500SocketParts;
(function (W5500SocketParts) {
    /**
     * Value corresponding to socket command
     *
     * ソケットのコマンドに対応する値
     */
    W5500SocketParts.CommandCodes = {
        Open: 0x01,
        Listen: 0x02,
        Connect: 0x04,
        Disconnect: 0x08,
        Close: 0x10,
        Send: 0x20,
        SendMAC: 0x21,
        SendKeep: 0x22,
        Receive: 0x40,
    };
    /**
     * Value corresponding to socket status
     *
     * ソケットのステータスに対応する値
     */
    W5500SocketParts.StatusCodes = {
        Closed: 0x00,
        Init: 0x13,
        Listen: 0x14,
        SynSent: 0x15,
        SynReceive: 0x16,
        Established: 0x17,
        FinWait: 0x18,
        Closing: 0x1a,
        TimeWait: 0x1b,
        CloseWait: 0x1c,
        LastACK: 0x1d,
        UDP: 0x22,
        MACRAW: 0x32,
    };
    /**
     * Flags corresponding to socket interrupts
     *
     * ソケットの割り込みに対応するフラグ
     */
    W5500SocketParts.InterruptFlags = {
        SendOK: 0b10000,
        Timeout: 0b01000,
        ReceiveData: 0b00100,
        Disconnect: 0b00010,
        ConnectSuccess: 0b00001,
    };
})(W5500SocketParts = exports.W5500SocketParts || (exports.W5500SocketParts = {}));
/**
 * Class that performs and manages socket communication
 *
 * ソケット通信を行い管理するクラス
 */
class W5500Socket {
    constructor(id, ethernet) {
        /**
         * Treat received data as string (UTF-8)
         *
         * 受信データを文字列(UTF-8)として扱う
         */
        this.stringMode = false;
        /** Current protocol 現在のプロトコル */
        this.protocol = null;
        /**
         * Holds a handler that catches interrupts by message
         *
         * 割り込みをメッセージ別でキャッチするハンドラーを保持
         */
        this.interruptHandlers = {};
        /** Hold data read address データ読み込みのアドレスを保持 */
        this.rxReadDataPointer = 0;
        this.id = id;
        this.ethernet = ethernet;
    }
    /**
     * Write the socket settings and open the socket (Connect / Listen is also executed for TCP)
     *
     * ソケット設定の書き込みをし、ソケットをOpenに(TCPの時はConnect/Listenも実行)
     *
     * @param config Socket config ソケットの設定内容
     * @return Write result 書き込み結果
     */
    async initWait(config) {
        // モード設定
        let result = await this.setModeWait(config);
        // 基本設定
        if (config.sourcePort) {
            result = result && (await this.setSourcePortWait(config.sourcePort));
        }
        if (config.destIP) {
            result = result && (await this.setDestIPWait(config.destIP));
        }
        if (config.destPort) {
            result = result && (await this.setDestPortWait(config.destPort));
        }
        if (config.ipType) {
            result = result && (await this.setIPTypeOfServiceWait(config.ipType));
        }
        if (config.ttl) {
            result = result && (await this.setTTLWait(config.ttl));
        }
        if (config.rxBufferSize) {
            result = result && (await this.setRXBufferSizeWait(config.rxBufferSize));
        }
        if (config.txBufferSize) {
            result = result && (await this.setTXBufferSizeWait(config.txBufferSize));
        }
        // Open socket ソケットのオープン
        result = result && (await this.sendCommandWait('Open'));
        if (this.protocol === 'TCPClient') {
            result = result && (await this.sendCommandWait('Connect'));
        }
        if (this.protocol === 'TCPServer') {
            result = result && (await this.sendCommandWait('Listen'));
        }
        // Remember the value of rxReadDataPointer in advance
        // 事前にrxReadDataPointerの値を記憶
        this.rxReadDataPointer = await this.getRXReadDataPointerWait();
        // Interrupt handler settings 割り込みハンドラー設定
        if (config.onSendOKInterrupt) {
            this.setInterruptHandler('SendOK', config.onSendOKInterrupt);
        }
        if (config.onTimeoutInterrupt) {
            this.setInterruptHandler('Timeout', config.onTimeoutInterrupt);
        }
        if (config.onReceiveDataInterrupt) {
            this.setInterruptHandler('ReceiveData', config.onReceiveDataInterrupt);
        }
        if (config.onDisconnectInterrupt) {
            this.setInterruptHandler('Disconnect', config.onDisconnectInterrupt);
        }
        if (config.onConnectSuccessInterrupt) {
            this.setInterruptHandler('ConnectSuccess', config.onConnectSuccessInterrupt);
        }
        if (config.onAllInterrupt) {
            this.setAllInterruptHandler(config.onAllInterrupt);
        }
        return result;
    }
    /**
     * Socket termination process ソケットの終了処理
     */
    async finalizeWait() {
        switch (this.protocol) {
            case 'TCPClient':
                await this.sendCommandWait('Disconnect');
                while ((await this.getStatusWait()) !== 'Closed')
                    ;
                break;
            case 'TCPServer':
                await this.sendCommandWait('Disconnect');
                await this.sendCommandWait('Close');
                break;
            case 'UDP':
                await this.sendCommandWait('Close');
                break;
        }
        this.protocol = null;
    }
    /**
     * Send data データを送信
     *
     * @param data Raw byte data or string to send 送信するバイトデータまたは文字列
     * @return Write result 書き込み結果
     */
    sendDataWait(data) {
        return this.sendDataBaseWait(data);
    }
    /**
     * Send data, no write check データを送信、書き込みチェックなし
     *
     * @param data Raw byte data or string to send 送信するバイトデータまたは文字列
     * @return Write result 書き込み結果
     */
    sendDataFastWait(data) {
        return this.sendDataBaseWait(data, true);
    }
    /**
     * Read the received data 受信されたデータを読取
     *
     * @return Raw byte data or string to receive 受信データまたは文字列
     */
    async receiveDataWait() {
        const rxRecieveSize = await this.getRXReceiveSizeWait();
        // const rxReadDataPointer = await this.getRXReadDataPointerWait();
        const data = await this.ethernet.bigReadWait(this.rxReadDataPointer, BSB_SOCKET_RX_BUFFER(this.id), rxRecieveSize);
        this.rxReadDataPointer += rxRecieveSize;
        await this.setRXReadDataPointerWait(this.rxReadDataPointer);
        await this.sendCommandWait('Receive');
        return this.stringMode
            ? new TextDecoder().decode(Uint8Array.from(data))
            : data;
    }
    /**
     * Set a handler to catch a specific interrupt
     *
     * Run checkInterruptWait() regularly to actually catch
     *
     * 特定の割り込みをキャッチするハンドラーを設定
     *
     * 実際にキャッチするにはcheckInterrupt()を定期的に実行
     *
     * @param name The name of the interrupt to get 取得する割り込みの名前 (SendOK | Timeout | ReceiveData | Disconnect | ConnectSuccess)
     * @param handler Callback function, extra is only when name=ReceiveData and when name=ConnectSuccess and protocol=TCPServer
     *
     * コールバック関数、extraはname=ReceiveDataの時とname=ConnectSuccessかつprotocol=TCPServerの時のみ
     */
    setInterruptHandler(name, handler) {
        return (this.interruptHandlers[name] = handler);
    }
    /**
     * Set a handler to catch all interrupts
     *
     * Run checkInterruptWait() regularly to actually catch
     *
     * 全ての割り込みをキャッチするハンドラーを設定
     *
     * 実際にキャッチするにはcheckInterrupt()を定期的に実行
     *
     * @param handler Callback function, name is the type of interrupt, extra is only when name=ReceiveData and when name=ConnectSuccess and protocol=TCPServer
     *
     * コールバック関数、nameは割り込みの種類、extraはname=ReceiveDataの時とname=ConnectSuccessかつprotocol=TCPServerの時のみ
     */
    setAllInterruptHandler(handler) {
        return (this.allInterruptHandler = handler);
    }
    /**
     * Get the current protocol 現在のプロトコルを取得
     *
     * @return Protocol プロトコル
     */
    getProtocol() {
        return this.protocol;
    }
    /**
     * Set mode モードを設定
     *
     * @param config Multicast, BroardcastBlock, NoDelayACK, MulticastVer1, UnicastBlock and Protocol
     * @return Write result 書き込み結果
     */
    setModeWait(config) {
        this.protocol = config.protocol;
        this.stringMode = config.stringMode || false;
        return this.ethernet.numWriteWait(SOCKET_MODE, BSB_SOCKET_REGISTER(this.id), config.protocol === null
            ? 0
            : 0b10000000 *
                (config.multicast === true && config.protocol === 'UDP' ? 1 : 0) +
                0b01000000 *
                    (config.broardcastBlock === true && config.protocol === 'UDP'
                        ? 1
                        : 0) +
                0b00100000 *
                    (config.noDelayACK === true && config.protocol.indexOf('TCP') >= 0
                        ? 1
                        : 0) +
                0b00100000 *
                    (config.multicastVer1 === true && config.protocol === 'UDP'
                        ? 1
                        : 0) +
                0b00010000 *
                    (config.unicastBlock === true && config.protocol === 'UDP'
                        ? 1
                        : 0) +
                0b00000001 * (config.protocol.indexOf('TCP') >= 0 ? 1 : 0) +
                0b00000010 * (config.protocol === 'UDP' ? 1 : 0));
    }
    /**
     * Send command コマンドを送信
     *
     * @param command Command コマンド
     * @return Write result 書き込み結果
     */
    async sendCommandWait(command) {
        const code = W5500SocketParts.CommandCodes[command];
        if (!code) {
            throw new Error(`Unknown Command '${command}'.`);
        }
        if (this.protocol === null) {
            throw new Error('Must set Socket Mode before send the command.');
        }
        if (this.protocol.indexOf('TCP') >= 0 && 0x20 < code && code < 0x30) {
            throw new Error(`'${command}' command is only available in UDP mode.`);
        }
        if (this.protocol === 'UDP' && 0x01 < code && code < 0x10) {
            throw new Error(`'${command}' command is only available in TCP mode.`);
        }
        return await this.ethernet.numWriteWait(SOCKET_COMMAND, BSB_SOCKET_REGISTER(this.id), code);
    }
    /**
     * Check for interrupts
     *
     * If there is an interrupt, call the preset handler
     *
     * 割り込みをチェック
     *
     * 割り込みがあった場合、事前に設定されたhandlerを呼び出します
     *
     * @return Then whether you can check for interrupts
     *
     * 次に割り込みをチェックできるかどうか
     */
    async checkInterruptWait() {
        if (!this.ethernet.getSpiStatus()) {
            return;
        }
        const interrupt = await this.ethernet.numReadWait(SOCKET_INTERRUPT, BSB_SOCKET_REGISTER(this.id));
        if (interrupt === 0) {
            return this.protocol !== null;
        }
        else {
            await this.ethernet.numWriteWait(SOCKET_INTERRUPT, BSB_SOCKET_REGISTER(this.id), interrupt);
        } // リセット
        const msgList = Object.keys(W5500SocketParts.InterruptFlags).filter((msg) => (interrupt &
            W5500SocketParts.InterruptFlags[msg]) !==
            0);
        for (const m in msgList) {
            const msg = msgList[m];
            const handler = this.interruptHandlers[msg];
            if (msg === 'Timeout') {
                this.protocol = null;
            }
            console.info(`Found Interrupt on Socket ${this.id}: ${msg}\n`);
            if (handler === undefined && this.allInterruptHandler === undefined) {
                continue;
            }
            let extra;
            if (msg === 'ReceiveData') {
                extra = await this.receiveDataWait();
            }
            if (msg === 'ConnectSuccess' && this.protocol === 'TCPServer') {
                extra = new W5500Parts.DestInfo(await this.getDestIPWait(), await this.getDestPortWait());
            }
            if (handler !== undefined) {
                await handler(this, extra);
            }
            if (this.allInterruptHandler !== undefined) {
                await this.allInterruptHandler(this, msg, extra);
            }
            return true;
        }
        return this.protocol !== null && this.ethernet.getSpiStatus();
    }
    /**
     * Get Status ステータスを取得
     *
     * @return Status ステータス
     */
    async getStatusWait() {
        const status = await this.ethernet.numReadWait(SOCKET_STATUS, BSB_SOCKET_REGISTER(this.id));
        const index = Object.values(W5500SocketParts.StatusCodes).indexOf(status);
        return index < 0
            ? 'UNKNOWN'
            : Object.keys(W5500SocketParts.StatusCodes)[index];
    }
    /**
     * Set the connection source port 接続元ポートを設定
     *
     * @param port Port number ポート番号
     * @return Write result 書き込み結果
     */
    setSourcePortWait(port) {
        return this.ethernet.num2WriteWait(SOCKET_SOURCE_PORT, BSB_SOCKET_REGISTER(this.id), port);
    }
    /**
     * Set the MAC address of the connection destination (only if required by UDP)
     *
     * 接続先のMACアドレスを設定(UDPで必要な場合のみ)
     *
     * @param mac MAC address MACアドレス
     * @return Write result 書き込み結果
     */
    setDestMacAddressWait(mac) {
        return this.ethernet.macWriteWait(SOCKET_DESTINATION_HARDWARE_ADDRESS, BSB_SOCKET_REGISTER(this.id), mac);
    }
    /**
     * Set the IPv4 address of the connection destination
     *
     * 接続先のIPv4アドレスを設定
     *
     * @param ip IPv4 address IPv4アドレス
     * @return Write result 書き込み結果
     */
    setDestIPWait(ip) {
        return this.ethernet.ipWriteWait(SOCKET_DESTINATION_IP_ADDRESS, BSB_SOCKET_REGISTER(this.id), ip);
    }
    /**
     * Get the IPv4 address of the connection source (only for TCP server)
     *
     * 接続元のIPv4アドレスを取得(TCPサーバーのときのみ)
     *
     * @return IPv4 address IPv4アドレス
     */
    getDestIPWait() {
        return this.ethernet.ipReadWait(SOCKET_DESTINATION_IP_ADDRESS, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Set the port number of the connection destination
     *
     * 接続先のポート番号を設定
     *
     * @param port Port number ポート番号
     * @return Write result 書き込み結果
     */
    setDestPortWait(port) {
        return this.ethernet.num2WriteWait(SOCKET_DESTINATION_PORT, BSB_SOCKET_REGISTER(this.id), port);
    }
    /**
     * Get the port number of the connection source (only for TCP server)
     *
     * 接続元のポート番号を取得(TCPサーバーのときのみ)
     *
     * @return Port number ポート番号
     */
    getDestPortWait() {
        return this.ethernet.num2ReadWait(SOCKET_DESTINATION_PORT, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Set maximum segment size (only if required by TCP)
     *
     * 最大セグメントサイズを設定(TCPで必要な場合のみ)
     *
     * @param size 最大セグメントサイズ
     * @return Write result 書き込み結果
     */
    setMaxSegmentSizeWait(size) {
        return this.ethernet.num2WriteWait(SOCKET_MAX_SEGMENT_SIZE, BSB_SOCKET_REGISTER(this.id), size);
    }
    /**
     * Set IP service type IPサービスタイプを設定
     *
     * @param type IP service type IPサービスタイプ (1byte)
     * @return Write result 書き込み結果
     */
    setIPTypeOfServiceWait(type) {
        return this.ethernet.numWriteWait(SOCKET_IP_TYPE_OF_SERVICE, BSB_SOCKET_REGISTER(this.id), type);
    }
    /**
     * Set TTL TTLを設定
     *
     * @param ttl TTL (0\~65535)
     * @return Write result 書き込み結果
     */
    setTTLWait(ttl) {
        return this.ethernet.numWriteWait(SOCKET_TTL, BSB_SOCKET_REGISTER(this.id), ttl);
    }
    /**
     * Set buffer size バッファサイズを設定
     *
     * @param size Buffer size バッファサイズ(KB)
     * @param address Start address of write destination 書き込み先の先頭アドレス
     * @return Write result 書き込み結果
     * @hidden
     */
    setBufferSizeWait(size, address) {
        if ([0, 1, 2, 4, 8, 16].indexOf(size) < 0) {
            throw new Error('Given buffer size must be 0, 1, 2, 4, 8 or 16.');
        }
        return this.ethernet.numWriteWait(address, BSB_SOCKET_REGISTER(this.id), size);
    }
    /**
     * Set receive buffer size 受信バッファサイズを設定
     *
     * @param size Buffer size (KB) only to the power of 2, up to 16
     *
     * バッファサイズ(KB) 2の累乗のみ、16まで
     * @return Write result 書き込み結果
     */
    setRXBufferSizeWait(size) {
        return this.setBufferSizeWait(size, SOCKET_RX_BUFFER_SIZE);
    }
    /**
     * Set send buffer size 送信バッファサイズを設定
     *
     * @param size Buffer size (KB) only to the power of 2, up to 16
     *
     * バッファサイズ(KB) 2の累乗のみ、16まで
     * @return Write result 書き込み結果
     */
    setTXBufferSizeWait(size) {
        return this.setBufferSizeWait(size, SOCKET_TX_BUFFER_SIZE);
    }
    /**
     * Get free size of send buffer 送信バッファの空きサイズを取得
     *
     * @return Free size 空きサイズ
     */
    getTXFreeSizeWait() {
        return this.ethernet.num2ReadWait(SOCKET_TX_FREE_SIZE, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Get the write start address of the send buffer
     *
     * 送信バッファの書き込み開始アドレスを取得
     *
     * @return Address アドレス
     */
    getTXReadPointerWait() {
        return this.ethernet.num2ReadWait(SOCKET_TX_READ_POINTER, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Set the next write start address of the send buffer
     *
     * 送信バッファの次の書き込み開始アドレスを設定
     *
     * @param pointer Address アドレス
     * @return Write result 書き込み結果
     */
    setTXWritePointerWait(pointer) {
        return this.ethernet.num2WriteWait(SOCKET_TX_WRITE_POINTER, BSB_SOCKET_REGISTER(this.id), pointer);
    }
    /**
     * Get the length of received data 受信データの長さを取得
     *
     * @return Length 長さ
     */
    getRXReceiveSizeWait() {
        return this.ethernet.num2ReadWait(SOCKET_RX_RECEIVE_SIZE, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Get the read start address of the receive buffer
     *
     * 受信バッファの読み込み開始アドレスを取得
     *
     * @return Address アドレス
     */
    getRXReadDataPointerWait() {
        return this.ethernet.num2ReadWait(SOCLET_RX_READ_DATA_POINTER, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Set the next read start address of the receive buffer
     *
     * 受信バッファの次の読み込み開始アドレスを設定
     *
     * @param pointer Address アドレス
     * @return Write result 書き込み結果
     */
    setRXReadDataPointerWait(pointer) {
        return this.ethernet.num2WriteWait(SOCLET_RX_READ_DATA_POINTER, BSB_SOCKET_REGISTER(this.id), pointer);
    }
    /**
     * Get the write start address of the receive buffer
     *
     * 受信バッファの書き込み開始アドレスを取得
     *
     * @return Address アドレス
     */
    getRXWritePointerWait() {
        return this.ethernet.num2ReadWait(SOCKET_RX_WRITE_POINTER, BSB_SOCKET_REGISTER(this.id));
    }
    /**
     * Set IP header fragment IPヘッダーのフラグメントを設定
     *
     * @param fragment IP header fragment IPヘッダーのフラグメント (0x0000\~0xFFFF)
     * @return Write result 書き込み結果
     */
    setFragmentWait(fragment) {
        return this.ethernet.num2WriteWait(SOCKET_FRAGMENT, BSB_SOCKET_REGISTER(this.id), fragment);
    }
    /**
     * Set keep-alive transmission interval (only if TCP requires)
     *
     * keep-aliveの送信間隔を設定(TCPで必要な場合のみ)
     *
     * @param time keep-alive transmission interval (sec) (0\~1275)
     *
     * keep-alive 送信間隔(秒)(0\~1275)
     * @return Write result 書き込み結果
     */
    setKeepAliveTimerWait(time) {
        return this.ethernet.numWriteWait(SOCKET_KEEP_ALIVE_TIMER, BSB_SOCKET_REGISTER(this.id), time / 5);
    }
    /**
     * Send data データを送信
     *
     * @param data Raw byte data to send or string 送信するバイトデータまたは文字列
     * @param noWait Do not use spi.writeWait() when writing data
     *
     * データ書き込み時、spi.writeWait()を使用しない
     * @hidden
     */
    async sendDataBaseWait(data, noWait) {
        const d = typeof data === 'string'
            ? Array.from(new TextEncoder().encode(data))
            : data;
        const txReadPointer = await this.getTXReadPointerWait();
        const result = await this.ethernet.bigWriteWait(txReadPointer, BSB_SOCKET_TX_BUFFER(this.id), d, noWait);
        await this.setTXWritePointerWait(txReadPointer + d.length);
        await this.sendCommandWait('Send');
        return result;
    }
}
exports.W5500Socket = W5500Socket;
exports.default = W5500;


/***/ }),

/***/ "./dist/src/parts/GPS/GYSFDMAXB/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.GYSFDMAXB
 */
Object.defineProperty(exports, "__esModule", { value: true });
class GYSFDMAXB {
    constructor() {
        this.displayName = 'gps';
        this.displayIoNames = { txd: 'txd', rxd: 'rxd', Opps: '1pps' };
        this.on1pps = null;
        this.last1pps = 0;
        this.keys = ['vcc', 'txd', 'rxd', 'gnd', 'Opps'];
        this.requiredKeys = ['txd', 'rxd'];
        this.ioKeys = this.keys;
    }
    // -------------------
    get latitude() {
        return this.nmea2dd(this._latitude);
    }
    get longitude() {
        return this.nmea2dd(this._longitude);
    }
    static info() {
        return {
            name: 'GYSFDMAXB',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.tx = this.params.txd;
        this.rx = this.params.rxd;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        this.Opps = this.params.Opps;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.txd,
            rx: this.params.rxd,
            baud: 9600,
            drive: '3v',
        });
        this.editedData = {};
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        this.on1pps = null;
        this.last1pps = 0;
        this.gpsInfo = {};
        this.gpsInfo._sentenceType = {
            GPGGA: 0x0001,
            GPGSA: 0x0002,
            GPGSV: 0x0004,
            GPRMC: 0x0008,
            GPVTG: 0x0010,
            GPZDA: 0x0020,
        };
        this.gpsInfo.status = 'V';
        this.gpsInfo.sentences = new Set(); // Set specifying sentence of MNEA from which data have been obtained
        this.gpsInfo.satelliteInfo = {
            satellites: [],
            inView: 0,
        };
    }
    start1pps(callback) {
        this.on1pps = callback;
        if (callback) {
            this.last1pps = 2;
            this.obniz.getAD(this.Opps).start((voltage) => {
                const vol = Math.round(voltage);
                if (vol !== this.last1pps) {
                    this.last1pps = vol;
                    if (vol === 0 && this.on1pps) {
                        this.on1pps();
                    }
                }
            });
        }
        else {
            this.obniz.getAD(this.Opps).end();
        }
    }
    readSentence() {
        let results = [];
        if (this.uart.isDataExists()) {
            const pos = this.uart.received.indexOf(0x0a);
            if (pos >= 0) {
                results = this.uart.received.slice(0, pos - 1);
                this.uart.received.splice(0, pos + 1);
                return this.uart.tryConvertString(results);
            }
        }
        return '';
    }
    getEditedData() {
        let n;
        let utc;
        let format;
        let sentence = this.readSentence();
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        while (sentence.length > 0) {
            const part = sentence.split(',');
            if (sentence.slice(-4, -3) !== ',') {
                const st = part[part.length - 1].slice(0, -3);
                part.push(part[part.length - 1].slice(-3));
                part[part.length - 2] = st;
            }
            this.editedData.sentence = part.join(',');
            switch (part[0]) {
                case '$GPGGA':
                    this.editedData.GPGGA = part;
                    break;
                case '$GPGLL':
                    this.editedData.GPGLL = part;
                    break;
                case '$GPGSA':
                    this.editedData.GPGSA = part;
                    break;
                case '$GPGSV':
                    n = Number(part[2]);
                    if (n > this.editedData.GPGSV.length) {
                        while (n > this.editedData.GPGSV.length) {
                            this.editedData.GPGSV.push([]);
                        }
                    }
                    this.editedData.GPGSV[n - 1] = part;
                    break;
                case '$GPRMC':
                    this.editedData.GPRMC = part;
                    break;
                case '$GPVTG':
                    this.editedData.GPVTG = part;
                    break;
                case '$GPZDA':
                    this.editedData.GPZDA = part;
                    utc =
                        part[4] +
                            '/' +
                            part[3] +
                            '/' +
                            part[2] +
                            ' ' +
                            part[1].substring(0, 2) +
                            ':' +
                            part[1].substring(2, 4) +
                            ':' +
                            part[1].substring(4, 6) +
                            ' +00:00';
                    this.editedData.timestamp = new Date(utc);
                    break;
                default:
                    format = part[0].substr(1);
                    this.editedData[format] = part;
            }
            this.editedData.enable = true;
            sentence = this.readSentence();
        }
        return this.editedData;
    }
    getGpsInfo(editedData) {
        const NMEA_SATINSENTENCE = 4;
        const NMEA_MAXSAT = 12;
        editedData = editedData || this.getEditedData();
        this.gpsInfo.status = 'V';
        if (editedData.enable) {
            if (editedData.GPGGA) {
                const gga = editedData.GPGGA;
                this.gpsInfo.gpsQuality = parseFloat(gga[6]); // Fix Quality: 0 = Invalid, 1 = GPS fix, 2 = DGPS fix
                this.gpsInfo.hdop = parseFloat(gga[8]); // Horizontal Dilution of Precision (HDOP)
                this.gpsInfo.altitude = parseFloat(gga[9]); // Antenna Altitude meters above mean sea level
                const latitude = this.nmea2dd(parseFloat(gga[2]));
                this.gpsInfo.latitude = gga[3] === 'N' ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(gga[4]));
                this.gpsInfo.longitude = gga[5] === 'E' ? longitude : -longitude;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGGA);
            }
            if (editedData.GPGSV) {
                for (let n = 0; n < editedData.GPGSV.length; n++) {
                    if (editedData.GPGSV[n]) {
                        const gsv = editedData.GPGSV[n].map((v) => parseFloat(v));
                        const pack_count = gsv[1];
                        const pack_index = gsv[2];
                        const sat_count = gsv[3];
                        if (pack_index > pack_count) {
                            continue;
                        }
                        this.gpsInfo.satelliteInfo.inView = sat_count;
                        let nsat = (pack_index - 1) * NMEA_SATINSENTENCE;
                        nsat =
                            nsat + NMEA_SATINSENTENCE > sat_count
                                ? sat_count - nsat
                                : NMEA_SATINSENTENCE;
                        for (let isat = 0; isat < nsat; ++isat) {
                            const isi = (pack_index - 1) * NMEA_SATINSENTENCE + isat;
                            if (this.gpsInfo.satelliteInfo.satellites.length <= isi) {
                                this.gpsInfo.satelliteInfo.satellites.push({});
                            }
                            const isatn = isat * NMEA_SATINSENTENCE;
                            this.gpsInfo.satelliteInfo.satellites[isi] = {
                                id: gsv[isatn + 4],
                                elevation: gsv[isatn + 5],
                                azimuth: gsv[isatn + 6],
                                snr: gsv[isatn + 7],
                                inUse: false,
                            };
                        }
                        this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSV);
                    }
                }
            }
            if (editedData.GPGSA) {
                const gsa = editedData.GPGSA;
                let nuse = 0;
                this.gpsInfo.fixMode = parseFloat(gsa[2]); // Fix Mode: 1=Fix not available, 2=2D, 3=3D
                this.gpsInfo.pdop = parseFloat(gsa[15]); // PDOP: Position Dilution of Precision
                this.gpsInfo.hdop = parseFloat(gsa[16]); // HDOP: Horizontal Dilution of Precision
                this.gpsInfo.vdop = parseFloat(gsa[17]); // VDOP: Vertical Dilution of Position
                for (let i = 0; i < NMEA_MAXSAT; ++i) {
                    for (let j = 0; j < this.gpsInfo.satelliteInfo.inView; ++j) {
                        if (this.gpsInfo.satelliteInfo.satellites[j] &&
                            gsa[i + 3] === this.gpsInfo.satelliteInfo.satellites[j].id) {
                            this.gpsInfo.satelliteInfo.satellites[j].inUse = true;
                            nuse++;
                        }
                    }
                }
                this.gpsInfo.satelliteInfo.inUse = nuse;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSA);
            }
            if (editedData.GPRMC) {
                const rmc = editedData.GPRMC;
                this.gpsInfo.status = rmc[2]; // Status Active or Void
                const latitude = this.nmea2dd(parseFloat(rmc[3]));
                this.gpsInfo.latitude = rmc[4] === 'N' ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(rmc[5]));
                this.gpsInfo.longitude = rmc[6] === 'E' ? longitude : -longitude;
                const NMEA_TUD_KNOTS = 1.852; // 1knot=1.852km/h
                this.gpsInfo.speed = parseFloat(rmc[7]) * NMEA_TUD_KNOTS; // unit: km/h
                this.gpsInfo.direction = rmc[8];
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPRMC);
            }
            if (editedData.GPVTG) {
                const vtg = editedData.GPVTG;
                this.gpsInfo.direction = parseFloat(vtg[1]);
                this.gpsInfo.declination = parseFloat(vtg[3]);
                this.gpsInfo.speed = parseFloat(vtg[7]);
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPVTG);
            }
            if (editedData.GPZDA) {
                this.gpsInfo.utc = editedData.timestamp;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPZDA);
            }
        }
        return this.gpsInfo;
    }
    _mneaTo(format, value) {
        let result = this.nmea2dd(value);
        if (typeof format === 'string') {
            switch (format.toUpperCase()) {
                case 'DMS':
                    result = this.nmea2dms(value);
                    break;
                case 'DM':
                    result = this.nmea2dm(value);
                    break;
                case 'S':
                    result = this.nmea2s(value);
                    break;
                default:
            }
        }
        return result;
    }
    latitudeTo(format) {
        return this._mneaTo(format, this._latitude);
    }
    longitudeTo(format) {
        return this._mneaTo(format, this._longitude);
    }
    status2string(status) {
        status = status || this.status;
        if (status === 'A') {
            return 'Active';
        }
        if (status === 'V') {
            return 'Void';
        }
        return status;
    }
    fixMode2string(fixMode) {
        fixMode = fixMode || this.fixMode;
        if (fixMode === 1) {
            return 'Fix not available';
        }
        if (fixMode === 2) {
            return '2D';
        }
        if (fixMode === 3) {
            return '3D';
        }
        return fixMode;
    }
    gpsQuality2string(gpsQuality) {
        gpsQuality = gpsQuality || this.gpsQuality;
        if (gpsQuality === 0) {
            return 'Invalid';
        }
        if (gpsQuality === 1) {
            return 'GPS fix';
        }
        if (gpsQuality === 2) {
            return 'DGPS fix';
        }
        return gpsQuality;
    }
    // --- latitude/longitude MNEA format change to each unit
    nmea2dms(val) {
        // NMEA format to DMS format string (999° 99'99.9")
        val = parseFloat(val);
        const d = Math.floor(val / 100);
        const m = Math.floor((val / 100.0 - d) * 100.0);
        const s = ((val / 100.0 - d) * 100.0 - m) * 60;
        return d + '°' + m + "'" + s.toFixed(1) + '"';
    }
    nmea2dm(val) {
        // NMEA format to DM format string (999° 99.9999')
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = (val / 100.0 - d) * 100.0;
        return d + '°' + m.toFixed(4) + "'";
    }
    nmea2dd(val) {
        // NMEA format to DD format decimal (999.999999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return parseFloat((d + m + s).toFixed(6));
    }
    nmea2s(val) {
        // NMEA format to S format decimal (99999.9999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return (d + m + s) / (1.0 / 60.0 / 60.0);
    }
}
exports.default = GYSFDMAXB;


/***/ }),

/***/ "./dist/src/parts/GasSensor/CCS811/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.CCS811
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class CCS811 extends i2cParts_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x5b,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        this.requiredKeys = [];
        this.keys = [
            'vcc',
            'gnd',
            'scl',
            'sda',
            'nwak',
            'nrst',
            'nint',
            'i2c',
            'add',
            'address',
        ];
        this.ioKeys = ['vcc', 'gnd', 'scl', 'sda', 'nwak', 'nrst', 'nint', 'add'];
        this.commands = {};
        this.commands.addresses = {
            CCS811_STATUS: 0x00,
            CCS811_MEAS_MODE: 0x01,
            CCS811_ALG_RESULT_DATA: 0x02,
            CCS811_RAW_DATA: 0x03,
            CCS811_ENV_DATA: 0x05,
            CCS811_NTC: 0x06,
            CCS811_THRESHOLDS: 0x10,
            CCS811_BASELINE: 0x11,
            CCS811_HW_ID: 0x20,
            CCS811_HW_VERSION: 0x21,
            CCS811_FW_BOOT_VERSION: 0x23,
            CCS811_FW_APP_VERSION: 0x24,
            CCS811_ERROR_ID: 0xe0,
            CCS811_APP_START: 0xf4,
            CCS811_SW_RESET: 0xff,
        };
    }
    static info() {
        return {
            name: 'CCS811',
        };
    }
    i2cInfo() {
        return this.i2cinfo;
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, null, '3v');
        this.obniz.setVccGnd(null, this.params.gnd, '5v');
        this.obniz.wait(10);
        this.address = 0x5b;
        if (this.params.address === 0x5b) {
            this.address = 0x5b;
        }
        else if (this.params.address === 0x5a) {
            this.address = 0x5a;
        }
        else if (this.params.address !== undefined) {
            throw new Error('address must be 0x5a or 0x5b');
        }
        if (obniz.isValidIO(this.params.add)) {
            this.io_add = obniz.getIO(this.params.add);
            this.io_add.drive('3v');
            this.io_add.output(this.address === 0x5a ? false : true);
        }
        if (this.params.i2c !== undefined) {
            this.i2c = this.params.i2c;
        }
        else {
            this.params.clock = this.params.clock || 100 * 1000;
            this.params.mode = 'master';
            this.params.pull = '3v';
            this.i2c = obniz.getI2CWithConfig(this.params);
        }
        this.obniz.wait(10);
    }
    async configWait() {
        // restart
        const readCheck = await this.readWait(this.commands.addresses.CCS811_HW_ID, 1);
        if (readCheck[0] !== 0x81) {
            console.log('readCheck error ' + readCheck);
        }
        await this.obniz.wait(10);
        console.log('restarted');
        // reset
        this.write(this.commands.addresses.CCS811_SW_RESET, [
            0x11,
            0xe5,
            0x72,
            0x8a,
        ]);
        await this.obniz.wait(10);
        console.log('reset');
        // checkForStatusError
        const status = await this.readWait(this.commands.addresses.CCS811_STATUS, 1);
        console.log('Status: ' + status);
        this.start();
        await this.setDriveModeWait(1); // Read every second
        await this.obniz.wait(10);
        console.log('config done');
    }
    start() {
        this.write(this.commands.addresses.CCS811_APP_START, []);
    }
    // Mode 0 = Idle
    // Mode 1 = read every 1s
    // Mode 2 = every 10s
    // Mode 3 = every 60s
    // Mode 4 = RAW mode
    async setDriveModeWait(mode) {
        if (mode > 4) {
            mode = 4;
        } // sanitize input
        let value = await this.getMeasModeWait();
        value &= ~(0b00000111 << 4); // Clear DRIVE_MODE bits
        value |= mode << 4; // Mask in mode
        this.write(this.commands.addresses.CCS811_MEAS_MODE, value);
    }
    async getMeasModeWait() {
        const meas_mode = await this.readWait(this.commands.addresses.CCS811_MEAS_MODE, 1); // Read what's currently there
        return meas_mode[0];
    }
    async getDriveModeWait() {
        const meas_mode = await this.getMeasModeWait();
        let drive_mode = meas_mode >>> 4;
        if (drive_mode > 8) {
            drive_mode -= 8;
        }
        return drive_mode;
    }
    async setEnvironmentalDataWait(relativeHumidity, temperature) {
        // Check for invalid temperatures
        if (temperature < -25 || temperature > 50) {
            console.log('temperature is out of range');
        }
        // Check for invalid humidity
        if (relativeHumidity < 0 || relativeHumidity > 100) {
            console.log('humidity is out of range');
        }
        const rH = relativeHumidity * 1000; // 42.348 becomes 42348
        let temp = temperature * 1000; // 23.2 becomes 23200
        const envData = [];
        envData[0] = Math.round((rH + 250) / 500);
        envData[1] = 0; // CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
        temp += 25000; // Add the 25C offset
        envData[2] = Math.round((temp + 250) / 500);
        envData[3] = 0;
        // console.log("envData: ", envData);
        this.write(this.commands.addresses.CCS811_ENV_DATA, envData);
    }
    // Checks to see if DATA_READ flag is set in the status register
    async checkAvailableDataWait() {
        const value = (await this.readWait(this.commands.addresses.CCS811_STATUS, 1))[0];
        return Boolean(value & (1 << 3));
    }
    async readAlgorithmResultsWait() {
        const data = await this.readWait(this.commands.addresses.CCS811_ALG_RESULT_DATA, 8);
        // Data ordered:
        // co2MSB, co2LSB, tvocMSB, tvocLSB
        const eCO2 = (data[0] << 8) | data[1];
        const TVOC = (data[2] << 8) | data[3];
        return { eCO2, TVOC };
    }
    async geteCO2Wait() {
        return (await this.readAlgorithmResultsWait()).eCO2;
    }
    async getTVOCWait() {
        return (await this.readAlgorithmResultsWait()).TVOC;
    }
    wake() {
        this.io_nwak = this.obniz.getIO(this.params.nwak);
        this.io_nwak.drive('3v');
        this.io_nwak.output(false);
    }
    sleep() {
        this.io_nwak = this.obniz.getIO(this.params.nwak);
        this.io_nwak.drive('3v');
        this.io_nwak.output(true);
    }
    async hwResetWait() {
        this.io_nrst = this.obniz.getIO(this.params.nrst);
        this.io_nrst.drive('3v');
        this.io_nrst.output(false);
        await this.obniz.wait(10);
        this.io_nrst.output(true);
    }
}
exports.default = CCS811;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MH_Z19B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
/**
 * @packageDocumentation
 * @module Parts.MH_Z19B
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MH_Z19B {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sensor_tx', 'sensor_rx'];
        this.requiredKeys = ['sensor_tx', 'sensor_rx'];
        this.ioKeys = this.keys;
        this.displayName = 'co2';
        this.displayIoNames = { sensor_tx: 'sensorTx', rx: 'sensorRx' };
        this.rxbuf = Buffer.alloc(9);
        this.modes = {
            Read: 0x86,
            CalibZ: 0x87,
            CalibS: 0x88,
            ACBOnOff: 0x79,
            RangeSet: 0x99,
        };
        this.rangeType = {
            2000: [0x00, 0x00, 0x00, 0x07, 0xd0],
            5000: [0x00, 0x00, 0x00, 0x13, 0x88],
            10000: [0x00, 0x00, 0x00, 0x27, 0x10],
        };
    }
    static info() {
        return {
            name: 'MH_Z19B',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        this.my_tx = this.params.sensor_rx;
        this.my_rx = this.params.sensor_tx;
        this.obniz.setVccGnd(this.vcc, this.gnd, '5v');
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.my_tx,
            rx: this.my_rx,
            baud: 9600,
        });
    }
    heatWait(seconds) {
        if (typeof seconds === 'number' && seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 3 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
    async getWait() {
        await this.requestReadConcentraiton();
        await this.obniz.wait(10);
        if (this.uart.isDataExists()) {
            const data = this.uart.readBytes();
            // console.log("received data");
            // console.log(data);
            const val = await this.getCO2Concentration(data);
            return val;
        }
        else {
            console.log('cannot receive data');
            throw new Error('cannot receive data');
        }
    }
    calibrateZero() {
        const command = this.makeRequestCmd('CalibZ', [
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
        ]);
        this.uart.send(command);
        // console.log('send a Zero Calibration command');
    }
    calibrateSpan(ppm = 2000) {
        if (ppm < 1000) {
            return;
        }
        const span_byte = Buffer.alloc(2);
        span_byte[0] = ppm / 256;
        span_byte[1] = ppm % 256;
        const command = this.makeRequestCmd('CalibS', [
            span_byte[0],
            span_byte[1],
            0x00,
            0x00,
            0x00,
        ]);
        this.uart.send(command);
        // console.log('send a Span Calibration command');
    }
    setAutoCalibration(autoCalibration = true) {
        let command;
        if (autoCalibration) {
            command = this.makeRequestCmd('ACBOnOff', [0xa0, 0x00, 0x00, 0x00, 0x00]);
            console.log('set an Auto Calibration ON');
        }
        else {
            command = this.makeRequestCmd('ACBOnOff', [0x00, 0x00, 0x00, 0x00, 0x00]);
            console.log('set an Auto Calibration OFF');
        }
        this.uart.send(command);
    }
    setDetectionRange(range) {
        let command;
        if (range in this.rangeType) {
            command = this.makeRequestCmd('RangeSet', this.rangeType[range]);
            console.log('Configured Range : ' + String(range));
        }
        else {
            console.log('invalid range value');
            command = this.makeRequestCmd('RangeSet', this.rangeType[5000]);
        }
        this.uart.send(command);
    }
    checkSum(res8) {
        let sum = 0;
        for (let i = 1; i < 8; i++) {
            sum += res8[i];
        }
        sum = 255 - (sum % 256) + 1;
        return sum;
    }
    makeRequestCmd(mode, databox = [0x00, 0x00, 0x00, 0x00, 0x00]) {
        const _buffer = Buffer.alloc(9);
        _buffer[0] = 0xff;
        _buffer[1] = 0x01;
        _buffer[2] = this.modes[mode];
        for (let i = 3; i < 8; i++) {
            _buffer[i] = databox[i - 3];
        }
        _buffer[8] = this.checkSum(_buffer);
        return Array.from(_buffer);
    }
    requestReadConcentraiton() {
        const command = this.makeRequestCmd('Read', [
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
        ]);
        // console.log("being sent request command");
        // console.log(command);
        this.uart.send(command);
    }
    getCO2Concentration(data) {
        let co2Concentration = 0;
        const status = this.checkResponseData(data);
        if (status) {
            co2Concentration = this.rxbuf[2] * 256 + this.rxbuf[3];
        }
        else {
            console.log('checksum error');
        }
        this.rxbuf = [];
        return co2Concentration;
    }
    checkResponseData(data) {
        let cs_result = false;
        if (data.length === 9) {
            for (let i = 0; i < data.length; i++) {
                this.rxbuf[i] = data[i];
            }
            if (this.checkSum(this.rxbuf) === this.rxbuf[8]) {
                cs_result = true;
            }
            else {
                cs_result = false;
            }
        }
        data = [];
        return cs_result;
    }
}
exports.default = MH_Z19B;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ135/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ135
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ135 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ135',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ135;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ2/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ2
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ2 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ2',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ2;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ3
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ3 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ3',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ3;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ4/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ4
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ4 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ4',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ4;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ5/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ5
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ5 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ5',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ5;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ6/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ6
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ6 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ6',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ6;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ7/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ7
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ7 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ7',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ7;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ8/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ8
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ8 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ8',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ8;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ9/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module Parts.MQ9
 */
const MQGas_1 = __importDefault(__webpack_require__("./dist/src/parts/GasSensor/MQGas/index.js"));
class MQ9 extends MQGas_1.default {
    static info() {
        return {
            name: 'MQ9',
        };
    }
    constructor() {
        super();
    }
}
exports.default = MQ9;


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQGas/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MQGas
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MQGasSensor {
    constructor() {
        this.keys = ['gnd', 'vcc', 'do', 'ao'];
        this.requiredKeys = [];
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: 'MQGas',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === 'function') {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === 'number' &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === 'function') {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === 'function') {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, '5v');
    }
    heatWait(seconds) {
        this.startHeating();
        if (typeof seconds === 'number' && seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQGasSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_3AxisAccelerometer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_3AxisAccelerometer
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_3AxisAccelerometer {
    constructor() {
        this.displayName = '3axis';
        this.displayIoNames = { sda: 'sda', scl: 'scl' };
        this.address = 0x53;
        this.keys = ['gnd', 'vcc', 'sda', 'scl', 'grove'];
        this.requiredKeys = [];
        this.ioKeys = this.keys;
        this.regAdrs = {};
        this.regAdrs.POWER_CTL = 0x2d;
        this.regAdrs.THRESH_ACT = 0x24;
        this.regAdrs.THRESH_INACT = 0x25;
        this.regAdrs.TIME_INACT = 0x26;
        this.regAdrs.ACT_INACT_CTL = 0x27;
        this.regAdrs.TAP_AXES = 0x2a;
        this.regAdrs.THRESH_TAP = 0x1d;
        this.regAdrs.DUR = 0x21;
        this.regAdrs.LATENT = 0x22;
        this.regAdrs.WINDOW = 0x23;
        this.regAdrs.THRESH_FF = 0x28;
        this.regAdrs.TIME_FF = 0x29;
        this.regAdrs.INT_MAP = 0x2f;
        this.regAdrs.INT_ENABLE = 0x2e;
        this.regAdrs.DATAX0 = 0x32;
        this.regAdrs.INT_DATA_READY_BIT = 0x07;
        this.regAdrs.INT_SINGLE_TAP_BIT = 0x06;
        this.regAdrs.INT_DOUBLE_TAP_BIT = 0x05;
        this.regAdrs.INT_ACTIVITY_BIT = 0x04;
        this.regAdrs.INT_INACTIVITY_BIT = 0x03;
        this.regAdrs.INT_FREE_FALL_BIT = 0x02;
        this.regAdrs.INT_WATERMARK_BIT = 0x01;
        this.regAdrs.INT_OVERRUNY_BIT = 0x00;
        this.constVal = {};
        this.constVal.gainX = 0.0037639;
        this.constVal.gainY = 0.00376009;
        this.constVal.gainZ = 0.00349265;
        this.constVal.INT1_PIN = 0x00;
        this.constVal.INT2_PIN = 0x01;
    }
    static info() {
        return {
            name: 'Grove_3AxisAccelerometer',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            this.i2c = this.params.grove.getI2c(400000, '5v');
        }
        else {
            this.vcc = this.params.vcc;
            this.gnd = this.params.gnd;
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.params.clock = 400000;
            this.params.mode = 'master';
            this.i2c = obniz.getI2CWithConfig(this.params);
        }
        this.obniz.wait(100).then(() => {
            return this.initWait();
        });
    }
    async initWait() {
        // power on
        this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 0]);
        this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 16]);
        this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 8]);
        this.i2c.write(this.address, [this.regAdrs.THRESH_ACT, 75]); // set activity threshold 0~255
        this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 75]); // set inactivity threshold 0~255
        this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 10]); // set time inactivity 0~255
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 6, 1); // setActivityX
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 5, 1); // setActivityY
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 4, 1); // setActivityZ
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 2, 1); // setInactivityX
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 1, 1); // setInactivityY
        await this.setRegisterBitWait(this.regAdrs.ACT_INACT_CTL, 0, 1); // setInactivityZ
        await this.setRegisterBitWait(this.regAdrs.TAP_AXES, 2, 0); // setTapDetectionOnX
        await this.setRegisterBitWait(this.regAdrs.TAP_AXES, 1, 0); // setTapDetectionOnY
        await this.setRegisterBitWait(this.regAdrs.TAP_AXES, 0, 1); // setTapDetectionOnZ
        this.i2c.write(this.address, [this.regAdrs.THRESH_TAP, 50]); // setTapThreshold
        this.i2c.write(this.address, [this.regAdrs.DUR, 15]); // setTapDuration
        this.i2c.write(this.address, [this.regAdrs.LATENT, 80]); // setDoubleTapLatency
        this.i2c.write(this.address, [this.regAdrs.WINDOW, 200]); // setDoubleTapWindow
        this.i2c.write(this.address, [this.regAdrs.THRESH_FF, 7]); // setFreeFallThreshold
        this.i2c.write(this.address, [this.regAdrs.TIME_FF, 45]); // setFreeFallDuration
        // setInterruptMapping
        await this.setInterruptMappingWait(this.regAdrs.INT_SINGLE_TAP_BIT, this.constVal.INT1_PIN);
        await this.setInterruptMappingWait(this.regAdrs.INT_DOUBLE_TAP_BIT, this.constVal.INT1_PIN);
        await this.setInterruptMappingWait(this.regAdrs.INT_FREE_FALL_BIT, this.constVal.INT1_PIN);
        await this.setInterruptMappingWait(this.regAdrs.INT_ACTIVITY_BIT, this.constVal.INT1_PIN);
        await this.setInterruptMappingWait(this.regAdrs.INT_INACTIVITY_BIT, this.constVal.INT1_PIN);
        // setInterrupt
        await this.setInterruptWait(this.regAdrs.INT_SINGLE_TAP_BIT, 1);
        await this.setInterruptWait(this.regAdrs.INT_DOUBLE_TAP_BIT, 1);
        await this.setInterruptWait(this.regAdrs.INT_FREE_FALL_BIT, 1);
        await this.setInterruptWait(this.regAdrs.INT_ACTIVITY_BIT, 1);
        await this.setInterruptWait(this.regAdrs.INT_INACTIVITY_BIT, 1);
    }
    /**
     * @deprecated
     * @param regAddr
     * @param bitPos
     * @param state
     */
    setRegisterBit(regAddr, bitPos, state) {
        return this.setRegisterBitWait(regAddr, bitPos, state);
    }
    async setRegisterBitWait(regAddr, bitPos, state) {
        this.i2c.write(this.address, [regAddr]);
        let b = await this.i2c.readWait(this.address, 1);
        if (state) {
            b = b | (1 << bitPos); // forces nth bit of b to be 1.  all other bits left alone.
        }
        else {
            b = b & ~(1 << bitPos); // forces nth bit of b to be 0.  all other bits left alone.
        }
        this.i2c.write(this.address, [b]);
    }
    /**
     * @deprecated
     * @param interruptBit
     * @param interruptPin
     */
    setInterruptMapping(interruptBit, interruptPin) {
        return this.setInterruptMappingWait(interruptBit, interruptPin);
    }
    async setInterruptMappingWait(interruptBit, interruptPin) {
        await this.setRegisterBitWait(this.regAdrs.INT_MAP, interruptBit, interruptPin);
    }
    /**
     * @deprecated
     */
    setInterrupt(interruptBit, state) {
        return this.setInterruptWait(interruptBit, state);
    }
    async setInterruptWait(interruptBit, state) {
        await this.setRegisterBitWait(this.regAdrs.INT_ENABLE, interruptBit, state);
    }
    signHandling(val) {
        const sign = val >> 15;
        if (sign) {
            val = -(0xffff - val);
        }
        return val;
    }
    /**
     * @deprecated
     */
    getRawVal() {
        return this.getRawValWait();
    }
    async getRawValWait() {
        this.i2c.write(this.address, [this.regAdrs.DATAX0]);
        const buff = await this.i2c.readWait(this.address, 6);
        const rawVal = [0, 0, 0];
        rawVal[0] = this.signHandling((buff[1] << 8) | buff[0]);
        rawVal[1] = this.signHandling((buff[3] << 8) | buff[2]);
        rawVal[2] = this.signHandling((buff[5] << 8) | buff[4]);
        return rawVal;
    }
    async getWait() {
        const accelVal = [0, 0, 0];
        const raw = await this.getRawVal();
        accelVal[0] = raw[0] * this.constVal.gainX;
        accelVal[1] = raw[1] * this.constVal.gainY;
        accelVal[2] = raw[2] * this.constVal.gainZ;
        return accelVal;
    }
}
exports.default = Grove_3AxisAccelerometer;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Button/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_Button
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Button {
    constructor() {
        this.isPressed = null;
        this.onchange = null;
        this.onChangeForStateWait = (pressed) => {
            // do nothing.
        };
        this.keys = ['signal', 'gnd', 'vcc', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_Button',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveIOs = this.params.grove.getDigital('5v');
            this.io_signal = groveIOs.primary;
        }
        else {
            this.io_signal = obniz.getIO(this.params.signal);
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        }
        this.io_signal.pull('5v');
        this.io_signal.input((value) => {
            this.isPressed = value;
            if (this.onchange) {
                this.onchange(value);
            }
            this.onChangeForStateWait(value);
        });
    }
    async isPressedWait() {
        return await this.io_signal.inputWait();
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                        // do nothing.
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Grove_Button;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Buzzer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_Buzzer
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Buzzer {
    constructor() {
        this.keys = ['signal', 'gnd', 'vcc', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_Buzzer',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            this.pwm = this.params.grove.getPwm();
        }
        else {
            this.obniz = obniz;
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.pwm = obniz.getFreePwm();
            this.pwm.start({ io: this.params.signal });
        }
    }
    play(freq) {
        if (typeof freq !== 'number') {
            throw new Error('freq must be a number');
        }
        freq = Math.floor(freq);
        if (freq > 0) {
            this.pwm.freq(freq);
            this.pwm.pulse((1 / freq / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Grove_Buzzer;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_DistanceSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts..Grove_DistanceSensor
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GP2Y0A21YK0F_1 = __importDefault(__webpack_require__("./dist/src/parts/DistanceSensor/GP2Y0A21YK0F/index.js"));
class Grove_DistanceSensor extends GP2Y0A21YK0F_1.default {
    static info() {
        return {
            name: 'Grove_DistanceSensor',
        };
    }
    constructor() {
        super();
        this.keys = ['gnd', 'vcc', 'signal', 'grove'];
        this.requiredKeys = [];
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            const groveAd = this.params.grove.getAnalog('5v', 'secondaryOnly');
            this.ad_signal = groveAd.secondary;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.ad_signal = obniz.getAD(this.params.signal);
        }
    }
}
exports.default = Grove_DistanceSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_EARTH/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_EARTHOptionsA
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_EARTH {
    constructor() {
        this.keys = ['vcc', 'aout', 'dout', 'gnd', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_EARTH',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            const groveIOs = this.params.grove.getAnalogDigital();
            this.ad = groveIOs.analog;
            this.io = groveIOs.digital;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.ad = obniz.getAD(this.params.aout);
            this.io = obniz.getIO(this.params.dout);
        }
        this.ad.start((value) => {
            this.value = value;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
    async getHumidityWait() {
        return await this.ad.getWait();
    }
    async getDigitalHumidityWait() {
        return await this.io.inputWait();
    }
}
exports.default = Grove_EARTH;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_EarHeartRate/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_EarHeartRate
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_EarHeartRate {
    constructor() {
        this.displayIoNames = {
            vcc: 'vcc',
            gnd: 'gnd',
            signal: 'signal',
        };
        this.interval = 5;
        this.duration = 2.5 * 1000;
        this.keys = ['signal', 'gnd', 'vcc', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_EarHeartRate',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            this.signal = this.params.grove.pin1;
            this.params.grove.getDigital('5v');
        }
        else {
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.signal = this.params.signal;
        }
    }
    start(callback) {
        this.obniz.logicAnalyzer.start({
            io: this.signal,
            interval: this.interval,
            duration: this.duration,
        });
        this.obniz.logicAnalyzer.onmeasured = (array) => {
            const edges = [];
            for (let i = 0; i < array.length - 1; i++) {
                if (array[i] === 0 && array[i + 1] === 1) {
                    edges.push(i);
                }
            }
            if (edges.length >= 2) {
                let between = 0;
                let pulseMin = 0;
                between = ((edges[1] - edges[0]) * this.interval) / 1000.0;
                pulseMin = 60 / between;
                callback(pulseMin);
            }
        };
    }
    getWait() {
        return new Promise((resolve) => {
            this.start((rate) => {
                resolve(rate);
            });
        });
    }
}
exports.default = Grove_EarHeartRate;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_GPS/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_GPS
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_GPS {
    constructor() {
        this._latitude = 0;
        this._longitude = 0;
        this.keys = ['tx', 'rx', 'vcc', 'gnd', 'grove'];
        this.requiredKeys = [];
        this.ioKeys = this.keys;
        this.displayName = 'gps';
        this.displayIoNames = { tx: 'tx', rx: 'rx' };
    }
    // -------------------
    get latitude() {
        return this.nmea2dd(this._latitude);
    }
    get longitude() {
        return this.nmea2dd(this._longitude);
    }
    static info() {
        return {
            name: 'Grove_GPS',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            this.uart = this.params.grove.getUart(9600, '5v');
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.uart = obniz.getFreeUart();
            this.uart.start({
                tx: this.params.tx,
                rx: this.params.rx,
                baud: 9600,
            });
        }
        this.editedData = {};
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        this.gpsInfo = {};
        this.gpsInfo._sentenceType = {
            GPGGA: 0x0001,
            GPGSA: 0x0002,
            GPGSV: 0x0004,
            GPRMC: 0x0008,
            GPVTG: 0x0010,
            GPZDA: 0x0020,
        };
        this.gpsInfo.status = 'V';
        this.gpsInfo.sentences = new Set(); // Set specifying sentence of MNEA from which data have been obtained
        this.gpsInfo.satelliteInfo = {
            satellites: [],
            inView: 0,
        };
    }
    readSentence() {
        let results = [];
        if (this.uart.isDataExists()) {
            const pos = this.uart.received.indexOf(0x0a);
            if (pos >= 0) {
                results = this.uart.received.slice(0, pos - 1);
                this.uart.received.splice(0, pos + 1);
                let str = this.uart.tryConvertString(results);
                if (str === null) {
                    str = '';
                }
                return str;
            }
        }
        return '';
    }
    getEditedData() {
        let n;
        let utc;
        let format;
        let sentence = this.readSentence();
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        while (sentence.length > 0) {
            const part = sentence.split(',');
            if (sentence.slice(-4, -3) !== ',') {
                const st = part[part.length - 1].slice(0, -3);
                part.push(part[part.length - 1].slice(-3));
                part[part.length - 2] = st;
            }
            this.editedData.sentence = part.join(',');
            switch (part[0]) {
                case '$GPGGA':
                    this.editedData.GPGGA = part;
                    break;
                case '$GPGLL':
                    this.editedData.GPGLL = part;
                    break;
                case '$GPGSA':
                    this.editedData.GPGSA = part;
                    break;
                case '$GPGSV':
                    n = Number(part[2]);
                    if (n > this.editedData.GPGSV.length) {
                        while (n > this.editedData.GPGSV.length) {
                            this.editedData.GPGSV.push([]);
                        }
                    }
                    this.editedData.GPGSV[n - 1] = part;
                    break;
                case '$GPRMC':
                    this.editedData.GPRMC = part;
                    break;
                case '$GPVTG':
                    this.editedData.GPVTG = part;
                    break;
                case '$GPZDA':
                    this.editedData.GPZDA = part;
                    utc =
                        part[4] +
                            '/' +
                            part[3] +
                            '/' +
                            part[2] +
                            ' ' +
                            part[1].substring(0, 2) +
                            ':' +
                            part[1].substring(2, 4) +
                            ':' +
                            part[1].substring(4, 6) +
                            ' +00:00';
                    this.editedData.timestamp = new Date(utc);
                    break;
                default:
                    format = part[0].substr(1);
                    this.editedData[format] = part;
            }
            this.editedData.enable = true;
            sentence = this.readSentence();
        }
        return this.editedData;
    }
    getGpsInfo(editedData) {
        const NMEA_SATINSENTENCE = 4;
        const NMEA_MAXSAT = 12;
        editedData = editedData || this.getEditedData();
        this.gpsInfo.status = 'V';
        if (editedData.enable) {
            if (editedData.GPGGA) {
                const gga = editedData.GPGGA;
                this.gpsInfo.gpsQuality = parseFloat(gga[6]); // Fix Quality: 0 = Invalid, 1 = GPS fix, 2 = DGPS fix
                this.gpsInfo.hdop = parseFloat(gga[8]); // Horizontal Dilution of Precision (HDOP)
                this.gpsInfo.altitude = parseFloat(gga[9]); // Antenna Altitude meters above mean sea level
                const latitude = this.nmea2dd(parseFloat(gga[2]));
                this.gpsInfo.latitude = gga[3] === 'N' ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(gga[4]));
                this.gpsInfo.longitude = gga[5] === 'E' ? longitude : -longitude;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGGA);
            }
            if (editedData.GPGSV) {
                for (let n = 0; n < editedData.GPGSV.length; n++) {
                    if (editedData.GPGSV[n]) {
                        const gsv = editedData.GPGSV[n].map((v) => parseFloat(v));
                        const pack_count = gsv[1];
                        const pack_index = gsv[2];
                        const sat_count = gsv[3];
                        if (pack_index > pack_count) {
                            continue;
                        }
                        this.gpsInfo.satelliteInfo.inView = sat_count;
                        let nsat = (pack_index - 1) * NMEA_SATINSENTENCE;
                        nsat =
                            nsat + NMEA_SATINSENTENCE > sat_count
                                ? sat_count - nsat
                                : NMEA_SATINSENTENCE;
                        for (let isat = 0; isat < nsat; ++isat) {
                            const isi = (pack_index - 1) * NMEA_SATINSENTENCE + isat;
                            if (this.gpsInfo.satelliteInfo.satellites.length <= isi) {
                                this.gpsInfo.satelliteInfo.satellites.push({});
                            }
                            const isatn = isat * NMEA_SATINSENTENCE;
                            this.gpsInfo.satelliteInfo.satellites[isi] = {
                                id: gsv[isatn + 4],
                                elevation: gsv[isatn + 5],
                                azimuth: gsv[isatn + 6],
                                snr: gsv[isatn + 7],
                                inUse: false,
                            };
                        }
                        this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSV);
                    }
                }
            }
            if (editedData.GPGSA) {
                const gsa = editedData.GPGSA;
                let nuse = 0;
                this.gpsInfo.fixMode = parseFloat(gsa[2]); // Fix Mode: 1=Fix not available, 2=2D, 3=3D
                this.gpsInfo.pdop = parseFloat(gsa[15]); // PDOP: Position Dilution of Precision
                this.gpsInfo.hdop = parseFloat(gsa[16]); // HDOP: Horizontal Dilution of Precision
                this.gpsInfo.vdop = parseFloat(gsa[17]); // VDOP: Vertical Dilution of Position
                for (let i = 0; i < NMEA_MAXSAT; ++i) {
                    for (let j = 0; j < this.gpsInfo.satelliteInfo.inView; ++j) {
                        if (this.gpsInfo.satelliteInfo.satellites[j] &&
                            gsa[i + 3] === this.gpsInfo.satelliteInfo.satellites[j].id) {
                            this.gpsInfo.satelliteInfo.satellites[j].inUse = true;
                            nuse++;
                        }
                    }
                }
                this.gpsInfo.satelliteInfo.inUse = nuse;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSA);
            }
            if (editedData.GPRMC) {
                const rmc = editedData.GPRMC;
                this.gpsInfo.status = rmc[2]; // Status Active or Void
                const latitude = this.nmea2dd(parseFloat(rmc[3]));
                this.gpsInfo.latitude = rmc[4] === 'N' ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(rmc[5]));
                this.gpsInfo.longitude = rmc[6] === 'E' ? longitude : -longitude;
                const NMEA_TUD_KNOTS = 1.852; // 1knot=1.852km/h
                this.gpsInfo.speed = parseFloat(rmc[7]) * NMEA_TUD_KNOTS; // unit: km/h
                this.gpsInfo.direction = rmc[8];
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPRMC);
            }
            if (editedData.GPVTG) {
                const vtg = editedData.GPVTG;
                this.gpsInfo.direction = parseFloat(vtg[1]);
                this.gpsInfo.declination = parseFloat(vtg[3]);
                this.gpsInfo.speed = parseFloat(vtg[7]);
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPVTG);
            }
            if (editedData.GPZDA) {
                this.gpsInfo.utc = editedData.timestamp;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPZDA);
            }
        }
        return this.gpsInfo;
    }
    _mneaTo(format, value) {
        let result = this.nmea2dd(value);
        if (typeof format === 'string') {
            switch (format.toUpperCase()) {
                case 'DMS':
                    result = this.nmea2dms(value);
                    break;
                case 'DM':
                    result = this.nmea2dm(value);
                    break;
                case 'S':
                    result = this.nmea2s(value);
                    break;
                default:
            }
        }
        return result;
    }
    latitudeTo(format) {
        return this._mneaTo(format, this._latitude);
    }
    longitudeTo(format) {
        return this._mneaTo(format, this._longitude);
    }
    status2string(status) {
        status = status || this.status;
        if (status === 'A') {
            return 'Active';
        }
        if (status === 'V') {
            return 'Void';
        }
        return status;
    }
    fixMode2string(fixMode) {
        fixMode = fixMode || this.fixMode;
        if (fixMode === 1) {
            return 'Fix not available';
        }
        if (fixMode === 2) {
            return '2D';
        }
        if (fixMode === 3) {
            return '3D';
        }
        return fixMode;
    }
    gpsQuality2string(gpsQuality) {
        gpsQuality = gpsQuality || this.gpsQuality;
        if (gpsQuality === 0) {
            return 'Invalid';
        }
        if (gpsQuality === 1) {
            return 'GPS fix';
        }
        if (gpsQuality === 2) {
            return 'DGPS fix';
        }
        return gpsQuality;
    }
    // --- latitude/longitude MNEA format change to each unit
    nmea2dms(val) {
        // NMEA format to DMS format string (999° 99'99.9")
        val = parseFloat(val);
        const d = Math.floor(val / 100);
        const m = Math.floor((val / 100.0 - d) * 100.0);
        const s = ((val / 100.0 - d) * 100.0 - m) * 60;
        return d + '°' + m + "'" + s.toFixed(1) + '"';
    }
    nmea2dm(val) {
        // NMEA format to DM format string (999° 99.9999')
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = (val / 100.0 - d) * 100.0;
        return d + '°' + m.toFixed(4) + "'";
    }
    nmea2dd(val) {
        // NMEA format to DD format decimal (999.999999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return parseFloat((d + m + s).toFixed(6));
    }
    nmea2s(val) {
        // NMEA format to S format decimal (99999.9999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return (d + m + s) / (1.0 / 60.0 / 60.0);
    }
}
exports.default = Grove_GPS;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_GestureSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_GestureSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_GestureSensor {
    constructor() {
        this.GESTURE_RIGHT = 'GESTURE_RIGHT';
        this.GESTURE_LEFT = 'GESTURE_LEFT';
        this.GESTURE_UP = 'GESTURE_UP';
        this.GESTURE_DOWN = 'GESTURE_DOWN';
        this.GESTURE_FORWARD = 'GESTURE_FORWARD';
        this.GESTURE_BACKWARD = 'GESTURE_BACKWARD';
        this.GESTURE_CLOCKWISE = 'GESTURE_CLOCKWISE';
        this.GESTURE_COUNT_CLOCKWISE = 'GESTURE_COUNT_CLOCKWISE';
        this.ic2Address = 0x73;
        this.PAJ7620_ADDR_BASE = 0x00;
        this.PAJ7620_REGITER_BANK_SEL = this.PAJ7620_ADDR_BASE + 0xef;
        this.PAJ7620_BANK0 = 0 << 0;
        this.PAJ7620_BANK1 = 1 << 0;
        this.GES_RIGHT_FLAG = 1 << 0; // PAJ7620_VAL(1,0)
        this.GES_LEFT_FLAG = 1 << 1; // PAJ7620_VAL(1,1)
        this.GES_UP_FLAG = 1 << 2; // PAJ7620_VAL(1,2)
        this.GES_DOWN_FLAG = 1 << 3; // PAJ7620_VAL(1,3)
        this.GES_FORWARD_FLAG = 1 << 4; // PAJ7620_VAL(1,4)
        this.GES_BACKWARD_FLAG = 1 << 5; // PAJ7620_VAL(1,5)
        this.GES_CLOCKWISE_FLAG = 1 << 6; // PAJ7620_VAL(1,6)
        this.GES_COUNT_CLOCKWISE_FLAG = 1 << 7; // PAJ7620_VAL(1,7)
        this.GES_WAVE_FLAG = 1 << 8; // PAJ7620_VAL(1,0)
        this.initRegisterArray = [
            [0xef, 0x00],
            [0x32, 0x29],
            [0x33, 0x01],
            [0x34, 0x00],
            [0x35, 0x01],
            [0x36, 0x00],
            [0x37, 0x07],
            [0x38, 0x17],
            [0x39, 0x06],
            [0x3a, 0x12],
            [0x3f, 0x00],
            [0x40, 0x02],
            [0x41, 0xff],
            [0x42, 0x01],
            [0x46, 0x2d],
            [0x47, 0x0f],
            [0x48, 0x3c],
            [0x49, 0x00],
            [0x4a, 0x1e],
            [0x4b, 0x00],
            [0x4c, 0x20],
            [0x4d, 0x00],
            [0x4e, 0x1a],
            [0x4f, 0x14],
            [0x50, 0x00],
            [0x51, 0x10],
            [0x52, 0x00],
            [0x5c, 0x02],
            [0x5d, 0x00],
            [0x5e, 0x10],
            [0x5f, 0x3f],
            [0x60, 0x27],
            [0x61, 0x28],
            [0x62, 0x00],
            [0x63, 0x03],
            [0x64, 0xf7],
            [0x65, 0x03],
            [0x66, 0xd9],
            [0x67, 0x03],
            [0x68, 0x01],
            [0x69, 0xc8],
            [0x6a, 0x40],
            [0x6d, 0x04],
            [0x6e, 0x00],
            [0x6f, 0x00],
            [0x70, 0x80],
            [0x71, 0x00],
            [0x72, 0x00],
            [0x73, 0x00],
            [0x74, 0xf0],
            [0x75, 0x00],
            [0x80, 0x42],
            [0x81, 0x44],
            [0x82, 0x04],
            [0x83, 0x20],
            [0x84, 0x20],
            [0x85, 0x00],
            [0x86, 0x10],
            [0x87, 0x00],
            [0x88, 0x05],
            [0x89, 0x18],
            [0x8a, 0x10],
            [0x8b, 0x01],
            [0x8c, 0x37],
            [0x8d, 0x00],
            [0x8e, 0xf0],
            [0x8f, 0x81],
            [0x90, 0x06],
            [0x91, 0x06],
            [0x92, 0x1e],
            [0x93, 0x0d],
            [0x94, 0x0a],
            [0x95, 0x0a],
            [0x96, 0x0c],
            [0x97, 0x05],
            [0x98, 0x0a],
            [0x99, 0x41],
            [0x9a, 0x14],
            [0x9b, 0x0a],
            [0x9c, 0x3f],
            [0x9d, 0x33],
            [0x9e, 0xae],
            [0x9f, 0xf9],
            [0xa0, 0x48],
            [0xa1, 0x13],
            [0xa2, 0x10],
            [0xa3, 0x08],
            [0xa4, 0x30],
            [0xa5, 0x19],
            [0xa6, 0x10],
            [0xa7, 0x08],
            [0xa8, 0x24],
            [0xa9, 0x04],
            [0xaa, 0x1e],
            [0xab, 0x1e],
            [0xcc, 0x19],
            [0xcd, 0x0b],
            [0xce, 0x13],
            [0xcf, 0x64],
            [0xd0, 0x21],
            [0xd1, 0x0f],
            [0xd2, 0x88],
            [0xe0, 0x01],
            [0xe1, 0x04],
            [0xe2, 0x41],
            [0xe3, 0xd6],
            [0xe4, 0x00],
            [0xe5, 0x0c],
            [0xe6, 0x0a],
            [0xe7, 0x00],
            [0xe8, 0x00],
            [0xe9, 0x00],
            [0xee, 0x07],
            [0xef, 0x01],
            [0x00, 0x1e],
            [0x01, 0x1e],
            [0x02, 0x0f],
            [0x03, 0x10],
            [0x04, 0x02],
            [0x05, 0x00],
            [0x06, 0xb0],
            [0x07, 0x04],
            [0x08, 0x0d],
            [0x09, 0x0e],
            [0x0a, 0x9c],
            [0x0b, 0x04],
            [0x0c, 0x05],
            [0x0d, 0x0f],
            [0x0e, 0x02],
            [0x0f, 0x12],
            [0x10, 0x02],
            [0x11, 0x02],
            [0x12, 0x00],
            [0x13, 0x01],
            [0x14, 0x05],
            [0x15, 0x07],
            [0x16, 0x05],
            [0x17, 0x07],
            [0x18, 0x01],
            [0x19, 0x04],
            [0x1a, 0x05],
            [0x1b, 0x0c],
            [0x1c, 0x2a],
            [0x1d, 0x01],
            [0x1e, 0x00],
            [0x21, 0x00],
            [0x22, 0x00],
            [0x23, 0x00],
            [0x25, 0x01],
            [0x26, 0x00],
            [0x27, 0x39],
            [0x28, 0x7f],
            [0x29, 0x08],
            [0x30, 0x03],
            [0x31, 0x00],
            [0x32, 0x1a],
            [0x33, 0x1a],
            [0x34, 0x07],
            [0x35, 0x07],
            [0x36, 0x01],
            [0x37, 0xff],
            [0x38, 0x36],
            [0x39, 0x07],
            [0x3a, 0x00],
            [0x3e, 0xff],
            [0x3f, 0x00],
            [0x40, 0x77],
            [0x41, 0x40],
            [0x42, 0x00],
            [0x43, 0x30],
            [0x44, 0xa0],
            [0x45, 0x5c],
            [0x46, 0x00],
            [0x47, 0x00],
            [0x48, 0x58],
            [0x4a, 0x1e],
            [0x4b, 0x1e],
            [0x4c, 0x00],
            [0x4d, 0x00],
            [0x4e, 0xa0],
            [0x4f, 0x80],
            [0x50, 0x00],
            [0x51, 0x00],
            [0x52, 0x00],
            [0x53, 0x00],
            [0x54, 0x00],
            [0x57, 0x80],
            [0x59, 0x10],
            [0x5a, 0x08],
            [0x5b, 0x94],
            [0x5c, 0xe8],
            [0x5d, 0x08],
            [0x5e, 0x3d],
            [0x5f, 0x99],
            [0x60, 0x45],
            [0x61, 0x40],
            [0x63, 0x2d],
            [0x64, 0x02],
            [0x65, 0x96],
            [0x66, 0x00],
            [0x67, 0x97],
            [0x68, 0x01],
            [0x69, 0xcd],
            [0x6a, 0x01],
            [0x6b, 0xb0],
            [0x6c, 0x04],
            [0x6d, 0x2c],
            [0x6e, 0x01],
            [0x6f, 0x32],
            [0x71, 0x00],
            [0x72, 0x01],
            [0x73, 0x35],
            [0x74, 0x00],
            [0x75, 0x33],
            [0x76, 0x31],
            [0x77, 0x01],
            [0x7c, 0x84],
            [0x7d, 0x03],
            [0x7e, 0x01],
        ];
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_GestureSensor',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        this.obniz = obniz;
        const speed = 400000;
        if (this.params.grove) {
            this.i2c = this.params.grove.getI2c(speed, '5v');
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.params.mode = 'master';
            this.params.clock = speed;
            this.params.pull = '5v';
            this.i2c = this.obniz.getI2CWithConfig(this.params);
        }
        this.i2c.onerror = (err) => {
            // console.log('Error:', err);
        };
        // await obniz.wait(700);
        this.initWait();
    }
    async initWait() {
        // wakeup check
        await this.checkWakeUpWait();
        // initRegister
        await this.initRegisterWait();
        while (true) {
            // get data
            this.i2c.write(this.ic2Address, [0x43]);
            const resArray = await this.i2c.readWait(this.ic2Address, 1);
            const res = resArray[0];
            if (this.onchange) {
                if (this.GES_RIGHT_FLAG === res) {
                    // console.log("GES_RIGHT_FLAG");
                    this.onchange(this.GESTURE_RIGHT);
                }
                else if (this.GES_LEFT_FLAG === res) {
                    // console.log("GES_LEFT_FLAG");
                    this.onchange(this.GESTURE_LEFT);
                }
                else if (this.GES_UP_FLAG === res) {
                    // console.log("GES_UP_FLAG");
                    this.onchange(this.GESTURE_UP);
                }
                else if (this.GES_DOWN_FLAG === res) {
                    // console.log("GES_DOWN_FLAG");
                    this.onchange(this.GESTURE_DOWN);
                }
                else if (this.GES_FORWARD_FLAG === res) {
                    // console.log("GES_FORWARD_FLAG");
                    this.onchange(this.GESTURE_FORWARD);
                }
                else if (this.GES_BACKWARD_FLAG === res) {
                    // console.log("GES_BACKWARD_FLAG");
                    this.onchange(this.GESTURE_BACKWARD);
                }
                else if (this.GES_CLOCKWISE_FLAG === res) {
                    // console.log("GES_CLOCKWISE_FLAG");
                    this.onchange(this.GESTURE_CLOCKWISE);
                }
                else if (this.GES_COUNT_CLOCKWISE_FLAG === res) {
                    // console.log("GES_COUNT_CLOCKWISE_FLAG");
                    this.onchange(this.GESTURE_COUNT_CLOCKWISE);
                }
            }
            await this.obniz.wait(1000);
        }
    }
    async checkWakeUpWait() {
        // wakeup check
        this.i2c.write(this.ic2Address, [
            this.PAJ7620_REGITER_BANK_SEL,
            this.PAJ7620_BANK0,
        ]);
        let res = [0, 0];
        try {
            res = await this.i2c.readWait(this.ic2Address, 1);
        }
        catch (e) {
            // console.log(e);
        }
        if (res[0] === 0x20) {
            // console.log("wake-up finish.");
        }
    }
    async initRegisterWait() {
        // console.log("initRegister!!");
        for (let i = 0; i < this.initRegisterArray.length; i++) {
            this.i2c.write(this.ic2Address, this.initRegisterArray[i]);
        }
        // Set up gaming mode.
        this.i2c.write(this.ic2Address, [
            this.PAJ7620_REGITER_BANK_SEL,
            this.PAJ7620_BANK1,
        ]);
        // near mode 240 fps
        this.i2c.write(this.ic2Address, [0x65, 0x12]);
        this.i2c.write(this.ic2Address, [
            this.PAJ7620_REGITER_BANK_SEL,
            this.PAJ7620_BANK0,
        ]);
    }
}
exports.default = Grove_GestureSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_JoyStick/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_JoyStick
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_JoyStick {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_JoyStick',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        const speed = 400000;
        if (this.params.grove) {
            this.i2c = this.params.grove.getI2c(speed, '5v');
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.obniz.wait(100); // wait for booting of MEGA328
            this.params.mode = 'master';
            this.params.clock = speed;
            this.params.pull = '5v';
            this.i2c = this.obniz.getI2CWithConfig(this.params);
        }
    }
    async getXWait() {
        const ret = await this.i2c.readWait(0x52, 3);
        return ret[0];
    }
    async getYWait() {
        const ret = await this.i2c.readWait(0x52, 3);
        return ret[1];
    }
    async isPressedWait() {
        const ret = await this.i2c.readWait(0x52, 3);
        return Boolean(ret[2]);
    }
}
exports.default = Grove_JoyStick;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_LightSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_LightSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_LightSensor {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_LightSensor',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveAd = this.params.grove.getAnalog();
            this.ad = groveAd.primary;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.ad = obniz.getAD(this.params.signal);
        }
        this.ad.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.ad.getWait();
    }
}
exports.default = Grove_LightSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_MP3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_MP3
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_MP3 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'mp3_rx', 'mp3_tx', 'grove'];
        this.requiredKeys = [];
        this.ioKeys = this.keys;
        this.displayName = 'MP3';
        this.displayIoNames = { mp3_rx: 'MP3Rx', mp3_tx: 'MP3Tx' };
    }
    static info() {
        return {
            name: 'Grove_MP3',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (this.params.grove) {
            this.uart = this.params.grove.getUart(9600, '5v');
        }
        else {
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.my_tx = this.params.mp3_rx;
            this.my_rx = this.params.mp3_tx;
            this.uart = this.obniz.getFreeUart();
            this.uart.start({
                tx: this.my_tx,
                rx: this.my_rx,
                baud: 9600,
            });
        }
    }
    async initWait(strage) {
        await this.obniz.wait(100);
        this.uartSend(0x0c, 0);
        await this.obniz.wait(500);
        this.uartSend(0x0b, 0);
        await this.obniz.wait(100);
        if (strage) {
            if (strage === 'usb') {
                this.uartSend(0x09, 1);
            }
            else if (strage === 'sd') {
                this.uartSend(0x09, 2);
            }
        }
        else {
            this.uartSend(0x09, 2);
        }
        await this.obniz.wait(200);
    }
    setVolume(vol) {
        if (vol >= 0 && vol <= 31) {
            this.uartSend(0x06, vol);
        }
    }
    volUp() {
        this.uartSend(0x04, 0);
    }
    volDown() {
        this.uartSend(0x05, 0);
    }
    play(track, folder) {
        // if (!folder) folder = {};
        if (folder) {
            this.uart.send([0x7e, 0xff, 0x06, 0x0f, 0x00, folder, track, 0xef]);
        }
        else {
            // Play 'MP3' folder
            this.uartSend(0x12, track);
        }
    }
    stop() {
        this.uartSend(0x16, 0);
    }
    pause() {
        this.uartSend(0x0e, 0);
    }
    resume() {
        this.uartSend(0x0d, 0);
    }
    next() {
        this.uartSend(0x01, 0);
    }
    prev() {
        this.uartSend(0x02, 0);
    }
    uartSend(command, param) {
        const paramM = param >> 8;
        const paramL = param & 0xff;
        this.uart.send([0x7e, 0xff, 0x06, command, 0x01, paramM, paramL, 0xef]);
        const response = this.uart.readBytes();
        return response;
        // return response;
    }
}
exports.default = Grove_MP3;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_MicroSwitch/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_MicroSwitch
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_MicroSwitch {
    constructor() {
        this.isPressed = null;
        this.onchange = null;
        this.onChangeForStateWait = (pressed) => {
            // do nothing.
        };
        this.keys = ['signal', 'gnd', 'vcc', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_MicroSwitch',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveIOs = this.params.grove.getDigital('5v');
            this.io_signal = groveIOs.primary;
        }
        else {
            this.io_signal = obniz.getIO(this.params.signal);
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        }
        this.io_signal.pull('5v');
        this.io_signal.input((value) => {
            this.isPressed = value;
            if (this.onchange) {
                this.onchange(value);
            }
            this.onChangeForStateWait(value);
        });
    }
    async isPressedWait() {
        return await this.io_signal.inputWait();
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                        // do nothing.
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Grove_MicroSwitch;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_PressureSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_PressureSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_PressureSensor {
    constructor() {
        this.keys = ['vcc', 'gnd', 'output', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_PressureSensor',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveAd = this.params.grove.getAnalog();
            this.ad = groveAd.primary;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.ad = obniz.getAD(this.params.output);
        }
        this.ad.start((value) => {
            this.value = value * 100;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
    async getWait() {
        const value = await this.ad.getWait();
        this.value = value * 100;
        return this.value;
    }
}
exports.default = Grove_PressureSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Relay/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_Relay
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Relay {
    constructor() {
        this.keys = ['signal', 'gnd', 'vcc', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_Relay',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            this.io_signal = this.params.grove.getDigital();
        }
        else {
            this.obniz = obniz;
            obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.io_signal = obniz.getIO(this.params.signal);
        }
        this.off();
    }
    on() {
        this.io_signal.output(true);
    }
    off() {
        this.io_signal.output(false);
    }
}
exports.default = Grove_Relay;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_RotaryAngleSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_RotaryAngleSensorOptionsA
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_RotaryAngleSensor {
    constructor() {
        // public vcc_voltage = 5.0;
        this.position = 0;
        this.keys = ['vcc', 'gnd', 'signal', 'grove'];
        this.requiredKeys = [];
        this.drive = '5v';
    }
    static info() {
        return {
            name: 'Grove_RotaryAngleSensor',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveAd = this.params.grove.getAnalog();
            this.ad = groveAd.primary;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);
            this.ad = obniz.getAD(this.params.signal);
        }
        this.ad.start((value) => {
            this.value = value;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
}
exports.default = Grove_RotaryAngleSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_SHT35Sensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_SHT35Sensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_SHT35Sensor {
    constructor() {
        this.SHT35_IIC_ADDR = 0x45;
        this.CMD_SOFT_RST = 0x30a2;
        this.HIGH_REP_WITH_STRCH = 0x2c06;
        this.NO_ERROR = 0;
        this.ERROR_PARAM = -1;
        this.ERROR_COMM = -2;
        this.ERROR_OTHERS = -128;
        this.launched = false;
        this.keys = ['gnd', 'vcc', 'sda', 'scl', 'grove'];
        this.requiredKeys = [];
        this.ioKeys = this.keys;
        this.displayName = 'GroveSHT35';
        this.displayIoNames = { sda: 'sda', scl: 'scl' };
    }
    static info() {
        return {
            name: 'Grove_SHT35Sensor',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            this.i2c = this.params.grove.getI2c(400000, '5v');
        }
        else {
            this.vcc = this.params.vcc;
            this.gnd = this.params.gnd;
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.params.clock = 400000;
            this.params.mode = 'master';
            this.i2c = obniz.getI2CWithConfig(this.params);
        }
        this.obniz.wait(100);
        this.sendCommandWait(this.CMD_SOFT_RST)
            .then(() => {
            return this.obniz.wait(100);
        })
            .then(() => {
            this.launched = true;
        });
    }
    async readMeasDataSingleShotWait(cfg_cmd) {
        let temp_hex = 0;
        let hum_hex = 0;
        let temp = 0;
        let hum = 0;
        if (this.launched) {
            await this.sendCommandWait(cfg_cmd);
            const data = await this.i2c.readWait(this.SHT35_IIC_ADDR, 6);
            temp_hex = (data[0] << 8) | data[1];
            hum_hex = (data[3] << 8) | data[4];
            temp = (temp_hex / 65535.0) * 175 - 45;
            hum = (hum_hex / 65535.0) * 100.0;
        }
        const ret = {
            temperature: temp,
            humidity: hum,
        };
        return ret;
    }
    async sendCommandWait(cmd) {
        const ret = 0;
        const val1 = (cmd >> 8) & 0xff;
        const val2 = cmd & 0xff;
        this.i2c.write(this.SHT35_IIC_ADDR, [val1, val2]);
    }
    async getAllWait() {
        const ret = await this.readMeasDataSingleShotWait(this.HIGH_REP_WITH_STRCH);
        return ret;
    }
}
exports.default = Grove_SHT35Sensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_SoilMoistureSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_SoilMoistureSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_SoilMoistureSensor {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_SoilMoistureSensor',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        if (this.params.grove) {
            const groveAd = this.params.grove.getAnalog();
            this.ad = groveAd.primary;
        }
        else {
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.ad = obniz.getAD(this.params.signal);
        }
        this.ad.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.ad.getWait();
    }
}
exports.default = Grove_SoilMoistureSensor;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Speaker/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_Speaker
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Speaker {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal', 'grove'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'Grove_Speaker',
        };
    }
    onchange(value) {
        // do nothing.
    }
    wired(obniz) {
        if (this.params.grove) {
            this.pwm = this.params.grove.getPwm();
        }
        else {
            this.obniz = obniz;
            this.obniz.setVccGnd(null, this.params.gnd, '5v');
            this.pwm = obniz.getFreePwm();
            this.pwm.start({ io: this.params.signal });
        }
    }
    play(frequency) {
        if (typeof frequency !== 'number') {
            throw new Error('freq must be a number');
        }
        frequency = Math.floor(frequency); // temporary
        if (frequency > 0) {
            this.pwm.freq(frequency);
            this.pwm.pulse((1 / frequency / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Grove_Speaker;


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_WaterLevelSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Grove_WaterLevelSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_WaterLevelSensor {
    constructor() {
        this.onchange = null;
        this.keys = ['gnd', 'vcc', 'sda', 'scl', 'grove'];
        this.requiredKeys = [];
        this.ioKeys = this.keys;
        this.displayName = 'WaterLevel';
        this.displayIoNames = { sda: 'sda', scl: 'scl' };
        this.THRESHOLD = 100;
        this.ATTINY1_HIGH_ADDR = 0x78;
        this.ATTINY2_LOW_ADDR = 0x77;
        this.check_interval_ms = 1000;
        this.previous_val = 0;
    }
    static info() {
        return {
            name: 'Grove_WaterLevelSensor',
        };
    }
    wired(obniz) {
        if (this.params.grove) {
            this.i2c = this.params.grove.getI2c(400000, '5v');
        }
        else {
            this.vcc = this.params.vcc;
            this.gnd = this.params.gnd;
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
            this.params.clock = 400000;
            this.params.mode = 'master';
            this.i2c = obniz.getI2CWithConfig(this.params);
        }
        this.initWait();
    }
    async initWait() {
        // power on
        while (true) {
            const current_val = await this.getWait();
            if (current_val !== this.previous_val) {
                if (this.onchange) {
                    this.onchange(current_val);
                }
                this.previous_val = current_val;
            }
            await this.obniz.wait(this.check_interval_ms);
        }
    }
    async getWait() {
        const water_level_step = 5; // 5 mm step
        const high_data = await this.i2c.readWait(this.ATTINY1_HIGH_ADDR, 12);
        const low_data = await this.i2c.readWait(this.ATTINY2_LOW_ADDR, 8);
        let i;
        let touch_val = 0;
        for (i = 0; i < 8; i++) {
            if (low_data[i] > this.THRESHOLD) {
                touch_val |= 1 << i;
            }
        }
        for (i = 0; i < 12; i++) {
            if (high_data[i] > this.THRESHOLD) {
                touch_val |= 1 << (8 + i);
            }
        }
        let trig_section = 0;
        while (touch_val & 0x01) {
            trig_section++;
            touch_val >>= 1;
        }
        const water_level_mm = trig_section * water_level_step;
        return water_level_mm;
    }
}
exports.default = Grove_WaterLevelSensor;


/***/ }),

/***/ "./dist/src/parts/GyroSensor/ENC03R_Module/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ENC03R_Module
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ENC03R_Module {
    constructor() {
        this.Sens = 0.00067; // Sensitivity, 0.67mV / deg/sec
        this.sens1 = 0;
        this.sens2 = 0;
        this.keys = ['vcc', 'out1', 'out2', 'gnd'];
        this.requiredKeys = ['out1', 'out2'];
    }
    static info() {
        return {
            name: 'ENC03R_Module',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.ad0 = obniz.getAD(this.params.out1);
        this.ad1 = obniz.getAD(this.params.out2);
        this.ad0.start((value) => {
            this.sens1 = (value - 1.45) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV
            if (this.onchange1) {
                this.onchange1(this.sens1);
            }
        });
        this.ad1.start((value) => {
            this.sens2 = (value - 1.35) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV
            if (this.onchange2) {
                this.onchange2(this.sens2);
            }
        });
    }
    async get1Wait() {
        const value = await this.ad0.getWait();
        this.sens1 = (value - 1.45) / this.Sens;
        return this.sens1;
    }
    async get2Wait() {
        const value = await this.ad1.getWait();
        this.sens2 = (value - 1.35) / this.Sens;
        return this.sens2;
    }
}
exports.default = ENC03R_Module;


/***/ }),

/***/ "./dist/src/parts/Infrared/IRModule/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.IRModule
 */
Object.defineProperty(exports, "__esModule", { value: true });
class IRModule {
    constructor() {
        this.keys = ['recv', 'vcc', 'send', 'gnd'];
        this.requiredKeys = ['recv', 'send'];
    }
    static info() {
        return {
            name: 'IRModule',
        };
    }
    get dataSymbolLength() {
        return this.sensor.dataSymbolLength;
    }
    set dataSymbolLength(x) {
        this.sensor.dataSymbolLength = x;
        this.led.dataSymbolLength = x;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (!obniz.isValidIO(this.params.recv)) {
            throw new Error('recv is not valid io');
        }
        if (!obniz.isValidIO(this.params.send)) {
            throw new Error('send is not valid io');
        }
        this.sensor = obniz.wired('IRSensor', {
            output: this.params.recv,
        });
        this.setGetterSetter('sensor', 'duration');
        this.setGetterSetter('sensor', 'dataInverted');
        this.setGetterSetter('sensor', 'cutTail');
        this.setGetterSetter('sensor', 'output_pullup');
        this.setGetterSetter('sensor', 'ondetect');
        this.led = obniz.wired('InfraredLED', {
            anode: this.params.send,
        });
    }
    // link
    send(arr) {
        this.led.send(arr);
    }
    start(callback) {
        this.sensor.start(callback);
    }
    setGetterSetter(partsName, varName) {
        Object.defineProperty(this, varName, {
            get() {
                return this[partsName][varName];
            },
            set(x) {
                this[partsName][varName] = x;
            },
        });
    }
}
exports.default = IRModule;


/***/ }),

/***/ "./dist/src/parts/Infrared/IRSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.IRSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class IRSensor {
    constructor() {
        this.dataSymbolLength = 0.07;
        this.duration = 500; // 500msec;
        this.dataInverted = true;
        this.triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal
        this.cutTail = false;
        this.output_pullup = true;
        this.ondetect = null;
        this.keys = ['output', 'vcc', 'gnd'];
        this.requiredKeys = ['output'];
    }
    static info() {
        return {
            name: 'IRSensor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (!obniz.isValidIO(this.params.output)) {
            throw new Error('output is not valid io');
        }
    }
    start(callback) {
        if (callback) {
            this.ondetect = callback;
        }
        if (this.output_pullup) {
            this.obniz.getIO(this.params.output).pull('5v');
        }
        this.obniz.logicAnalyzer.start({
            io: this.params.output,
            interval: this.dataSymbolLength,
            duration: this.duration,
            triggerValue: this.dataInverted ? false : true,
            triggerValueSamples: this.triggerSampleCount,
        });
        this.obniz.logicAnalyzer.onmeasured = (levels) => {
            if (typeof this.ondetect === 'function') {
                if (this.dataInverted) {
                    const arr = new Uint8Array(levels);
                    for (let i = 0; i < arr.length; i++) {
                        arr[i] = arr[i] ? 0 : 1;
                    }
                    levels = Array.from(arr);
                }
                if (this.cutTail) {
                    for (let i = levels.length - 1; i > 1; i--) {
                        if (levels[i] === 0 && levels[i - 1] === 0) {
                            levels.splice(i, 1);
                        }
                        else {
                            break;
                        }
                    }
                }
                this.ondetect(levels);
            }
        };
    }
}
exports.default = IRSensor;


/***/ }),

/***/ "./dist/src/parts/Infrared/InfraredLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.InfraredLED
 */
Object.defineProperty(exports, "__esModule", { value: true });
class InfraredLED {
    constructor() {
        this.dataSymbolLength = 0.07;
        this.keys = ['anode', 'cathode'];
        this.requiredKeys = ['anode'];
    }
    static info() {
        return {
            name: 'InfraredLED',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.anode)) {
            throw new Error('anode is not valid io');
        }
        if (this.params.cathode) {
            if (!this.obniz.isValidIO(this.params.cathode)) {
                throw new Error('cathode is not valid io');
            }
            this.io_cathode = obniz.getIO(this.params.cathode);
            this.io_cathode.output(false);
        }
        this.pwm = this.obniz.getFreePwm();
        this.pwm.start({ io: this.params.anode });
        this.pwm.freq(38000);
        this.obniz.wait(150); // TODO: this is instant fix for pwm start delay
    }
    send(data) {
        if (data && data.length > 0 && data[data.length - 1] === 1) {
            data.push(0);
        }
        this.pwm.modulate('am', this.dataSymbolLength, data);
    }
}
exports.default = InfraredLED;


/***/ }),

/***/ "./dist/src/parts/Infrared/YG1006/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.YG1006
 */
Object.defineProperty(exports, "__esModule", { value: true });
class YG1006 {
    constructor() {
        this.onchange = null;
        this.keys = ['signal', 'vcc', 'gnd'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'YG1006',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.signal.getWait();
    }
}
exports.default = YG1006;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_Button/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_Button
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_Button {
    constructor() {
        this.isPressed = null;
        this.onchange = null;
        this.onChangeForStateWait = (pressed) => {
            // do nothing.
        };
        this.keys = ['signal', 'gnd', 'vcc'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Keyestudio_Button',
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
            this.io_vcc.output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        this.io_signal.pull('5v');
        this.io_signal.input((value) => {
            this.isPressed = value;
            if (this.onchange) {
                this.onchange(value);
            }
            this.onChangeForStateWait(value);
        });
    }
    async isPressedWait() {
        return await this.io_signal.inputWait();
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                        // do nothing.
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Keyestudio_Button;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_Buzzer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_Buzzer
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_Buzzer {
    constructor() {
        this.keys = ['signal', 'gnd', 'vcc'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Keyestudio_Buzzer',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.pwm = obniz.getFreePwm();
        this.pwm.start({ io: this.params.signal });
    }
    play(freq) {
        if (typeof freq !== 'number') {
            throw new Error('freq must be a number');
        }
        freq = Math.floor(freq);
        if (freq > 0) {
            this.pwm.freq(freq);
            this.pwm.pulse((1 / freq / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Keyestudio_Buzzer;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_HT16K33/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_HT16K33
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MatrixLED_HT16K33_1 = __importDefault(__webpack_require__("./dist/src/parts/Display/MatrixLED_HT16K33/index.js"));
class Keyestudio_HT16K33 extends MatrixLED_HT16K33_1.default {
    constructor() {
        super(...arguments);
        this.bitArray = [7, 0, 1, 2, 3, 4, 5, 6];
    }
    static info() {
        return {
            name: 'Keyestudio_HT16K33',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        super.init(8);
    }
    draw(ctx) {
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < this.height; i++) {
            this.vram[i] = 0;
            for (let j = 0; j < this.width; j++) {
                const pos = i * this.height * 4 + j * 4;
                const brightness = 0.34 * data[pos] + 0.5 * data[pos + 1] + 0.16 * data[pos + 2];
                if (brightness > 0x7f) {
                    this.vram[i] |= 0x1 << this.bitArray[j];
                }
            }
        }
        super.writeVram();
    }
    dots(data) {
        for (let i = 0; i < this.height; i++) {
            this.vram[i] = 0;
            for (let j = 0; j < this.width; j++) {
                if (data[i] & (1 << j)) {
                    this.vram[i] |= 0x1 << this.bitArray[j];
                }
            }
        }
        super.writeVram();
    }
}
exports.default = Keyestudio_HT16K33;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_MoistureSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_MoistureSensor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_MoistureSensor {
    constructor() {
        this.keys = ['vcc', 'signal', 'gnd'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Keyestudio_MoistureSensor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.ad = obniz.getAD(this.params.signal);
        this.ad.start((value) => {
            this.value = value;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
    async getHumidityWait() {
        return await this.ad.getWait();
    }
}
exports.default = Keyestudio_MoistureSensor;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_PIR/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_PIR
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_PIR {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Keyestudio_PIR',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.pull('0v');
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.io_signal.input((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.io_signal.inputWait();
    }
}
exports.default = Keyestudio_PIR;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_TemperatureSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_TemperatureSensor {
    constructor() {
        this.temp = 0;
        this.temperature = 0;
        this.tempArray = new Array(100);
        this.sum = 0;
        this.init_count = 0;
        this.count = 0;
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['signal'];
        this.drive = '5v';
    }
    static info() {
        return {
            name: 'Keyestudio_TemperatureSensor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);
        this.ad = obniz.getAD(this.params.signal);
        this.ad.start((voltage) => {
            this.temp = this.calc(voltage);
            this.onchange(this.temp);
        });
    }
    async getWait() {
        const voltage = await this.ad.getWait();
        this.temp = this.calc(voltage);
        return this.temp;
    }
    onchange(temp) {
        // do nothing.
    }
    calc(voltage) {
        this.temperature = voltage * 100; // Temp(Celsius) = [AD Voltage] * 100;
        if (this.init_count < 100) {
            // initialization
            this.tempArray[this.init_count] = this.temperature;
            this.sum += this.temperature;
            this.init_count++;
            return this.sum / this.init_count;
        }
        else {
            // moving average
            if (this.count === 100) {
                this.count = 0;
            }
            this.sum -= this.tempArray[this.count]; // remove oldest temperature data
            this.tempArray[this.count] = this.temperature; // overwrite oldest temperature data to newest
            this.sum += this.temperature; // add newest temperature data
            this.count++;
            return this.sum / 100;
        }
    }
}
exports.default = Keyestudio_TemperatureSensor;


/***/ }),

/***/ "./dist/src/parts/Keyestudio/Keyestudio_TrafficLight/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Keyestudio_TrafficLight
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Keyestudio_TrafficLight {
    constructor() {
        this.keys = ['gnd', 'green', 'yellow', 'red'];
        this.requiredKeys = ['green', 'yellow', 'red'];
        this.state = 'red';
    }
    static info() {
        return {
            name: 'Keyestudio_TrafficLight',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(null, this.params.gnd, '5v');
        this.green = obniz.wired('LED', { anode: this.params.green });
        this.yellow = obniz.wired('LED', { anode: this.params.yellow });
        this.red = obniz.wired('LED', { anode: this.params.red });
    }
    single(led) {
        this.green.off();
        this.yellow.off();
        this.red.off();
        this.state = led;
        switch (led) {
            case 'green':
                this.green.on();
                break;
            case 'yellow':
                this.yellow.on();
                break;
            case 'red':
            default:
                this.red.on();
                this.state = 'red';
                break;
        }
    }
    next() {
        switch (this.state) {
            case 'green':
                this.single('yellow');
                break;
            case 'yellow':
                this.single('red');
                break;
            case 'red':
            default:
                this.single('green');
                break;
        }
    }
}
exports.default = Keyestudio_TrafficLight;


/***/ }),

/***/ "./dist/src/parts/Light/FullColorLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.FullColorLED
 */
Object.defineProperty(exports, "__esModule", { value: true });
class FullColorLED {
    constructor() {
        this.COMMON_TYPE_ANODE = 1;
        this.COMMON_TYPE_CATHODE = 0;
        this.anode_keys = ['anode', 'anode_common', 'anodeCommon', 'vcc'];
        this.cathode_keys = ['cathode', 'cathode_common', 'cathodeCommon', 'gnd'];
        this.animationName = 'FullColorLED-' + Math.round(Math.random() * 1000);
        this.keys = ['r', 'g', 'b', 'common', 'commonType'];
        this.requiredKeys = ['r', 'g', 'b', 'common', 'commonType'];
    }
    static info() {
        return {
            name: 'FullColorLED',
        };
    }
    wired(obniz) {
        const r = this.params.r;
        const g = this.params.g;
        const b = this.params.b;
        const common = this.params.common;
        const commontype = this.params.commonType;
        this.obniz = obniz;
        if (this.anode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_ANODE;
        }
        else if (this.cathode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_CATHODE;
        }
        else {
            this.obniz.error(new Error('FullColorLED param need common type [  anode_common or cathode_common ] '));
        }
        this.common = this.obniz.getIO(common);
        this.common.output(this.commontype);
        this.obniz.getIO(r).output(this.commontype);
        this.obniz.getIO(g).output(this.commontype);
        this.obniz.getIO(b).output(this.commontype);
        this.pwmR = this.obniz.getFreePwm();
        this.pwmR.start({ io: r });
        this.pwmR.freq(1000);
        this.pwmG = this.obniz.getFreePwm();
        this.pwmG.start({ io: g });
        this.pwmG.freq(1000);
        this.pwmB = this.obniz.getFreePwm();
        this.pwmB.start({ io: b });
        this.pwmB.freq(1000);
        this.rgb(0, 0, 0);
    }
    rgb(red, green, blue) {
        red = Math.min(Math.max(parseInt(red), 0), 255);
        green = Math.min(Math.max(parseInt(green), 0), 255);
        blue = Math.min(Math.max(parseInt(blue), 0), 255);
        if (this.commontype === this.COMMON_TYPE_ANODE) {
            red = 255 - red;
            green = 255 - green;
            blue = 255 - blue;
        }
        this.pwmR.duty((red / 255) * 100);
        this.pwmG.duty((green / 255) * 100);
        this.pwmB.duty((blue / 255) * 100);
    }
    hsv(hue, saturation, value) {
        const C = value * saturation;
        const Hp = hue / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R = 0;
        let G = 0;
        let B = 0;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = value - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        this.rgb(R, G, B);
    }
    gradation(cycletime_ms) {
        const frames = [];
        const max = 36 / 2;
        const duration = Math.round(cycletime_ms / max);
        for (let i = 0; i < max; i++) {
            const oneFrame = {
                duration,
                state: (index) => {
                    // index = 0
                    this.hsv(index * 10 * 2, 1, 1);
                },
            };
            frames.push(oneFrame);
        }
        this.obniz.io.animation(this.animationName, 'loop', frames);
    }
    stopgradation() {
        this.obniz.io.animation(this.animationName, 'pause');
    }
}
exports.default = FullColorLED;


/***/ }),

/***/ "./dist/src/parts/Light/LED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.LED
 */
Object.defineProperty(exports, "__esModule", { value: true });
class LED {
    constructor() {
        this.keys = ['anode', 'cathode'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'LED',
        };
    }
    wired(obniz) {
        const getIO = (io) => {
            if (io && typeof io === 'object') {
                if (typeof io.output === 'function') {
                    return io;
                }
            }
            return obniz.getIO(io);
        };
        this.obniz = obniz;
        if (this.obniz.isValidIO(this.params.anode)) {
            this.io_anode = getIO(this.params.anode);
        }
        if (this.obniz.isValidIO(this.params.cathode)) {
            this.io_cathode = getIO(this.params.cathode);
        }
        this.animationName = 'Led-' + this.params.anode;
        this.off();
    }
    on() {
        this.endBlink();
        this._on();
    }
    off() {
        this.endBlink();
        this._off();
    }
    output(value) {
        if (value) {
            this.on();
        }
        else {
            this.off();
        }
    }
    endBlink() {
        this.obniz.io.animation(this.animationName, 'pause');
    }
    blink(interval) {
        if (!interval) {
            interval = 100;
        }
        const frames = [
            {
                duration: interval,
                state: (index) => {
                    // index = 0
                    this._on(); // on
                },
            },
            {
                duration: interval,
                state: (index) => {
                    // index = 0
                    this._off();
                },
            },
        ];
        this.obniz.io.animation(this.animationName, 'loop', frames);
    }
    _on() {
        if (this.io_anode && this.io_cathode) {
            this.io_anode.output(true);
            this.io_cathode.output(false);
        }
        else if (this.io_anode) {
            this.io_anode.output(true);
        }
        else if (this.io_cathode) {
            this.io_cathode.output(false);
        }
    }
    _off() {
        if (this.io_anode && this.io_cathode) {
            this.io_anode.output(false);
            this.io_cathode.output(false);
        }
        else if (this.io_anode) {
            this.io_anode.output(false);
        }
        else if (this.io_cathode) {
            this.io_cathode.output(true);
        }
    }
}
exports.default = LED;


/***/ }),

/***/ "./dist/src/parts/Light/WS2811/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.WS2811
 */
Object.defineProperty(exports, "__esModule", { value: true });
class WS2811 {
    constructor() {
        this.keys = ['din', 'vcc', 'gnd'];
        this.requiredKeys = ['din'];
    }
    static info() {
        return {
            name: 'WS2811',
        };
    }
    static _generateFromByte(val) {
        // T0H 0.5us+-0.15us
        // T1H 1.2us+-0.15us
        // T0L 2.0us+-0.15us
        // T1L 1.3us+-0.15us
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xe;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2811._generateFromByte(r);
        array = array.concat(WS2811._generateFromByte(g));
        array = array.concat(WS2811._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        let array = WS2811._generateFromByte(R);
        array = array.concat(WS2811._generateFromByte(G));
        array = array.concat(WS2811._generateFromByte(B));
        return array;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = 'master';
        this.params.frequency = 2 * 1000 * 1000;
        this.params.mosi = this.params.din;
        this.params.drive = '5v'; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(red, green, blue) {
        this.spi.write(WS2811._generateColor(red, green, blue));
    }
    hsv(hue, saturation, value) {
        this.spi.write(WS2811._generateHsvColor(hue, saturation, value));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2811;


/***/ }),

/***/ "./dist/src/parts/Light/WS2812/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.WS2812
 */
Object.defineProperty(exports, "__esModule", { value: true });
class WS2812 {
    constructor() {
        this.keys = ['din', 'vcc', 'gnd'];
        this.requiredKeys = ['din'];
    }
    static info() {
        return {
            name: 'WS2812',
        };
    }
    static _generateFromByte(val) {
        // T0H 0.35us+-0.15us
        // T1H 0.7us+-0.15us
        // T0L 0.8us+-0.15us
        // T1L 0.6us+-0.15us
        // 0.3-0.9 and 0.6-0.6 at 3.33Mhz
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xc;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2812._generateFromByte(g);
        array = array.concat(WS2812._generateFromByte(r));
        array = array.concat(WS2812._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        return WS2812._generateColor(R, G, B);
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = 'master';
        this.params.frequency = Math.floor(3.33 * 1000 * 1000);
        this.params.mosi = this.params.din;
        this.params.drive = '5v'; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(red, green, blue) {
        this.spi.write(WS2812._generateColor(red, green, blue));
    }
    hsv(hue, saturation, value) {
        this.spi.write(WS2812._generateHsvColor(hue, saturation, value));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2812;


/***/ }),

/***/ "./dist/src/parts/Light/WS2812B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.WS2812B
 */
Object.defineProperty(exports, "__esModule", { value: true });
class WS2812B {
    constructor() {
        this.keys = ['din', 'vcc', 'gnd'];
        this.requiredKeys = ['din'];
    }
    static info() {
        return {
            name: 'WS2812B',
        };
    }
    static _generateFromByte(val) {
        // T0H 0.35us+-0.15us
        // T1H 0.9us+-0.15us
        // T0L 0.9us+-0.15us
        // T1L 0.35us+-0.15us
        // 0.3-0.9 and 0.9-0.3 at 3.33Mhz
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xe;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2812B._generateFromByte(g);
        array = array.concat(WS2812B._generateFromByte(r));
        array = array.concat(WS2812B._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        return WS2812B._generateColor(R, G, B);
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = 'master';
        this.params.frequency = Math.floor(3.33 * 1000 * 1000);
        this.params.mosi = this.params.din;
        this.params.drive = '5v'; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(red, green, blue) {
        this.spi.write(WS2812B._generateColor(red, green, blue));
    }
    hsv(hue, saturation, value) {
        this.spi.write(WS2812B._generateHsvColor(hue, saturation, value));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812B._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812B._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2812B;


/***/ }),

/***/ "./dist/src/parts/Logic/MCP23S08/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MCP23S08
 */
Object.defineProperty(exports, "__esModule", { value: true });
class MCP23S08_IO {
    constructor(chip, id) {
        this.chip = chip;
        this.id = id;
        this.value = false;
        this.direction = true; // true is input. false is output
    }
    output(value) {
        this.chip.output(this.id, value);
    }
    async outputWait(value) {
        await this.chip.outputWait(this.id, value);
    }
    async inputWait() {
        return await this.chip.inputWait(this.id);
    }
}
class MCP23S08 {
    constructor() {
        this.ios = [];
        this.keys = ['vcc', 'gnd', 'frequency', 'mosi', 'miso', 'clk', 'spi', 'cs'];
        this.requiredKeys = ['cs'];
    }
    static info() {
        return {
            name: 'MCP23S08',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = this.params.mode || 'master';
        this.params.frequency = this.params.frequency || 500000;
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.csPin = obniz.getIO(this.params.cs);
        this.readSlaveAddress = 0b01000001;
        this.writeSlaveAddress = 0b01000000;
        this.ios = [];
        for (let i = 0; i < 8; i++) {
            const io = new MCP23S08_IO(this, i);
            this.ios.push(io);
            this['io' + i] = io;
        }
    }
    /**
     * Initialize all ios. set direction=input.
     */
    async initWait() {
        await this.writeWait(MCP23S08.MCP23S08_REGISTER.IODIR, 0xff); // input
        for (let i = MCP23S08.MCP23S08_REGISTER.IPOL; i <= MCP23S08.MCP23S08_REGISTER.OLAT; i++) {
            await this.writeWait(i, 0x00);
        }
        await this.flushWait('direction');
        await this.flushWait('gpio');
    }
    /**
     * Read byte from address
     *
     * @param address internal register address
     * @returns readed value of address
     */
    async readWait(address) {
        this.csPin.output(false);
        await this.spi.writeWait([this.readSlaveAddress, address]);
        const ret = await this.spi.writeWait([0x00]);
        this.csPin.output(true);
        return ret[0];
    }
    /**
     * Write byte to address. It will wait until success response receive
     *
     * @param address internal register address
     * @param data
     */
    async writeWait(address, data) {
        this.csPin.output(false);
        await this.spi.writeWait([this.writeSlaveAddress, address, data]);
        this.csPin.output(true);
    }
    /**
     * Write byte to address without wait.
     *
     * @param address internal register address
     * @param data
     */
    write(address, data) {
        this.csPin.output(false);
        this.spi.write([this.writeSlaveAddress, address, data]);
        this.csPin.output(true);
    }
    /**
     * Bulk write to addresses
     *
     * @param address start address
     * @param data
     */
    async writeBulkWait(address, data) {
        this.csPin.output(false);
        await this.spi.writeWait([this.writeSlaveAddress, address, ...data]);
        this.csPin.output(true);
    }
    /**
     * set output value for io. It will apply immidiately.
     * This function never change direction. set direction output before.
     * If you want to hold some changes and flush once.
     * ```
     * use following examle steps
     * this.io0.value = true;
     * this.io1.value = true;
     * this.flush("gpio");
     * ```
     *
     * @param id io address. 0-7
     * @param value boolean. true or false
     */
    output(id, value) {
        value = value === true;
        this.ios[id].value = value;
        this.flush();
    }
    /**
     * async version of output();
     *
     * @param id
     * @param value
     */
    async outputWait(id, value) {
        value = value === true;
        this.ios[id].value = value;
        await this.flushWait();
    }
    /**
     * Read current all GPIO value.
     */
    async readAllGPIOWait() {
        const ret = await this.readWait(MCP23S08.MCP23S08_REGISTER.GPIO);
        for (let i = 0; i < 8; i++) {
            if (this.ios[i].direction === MCP23S08.MCP23S08_IO_DIRECTION.INPUT) {
                this.ios[i].value = (ret & (1 << i)) !== 0;
            }
        }
    }
    /**
     * Read current all GPIO value and return single io value.
     *
     * @param id io 0-7
     * @returns GPIO value
     */
    async inputWait(id) {
        await this.readAllGPIOWait();
        return this.ios[id].value;
    }
    async flushWait(type = 'gpio') {
        const keys = {
            gpio: { key: 'value', address: MCP23S08.MCP23S08_REGISTER.GPIO },
            direction: {
                key: 'direction',
                address: MCP23S08.MCP23S08_REGISTER.IODIR,
            },
        };
        const key = keys[type].key;
        const address = keys[type].address;
        let value = 0;
        for (let i = 0; i < 8; i++) {
            if (this.ios[i][key]) {
                value = value | (1 << i);
            }
        }
        await this.writeWait(address, value);
        // console.log("write",value);
        // console.log(await this.readWait(MCP23S08.MCP23S08_REGISTER.OLAT), await this.readWait(MCP23S08.MCP23S08_REGISTER.GPIO));
    }
    flush(type = 'gpio') {
        const keys = {
            gpio: { key: 'value', address: MCP23S08.MCP23S08_REGISTER.GPIO },
            direction: {
                key: 'direction',
                address: MCP23S08.MCP23S08_REGISTER.IODIR,
            },
        };
        const key = keys[type].key;
        const address = keys[type].address;
        let value = 0;
        for (let i = 0; i < 8; i++) {
            if (this.ios[i][key]) {
                value = value | (1 << i);
            }
        }
        this.write(address, value);
        // console.log("write",value);
        // console.log(await this.readWait(MCP23S08.MCP23S08_REGISTER.OLAT), await this.readWait(MCP23S08.MCP23S08_REGISTER.GPIO));
    }
}
exports.default = MCP23S08;
MCP23S08.MCP23S08_IO_DIRECTION = {
    OUTPUT: false,
    INPUT: true,
};
MCP23S08.MCP23S08_REGISTER = {
    IODIR: 0x00,
    IPOL: 0x01,
    GPINTEN: 0x02,
    DEFVAL: 0x03,
    INTCON: 0x04,
    IOCON: 0x05,
    GPPU: 0x06,
    INTF: 0x07,
    INTCAP: 0x08,
    GPIO: 0x09,
    OLAT: 0x0a,
};


/***/ }),

/***/ "./dist/src/parts/Logic/SNx4HC595/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SNx4HC595
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SNx4HC595_IO {
    constructor(chip, id) {
        this.chip = chip;
        this.id = id;
        this.value = 0;
    }
    output(value) {
        this.chip.output(this.id, value);
    }
}
/* eslint max-classes-per-file: 0 */
class SNx4HC595 {
    constructor() {
        /* http://www.ti.com/lit/ds/symlink/sn74hc595.pdf */
        this.keys = [
            'gnd',
            'vcc',
            'ser',
            'srclk',
            'rclk',
            'oe',
            'srclr',
            'io_num',
            'enabled',
        ];
        this.requiredKeys = ['ser', 'srclk', 'rclk'];
        this.autoFlash = true;
    }
    static info() {
        return {
            name: 'SNx4HC595',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_ser = this.obniz.getIO(this.params.ser);
        this.io_srclk = this.obniz.getIO(this.params.srclk);
        this.io_rclk = this.obniz.getIO(this.params.rclk);
        this.io_ser.output(false);
        this.io_srclk.output(false);
        this.io_rclk.output(false);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (this.obniz.isValidIO(this.params.srclr)) {
            this.io_srclr = this.obniz.getIO(this.params.srclr);
            this.io_srclr.output(true);
        }
        if (this.obniz.isValidIO(this.params.oe)) {
            this.io_oe = this.obniz.getIO(this.params.oe);
            this.io_oe.output(true);
        }
        if (this.obniz.isValidIO(this.params.vcc) ||
            this.obniz.isValidIO(this.params.gnd)) {
            this.obniz.wait(100);
        }
        if (typeof this.params.io_num !== 'number') {
            this.params.io_num = 8;
        }
        this.ioNum(this.params.io_num);
        if (typeof this.params.enabled !== 'boolean') {
            this.params.enabled = true;
        }
        if (this.io_oe && this.params.enabled) {
            this.io_oe.output(false);
        }
    }
    ioNum(num) {
        if (typeof num === 'number' && this._io_num !== num) {
            this._io_num = num;
            this.io = [];
            for (let i = 0; i < num; i++) {
                this.io.push(new SNx4HC595_IO(this, i));
            }
            this.flush();
        }
        else {
            throw new Error('io num should be a number');
        }
    }
    isValidIO(io) {
        return typeof io === 'number' && io >= 0 && io < this._io_num;
    }
    getIO(io) {
        if (!this.isValidIO(io)) {
            throw new Error('io ' + io + ' is not valid io');
        }
        return this.io[io];
    }
    output(id, value) {
        value = value === true;
        this.io[id].value = value;
        if (this.autoFlash) {
            this.flush();
        }
    }
    onece(operation) {
        if (typeof operation !== 'function') {
            throw new Error('please provide function');
        }
        const lastValue = this.autoFlash;
        this.autoFlash = false;
        operation();
        this.flush();
        this.autoFlash = lastValue;
    }
    setEnable(enable) {
        if (!this.io_oe && enable === false) {
            throw new Error('pin "oe" is not specified');
        }
        this.io_oe.output(!enable);
    }
    flush() {
        /* this code will works with 5v. But you should pay more attention when 3v. Timing is more tight. see chip reference */
        this.io_rclk.output(false);
        for (let i = this.io.length - 1; i >= 0; i--) {
            this.io_ser.output(this.io[i].value);
            this.io_srclk.output(true);
            this.io_srclk.output(false);
        }
        this.io_rclk.output(true);
    }
}
exports.default = SNx4HC595;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_ADC/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StickC_ADC
 */
Object.defineProperty(exports, "__esModule", { value: true });
class M5StickC_ADC {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c'];
        this.requiredKeys = [];
        this.address = 0x48;
        this.conversionDelay = 100;
        this.config_regs = {
            OS_MASK: 0x80,
            OS_NOEFFECT: 0x00,
            OS_SINGLE: 0x80,
            OS_BUSY: 0x00,
            OS_NOTBUSY: 0x80,
            MODE_MASK: 0x10,
            MODE_CONTIN: 0x00,
            MODE_SINGLE: 0x10,
            DR_MASK: 0x0c,
            DR_128SPS: 0x00,
            DR_32SPS: 0x04,
            DR_16SPS: 0x08,
            DR_8SPS: 0x0c,
            PGA_MASK: 0x03,
            PGA_1: 0x00,
            PGA_2: 0x01,
            PGA_4: 0x02,
            PGA_8: 0x03,
        };
        this.os = this.config_regs.OS_SINGLE;
        this.mode = this.config_regs.MODE_CONTIN;
        this.dataRate = this.config_regs.DR_8SPS;
        this.pga = this.config_regs.PGA_1;
        this.minCode = 32768;
        this.updateConfig();
    }
    static info() {
        return {
            name: 'M5StickC_ADC',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.sda) &&
            !this.obniz.isValidIO(this.params.scl) &&
            !this.params.i2c) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').i2c;
                this.params.sda = hatI2c.sda;
                this.params.scl = hatI2c.scl;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'");
            }
        }
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = 'master';
        this.params.clock = 400000;
        this.params.pull = '5v';
        this.i2c = this.obniz.getI2CWithConfig(this.params);
        this.obniz.wait(100);
    }
    async getVoltageWait() {
        const raw = await this.getWait();
        const voltage = ((raw * 3.3) / this.minCode) * 4;
        return voltage;
    }
    setRate(dataRate) {
        switch (dataRate) {
            case 8:
                this.dataRate = this.config_regs.DR_8SPS;
                this.minCode = 32768;
                break;
            case 16:
                this.dataRate = this.config_regs.DR_16SPS;
                this.minCode = 16384;
                break;
            case 32:
                this.dataRate = this.config_regs.DR_32SPS;
                this.minCode = 8192;
                break;
            case 128:
                this.dataRate = this.config_regs.DR_128SPS;
                this.minCode = 2048;
                break;
            default:
                throw new Error(`argument must be selected from 8, 16, 32, 128.`);
        }
    }
    setGain(gain) {
        switch (gain) {
            case 1:
                this.pga = this.config_regs.PGA_1;
                break;
            case 2:
                this.pga = this.config_regs.PGA_2;
                break;
            case 4:
                this.pga = this.config_regs.PGA_4;
                break;
            case 8:
                this.pga = this.config_regs.PGA_8;
                break;
            default:
                throw new Error(`argument must be selected from 1, 2, 4, 8.`);
        }
    }
    setMode(mode) {
        switch (mode) {
            case 'CONTIN':
                this.mode = this.config_regs.MODE_CONTIN;
                break;
            case 'SINGLE':
                this.mode = this.config_regs.MODE_SINGLE;
                break;
            default:
                throw new Error(`argument must be selected from "CONTIN" or "SINGLE".`);
        }
    }
    async getWait() {
        this.updateConfig();
        this.i2c.write(this.address, [this.config]);
        await this.obniz.wait(this.conversionDelay);
        const ret = await this.i2c.readWait(this.address, 2);
        return (ret[0] << 8) | ret[1];
    }
    updateConfig() {
        this.config = 0x00;
        this.config |= this.os;
        this.config |= this.mode;
        this.config |= this.dataRate;
        this.config |= this.pga;
    }
}
exports.default = M5StickC_ADC;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_DAC/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StickC_DAC
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MCP4725_1 = __importDefault(__webpack_require__("./dist/src/parts/DAConverter/MCP4725/index.js"));
class M5StickC_DAC extends MCP4725_1.default {
    static info() {
        return {
            name: 'M5StickC_DAC',
        };
    }
    wired(obniz) {
        if (!this.obniz.isValidIO(this.params.sda) &&
            !this.obniz.isValidIO(this.params.scl) &&
            !this.params.i2c) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').i2c;
                this.params.sda = hatI2c.sda;
                this.params.scl = hatI2c.scl;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'");
            }
        }
        super.wired(obniz);
    }
}
exports.default = M5StickC_DAC;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_FINGER/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class M5StickC_FINGER {
    constructor() {
        this.HEAD = 0;
        this.CMD = 1;
        this.CHK = 6;
        this.TAIL = 7;
        this.P1 = 2;
        this.P2 = 3;
        this.P3 = 4;
        this.Q1 = 2;
        this.Q2 = 3;
        this.Q3 = 4;
        this.TxBuf = [0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.RxBuf = [0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.requiredKeys = [];
        this.keys = ['tx', 'rx', 'gnd'];
        this.ack = {
            SUCCESS: 0x00,
            FAIL: 0x01,
            FULL: 0x04,
            NOUSER: 0x05,
            USER_EXIST: 0x07,
            TIMEOUT: 0x08,
            GO_OUT: 0x0f,
            ALL_USER: 0x00,
            GUEST_USER: 0x01,
            NORMAL_USER: 0x02,
            MASTER_USER: 0x03,
        };
        this.cmd = {
            HEAD: 0xf5,
            TAIL: 0xf5,
            ADD_1: 0x01,
            ADD_2: 0x02,
            ADD_3: 0x03,
            GET_PERMISSION: 0x0a,
            MATCH: 0x0c,
            DEL: 0x04,
            DEL_ALL: 0x05,
            USER_CNT: 0x09,
            SECURITY_LEVEL: 0x28,
            SLEEP_MODE: 0x2c,
            ADD_MODE: 0x2d,
            FINGER_DETECTED: 0x14,
        };
    }
    static info() {
        return {
            name: 'M5StickC_FINGER',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(null, this.params.gnd, '3v');
        if (!this.obniz.isValidIO(this.params.tx) &&
            !this.obniz.isValidIO(this.params.rx)) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').uart;
                this.params.tx = hatI2c.tx;
                this.params.rx = hatI2c.rx;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'tx'/'rx'");
            }
        }
        this.uart = this.obniz.getFreeUart();
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 19200,
        });
    }
    async getUserNumWait() {
        this.TxBuf[this.CMD] = this.cmd.USER_CNT;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0;
        const res = await this.sendAndReceiveWait(200);
        if (res === this.ack.SUCCESS && this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.RxBuf[this.Q2];
        }
        else {
            return 0xff;
        }
    }
    async addUserWait(userNum, userPermission) {
        this.TxBuf[this.CMD] = this.cmd.ADD_1;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = userNum;
        this.TxBuf[this.P3] = userPermission;
        let res = await this.sendAndReceiveWait(3000);
        if (res === this.ack.SUCCESS) {
            if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
                this.TxBuf[this.CMD] = this.cmd.ADD_2;
                res = await this.sendAndReceiveWait(3000);
                if (res === this.ack.SUCCESS) {
                    this.TxBuf[this.CMD] = this.cmd.ADD_3;
                    res = await this.sendAndReceiveWait(3000);
                    if (this.ack.SUCCESS) {
                        return this.RxBuf[this.Q3];
                    }
                }
            }
        }
        return res;
    }
    async compareFingerWait() {
        this.TxBuf[this.CMD] = this.cmd.MATCH;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0;
        const res = await this.sendAndReceiveWait(3000);
        if (res === this.ack.SUCCESS) {
            if (this.RxBuf[this.Q3] === this.ack.NOUSER) {
                return this.ack.NOUSER;
            }
            if (this.RxBuf[this.Q3] === this.ack.TIMEOUT) {
                return this.ack.TIMEOUT;
            }
            return this.RxBuf[this.Q3];
        }
        return res;
    }
    async sleepWait() {
        this.TxBuf[this.CMD] = this.cmd.SLEEP_MODE;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0;
        const res = await this.sendAndReceiveWait(500);
        if (res === this.ack.SUCCESS) {
            return this.ack.SUCCESS;
        }
        else {
            return this.ack.FAIL;
        }
    }
    async setAddModeWait(mode) {
        this.TxBuf[this.CMD] = this.cmd.ADD_MODE;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = mode;
        this.TxBuf[this.P3] = 0;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.ack.SUCCESS;
        }
        throw Error('failed to set add mode.');
    }
    async readAddModeWait() {
        this.TxBuf[this.CMD] = this.cmd.ADD_MODE;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0x01;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.RxBuf[this.Q2];
        }
        throw Error('failed to read add mode.');
    }
    async deleteAllUserWait() {
        this.TxBuf[this.CMD] = this.cmd.DEL_ALL;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.ack.SUCCESS;
        }
        throw Error('failed to delete all users.');
    }
    async deleteUserWait(userNum) {
        this.TxBuf[this.CMD] = this.cmd.DEL;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = userNum;
        this.TxBuf[this.P3] = 0;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.ack.SUCCESS;
        }
        throw Error('failed to delete user: ' + userNum);
    }
    async getUserPermissionWait(userNum) {
        this.TxBuf[this.CMD] = this.cmd.GET_PERMISSION;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = userNum;
        this.TxBuf[this.P3] = 0;
        await this.sendAndReceiveWait(200);
        return this.RxBuf[this.Q3];
    }
    async setSecurityLevelWait(level) {
        if (level < 0 || level > 9) {
            throw Error('security level argument must be between 0 and 9');
        }
        this.TxBuf[this.CMD] = this.cmd.SECURITY_LEVEL;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = level;
        this.TxBuf[this.P3] = 0x00;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.ack.SUCCESS;
        }
        throw Error('failed to set security level.');
    }
    async getSecurityLevelWait() {
        this.TxBuf[this.CMD] = this.cmd.SECURITY_LEVEL;
        this.TxBuf[this.P1] = 0;
        this.TxBuf[this.P2] = 0;
        this.TxBuf[this.P3] = 0x01;
        await this.sendAndReceiveWait(200);
        if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {
            return this.RxBuf[this.Q2];
        }
        throw Error('failed to get security level.');
    }
    async sendAndReceiveWait(timeout) {
        let checkSum = 0;
        this.TxBuf[5] = 0;
        this.uart.send(this.cmd.HEAD);
        for (let i = 1; i < 6; i++) {
            this.uart.send(this.TxBuf[i]);
            checkSum ^= this.TxBuf[i];
        }
        this.uart.send(checkSum);
        this.uart.send(this.cmd.TAIL);
        await this.obniz.wait(timeout);
        if (!this.uart.isDataExists()) {
            return this.ack.TIMEOUT;
        }
        this.RxBuf = this.uart.readBytes();
        // console.log("RxBuf: " + this.RxBuf);
        if (this.RxBuf.length !== 8) {
            return this.ack.TIMEOUT;
        }
        if (this.RxBuf[this.HEAD] !== this.cmd.HEAD) {
            throw Error('communication failed.');
        }
        if (this.RxBuf[this.TAIL] !== this.cmd.TAIL) {
            throw Error('communication failed.');
        }
        if (this.RxBuf[this.CMD] !== this.TxBuf[this.CMD]) {
            throw Error('communication failed.');
        }
        checkSum = 0;
        for (let i = 1; i < this.CHK; i++) {
            checkSum ^= this.RxBuf[i];
        }
        if (checkSum !== this.RxBuf[this.CHK]) {
            throw Error('communication failed.');
        }
        return this.ack.SUCCESS;
    }
}
exports.default = M5StickC_FINGER;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_JoyStick/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StickC_JoyStick
 */
Object.defineProperty(exports, "__esModule", { value: true });
class M5StickC_JoyStick {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'M5StickC_JoyStick',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.sda) &&
            !this.obniz.isValidIO(this.params.scl) &&
            !this.params.i2c) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').i2c;
                this.params.sda = hatI2c.sda;
                this.params.scl = hatI2c.scl;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'");
            }
        }
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.obniz.wait(100); // wait for booting of STM32F030F4
        this.params.mode = 'master';
        this.params.clock = 100000;
        this.params.pull = '5v';
        this.i2c = this.obniz.getI2CWithConfig(this.params);
    }
    async getXWait() {
        const ret = await this.getXYWait();
        let val = ret[0];
        if (val > 0x7f) {
            val = val - 0x100;
        }
        return val;
    }
    async getYWait() {
        const ret = await this.getXYWait();
        let val = ret[1];
        if (val > 0x7f) {
            val = val - 0x100;
        }
        return val;
    }
    async isPressedWait() {
        this.i2c.write(0x38, [0x02]);
        const ret = await this.i2c.readWait(0x38, 3);
        return !ret[2];
    }
    async getXYWait() {
        this.i2c.write(0x38, [0x02]);
        const ret = await this.i2c.readWait(0x38, 3);
        return ret;
    }
}
exports.default = M5StickC_JoyStick;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_RS485/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StackC_RS485
 */
Object.defineProperty(exports, "__esModule", { value: true });
class M5StickC_RS485 {
    constructor() {
        this.keys = ['tx', 'rx', 'gnd', 'vcc', 'baud'];
        this.requiredKeys = ['tx', 'rx'];
    }
    static info() {
        return {
            name: 'M5StickC_RS485',
        };
    }
    wired(obniz) {
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        if (obniz.isValidIO(this.params.vcc)) {
            obniz.getIO(this.params.vcc).output(true);
        }
        this.params.baud = this.params.baud || 9600;
        if (!this.obniz.isValidIO(this.params.tx) &&
            !this.obniz.isValidIO(this.params.rx)) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const uart = this.obniz.getExtraInterface('m5stickc_hat').uart;
                this.params.tx = uart.tx;
                this.params.rx = uart.rx;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'tx'/'rx'");
            }
        }
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: this.params.baud,
        });
        this.uart.onreceive = (data, text) => {
            if (typeof this.onreceive === 'function') {
                this.onreceive(data, text);
            }
        };
    }
    send(data) {
        this.uart.send(data);
    }
}
exports.default = M5StickC_RS485;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_ToF/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StickC_ToF
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const VL53L0X_1 = __importDefault(__webpack_require__("./dist/src/parts/DistanceSensor/VL53L0X/index.js"));
class M5StickC_ToF extends VL53L0X_1.default {
    static info() {
        return {
            name: 'M5StickC_ToF',
        };
    }
    wired(obniz) {
        if (!this.obniz.isValidIO(this.params.sda) &&
            !this.obniz.isValidIO(this.params.scl) &&
            !this.params.i2c) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').i2c;
                this.params.sda = hatI2c.sda;
                this.params.scl = hatI2c.scl;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'");
            }
        }
        super.wired(obniz);
    }
}
exports.default = M5StickC_ToF;


/***/ }),

/***/ "./dist/src/parts/M5Stack/M5StickC_Yun/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.M5StickC_Yun
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class M5StickC_Yun {
    constructor() {
        this.LED_LEN = 14;
        this.requiredKeys = [];
        this.keys = ['sda', 'scl', 'i2c'];
        this.ioKeys = ['sda', 'scl'];
    }
    static info() {
        return {
            name: 'M5StickC_Yun',
        };
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R = 0;
        let G = 0;
        let B = 0;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        return { red: R, green: G, blue: B };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.sda) &&
            !this.obniz.isValidIO(this.params.scl) &&
            !this.params.i2c) {
            if (this.obniz.hasExtraInterface('m5stickc_hat')) {
                const hatI2c = this.obniz.getExtraInterface('m5stickc_hat').i2c;
                this.params.sda = hatI2c.sda;
                this.params.scl = hatI2c.scl;
            }
            else {
                throw new Error("Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'");
            }
        }
        this.params.clock = 100 * 1000; // for i2c
        this.params.mode = 'master'; // for i2c
        this.params.pull = '3v'; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.sht20 = obniz.wired('SHT20', { i2c: this.i2c });
        this.bmp280 = obniz.wired('BMP280', { i2c: this.i2c });
        this.bmp280.applyCalibration();
    }
    // public setColorCode(ledNum: number, colorCode: string) {
    //   const hexConvert = (hex: string) => {
    //     if (hex.slice(0, 1) === "#") {
    //       hex = hex.slice(1);
    //     }
    //     if (hex.length === 3) {
    //       hex = hex.slice(0, 1) + hex.slice(0, 1) + hex.slice(1, 2) + hex.slice(1, 2) + hex.slice(2, 3) + hex.slice(2, 3);
    //     }
    //
    //     return [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)].map((str) => {
    //       return parseInt(str, 16);
    //     });
    //   };
    //   const color: number[] = hexConvert(colorCode);
    //   this.rgb(color[0], color[1], color[2]);
    // }
    rgb(red, green, blue) {
        util_1.default.assertNumber(0, 255, 'red', red);
        util_1.default.assertNumber(0, 255, 'green', green);
        util_1.default.assertNumber(0, 255, 'blue', blue);
        const leds = [];
        for (let i = 0; i < this.LED_LEN; i++) {
            leds.push([red, green, blue]);
        }
        this.rgbs(leds);
    }
    hsv(hue, saturation, value) {
        util_1.default.assertNumber(0, 300, 'hue', hue);
        util_1.default.assertNumber(0, 1, 'saturation', saturation);
        util_1.default.assertNumber(0, 1, 'value', value);
        const color = M5StickC_Yun._generateHsvColor(hue, saturation, value);
        this.rgb(color.red, color.green, color.blue);
    }
    rgbs(array) {
        if (array.length <= this.LED_LEN) {
            array.forEach((value, index) => {
                this.i2c.write(0x38, [
                    0x01,
                    index,
                    Math.floor(value[0]),
                    Math.floor(value[1]),
                    Math.floor(value[2]),
                ]);
            });
        }
    }
    hsvs(array) {
        const leds = array.map((value, index) => {
            const color = M5StickC_Yun._generateHsvColor(value[0], value[1], value[2]);
            return [color.red, color.green, color.blue];
        });
        this.rgbs(leds);
    }
    async getLightWait() {
        this.i2c.write(0x38, [0x00]);
        const d = await this.i2c.readWait(0x38, 2);
        return (d[1] << 8) | d[0];
    }
    async getTempWait() {
        return await this.sht20.getTempWait();
    }
    async getHumidWait() {
        return await this.sht20.getHumidWait();
    }
    async getPressureWait() {
        return await this.bmp280.getPressureWait();
    }
}
exports.default = M5StickC_Yun;


/***/ }),

/***/ "./dist/src/parts/Magnet/CT10/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.CT10
 */
Object.defineProperty(exports, "__esModule", { value: true });
class CT10 {
    constructor() {
        this.isNear = null;
        this.onchange = null;
        this.keys = ['signal', 'gnd', 'vcc'];
        this.requiredKeys = ['signal'];
        this.onChangeForStateWait = () => {
            // do nothing.
        };
    }
    static info() {
        return {
            name: 'CT10',
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
            this.io_vcc.output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        this.io_signal.pull('0v');
        this.io_signal.input((value) => {
            this.isNear = value;
            if (this.onchange) {
                this.onchange(value);
            }
            this.onChangeForStateWait(value);
        });
    }
    async isNearWait() {
        return await this.io_signal.inputWait();
    }
    stateWait(isNear) {
        return new Promise((resolve) => {
            this.onChangeForStateWait = (near) => {
                if (isNear === near) {
                    this.onChangeForStateWait = () => {
                        // do nothing.
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = CT10;


/***/ }),

/***/ "./dist/src/parts/Magnet/HMC5883L/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.HMC5883L
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cCompass_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cCompass.js"));
class HMC5883L extends i2cCompass_1.default {
    constructor() {
        super();
        this.defaultUnit = 'G';
        this.i2cinfo = {
            address: 0x1e,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        this.sf = this.defaultUnit;
        this.so = HMC5883L.scales[1];
        this.range = '8G';
    }
    static info() {
        return {
            name: 'HMC5883L',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        // this.obniz.wait(500);
        this.init();
    }
    init() {
        this.reset();
        // this.obniz.wait(500);
    }
    reset() {
        this.write(HMC5883L.commands.mode, 0x00);
    }
    async getAdcWait() {
        const raw = await this.readWait(HMC5883L.commands.x_MSB, 6);
        return HMC5883L.charArrayToXyz(raw, 'b');
    }
    setRange(index) {
        this.write(HMC5883L.commands.config_b, index << 5);
        this.so = HMC5883L.scales[index];
    }
    /**
     * @deprecated
     */
    get() {
        return this.getWait();
    }
}
exports.default = HMC5883L;
HMC5883L.commands = {
    config_a: 0x00,
    config_b: 0x01,
    mode: 0x02,
    x_MSB: 0x03,
    status: 0x09,
};
HMC5883L.scales = [
    1 / 1370,
    1 / 1090,
    1 / 820,
    1 / 660,
    1 / 440,
    1 / 390,
    1 / 330,
    1 / 230,
];


/***/ }),

/***/ "./dist/src/parts/Memory/24LC256/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.24LC256
 */
Object.defineProperty(exports, "__esModule", { value: true });
class _24LC256 {
    constructor() {
        this.requiredKeys = ['address'];
        this.keys = ['sda', 'scl', 'clock', 'pull', 'i2c', 'address'];
    }
    static info() {
        return {
            name: '24LC256',
        };
    }
    wired(obniz) {
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    // Module functions
    set(address, data) {
        const array = [];
        array.push((address >> 8) & 0xff);
        array.push(address & 0xff);
        array.push(...data);
        this.i2c.write(0x50, array);
        this.obniz.wait(4 + 1); // write cycle time = 4ms for 24XX00, 1.5ms for 24C01C, 24C02C
    }
    async getWait(address, length) {
        const array = [];
        array.push((address >> 8) & 0xff);
        array.push(address & 0xff);
        this.i2c.write(0x50, array);
        return await this.i2c.readWait(0x50, length);
    }
}
exports.default = _24LC256;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/AK09916/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.AK09916
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class AK09916 extends i2cParts_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x0c,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        this.ADDR = 0x0c;
        this._WIA = 0x01;
        this._HXL = 0x11;
        this._HXH = 0x12;
        this._HYL = 0x13;
        this._HYH = 0x14;
        this._HZL = 0x15;
        this._HZH = 0x16;
        this._ST2 = 0x18;
        this._CNTL2 = 0x31;
        this._ASAX = 0x60;
        this._ASAY = 0x61;
        this._ASAZ = 0x62;
        this._MODE_POWER_DOWN = 0b00000000;
        this.MODE_SINGLE_MEASURE = 0b00000001;
        this.MODE_CONTINOUS_MEASURE_1 = 0b00000010; // 10Hz
        this.MODE_CONTINOUS_MEASURE_2 = 0b00001000; // 100Hz
        this.MODE_EXTERNAL_TRIGGER_MEASURE = 0b00000100;
        this._MODE_SELF_TEST = 0b00001000;
        this._MODE_FUSE_ROM_ACCESS = 0b00011111;
        this.OUTPUT_14_BIT = 0b00000000;
        this.OUTPUT_16_BIT = 0b00010000;
        this._SO_14BIT = 0.6; // per digit when 14bit mode
        this._SO_16BIT = 0.15; //  per digit when 16bit mode
        this.offset = [0, 0, 0];
        this.scale = [1, 1, 1];
        this.so = this._SO_16BIT;
    }
    static info() {
        return {
            name: 'AK09916',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        this.write(this._CNTL2, this.MODE_CONTINOUS_MEASURE_1);
    }
    /**
     * @deprecated
     */
    magnetic() {
        return this.magneticWait();
    }
    async magneticWait() {
        // 0111 1111 1111 0000 4912 uT
        // 1111 1111 1111 1111 -1 uT
        // 1000 0000 0001 0000 -4912 uT
        const raw3 = await this.readThreeInt16Wait(this._HXL, 'l');
        this.readWait(this._ST2, 1);
        const xyz = raw3.map((d, i) => {
            return (d * this.so - this.offset[i]) * this.scale[i];
        });
        return xyz;
    }
    async whoamiWait() {
        const result = await this.readWait(this._WIA, 1);
        return result[0];
    }
    async calibrateWait(count = 256, delay = 200) {
        this.offset = [0, 0, 0];
        this.scale = [1, 1, 1];
        let reading = await this.magnetic();
        let minx = reading[0];
        let maxx = reading[0];
        let miny = reading[1];
        let maxy = reading[1];
        let minz = reading[2];
        let maxz = reading[2];
        while (count > 0) {
            await new Promise((r) => setTimeout(r, delay));
            reading = await this.magnetic();
            minx = Math.min(minx, reading[0]);
            maxx = Math.max(maxx, reading[0]);
            miny = Math.min(miny, reading[1]);
            maxy = Math.max(maxy, reading[1]);
            minz = Math.min(minz, reading[2]);
            maxz = Math.max(maxz, reading[2]);
            count -= 1;
        }
        // Hard iron correction
        const offset_x = (maxx + minx) / 2;
        const offset_y = (maxy + miny) / 2;
        const offset_z = (maxz + minz) / 2;
        this.offset = [offset_x, offset_y, offset_z];
        // Soft iron correction
        const avg_delta_x = (maxx - minx) / 2;
        const avg_delta_y = (maxy - miny) / 2;
        const avg_delta_z = (maxz - minz) / 2;
        const avg_delta = (avg_delta_x + avg_delta_y + avg_delta_z) / 3;
        const scale_x = avg_delta / avg_delta_x;
        const scale_y = avg_delta / avg_delta_y;
        const scale_z = avg_delta / avg_delta_z;
        this.scale = [scale_x, scale_y, scale_z];
        return { offset: this.offset, scale: this.scale };
    }
}
exports.default = AK09916;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/AK8963/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.AK8963
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cCompass_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cCompass.js"));
class AK8963 extends i2cCompass_1.default {
    constructor() {
        super();
        this.defaultUnit = 'uT';
        this.i2cinfo = {
            address: 0x0c,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        this.sf = this.defaultUnit;
        this.so = AK8963.scales.so_16bit;
        this.range = '4912uT';
    }
    static info() {
        return {
            name: 'AK8963',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        this.setConfig(this.params.adc_cycle || 8);
    }
    setConfig(ADC_cycle) {
        switch (ADC_cycle) {
            case 8:
                this.write(0x0a, [0x12]); // 16bit
                break;
            case 100:
                this.write(0x0a, [0x16]); // 16bit
                break;
            default:
                throw new Error('Invalid ADC_cycle value. Valid values are 8,100.');
        }
    }
    async getAdcWait() {
        const raw = await this.readWait(0x03, 7);
        return AK8963.charArrayToXyz(raw, 'l');
    }
}
exports.default = AK8963;
AK8963.scales = {
    so_14bit: 4912 / 8190,
    so_16bit: 4912 / 32760,
};


/***/ }),

/***/ "./dist/src/parts/MovementSensor/Button/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Button
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Button {
    constructor() {
        this.isPressed = null;
        this.onchange = null;
        this.keys = ['signal', 'gnd', 'pull'];
        this.requiredKeys = ['signal'];
        this.onChangeForStateWait = () => {
            // do nothing.
        };
    }
    static info() {
        return {
            name: 'Button',
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        // start input
        if (this.params.pull === '3v') {
            this.io_signal.pull('3v');
        }
        else if (this.params.pull === '0v') {
            this.io_signal.pull('0v');
        }
        else {
            this.io_signal.pull('5v');
        }
        this.io_signal.input((value) => {
            this.isPressed = value === false;
            if (this.onchange) {
                this.onchange(value === false);
            }
            this.onChangeForStateWait(value === false);
        });
    }
    async isPressedWait() {
        const ret = await this.io_signal.inputWait();
        return ret === false;
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                        // do nothing.
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Button;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/FlickHat/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.FlickHat
 */
Object.defineProperty(exports, "__esModule", { value: true });
class FlickHat {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'reset', 'ts', 'led1', 'led2'];
        this.requiredKeys = ['gnd', 'sda', 'scl', 'reset', 'ts'];
        this.displayIoNames = {
            // vcc: 'vcc', //5v
            sda: 'sda',
            scl: 'scl',
            gnd: 'gnd',
            reset: 'reset',
            ts: 'ts',
        };
    }
    static info() {
        return {
            name: 'FlickHat',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.address = 0x42;
        if (this.obniz.isValidIO(this.params.vcc)) {
            this.obniz.getIO(this.params.vcc).drive('5v');
            this.obniz.getIO(this.params.vcc).output(true);
        }
        this.obniz.getIO(this.params.gnd).output(false);
        this.io_reset = this.obniz.getIO(this.params.reset);
        this.io_reset.drive('3v');
        this.io_ts = this.obniz.getIO(this.params.ts);
        this.io_ts.drive('open-drain');
        this.io_ts.pull('3v');
        this.params.mode = 'master';
        this.params.pull = '3v';
        this.params.clock = 100 * 1000; // 100KHz
        // PeripheralI2C
        this.i2c = this.obniz.getI2CWithConfig(this.params);
        if (this.obniz.isValidIO(this.params.led1)) {
            this.led1 = this.obniz.wired('LED', { anode: this.params.led1 });
        }
        if (this.obniz.isValidIO(this.params.led2)) {
            this.led2 = this.obniz.wired('LED', { anode: this.params.led2 });
        }
    }
    /**
     * @deprecated
     * @param callback
     */
    start(callback) {
        return this.startWait(callback);
    }
    async startWait(callback) {
        this.io_ts.pull('3v');
        this.io_reset.output(false);
        await this.obniz.wait(50);
        this.io_reset.output(true);
        await this.obniz.wait(50);
        this.onfwinfo = callback;
        this.fwInfo = {
            fwValid: 0,
            fwInfoReceived: false,
        };
        this.rotation = 0;
        this.lastRotation = 0;
        this.readSize = 132;
        await this.polling();
        await this.obniz.wait(200);
        this.i2c.write(this.address, [
            0x10,
            0x00,
            0x00,
            0xa2,
            0xa1,
            0x00,
            0x00,
            0x00,
            0x1f,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0xff,
            0xff,
        ]);
        await this.obniz.wait(100);
        this.i2c.write(this.address, [
            0x10,
            0x00,
            0x00,
            0xa2,
            0x80,
            0x00,
            0x00,
            0x00,
            0x3f,
            0x00,
            0x00,
            0x00,
            0x3f,
            0x00,
            0x00,
            0x00,
        ]);
    }
    _dataArray2string(data) {
        let result = '';
        for (const n of data) {
            result += String.fromCharCode(n);
        }
        return result;
    }
    /**
     * @deprecated
     * @param timeout
     */
    polling(timeout) {
        return this.pollingWait(timeout);
    }
    async pollingWait(timeout) {
        timeout = timeout || 3000; // default: 3s
        // DataOutputConfigMask	2byte
        // const maskDSPStatus = 1;
        const maskGestureInfo = 1 << 1;
        const maskTouchInfo = 1 << 2;
        const maskAirWheelInfo = 1 << 3;
        const maskXYZPosition = 1 << 4;
        // SystemInfo	1byte
        const sysPositionValid = 1;
        const sysAirWheelValid = 1 << 1;
        // const sysDSPRunning = 1 << 7;
        const startTime = new Date();
        let ts = true;
        while (ts && new Date() - startTime < timeout) {
            ts = await this.io_ts.inputWait();
        }
        if (!ts) {
            this.io_ts.pull('0v');
            // await this.obniz.wait(1);
            const data = await this.i2c.readWait(this.address, this.readSize);
            const size = data[0];
            // let flag = data[1];
            const seq = data[2];
            const msgID = data[3];
            if (size !== 0xff && size > 0) {
                if (this.debugprint || this.obniz.debugprint) {
                    console.log('flickHat: ' +
                        data.slice(0, size).map((v) => '0x' + v.toString(16)));
                }
                let configmask;
                let sysinfo;
                let gesture;
                let touch;
                let airwheel;
                let statusInfo;
                let fwInfo;
                switch (msgID) {
                    case 0x91: // sensor data output
                        configmask = data[4] | (data[5] << 8); // little endian
                        // let timestamp = data[6]; // 200hz, 8-bit counter, max ~1.25sec
                        sysinfo = data[7];
                        // let dspstatus = data.slice(8, 10);
                        gesture = data.slice(10, 14);
                        touch = data.slice(14, 18);
                        airwheel = data.slice(18, 20);
                        // let xyz = data.slice(20, 26);
                        // let noisepow = data.slice(27, 30);
                        if (gesture[0] === 255 &&
                            gesture[1] === 255 &&
                            gesture[2] === 255 &&
                            gesture[3] === 255) {
                            break;
                        }
                        if (configmask & maskXYZPosition && sysinfo & sysPositionValid) {
                            const xyz = {
                                // little endian
                                x: (data[20] | (data[21] << 8)) / 65536,
                                y: (data[22] | (data[23] << 8)) / 65536,
                                z: (data[24] | (data[25] << 8)) / 65536,
                                seq,
                            };
                            this.xyz = xyz;
                            if (typeof this.onxyz === 'function') {
                                this.onxyz(xyz);
                            }
                        }
                        if (configmask & maskGestureInfo && gesture[0] > 0) {
                            this.lastGesture = gesture[0];
                            const gestures = [
                                ['', '', ''],
                                ['garbage', '', ''],
                                ['flick', 'west', 'east'],
                                ['flick', 'east', 'west'],
                                ['flick', 'south', 'north'],
                                ['flick', 'north', 'south'],
                                ['circle', 'clockwise', ''],
                                ['circle', 'counter-clockwise', ''],
                                ['wave', 'x', ''],
                                ['wave', 'y', ''],
                                ['hold', '', ''],
                            ];
                            for (const index in gestures) {
                                if (index === gesture[0] &&
                                    typeof this.ongestureall === 'function') {
                                    this.ongestureall({
                                        action: gestures[index][0],
                                        from: gestures[index][1],
                                        to: gestures[index][2],
                                        raw: gesture,
                                        seq,
                                    });
                                }
                                if (index === gesture[0] &&
                                    gestures[index][0] === 'flick' &&
                                    typeof this.ongesture === 'function') {
                                    this.ongesture({
                                        action: 'gesture',
                                        from: gestures[index][1],
                                        to: gestures[index][2],
                                        raw: gesture,
                                        seq,
                                    });
                                }
                            }
                        }
                        if (configmask & maskTouchInfo &&
                            !(touch[0] === 0 && touch[1] === 0) &&
                            touch[3] === 0) {
                            // console.log('touch: ' + touch.map(v => '0x' + v.toString(16)));
                            const touchAction = touch[0] | (touch[1] << 8); // little endian
                            if (touchAction === 0xffff) {
                                break;
                            }
                            // let touchCount = touch[2] * 5; // touch counter value * 5[ms]
                            const actions = [
                                ['touch', 'south'],
                                ['touch', 'west'],
                                ['touch', 'north'],
                                ['touch', 'east'],
                                ['touch', 'center'],
                                ['tap', 'south'],
                                ['tap', 'west'],
                                ['tap', 'north'],
                                ['tap', 'east'],
                                ['tap', 'center'],
                                ['doubletap', 'south'],
                                ['doubletap', 'west'],
                                ['doubletap', 'north'],
                                ['doubletap', 'east'],
                                ['doubletap', 'center'],
                            ];
                            const touches = [];
                            const taps = [];
                            const doubletaps = [];
                            this.lastTouch = touchAction;
                            let comp = 1;
                            for (const index in actions) {
                                const value = actions[index];
                                if (touchAction & comp) {
                                    // console.log(`touchAction:${touchAction.toString(16)}, comp:${comp.toString(16)}, index:${index}, group:${group}`);
                                    switch (value[0]) {
                                        case 'touch':
                                            touches.push(value[1]);
                                            break;
                                        case 'tap':
                                            taps.push(value[1]);
                                            break;
                                        case 'doubletap':
                                            doubletaps.push(value[1]);
                                            break;
                                        default:
                                    }
                                }
                                comp <<= 1;
                            }
                            if (touches.length > 0 && typeof this.ontouch === 'function') {
                                this.ontouch({
                                    action: 'touch',
                                    positions: touches,
                                    raw: touch,
                                    seq,
                                });
                            }
                            if (taps.length > 0 && typeof this.ontap === 'function') {
                                this.ontap({
                                    action: 'tap',
                                    positions: taps,
                                    raw: touch,
                                    seq,
                                });
                            }
                            if (doubletaps.length > 0 &&
                                typeof this.ondoubletap === 'function') {
                                this.ondoubletap({
                                    action: 'doubletap',
                                    positions: doubletaps,
                                    raw: touch,
                                    seq,
                                });
                            }
                        }
                        if (configmask & maskAirWheelInfo && sysinfo & sysAirWheelValid) {
                            const delta = (airwheel[0] - this.lastRotation) / 32.0;
                            this.rotation += delta * 360.0;
                            this.rotation %= 360;
                            if (delta !== 0 && delta > -0.5 && delta < 0.5) {
                                if (typeof this.onairwheel === 'function') {
                                    this.onairwheel({
                                        delta: delta * 360.0,
                                        rotation: this.rotation,
                                        raw: airwheel,
                                        seq,
                                    });
                                }
                            }
                            this.lastRotation = airwheel[0];
                        }
                        break;
                    case 0x15: // system status
                        statusInfo = {
                            msgId: data[4],
                            maxCmdSize: data[5],
                            error: data[6] | (data[7] << 8),
                        };
                        this.statusInfo = statusInfo;
                        if (this.debugprint || this.obniz.debugprint) {
                            console.log(`flickHat: system status: {msgId: ${statusInfo.msgId}, maxCmdSize: ${statusInfo.maxCmdSize}, error: ${statusInfo.error}}`);
                        }
                        break;
                    case 0x83: // farmware information
                        fwInfo = {
                            fwValid: data[4] === 0xaa,
                            hwRev: [data[5], data[6]],
                            paramStartAddr: data[7] * 128,
                            libLoaderVer: [data[8], data[9]],
                            libLoaderPlatform: data[10],
                            fwStartAddr: data[11] * 128,
                            fwVersion: this._dataArray2string(data.slice(12, 132)).split('\0')[0],
                            fwInfoReceived: true,
                        };
                        this.fwInfo = fwInfo;
                        if (typeof this.onfwinfo === 'function') {
                            this.onfwinfo(fwInfo);
                        }
                        this.readSize = 26;
                        break;
                    default:
                        console.error(`unknown message: 0x${msgID.toString(16)}, data:${data
                            .slice(0, size)
                            .map((v) => '0x' + v.toString(16))}`);
                }
            }
            this.io_ts.pull('3v');
            // await this.obniz.wait(1);
        }
    }
}
exports.default = FlickHat;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/HC-SR505/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.HC-SR505
 */
Object.defineProperty(exports, "__esModule", { value: true });
class HCSR505 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'HC-SR505',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_signal = obniz.getIO(this.params.signal);
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.io_signal.input((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.io_signal.inputWait();
    }
}
exports.default = HCSR505;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/ICM20948/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ICM20948
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class ICM20948 extends i2cParts_1.default {
    constructor() {
        super();
        this.g = 9.80665;
        this.i2cinfo = {
            address: 0x69,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        this._ADDR = 0x69;
        this._WHO_AM_I = 0x00;
        this._GYRO_CONFIG = 0x01;
        this._ACCEL_CONFIG = 0x14;
        this._ACCEL_CONFIG2 = 0x15;
        this._INT_PIN_CFG = 0x0f;
        this._ACCEL_XOUT_H = 0x2d;
        this._ACCEL_XOUT_L = 0x2e;
        this._ACCEL_YOUT_H = 0x2f;
        this._ACCEL_YOUT_L = 0x30;
        this._ACCEL_ZOUT_H = 0x31;
        this._ACCEL_ZOUT_L = 0x32;
        this._GYRO_XOUT_H = 0x33;
        this._GYRO_XOUT_L = 0x34;
        this._GYRO_YOUT_H = 0x35;
        this._GYRO_YOUT_L = 0x36;
        this._GYRO_ZOUT_H = 0x37;
        this._GYRO_ZOUT_L = 0x38;
        // #_ACCEL_FS_MASK = const(0b00011000)
        this._ACCEL_FS_SEL_2G = 0b00000000;
        this._ACCEL_FS_SEL_4G = 0b00000010;
        this._ACCEL_FS_SEL_8G = 0b00000100;
        this._ACCEL_FS_SEL_16G = 0b00000110;
        this._ACCEL_SO_2G = 16384; // 1 / 16384 ie. 0.061 mg / digit
        this._ACCEL_SO_4G = 8192; // 1 / 8192 ie. 0.122 mg / digit
        this._ACCEL_SO_8G = 4096; // 1 / 4096 ie. 0.244 mg / digit
        this._ACCEL_SO_16G = 2048; // 1 / 2048 ie. 0.488 mg / digit
        this._GYRO_FS_MASK = 0b00000110;
        this._GYRO_FS_SEL_250DPS = 0b00110001;
        this._GYRO_FS_SEL_500DPS = 0b00110011;
        this._GYRO_FS_SEL_1000DPS = 0b00110101;
        this._GYRO_FS_SEL_2000DPS = 0b00110111;
        this._GYRO_SO_250DPS = 131;
        this._GYRO_SO_500DPS = 62.5;
        this._GYRO_SO_1000DPS = 32.8;
        this._GYRO_SO_2000DPS = 16.4;
        // # Used for enablind and disabling the i2c bypass access
        this._I2C_BYPASS_MASK = 0b00000010;
        this._I2C_BYPASS_EN = 0b00000010;
        this._I2C_BYPASS_DIS = 0b00000000;
        this._SF_G = 1; //    g
        this._SF_MG = 1000; //    mg
        this._SF_M_S2 = 9.80665; // 1 g = 9.80665 m/s2 ie. standard gravity
        this._SF_DEG_S = 1; // deg / s
        this._SF_RAD_S = 57.295779578552; // 1 rad / s is 57.295779578552 deg / s;
        this._accel_sf = this._SF_M_S2;
        this._accel_so = this._ACCEL_SO_2G;
        this._gyro_sf = this._SF_DEG_S;
        this._gyro_so = this._GYRO_SO_250DPS;
    }
    static info() {
        return {
            name: 'ICM20948',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        this._accel_so = this._accelFs(this._ACCEL_FS_SEL_2G);
        this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_250DPS);
    }
    async initWait() {
        const data = await this.whoamiWait();
        if (data !== 0xea) {
            throw new Error('ICM20948 not found in I2C bus.');
        }
        this.write(0x06, [0x01]); // wake;
        this.write(0x0f, [0x02]); // passthrough;
        this.write(0x03, [0x00]);
        // this.write(12, 0x31, [0x00]);  // power down mode
        // const buf3 = await this._studuinoI2C.readFromMem(12, 0x60, 3);
        this._ak09916 = this.obniz.wired('AK09916', { i2c: this.i2c });
    }
    accelFs(value) {
        if (value === '2g') {
            this._accel_so = this._accelFs(this._ACCEL_FS_SEL_2G);
        }
        else if (value === '4g') {
            this._accel_so = this._accelFs(this._ACCEL_FS_SEL_4G);
        }
        else if (value === '8g') {
            this._accel_so = this._accelFs(this._ACCEL_FS_SEL_8G);
        }
        else if (value === '16g') {
            this._accel_so = this._accelFs(this._ACCEL_FS_SEL_16G);
        }
        else {
            throw new Error("must be '2g'/'4g'/'8g'/'16g'");
        }
    }
    accelSf(value) {
        if (value === 'g') {
            this._accel_sf = this._SF_G;
        }
        else if (value === 'mg') {
            this._accel_sf = this._SF_MG;
        }
        else if (value === 'ms2') {
            this._accel_sf = this._SF_M_S2;
        }
        else {
            throw new Error("must be 'g'/'mg'/'ms2'");
        }
    }
    async accelerationWait() {
        /*
        Acceleration measured by the sensor. By default will return a
        3-tuple of X, Y, Z axis accelerationWait values in mG as integer.
        */
        const so = this._accel_so;
        const sf = this._accel_sf;
        const xyz = await this.readThreeInt16Wait(this._ACCEL_XOUT_H);
        return xyz.map((e) => (e / so) * sf);
    }
    async gyroWait() {
        // """
        // X, Y, Z radians per second as floats.
        // """
        const so = this._gyro_so;
        const sf = this._gyro_sf;
        const xyz = await this.readThreeInt16Wait(this._GYRO_XOUT_H);
        return xyz.map((e) => (e / so) * sf);
    }
    async magneticWait() {
        return this._ak09916.magnetic();
    }
    async calibrateWait() {
        return await this._ak09916.calibrateWait();
    }
    async whoamiWait() {
        // Value of the whoamiWait register. """
        const result = await this.readWait(this._WHO_AM_I, 1);
        return result[0];
    }
    gyroFs(value) {
        if (value === '250dps') {
            this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_250DPS);
        }
        else if (value === '500dps') {
            this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_500DPS);
        }
        else if (value === '1000dps') {
            this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_1000DPS);
        }
        else if (value === '2000dps') {
            this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_2000DPS);
        }
        else {
            throw new Error("must be '250dps'/'500dps'/'1000dps'/'2000dps'");
        }
    }
    gyroSf(value) {
        if (value === 'dps') {
            this._gyro_sf = this._SF_DEG_S;
        }
        else if (value === 'rps') {
            this._gyro_sf = this._SF_RAD_S;
        }
        else {
            throw new Error("must be 'dps'/'rps'");
        }
    }
    async _gyroDlpfWait(dlpfcfg = -1) {
        this.write(0x7f, [0x20]);
        // # get ICM20948 gyroWait configuration.
        let char = (await this.readWait(this._GYRO_CONFIG, 1))[0];
        char &= this._GYRO_FS_MASK; // clear DLDF bits
        if (dlpfcfg === -1) {
            char |= 0x00000000;
        }
        else if (dlpfcfg === 0) {
            char |= 0x00000001;
        }
        else if (dlpfcfg === 1) {
            char |= 0x00001001;
        }
        else if (dlpfcfg === 2) {
            char |= 0x00010001;
        }
        else if (dlpfcfg === 3) {
            char |= 0x00011001;
        }
        else if (dlpfcfg === 4) {
            char |= 0x00100001;
        }
        else if (dlpfcfg === 5) {
            char |= 0x00101001;
        }
        else if (dlpfcfg === 6) {
            char |= 0x00110001;
        }
        else if (dlpfcfg === 7) {
            char |= 0x00111001;
        }
        else {
            char |= 0x00000000;
        }
        this.write(this._GYRO_CONFIG, [char]);
        this.write(0x7f, [0x00]);
    }
    _accelFs(value) {
        this.write(0x7f, [0x20]);
        this.write(this._ACCEL_CONFIG, [value]);
        this.write(0x7f, [0x00]);
        // # Return the sensitivity divider
        if (this._ACCEL_FS_SEL_2G === value) {
            return this._ACCEL_SO_2G;
        }
        else if (this._ACCEL_FS_SEL_4G === value) {
            return this._ACCEL_SO_4G;
        }
        else if (this._ACCEL_FS_SEL_8G === value) {
            return this._ACCEL_SO_8G;
        }
        else if (this._ACCEL_FS_SEL_16G === value) {
            return this._ACCEL_SO_16G;
        }
        return 0;
    }
    _gyroFs(value) {
        this.write(0x7f, [0x20]);
        this.write(this._GYRO_CONFIG, [value]);
        this.write(0x7f, [0x00]);
        // # Return the sensitivity divider
        if (this._GYRO_FS_SEL_250DPS === value) {
            return this._GYRO_SO_250DPS;
        }
        else if (this._GYRO_FS_SEL_500DPS === value) {
            return this._GYRO_SO_500DPS;
        }
        else if (this._GYRO_FS_SEL_1000DPS === value) {
            return this._GYRO_SO_1000DPS;
        }
        else if (this._GYRO_FS_SEL_2000DPS === value) {
            return this._GYRO_SO_2000DPS;
        }
        return 0;
    }
}
exports.default = ICM20948;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/IPM-165/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.IPM-165
 */
Object.defineProperty(exports, "__esModule", { value: true });
class IPM_165 {
    constructor() {
        this.keys = ['signal', 'vcc', 'gnd'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'IPM-165',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    async getWait() {
        return await this.signal.getWait();
    }
}
exports.default = IPM_165;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/JoyStick/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.JoyStick
 */
Object.defineProperty(exports, "__esModule", { value: true });
class JoyStick {
    constructor() {
        this.keys = ['sw', 'y', 'x', 'vcc', 'gnd', 'i2c'];
        this.requiredKeys = ['sw', 'y', 'x'];
        this.pins = this.keys || ['sw', 'y', 'x', 'vcc', 'gnd'];
        this.pinname = { sw: 'sw12' };
        this.shortName = 'joyS';
    }
    static info() {
        return {
            name: 'JoyStick',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.io_sig_sw = obniz.getIO(this.params.sw);
        this.ad_x = obniz.getAD(this.params.x);
        this.ad_y = obniz.getAD(this.params.y);
        this.io_sig_sw.pull('5v');
        this.ad_x.start((value) => {
            this.positionX = value / 5.0;
            if (this.onchangex) {
                this.onchangex(this.positionX * 2 - 1);
            }
        });
        this.ad_y.start((value) => {
            this.positionY = value / 5.0;
            if (this.onchangey) {
                this.onchangey(this.positionY * 2 - 1);
            }
        });
        this.io_sig_sw.input((value) => {
            this.isPressed = value === false;
            if (this.onchangesw) {
                this.onchangesw(value === false);
            }
        });
    }
    async isPressedWait() {
        const ret = await this.io_sig_sw.inputWait();
        return ret === false;
    }
    async getXWait() {
        const value = await this.ad_x.getWait();
        this.positionX = value / 5.0;
        return this.positionX * 2 - 1;
    }
    async getYWait() {
        const value = await this.ad_y.getWait();
        this.positionY = value / 5.0;
        return this.positionY * 2 - 1;
    }
}
exports.default = JoyStick;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/KXR94-2050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.KXR94-2050
 */
Object.defineProperty(exports, "__esModule", { value: true });
class KXR94_2050 {
    constructor() {
        this.keys = ['x', 'y', 'z', 'vcc', 'gnd', 'enable', 'self_test'];
        this.requiredKeys = ['x', 'y', 'z'];
    }
    static info() {
        return {
            name: 'KXR94-2050',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.ad_x = obniz.getAD(this.params.x);
        this.ad_y = obniz.getAD(this.params.y);
        this.ad_z = obniz.getAD(this.params.z);
        if (obniz.isValidIO(this.params.enable)) {
            obniz.getIO(this.params.enable).drive('5v');
            obniz.getIO(this.params.enable).output(true);
        }
        if (obniz.isValidIO(this.params.self_test)) {
            obniz.getIO(this.params.self_test).drive('5v');
            obniz.getIO(this.params.self_test).output(false);
        }
        this.changeVccVoltage(5);
        this.ad_x.start((value) => {
            this._x_val = value;
            if (this.onChangeX) {
                this.onChangeX(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        this.ad_y.start((value) => {
            this._y_val = value;
            if (this.onChangeY) {
                this.onChangeY(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        this.ad_z.start((value) => {
            this._z_val = value;
            if (this.onChangeZ) {
                this.onChangeZ(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        if (this.obniz.isValidIO(this.params.vcc)) {
            this.obniz.getAD(this.params.vcc).start((value) => {
                this.changeVccVoltage(value);
            });
        }
    }
    changeVccVoltage(pwrVoltage) {
        this.sensitivity = pwrVoltage / 5; // Set sensitivity (unit:V)
        this.offsetVoltage = pwrVoltage / 2; // Set offset voltage (Output voltage at 0g, unit:V)
    }
    voltage2gravity(volt) {
        return (volt - this.offsetVoltage) / this.sensitivity;
    }
    get() {
        return this._get();
    }
    _get() {
        return {
            x: this.voltage2gravity(this._x_val),
            y: this.voltage2gravity(this._y_val),
            z: this.voltage2gravity(this._z_val),
        };
    }
    async getWait() {
        this._x_val = await this.ad_x.getWait();
        this._y_val = await this.ad_y.getWait();
        this._z_val = await this.ad_z.getWait();
        return this._get();
    }
}
exports.default = KXR94_2050;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/KXSC7-2050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.KXSC7-2050
 */
Object.defineProperty(exports, "__esModule", { value: true });
class KXSC7_2050 {
    constructor() {
        this.keys = ['x', 'y', 'z', 'vcc', 'gnd'];
        this.requiredKeys = ['x', 'y', 'z'];
    }
    static info() {
        return {
            name: 'KXSC7-2050',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '3v');
        this.ad_x = obniz.getAD(this.params.x);
        this.ad_y = obniz.getAD(this.params.y);
        this.ad_z = obniz.getAD(this.params.z);
        this.initWait();
    }
    async initWait() {
        await this.obniz.wait(500);
        const ad = this.obniz.getAD(this.params.vcc);
        const pwrVoltage = await ad.getWait();
        const horizontalZ = await this.ad_z.getWait();
        const sensitivity = pwrVoltage / 5; // Set sensitivity (unit:V)
        const offsetVoltage = horizontalZ - sensitivity; // Set offset voltage (Output voltage at 0g, unit:V)
        this.ad_x.start((value) => {
            this.gravity = (value - offsetVoltage) / sensitivity;
            if (this.onchangex) {
                this.onchangex(this.gravity);
            }
        });
        this.ad_y.start((value) => {
            this.gravity = (value - offsetVoltage) / sensitivity;
            if (this.onchangey) {
                this.onchangey(this.gravity);
            }
        });
        this.ad_z.start((value) => {
            this.gravity = (value - offsetVoltage) / sensitivity;
            if (this.onchangez) {
                this.onchangez(this.gravity);
            }
        });
    }
}
exports.default = KXSC7_2050;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU6050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MPU6050
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cImu6_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cImu6.js"));
class MPU6050 extends i2cImu6_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x68,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
    }
    static info() {
        return {
            name: 'MPU6050',
        };
    }
    calcTemp(data) {
        if (typeof data === 'undefined' || data === null) {
            return null;
        }
        return data / 333.87 + 21;
    }
    wired(obniz) {
        super.wired(obniz);
        this.init();
    }
    init() {
        this.write(MPU6050.commands.pwr_mgmt_1, 0x00);
        this.obniz.wait(10);
        // set dlpf
        this.obniz.wait(1);
        this.write(MPU6050.commands.config, 0x01);
        // set samplerate div
        this.obniz.wait(1);
        this.write(MPU6050.commands.smplrt_div, 0x05);
        // interrupt enable
        this.obniz.wait(1);
        this.write(MPU6050.commands.int_enable, 0x00);
        this.obniz.wait(1);
        this.write(MPU6050.commands.user_ctrl, 0x00);
        this.obniz.wait(1);
        this.write(MPU6050.commands.fifo_en, 0x00);
        this.obniz.wait(1);
        this.write(MPU6050.commands.int_pin_cfg, 0x22);
        this.obniz.wait(1);
        this.write(MPU6050.commands.int_enable, 0x01);
        this.obniz.wait(1);
        this.setConfig(2, 250);
    }
    async sleepWait() {
        await this.writeFlagWait(MPU6050.commands.pwr_mgmt_1, 6);
    }
    async wakeWait() {
        await this.clearFlagWait(MPU6050.commands.pwr_mgmt_1, 6);
    }
    async resetWait() {
        await this.writeFlagWait(MPU6050.commands.pwr_mgmt_1, 7);
    }
    async configDlpfWait() {
        // do nothing.
    }
    async bypassMagnetometerWait(flag = true) {
        // Enable I2C bypass to access for MPU9250 magnetometer access.
        if (flag === true) {
            await this.writeFlagWait(MPU6050.commands.int_pin_cfg, 1);
        }
        else {
            await this.clearFlagWait(MPU6050.commands.int_pin_cfg, 1);
        }
        // this.i2c.write(this.address, [MPU6050.commands.int_pin_cfg]);
        // const data =  await this.i2c!.readWait(this.address, 1);
        // data[0] |= MPU6050.commands.intPinConfigMask.bypass_en;
        // this.i2c.write(this.address, [MPU6050.commands.int_pin_cfg, data[0]]);
    }
    async whoamiWait() {
        const result = await this.readWait(MPU6050.commands.whoami, 1);
        return result[0];
    }
    async getAccelAdcWait() {
        const raw = await this.readWait(MPU6050.commands.accel_x_h, 6);
        return MPU6050.charArrayToXyz(raw, 'b');
    }
    async getGyroAdcWait() {
        const raw = await this.readWait(MPU6050.commands.gyro_x_h, 6);
        return MPU6050.charArrayToXyz(raw, 'b');
    }
    async getTempAdcWait() {
        const raw = await this.readWait(MPU6050.commands.temp_h, 2);
        return MPU6050.charArrayToInt16(raw, 'b');
    }
    async getAllAdcWait() {
        const raw = await this.readWait(MPU6050.commands.accel_x_h, 14);
        return {
            accelerometer: MPU6050.charArrayToXyz(raw.slice(0, 6), 'b'),
            gyroscope: MPU6050.charArrayToXyz(raw.slice(8, 14), 'b'),
            temperature: MPU6050.charArrayToInt16(raw.slice(6, 8), 'b'),
        };
    }
    setAccelRange(accel_range) {
        if (accel_range in MPU6050.commands.accel_fs_sel) {
            this.write(MPU6050.commands.accel_config, MPU6050.commands.accel_fs_sel[accel_range]);
            this.accel_so = accel_range;
        }
        else {
            throw new Error(`Invalid accel range. Valid values are: ${Object.keys(MPU6050.commands.accel_fs_sel).join()}`);
        }
    }
    setGyroRange(gyro_range) {
        if (gyro_range in MPU6050.commands.gyro_fs_sel) {
            this.write(MPU6050.commands.gyro_config, MPU6050.commands.gyro_fs_sel[gyro_range]);
            this.gyro_so = gyro_range;
        }
        else {
            throw new Error(`Invalid gyro range. Valid values are: ${Object.keys(MPU6050.commands.gyro_fs_sel).join()}`);
        }
    }
    setConfig(accelerometer_range, gyroscope_range, ADC_cycle) {
        // accel range set (0x00:2g, 0x08:4g, 0x10:8g, 0x18:16g)
        switch (accelerometer_range) {
            case 2:
                this.setAccelRange('2g');
                break;
            case 4:
                this.setAccelRange('4g');
                break;
            case 8:
                this.setAccelRange('8g');
                break;
            case 16:
                this.setAccelRange('16g');
                break;
            default:
                throw new Error('accel_range variable 2,4,8,16 setting');
        }
        // gyro range & LPF set (0x00:250, 0x08:500, 0x10:1000, 0x18:2000[deg/s])
        switch (gyroscope_range) {
            case 250:
                this.setGyroRange('250dps');
                break;
            case 500:
                this.setGyroRange('500dps');
                break;
            case 1000:
                this.setGyroRange('1000dps');
                break;
            case 2000:
                this.setGyroRange('2000dps');
                break;
            default:
                throw new Error('accel_range variable 250,500,1000,2000 setting');
        }
    }
}
exports.default = MPU6050;
MPU6050.commands = {
    whoami: 0x75,
    whoami_result: 0x71,
    pwr_mgmt_1: 0x6b,
    pwr_mgmt_2: 0x6c,
    smplrt_div: 0x19,
    int_pin_cfg: 0x37,
    int_enable: 0x38,
    user_ctrl: 0x6a,
    config: 0x1a,
    fifo_en: 0x23,
    accel_x_h: 0x3b,
    accel_x_l: 0x3c,
    accel_y_h: 0x3d,
    accel_y_l: 0x3e,
    accel_z_h: 0x3f,
    accel_z_l: 0x40,
    temp_h: 0x41,
    temp_l: 0x42,
    gyro_x_h: 0x43,
    gyro_x_l: 0x44,
    gyro_y_h: 0x45,
    gyro_y_l: 0x46,
    gyro_z_h: 0x47,
    gyro_z_l: 0x48,
    gyro_config: 0x1b,
    accel_config: 0x1c,
    accel_fs_sel: {
        '2g': 0x00,
        '4g': 0x08,
        '8g': 0x10,
        '16g': 0x18,
    },
    gyro_fs_sel: {
        '250dps': 0x00,
        '500dps': 0x08,
        '1000dps': 0x10,
        '2000dps': 0x18,
    },
};


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU6500/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MPU6500
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MPU6050_1 = __importDefault(__webpack_require__("./dist/src/parts/MovementSensor/MPU6050/index.js"));
class MPU6500 extends MPU6050_1.default {
    static info() {
        return {
            name: 'MPU6500',
        };
    }
    constructor() {
        super();
        MPU6500.commands.whoami_result = 0x70;
        MPU6500.commands.accel_intel_ctrl = 0x69;
        MPU6500.commands.accel_config2 = 0x1d;
    }
    init() {
        super.init();
        this.obniz.wait(1);
        this.write(MPU6500.commands.accel_config2, 0x00);
    }
}
exports.default = MPU6500;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU6886/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MPU6886
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MPU6050_1 = __importDefault(__webpack_require__("./dist/src/parts/MovementSensor/MPU6050/index.js"));
class MPU6886 extends MPU6050_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x68,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
        MPU6050_1.default.commands.accel_intel_ctrl = 0x69;
        MPU6050_1.default.commands.accel_config2 = 0x1d;
        MPU6050_1.default.commands.whoami_result = 0x68;
    }
    static info() {
        return {
            name: 'MPU6886',
        };
    }
    init() {
        super.init();
        this.obniz.wait(1);
        this.write(MPU6050_1.default.commands.accel_config2, 0x00);
    }
    _reset() {
        // do nothing.
    }
}
exports.default = MPU6886;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU9250/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MPU9250
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MPU6500_1 = __importDefault(__webpack_require__("./dist/src/parts/MovementSensor/MPU6500/index.js"));
class MPU9250 extends MPU6500_1.default {
    constructor() {
        super();
    }
    static info() {
        return {
            name: 'MPU9250',
        };
    }
    wired(obniz) {
        super.wired(obniz);
        this.ak8963 = obniz.wired('AK8963', { i2c: this.i2c });
        this.write(MPU6500_1.default.commands.pwr_mgmt_1, [0x00]); // activate MPU9250
        this.write(MPU6500_1.default.commands.int_pin_cfg, [0x02]); // activate AK8963 (bypass)
        this.write(MPU6500_1.default.commands.config, [0x06]); // activate LPF (search datasheet_p.13)
        this.write(MPU6500_1.default.commands.accel_config2, [0x02]); // accel LPF set.
        // this.mpu6050 = obniz.wired("MPU6050", { i2c: this.i2c });
    }
    init() {
        super.init();
        // this.bypassMagnetometerWait(true);
    }
    setConfig(accel_range, gyro_range, ADC_cycle) {
        super.setConfig(accel_range, gyro_range);
        if (ADC_cycle) {
            this.ak8963.setConfig(ADC_cycle);
        }
    }
    async getAllAdcWait() {
        const data = await super.getAllAdcWait();
        data.compass = await this.getCompassAdcWait();
        return data;
    }
    async getAllWait() {
        const data = await super.getAllWait();
        data.compass = await this.getCompassWait();
        return data;
    }
    async getCompassWait() {
        return await this.ak8963.getWait();
    }
    async getCompassAdcWait() {
        return await this.ak8963.getAdcWait();
    }
    async getCompassArrayWait() {
        return await this.ak8963.getArrayWait();
    }
    async getCompassAdcArrayWait() {
        return await this.ak8963.getAdcArrayWait();
    }
    getCompassUnit() {
        return this.ak8963.getUnit();
    }
    getCompassRange() {
        return this.ak8963.getRange();
    }
    async getMagneticWait() {
        return await this.getCompassWait();
    }
    async getMagneticAdcWait() {
        return await this.getCompassAdcWait();
    }
    async getMagneticArrayWait() {
        return await this.getCompassArrayWait();
    }
    async getMagneticAdcArrayWait() {
        return await this.getCompassAdcArrayWait();
    }
    getMagneticUnit() {
        return this.getCompassUnit();
    }
    getMagneticRange() {
        return this.getCompassRange();
    }
    async _getAK8963Wait() {
        const ST1 = await this.readWait(0x02, 1); // confirm magnet value readable
        if (ST1[0] & 0x01) {
            return await this.ak8963.getWait();
        }
        return {};
    }
}
exports.default = MPU9250;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/PaPIRsVZ/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.PaPIRsVZ
 */
Object.defineProperty(exports, "__esModule", { value: true });
class PaPIRsVZ {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'PaPIRsVZ',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.pull('0v');
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.io_signal.input((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
}
exports.default = PaPIRsVZ;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/Potentiometer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Potentiometer
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Potentiometer {
    constructor() {
        this.vcc_voltage = 5.0;
        this.position = 0;
        this.keys = ['pin0', 'pin1', 'pin2'];
        this.requiredKeys = ['pin0', 'pin1', 'pin2'];
    }
    static info() {
        return {
            name: 'Potentiometer',
        };
    }
    wired(obniz) {
        this.obniz.setVccGnd(this.params.pin0, this.params.pin2, '5v');
        this.ad = obniz.getAD(this.params.pin1);
        obniz.getAD(this.params.pin0).start((value) => {
            this.vcc_voltage = value;
        });
        this.ad.start((value) => {
            this.position = value / this.vcc_voltage;
            if (this.onchange) {
                this.onchange(this.position);
            }
        });
    }
}
exports.default = Potentiometer;


/***/ }),

/***/ "./dist/src/parts/MovementSensor/SH200Q/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cImu6_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cImu6.js"));
class SH200Q extends i2cImu6_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x6c,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
    }
    static info() {
        return {
            name: 'SH200Q',
        };
    }
    wired(obniz) {
        super.wired(obniz);
    }
    _reset() {
        // do nothing.
    }
    async whoamiWait() {
        const result = await this.readWait(SH200Q.commands.whoami, 1);
        return result[0];
    }
    async initWait() {
        await this.resetAdcWait();
        await this.writeFlagWait(0xd8, 7);
        await this.obniz.wait(1);
        await this.clearFlagWait(0xd8, 7);
        this.write(0x78, 0x61);
        await this.obniz.wait(1);
        this.write(0x78, 0x00);
        // set acc odr 256hz
        this.write(SH200Q.commands.acc_config, 0x91);
        // set gyro odr 500hz
        this.write(SH200Q.commands.gyro_config, 0x13);
        // set gyro dlpf 50hz
        this.write(SH200Q.commands.gyro_dlpf, 0x03);
        // set no buffer mode
        this.write(SH200Q.commands.fifo_config, 0x00);
        this.setConfig(8, 2000);
        this.write(SH200Q.commands.reg_set1, 0xc0);
        // ADC Reset
        await this.writeFlagWait(SH200Q.commands.reg_set2, 4);
        await this.obniz.wait(1);
        await this.clearFlagWait(SH200Q.commands.reg_set2, 4);
        await this.obniz.wait(10);
    }
    setConfig(accelerometer_range, gyroscope_range) {
        switch (accelerometer_range) {
            case 4:
                this.setAccelRange('4g');
                break;
            case 8:
                this.setAccelRange('8g');
                break;
            case 16:
                this.setAccelRange('16g');
                break;
            default:
                throw new Error('accel_range variable 4,8,16 setting');
        }
        switch (gyroscope_range) {
            case 125:
                this.setGyroRange('125dps');
                break;
            case 250:
                this.setGyroRange('250dps');
                break;
            case 500:
                this.setGyroRange('500dps');
                break;
            case 1000:
                this.setGyroRange('1000dps');
                break;
            case 2000:
                this.setGyroRange('2000dps');
                break;
            default:
                throw new Error('gyroscope_range variable 125,250,500,1000,2000 setting');
        }
    }
    async resetAdcWait() {
        // set 0xC2 bit2 1-->0
        const tempdata = await this.readWait(SH200Q.commands.adc_reset, 1);
        tempdata[0] = tempdata[0] | 0x04; // tempdata[0] = 0x0E; //CC
        this.write(SH200Q.commands.adc_reset, tempdata);
        await this.obniz.wait(1);
        tempdata[0] = tempdata[0] & 0xfb; // tempdata[0] = 0x0A; //C8
        this.write(SH200Q.commands.adc_reset, tempdata);
    }
    setAccelRange(accel_range) {
        if (accel_range in SH200Q.commands.accel_fs_sel) {
            this.write(SH200Q.commands.acc_range, SH200Q.commands.accel_fs_sel[accel_range]);
            this.accel_so = accel_range;
        }
        else {
            throw new Error(`Invalid accel range. Valid values are: ${Object.keys(SH200Q.commands.accel_fs_sel).join()}`);
        }
    }
    setGyroRange(gyro_range) {
        if (gyro_range in SH200Q.commands.gyro_fs_sel) {
            this.write(SH200Q.commands.gyro_range, SH200Q.commands.gyro_fs_sel[gyro_range]);
            this.gyro_so = gyro_range;
        }
        else {
            throw new Error(`Invalid gyro range. Valid values are: ${Object.keys(SH200Q.commands.gyro_fs_sel).join()}`);
        }
    }
    calcTemp(data) {
        if (typeof data === 'undefined' || data === null) {
            return null;
        }
        return data / 333.87 + 21.0;
    }
    async getAccelAdcWait() {
        const raw = await this.readWait(SH200Q.commands.output_acc, 6);
        return SH200Q.charArrayToXyz(raw, 'l');
    }
    async getGyroAdcWait() {
        const raw = await this.readWait(SH200Q.commands.output_gyro, 6);
        return SH200Q.charArrayToXyz(raw, 'l');
    }
    async getTempAdcWait() {
        const raw = await this.readWait(SH200Q.commands.output_temp, 2);
        return SH200Q.charArrayToInt16(raw, 'l');
    }
    async getAllAdcWait() {
        const raw = await this.readWait(SH200Q.commands.output_acc, 14); // request all data
        return {
            accelerometer: SH200Q.charArrayToXyz(raw.slice(0, 6), 'l'),
            gyroscope: SH200Q.charArrayToXyz(raw.slice(6, 12), 'l'),
            temperature: SH200Q.charArrayToInt16(raw.slice(12, 14), 'l'),
        };
    }
}
exports.default = SH200Q;
SH200Q.commands = {
    whoami: 0x30,
    whoami_result: 0x18,
    acc_config: 0x0e,
    gyro_config: 0x0f,
    gyro_dlpf: 0x11,
    fifo_config: 0x12,
    acc_range: 0x16,
    gyro_range: 0x2b,
    output_acc: 0x00,
    output_gyro: 0x06,
    output_temp: 0x0c,
    reg_set1: 0xba,
    reg_set2: 0xca,
    adc_reset: 0xc2,
    soft_reset: 0x7f,
    reset: 0x75,
    accel_fs_sel: {
        '4g': 0b00,
        '8g': 0b01,
        '16g': 0b10,
    },
    gyro_fs_sel: {
        '125dps': 0b100,
        '250dps': 0b011,
        '500dps': 0b010,
        '1000dps': 0b001,
        '2000dps': 0b000,
    },
};


/***/ }),

/***/ "./dist/src/parts/Moving/DCMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.DCMotor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class DCMotor {
    constructor() {
        this.keys = ['forward', 'back'];
        this.requiredKeys = ['forward', 'back'];
        this.status = {
            direction: null,
            power: 30,
        };
    }
    static info() {
        return {
            name: 'DCMotor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.forward_io_num = this.params.forward;
        this.back_io_num = this.params.back;
        this.pwm = obniz.getFreePwm();
        this.setPwmGndPin(this.forward_io_num, this.back_io_num);
    }
    // Module functions
    /**
     * Start rotation to the forward direction.
     */
    forward() {
        this.move(true);
    }
    /**
     * Start rotation to the reverse direction.
     */
    reverse() {
        this.move(false);
    }
    /**
     * Stop rotation.
     */
    stop() {
        if (this.status.direction === null) {
            return;
        }
        this.status.direction = null;
        this.pwm.duty(0);
    }
    /**
     * Start rotation by specifying rotation direction.
     *
     * @param forward true is forward rotation, and false is reverse rotation.
     */
    move(forward) {
        if (forward === undefined) {
            if (this.status.direction === null) {
                return;
            }
        }
        else {
            if (this.status.direction === forward) {
                return;
            }
            this.status.direction = forward;
        }
        const pwm_io = this.status.direction
            ? this.forward_io_num
            : this.back_io_num;
        const gnd_io = this.status.direction
            ? this.back_io_num
            : this.forward_io_num;
        this.setPwmGndPin(pwm_io, gnd_io);
        this.pwm.duty(this.status.power);
    }
    /**
     * Set the motor power.
     *
     * @param power Specify between 0 and 100.
     */
    power(power) {
        this.status.power = power;
        if (this.status.direction !== null) {
            this.pwm.duty(this.status.power);
        }
    }
    setPwmGndPin(pwm_io, gnd_io) {
        var _a;
        this.pwm.start({ io: pwm_io });
        this.pwm.freq(100000);
        this.obniz.getIO(gnd_io).output(false);
        (_a = this.obniz.display) === null || _a === void 0 ? void 0 : _a.setPinNames(DCMotor.info().name, {
            [this.forward_io_num]: 'forward',
            [this.back_io_num]: 'back',
        });
    }
}
exports.default = DCMotor;


/***/ }),

/***/ "./dist/src/parts/Moving/PCA9685/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.PCA9685
 */
Object.defineProperty(exports, "__esModule", { value: true });
class PCA9685_PWM {
    constructor(chip, id) {
        this.value = 0;
        this.state = {};
        this.chip = chip;
        this.id = id;
    }
    freq(frequency) {
        this.chip.freq(frequency);
    }
    pulse(value) {
        this.chip.pulse(this.id, value);
    }
    duty(value) {
        this.chip.duty(this.id, value);
    }
}
/* eslint max-classes-per-file: 0 */
class PCA9685 {
    constructor() {
        this.pwms = [];
        this._freq = 0;
        /* https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf */
        this.keys = [
            'gnd',
            'vcc',
            'scl',
            'sda',
            'oe',
            'i2c',
            'enabled',
            'address',
            'drive',
        ];
        this.requiredKeys = [];
        this.address = 0x40;
        this._commands = {
            MODE1: 0x00,
            MODE2: 0x01,
            SUBADR1: 0x02,
            SUBADR2: 0x03,
            SUBADR3: 0x04,
            PRESCALE: 0xfe,
            LED0_ON_L: 0x06,
            ALL_LED_ON_L: 0xfa,
            bits: {
                ALLCALL: 0x01,
                SLEEP_ENABLE: 0x10,
                AUTO_INCREMENT_ENABLED: 0x20,
                RESTART: 0x80,
                OUTDRV: 0x04,
                INVRT: 0x10,
            },
        };
        this._regs = new Array(1);
        this.pwmNum = 16;
        this.pwms = [];
        this._preparePWM(this.pwmNum);
    }
    static info() {
        return {
            name: 'PCA9685',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.oe)) {
            this.io_oe = obniz.getIO(this.params.oe);
        }
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (typeof this.params.address === 'number') {
            this.address = this.params.address;
        }
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || '5v'; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        if (this.obniz.isValidIO(this.params.srclr)) {
            this.io_srclr = this.obniz.getIO(this.params.srclr);
            this.io_srclr.output(true);
        }
        if (typeof this.params.enabled !== 'boolean') {
            this.params.enabled = true;
        }
        if (this.io_oe && this.params.enabled) {
            this.io_oe.output(false);
        }
        if (this.params.drive === 'open-drain') {
            this.i2c.write(this.address, [
                this._commands.MODE2,
                this._commands.bits.OUTDRV,
            ]);
        }
        let mode1 = this._commands.bits.AUTO_INCREMENT_ENABLED;
        mode1 = mode1 & ~this._commands.bits.SLEEP_ENABLE;
        this.i2c.write(this.address, [this._commands.MODE1, mode1]);
        this.i2c.write(this.address, [
            this._commands.MODE1,
            mode1 | this._commands.bits.RESTART,
        ]);
        this._regs[this._commands.MODE1] = mode1;
        obniz.wait(10);
    }
    _preparePWM(num) {
        for (let i = 0; i < num; i++) {
            this.pwms.push(new PCA9685_PWM(this, i));
        }
    }
    isValidPWM(id) {
        return typeof id === 'number' && id >= 0 && id < this.pwmNum;
    }
    getPWM(id) {
        if (!this.isValidPWM(id)) {
            throw new Error('pwm ' + id + ' is not valid pwm');
        }
        return this.pwms[id];
    }
    freq(frequency) {
        if (typeof frequency !== 'number') {
            return;
        }
        if (frequency < 24 || 1526 < frequency) {
            throw new Error('freq must be within 24-1526 hz');
        }
        if (this._freq === frequency) {
            return;
        }
        let prescaleval = 25000000.0; // 25MHz
        prescaleval /= 4096.0; // 12bit
        prescaleval /= frequency * 0.9;
        prescaleval -= 1.0;
        const prescale = Math.floor(Math.floor(prescaleval + 0.5));
        const mode1 = this._regs[this._commands.MODE1];
        this.i2c.write(this.address, [
            this._commands.MODE1,
            (mode1 & 0x7f) | this._commands.bits.SLEEP_ENABLE,
        ]); // enter sleep
        this.i2c.write(this.address, [this._commands.PRESCALE, prescale]);
        this.i2c.write(this.address, [this._commands.MODE1, mode1]); // recover from sleep
        this.obniz.wait(5);
        // save
        this._freq = frequency;
        for (let i = 0; i < this.pwms.length; i++) {
            this.pwms[i].state.freq = this._freq;
        }
    }
    pulse(index, pulse_width) {
        if (typeof this._freq !== 'number' || this._freq <= 0) {
            throw new Error('please provide freq first.');
        }
        this.duty(index, (pulse_width / 1000.0 / (1.0 / this._freq)) * 100);
    }
    duty(index, duty) {
        duty *= 1.0;
        if (typeof this._freq !== 'number' || this._freq <= 0) {
            throw new Error('please provide freq first.');
        }
        if (typeof duty !== 'number') {
            throw new Error('please provide duty in number');
        }
        if (duty < 0) {
            duty = 0;
        }
        if (duty > 100) {
            duty = 100;
        }
        this.getPWM(index).state.duty = duty;
        this.writeSingleONOFF(index, 0, (duty / 100.0) * 4095);
    }
    writeSingleONOFF(index, on, off) {
        this.i2c.write(this.address, [
            this._commands.LED0_ON_L + 4 * index,
            on & 0xff,
            on >> 8,
            off & 0xff,
            off >> 8,
        ]);
    }
    setEnable(enable) {
        if (!this.io_oe && enable === false) {
            throw new Error('pin "oe" is not specified');
        }
        this.io_oe.output(!enable);
    }
}
exports.default = PCA9685;


/***/ }),

/***/ "./dist/src/parts/Moving/ServoMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ServoMotor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ServoMotor {
    constructor() {
        this.range = {
            min: 0.5,
            max: 2.4,
        };
        this.keys = ['gnd', 'vcc', 'signal', 'pwm'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'ServoMotor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
        }
        if (this.params.pwm) {
            this.pwm = this.params.pwm;
        }
        else {
            this.pwm = obniz.getFreePwm();
            this.pwm_io_num = this.params.signal;
            if (typeof this.pwm_io_num !== 'number') {
                throw new Error(`no io specified for pwm`);
            }
            this.pwm.start({ io: this.pwm_io_num });
        }
        this.pwm.freq(50);
    }
    // Module functions
    angle(ratio) {
        const max = this.range.max;
        const min = this.range.min;
        const val = ((max - min) * ratio) / 180.0 + min;
        this.pwm.pulse(val);
    }
    on() {
        if (this.io_vcc) {
            this.io_vcc.output(true);
        }
    }
    off() {
        if (this.io_vcc) {
            this.io_vcc.output(false);
        }
    }
}
exports.default = ServoMotor;


/***/ }),

/***/ "./dist/src/parts/Moving/Solenoid/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Solenoid
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Solenoid {
    constructor() {
        this.keys = ['gnd', 'signal'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Solenoid',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_gnd = obniz.getIO(this.params.gnd);
            this.io_gnd.output(false);
        }
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.output(false);
    }
    on() {
        this.io_signal.output(true);
    }
    off() {
        this.io_signal.output(false);
    }
    click(time_msec) {
        this.on();
        if (typeof time_msec !== 'number') {
            time_msec = 100;
        }
        this.obniz.wait(time_msec);
        this.off();
    }
    doubleClick(time_msec) {
        if (typeof time_msec !== 'number') {
            time_msec = 100;
        }
        this.click(time_msec);
        this.obniz.wait(time_msec);
        this.click(time_msec);
    }
}
exports.default = Solenoid;


/***/ }),

/***/ "./dist/src/parts/Moving/StepperMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.StepperMotor
 */
Object.defineProperty(exports, "__esModule", { value: true });
class StepperMotor {
    constructor() {
        this.currentStep = 0;
        this.frequency = 100;
        this.rotationStepCount = 100;
        this.milliMeterStepCount = 1;
        this.ios = [];
        this._stepInstructions = {
            '1': [
                [0, 1, 1, 1],
                [1, 0, 1, 1],
                [1, 1, 0, 1],
                [1, 1, 1, 0],
            ],
            '2': [
                [0, 0, 1, 1],
                [1, 0, 0, 1],
                [1, 1, 0, 0],
                [0, 1, 1, 0],
            ],
            '1-2': [
                [0, 1, 1, 1],
                [0, 0, 1, 1],
                [1, 0, 1, 1],
                [1, 0, 0, 1],
                [1, 1, 0, 1],
                [1, 1, 0, 0],
                [1, 1, 1, 0],
                [0, 1, 1, 0],
            ],
        };
        this._stepType = '2';
        this.keys = ['a', 'b', 'aa', 'bb', 'common'];
        this.requiredKeys = ['a', 'b', 'aa', 'bb'];
    }
    static info() {
        return {
            name: 'StepperMotor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.common)) {
            this.common = obniz.getIO(this.params.common);
            this.common.output(true);
            this.type = 'unipolar';
        }
        else {
            this.type = 'bipolar';
        }
        this.ios = [];
        this.ios.push(obniz.getIO(this.params.a));
        this.ios.push(obniz.getIO(this.params.b));
        this.ios.push(obniz.getIO(this.params.aa));
        this.ios.push(obniz.getIO(this.params.bb));
    }
    async stepWait(step_count) {
        if (typeof step_count !== 'number') {
            throw new Error('must provide number');
        }
        step_count = Math.round(step_count);
        if (step_count === 0) {
            return;
        }
        const step_count_abs = Math.abs(step_count);
        const instructions = this._getStepInstructions();
        const instruction_length = instructions.length;
        const array = [];
        // set instructions
        let currentPhase = this.currentStep % instruction_length;
        if (currentPhase < 0) {
            currentPhase = instruction_length - currentPhase * -1;
        }
        if (step_count > 0) {
            for (let i = 0; i < instructions.length; i++) {
                if (++currentPhase >= instruction_length) {
                    currentPhase = 0;
                }
                array.push(instructions[currentPhase]);
            }
        }
        else {
            for (let i = 0; i < instructions.length; i++) {
                if (--currentPhase < 0) {
                    currentPhase = instruction_length - 1;
                }
                array.push(instructions[currentPhase]);
            }
        }
        // prepare animation
        let msec = 1000 / this.frequency;
        msec = parseInt(msec);
        if (msec < 1) {
            msec = 1;
        }
        const state = (index) => {
            const instruction = array[index];
            for (let i = 0; i < this.ios.length; i++) {
                this.ios[i].output(instruction[i]);
            }
        };
        const states = [];
        for (let i = 0; i < instruction_length; i++) {
            states.push({
                duration: msec,
                state,
            });
        }
        // execute and wait
        await this.obniz.io.repeatWait(states, step_count_abs);
        this.currentStep += step_count;
    }
    async stepToWait(destination) {
        const mustmove = destination - this.currentStep;
        await this.stepWait(mustmove);
    }
    async holdWait() {
        const instructions = this._getStepInstructions();
        const instruction_length = instructions.length;
        // set instructions
        let currentPhase = this.currentStep % instruction_length;
        if (currentPhase < 0) {
            currentPhase = instruction_length - currentPhase * -1;
        }
        for (let i = 0; i < this.ios.length; i++) {
            this.ios[i].output(instructions[currentPhase][i] === 1);
        }
        await this.obniz.pingWait();
    }
    async freeWait() {
        for (let i = 0; i < this.ios.length; i++) {
            this.ios[i].output(true);
        }
        await this.obniz.pingWait();
    }
    stepType(stepType) {
        const newType = this._stepInstructions[stepType];
        if (!newType) {
            throw new Error('unknown step type ' + stepType);
        }
        this._stepType = stepType;
    }
    speed(step_per_sec) {
        this.frequency = step_per_sec;
    }
    currentRotation() {
        // => degree
        return (this.currentStep / this.rotationStepCount) * 360;
    }
    currentAngle() {
        // => degree
        let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;
        if (angle < 0) {
            angle = 360 - angle;
        }
        return angle;
    }
    async rotateWait(rotation) {
        rotation /= 360;
        const needed = rotation * this.rotationStepCount;
        await this.stepWait(needed);
    }
    async rotateToWait(angle) {
        let needed = angle - this.currentAngle();
        if (Math.abs(needed) > 180) {
            needed = needed > 0 ? needed - 360 : 360 + needed;
        }
        needed = (needed / 360) * this.rotationStepCount;
        await this.stepWait(needed);
    }
    currentDistance() {
        // => mm
        return this.currentStep / this.milliMeterStepCount;
    }
    async moveWait(distance) {
        const needed = distance * this.milliMeterStepCount;
        await this.stepWait(needed);
    }
    async moveToWait(destination) {
        const needed = (destination - this.currentDistance()) * this.milliMeterStepCount;
        await this.stepWait(needed);
    }
    _getStepInstructions() {
        return this._stepInstructions[this._stepType];
    }
}
exports.default = StepperMotor;


/***/ }),

/***/ "./dist/src/parts/Power/AXP192/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.AXP192
 */
Object.defineProperty(exports, "__esModule", { value: true });
class AXP192 {
    constructor() {
        this.requiredKeys = [];
        this.keys = ['sda', 'scl', 'i2c'];
    }
    static info() {
        return {
            name: 'AXP192',
        };
    }
    wired(obniz) {
        this.params.mode = 'master'; // for i2c
        this.params.clock = 400 * 1000; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    // Module functions
    set(address, data) {
        this.i2c.write(AXP192_ADDRESS, [address, data]);
    }
    async getWait(address) {
        this.i2c.write(AXP192_ADDRESS, [address]);
        return await this.i2c.readWait(AXP192_ADDRESS, 1);
    }
    /**
     * @deprecated
     * @param voltage
     */
    setLDO2Voltage(voltage) {
        return this.setLDO2VoltageWait(voltage);
    }
    async setLDO2VoltageWait(voltage) {
        if (voltage < 1.8) {
            voltage = 1.8;
        }
        if (voltage > 3.3) {
            voltage = 3.3;
        }
        let set = await this.getWait(REG_VOLT_SET_LDO2_3);
        let offset = (voltage - 1.8) * 10;
        if (offset > 15) {
            offset = 15;
        }
        set = (set & 0x0f) | (offset << 4);
        console.log('set voltage to ', set);
        this.set(REG_VOLT_SET_LDO2_3, set);
    }
    /**
     * @deprecated
     * @param voltage
     */
    setLDO3Voltage(voltage) {
        this.setLDO3VoltageWait(voltage);
    }
    async setLDO3VoltageWait(voltage) {
        if (voltage < 1.8) {
            voltage = 1.8;
        }
        if (voltage > 3.3) {
            voltage = 3.3;
        }
        let set = await this.getWait(REG_VOLT_SET_LDO2_3);
        let offset = (voltage - 1.8) * 10;
        if (offset > 15) {
            offset = 15;
        }
        set = (set & 0xf0) | offset;
        this.set(REG_VOLT_SET_LDO2_3, set);
    }
    set3VLDO2_3() {
        this.set(REG_VOLT_SET_LDO2_3, 0xcc);
    }
    enableLDO2_3() {
        this.set(REG_EN_DC1_LDO2_3, 0x4d);
    }
    /**
     * @deprecated
     * @param val
     */
    toggleLDO2(val) {
        return this.toggleLDO2Wait(val);
    }
    async toggleLDO2Wait(val) {
        const bit = val ? 1 : 0;
        let state = await this.getWait(REG_EN_DC1_LDO2_3);
        state = (state & LDO2_EN_MASK) | (bit << 2);
        this.set(REG_EN_DC1_LDO2_3, state);
    }
    /**
     * @deprecated
     * @param val
     */
    toggleLDO3(val) {
        return this.toggleLDO3Wait(val);
    }
    async toggleLDO3Wait(val) {
        const bit = val ? 1 : 0;
        let state = await this.getWait(REG_EN_DC1_LDO2_3);
        state = (state & LDO3_EN_MASK) | (bit << 3);
        this.set(REG_EN_DC1_LDO2_3, state);
    }
    initM5StickC() {
        this.i2c.write(AXP192_ADDRESS, [REG_EN_EXT_DC2, 0xff]);
        this.i2c.write(AXP192_ADDRESS, [REG_VOLT_SET_LDO2_3, 0xcc]);
        this.i2c.write(AXP192_ADDRESS, [REG_ADC_EN1, 0xff]);
        this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_CTRL1, 0xc0]);
        this.i2c.write(AXP192_ADDRESS, [REG_CCOUNTER, 0x80]);
        this.i2c.write(AXP192_ADDRESS, [REG_EN_DC1_LDO2_3, 0x4d]);
        this.i2c.write(AXP192_ADDRESS, [REG_PEK, 0x0c]);
        this.i2c.write(AXP192_ADDRESS, [REG_GPIO0, 0x02]);
        this.i2c.write(AXP192_ADDRESS, [REG_VBUS_IPSOUT, 0xe0]);
        this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_OVTEMP, 0xfc]);
        this.i2c.write(AXP192_ADDRESS, [REG_BCKUP_BAT, 0xa2]);
    }
    getVbat() {
        return this.getVbatWait();
    }
    async getVbatWait() {
        this.i2c.write(AXP192_ADDRESS, [REG_VBAT_LSB]);
        const vbat_lsb = await this.i2c.readWait(AXP192_ADDRESS, 1);
        this.i2c.write(AXP192_ADDRESS, [REG_VBAT_MSB]);
        const vbat_msb = await this.i2c.readWait(AXP192_ADDRESS, 1);
        return (vbat_lsb << 4) + vbat_msb;
    }
}
exports.default = AXP192;
const AXP192_ADDRESS = 0x34;
const REG_EN_EXT_DC2 = 0x10;
const REG_EN_DC1_LDO2_3 = 0x12;
const REG_VOLT_SET_LDO2_3 = 0x28;
const REG_VBUS_IPSOUT = 0x30;
const REG_CHARGE_CTRL1 = 0x33;
const REG_BCKUP_BAT = 0x35;
const REG_PEK = 0x36;
const REG_CHARGE_OVTEMP = 0x39;
const REG_VBAT_LSB = 0x78;
const REG_VBAT_MSB = 0x79;
const REG_ADC_EN1 = 0x82;
const REG_GPIO0 = 0x90;
const REG_CCOUNTER = 0xb8;
const LDO2_EN_MASK = 0xfb;
const LDO3_EN_MASK = 0xf7;


/***/ }),

/***/ "./dist/src/parts/PressureSensor/BMP280/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.BMP280
 */
Object.defineProperty(exports, "__esModule", { value: true });
class BMP280 {
    constructor() {
        this.requiredKeys = [];
        this.keys = [
            'vcore',
            'vio',
            'gnd',
            'csb',
            'sdi',
            'sck',
            'sdo',
            'i2c',
            'address',
        ];
        this.ioKeys = ['vcore', 'vio', 'gnd', 'csb', 'sdi', 'sdo', 'sck'];
        this.configration = {
            sampling: {
                temp: 1,
                pres: 1,
            },
            interval: 5,
            iir_strength: 0,
            mode: 3,
            Modes: {
                sleep: 0,
                forced: 1,
                normal: 3,
            },
        };
        this.commands = {};
        this.commands.addresses = {
            config: 0xf5,
            ctrl_meas: 0xf4,
        };
    }
    static info() {
        return {
            name: 'BMP280',
            datasheet: 'https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp280-ds001.pdf',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.csb)) {
            // selecting I2C mode before powerup
            this.io_csb = obniz.getIO(this.params.csb);
            this.io_csb.drive('3v');
            this.io_csb.output(true);
        }
        this.obniz.setVccGnd(this.params.vio, null, '3v');
        this.obniz.setVccGnd(this.params.vcore, null, '3v');
        this.obniz.setVccGnd(null, this.params.gnd, '5v');
        this.obniz.wait(10);
        this.address = 0x76;
        if (this.params.address === 0x76) {
            this.address = 0x76;
        }
        else if (this.params.address === 0x77) {
            this.address = 0x77;
        }
        else if (this.params.address !== undefined) {
            throw new Error('address must be 0x76 or 0x77');
        }
        if (obniz.isValidIO(this.params.sdo)) {
            this.io_sdo = obniz.getIO(this.params.sdo);
            this.io_sdo.drive('3v');
            this.io_sdo.output(this.address === 0x76 ? false : true);
        }
        this.params.sda = this.params.sda || this.params.sdi;
        this.params.scl = this.params.scl || this.params.sck;
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = 'master';
        this.params.pull = '3v';
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(10);
        this.config();
        this.obniz.wait(10);
    }
    /**
     * @deprecated
     * @param strength
     */
    setIIRStrength(strength) {
        return this.setIIRStrengthWait(strength);
    }
    async setIIRStrengthWait(strengh) {
        this.configration.iir_strength = strengh;
        await this.configWait();
    }
    /**
     * @deprecated
     */
    applyCalibration() {
        return this.applyCalibrationWait();
    }
    async applyCalibrationWait() {
        this.i2c.write(this.address, [0x88]);
        const data = await this.i2c.readWait(this.address, 24);
        this._calibrated = {
            dig_T1: (data[1] << 8) | data[0],
            dig_T2: this._readSigned16((data[3] << 8) | data[2]),
            dig_T3: this._readSigned16((data[5] << 8) | data[4]),
            dig_P1: (data[7] << 8) | data[6],
            dig_P2: this._readSigned16((data[9] << 8) | data[8]),
            dig_P3: this._readSigned16((data[11] << 8) | data[10]),
            dig_P4: this._readSigned16((data[13] << 8) | data[12]),
            dig_P5: this._readSigned16((data[15] << 8) | data[14]),
            dig_P6: this._readSigned16((data[17] << 8) | data[16]),
            dig_P7: this._readSigned16((data[19] << 8) | data[18]),
            dig_P8: this._readSigned16((data[21] << 8) | data[20]),
            dig_P9: this._readSigned16((data[23] << 8) | data[22]),
        };
        this._t_fine = 0;
    }
    async getAllWait() {
        const data = await this.getData();
        const press_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
        const temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);
        const temperature = this.calibration_T(temp_raw) / 100.0;
        const pressure = this.calibration_P(press_raw) / 100.0;
        return { temperature, pressure };
    }
    async getTempWait() {
        return (await this.getAllWait()).temperature;
    }
    async getPressureWait() {
        return (await this.getAllWait()).pressure;
    }
    async getAltitudeWait() {
        const pressure = await this.getPressureWait();
        return this.calcAltitude(pressure);
    }
    calcAltitude(pressure, seaPressure) {
        if (typeof seaPressure !== 'number') {
            seaPressure = 1013.25;
        }
        return ((1.0 - Math.pow(pressure / seaPressure, 1 / 5.2553)) * 145366.45 * 0.3048);
    }
    /**
     * @deprecated
     * @private
     */
    config() {
        return this.configWait();
    }
    async configWait() {
        this.write([
            this.commands.addresses.config,
            (this.configration.interval << 5) |
                (this.configration.iir_strength << 2) |
                0,
        ]);
        this.write([
            this.commands.addresses.ctrl_meas,
            (this.configration.sampling.temp << 5) |
                (this.configration.sampling.pres << 2) |
                this.configration.mode,
        ]);
    }
    _readSigned16(value) {
        if (value >= 0x8000) {
            value = value - 0x10000;
        }
        return value;
    }
    _readSigned8(value) {
        if (value >= 0x80) {
            value = value - 0x100;
        }
        return value;
    }
    write(data) {
        this.i2c.write(this.address, data);
    }
    getData() {
        return this.getDataWait();
    }
    async getDataWait() {
        this.i2c.write(this.address, [0xf7]);
        return await this.i2c.readWait(this.address, 6);
    }
    calibration_T(adc_T) {
        const var1 = (((adc_T >> 3) - (this._calibrated.dig_T1 << 1)) *
            this._calibrated.dig_T2) >>
            11;
        const var2 = (((((adc_T >> 4) - this._calibrated.dig_T1) *
            ((adc_T >> 4) - this._calibrated.dig_T1)) >>
            12) *
            this._calibrated.dig_T3) >>
            14;
        this._t_fine = var1 + var2;
        const T = (this._t_fine * 5 + 128) >> 8;
        return T;
    }
    calibration_P(adc_P) {
        let pvar1 = this._t_fine / 2 - 64000;
        let pvar2 = (pvar1 * pvar1 * this._calibrated.dig_P6) / 32768;
        pvar2 = pvar2 + pvar1 * this._calibrated.dig_P5 * 2;
        pvar2 = pvar2 / 4 + this._calibrated.dig_P4 * 65536;
        pvar1 =
            ((this._calibrated.dig_P3 * pvar1 * pvar1) / 524288 +
                this._calibrated.dig_P2 * pvar1) /
                524288;
        pvar1 = (1 + pvar1 / 32768) * this._calibrated.dig_P1;
        if (pvar1 !== 0) {
            let p = 1048576 - adc_P;
            p = ((p - pvar2 / 4096) * 6250) / pvar1;
            pvar1 = (this._calibrated.dig_P9 * p * p) / 2147483648;
            pvar2 = (p * this._calibrated.dig_P8) / 32768;
            p = p + (pvar1 + pvar2 + this._calibrated.dig_P7) / 16;
            return p;
        }
        return 0;
    }
}
exports.default = BMP280;


/***/ }),

/***/ "./dist/src/parts/PressureSensor/DPS310/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.DPS310
 */
Object.defineProperty(exports, "__esModule", { value: true });
class DPS310 {
    constructor() {
        this.configration = {
            DPS310__STD_SLAVE_ADDRESS: 0x77,
        };
        this.DPS310__OSR_SE = 3;
        this.DPS310__LSB = 0x01;
        this.DPS310__PRS_STD_MR = 2;
        this.DPS310__PRS_STD_OSR = 3;
        this.DPS310__TEMP_STD_MR = 2;
        this.DPS310__TEMP_STD_OSR = 3;
        this.DPS310__SUCCEEDED = 0;
        this.DPS310__FAIL_UNKNOWN = -1;
        this.DPS310__FAIL_INIT_FAILED = -2;
        this.DPS310__FAIL_TOOBUSY = -3;
        this.DPS310__FAIL_UNFINISHED = -4;
        this.prsMr = 0;
        this.prsOsr = 0;
        this.tempMr = 0;
        this.tempOsr = 0;
        this.m_lastTempScal = 0;
        this.mode = {
            IDLE: 0x00,
            CMD_PRS: 0x01,
            CMD_TEMP: 0x02,
            INVAL_OP_CMD_BOTH: 0x03,
            INVAL_OP_CONT_NONE: 0x04,
            CONT_PRS: 0x05,
            CONT_TMP: 0x06,
            CONT_BOTH: 0x07,
        };
        this.bitFileds = {
            DPS310__REG_INFO_PROD_ID: {
                address: 0x0d,
                mask: 0x0f,
                shift: 0,
            },
            DPS310__REG_INFO_REV_ID: {
                address: 0x0d,
                mask: 0xf0,
                shift: 4,
            },
            DPS310__REG_INFO_TEMP_SENSORREC: {
                address: 0x28,
                mask: 0x80,
                shift: 7,
            },
            DPS310__REG_INFO_TEMP_SENSOR: {
                address: 0x07,
                mask: 0x80,
                shift: 7,
            },
            DPS310__REG_INFO_OPMODE: {
                address: 0x08,
                mask: 0x07,
                shift: 0,
            },
            DPS310__REG_INFO_FIFO_FL: {
                address: 0x0c,
                mask: 0x80,
                shift: 7,
            },
            DPS310__REG_INFO_FIFO_EN: {
                address: 0x09,
                mask: 0x02,
                shift: 1,
            },
            DPS310__REG_INFO_TEMP_MR: {
                address: 0x07,
                mask: 0x70,
                shift: 4,
            },
            DPS310__REG_INFO_TEMP_OSR: {
                address: 0x07,
                mask: 0x07,
                shift: 0,
            },
            DPS310__REG_INFO_PRS_MR: {
                address: 0x06,
                mask: 0x70,
                shift: 4,
            },
            DPS310__REG_INFO_PRS_OSR: {
                address: 0x06,
                mask: 0x07,
                shift: 0,
            },
            DPS310__REG_INFO_PRS_SE: {
                address: 0x09,
                mask: 0x04,
                shift: 2,
            },
            DPS310__REG_INFO_PRS_RDY: {
                address: 0x08,
                mask: 0x10,
                shift: 4,
            },
            DPS310__REG_INFO_TEMP_SE: {
                address: 0x09,
                mask: 0x08,
                shift: 3,
            },
            DPS310__REG_INFO_TEMP_RDY: {
                address: 0x08,
                mask: 0x20,
                shift: 5,
            },
        };
        this.dataBlock = {
            DPS310__REG_ADR_COEF: {
                address: 0x10,
                length: 18,
            },
            DPS310__REG_ADR_PRS: {
                address: 0x00,
                length: 3,
            },
            DPS310__REG_ADR_TEMP: {
                address: 0x03,
                length: 3,
            },
        };
        this.scaling_facts = [
            524288,
            1572864,
            3670016,
            7864320,
            253952,
            516096,
            1040384,
            2088960,
        ];
        this.requiredKeys = ['sda', 'scl'];
        this.keys = ['gpio3', 'vcc', 'gnd', 'scl', 'sda'];
        this.ioKeys = ['gpio3', 'vcc', 'gnd', 'scl', 'sda'];
        this.coeffs = {};
        this.opMode = this.mode.IDLE;
    }
    static info() {
        return {
            name: 'DPS310',
            datasheet: '',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.address = 0x77;
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = 'master';
        this.params.pull = '3v';
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(10);
    }
    async initWait() {
        const prodId = await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PROD_ID);
        if (prodId !== 0) {
            throw new Error('invalid prodId');
        }
        await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_REV_ID);
        await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_SENSORREC);
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_SENSOR, 0);
        await this.readCoeffsWait();
        await this.standbyWait();
        await this.configTempWait(this.DPS310__TEMP_STD_MR, this.DPS310__TEMP_STD_OSR);
        await this.configPressureWait(this.DPS310__PRS_STD_MR, this.DPS310__PRS_STD_OSR);
        await this.standbyWait();
        await this.measureTempOnceWait();
        await this.standbyWait();
        await this.correctTempWait();
    }
    async measurePressureOnceWait(oversamplingRate) {
        if (oversamplingRate === undefined) {
            oversamplingRate = this.prsOsr;
        }
        await this.startMeasurePressureOnceWait(oversamplingRate);
        await this.obniz.wait(100);
        const ret = await this.getSingleResultWait();
        return ret;
    }
    async readByteWait(regAddress) {
        this.i2c.write(this.address, [regAddress]);
        await this.obniz.wait(1);
        const results = await this.i2c.readWait(this.address, 1);
        return results[0];
    }
    async readByteBitfieldWait(field) {
        const regAddress = field.address;
        const mask = field.mask;
        const shift = field.shift;
        let ret = await this.readByteWait(regAddress);
        if (ret < 0) {
            return ret;
        }
        if (mask !== undefined) {
            ret = ret & mask;
        }
        if (shift !== undefined) {
            ret = ret >> shift;
        }
        return ret;
    }
    async readBlockWait(datablock) {
        const address = datablock.address;
        const length = datablock.length;
        await this.obniz.wait(1);
        this.i2c.write(this.address, [address]);
        const results = await this.i2c.readWait(this.address, length);
        return results;
    }
    async writeByteWait(regAddress, data, check) {
        this.i2c.write(this.address, [regAddress, data]);
        if (check) {
            if ((await this.readByteWait(regAddress)) !== data) {
                throw new Error('DPS310 data write failed');
            }
        }
    }
    async writeByteBitfieldWait(field, data, check) {
        const old = await this.readByteWait(field.address);
        const sendData = (old & ~field.mask) | ((data << field.shift) & field.mask);
        await this.writeByteWait(field.address, sendData, check);
    }
    async setOpModeDetailWait(background, temperature, pressure) {
        const opMode = ((background & this.DPS310__LSB) << 2) |
            ((temperature & this.DPS310__LSB) << 1) |
            (pressure & this.DPS310__LSB);
        return await this.setOpModeWait(opMode);
    }
    async setOpModeWait(opMode) {
        opMode &=
            this.bitFileds.DPS310__REG_INFO_OPMODE.mask >>
                this.bitFileds.DPS310__REG_INFO_OPMODE.shift;
        await this.writeByteWait(this.bitFileds.DPS310__REG_INFO_OPMODE.address, opMode);
        this.opMode = opMode;
    }
    async standbyWait() {
        this.setOpModeWait(this.mode.IDLE);
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_FIFO_FL, 1);
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_FIFO_EN, 0);
    }
    async configTempWait(tempMr, tempOsr) {
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_MR, tempMr);
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_OSR, tempOsr);
        if (tempOsr > this.DPS310__OSR_SE) {
            await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_SE, 1);
        }
        else {
            await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_SE, 0);
        }
        this.tempMr = tempMr;
        this.tempOsr = tempOsr;
    }
    async configPressureWait(prsMr, prsOsr) {
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PRS_MR, prsMr);
        await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PRS_OSR, prsOsr);
        if (prsOsr > this.DPS310__OSR_SE) {
            await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PRS_SE, 1);
        }
        else {
            await this.writeByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PRS_SE, 0);
        }
        this.prsMr = prsMr;
        this.prsOsr = prsOsr;
    }
    async readCoeffsWait() {
        const buffer = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_COEF);
        this.coeffs.m_c0Half = (buffer[0] << 4) | ((buffer[1] >> 4) & 0x0f);
        if (this.coeffs.m_c0Half & (1 << 11)) {
            this.coeffs.m_c0Half -= 1 << 12;
        }
        this.coeffs.m_c0Half = this.coeffs.m_c0Half / 2;
        this.coeffs.m_c1 = ((buffer[1] & 0x0f) << 8) | buffer[2];
        if (this.coeffs.m_c1 & (1 << 11)) {
            this.coeffs.m_c1 -= 1 << 12;
        }
        this.coeffs.m_c00 =
            (buffer[3] << 12) | (buffer[4] << 4) | ((buffer[5] >> 4) & 0x0f);
        if (this.coeffs.m_c00 & (1 << 19)) {
            this.coeffs.m_c00 -= 1 << 20;
        }
        this.coeffs.m_c10 =
            ((buffer[5] & 0x0f) << 16) | (buffer[6] << 8) | buffer[7];
        if (this.coeffs.m_c10 & (1 << 19)) {
            this.coeffs.m_c10 -= 1 << 20;
        }
        this.coeffs.m_c01 = (buffer[8] << 8) | buffer[9];
        if (this.coeffs.m_c01 & (1 << 15)) {
            this.coeffs.m_c01 -= 1 << 16;
        }
        this.coeffs.m_c11 = (buffer[10] << 8) | buffer[11];
        if (this.coeffs.m_c11 & (1 << 15)) {
            this.coeffs.m_c11 -= 1 << 16;
        }
        this.coeffs.m_c20 = (buffer[12] << 8) | buffer[13];
        if (this.coeffs.m_c20 & (1 << 15)) {
            this.coeffs.m_c20 -= 1 << 16;
        }
        this.coeffs.m_c21 = (buffer[14] << 8) | buffer[15];
        if (this.coeffs.m_c21 & (1 << 15)) {
            this.coeffs.m_c21 -= 1 << 16;
        }
        this.coeffs.m_c30 = (buffer[16] << 8) | buffer[17];
        if (this.coeffs.m_c30 & (1 << 15)) {
            this.coeffs.m_c30 -= 1 << 16;
        }
    }
    async getSingleResultWait() {
        let rdy;
        switch (this.opMode) {
            case this.mode.CMD_TEMP:
                rdy = await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_TEMP_RDY);
                break;
            case this.mode.CMD_PRS:
                rdy = await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_PRS_RDY);
                break;
            default:
                return this.DPS310__FAIL_TOOBUSY;
        }
        let oldMode;
        switch (rdy) {
            case this.DPS310__FAIL_UNKNOWN:
                throw new Error('DPS310__FAIL_UNKNOWN');
            case 0:
                return this.obniz.wait(10).then(() => {
                    return this.getSingleResultWait();
                });
            case 1:
                oldMode = this.opMode;
                this.opMode = this.mode.IDLE;
                switch (oldMode) {
                    case this.mode.CMD_TEMP:
                        return await this.getTempWait();
                    case this.mode.CMD_PRS:
                        return await this.getPressureWait();
                    default:
                        throw new Error('DPS310__FAIL_UNKNOWN');
                }
        }
        throw new Error('DPS310__FAIL_UNKNOWN');
    }
    async startMeasureTempOnceWait(oversamplingRate) {
        await this.configTempWait(0, oversamplingRate);
        await this.setOpModeDetailWait(0, 1, 0);
    }
    async startMeasurePressureOnceWait(oversamplingRate) {
        await this.configPressureWait(0, oversamplingRate);
        await this.setOpModeDetailWait(0, 0, 1);
    }
    calcPressure(raw) {
        let prs = raw;
        prs /= this.scaling_facts[this.prsOsr];
        prs =
            this.coeffs.m_c00 +
                prs *
                    (this.coeffs.m_c10 +
                        prs * (this.coeffs.m_c20 + prs * this.coeffs.m_c30)) +
                this.m_lastTempScal *
                    (this.coeffs.m_c01 +
                        prs * (this.coeffs.m_c11 + prs * this.coeffs.m_c21));
        return prs;
    }
    calcTemp(raw) {
        let temp = raw;
        temp /= this.scaling_facts[this.tempOsr];
        this.m_lastTempScal = temp;
        temp = this.coeffs.m_c0Half + this.coeffs.m_c1 * temp;
        return temp;
    }
    async correctTempWait() {
        this.writeByteWait(0x0e, 0xe5);
        this.writeByteWait(0x0f, 0x96);
        this.writeByteWait(0x62, 0x02);
        this.writeByteWait(0x0e, 0x00);
        this.writeByteWait(0x0f, 0x00);
        await this.measureTempOnceWait();
    }
    async measureTempOnceWait(oversamplingRate) {
        if (oversamplingRate === undefined) {
            oversamplingRate = this.tempOsr;
        }
        await this.startMeasureTempOnceWait(oversamplingRate);
        await this.obniz.wait(100);
        return await this.getSingleResultWait();
    }
    async getTempWait() {
        const data = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_TEMP);
        let temp = (data[0] << 16) | (data[1] << 8) | data[2];
        if (temp & (1 << 23)) {
            temp -= 1 << 24;
        }
        return this.calcTemp(temp);
    }
    async getPressureWait() {
        const data = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_PRS);
        let prs = (data[0] << 16) | (data[1] << 8) | data[2];
        if (prs & (1 << 23)) {
            prs -= 1 << 24;
        }
        return this.calcPressure(prs);
    }
}
exports.default = DPS310;


/***/ }),

/***/ "./dist/src/parts/PressureSensor/FSR-40X/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.FSR40X
 */
Object.defineProperty(exports, "__esModule", { value: true });
class FSR40X {
    constructor() {
        this.pressure = 0;
        this.keys = ['pin0', 'pin1'];
        this.requiredKeys = ['pin0', 'pin1'];
    }
    static info() {
        return {
            name: 'FSR40X',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_pwr = obniz.getIO(this.params.pin0);
        this.ad = obniz.getAD(this.params.pin1);
        this.io_pwr.drive('5v');
        this.io_pwr.output(true);
        this.ad.start((value) => {
            const pressure = value * 100;
            this.pressure = pressure;
            if (this.onchange) {
                this.onchange(this.pressure);
            }
        });
    }
    async getWait() {
        const value = await this.ad.getWait();
        const pressure = value * 100;
        this.pressure = pressure;
        return this.pressure;
    }
}
exports.default = FSR40X;


/***/ }),

/***/ "./dist/src/parts/SoilSensor/SEN0114/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SEN0114
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SEN0114 {
    constructor() {
        this.keys = ['vcc', 'output', 'gnd'];
        this.requiredKeys = ['output'];
    }
    static info() {
        return {
            name: 'SEN0114',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.ad = obniz.getAD(this.params.output);
        this.ad.start((value) => {
            this.value = value;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
    async getHumidityWait() {
        return await this.ad.getWait();
    }
}
exports.default = SEN0114;


/***/ }),

/***/ "./dist/src/parts/Sound/Speaker/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.Speaker
 */
Object.defineProperty(exports, "__esModule", { value: true });
class Speaker {
    constructor(obniz) {
        this.keys = ['signal', 'gnd'];
        this.requiredKeys = ['signal'];
    }
    static info() {
        return {
            name: 'Speaker',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(null, this.params.gnd, '5v');
        this.pwm = obniz.getFreePwm();
        this.pwm.start({ io: this.params.signal });
    }
    play(frequency) {
        if (typeof frequency !== 'number') {
            throw new Error('freq must be a number');
        }
        frequency = Math.floor(frequency); // temporary
        if (frequency > 0) {
            this.pwm.freq(frequency);
            this.pwm.pulse((1 / frequency / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Speaker;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class AnalogTemperatureSensor {
    constructor() {
        this.temp = 0;
        this.keys = ['vcc', 'gnd', 'output'];
        this.requiredKeys = ['output'];
        this.drive = '5v';
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);
        this.ad = obniz.getAD(this.params.output);
        this.ad.start((voltage) => {
            this.temp = this.calc(voltage);
            this.onchange(this.temp);
        });
    }
    async getWait() {
        const voltage = await this.ad.getWait();
        this.temp = this.calc(voltage);
        return this.temp;
    }
    onchange(temp) {
        // do nothing.
    }
    calc(voltage) {
        return 0;
    }
}
exports.default = AnalogTemperatureSensor;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM35DZ/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM35DZ extends AnalogTemperatureSensor_1.default {
    constructor() {
        super(...arguments);
        this.temperature = 0;
        this.tempArray = new Array(100);
        this.sum = 0;
        this.init_count = 0;
        this.count = 0;
    }
    static info() {
        return {
            name: 'LM35DZ',
        };
    }
    calc(voltage) {
        this.temperature = voltage * 100; // Temp(Celsius) = [AD Voltage] * 100;
        if (this.init_count < 100) {
            // initialization
            this.tempArray[this.init_count] = this.temperature;
            this.sum += this.temperature;
            this.init_count++;
            return this.sum / this.init_count;
        }
        else {
            // moving average
            if (this.count === 100) {
                this.count = 0;
            }
            this.sum -= this.tempArray[this.count]; // remove oldest temperature data
            this.tempArray[this.count] = this.temperature; // overwrite oldest temperature data to newest
            this.sum += this.temperature; // add newest temperature data
            this.count++;
            return this.sum / 100;
        }
    }
}
exports.default = LM35DZ;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM60/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM60 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'LM60',
        };
    }
    calc(voltage) {
        return Math.round(((voltage - 0.424) / 0.00625) * 10) / 10; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg(Offset voltage)])/[Temp coefficient]
    }
}
exports.default = LM60;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM61/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM61 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'LM61',
        };
    }
    calc(voltage) {
        return Math.round((voltage - 0.6) / 0.01); // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg(Offset voltage)])/[Temp coefficient]
    }
}
exports.default = LM61;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LMT87/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LMT87 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'LMT87',
        };
    }
    calc(voltage) {
        return (voltage * 1000 - 2365) / -13.6 + 20; // 20-50dc;
    }
}
exports.default = LMT87;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/MCP9700/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class MCP9700 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'MCP9700',
        };
    }
    calc(voltage) {
        return (voltage - 0.5) / 0.01; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg])/[Temp coefficient]
    }
}
exports.default = MCP9700;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/MCP9701/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class MCP9701 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'MCP9701',
        };
    }
    calc(voltage) {
        return (voltage - 0.4) / 0.0195; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg])/[Temp coefficient]
    }
}
exports.default = MCP9701;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/S8100B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.S8100B
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class S8100B extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'S8100B',
        };
    }
    calc(voltage) {
        return 30 + (1.508 - voltage) / -0.08; // Temp(Celsius) =
    }
}
exports.default = S8100B;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/S8120C/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.S8120C
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class S8120C extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: 'S8120C',
        };
    }
    calc(voltage) {
        return (voltage - 1.474) / -0.0082 + 30; // Temp(Celsius) = (([AD Voltage] - [Output Voltage at 30deg])/[V/deg]) + 30
    }
}
exports.default = S8120C;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/ADT7410/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ADT7410
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ADT7410 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'addressMode'];
        this.requiredKeys = ['addressMode'];
    }
    static info() {
        return {
            name: 'ADT7410',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (this.params.addressMode === 8) {
            this.address = 0x48;
        }
        else if (this.params.addressMode === 9) {
            this.address = 0x49;
        }
        else {
            throw new Error(`please specify address. 8 or 9`);
        }
        this.params.clock = 400000;
        this.params.pull = '5v';
        this.params.mode = 'master';
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    async getTempWait() {
        const ret = await this.i2c.readWait(this.address, 2);
        let tempBin = ret[0] << 8;
        tempBin |= ret[1];
        tempBin = tempBin >> 3;
        if (tempBin & 0x1000) {
            tempBin = tempBin - 8192;
        }
        return tempBin / 16;
    }
}
exports.default = ADT7410;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/AM2320/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.AM2320
 */
Object.defineProperty(exports, "__esModule", { value: true });
class AM2320 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'i2c'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'AM2320',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.address = 0x5c;
        this.params.pull = '5v';
        this.params.mode = 'master';
        this.params.clock = this.params.clock || 100 * 1000;
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    async getAllWait() {
        const i2cOnerror = this.i2c.onerror;
        this.i2c.onerror = () => {
            // do nothing.
        };
        this.i2c.write(this.address, [0]); // wake
        this.obniz.wait(2);
        this.i2c.write(this.address, [0x03, 0x00, 0x04]);
        this.obniz.wait(2);
        this.i2c.write(this.address, [0x03, 0x00, 0x04]);
        const ret = await this.i2c.readWait(this.address, 6);
        this.i2c.onerror = i2cOnerror;
        if (ret[0] !== 3 || ret[1] !== 4) {
            throw new Error(`Could not receive data correctly`);
        }
        const humidity = (ret[2] * 256 + ret[3]) / 10.0;
        const temperature = (ret[4] * 256 + ret[5]) / 10.0;
        return { temperature, humidity };
    }
    async getTempWait() {
        return (await this.getAllWait()).temperature;
    }
    async getHumdWait() {
        return await this.getHumidWait();
    }
    async getHumidWait() {
        return (await this.getAllWait()).humidity;
    }
}
exports.default = AM2320;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/AMG8833/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.AMG8833
 */
Object.defineProperty(exports, "__esModule", { value: true });
class AMG8833 {
    constructor() {
        this.requiredKeys = [];
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'address'];
        this.ioKeys = ['vcc', 'gnd', 'sda', 'scl'];
        this.commands = {};
        this.commands.mode_normal = [0x00, 0x00];
        this.commands.reset_flag = [0x01, 0x30];
        this.commands.reset_initial = [0x01, 0x3f];
        this.commands.frameRate_10fps = [0x02, 0x00];
        this.commands.frameRate_1fps = [0x02, 0x01];
        this.commands.int_disable = [0x03, 0x00];
        this.commands.int_absVal = [0x03, 0x03];
        this.commands.int_diff = [0x03, 0x01];
        this.commands.stat = [0x04];
        this.commands.statClr_ovs = [0x05, 0x04];
        this.commands.statClr_int = [0x05, 0x02];
        this.commands.average_disable = [0x07, 0x00];
        this.commands.average_enable = [0x07, 0x10];
    }
    static info() {
        return {
            name: 'AMG8833',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.address = 0x69;
        if (this.params.address === 0x69) {
            this.address = 0x69;
        }
        else if (this.params.address === 0x68) {
            this.address = 0x68;
        }
        else if (this.params.address !== undefined) {
            throw new Error('address must be 0x68 or 0x69');
        }
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || null; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(50);
        this.i2c.write(this.address, this.commands.mode_normal);
        this.i2c.write(this.address, this.commands.reset_flag);
        this.i2c.write(this.address, this.commands.frameRate_10fps);
        this.i2c.write(this.address, this.commands.int_disable);
    }
    async getOnePixWait(pixel) {
        let pixelAddrL = 0x80;
        let pixelAddrH = 0x81;
        if (pixel >= 0 && pixel <= 63) {
            pixelAddrL = 0x80 + pixel * 2;
            pixelAddrH = 0x81 + pixel * 2;
        }
        else {
            throw new Error('pixel number must be range of 0 to 63');
        }
        this.i2c.write(this.address, [pixelAddrL]);
        const dataL = await this.i2c.readWait(this.address, 1);
        this.i2c.write(this.address, [pixelAddrH]);
        const dataH = await this.i2c.readWait(this.address, 1);
        let temp12bit = (dataH << 8) | dataL;
        if (dataH & 0x08) {
            // negative temperature
            temp12bit = temp12bit - 1;
            temp12bit = 0xfff - temp12bit; // bit inverting
            return temp12bit * -0.25;
        }
        else {
            // positive temperature
            return temp12bit * 0.25;
        }
    }
    async getAllPixWait() {
        const tempArray = new Array(64);
        this.i2c.write(this.address, [0x80]);
        const datas = await this.i2c.readWait(this.address, 64 * 2);
        for (let i = 0; i < 64; i++) {
            let temp12bit = (datas[i * 2 + 1] << 8) | datas[i * 2];
            let temp = 0;
            if (datas[i * 2 + 1] & 0x08) {
                // negative temperature
                temp12bit = temp12bit - 1;
                temp12bit = 0xfff - temp12bit; // bit inverting
                temp = temp12bit * -0.25;
            }
            else {
                // positive temperature
                temp = temp12bit * 0.25;
            }
            tempArray[i] = temp;
        }
        return tempArray;
    }
}
exports.default = AMG8833;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/BME280/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.BME280
 */
Object.defineProperty(exports, "__esModule", { value: true });
class BME280 {
    constructor() {
        this.requiredKeys = [];
        this.keys = [
            'vcore',
            'vio',
            'gnd',
            'csb',
            'sdi',
            'sck',
            'sdo',
            'i2c',
            'address',
        ];
        this.ioKeys = ['vcore', 'vio', 'gnd', 'csb', 'sdi', 'sdo', 'sck'];
        this.configration = {
            sampling: {
                temp: 1,
                hum: 1,
                pres: 1,
            },
            interval: 5,
            iir_strength: 0,
            mode: 3,
            Modes: {
                sleep: 0,
                forced: 1,
                normal: 3,
            },
        };
        this.commands = {};
        this.commands.addresses = {
            config: 0xf5,
            ctrl_meas: 0xf4,
            ctrl_hum: 0xf2,
        };
    }
    static info() {
        return {
            name: 'BME280',
            datasheet: 'https://ae-bst.resource.bosch.com/media/_tech/media/datasheets/BST-BME280_DS001-12.pdf',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.csb)) {
            // selecting I2C mode before powerup
            this.io_csb = obniz.getIO(this.params.csb);
            this.io_csb.drive('3v');
            this.io_csb.output(true);
        }
        this.obniz.setVccGnd(this.params.vio, null, '3v');
        this.obniz.setVccGnd(this.params.vcore, null, '3v');
        this.obniz.setVccGnd(null, this.params.gnd, '5v');
        this.obniz.wait(10);
        this.address = 0x76;
        if (this.params.address === 0x76) {
            this.address = 0x76;
        }
        else if (this.params.address === 0x77) {
            this.address = 0x77;
        }
        else if (this.params.address !== undefined) {
            throw new Error('address must be 0x76 or 0x77');
        }
        if (obniz.isValidIO(this.params.sdo)) {
            this.io_sdo = obniz.getIO(this.params.sdo);
            this.io_sdo.drive('3v');
            this.io_sdo.output(this.address === 0x76 ? false : true);
        }
        this.params.sda = this.params.sda || this.params.sdi;
        this.params.scl = this.params.scl || this.params.sck;
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = 'master';
        this.params.pull = '3v';
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(10);
        this.config();
        this.obniz.wait(10);
    }
    config() {
        this.write([
            this.commands.addresses.config,
            (this.configration.interval << 5) |
                (this.configration.iir_strength << 2) |
                0,
        ]);
        this.write([
            this.commands.addresses.ctrl_hum,
            this.configration.sampling.hum,
        ]);
        this.write([
            this.commands.addresses.ctrl_meas,
            (this.configration.sampling.temp << 5) |
                (this.configration.sampling.pres << 2) |
                this.configration.mode,
        ]);
    }
    /**
     * @deprecated
     * @param strengh
     */
    setIIRStrength(strengh) {
        return this.setIIRStrengthWait(strengh);
    }
    async setIIRStrengthWait(strengh) {
        this.configration.iir_strength = strengh;
        this.config();
    }
    /**
     * @deprecated
     */
    applyCalibration() {
        return this.applyCalibrationWait();
    }
    async applyCalibrationWait() {
        this.i2c.write(this.address, [0x88]);
        const data = await this.i2c.readWait(this.address, 24);
        this.i2c.write(this.address, [0xa1]);
        let data_next = await this.i2c.readWait(this.address, 1);
        data.push(...data_next);
        this.i2c.write(this.address, [0xe1]);
        data_next = await this.i2c.readWait(this.address, 7);
        data.push(...data_next);
        this._calibrated = {
            dig_T1: (data[1] << 8) | data[0],
            dig_T2: this._readSigned16((data[3] << 8) | data[2]),
            dig_T3: this._readSigned16((data[5] << 8) | data[4]),
            dig_P1: (data[7] << 8) | data[6],
            dig_P2: this._readSigned16((data[9] << 8) | data[8]),
            dig_P3: this._readSigned16((data[11] << 8) | data[10]),
            dig_P4: this._readSigned16((data[13] << 8) | data[12]),
            dig_P5: this._readSigned16((data[15] << 8) | data[14]),
            dig_P6: this._readSigned16((data[17] << 8) | data[16]),
            dig_P7: this._readSigned16((data[19] << 8) | data[18]),
            dig_P8: this._readSigned16((data[21] << 8) | data[20]),
            dig_P9: this._readSigned16((data[23] << 8) | data[22]),
            dig_H1: this._readSigned8(data[24]),
            dig_H2: this._readSigned16((data[26] << 8) | data[25]),
            dig_H3: this._readSigned8(data[27]),
            dig_H4: this._readSigned16((data[28] << 4) | (0x0f & data[29])),
            dig_H5: this._readSigned16((data[30] << 4) | ((data[29] >> 4) & 0x0f)),
            dig_H6: this._readSigned8(data[31]),
        };
        this._t_fine = 0;
    }
    _readSigned16(value) {
        if (value >= 0x8000) {
            value = value - 0x10000;
        }
        return value;
    }
    _readSigned8(value) {
        if (value >= 0x80) {
            value = value - 0x100;
        }
        return value;
    }
    write(data) {
        this.i2c.write(this.address, data);
    }
    /**
     * @deprecated
     */
    getData() {
        return this.getDataWait();
    }
    async getDataWait() {
        this.i2c.write(this.address, [0xf7]);
        return await this.i2c.readWait(this.address, 8);
    }
    async getAllWait() {
        const data = await this.getData();
        const press_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
        const temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);
        const hum_raw = (data[6] << 8) | data[7];
        const temperature = this.calibration_T(temp_raw) / 100.0;
        const pressure = this.calibration_P(press_raw) / 100.0;
        const humidity = this.calibration_H(hum_raw);
        return { temperature, humidity, pressure };
    }
    calibration_T(adc_T) {
        const var1 = (((adc_T >> 3) - (this._calibrated.dig_T1 << 1)) *
            this._calibrated.dig_T2) >>
            11;
        const var2 = (((((adc_T >> 4) - this._calibrated.dig_T1) *
            ((adc_T >> 4) - this._calibrated.dig_T1)) >>
            12) *
            this._calibrated.dig_T3) >>
            14;
        this._t_fine = var1 + var2;
        const T = (this._t_fine * 5 + 128) >> 8;
        return T;
    }
    calibration_P(adc_P) {
        let pvar1 = this._t_fine / 2 - 64000;
        let pvar2 = (pvar1 * pvar1 * this._calibrated.dig_P6) / 32768;
        pvar2 = pvar2 + pvar1 * this._calibrated.dig_P5 * 2;
        pvar2 = pvar2 / 4 + this._calibrated.dig_P4 * 65536;
        pvar1 =
            ((this._calibrated.dig_P3 * pvar1 * pvar1) / 524288 +
                this._calibrated.dig_P2 * pvar1) /
                524288;
        pvar1 = (1 + pvar1 / 32768) * this._calibrated.dig_P1;
        if (pvar1 !== 0) {
            let p = 1048576 - adc_P;
            p = ((p - pvar2 / 4096) * 6250) / pvar1;
            pvar1 = (this._calibrated.dig_P9 * p * p) / 2147483648;
            pvar2 = (p * this._calibrated.dig_P8) / 32768;
            p = p + (pvar1 + pvar2 + this._calibrated.dig_P7) / 16;
            return p;
        }
        return 0;
    }
    calibration_H(adc_H) {
        let h = this._t_fine - 76800;
        h =
            (adc_H -
                (this._calibrated.dig_H4 * 64 +
                    (this._calibrated.dig_H5 / 16384) * h)) *
                ((this._calibrated.dig_H2 / 65536) *
                    (1 +
                        (this._calibrated.dig_H6 / 67108864) *
                            h *
                            (1 + (this._calibrated.dig_H3 / 67108864) * h)));
        h = h * (1 - (this._calibrated.dig_H1 * h) / 524288);
        return h;
    }
    async getTempWait() {
        return (await this.getAllWait()).temperature;
    }
    async getHumdWait() {
        return await this.getHumidWait();
    }
    async getHumidWait() {
        return (await this.getAllWait()).humidity;
    }
    async getPressureWait() {
        return (await this.getAllWait()).pressure;
    }
    async getAltitudeWait() {
        const pressure = await this.getPressureWait();
        return this.calcAltitude(pressure);
    }
    calcAltitude(pressure, seaPressure) {
        if (typeof seaPressure !== 'number') {
            seaPressure = 1013.25;
        }
        return ((1.0 - Math.pow(pressure / seaPressure, 1 / 5.2553)) * 145366.45 * 0.3048);
    }
}
exports.default = BME280;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/D6T44L/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.D6T44L
 */
Object.defineProperty(exports, "__esModule", { value: true });
class D6T44L {
    constructor() {
        this.requiredKeys = [];
        this.keys = ['vcc', 'gnd', 'sda', 'scl', 'clock'];
        this.address = 0x0a;
        this.ioKeys = ['vcc', 'gnd', 'sda', 'scl'];
        this.commands = {};
        this.commands.read_data = [0x4c];
    }
    static info() {
        return {
            name: 'D6T44L',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.clock = this.params.clock || 100 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || null; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(50);
    }
    async getOnePixWait(pixcel) {
        const data = await this.getAllPixWait();
        return data[pixcel];
    }
    async getAllPixWait() {
        this.i2c.write(this.address, [0x4c]);
        // await obniz.wait(160);
        const raw = await this.i2c.readWait(this.address, 35);
        const data = [];
        for (let i = 0; i < 16; i++) {
            data[i] = parseFloat(((raw[i * 2 + 2] + (raw[i * 2 + 3] << 8)) * 0.1).toFixed(1));
        }
        return data;
    }
}
exports.default = D6T44L;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/DHT12/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.DHT12
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class DHT12 extends i2cParts_1.default {
    constructor() {
        super();
        this.i2cinfo = {
            address: 0x5c,
            clock: 100000,
            voltage: '3v',
            pull: '3v',
        };
    }
    static info() {
        return {
            name: 'DHT12',
        };
    }
    i2cInfo() {
        return this.i2cinfo;
    }
    async getAllDataWait() {
        const data = await this.readWait(0x00, 5);
        const humidity = data[0] + data[1] * 0.1;
        let temperature = data[2] + (data[3] & 0x7f) * 0.1;
        if (data[3] & 0x80) {
            temperature *= -1;
        }
        const checksum = data[0] + data[1] + data[2] + data[3];
        if (checksum !== data[4]) {
            throw new Error(`checksum does not match`);
        }
        return {
            humidity,
            temperature,
        };
    }
    async getTempWait() {
        return (await this.getAllDataWait()).temperature;
    }
    async getHumdWait() {
        return await this.getHumidWait();
    }
    async getHumidWait() {
        return (await this.getAllDataWait()).humidity;
    }
}
exports.default = DHT12;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/S-5851A/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.S5851A
 */
Object.defineProperty(exports, "__esModule", { value: true });
class S5851A {
    constructor() {
        this.requiredKeys = ['vcc', 'gnd', 'adr0', 'adr1', 'adr_select'];
        this.keys = ['sda', 'scl', 'adr0', 'adr1', 'adr_select', 'i2c'];
    }
    static info() {
        return {
            name: 'S5851A',
        };
    }
    wired(obniz) {
        // params: pwr, gnd, sda, scl, adr0, adr1, adr_select
        this.io_adr0 = obniz.getIO(this.params.adr0);
        this.io_adr1 = obniz.getIO(this.params.adr1);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        switch (this.params.adr_select) {
            case 8:
                this.io_adr0.output(false);
                this.io_adr1.output(false);
                this.address = 0x48;
                break;
            case 9:
                this.io_adr0.pull(null);
                this.io_adr1.output(false);
                this.address = 0x49;
                break;
            case 'A':
                this.io_adr0.output(true);
                this.io_adr1.output(false);
                this.address = 0x4a;
                break;
            case 'B':
                this.io_adr0.output(false);
                this.io_adr1.output(true);
                this.address = 0x4b;
                break;
            case 'C':
                this.io_adr0.pull(null);
                this.io_adr1.output(true);
                this.address = 0x4c;
                break;
            case 'D':
                this.io_adr0.output(true);
                this.io_adr1.output(true);
                this.address = 0x4d;
                break;
            case 'E':
                this.io_adr0.output(false);
                this.io_adr1.pull(null);
                this.address = 0x4e;
                break;
            case 'F':
                this.io_adr0.output(true);
                this.io_adr1.pull(null);
                this.address = 0x4f;
                break;
            default:
                this.io_adr0.output(false);
                this.io_adr1.output(false);
                this.address = 0x48;
                break;
        }
        console.log('i2c address=' + this.address);
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || '5v'; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        // obniz.i2c0.write(address, [0x20, 0x24]);
    }
    async getTempWait() {
        // console.log("gettempwait");
        // obniz.i2c0.write(address, [0x20, 0x24]);
        // obniz.i2c0.write(address, [0xE0, 0x00]);
        const ret = await this.i2c0.readWait(this.address, 2);
        // console.log('ret:' + ret);
        const tempBin = ret[0].toString(2) + ('00000000' + ret[1].toString(2)).slice(-8);
        const temperature = -45 + 175 * (parseInt(tempBin, 2) / (65536 - 1));
        return temperature;
    }
    async getHumdWait() {
        return await this.getHumidWait();
    }
    async getHumidWait() {
        this.i2c.write(this.address, [0x20, 0x24]);
        this.i2c.write(this.address, [0xe0, 0x00]);
        const ret = await this.i2c.readWait(this.address, 4);
        const humdBin = ret[2].toString(2) + ('00000000' + ret[3].toString(2)).slice(-8);
        const humidity = 100 * (parseInt(humdBin, 2) / (65536 - 1));
        return humidity;
    }
}
exports.default = S5851A;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/SHT20/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SHT20
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SHT20 {
    constructor() {
        this.requiredKeys = [];
        this.keys = ['vcc', 'sda', 'scl', 'gnd', 'i2c', 'pull'];
        this.ioKeys = ['vcc', 'sda', 'scl', 'gnd'];
        this.commands = {};
        this.commands.softReset = [0xfe];
        this.commands.tempNoHold = [0xf3];
        this.commands.humidityNoHold = [0xf5];
    }
    static info() {
        return {
            name: 'SHT20',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '3v');
        this.address = 0x40;
        this.params.clock = this.params.clock || 100 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || '3v'; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.i2c.write(this.address, this.commands.softReset);
        this.obniz.wait(50);
    }
    /**
     * @deprecated
     * @param command
     */
    getData(command) {
        return this.getDataWait(command);
    }
    async getDataWait(command) {
        this.i2c.write(this.address, command);
        await this.obniz.wait(100);
        const data = await this.i2c.readWait(this.address, 3);
        const rawValue = (data[0] << 8) | data[1];
        if (this.checkCRC(rawValue, data[2]) !== 0) {
            return -2;
        }
        return rawValue & 0xfffc;
    }
    async getTempWait() {
        const rawTemperature = await this.getDataWait(this.commands.tempNoHold);
        if (rawTemperature < 0) {
            console.log('error sht20', rawTemperature);
            return rawTemperature;
        }
        return rawTemperature * (175.72 / 65536.0) - 46.85;
    }
    async getHumidWait() {
        const rawHumidity = await this.getDataWait(this.commands.humidityNoHold);
        if (rawHumidity < 0) {
            console.log('error sht20', rawHumidity);
            return rawHumidity;
        }
        return rawHumidity * (125.0 / 65536.0) - 6.0;
    }
    checkCRC(message_from_sensor, check_value_from_sensor) {
        let remainder = message_from_sensor << 8;
        remainder |= check_value_from_sensor;
        let divsor = 0x988000;
        for (let i = 0; i < 16; i++) {
            if (remainder & (1 << (23 - i))) {
                remainder ^= divsor;
            }
            divsor >>= 1;
        }
        return remainder;
    }
}
exports.default = SHT20;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/SHT31/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.SHT31
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SHT31 {
    constructor() {
        this.requiredKeys = [];
        this.keys = [
            'vcc',
            'sda',
            'scl',
            'gnd',
            'adr',
            'addressmode',
            'i2c',
            'pull',
            'address',
        ];
        this.ioKeys = ['vcc', 'sda', 'scl', 'gnd', 'adr'];
        this.commands = {};
        this.commands.softReset = [0x30, 0xa2];
        this.commands.highRepeatStreach = [0x2c, 0x06];
        this.commands.middleRepeatStreach = [0x2c, 0x0d];
        this.commands.lowRepeatStreach = [0x2c, 0x10];
        this.commands.highRepeat = [0x24, 0x00];
        this.commands.mediumRepeat = [0x24, 0x0b];
        this.commands.lowRepeat = [0x24, 0x16];
        this.waitTime = {};
        this.waitTime.wakeup = 1;
        this.waitTime.softReset = 1;
        this.waitTime.lowRepeat = 4;
        this.waitTime.mediumRepeat = 6;
        this.waitTime.highRepeat = 15;
        // not tested
        this.commands.readStatus = [0xf3, 0x2d];
    }
    static info() {
        return {
            name: 'SHT31',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.address = this.params.address || 0x44;
        if (this.params.addressmode) {
            this.io_adr = obniz.getIO(this.params.adr);
            if (this.params.addressmode === 4) {
                this.io_adr.output(false);
                this.address = 0x44;
            }
            else if (this.params.addressmode === 5) {
                this.io_adr.pull('5v');
                this.address = 0x45;
            }
        }
        this.params.clock = this.params.clock || 100 * 1000; // for i2c
        this.params.mode = this.params.mode || 'master'; // for i2c
        this.params.pull = this.params.pull || '5v'; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.i2c.write(this.address, this.commands.softReset);
    }
    /**
     * @deprecated
     */
    getData() {
        return this.getDataWait();
    }
    async getDataWait() {
        this.i2c.write(this.address, this.commands.highRepeat);
        await this.obniz.wait(this.waitTime.highRepeat);
        return await this.i2c.readWait(this.address, 6);
    }
    async getTempWait() {
        return (await this.getAllWait()).temperature;
    }
    async getHumdWait() {
        return await this.getHumidWait();
    }
    async getHumidWait() {
        return (await this.getAllWait()).humidity;
    }
    async getAllWait() {
        const ret = await this.getDataWait();
        const tempBin = ret[0] * 256 + ret[1];
        const temperature = -45 + 175 * (tempBin / (65536 - 1));
        const humdBin = ret[3] * 256 + ret[4];
        const humidity = 100 * (humdBin / (65536 - 1));
        return { temperature, humidity };
    }
}
exports.default = SHT31;


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/spi/ADT7310/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.ADT7310
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ADT7310 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'frequency', 'din', 'dout', 'clk', 'spi'];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: 'ADT7310',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = this.params.mode || 'master';
        this.params.frequency = this.params.frequency || 500000;
        this.params.mosi = this.params.din;
        this.params.miso = this.params.dout;
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    async getTempWait() {
        await this.spi.writeWait([0x54]); // send before each commands for stable
        await this.obniz.wait(200);
        const ret = await this.spi.writeWait([0x00, 0x00]);
        let tempBin = ret[0] << 8;
        tempBin |= ret[1];
        tempBin = tempBin >> 3;
        if (tempBin & 0x1000) {
            tempBin = tempBin - 8192;
        }
        return tempBin / 16;
    }
}
exports.default = ADT7310;


/***/ }),

/***/ "./dist/src/parts/Wireless/MFRC522/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.MFRC522
 */
Object.defineProperty(exports, "__esModule", { value: true });
const OK = true;
const ERROR = false;
class MFRC522 {
    constructor() {
        // PCD commands. Described in chapter 10 of the datasheet.
        // PCD(Proximity Coupling Device): NXP MFRC522 Contactless Reader IC.
        this.PCD_Idle = 0x00; // no action, cancels current command execution.
        this.PCD_Mem = 0x01; // stores 25 bytes into the internal buffer.
        this.PCD_GenerateRandomID = 0x02; // generates a 10-byte random ID number.
        this.PCD_CalcCRC = 0x03; // activates the CRC coprocessor or performs a self-test.
        this.PCD_Transmit = 0x04; // transmits data from the FIFO buffer.
        this.PCD_NoCmdChange = 0x07; // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit.
        this.PCD_Receive = 0x08; // activates the receiver circuits.
        this.PCD_Transceive = 0x0c; // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission.
        // this.PCD_Reserved0Dh = 0x0D;
        this.PCD_MFAuthent = 0x0e; // performs the MIFARE standard authentication as a reader.
        this.PCD_SoftReset = 0x0f; // resets the MFRC522.
        // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).
        // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf
        this.RxGain_18dB = 0x00 << 4; // 000b - 18 dB, minimum.
        this.RxGain_23dB = 0x01 << 4; // 001b - 23 dB.
        this.RxGain_18dB_2 = 0x02 << 4; // 010b - 18 dB, it seems 010b is a duplicate for 000b.
        this.RxGain_23dB_2 = 0x03 << 4; // 011b - 23 dB, it seems 011b is a duplicate for 001b.
        this.RxGain_33dB = 0x04 << 4; // 100b - 33 dB, average, and typical default.
        this.RxGain_38dB = 0x05 << 4; // 101b - 38 dB.
        this.RxGain_43dB = 0x06 << 4; // 110b - 43 dB.
        this.RxGain_48dB = 0x07 << 4; // 111b - 48 dB, maximum.
        this.RxGain_min = 0x00 << 4; // 000b - 18 dB, minimum, convenience for RxGain_18dB.
        this.RxGain_avg = 0x04 << 4; // 100b - 33 dB, average, convenience for RxGain_33dB.
        this.RxGain_max = 0x07 << 4; // 111b - 48 dB, maximum, convenience for RxGain_48dB.
        // The PICC commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4).
        this.PICC_REQA = 0x26; // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
        this.PICC_WUPA = 0x52; // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.
        this.PICC_CT = 0x88; // Cascade Tag. Not really a command, but used during anti collision.
        this.PICC_SEL_CL1 = 0x93; // Anti collision/Select, Cascade Level 1.
        this.PICC_SEL_CL2 = 0x95; // Anti collision/Select, Cascade Level 2.
        this.PICC_SEL_CL3 = 0x97; // Anti collision/Select, Cascade Level 3.
        this.PICC_HLTA = 0x50; // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.
        this.PICC_RATS = 0xe0; // Request command for Answer To Reset.
        // The commands used for MIFARE Classic (from http://www.mouser.com/ds/2/302/MF1S503x-89574.pdf, Section 9)
        // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.
        // The read/write commands can also be used for MIFARE Ultralight.
        this.PICC_AUTH_KEYA = 0x60; // Perform authentication with Key A.
        this.PICC_AUTH_KEYB = 0x61; // Perform authentication with Key B.
        this.PICC_READ = 0x30; // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.
        this.PICC_WRITE = 0xa0; // Writes one 16 byte block to the authenticated sector of the PICC. Called "COMPATIBILITY WRITE" for MIFARE Ultralight.
        this.PICC_DECREMENT = 0xc0; // Decrements the contents of a block and stores the result in the internal data register.
        this.PICC_INCREMENT = 0xc1; // Increments the contents of a block and stores the result in the internal data register.
        this.PICC_RESTORE = 0xc2; // Reads the contents of a block into the internal data register.
        this.PICC_TRANSFER = 0xb0; // Writes the contents of the internal data register to a block.
        // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)
        // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.
        this.PICC_UL_WRITE = 0xa2; // Writes one 4 byte page to the PICC.
        this.PICC_SElECTTAG = 0x93;
        // Page 0: Command and status
        // this.Reserved00h = 0x00;
        this.CommandReg = 0x01;
        this.ComlEnReg = 0x02;
        this.DivlEnReg = 0x03;
        this.ComIrqReg = 0x04;
        this.DivIrqReg = 0x05;
        this.ErrorReg = 0x06;
        this.Status1Reg = 0x07;
        this.Status2Reg = 0x08;
        this.FIFODataReg = 0x09;
        this.FIFOLevelReg = 0x0a;
        this.WaterLevelReg = 0x0b;
        this.ControlReg = 0x0c;
        this.BitFramingReg = 0x0d;
        this.CollReg = 0x0e;
        // this.Reserved0Fh = 0x0F;
        // Page 1: Command
        // this.Reserved10h = 0x10;
        this.ModeReg = 0x11;
        this.TxModeReg = 0x12;
        this.RxModeReg = 0x13;
        this.TxControlReg = 0x14;
        this.TxASKReg = 0x15;
        this.TxSelReg = 0x16;
        this.RxSelReg = 0x17;
        this.RxThresholdReg = 0x18;
        this.DemodReg = 0x19;
        this.Reserved1Ah = 0x1a;
        this.Reserved1Bh = 0x1b;
        this.MfTxReg = 0x1c;
        this.MfRxReg = 0x1d;
        this.Reserved1Eh = 0x1e;
        this.SerialSpeedReg = 0x1f;
        // Page 2: Configuration
        // this.Reserved20h = 0x20;
        this.CRCResultRegMSB = 0x21;
        this.CRCResultRegLSB = 0x22;
        // this.Reserved23h = 0x23;
        this.ModWidthReg = 0x24;
        // this.Reserved25h = 0x25;
        this.RFCfgReg = 0x26;
        this.GsNReg = 0x27;
        this.CWGsPReg = 0x28;
        this.ModGsPReg = 0x29;
        this.TModeReg = 0x2a;
        this.TPrescalerReg = 0x2b;
        this.TReloadRegHi = 0x2c;
        this.TReloadRegLo = 0x2d;
        this.TCounterValRegHi = 0x2e;
        this.TCounterValRegLo = 0x2f;
        // Page 3: Test register
        // this.Reserved30h = 0x30;
        this.TestSel1Reg = 0x31;
        this.TestSel2Reg = 0x32;
        this.TestPinEnReg = 0x33;
        this.TestPinValueReg = 0x34;
        this.TestBusReg = 0x35;
        this.AutoTestReg = 0x36;
        this.VersionReg = 0x37;
        this.AnalogTestReg = 0x38;
        this.TestDAC1Reg = 0x39;
        this.TestDAC2Reg = 0x3a;
        this.TestADCReg = 0x3b;
        // this.Reserved3Ch = 0x3C;
        // this.Reserved3Dh = 0x3D;
        // this.Reserved3Eh = 0x3E;
        // this.Reserved3Fh = 0x3F;
        // required pin of obniz
        this.keys = [
            'cs',
            'clk',
            'mosi',
            'miso',
            'rst',
            'vcc',
            'gnd',
            'spi',
            'spi_frequency',
        ];
        this.requiredKeys = ['cs', 'mosi', 'miso', 'rst'];
    }
    static info() {
        return {
            name: 'MFRC522',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        // IO pin settings
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.rst = obniz.getIO(this.params.rst);
        // SPI settings
        this.cs = obniz.getIO(this.params.cs);
        this.cs.output(true);
        this.params.mode = 'master';
        this.params.drive = '3v';
        this.params.pull = '3v';
        this.params.frequency = this.params.spi_frequency || 5 * 1000 * 1000;
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    /**
     * @deprecated
     */
    init() {
        return this.initWait();
    }
    async initWait() {
        // Initializes the MFRC522 chip
        // Hardware and Software reset
        this.rst.output(false);
        await this.obniz.wait(50); // 8.8.2 says the oscillator start-up time is the start up time of the crystal + 37,74us: 50ms.
        this.rst.output(true);
        this.writeRegister(this.CommandReg, this.PCD_SoftReset);
        // Timer setup: When communicating with a PICC we need a timeout if something goes wrong.
        // f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
        this.writeRegister(this.TModeReg, 0x80); // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
        this.writeRegister(this.TPrescalerReg, 0xa9); // TPreScaler = TModeReg[3..0]: TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.
        this.writeRegister(this.TReloadRegHi, 0x03);
        this.writeRegister(this.TReloadRegLo, 0xe8); // Reload timer with 0x3E8 = 1000, ie. 25ms before timeout
        this.writeRegister(this.TxASKReg, 0x40); // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
        this.writeRegister(this.ModeReg, 0x3d); // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (6.2.4)
        await this.antennaOnWait(); // Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
    }
    writeRegister(addr, val) {
        let data;
        if (val instanceof Array) {
            // If val is Array
            data = [(addr << 1) & 0x7e].concat(val);
        }
        else {
            data = [(addr << 1) & 0x7e, val];
        }
        this.cs.output(false);
        this.spi.write(data);
        this.cs.output(true);
    }
    /**
     * @deprecated
     * @param addr
     */
    readRegister(addr) {
        return this.readRegisterWait(addr);
    }
    async readRegisterWait(addr) {
        const data = [((addr << 1) & 0x7e) | 0x80, 0];
        this.cs.output(false);
        const response = await this.spi.writeWait(data);
        this.cs.output(true);
        return response[1];
    }
    /**
     * @deprecated
     * @param addr
     * @param n
     */
    readRegister_nByte(addr, n) {
        return this.readRegister_nByteWait(addr, n);
    }
    async readRegister_nByteWait(addr, n) {
        const dataArray = [];
        if (addr instanceof Array) {
            // Multiple addresses(If addr is Array)
            for (let i = 0; i < addr.length; i++) {
                dataArray.push(((addr[i] << 1) & 0x7e) | 0x80);
            }
        }
        else {
            // Single address & read n times
            for (let i = 0; i < n; i++) {
                dataArray.push(((addr << 1) & 0x7e) | 0x80);
            }
        }
        dataArray.push(0); // End reading
        this.cs.output(false);
        const values = await this.spi.writeWait(dataArray);
        this.cs.output(true);
        values.shift();
        return values;
    }
    /**
     * @deprecated
     * @param reg
     * @param mask
     */
    setRegisterBitMask(reg, mask) {
        return this.setRegisterBitMaskWait(reg, mask);
    }
    async setRegisterBitMaskWait(reg, mask) {
        const response = await this.readRegisterWait(reg);
        this.writeRegister(reg, response | mask);
    }
    /**
     * @deprecated
     *
     * @param reg
     * @param mask
     */
    clearRegisterBitMask(reg, mask) {
        return this.clearRegisterBitMaskWait(reg, mask);
    }
    async clearRegisterBitMaskWait(reg, mask) {
        const response = await this.readRegisterWait(reg);
        this.writeRegister(reg, response & ~mask);
    }
    /**
     * @deprecated
     */
    antennaOn() {
        return this.antennaOnWait();
    }
    async antennaOnWait() {
        // Turns the antenna on by enabling pins TX1 and TX2
        const response = await this.readRegisterWait(this.TxControlReg);
        if ((response & 0x03) !== 0x03) {
            // If TX1 and TX2 down
            await this.setRegisterBitMaskWait(this.TxControlReg, response | 0x03);
        }
    }
    /**
     * @deprecated
     */
    antennaOff() {
        return this.antennaOffWait();
    }
    async antennaOffWait() {
        // Turns the antenna off by disabling pins TX1 and TX2
        await this.clearRegisterBitMaskWait(this.TxControlReg, 0x03);
    }
    /**
     * @deprecated
     * @param command
     * @param bitsToSend
     */
    toCard(command, bitsToSend) {
        return this.toCardWait(command, bitsToSend);
    }
    // RC522 and ISO14443 card communication
    async toCardWait(command, bitsToSend) {
        let data = [];
        let bitSize = 0;
        let status = ERROR;
        let irqEn = 0x00;
        let waitIRq = 0x00;
        if (command === this.PCD_MFAuthent) {
            irqEn = 0x12;
            waitIRq = 0x10;
        }
        if (command === this.PCD_Transceive) {
            irqEn = 0x77;
            waitIRq = 0x30;
        }
        this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command
        this.writeRegister(this.ComlEnReg, irqEn | 0x80); // Interrupt request is enabled
        this.writeRegister(this.ComIrqReg, 0x7f); // Clear all seven interrupt request bits
        this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization
        this.writeRegister(this.FIFODataReg, bitsToSend); // Write sendData to the FIFO
        this.writeRegister(this.CommandReg, command); // Execute the command
        if (command === this.PCD_Transceive) {
            await this.setRegisterBitMaskWait(this.BitFramingReg, 0x80); // StartSend=1, transmission of data starts
        }
        let TryingTimes = 10;
        let n = 0;
        do {
            // Wait for the received data complete
            n = await this.readRegisterWait(this.ComIrqReg);
            TryingTimes--;
        } while (TryingTimes !== 0 && !(n & 0x01) && !(n & waitIRq)); // !(Timer interrupt - nothing received before timeout) & !(One of the interrupts that signal success has been set)
        // await this.clearRegisterBitMaskWait(this.BitFramingReg, 0x80);	//Reset with resetAndInit()
        const response = await this.readRegister_nByteWait([
            this.ErrorReg,
            this.FIFOLevelReg,
            this.ControlReg,
        ]);
        if (TryingTimes !== 0) {
            if ((response[0] & 0x1b) === 0x00) {
                // BufferOvfl CollErr ParityErr ProtocolErr
                status = n & irqEn & 0x01 ? ERROR : OK;
                if (command === this.PCD_Transceive) {
                    n = response[1]; // Number of bytes in the FIFO
                    const lastBits = response[2] & 0x07; // RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
                    if (lastBits) {
                        bitSize = (n - 1) * 8 + lastBits;
                    }
                    else {
                        bitSize = n * 8;
                    }
                    if (n === 0) {
                        n = 1;
                    }
                    if (n > 16) {
                        n = 16;
                    } // Restrict until 16bytes
                    data = await this.readRegister_nByteWait(this.FIFODataReg, n); // Get received data from FIFO buffer
                }
            }
            else {
                status = ERROR;
            }
        }
        return { status, data, bitSize };
    }
    async findCardWait() {
        await this.initWait();
        await this.searchTagWait();
        const uid = await this.getUidWait();
        const PICC_Type = await this.identifyCardTypeWait(uid);
        return { uid, PICC_Type };
    }
    async searchTagWait() {
        this.writeRegister(this.BitFramingReg, 0x07);
        const tagType = [this.PICC_REQA];
        const response = await this.toCardWait(this.PCD_Transceive, tagType);
        if (response.bitSize !== 0x10) {
            throw new Error('card_search_ERROR');
        }
    }
    async getUidWait() {
        this.writeRegister(this.BitFramingReg, 0x00);
        let uid = [this.PICC_SEL_CL1, 0x20];
        const response = await this.toCardWait(this.PCD_Transceive, uid);
        if (!response.status) {
            throw new Error('uid_scan_ERROR');
        }
        const uidCheck = response.data[0] ^ response.data[1] ^ response.data[2] ^ response.data[3];
        if (uidCheck !== response.data[4]) {
            throw new Error('uid_check_ERROR');
        }
        uid = response.data;
        // (uid).pop();
        return uid;
    }
    async calculateCRCWait(data) {
        this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command
        this.writeRegister(this.DivIrqReg, 0x04); // Clear the CRCIRq interrupt request bit
        this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization
        this.writeRegister(this.FIFODataReg, data); // Write data to the FIFO
        this.writeRegister(this.CommandReg, this.PCD_CalcCRC); // Start the calculation
        let i = 0xff;
        let n;
        // Wait for the CRC calculation to complete
        do {
            n = await this.readRegisterWait(this.DivIrqReg);
            i--;
        } while (i !== 0 && !(n & 0x04)); // CRCIrq = 1 (Calculation done)
        // CRC calculation result
        return await this.readRegister_nByteWait([
            this.CRCResultRegLSB,
            this.CRCResultRegMSB,
        ]);
    }
    async identifySoftwareWait() {
        let version = await this.readRegisterWait(this.VersionReg);
        switch (version) {
            case 0x88:
                version = '(clone)';
                break;
            case 0x90:
                version = 'v0.0';
                break;
            case 0x91:
                version = 'v1.0';
                break;
            case 0x92:
                version = 'v2.0';
                break;
            case 0x12:
                version = 'counterfeit chip';
                break;
            default:
                version = '(unknown)';
        }
        // When 0x00 or 0xFF is returned, communication probably failed
        if (version === 0x00 || version === 0xff) {
            throw new Error('software_version_ERROR');
        }
        return version;
    }
    async identifyCardTypeWait(uid) {
        // Identify type of the scanned card
        let buffer = [this.PICC_SElECTTAG, 0x70].concat(uid);
        buffer = buffer.concat(await this.calculateCRCWait(buffer));
        const response = await this.toCardWait(this.PCD_Transceive, buffer);
        let PICC_Type;
        if (response.status && response.bitSize === 0x18) {
            PICC_Type = response.data[0];
        }
        switch (PICC_Type) {
            case 0x04:
                PICC_Type = 'SAK indicates UID is not complete.';
                break; // UID not complete
            case 0x09:
                PICC_Type = 'MIFARE Mini, 320 bytes';
                break;
            case 0x08:
                PICC_Type = 'MIFARE 1KB';
                break;
            case 0x18:
                PICC_Type = 'MIFARE 4KB';
                break;
            case 0x00:
                PICC_Type = 'MIFARE Ultralight or Ultralight C';
                break;
            case 0x11:
                PICC_Type = 'MIFARE Plus';
                break;
            case 0x01:
                PICC_Type = 'MIFARE TNP3XXX';
                break;
            case 0x20:
                PICC_Type = 'PICC compliant with ISO/IEC 14443-4';
                break;
            case 0x40:
                PICC_Type = 'PICC compliant with ISO/IEC 18092 (NFC)';
                break;
            default:
                throw new Error('PICC_type_ERROR');
        }
        return PICC_Type;
    }
    async readSectorDataWait(Sector, uid) {
        await this.authenticateSectorWait(Sector, uid);
        return await this.getSectorDataWait(Sector);
    }
    async readBlockDataWait(Block, uid) {
        await this.authenticateBlockWait(Block, uid);
        return await this.getBlockDataWait(Block);
    }
    async authenticateSectorWait(Sector, uid) {
        /* Password authentication mode (A or B)
         * PICC_AUTH_KEYA = Verify the A key are the first 6 bit of 4th Block of each sector
         * PICC_AUTH_KEYB = Verify the B key are the last 6 bit of 4th Block of each sector
         */
        const KEY_A = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
        // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        const Block = Sector * 4;
        let buffer = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF
        uid = uid.slice(0, 4); // Append the first 4 bit of the UID
        buffer = buffer.concat(uid); // 12byte
        // Start authentication itself
        await this.toCardWait(this.PCD_MFAuthent, buffer);
        if (!((await this.readRegisterWait(this.Status2Reg)) & 0x08)) {
            throw new Error('password_authentication_ERROR');
        }
    }
    async authenticateBlockWait(Block, uid) {
        /* Password authentication mode (A or B)
         * PICC_AUTH_KEYA = Verify the A key (the first 6 bit of 3th Block fo each Sector)
         * PICC_AUTH_KEYB = Verify the B key (the last 6 bit of 3th Block fo each Sector)
         */
        const KEY_A = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
        // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        let buffer = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF
        uid = uid.slice(0, 4); // Append the first 4 bit of the UID
        buffer = buffer.concat(uid); // 12byte
        // Start authentication itself
        await this.toCardWait(this.PCD_MFAuthent, buffer);
        if (!((await this.readRegisterWait(this.Status2Reg)) & 0x08)) {
            throw new Error('password_authentication_ERROR');
        }
    }
    async readAgainWait() {
        // If you finish reading and want to read again, this can use instead of initWait()
        await this.clearRegisterBitMaskWait(this.Status2Reg, 0x08);
    }
    async getSectorDataWait(address) {
        const response = [];
        const blockData = [];
        for (let i = 0; i < 4; i++) {
            let request = [this.PICC_READ, address * 4 + i];
            request = request.concat(await this.calculateCRCWait(request));
            response[i] = await this.toCardWait(this.PCD_Transceive, request);
            if (!response[i].status) {
                throw new Error('data_read_ERROR');
            }
            blockData[i] = response[i].data;
        }
        return blockData;
    }
    async getBlockDataWait(address) {
        let request = [this.PICC_READ, address];
        request = request.concat(await this.calculateCRCWait(request));
        const response = await this.toCardWait(this.PCD_Transceive, request);
        if (!response.status) {
            throw new Error('data_read_ERROR');
        }
        return response.data;
    }
    async appendCRCtoBufferAndSendToCardWait(buffer) {
        buffer = buffer.concat(await this.calculateCRCWait(buffer));
        const response = await this.toCardWait(this.PCD_Transceive, buffer);
        if (!response.status ||
            response.bitSize !== 4 ||
            (response.data[0] & 0x0f) !== 0x0a) {
            response.status = ERROR;
        }
        return response;
    }
    async writeBlockDataWait(Block, sixteenBytes) {
        if (Block === 0 || Block % 4 === 3) {
            throw new Error('deny_Write');
        }
        const buffer = [this.PICC_WRITE, Block];
        let response = await this.appendCRCtoBufferAndSendToCardWait(buffer);
        if (response.status) {
            response = await this.appendCRCtoBufferAndSendToCardWait(sixteenBytes);
        }
        else {
            throw new Error('data_write_ERROR');
        }
    }
}
exports.default = MFRC522;


/***/ }),

/***/ "./dist/src/parts/Wireless/RN42/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.RN42
 */
Object.defineProperty(exports, "__esModule", { value: true });
class RN42 {
    constructor() {
        this.keys = ['tx', 'rx', 'gnd'];
        this.requiredKeys = ['tx', 'rx'];
    }
    static info() {
        return {
            name: 'RN42',
        };
    }
    wired(obniz) {
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 115200,
            drive: '3v',
        });
        this.uart.onreceive = (data, text) => {
            // this is not perfect. separation is possible.
            if (text.indexOf('CONNECT') >= 0) {
                // console.log("connected");
            }
            else if (text.indexOf('DISCONNECT') >= 0) {
                // console.log("disconnected");
            }
            if (typeof this.onreceive === 'function') {
                this.onreceive(data, text);
            }
        };
    }
    send(data) {
        this.uart.send(data);
    }
    sendCommand(data) {
        this.uart.send(data + '\n');
        this.obniz.wait(100);
    }
    enterCommandMode() {
        this.send('$$$');
        this.obniz.wait(100);
    }
    config(json) {
        this.enterCommandMode();
        if (typeof json !== 'object') {
            // TODO: warning
            return;
        }
        // remove noize data
        this.sendCommand('');
        if (json.master_slave) {
            this.config_masterslave(json.master_slave);
        }
        if (json.auth) {
            this.config_auth(json.auth);
        }
        if (json.hid_flag) {
            this.config_HIDflag(json.hid_flag);
        }
        if (json.profile) {
            this.config_profile(json.profile);
        }
        if (json.power) {
            this.config_power(json.power);
        }
        if (json.display_name) {
            this.config_displayName(json.display_name);
        }
        this.config_reboot();
    }
    config_reboot() {
        this.sendCommand('R,1');
    }
    config_masterslave(mode) {
        let val = -1;
        if (typeof mode === 'number') {
            val = mode;
        }
        else if (typeof mode === 'string') {
            const modes = [
                'slave',
                'master',
                'trigger',
                'auto-connect-master',
                'auto-connect-dtr',
                'auto-connect-any',
                'pairing',
            ];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand('SM,' + val);
    }
    config_displayName(name) {
        this.sendCommand('SN,' + name);
    }
    // // SH,0200 HID Flag register. Descriptor=keyboard
    config_HIDflag(flag) {
        this.sendCommand('SH,' + flag);
    }
    config_profile(mode) {
        let val = -1;
        if (typeof mode === 'number') {
            val = mode;
        }
        else if (typeof mode === 'string') {
            const modes = [
                'SPP',
                'DUN-DCE',
                'DUN-DTE',
                'MDM-SPP',
                'SPP-DUN-DCE',
                'APL',
                'HID',
            ];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand('S~,' + val);
    }
    config_revert_localecho() {
        this.sendCommand('+');
    }
    config_auth(mode) {
        let val = -1;
        if (typeof mode === 'number') {
            val = mode;
        }
        else if (typeof mode === 'string') {
            const modes = ['open', 'ssp-keyboard', 'just-work', 'pincode'];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand('SA,' + val);
    }
    config_power(dbm) {
        let val = '0010';
        if (16 > dbm && dbm >= 12) {
            val = '000C';
        }
        else if (12 > dbm && dbm >= 8) {
            val = '0008';
        }
        else if (8 > dbm && dbm >= 4) {
            val = '0004';
        }
        else if (4 > dbm && dbm >= 0) {
            val = '0000';
        }
        else if (0 > dbm && dbm >= -4) {
            val = 'FFFC';
        }
        else if (-4 > dbm && dbm >= -8) {
            val = 'FFF8';
        }
        else if (-8 > dbm) {
            val = 'FFF4';
        }
        this.sendCommand('SY,' + val);
    }
    config_get_setting() {
        this.sendCommand('D');
    }
    config_get_extendSetting() {
        this.sendCommand('E');
    }
}
exports.default = RN42;


/***/ }),

/***/ "./dist/src/parts/Wireless/XBee/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts.XBee
 */
Object.defineProperty(exports, "__esModule", { value: true });
class XBee {
    constructor() {
        this.displayIoNames = { tx: '<tx', rx: '>rx' };
        this.keys = ['tx', 'rx', 'gnd'];
        this.requiredKeys = ['tx', 'rx'];
    }
    static info() {
        return {
            name: 'XBee',
        };
    }
    wired(obniz) {
        this.uart = obniz.getFreeUart();
        this.currentCommand = null;
        this.commands = [];
        this.isAtMode = false;
        this.onFinishAtModeCallback = null;
        if (typeof this.params.gnd === 'number') {
            obniz.getIO(this.params.gnd).output(false);
        }
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 9600,
            drive: '3v',
        });
        this.uart.onreceive = (data, text) => {
            if (this.isAtMode) {
                this.onAtResultsRecieve(data, text);
            }
            else {
                if (typeof this.onreceive === 'function') {
                    this.onreceive(data, text);
                }
            }
        };
    }
    send(data) {
        if (this.isAtMode === false) {
            this.uart.send(data);
        }
        else {
            this.obniz.error(new Error('XBee is AT Command mode now. Wait for finish config.'));
        }
    }
    onAtResultsRecieve(data, text) {
        if (!this.isAtMode) {
            return;
        }
        const next = () => {
            this.currentCommand = null;
            this.sendCommand();
        };
        if (text === 'OK\r') {
            if (this.currentCommand === 'ATCN') {
                this.isAtMode = false;
                this.currentCommand = null;
                if (typeof this.onFinishAtModeCallback === 'function') {
                    this.onFinishAtModeCallback();
                    this.onFinishAtModeCallback = null;
                }
                return;
            }
            next();
        }
        else if (text === 'ERROR\r') {
            this.obniz.error(new Error('XBee config error : ' + this.currentCommand));
        }
        else {
            // response of at command.
            console.log('XBEE : no catch message', data);
            next();
        }
    }
    addCommand(command, value) {
        const str = command + (value ? ' ' + value : '');
        this.commands.push(str);
        if (this.isAtMode === true && this.currentCommand === null) {
            this.sendCommand();
        }
    }
    sendCommand() {
        if (this.isAtMode === true &&
            this.currentCommand === null &&
            this.commands.length > 0) {
            this.currentCommand = 'AT' + this.commands.shift();
            this.uart.send(this.currentCommand + '\r');
        }
    }
    enterAtMode() {
        if (this.currentCommand !== null) {
            return;
        }
        this.isAtMode = true;
        this.obniz.wait(1000);
        const command = '+++';
        this.currentCommand = command;
        this.uart.send(this.currentCommand);
        this.obniz.wait(1000);
    }
    exitAtMode() {
        this.addCommand('CN');
    }
    async configWait(config) {
        if (this.isAtMode) {
            throw new Error('Xbee : duplicate config setting');
        }
        return new Promise((resolve, reject) => {
            const standaloneKeys = {
                destination_address_high: 'DH',
                destination_address_low: 'DL',
                source_address: 'MY',
            };
            const highLowKeys = ['destination_address'];
            this.enterAtMode();
            for (const key in config) {
                if (key.length === 2) {
                    this.addCommand(key, config[key]);
                }
                else if (standaloneKeys[key]) {
                    this.addCommand(standaloneKeys[key], config[key]);
                }
                else if (highLowKeys.includes(key)) {
                    let high = config[key].slice(0, -8);
                    if (!high) {
                        high = '0';
                    }
                    const low = config[key].slice(-8);
                    this.addCommand(standaloneKeys[key + '_high'], high);
                    this.addCommand(standaloneKeys[key + '_low'], low);
                }
            }
            this.exitAtMode();
            this.onFinishAtModeCallback = () => {
                resolve();
            };
        });
    }
}
exports.default = XBee;


/***/ }),

/***/ "./dist/src/parts/i2cCompass.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class I2cCompassAbstract extends i2cParts_1.default {
    static async calibrateWait() {
        throw new Error('Method not implemented.');
    }
    static async headingWait() {
        throw new Error('Method not implemented.');
    }
    async getWait() {
        const adc = await this.getAdcWait();
        return {
            x: this.calcMag(adc.x),
            y: this.calcMag(adc.y),
            z: this.calcMag(adc.z),
        };
    }
    async getAdcArrayWait() {
        const obj = await this.getAdcWait();
        return [obj.x, obj.y, obj.z];
    }
    async getArrayWait() {
        const obj = await this.getWait();
        return [obj.x, obj.y, obj.z];
    }
    getUnit() {
        return this.sf;
    }
    getRange() {
        return this.range;
    }
    setUnit(new_unit) {
        if (Object.keys(I2cCompassAbstract.unitScales).includes(new_unit)) {
            this.sf = new_unit;
        }
        else {
            throw new Error(`Invalid compass unit. Valid values are ${Object.keys(I2cCompassAbstract.unitScales).join()}`);
        }
    }
    calcMag(data) {
        return ((data * this.so * I2cCompassAbstract.unitScales[this.sf]) /
            I2cCompassAbstract.unitScales[this.defaultUnit]);
    }
}
exports.default = I2cCompassAbstract;
I2cCompassAbstract.unitScales = {
    G: 1,
    uT: 100,
    mT: 0.1,
    T: 0.0001,
    mG: 1000,
    kG: 0.001,
    uG: 1000 * 1000,
};


/***/ }),

/***/ "./dist/src/parts/i2cImu6.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts_1 = __importDefault(__webpack_require__("./dist/src/parts/i2cParts.js"));
class I2cImu6Abstract extends i2cParts_1.default {
    constructor() {
        super(...arguments);
        this.accel_so = '2g';
        this.gyro_so = '250dps';
        this.accel_sf = 'g';
        this.gyro_sf = 'dps';
    }
    static _accelS(value, accel_so, accel_sf) {
        return ((value / I2cImu6Abstract.scales.accel.so[accel_so]) *
            I2cImu6Abstract.scales.accel.sf[accel_sf]);
    }
    static _gyroS(value, gyro_so, gyro_sf) {
        return ((value / I2cImu6Abstract.scales.gyro.so[gyro_so]) *
            I2cImu6Abstract.scales.gyro.sf[gyro_sf]);
    }
    async getAccelWait() {
        const adc = await this.getAccelAdcWait();
        return this.calcAccel(adc);
    }
    async getGyroWait() {
        const adc = await this.getGyroAdcWait();
        return this.calcGyro(adc);
    }
    async getTempWait() {
        const adc = await this.getTempAdcWait();
        return this.calcTemp(adc);
    }
    async getAllWait() {
        const adc = await this.getAllAdcWait();
        const ret = {
            accelerometer: this.calcAccel(adc.accelerometer),
            gyroscope: this.calcGyro(adc.gyroscope),
            temperature: this.calcTemp(adc.temperature),
        };
        if ('compass' in adc) {
            ret.compass = adc.compass;
        }
        return ret;
    }
    async getAccelArrayWait() {
        const obj = await this.getAccelWait();
        return [obj.x, obj.y, obj.z];
    }
    async getGyroArrayWait() {
        const obj = await this.getGyroWait();
        return [obj.x, obj.y, obj.z];
    }
    async getAllArrayWait() {
        const obj = await this.getAllWait();
        return [
            [obj.accelerometer.x, obj.accelerometer.y, obj.accelerometer.z],
            [obj.gyroscope.x, obj.gyroscope.y, obj.gyroscope.z],
        ];
    }
    async getAccelAdcArrayWait() {
        const obj = await this.getAccelAdcWait();
        return [obj.x, obj.y, obj.z];
    }
    async getGyroAdcArrayWait() {
        const obj = await this.getGyroAdcWait();
        return [obj.x, obj.y, obj.z];
    }
    async getAllAdcArrayWait() {
        const obj = await this.getAllAdcWait();
        return [
            [obj.accelerometer.x, obj.accelerometer.y, obj.accelerometer.z],
            [obj.gyroscope.x, obj.gyroscope.y, obj.gyroscope.z],
        ];
    }
    async getAccelerometerWait() {
        return await this.getAccelWait();
    }
    async getGyroscopeWait() {
        return await this.getGyroWait();
    }
    async getWait() {
        return await this.getAllWait();
    }
    async getAllDataWait() {
        return await this.getAllWait();
    }
    getAccelRange() {
        return this.accel_so;
    }
    getGyroRange() {
        return this.gyro_so;
    }
    getAccelUnit() {
        return this.accel_sf;
    }
    getGyroUnit() {
        return this.gyro_sf;
    }
    setAccelUnit(accel_unit) {
        if (accel_unit in I2cImu6Abstract.scales.accel.sf) {
            this.accel_sf = accel_unit;
        }
        else {
            throw new Error(`Invalid accel unit. Valid values are: ${Object.keys(I2cImu6Abstract.scales.accel.sf).join()}`);
        }
    }
    setGyroUnit(gyro_unit) {
        if (gyro_unit in I2cImu6Abstract.scales.gyro.sf) {
            this.gyro_sf = gyro_unit;
        }
        else {
            throw new Error(`Invalid gyro unit. Valid values are: ${Object.keys(I2cImu6Abstract.scales.gyro.sf).join()}`);
        }
    }
    calcAccel(adc) {
        return {
            x: I2cImu6Abstract._accelS(adc.x, this.accel_so, this.accel_sf),
            y: I2cImu6Abstract._accelS(adc.y, this.accel_so, this.accel_sf),
            z: I2cImu6Abstract._accelS(adc.z, this.accel_so, this.accel_sf),
        };
    }
    calcGyro(adc) {
        return {
            x: I2cImu6Abstract._gyroS(adc.x, this.gyro_so, this.gyro_sf),
            y: I2cImu6Abstract._gyroS(adc.y, this.gyro_so, this.gyro_sf),
            z: I2cImu6Abstract._gyroS(adc.z, this.gyro_so, this.gyro_sf),
        };
    }
}
exports.default = I2cImu6Abstract;
// d/so*sf
I2cImu6Abstract.scales = {
    accel: {
        so: {
            '2g': 16384,
            '4g': 8192,
            '8g': 4096,
            '16g': 2048,
        },
        sf: {
            m_s2: 9.80665,
            g: 1,
            mg: 1000,
        },
    },
    gyro: {
        so: {
            '125dps': 262.144,
            '250dps': 131.072,
            '500dps': 65.536,
            '1000dps': 32.768,
            '2000dps': 16.384,
        },
        sf: {
            dps: 1,
            rps: 0.01745329251,
        },
    },
};


/***/ }),

/***/ "./dist/src/parts/i2cParts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @packageDocumentation
 * @module Parts
 */
Object.defineProperty(exports, "__esModule", { value: true });
class I2cPartsAbstract {
    constructor() {
        this.keys = [
            'gnd',
            'vcc',
            'sda',
            'scl',
            'i2c',
            'pull',
            'clock',
            'voltage',
            'address',
        ];
        this.requiredKeys = [];
    }
    static charArrayToInt16(values, endian = 'b') {
        const buffer = new ArrayBuffer(2);
        const dv = new DataView(buffer);
        dv.setUint8(0, values[0]);
        dv.setUint8(1, values[1]);
        return dv.getInt16(0, endian !== 'b');
    }
    static charArrayToXyz(data, endian = 'b', scaleFunc = (d) => d) {
        return {
            x: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(0, 2), endian)),
            y: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(2, 4), endian)),
            z: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(4, 6), endian)),
        };
    }
    // public abstract info(): ObnizPartsInfo;
    i2cInfo() {
        return this.i2cinfo;
    }
    wired(obniz) {
        this.obniz = obniz;
        Object.keys(this.i2cinfo).map((k) => {
            if (typeof this.params[k] === 'undefined') {
                this.params[k] = this.i2cinfo[k];
            }
            else {
                this.i2cinfo[k] = this.params[k];
            }
        });
        obniz.setVccGnd(this.params.vcc, this.params.gnd, this.params.voltage);
        this.params.mode = 'master';
        this.i2c = this.obniz.getI2CWithConfig(this.params);
        this.address = this.i2cinfo.address;
    }
    char2short(val1, val2) {
        const buffer = new ArrayBuffer(2);
        const dv = new DataView(buffer);
        dv.setUint8(0, val1);
        dv.setUint8(1, val2);
        return dv.getInt16(0, false);
    }
    async readWait(command, length) {
        this.i2c.write(this.address, [command]);
        return await this.i2c.readWait(this.address, length);
    }
    write(command, buf) {
        if (!Array.isArray(buf)) {
            buf = [buf];
        }
        this.i2c.write(this.address, [command, ...buf]);
    }
    async writeFlagWait(address, index) {
        const tempdata = await this.readWait(address, 1);
        tempdata[0] = tempdata[0] | (0b1 << index);
        this.write(address, tempdata);
    }
    async clearFlagWait(address, index) {
        const tempdata = await this.readWait(address, 1);
        tempdata[0] = tempdata[0] & (0xff - (0b1 << index));
        this.write(address, tempdata);
    }
    async readInt16Wait(register, endian = 'b') {
        const data = (await this.readWait(register, 2));
        return I2cPartsAbstract.charArrayToInt16(data, endian);
    }
    async readThreeInt16Wait(register, endian = 'b') {
        const data = await this.readWait(register, 6);
        const results = [0, 0, 0];
        results[0] = I2cPartsAbstract.charArrayToInt16(data.slice(0, 2), endian);
        results[1] = I2cPartsAbstract.charArrayToInt16(data.slice(2, 4), endian);
        results[2] = I2cPartsAbstract.charArrayToInt16(data.slice(4, 6), endian);
        return results;
    }
}
exports.default = I2cPartsAbstract;


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__("./node_modules/bn.js/lib/bn.js");

asn1.define = __webpack_require__("./node_modules/asn1.js/lib/asn1/api.js").define;
asn1.base = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js");
asn1.constants = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/index.js");
asn1.decoders = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/index.js");
asn1.encoders = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/index.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/api.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__("./node_modules/vm-browserify/index.js").runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/buffer.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/index.js":
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
base.DecoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
base.EncoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
base.Node = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/node.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/node.js":
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var EncoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;
var DecoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/reporter.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/der.js":
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/index.js");

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/index.js":
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/der.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/der.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/index.js":
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/der.js");
decoders.pem = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

var DERDecoder = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/der.js");

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/der.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/index.js":
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/der.js");
encoders.pem = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var DEREncoder = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/der.js");

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),

/***/ "./node_modules/assert/assert.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var objectAssign = __webpack_require__("./node_modules/object-assign/index.js");

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__("./node_modules/node-libs-browser/node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(2).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/brorand/index.js":
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(3);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),

/***/ "./node_modules/browserify-aes/aes.js":
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),

/***/ "./node_modules/browserify-aes/authCipher.js":
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var GHASH = __webpack_require__("./node_modules/browserify-aes/ghash.js")
var xor = __webpack_require__("./node_modules/buffer-xor/index.js")
var incr32 = __webpack_require__("./node_modules/browserify-aes/incr32.js")

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-aes/browser.js":
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__("./node_modules/browserify-aes/encrypter.js")
var deciphers = __webpack_require__("./node_modules/browserify-aes/decrypter.js")
var modes = __webpack_require__("./node_modules/browserify-aes/modes/list.json")

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-aes/decrypter.js":
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__("./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var MODES = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var StreamCipher = __webpack_require__("./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),

/***/ "./node_modules/browserify-aes/encrypter.js":
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var AuthCipher = __webpack_require__("./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var StreamCipher = __webpack_require__("./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),

/***/ "./node_modules/browserify-aes/ghash.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),

/***/ "./node_modules/browserify-aes/incr32.js":
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cbc.js":
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb1.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb8.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ctr.js":
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__("./node_modules/buffer-xor/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var incr32 = __webpack_require__("./node_modules/browserify-aes/incr32.js")

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ecb.js":
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/index.js":
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__("./node_modules/browserify-aes/modes/ecb.js"),
  CBC: __webpack_require__("./node_modules/browserify-aes/modes/cbc.js"),
  CFB: __webpack_require__("./node_modules/browserify-aes/modes/cfb.js"),
  CFB8: __webpack_require__("./node_modules/browserify-aes/modes/cfb8.js"),
  CFB1: __webpack_require__("./node_modules/browserify-aes/modes/cfb1.js"),
  OFB: __webpack_require__("./node_modules/browserify-aes/modes/ofb.js"),
  CTR: __webpack_require__("./node_modules/browserify-aes/modes/ctr.js"),
  GCM: __webpack_require__("./node_modules/browserify-aes/modes/ctr.js")
}

var modes = __webpack_require__("./node_modules/browserify-aes/modes/list.json")

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),

/***/ "./node_modules/browserify-aes/modes/list.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ofb.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-aes/streamCipher.js":
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-cipher/browser.js":
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__("./node_modules/browserify-des/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/browser.js")
var aesModes = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var desModes = __webpack_require__("./node_modules/browserify-des/modes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-des/index.js":
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__("./node_modules/cipher-base/index.js")
var des = __webpack_require__("./node_modules/des.js/lib/des.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),

/***/ "./node_modules/browserify-des/modes.js":
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),

/***/ "./node_modules/browserify-rsa/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/algos.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/browserify-sign/browser/algorithms.json")


/***/ }),

/***/ "./node_modules/browserify-sign/browser/algorithms.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/curves.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var stream = __webpack_require__("./node_modules/stream-browserify/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var sign = __webpack_require__("./node_modules/browserify-sign/browser/sign.js")
var verify = __webpack_require__("./node_modules/browserify-sign/browser/verify.js")

var algorithms = __webpack_require__("./node_modules/browserify-sign/browser/algorithms.json")
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/sign.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__("./node_modules/create-hmac/browser.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var EC = __webpack_require__("./node_modules/elliptic/lib/elliptic.js").ec
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var curves = __webpack_require__("./node_modules/browserify-sign/browser/curves.json")

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/verify.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var EC = __webpack_require__("./node_modules/elliptic/lib/elliptic.js").ec
var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var curves = __webpack_require__("./node_modules/browserify-sign/browser/curves.json")

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer-xor/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__("./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__("./node_modules/ieee754/index.js")
var isArray = __webpack_require__("./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/cipher-base/index.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/stream-browserify/index.js").Transform
var StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-ecdh/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__("./node_modules/elliptic/lib/elliptic.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-hash/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var MD5 = __webpack_require__("./node_modules/md5.js/index.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")
var sha = __webpack_require__("./node_modules/sha.js/index.js")
var Base = __webpack_require__("./node_modules/cipher-base/index.js")

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),

/***/ "./node_modules/create-hash/md5.js":
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__("./node_modules/md5.js/index.js")

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),

/***/ "./node_modules/create-hmac/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Legacy = __webpack_require__("./node_modules/create-hmac/legacy.js")
var Base = __webpack_require__("./node_modules/cipher-base/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var md5 = __webpack_require__("./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")

var sha = __webpack_require__("./node_modules/sha.js/index.js")

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),

/***/ "./node_modules/create-hmac/legacy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var Base = __webpack_require__("./node_modules/cipher-base/index.js")

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),

/***/ "./node_modules/crypto-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__("./node_modules/randombytes/browser.js")
exports.createHash = exports.Hash = __webpack_require__("./node_modules/create-hash/browser.js")
exports.createHmac = exports.Hmac = __webpack_require__("./node_modules/create-hmac/browser.js")

var algos = __webpack_require__("./node_modules/browserify-sign/algos.js")
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__("./node_modules/pbkdf2/browser.js")
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__("./node_modules/browserify-cipher/browser.js")

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__("./node_modules/diffie-hellman/browser.js")

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__("./node_modules/browserify-sign/browser/index.js")

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__("./node_modules/create-ecdh/browser.js")

var publicEncrypt = __webpack_require__("./node_modules/public-encrypt/browser.js")

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__("./node_modules/randomfill/browser.js")

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),

/***/ "./node_modules/des.js/lib/des.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__("./node_modules/des.js/lib/des/utils.js");
exports.Cipher = __webpack_require__("./node_modules/des.js/lib/des/cipher.js");
exports.DES = __webpack_require__("./node_modules/des.js/lib/des/des.js");
exports.CBC = __webpack_require__("./node_modules/des.js/lib/des/cbc.js");
exports.EDE = __webpack_require__("./node_modules/des.js/lib/des/ede.js");


/***/ }),

/***/ "./node_modules/des.js/lib/des/cbc.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/cipher.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/des.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var utils = __webpack_require__("./node_modules/des.js/lib/des/utils.js");
var Cipher = __webpack_require__("./node_modules/des.js/lib/des/cipher.js");

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/ede.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var Cipher = __webpack_require__("./node_modules/des.js/lib/des/cipher.js");
var DES = __webpack_require__("./node_modules/des.js/lib/des/des.js");

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),

/***/ "./node_modules/des.js/lib/des/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),

/***/ "./node_modules/dialog-polyfill/dist/dialog-polyfill.css":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("dialog {\n  position: absolute;\n  left: 0; right: 0;\n  width: -moz-fit-content;\n  width: -webkit-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: -webkit-fit-content;\n  height: fit-content;\n  margin: auto;\n  border: solid;\n  padding: 1em;\n  background: white;\n  color: black;\n  display: block;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\ndialog + .backdrop {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n  background: rgba(0,0,0,0.1);\n}\n\n._dialog_overlay {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n}\n\ndialog.fixed {\n  position: fixed;\n  top: 50%;\n  transform: translate(0, -50%);\n}");

/***/ }),

/***/ "./node_modules/dialog-polyfill/dist/dialog-polyfill.esm.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// nb. This is for IE10 and lower _only_.
var supportCustomEvent = window.CustomEvent;
if (!supportCustomEvent || typeof supportCustomEvent === 'object') {
  supportCustomEvent = function CustomEvent(event, x) {
    x = x || {};
    var ev = document.createEvent('CustomEvent');
    ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
    return ev;
  };
  supportCustomEvent.prototype = window.Event.prototype;
}

/**
 * @param {Element} el to check for stacking context
 * @return {boolean} whether this el or its parents creates a stacking context
 */
function createsStackingContext(el) {
  while (el && el !== document.body) {
    var s = window.getComputedStyle(el);
    var invalid = function(k, ok) {
      return !(s[k] === undefined || s[k] === ok);
    };
    
    if (s.opacity < 1 ||
        invalid('zIndex', 'auto') ||
        invalid('transform', 'none') ||
        invalid('mixBlendMode', 'normal') ||
        invalid('filter', 'none') ||
        invalid('perspective', 'none') ||
        s['isolation'] === 'isolate' ||
        s.position === 'fixed' ||
        s.webkitOverflowScrolling === 'touch') {
      return true;
    }
    el = el.parentElement;
  }
  return false;
}

/**
 * Finds the nearest <dialog> from the passed element.
 *
 * @param {Element} el to search from
 * @return {HTMLDialogElement} dialog found
 */
function findNearestDialog(el) {
  while (el) {
    if (el.localName === 'dialog') {
      return /** @type {HTMLDialogElement} */ (el);
    }
    el = el.parentElement;
  }
  return null;
}

/**
 * Blur the specified element, as long as it's not the HTML body element.
 * This works around an IE9/10 bug - blurring the body causes Windows to
 * blur the whole application.
 *
 * @param {Element} el to blur
 */
function safeBlur(el) {
  if (el && el.blur && el !== document.body) {
    el.blur();
  }
}

/**
 * @param {!NodeList} nodeList to search
 * @param {Node} node to find
 * @return {boolean} whether node is inside nodeList
 */
function inNodeList(nodeList, node) {
  for (var i = 0; i < nodeList.length; ++i) {
    if (nodeList[i] === node) {
      return true;
    }
  }
  return false;
}

/**
 * @param {HTMLFormElement} el to check
 * @return {boolean} whether this form has method="dialog"
 */
function isFormMethodDialog(el) {
  if (!el || !el.hasAttribute('method')) {
    return false;
  }
  return el.getAttribute('method').toLowerCase() === 'dialog';
}

/**
 * @param {!HTMLDialogElement} dialog to upgrade
 * @constructor
 */
function dialogPolyfillInfo(dialog) {
  this.dialog_ = dialog;
  this.replacedStyleTop_ = false;
  this.openAsModal_ = false;

  // Set a11y role. Browsers that support dialog implicitly know this already.
  if (!dialog.hasAttribute('role')) {
    dialog.setAttribute('role', 'dialog');
  }

  dialog.show = this.show.bind(this);
  dialog.showModal = this.showModal.bind(this);
  dialog.close = this.close.bind(this);

  if (!('returnValue' in dialog)) {
    dialog.returnValue = '';
  }

  if ('MutationObserver' in window) {
    var mo = new MutationObserver(this.maybeHideModal.bind(this));
    mo.observe(dialog, {attributes: true, attributeFilter: ['open']});
  } else {
    // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also
    // seem to fire even if the element was removed as part of a parent removal. Use the removed
    // events to force downgrade (useful if removed/immediately added).
    var removed = false;
    var cb = function() {
      removed ? this.downgradeModal() : this.maybeHideModal();
      removed = false;
    }.bind(this);
    var timeout;
    var delayModel = function(ev) {
      if (ev.target !== dialog) { return; }  // not for a child element
      var cand = 'DOMNodeRemoved';
      removed |= (ev.type.substr(0, cand.length) === cand);
      window.clearTimeout(timeout);
      timeout = window.setTimeout(cb, 0);
    };
    ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {
      dialog.addEventListener(name, delayModel);
    });
  }
  // Note that the DOM is observed inside DialogManager while any dialog
  // is being displayed as a modal, to catch modal removal from the DOM.

  Object.defineProperty(dialog, 'open', {
    set: this.setOpen.bind(this),
    get: dialog.hasAttribute.bind(dialog, 'open')
  });

  this.backdrop_ = document.createElement('div');
  this.backdrop_.className = 'backdrop';
  this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));
}

dialogPolyfillInfo.prototype = {

  get dialog() {
    return this.dialog_;
  },

  /**
   * Maybe remove this dialog from the modal top layer. This is called when
   * a modal dialog may no longer be tenable, e.g., when the dialog is no
   * longer open or is no longer part of the DOM.
   */
  maybeHideModal: function() {
    if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }
    this.downgradeModal();
  },

  /**
   * Remove this dialog from the modal top layer, leaving it as a non-modal.
   */
  downgradeModal: function() {
    if (!this.openAsModal_) { return; }
    this.openAsModal_ = false;
    this.dialog_.style.zIndex = '';

    // This won't match the native <dialog> exactly because if the user set top on a centered
    // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's
    // possible to polyfill this perfectly.
    if (this.replacedStyleTop_) {
      this.dialog_.style.top = '';
      this.replacedStyleTop_ = false;
    }

    // Clear the backdrop and remove from the manager.
    this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
    dialogPolyfill.dm.removeDialog(this);
  },

  /**
   * @param {boolean} value whether to open or close this dialog
   */
  setOpen: function(value) {
    if (value) {
      this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');
    } else {
      this.dialog_.removeAttribute('open');
      this.maybeHideModal();  // nb. redundant with MutationObserver
    }
  },

  /**
   * Handles clicks on the fake .backdrop element, redirecting them as if
   * they were on the dialog itself.
   *
   * @param {!Event} e to redirect
   */
  backdropClick_: function(e) {
    if (!this.dialog_.hasAttribute('tabindex')) {
      // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be
      // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this
      // would not be needed - clicks would move the implicit cursor there.
      var fake = document.createElement('div');
      this.dialog_.insertBefore(fake, this.dialog_.firstChild);
      fake.tabIndex = -1;
      fake.focus();
      this.dialog_.removeChild(fake);
    } else {
      this.dialog_.focus();
    }

    var redirectedEvent = document.createEvent('MouseEvents');
    redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,
        e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,
        e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
    this.dialog_.dispatchEvent(redirectedEvent);
    e.stopPropagation();
  },

  /**
   * Focuses on the first focusable element within the dialog. This will always blur the current
   * focus, even if nothing within the dialog is found.
   */
  focus_: function() {
    // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.
    var target = this.dialog_.querySelector('[autofocus]:not([disabled])');
    if (!target && this.dialog_.tabIndex >= 0) {
      target = this.dialog_;
    }
    if (!target) {
      // Note that this is 'any focusable area'. This list is probably not exhaustive, but the
      // alternative involves stepping through and trying to focus everything.
      var opts = ['button', 'input', 'keygen', 'select', 'textarea'];
      var query = opts.map(function(el) {
        return el + ':not([disabled])';
      });
      // TODO(samthor): tabindex values that are not numeric are not focusable.
      query.push('[tabindex]:not([disabled]):not([tabindex=""])');  // tabindex != "", not disabled
      target = this.dialog_.querySelector(query.join(', '));
    }
    safeBlur(document.activeElement);
    target && target.focus();
  },

  /**
   * Sets the zIndex for the backdrop and dialog.
   *
   * @param {number} dialogZ
   * @param {number} backdropZ
   */
  updateZIndex: function(dialogZ, backdropZ) {
    if (dialogZ < backdropZ) {
      throw new Error('dialogZ should never be < backdropZ');
    }
    this.dialog_.style.zIndex = dialogZ;
    this.backdrop_.style.zIndex = backdropZ;
  },

  /**
   * Shows the dialog. If the dialog is already open, this does nothing.
   */
  show: function() {
    if (!this.dialog_.open) {
      this.setOpen(true);
      this.focus_();
    }
  },

  /**
   * Show this dialog modally.
   */
  showModal: function() {
    if (this.dialog_.hasAttribute('open')) {
      throw new Error('Failed to execute \'showModal\' on dialog: The element is already open, and therefore cannot be opened modally.');
    }
    if (!document.body.contains(this.dialog_)) {
      throw new Error('Failed to execute \'showModal\' on dialog: The element is not in a Document.');
    }
    if (!dialogPolyfill.dm.pushDialog(this)) {
      throw new Error('Failed to execute \'showModal\' on dialog: There are too many open modal dialogs.');
    }

    if (createsStackingContext(this.dialog_.parentElement)) {
      console.warn('A dialog is being shown inside a stacking context. ' +
          'This may cause it to be unusable. For more information, see this link: ' +
          'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');
    }

    this.setOpen(true);
    this.openAsModal_ = true;

    // Optionally center vertically, relative to the current viewport.
    if (dialogPolyfill.needsCentering(this.dialog_)) {
      dialogPolyfill.reposition(this.dialog_);
      this.replacedStyleTop_ = true;
    } else {
      this.replacedStyleTop_ = false;
    }

    // Insert backdrop.
    this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);

    // Focus on whatever inside the dialog.
    this.focus_();
  },

  /**
   * Closes this HTMLDialogElement. This is optional vs clearing the open
   * attribute, however this fires a 'close' event.
   *
   * @param {string=} opt_returnValue to use as the returnValue
   */
  close: function(opt_returnValue) {
    if (!this.dialog_.hasAttribute('open')) {
      throw new Error('Failed to execute \'close\' on dialog: The element does not have an \'open\' attribute, and therefore cannot be closed.');
    }
    this.setOpen(false);

    // Leave returnValue untouched in case it was set directly on the element
    if (opt_returnValue !== undefined) {
      this.dialog_.returnValue = opt_returnValue;
    }

    // Triggering "close" event for any attached listeners on the <dialog>.
    var closeEvent = new supportCustomEvent('close', {
      bubbles: false,
      cancelable: false
    });
    this.dialog_.dispatchEvent(closeEvent);
  }

};

var dialogPolyfill = {};

dialogPolyfill.reposition = function(element) {
  var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
  var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
  element.style.top = Math.max(scrollTop, topValue) + 'px';
};

dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
  for (var i = 0; i < document.styleSheets.length; ++i) {
    var styleSheet = document.styleSheets[i];
    var cssRules = null;
    // Some browsers throw on cssRules.
    try {
      cssRules = styleSheet.cssRules;
    } catch (e) {}
    if (!cssRules) { continue; }
    for (var j = 0; j < cssRules.length; ++j) {
      var rule = cssRules[j];
      var selectedNodes = null;
      // Ignore errors on invalid selector texts.
      try {
        selectedNodes = document.querySelectorAll(rule.selectorText);
      } catch(e) {}
      if (!selectedNodes || !inNodeList(selectedNodes, element)) {
        continue;
      }
      var cssTop = rule.style.getPropertyValue('top');
      var cssBottom = rule.style.getPropertyValue('bottom');
      if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {
        return true;
      }
    }
  }
  return false;
};

dialogPolyfill.needsCentering = function(dialog) {
  var computedStyle = window.getComputedStyle(dialog);
  if (computedStyle.position !== 'absolute') {
    return false;
  }

  // We must determine whether the top/bottom specified value is non-auto.  In
  // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
  // Firefox returns the used value. So we do this crazy thing instead: check
  // the inline style and then go through CSS rules.
  if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||
      (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {
    return false;
  }
  return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
};

/**
 * @param {!Element} element to force upgrade
 */
dialogPolyfill.forceRegisterDialog = function(element) {
  if (window.HTMLDialogElement || element.showModal) {
    console.warn('This browser already supports <dialog>, the polyfill ' +
        'may not work correctly', element);
  }
  if (element.localName !== 'dialog') {
    throw new Error('Failed to register dialog: The element is not a dialog.');
  }
  new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));
};

/**
 * @param {!Element} element to upgrade, if necessary
 */
dialogPolyfill.registerDialog = function(element) {
  if (!element.showModal) {
    dialogPolyfill.forceRegisterDialog(element);
  }
};

/**
 * @constructor
 */
dialogPolyfill.DialogManager = function() {
  /** @type {!Array<!dialogPolyfillInfo>} */
  this.pendingDialogStack = [];

  var checkDOM = this.checkDOM_.bind(this);

  // The overlay is used to simulate how a modal dialog blocks the document.
  // The blocking dialog is positioned on top of the overlay, and the rest of
  // the dialogs on the pending dialog stack are positioned below it. In the
  // actual implementation, the modal dialog stacking is controlled by the
  // top layer, where z-index has no effect.
  this.overlay = document.createElement('div');
  this.overlay.className = '_dialog_overlay';
  this.overlay.addEventListener('click', function(e) {
    this.forwardTab_ = undefined;
    e.stopPropagation();
    checkDOM([]);  // sanity-check DOM
  }.bind(this));

  this.handleKey_ = this.handleKey_.bind(this);
  this.handleFocus_ = this.handleFocus_.bind(this);

  this.zIndexLow_ = 100000;
  this.zIndexHigh_ = 100000 + 150;

  this.forwardTab_ = undefined;

  if ('MutationObserver' in window) {
    this.mo_ = new MutationObserver(function(records) {
      var removed = [];
      records.forEach(function(rec) {
        for (var i = 0, c; c = rec.removedNodes[i]; ++i) {
          if (!(c instanceof Element)) {
            continue;
          } else if (c.localName === 'dialog') {
            removed.push(c);
          }
          removed = removed.concat(c.querySelectorAll('dialog'));
        }
      });
      removed.length && checkDOM(removed);
    });
  }
};

/**
 * Called on the first modal dialog being shown. Adds the overlay and related
 * handlers.
 */
dialogPolyfill.DialogManager.prototype.blockDocument = function() {
  document.documentElement.addEventListener('focus', this.handleFocus_, true);
  document.addEventListener('keydown', this.handleKey_);
  this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});
};

/**
 * Called on the first modal dialog being removed, i.e., when no more modal
 * dialogs are visible.
 */
dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
  document.documentElement.removeEventListener('focus', this.handleFocus_, true);
  document.removeEventListener('keydown', this.handleKey_);
  this.mo_ && this.mo_.disconnect();
};

/**
 * Updates the stacking of all known dialogs.
 */
dialogPolyfill.DialogManager.prototype.updateStacking = function() {
  var zIndex = this.zIndexHigh_;

  for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
    dpi.updateZIndex(--zIndex, --zIndex);
    if (i === 0) {
      this.overlay.style.zIndex = --zIndex;
    }
  }

  // Make the overlay a sibling of the dialog itself.
  var last = this.pendingDialogStack[0];
  if (last) {
    var p = last.dialog.parentNode || document.body;
    p.appendChild(this.overlay);
  } else if (this.overlay.parentNode) {
    this.overlay.parentNode.removeChild(this.overlay);
  }
};

/**
 * @param {Element} candidate to check if contained or is the top-most modal dialog
 * @return {boolean} whether candidate is contained in top dialog
 */
dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {
  while (candidate = findNearestDialog(candidate)) {
    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
      if (dpi.dialog === candidate) {
        return i === 0;  // only valid if top-most
      }
    }
    candidate = candidate.parentElement;
  }
  return false;
};

dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
  if (this.containedByTopDialog_(event.target)) { return; }

  if (document.activeElement === document.documentElement) { return; }

  event.preventDefault();
  event.stopPropagation();
  safeBlur(/** @type {Element} */ (event.target));

  if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key

  var dpi = this.pendingDialogStack[0];
  var dialog = dpi.dialog;
  var position = dialog.compareDocumentPosition(event.target);
  if (position & Node.DOCUMENT_POSITION_PRECEDING) {
    if (this.forwardTab_) {
      // forward
      dpi.focus_();
    } else if (event.target !== document.documentElement) {
      // backwards if we're not already focused on <html>
      document.documentElement.focus();
    }
  }

  return false;
};

dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
  this.forwardTab_ = undefined;
  if (event.keyCode === 27) {
    event.preventDefault();
    event.stopPropagation();
    var cancelEvent = new supportCustomEvent('cancel', {
      bubbles: false,
      cancelable: true
    });
    var dpi = this.pendingDialogStack[0];
    if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {
      dpi.dialog.close();
    }
  } else if (event.keyCode === 9) {
    this.forwardTab_ = !event.shiftKey;
  }
};

/**
 * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are
 * removed and immediately readded don't stay modal, they become normal.
 *
 * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed
 */
dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {
  // This operates on a clone because it may cause it to change. Each change also calls
  // updateStacking, which only actually needs to happen once. But who removes many modal dialogs
  // at a time?!
  var clone = this.pendingDialogStack.slice();
  clone.forEach(function(dpi) {
    if (removed.indexOf(dpi.dialog) !== -1) {
      dpi.downgradeModal();
    } else {
      dpi.maybeHideModal();
    }
  });
};

/**
 * @param {!dialogPolyfillInfo} dpi
 * @return {boolean} whether the dialog was allowed
 */
dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
  var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
  if (this.pendingDialogStack.length >= allowed) {
    return false;
  }
  if (this.pendingDialogStack.unshift(dpi) === 1) {
    this.blockDocument();
  }
  this.updateStacking();
  return true;
};

/**
 * @param {!dialogPolyfillInfo} dpi
 */
dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
  var index = this.pendingDialogStack.indexOf(dpi);
  if (index === -1) { return; }

  this.pendingDialogStack.splice(index, 1);
  if (this.pendingDialogStack.length === 0) {
    this.unblockDocument();
  }
  this.updateStacking();
};

dialogPolyfill.dm = new dialogPolyfill.DialogManager();
dialogPolyfill.formSubmitter = null;
dialogPolyfill.useValue = null;

/**
 * Installs global handlers, such as click listers and native method overrides. These are needed
 * even if a no dialog is registered, as they deal with <form method="dialog">.
 */
if (window.HTMLDialogElement === undefined) {

  /**
   * If HTMLFormElement translates method="DIALOG" into 'get', then replace the descriptor with
   * one that returns the correct value.
   */
  var testForm = document.createElement('form');
  testForm.setAttribute('method', 'dialog');
  if (testForm.method !== 'dialog') {
    var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');
    if (methodDescriptor) {
      // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything
      // and don't bother to update the element.
      var realGet = methodDescriptor.get;
      methodDescriptor.get = function() {
        if (isFormMethodDialog(this)) {
          return 'dialog';
        }
        return realGet.call(this);
      };
      var realSet = methodDescriptor.set;
      methodDescriptor.set = function(v) {
        if (typeof v === 'string' && v.toLowerCase() === 'dialog') {
          return this.setAttribute('method', v);
        }
        return realSet.call(this, v);
      };
      Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);
    }
  }

  /**
   * Global 'click' handler, to capture the <input type="submit"> or <button> element which has
   * submitted a <form method="dialog">. Needed as Safari and others don't report this inside
   * document.activeElement.
   */
  document.addEventListener('click', function(ev) {
    dialogPolyfill.formSubmitter = null;
    dialogPolyfill.useValue = null;
    if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission

    var target = /** @type {Element} */ (ev.target);
    if (!target || !isFormMethodDialog(target.form)) { return; }

    var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);
    if (!valid) {
      if (!(target.localName === 'input' && target.type === 'image')) { return; }
      // this is a <input type="image">, which can submit forms
      dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;
    }

    var dialog = findNearestDialog(target);
    if (!dialog) { return; }

    dialogPolyfill.formSubmitter = target;

  }, false);

  /**
   * Replace the native HTMLFormElement.submit() method, as it won't fire the
   * submit event and give us a chance to respond.
   */
  var nativeFormSubmit = HTMLFormElement.prototype.submit;
  var replacementFormSubmit = function () {
    if (!isFormMethodDialog(this)) {
      return nativeFormSubmit.call(this);
    }
    var dialog = findNearestDialog(this);
    dialog && dialog.close();
  };
  HTMLFormElement.prototype.submit = replacementFormSubmit;

  /**
   * Global form 'dialog' method handler. Closes a dialog correctly on submit
   * and possibly sets its return value.
   */
  document.addEventListener('submit', function(ev) {
    var form = /** @type {HTMLFormElement} */ (ev.target);
    if (!isFormMethodDialog(form)) { return; }
    ev.preventDefault();

    var dialog = findNearestDialog(form);
    if (!dialog) { return; }

    // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that
    // the submitter is correct before using its value as .returnValue.
    var s = dialogPolyfill.formSubmitter;
    if (s && s.form === form) {
      dialog.close(dialogPolyfill.useValue || s.value);
    } else {
      dialog.close();
    }
    dialogPolyfill.formSubmitter = null;

  }, true);
}

/* harmony default export */ __webpack_exports__["default"] = (dialogPolyfill);


/***/ }),

/***/ "./node_modules/diffie-hellman/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__("./node_modules/diffie-hellman/lib/generatePrime.js")
var primes = __webpack_require__("./node_modules/diffie-hellman/lib/primes.json")

var DH = __webpack_require__("./node_modules/diffie-hellman/lib/dh.js")

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/dh.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var MillerRabin = __webpack_require__("./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__("./node_modules/diffie-hellman/lib/generatePrime.js");
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/generatePrime.js":
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__("./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),

/***/ "./node_modules/diffie-hellman/lib/primes.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__("./node_modules/elliptic/package.json").version;
elliptic.utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
elliptic.rand = __webpack_require__("./node_modules/brorand/index.js");
elliptic.curve = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/index.js");
elliptic.curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");

// Protocols
elliptic.ec = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/index.js");
elliptic.eddsa = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/index.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/base.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");
curve.short = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/short.js");
curve.mont = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/mont.js");
curve.edwards = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/edwards.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/mont.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/short.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curves.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var curve = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/index.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = __webpack_require__("./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var HmacDRBG = __webpack_require__("./node_modules/hmac-drbg/lib/hmac-drbg.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");
var rand = __webpack_require__("./node_modules/brorand/index.js");
var assert = utils.assert;

var KeyPair = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/key.js");
var Signature = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/signature.js");

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/key.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/signature.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");

var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/key.js");
var Signature = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/signature.js");

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__("./node_modules/elliptic/node_modules/bn.js/lib/bn.js");
var minAssert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var minUtils = __webpack_require__("./node_modules/minimalistic-crypto-utils/lib/utils.js");

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),

/***/ "./node_modules/elliptic/node_modules/bn.js/lib/bn.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(4).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/elliptic/package.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/events/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/evp_bytestokey/index.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var MD5 = __webpack_require__("./node_modules/md5.js/index.js")

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),

/***/ "./node_modules/hash-base/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/stream-browserify/index.js").Transform
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),

/***/ "./node_modules/hash.js/lib/hash.js":
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
hash.common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
hash.sha = __webpack_require__("./node_modules/hash.js/lib/hash/sha.js");
hash.ripemd = __webpack_require__("./node_modules/hash.js/lib/hash/ripemd.js");
hash.hmac = __webpack_require__("./node_modules/hash.js/lib/hash/hmac.js");

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/hmac.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/ripemd.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/1.js");
exports.sha224 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/224.js");
exports.sha256 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/256.js");
exports.sha384 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/384.js");
exports.sha512 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/512.js");


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__("./node_modules/hash.js/lib/hash/sha/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var SHA256 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/256.js");

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__("./node_modules/hash.js/lib/hash/sha/common.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");

var SHA512 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/512.js");

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),

/***/ "./node_modules/hmac-drbg/lib/hmac-drbg.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var utils = __webpack_require__("./node_modules/minimalistic-crypto-utils/lib/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/md5.js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__("./node_modules/hash-base/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),

/***/ "./node_modules/miller-rabin/lib/mr.js":
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var brorand = __webpack_require__("./node_modules/brorand/index.js");

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),

/***/ "./node_modules/minimalistic-assert/index.js":
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),

/***/ "./node_modules/minimalistic-crypto-utils/lib/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/moment/locale/af.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
        ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return /^nm$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            ); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        },
    });

    return af;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-dz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Amine Roukh: https://github.com/Amine27
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi
//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'جانفي',
            'فيفري',
            'مارس',
            'أفريل',
            'ماي',
            'جوان',
            'جويلية',
            'أوت',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arDz = moment.defineLocale('ar-dz', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arDz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-kw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arKw = moment.defineLocale('ar-kw', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arKw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ly.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Libya) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            0: '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arLy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ma.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arMa = moment.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arMa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-sa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return arSa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-tn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
            '_'
        ),
        monthsShort:
            'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
                '_'
            ),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss: '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arTn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'أقل من ثانية',
                'ثانية واحدة',
                ['ثانيتان', 'ثانيتين'],
                '%d ثوان',
                '%d ثانية',
                '%d ثانية',
            ],
            m: [
                'أقل من دقيقة',
                'دقيقة واحدة',
                ['دقيقتان', 'دقيقتين'],
                '%d دقائق',
                '%d دقيقة',
                '%d دقيقة',
            ],
            h: [
                'أقل من ساعة',
                'ساعة واحدة',
                ['ساعتان', 'ساعتين'],
                '%d ساعات',
                '%d ساعة',
                '%d ساعة',
            ],
            d: [
                'أقل من يوم',
                'يوم واحد',
                ['يومان', 'يومين'],
                '%d أيام',
                '%d يومًا',
                '%d يوم',
            ],
            M: [
                'أقل من شهر',
                'شهر واحد',
                ['شهران', 'شهرين'],
                '%d أشهر',
                '%d شهرا',
                '%d شهر',
            ],
            y: [
                'أقل من عام',
                'عام واحد',
                ['عامان', 'عامين'],
                '%d أعوام',
                '%d عامًا',
                '%d عام',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر',
        ];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ar;

})));


/***/ }),

/***/ "./node_modules/moment/locale/az.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı',
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
        ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays:
            'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
                '_'
            ),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'bir neçə saniyə',
            ss: '%d saniyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il',
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return az;

})));


/***/ }),

/***/ "./node_modules/moment/locale/be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            dd: 'дзень_дні_дзён',
            MM: 'месяц_месяцы_месяцаў',
            yy: 'год_гады_гадоў',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
                '_'
            ),
            standalone:
                'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
                    '_'
                ),
        },
        monthsShort:
            'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
                '_'
            ),
            standalone:
                'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
                    '_'
                ),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) &&
                        number % 100 !== 12 &&
                        number % 100 !== 13
                        ? number + '-і'
                        : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return be;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bg.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bg = moment.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Миналата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Миналия] dddd [в] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            ss: '%d секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            w: 'седмица',
            ww: '%d седмици',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bm.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
            '_'
        ),
        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
        },
        calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return bm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn-bd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali (Bangladesh) [bn-bd]
//! author : Asraf Hossain Patoary : https://github.com/ashwoolford

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bnBd = moment.defineLocale('bn-bd', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },

        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'রাত') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ভোর') {
                return hour;
            } else if (meridiem === 'সকাল') {
                return hour;
            } else if (meridiem === 'দুপুর') {
                return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'বিকাল') {
                return hour + 12;
            } else if (meridiem === 'সন্ধ্যা') {
                return hour + 12;
            }
        },

        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 6) {
                return 'ভোর';
            } else if (hour < 12) {
                return 'সকাল';
            } else if (hour < 15) {
                return 'দুপুর';
            } else if (hour < 18) {
                return 'বিকাল';
            } else if (hour < 20) {
                return 'সন্ধ্যা';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bnBd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '১',
            2: '২',
            3: '৩',
            4: '৪',
            5: '৫',
            6: '৬',
            7: '৭',
            8: '৮',
            9: '৯',
            0: '০',
        },
        numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0',
        };

    var bn = moment.defineLocale('bn', {
        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
            '_'
        ),
        monthsShort:
            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
                '_'
            ),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
            '_'
        ),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            ss: '%d সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর',
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '༡',
            2: '༢',
            3: '༣',
            4: '༤',
            5: '༥',
            6: '༦',
            7: '༧',
            8: '༨',
            9: '༩',
            0: '༠',
        },
        numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0',
        };

    var bo = moment.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
            '_'
        ),
        monthsShort:
            'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
                '_'
            ),
        monthsShortRegex: /^(ཟླ་\d{1,2})/,
        monthsParseExact: true,
        weekdays:
            'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
                '_'
            ),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
            '_'
        ),
        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            ss: '%d སྐར་ཆ།',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ',
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh',
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z',
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var monthsParse = [
            /^gen/i,
            /^c[ʼ\']hwe/i,
            /^meu/i,
            /^ebr/i,
            /^mae/i,
            /^(mez|eve)/i,
            /^gou/i,
            /^eos/i,
            /^gwe/i,
            /^her/i,
            /^du/i,
            /^ker/i,
        ],
        monthsRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        monthsStrictRegex =
            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
        monthsShortStrictRegex =
            /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        fullWeekdaysParse = [
            /^sul/i,
            /^lun/i,
            /^meurzh/i,
            /^merc[ʼ\']her/i,
            /^yaou/i,
            /^gwener/i,
            /^sadorn/i,
        ],
        shortWeekdaysParse = [
            /^Sul/i,
            /^Lun/i,
            /^Meu/i,
            /^Mer/i,
            /^Yao/i,
            /^Gwe/i,
            /^Sad/i,
        ],
        minWeekdaysParse = [
            /^Su/i,
            /^Lu/i,
            /^Me([^r]|$)/i,
            /^Mer/i,
            /^Ya/i,
            /^Gw/i,
            /^Sa/i,
        ];

    var br = moment.defineLocale('br', {
        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
            '_'
        ),
        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParse: minWeekdaysParse,
        fullWeekdaysParse: fullWeekdaysParse,
        shortWeekdaysParse: shortWeekdaysParse,
        minWeekdaysParse: minWeekdaysParse,

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warcʼhoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Decʼh da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s ʼzo',
            s: 'un nebeud segondennoù',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
        isPM: function (token) {
            return token === 'g.m.';
        },
        meridiem: function (hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
        },
    });

    return br;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ca = moment.defineLocale('ca', {
        months: {
            standalone:
                'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
                    '_'
                ),
            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
                '_'
            ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [passat a ' +
                    (this.hours() !== 1 ? 'les' : 'la') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ca;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = {
            format: 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
                '_'
            ),
            standalone:
                'ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince'.split(
                    '_'
                ),
        },
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
        monthsParse = [
            /^led/i,
            /^úno/i,
            /^bře/i,
            /^dub/i,
            /^kvě/i,
            /^(čvn|červen$|června)/i,
            /^(čvc|červenec|července)/i,
            /^srp/i,
            /^zář/i,
            /^říj/i,
            /^lis/i,
            /^pro/i,
        ],
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsRegex =
            /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex:
            /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex:
            /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY',
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cv = moment.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
            '_'
        ),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays:
            'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
                '_'
            ),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output)
                    ? 'рен'
                    : /ҫул$/i.exec(output)
                    ? 'тан'
                    : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            ss: '%d ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return cv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
        ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
            '_'
        ),
        weekdays:
            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
                '_'
            ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed', // 1af to 10fed
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed', // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/da.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return da;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-at.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deAt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return de;

})));


/***/ }),

/***/ "./node_modules/moment/locale/dv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު',
        ],
        weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު',
        ];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /މކ|މފ/,
        isPM: function (input) {
            return 'މފ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            ss: 'd% ސިކުންތު',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return dv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/el.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl:
            'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
                '_'
            ),
        monthsGenitiveEl:
            'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
                '_'
            ),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (
                typeof format === 'string' &&
                /D/.test(format.substring(0, format.indexOf('MMMM')))
            ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
            '_'
        ),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L',
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            ss: '%d δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια',
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4st is the first week of the year.
        },
    });

    return el;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-au.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enAu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-gb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enGb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ie.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enIe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-il.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Israel) [en-il]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIl = moment.defineLocale('en-il', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enIl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-in.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (India) [en-in]
//! author : Jatin Agrawal : https://github.com/jatinag22

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIn = moment.defineLocale('en-in', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return enIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-nz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enNz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-sg.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Singapore) [en-sg]
//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enSg = moment.defineLocale('en-sg', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enSg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean
//! comment : Vivakvo corrected the translation by colindean and miestasmia

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj',
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-do.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return esDo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-mx.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Mexico) [es-mx]
//! author : JC Franco : https://github.com/jcfranco

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esMx = moment.defineLocale('es-mx', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return esMx;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-us.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta
//! author : chrisrodz : https://github.com/chrisrodz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return esUs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha inválida',
    });

    return es;

})));


/***/ }),

/***/ "./node_modules/moment/locale/et.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['ühe minuti', 'üks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['ühe tunni', 'tund aega', 'üks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['ühe päeva', 'üks päev'],
            M: ['kuu aja', 'kuu aega', 'üks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['ühe aasta', 'aasta', 'üks aasta'],
            yy: [number + ' aasta', number + ' aastat'],
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
        ),
        monthsShort:
            'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays:
            'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
                '_'
            ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return et;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
        ),
        monthsShort:
            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
                '_'
            ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '۱',
            2: '۲',
            3: '۳',
            4: '۴',
            5: '۵',
            6: '۶',
            7: '۷',
            8: '۸',
            9: '۹',
            0: '۰',
        },
        numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0',
        };

    var fa = moment.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
            '_'
        ),
        monthsShort:
            'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
                '_'
            ),
        weekdays:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysShort:
            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
                '_'
            ),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            ss: '%d ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string
                .replace(/[۰-۹]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return fa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersPast =
            'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
                ' '
            ),
        numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'neljän',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9],
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                result = isFuture ? 'sekunnin' : 'sekuntia';
                break;
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10
            ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
            : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
        ),
        monthsShort:
            'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
                '_'
            ),
        weekdays:
            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
                '_'
            ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fil.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Filipino [fil]
//! author : Dan Hagman : https://github.com/hagmandan
//! author : Matthew Co : https://github.com/matthewdeeco

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fil = moment.defineLocale('fil', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fil;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123
//! author : Kristian Sakarisson : https://github.com/sakarisson

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays:
            'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaður',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
    });

    return frCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return frCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsStrictRegex =
            /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsShortStrictRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
        monthsRegex =
            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
        monthsParse = [
            /^janv/i,
            /^févr/i,
            /^mars/i,
            /^avr/i,
            /^mai/i,
            /^juin/i,
            /^juil/i,
            /^août/i,
            /^sept/i,
            /^oct/i,
            /^nov/i,
            /^déc/i,
        ];

    var fr = moment.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
            '_'
        ),
        monthsShort:
            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
                '_'
            ),
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
            '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ga.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Irish or Irish Gaelic [ga]
//! author : André Silva : https://github.com/askpt

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Eanáir',
            'Feabhra',
            'Márta',
            'Aibreán',
            'Bealtaine',
            'Meitheamh',
            'Iúil',
            'Lúnasa',
            'Meán Fómhair',
            'Deireadh Fómhair',
            'Samhain',
            'Nollaig',
        ],
        monthsShort = [
            'Ean',
            'Feabh',
            'Márt',
            'Aib',
            'Beal',
            'Meith',
            'Iúil',
            'Lún',
            'M.F.',
            'D.F.',
            'Samh',
            'Noll',
        ],
        weekdays = [
            'Dé Domhnaigh',
            'Dé Luain',
            'Dé Máirt',
            'Dé Céadaoin',
            'Déardaoin',
            'Dé hAoine',
            'Dé Sathairn',
        ],
        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d míonna',
            y: 'bliain',
            yy: '%d bliain',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ga;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Am Faoilleach',
            'An Gearran',
            'Am Màrt',
            'An Giblean',
            'An Cèitean',
            'An t-Ògmhios',
            'An t-Iuchar',
            'An Lùnastal',
            'An t-Sultain',
            'An Dàmhair',
            'An t-Samhain',
            'An Dùbhlachd',
        ],
        monthsShort = [
            'Faoi',
            'Gear',
            'Màrt',
            'Gibl',
            'Cèit',
            'Ògmh',
            'Iuch',
            'Lùn',
            'Sult',
            'Dàmh',
            'Samh',
            'Dùbh',
        ],
        weekdays = [
            'Didòmhnaich',
            'Diluain',
            'Dimàirt',
            'Diciadain',
            'Diardaoin',
            'Dihaoine',
            'Disathairne',
        ],
        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
            '_'
        ),
        monthsShort:
            'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function () {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-deva.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Devanagari script [gom-deva]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
            m: ['एका मिणटान', 'एक मिनूट'],
            mm: [number + ' मिणटांनी', number + ' मिणटां'],
            h: ['एका वरान', 'एक वर'],
            hh: [number + ' वरांनी', number + ' वरां'],
            d: ['एका दिसान', 'एक दीस'],
            dd: [number + ' दिसांनी', number + ' दीस'],
            M: ['एका म्हयन्यान', 'एक म्हयनो'],
            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
            y: ['एका वर्सान', 'एक वर्स'],
            yy: [number + ' वर्सांनी', number + ' वर्सां'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomDeva = moment.defineLocale('gom-deva', {
        months: {
            standalone:
                'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
                    '_'
                ),
            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [वाजतां]',
            LTS: 'A h:mm:ss [वाजतां]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
        },
        calendar: {
            sameDay: '[आयज] LT',
            nextDay: '[फाल्यां] LT',
            nextWeek: '[फुडलो] dddd[,] LT',
            lastDay: '[काल] LT',
            lastWeek: '[फाटलो] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s आदीं',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'वेर' only applies to day of the month
                case 'D':
                    return number + 'वेर';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळीं') {
                return hour;
            } else if (meridiem === 'दनपारां') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'सांजे') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'राती';
            } else if (hour < 12) {
                return 'सकाळीं';
            } else if (hour < 16) {
                return 'दनपारां';
            } else if (hour < 20) {
                return 'सांजे';
            } else {
                return 'राती';
            }
        },
    });

    return gomDeva;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: {
            standalone:
                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
                    '_'
                ),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /rati|sokallim|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokallim';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        },
    });

    return gomLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '૧',
            2: '૨',
            3: '૩',
            4: '૪',
            5: '૫',
            6: '૬',
            7: '૭',
            8: '૮',
            9: '૯',
            0: '૦',
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0',
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
            '_'
        ),
        monthsShort:
            'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
            '_'
        ),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પહેલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ',
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return gu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/he.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var he = moment.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
            '_'
        ),
        monthsShort:
            'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            ss: '%d שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            },
        },
        meridiemParse:
            /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        },
    });

    return he;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        },
        monthsParse = [
            /^जन/i,
            /^फ़र|फर/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सितं|सित/i,
            /^अक्टू/i,
            /^नव|नवं/i,
            /^दिसं|दिस/i,
        ],
        shortMonthsParse = [
            /^जन/i,
            /^फ़र/i,
            /^मार्च/i,
            /^अप्रै/i,
            /^मई/i,
            /^जून/i,
            /^जुल/i,
            /^अग/i,
            /^सित/i,
            /^अक्टू/i,
            /^नव/i,
            /^दिस/i,
        ];

    var hi = moment.defineLocale('hi', {
        months: {
            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
                '_'
            ),
            standalone:
                'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
                    '_'
                ),
        },
        monthsShort:
            'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
        },

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: shortMonthsParse,

        monthsRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsShortRegex:
            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,

        monthsStrictRegex:
            /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,

        monthsShortStrictRegex:
            /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,

        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            ss: '%d सेकंड',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return hi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
                '_'
            ),
            standalone:
                'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
                    '_'
                ),
        },
        monthsShort:
            'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prošlu] [nedjelju] [u] LT';
                    case 3:
                        return '[prošlu] [srijedu] [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner
//! author : Peter Viszt  : https://github.com/passatgt

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var weekEndings =
        'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix
                    ? 'néhány másodperc'
                    : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix)
                    ? ' másodperc'
                    : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (
            (isFuture ? '' : '[múlt] ') +
            '[' +
            weekEndings[this.day()] +
            '] LT[-kor]'
        );
    }

    var hu = moment.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm',
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return hu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hy-am.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
                '_'
            ),
            standalone:
                'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
                    '_'
                ),
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays:
            'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
                '_'
            ),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            ss: '%d վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի',
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hyAm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/id.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return id;

})));


/***/ }),

/***/ "./node_modules/moment/locale/is.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nokkrar sekúndur'
                    : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
                    );
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return (
                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
                    );
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture
                            ? 'klukkustundir'
                            : 'klukkustundum')
                    );
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays:
            'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return is;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian (Switzerland) [it-ch]
//! author : xfh : https://github.com/xfh

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var itCh = moment.defineLocale('it-ch', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return itCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz
//! author: Marco : https://github.com/Manfre98

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: function () {
                return (
                    '[Oggi a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextDay: function () {
                return (
                    '[Domani a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextWeek: function () {
                return (
                    'dddd [a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastDay: function () {
                return (
                    '[Ieri a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return (
                            '[La scorsa] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                    default:
                        return (
                            '[Lo scorso] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return it;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ja.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ja = moment.defineLocale('ja', {
        eras: [
            {
                since: '2019-05-01',
                offset: 1,
                name: '令和',
                narrow: '㋿',
                abbr: 'R',
            },
            {
                since: '1989-01-08',
                until: '2019-04-30',
                offset: 1,
                name: '平成',
                narrow: '㍻',
                abbr: 'H',
            },
            {
                since: '1926-12-25',
                until: '1989-01-07',
                offset: 1,
                name: '昭和',
                narrow: '㍼',
                abbr: 'S',
            },
            {
                since: '1912-07-30',
                until: '1926-12-24',
                offset: 1,
                name: '大正',
                narrow: '㍽',
                abbr: 'T',
            },
            {
                since: '1873-01-01',
                until: '1912-07-29',
                offset: 6,
                name: '明治',
                narrow: '㍾',
                abbr: 'M',
            },
            {
                since: '0001-01-01',
                until: '1873-12-31',
                offset: 1,
                name: '西暦',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: '紀元前',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        eraYearOrdinalRegex: /(元|\d+)年/,
        eraYearOrdinalParse: function (input, match) {
            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
        },
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日(ddd) HH:mm',
        },
        meridiemParse: /午前|午後/i,
        isPM: function (input) {
            return input === '午後';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay: '[昨日] LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function (number, period) {
            switch (period) {
                case 'y':
                    return number === 1 ? '元年' : number + '年';
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            ss: '%d秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年',
        },
    });

    return ja;

})));


/***/ }),

/***/ "./node_modules/moment/locale/jv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return jv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ka.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/IrakliJani

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ka = moment.defineLocale('ka', {
        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
            '_'
        ),
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone:
                'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
                    '_'
                ),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
                '_'
            ),
            isFormat: /(წინა|შემდეგ)/,
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return s.replace(
                    /(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,
                    function ($0, $1, $2) {
                        return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
                    }
                );
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
                return s;
            },
            s: 'რამდენიმე წამი',
            ss: '%d წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი',
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
            ) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7,
        },
    });

    return ka;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші',
    };

    var kk = moment.defineLocale('kk', {
        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
            '_'
        ),
        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
            '_'
        ),
        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            ss: '%d секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return kk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/km.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '១',
            2: '២',
            3: '៣',
            4: '៤',
            5: '៥',
            6: '៦',
            7: '៧',
            8: '៨',
            9: '៩',
            0: '០',
        },
        numberMap = {
            '១': '1',
            '២': '2',
            '៣': '3',
            '៤': '4',
            '៥': '5',
            '៦': '6',
            '៧': '7',
            '៨': '8',
            '៩': '9',
            '០': '0',
        };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort:
            'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
                '_'
            ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ',
        },
        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
        ordinal: 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return km;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '೧',
            2: '೨',
            3: '೩',
            4: '೪',
            5: '೫',
            6: '೬',
            7: '೭',
            8: '೮',
            9: '೯',
            0: '೦',
        },
        numberMap = {
            '೧': '1',
            '೨': '2',
            '೩': '3',
            '೪': '4',
            '೫': '5',
            '೬': '6',
            '೭': '7',
            '೮': '8',
            '೯': '9',
            '೦': '0',
        };

    var kn = moment.defineLocale('kn', {
        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
            '_'
        ),
        monthsShort:
            'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
            '_'
        ),
        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss: '%d ಸೆಕೆಂಡುಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ',
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal: function (number) {
            return number + 'ನೇ';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return kn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ko = moment.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
            '_'
        ),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm',
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse: /오전|오후/,
        isPM: function (token) {
            return token === '오후';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
    });

    return ko;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ku.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kurdish [ku]
//! author : Shahram Mebashar : https://github.com/ShahramMebashar

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '١',
            2: '٢',
            3: '٣',
            4: '٤',
            5: '٥',
            6: '٦',
            7: '٧',
            8: '٨',
            9: '٩',
            0: '٠',
        },
        numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0',
        },
        months = [
            'کانونی دووەم',
            'شوبات',
            'ئازار',
            'نیسان',
            'ئایار',
            'حوزەیران',
            'تەمموز',
            'ئاب',
            'ئەیلوول',
            'تشرینی یەكەم',
            'تشرینی دووەم',
            'كانونی یەکەم',
        ];

    var ku = moment.defineLocale('ku', {
        months: months,
        monthsShort: months,
        weekdays:
            'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
                '_'
            ),
        weekdaysShort:
            'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar: {
            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
            nextDay: '[به‌یانی كاتژمێر] LT',
            nextWeek: 'dddd [كاتژمێر] LT',
            lastDay: '[دوێنێ كاتژمێر] LT',
            lastWeek: 'dddd [كاتژمێر] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'له‌ %s',
            past: '%s',
            s: 'چه‌ند چركه‌یه‌ك',
            ss: 'چركه‌ %d',
            m: 'یه‌ك خوله‌ك',
            mm: '%d خوله‌ك',
            h: 'یه‌ك كاتژمێر',
            hh: '%d كاتژمێر',
            d: 'یه‌ك ڕۆژ',
            dd: '%d ڕۆژ',
            M: 'یه‌ك مانگ',
            MM: '%d مانگ',
            y: 'یه‌ك ساڵ',
            yy: '%d ساڵ',
        },
        preparse: function (string) {
            return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/،/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ku;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ky.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү',
    };

    var ky = moment.defineLocale('ky', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
            '_'
        ),
        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
            '_'
        ),
        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
            '_'
        ),
        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кечээ саат] LT',
            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            ss: '%d секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ky;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
                '_'
            ),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            },
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var lo = moment.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
            '_'
        ),
        monthsShort:
            'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
                '_'
            ),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss: '%d ວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ',
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function (number) {
            return 'ທີ່' + number;
        },
    });

    return lo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundė_sekundžių_sekundes',
        m: 'minutė_minutės_minutę',
        mm: 'minutės_minučių_minutes',
        h: 'valanda_valandos_valandą',
        hh: 'valandos_valandų_valandas',
        d: 'diena_dienos_dieną',
        dd: 'dienos_dienų_dienas',
        M: 'mėnuo_mėnesio_mėnesį',
        MM: 'mėnesiai_mėnesių_mėnesius',
        y: 'metai_metų_metus',
        yy: 'metai_metų_metus',
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix
            ? forms(key)[0]
            : isFuture
            ? forms(key)[1]
            : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return (
                result + translateSingular(number, withoutSuffix, key[0], isFuture)
            );
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
                '_'
            ),
            standalone:
                'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
                    '_'
                ),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
                '_'
            ),
            standalone:
                'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
                    '_'
                ),
            isFormat: /dddd HH:mm/,
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        h: 'stundas_stundām_stunda_stundas'.split('_'),
        hh: 'stundas_stundām_stunda_stundas'.split('_'),
        d: 'dienas_dienām_diena_dienas'.split('_'),
        dd: 'dienas_dienām_diena_dienas'.split('_'),
        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        y: 'gada_gadiem_gads_gadi'.split('_'),
        yy: 'gada_gadiem_gads_gadi'.split('_'),
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays:
            'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
                '_'
            ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/me.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return me;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
            '_'
        ),
        monthsShort:
            'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
                '_'
            ),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0
//! author : Sashko Todorov : https://github.com/bkyceh

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mk = moment.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
            '_'
        ),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
            '_'
        ),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пред %s',
            s: 'неколку секунди',
            ss: '%d секунди',
            m: 'една минута',
            mm: '%d минути',
            h: 'еден час',
            hh: '%d часа',
            d: 'еден ден',
            dd: '%d дена',
            M: 'еден месец',
            MM: '%d месеци',
            y: 'една година',
            yy: '%d години',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return mk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ml.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ml = moment.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
            '_'
        ),
        monthsShort:
            'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
                '_'
            ),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            ss: '%d സെക്കൻഡ്',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം',
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        },
    });

    return ml;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Mongolian [mn]
//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
            '_'
        ),
        monthsShort:
            '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY оны MMMMын D',
            LLL: 'YYYY оны MMMMын D HH:mm',
            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM: function (input) {
            return input === 'ҮХ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar: {
            sameDay: '[Өнөөдөр] LT',
            nextDay: '[Маргааш] LT',
            nextWeek: '[Ирэх] dddd LT',
            lastDay: '[Өчигдөр] LT',
            lastWeek: '[Өнгөрсөн] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s дараа',
            past: '%s өмнө',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        },
    });

    return mn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';
                    break;
                case 'ss':
                    output = '%d सेकंद';
                    break;
                case 'm':
                    output = 'एक मिनिट';
                    break;
                case 'mm':
                    output = '%d मिनिटे';
                    break;
                case 'h':
                    output = 'एक तास';
                    break;
                case 'hh':
                    output = '%d तास';
                    break;
                case 'd':
                    output = 'एक दिवस';
                    break;
                case 'dd':
                    output = '%d दिवस';
                    break;
                case 'M':
                    output = 'एक महिना';
                    break;
                case 'MM':
                    output = '%d महिने';
                    break;
                case 'y':
                    output = 'एक वर्ष';
                    break;
                case 'yy':
                    output = '%d वर्षे';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';
                    break;
                case 'ss':
                    output = '%d सेकंदां';
                    break;
                case 'm':
                    output = 'एका मिनिटा';
                    break;
                case 'mm':
                    output = '%d मिनिटां';
                    break;
                case 'h':
                    output = 'एका तासा';
                    break;
                case 'hh':
                    output = '%d तासां';
                    break;
                case 'd':
                    output = 'एका दिवसा';
                    break;
                case 'dd':
                    output = '%d दिवसां';
                    break;
                case 'M':
                    output = 'एका महिन्या';
                    break;
                case 'MM':
                    output = '%d महिन्यां';
                    break;
                case 'y':
                    output = 'एका वर्षा';
                    break;
                case 'yy':
                    output = '%d वर्षां';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
            '_'
        ),
        monthsShort:
            'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr,
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
                return hour;
            } else if (
                meridiem === 'दुपारी' ||
                meridiem === 'सायंकाळी' ||
                meridiem === 'रात्री'
            ) {
                return hour >= 12 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
                return 'पहाटे';
            } else if (hour < 12) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return mr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms-my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return msMy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ms;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mt = moment.defineLocale('mt', {
        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays:
            'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
                '_'
            ),
        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[Għada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraħ fil-]LT',
            lastWeek: 'dddd [li għadda] [fil-]LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'f’ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegħa',
            hh: '%d siegħat',
            d: 'ġurnata',
            dd: '%d ġranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '၁',
            2: '၂',
            3: '၃',
            4: '၄',
            5: '၅',
            6: '၆',
            7: '၇',
            8: '၈',
            9: '၉',
            0: '၀',
        },
        numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0',
        };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
            '_'
        ),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
            '_'
        ),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss: '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်',
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return my;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ne.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '१',
            2: '२',
            3: '३',
            4: '४',
            5: '५',
            6: '६',
            7: '७',
            8: '८',
            9: '९',
            0: '०',
        },
        numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0',
        };

    var ne = moment.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
            '_'
        ),
        monthsShort:
            'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
            '_'
        ),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            ss: '%d सेकेण्ड',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ne;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl-be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nlBe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! authors : https://github.com/mechuwind
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/oc-lnc.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Occitan, lengadocian dialecte [oc-lnc]
//! author : Quentin PAGÈS : https://github.com/Quenty31

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ocLnc = moment.defineLocale('oc-lnc', {
        months: {
            standalone:
                'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
                    '_'
                ),
            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: '[uèi a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[ièr a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquí %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4,
        },
    });

    return ocLnc;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pa-in.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '੧',
            2: '੨',
            3: '੩',
            4: '੪',
            5: '੫',
            6: '੬',
            7: '੭',
            8: '੮',
            9: '੯',
            0: '੦',
        },
        numberMap = {
            '੧': '1',
            '੨': '2',
            '੩': '3',
            '੪': '4',
            '੫': '5',
            '੬': '6',
            '੭': '7',
            '੮': '8',
            '੯': '9',
            '੦': '0',
        };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
            '_'
        ),
        monthsShort:
            'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
                '_'
            ),
        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
            '_'
        ),
        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
        },
        calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: '[ਅਗਲਾ] dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            ss: '%d ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ',
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return paIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsNominative =
            'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
                '_'
            ),
        monthsSubjective =
            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
                '_'
            ),
        monthsParse = [
            /^sty/i,
            /^lut/i,
            /^mar/i,
            /^kwi/i,
            /^maj/i,
            /^cze/i,
            /^lip/i,
            /^sie/i,
            /^wrz/i,
            /^paź/i,
            /^lis/i,
            /^gru/i,
        ];
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'ww':
                return result + (plural(number) ? 'tygodnie' : 'tygodni');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays:
            'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            w: 'tydzień',
            ww: translate,
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt-br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
                '_'
            ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        invalidDate: 'Data inválida',
    });

    return ptBr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
                '_'
            ),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Último] dddd [às] LT' // Saturday + Sunday
                    : '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ro.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly
//! author : Emanuel Cepoi : https://github.com/cepem

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                ss: 'secunde',
                mm: 'minute',
                hh: 'ore',
                dd: 'zile',
                ww: 'săptămâni',
                MM: 'luni',
                yy: 'ani',
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
        ),
        monthsShort:
            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o săptămână',
            ww: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural,
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ro;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ru.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            hh: 'час_часа_часов',
            dd: 'день_дня_дней',
            ww: 'неделя_недели_недель',
            MM: 'месяц_месяца_месяцев',
            yy: 'год_года_лет',
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [
        /^янв/i,
        /^фев/i,
        /^мар/i,
        /^апр/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^авг/i,
        /^сен/i,
        /^окт/i,
        /^ноя/i,
        /^дек/i,
    ];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
                '_'
            ),
            standalone:
                'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
                    '_'
                ),
        },
        monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
                '_'
            ),
            standalone:
                'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
                    '_'
                ),
        },
        weekdays: {
            standalone:
                'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
                    '_'
                ),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
                '_'
            ),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
        },
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex:
            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex:
            /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соответствует только сокращённым формам
        monthsShortStrictRegex:
            /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., H:mm',
            LLLL: 'dddd, D MMMM YYYY г., H:mm',
        },
        calendar: {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            w: 'неделя',
            ww: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ru;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوري',
            'فيبروري',
            'مارچ',
            'اپريل',
            'مئي',
            'جون',
            'جولاءِ',
            'آگسٽ',
            'سيپٽمبر',
            'آڪٽوبر',
            'نومبر',
            'ڊسمبر',
        ],
        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            ss: '%d سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/se.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var se = moment.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
            '_'
        ),
        monthsShort:
            'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays:
            'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
                '_'
            ),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return se;

})));


/***/ }),

/***/ "./node_modules/moment/locale/si.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
            '_'
        ),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
            '_'
        ),
        weekdays:
            'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
                '_'
            ),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            ss: 'තත්පර %d',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal: function (number) {
            return number + ' වැනි';
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        },
    });

    return si;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months =
            'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
                '_'
            ),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nekaj sekund'
                    : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sq.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
            '_'
        ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
            '_'
        ),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sq;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr-cyrl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једног минута'],
            mm: ['минут', 'минута', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            d: ['један дан', 'једног дана'],
            dd: ['дан', 'дана', 'дана'],
            M: ['један месец', 'једног месеца'],
            MM: ['месец', 'месеца', 'месеци'],
            y: ['једну годину', 'једне године'],
            yy: ['годину', 'године', 'година'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'једна година';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'годину') {
                return number + ' година';
            }

            return number + ' ' + word;
        },
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
            '_'
        ),
        monthsShort:
            'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return srCyrl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            d: ['jedan dan', 'jednog dana'],
            dd: ['dan', 'dana', 'dana'],
            M: ['jedan mesec', 'jednog meseca'],
            MM: ['mesec', 'meseca', 'meseci'],
            y: ['jednu godinu', 'jedne godine'],
            yy: ['godinu', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'jedna godina';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'godinu') {
                return number + ' godina';
            }

            return number + ' ' + word;
        },
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ss.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
            '_'
        ),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays:
            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
                '_'
            ),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka',
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ss;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? ':e'
                        : b === 1
                        ? ':a'
                        : b === 2
                        ? ':a'
                        : b === 3
                        ? ':e'
                        : ':e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays:
            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
                '_'
            ),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ta.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '௧',
            2: '௨',
            3: '௩',
            4: '௪',
            5: '௫',
            6: '௬',
            7: '௭',
            8: '௮',
            9: '௯',
            0: '௦',
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0',
        };

    var ta = moment.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
            '_'
        ),
        monthsShort:
            'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
                '_'
            ),
        weekdays:
            'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
                '_'
            ),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
            '_'
        ),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm',
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            ss: '%d விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்',
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal: function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ta;

})));


/***/ }),

/***/ "./node_modules/moment/locale/te.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var te = moment.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
            '_'
        ),
        monthsShort:
            'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
                '_'
            ),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            ss: '%d సెకన్లు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు',
        },
        dayOfMonthOrdinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return te;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tet.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo
//! author : Sonia Simoes : https://github.com/soniasimoes

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tet;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tg.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tajik [tg]
//! author : Orif N. Jr. : https://github.com/orif-jr

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум',
    };

    var tg = moment.defineLocale('tg', {
        months: {
            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
                '_'
            ),
            standalone:
                'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
                    '_'
                ),
        },
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
            '_'
        ),
        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Имрӯз соати] LT',
            nextDay: '[Фардо соати] LT',
            lastDay: '[Дирӯз соати] LT',
            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'баъди %s',
            past: '%s пеш',
            s: 'якчанд сония',
            m: 'як дақиқа',
            mm: '%d дақиқа',
            h: 'як соат',
            hh: '%d соат',
            d: 'як рӯз',
            dd: '%d рӯз',
            M: 'як моҳ',
            MM: '%d моҳ',
            y: 'як сол',
            yy: '%d сол',
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1th is the first week of the year.
        },
    });

    return tg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/th.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var th = moment.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
            '_'
        ),
        monthsShort:
            'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            ss: '%d วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            w: '1 สัปดาห์',
            ww: '%d สัปดาห์',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี',
        },
    });

    return th;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkmen [tk]
//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inji",
        5: "'inji",
        8: "'inji",
        70: "'inji",
        80: "'inji",
        2: "'nji",
        7: "'nji",
        20: "'nji",
        50: "'nji",
        3: "'ünji",
        4: "'ünji",
        100: "'ünji",
        6: "'njy",
        9: "'unjy",
        10: "'unjy",
        30: "'unjy",
        60: "'ynjy",
        90: "'ynjy",
    };

    var tk = moment.defineLocale('tk', {
        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
            '_'
        ),
        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[düýn] LT',
            lastWeek: '[geçen] dddd [sagat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s soň',
            past: '%s öň',
            s: 'birnäçe sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir aý',
            MM: '%d aý',
            y: 'bir ýyl',
            yy: '%d ýyl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'unjy";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tl-ph.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlPh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tlh.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'leS'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'waQ'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'nem'
                : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'Hu’'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'wen'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'ben'
                : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
            '_'
        ),
        monthsShort:
            'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysShort:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L',
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı",
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
            '_'
        ),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
            '_'
        ),
        weekdaysShort: 'Paz_Pzt_Sal_Çar_Per_Cum_Cmt'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'öö' : 'ÖÖ';
            } else {
                return isLower ? 'ös' : 'ÖS';
            }
        },
        meridiemParse: /öö|ÖÖ|ös|ÖS/,
        isPM: function (input) {
            return input === 'ös' || input === 'ÖS';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'ıncı";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return "d'o" === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? "d'o" : "D'O";
            } else {
                return isLower ? "d'a" : "D'A";
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n míut", "'iens míut"],
            mm: [number + ' míuts', '' + number + ' míuts'],
            h: ["'n þora", "'iensa þora"],
            hh: [number + ' þoras', '' + number + ' þoras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars'],
        };
        return isFuture
            ? format[key][0]
            : withoutSuffix
            ? format[key][0]
            : format[key][1];
    }

    return tzl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
            '_'
        ),
        monthsShort:
            'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
                '_'
            ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzmLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzm = moment.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
            '_'
        ),
        monthsShort:
            'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
                '_'
            ),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            ss: '%d ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ug-cn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uyghur (China) [ug-cn]
//! author: boyaq : https://github.com/boyaq

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort:
            'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
                '_'
            ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل',
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return ugCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            dd: 'день_дні_днів',
            MM: 'місяць_місяці_місяців',
            yy: 'рік_роки_років',
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                nominative:
                    'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
                        '_'
                    ),
                accusative:
                    'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
                        '_'
                    ),
                genitive:
                    'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
                        '_'
                    ),
            },
            nounCase;

        if (m === true) {
            return weekdays['nominative']
                .slice(1, 7)
                .concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
            ? 'accusative'
            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
            ? 'genitive'
            : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
                '_'
            ),
            standalone:
                'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
                    '_'
                ),
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
            '_'
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural,
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ur.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'جنوری',
            'فروری',
            'مارچ',
            'اپریل',
            'مئی',
            'جون',
            'جولائی',
            'اگست',
            'ستمبر',
            'اکتوبر',
            'نومبر',
            'دسمبر',
        ],
        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm',
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            ss: '%d سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال',
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ur;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays:
            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
                '_'
            ),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uzLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uz = moment.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
            '_'
        ),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            ss: '%d фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return uz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/vi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk
//! author : Chien Kira : https://github.com/chienkira

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var vi = moment.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
            '_'
        ),
        monthsShort:
            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
            '_'
        ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return /^ch$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần trước lúc] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            ss: '%d giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            w: 'một tuần',
            ww: '%d tuần',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return vi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/x-pseudo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
            '_'
        ),
        monthsShort:
            'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
                '_'
            ),
        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            ss: '%d s~écóñ~ds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return xPseudo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/yo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var yo = moment.defineLocale('yo', {
        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
            '_'
        ),
        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            ss: 'aayá %d',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d',
        },
        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: 'ọjọ́ %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return yo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-cn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng
//! author : uu109 : https://github.com/uu109

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhCn = moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[下]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            lastDay: '[昨天]LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[上]dddLT';
                } else {
                    return '[本]dddLT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s后',
            past: '%s前',
            s: '几秒',
            ss: '%d 秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            w: '1 周',
            ww: '%d 周',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return zhCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-hk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd
//! author : Anthony : https://github.com/anthonylau

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhHk = moment.defineLocale('zh-hk', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1200) {
                return '上午';
            } else if (hm === 1200) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhHk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-mo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Macau) [zh-mo]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Tan Yuanhong : https://github.com/le0tan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhMo = moment.defineLocale('zh-mo', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhMo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-tw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   undefined
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhTw;

})));


/***/ }),

/***/ "./node_modules/moment/moment.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.29.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                __webpack_require__("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.3';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/inherits/inherits_browser.js":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js":
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/util/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__("./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__("./node_modules/node-libs-browser/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/parse-asn1/aesid.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

/***/ }),

/***/ "./node_modules/parse-asn1/asn1.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js")

exports.certificate = __webpack_require__("./node_modules/parse-asn1/certificate.js")

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),

/***/ "./node_modules/parse-asn1/certificate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__("./node_modules/asn1.js/lib/asn1.js")

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),

/***/ "./node_modules/parse-asn1/fixProc.js":
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var ciphers = __webpack_require__("./node_modules/browserify-aes/browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),

/***/ "./node_modules/parse-asn1/index.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__("./node_modules/parse-asn1/asn1.js")
var aesid = __webpack_require__("./node_modules/parse-asn1/aesid.json")
var fixProc = __webpack_require__("./node_modules/parse-asn1/fixProc.js")
var ciphers = __webpack_require__("./node_modules/browserify-aes/browser.js")
var compat = __webpack_require__("./node_modules/pbkdf2/browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),

/***/ "./node_modules/pbkdf2/browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__("./node_modules/pbkdf2/lib/async.js")
exports.pbkdf2Sync = __webpack_require__("./node_modules/pbkdf2/lib/sync-browser.js")


/***/ }),

/***/ "./node_modules/pbkdf2/lib/async.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__("./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__("./node_modules/pbkdf2/lib/default-encoding.js")
var sync = __webpack_require__("./node_modules/pbkdf2/lib/sync-browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/default-encoding.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/precondition.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/sync-browser.js":
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__("./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")
var sha = __webpack_require__("./node_modules/sha.js/index.js")

var checkParameters = __webpack_require__("./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__("./node_modules/pbkdf2/lib/default-encoding.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/public-encrypt/browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__("./node_modules/public-encrypt/publicEncrypt.js")
exports.privateDecrypt = __webpack_require__("./node_modules/public-encrypt/privateDecrypt.js")

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),

/***/ "./node_modules/public-encrypt/mgf.js":
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/privateDecrypt.js":
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var mgf = __webpack_require__("./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__("./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var withPublic = __webpack_require__("./node_modules/public-encrypt/withPublic.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),

/***/ "./node_modules/public-encrypt/publicEncrypt.js":
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js")
var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var mgf = __webpack_require__("./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__("./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var withPublic = __webpack_require__("./node_modules/public-encrypt/withPublic.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/withPublic.js":
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),

/***/ "./node_modules/public-encrypt/xor.js":
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),

/***/ "./node_modules/randombytes/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/randomfill/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__("./node_modules/safe-buffer/index.js")
var randombytes = __webpack_require__("./node_modules/randombytes/browser.js")
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");


/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__("./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__("./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__("./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = Object.create(__webpack_require__("./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__("./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__("./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__("./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(0);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = Object.create(__webpack_require__("./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__("./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__("./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js"), __webpack_require__("./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/readable-browser.js").PassThrough


/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__("./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__("./node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/readable-browser.js").Transform


/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");


/***/ }),

/***/ "./node_modules/ripemd160/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__("./node_modules/hash-base/index.js")

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),

/***/ "./node_modules/round-to/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function round(method, number, precision) {
	if (typeof number !== 'number') {
		throw new TypeError('Expected value to be a number');
	}

	if (precision === Infinity) {
		return number;
	}

	if (!Number.isInteger(precision)) {
		throw new TypeError('Expected precision to be an integer');
	}

	const isRoundingAndNegative = method === 'round' && number < 0;
	if (isRoundingAndNegative) {
		number = Math.abs(number);
	}

	const power = 10 ** precision;

	let result = Math[method](Number((number * power).toPrecision(15))) / power;

	if (isRoundingAndNegative) {
		result = -result;
	}

	return result;
}

module.exports = round.bind(undefined, 'round');
module.exports.up = round.bind(undefined, 'ceil');
module.exports.down = round.bind(undefined, 'floor');


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/semver/semver.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer

var debug
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0)
    args.unshift('SEMVER')
    console.log.apply(console, args)
  }
} else {
  debug = function () {}
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0'

var MAX_LENGTH = 256
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16

// The actual regexps go on exports.re
var re = exports.re = []
var src = exports.src = []
var R = 0

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*'
var NUMERICIDENTIFIERLOOSE = R++
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'

// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')'

var MAINVERSIONLOOSE = R++
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')'

var PRERELEASEIDENTIFIERLOOSE = R++
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')'

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))'

var PRERELEASELOOSE = R++
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?'

src[FULL] = '^' + FULLPLAIN + '$'

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?'

var LOOSE = R++
src[LOOSE] = '^' + LOOSEPLAIN + '$'

var GTLT = R++
src[GTLT] = '((?:<|>)?=?)'

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
var XRANGEIDENTIFIER = R++
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*'

var XRANGEPLAIN = R++
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?'

var XRANGEPLAINLOOSE = R++
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?'

var XRANGE = R++
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$'
var XRANGELOOSE = R++
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])'

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++
src[LONETILDE] = '(?:~>?)'

var TILDETRIM = R++
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+'
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')
var tildeTrimReplace = '$1~'

var TILDE = R++
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'
var TILDELOOSE = R++
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++
src[LONECARET] = '(?:\\^)'

var CARETTRIM = R++
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+'
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')
var caretTrimReplace = '$1^'

var CARET = R++
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'
var CARETLOOSE = R++
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$'
var COMPARATOR = R++
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')
var comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$'

var HYPHENRANGELOOSE = R++
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$'

// Star ranges basically just allow anything at all.
var STAR = R++
src[STAR] = '(<|>)?=?\\s*\\*'

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i])
  if (!re[i]) {
    re[i] = new RegExp(src[i])
  }
}

exports.parse = parse
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[LOOSE] : re[FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid
function valid (version, options) {
  var v = parse(version, options)
  return v ? v.version : null
}

exports.clean = clean
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}

exports.SemVer = SemVer

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options)
  this.options = options
  this.loose = !!options.loose

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version

  // these are actually numbers
  this.major = +m[1]
  this.minor = +m[2]
  this.patch = +m[3]

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = []
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    })
  }

  this.build = m[5] ? m[5].split('.') : []
  this.format()
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.')
  }
  return this.version
}

SemVer.prototype.toString = function () {
  return this.version
}

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other)
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return this.compareMain(other) || this.comparePre(other)
}

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
}

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0
  do {
    var a = this.prerelease[i]
    var b = other.prerelease[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor = 0
      this.major++
      this.inc('pre', identifier)
      break
    case 'preminor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor++
      this.inc('pre', identifier)
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0
      this.inc('patch', identifier)
      this.inc('pre', identifier)
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier)
      }
      this.inc('pre', identifier)
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++
      }
      this.minor = 0
      this.patch = 0
      this.prerelease = []
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++
      }
      this.patch = 0
      this.prerelease = []
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++
      }
      this.prerelease = []
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0]
      } else {
        var i = this.prerelease.length
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++
            i = -2
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0)
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0]
          }
        } else {
          this.prerelease = [identifier, 0]
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format()
  this.raw = this.version
  return this
}

exports.inc = inc
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose
    loose = undefined
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1)
    var v2 = parse(version2)
    var prefix = ''
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre'
      var defaultResult = 'prerelease'
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers

var numeric = /^[0-9]+$/
function compareIdentifiers (a, b) {
  var anum = numeric.test(a)
  var bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.rcompare = rcompare
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compare(a, b, loose)
  })
}

exports.rsort = rsort
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.rcompare(a, b, loose)
  })
}

exports.gt = gt
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options)
  this.options = options
  this.loose = !!options.loose
  this.parse(comp)

  if (this.semver === ANY) {
    this.value = ''
  } else {
    this.value = this.operator + this.semver.version
  }

  debug('comp', this)
}

var ANY = {}
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var m = comp.match(r)

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1]
  if (this.operator === '=') {
    this.operator = ''
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY
  } else {
    this.semver = new SemVer(m[2], this.options.loose)
  }
}

Comparator.prototype.toString = function () {
  return this.value
}

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose)

  if (this.semver === ANY) {
    return true
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  return cmp(version, this.operator, this.semver, this.options)
}

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  var rangeTmp

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options)
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options)
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>')
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<')
  var sameSemVer = this.semver.version === comp.semver.version
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=')
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'))
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'))

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
}

exports.Range = Range
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options
  this.loose = !!options.loose
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  })

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format()
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim()
  return this.range
}

Range.prototype.toString = function () {
  return this.range
}

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose
  range = range.trim()
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]
  range = range.replace(hr, hyphenReplace)
  debug('hyphen replace', range)
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)
  debug('comparator trim', range, re[COMPARATORTRIM])

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace)

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace)

  // normalize spaces
  range = range.split(/\s+/).join(' ')

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/)
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    })
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this)

  return set
}

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return thisComparators.every(function (thisComparator) {
      return range.set.some(function (rangeComparators) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options)
        })
      })
    })
  })
}

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[TILDELOOSE] : re[TILDE]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0'
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0'
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options)
  var r = options.loose ? re[CARETLOOSE] : re[CARET]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0'
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0'
      }
    }

    debug('caret return', ret)
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim()
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    var xM = isX(M)
    var xm = xM || isX(m)
    var xp = xm || isX(p)
    var anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      ret = gtlt + M + '.' + m + '.' + p
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '')
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0'
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0'
  } else {
    from = '>=' + from
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0'
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0'
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
  } else {
    to = '<=' + to
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
}

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies
function satisfies (version, range, options) {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying
function maxSatisfying (versions, range, options) {
  var max = null
  var maxSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}

exports.minSatisfying = minSatisfying
function minSatisfying (versions, range, options) {
  var min = null
  var minSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}

exports.minVersion = minVersion
function minVersion (range, loose) {
  range = new Range(range, loose)

  var minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    })
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside
function outside (version, range, hilo, options) {
  version = new SemVer(version, options)
  range = new Range(range, options)

  var gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    var high = null
    var low = null

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease
function prerelease (version, options) {
  var parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects
function intersects (r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce
function coerce (version) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  var match = version.match(re[COERCE])

  if (match == null) {
    return null
  }

  return parse(match[1] +
    '.' + (match[2] || '0') +
    '.' + (match[3] || '0'))
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "./node_modules/sha.js/index.js":
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__("./node_modules/sha.js/sha.js")
exports.sha1 = __webpack_require__("./node_modules/sha.js/sha1.js")
exports.sha224 = __webpack_require__("./node_modules/sha.js/sha224.js")
exports.sha256 = __webpack_require__("./node_modules/sha.js/sha256.js")
exports.sha384 = __webpack_require__("./node_modules/sha.js/sha384.js")
exports.sha512 = __webpack_require__("./node_modules/sha.js/sha512.js")


/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Sha256 = __webpack_require__("./node_modules/sha.js/sha256.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var SHA512 = __webpack_require__("./node_modules/sha.js/sha512.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__("./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__("./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__("./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__("./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__("./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__("./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__("./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/tv4/tv4.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
Author: Geraint Luff and others
Year: 2013

This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
*/
(function (global, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(this, function () {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!Object.keys) {
	Object.keys = (function () {
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = [
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
			],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [];

			for (var prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (var i=0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!Object.create) {
	Object.create = (function(){
		function F(){}

		return function(o){
			if (arguments.length !== 1) {
				throw new Error('Object.create implementation only accepts one parameter.');
			}
			F.prototype = o;
			return new F();
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if(!Array.isArray) {
	Array.isArray = function (vArg) {
		return Object.prototype.toString.call(vArg) === "[object Array]";
	};
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
		if (this === null) {
			throw new TypeError();
		}
		var t = Object(this);
		var len = t.length >>> 0;

		if (len === 0) {
			return -1;
		}
		var n = 0;
		if (arguments.length > 1) {
			n = Number(arguments[1]);
			if (n !== n) { // shortcut for verifying if it's NaN
				n = 0;
			} else if (n !== 0 && n !== Infinity && n !== -Infinity) {
				n = (n > 0 || -1) * Math.floor(Math.abs(n));
			}
		}
		if (n >= len) {
			return -1;
		}
		var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
		for (; k < len; k++) {
			if (k in t && t[k] === searchElement) {
				return k;
			}
		}
		return -1;
	};
}

// Grungey Object.isFrozen hack
if (!Object.isFrozen) {
	Object.isFrozen = function (obj) {
		var key = "tv4_test_frozen_key";
		while (obj.hasOwnProperty(key)) {
			key += Math.random();
		}
		try {
			obj[key] = true;
			delete obj[key];
			return false;
		} catch (e) {
			return true;
		}
	};
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
	"+": true,
	"#": true,
	".": true,
	"/": true,
	";": true,
	"?": true,
	"&": true
};
var uriTemplateSuffices = {
	"*": true
};

function notReallyPercentEncode(string) {
	return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
		return "%" + doubleEncoded.substring(3);
	});
}

function uriTemplateSubstitution(spec) {
	var modifier = "";
	if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
		modifier = spec.charAt(0);
		spec = spec.substring(1);
	}
	var separator = "";
	var prefix = "";
	var shouldEscape = true;
	var showVariables = false;
	var trimEmptyString = false;
	if (modifier === '+') {
		shouldEscape = false;
	} else if (modifier === ".") {
		prefix = ".";
		separator = ".";
	} else if (modifier === "/") {
		prefix = "/";
		separator = "/";
	} else if (modifier === '#') {
		prefix = "#";
		shouldEscape = false;
	} else if (modifier === ';') {
		prefix = ";";
		separator = ";";
		showVariables = true;
		trimEmptyString = true;
	} else if (modifier === '?') {
		prefix = "?";
		separator = "&";
		showVariables = true;
	} else if (modifier === '&') {
		prefix = "&";
		separator = "&";
		showVariables = true;
	}

	var varNames = [];
	var varList = spec.split(",");
	var varSpecs = [];
	var varSpecMap = {};
	for (var i = 0; i < varList.length; i++) {
		var varName = varList[i];
		var truncate = null;
		if (varName.indexOf(":") !== -1) {
			var parts = varName.split(":");
			varName = parts[0];
			truncate = parseInt(parts[1], 10);
		}
		var suffices = {};
		while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
			suffices[varName.charAt(varName.length - 1)] = true;
			varName = varName.substring(0, varName.length - 1);
		}
		var varSpec = {
			truncate: truncate,
			name: varName,
			suffices: suffices
		};
		varSpecs.push(varSpec);
		varSpecMap[varName] = varSpec;
		varNames.push(varName);
	}
	var subFunction = function (valueFunction) {
		var result = "";
		var startIndex = 0;
		for (var i = 0; i < varSpecs.length; i++) {
			var varSpec = varSpecs[i];
			var value = valueFunction(varSpec.name);
			if (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === 'object' && Object.keys(value).length === 0)) {
				startIndex++;
				continue;
			}
			if (i === startIndex) {
				result += prefix;
			} else {
				result += (separator || ",");
			}
			if (Array.isArray(value)) {
				if (showVariables) {
					result += varSpec.name + "=";
				}
				for (var j = 0; j < value.length; j++) {
					if (j > 0) {
						result += varSpec.suffices['*'] ? (separator || ",") : ",";
						if (varSpec.suffices['*'] && showVariables) {
							result += varSpec.name + "=";
						}
					}
					result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
				}
			} else if (typeof value === "object") {
				if (showVariables && !varSpec.suffices['*']) {
					result += varSpec.name + "=";
				}
				var first = true;
				for (var key in value) {
					if (!first) {
						result += varSpec.suffices['*'] ? (separator || ",") : ",";
					}
					first = false;
					result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
					result += varSpec.suffices['*'] ? '=' : ",";
					result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
				}
			} else {
				if (showVariables) {
					result += varSpec.name;
					if (!trimEmptyString || value !== "") {
						result += "=";
					}
				}
				if (varSpec.truncate != null) {
					value = value.substring(0, varSpec.truncate);
				}
				result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21"): notReallyPercentEncode(value);
			}
		}
		return result;
	};
	subFunction.varNames = varNames;
	return {
		prefix: prefix,
		substitution: subFunction
	};
}

function UriTemplate(template) {
	if (!(this instanceof UriTemplate)) {
		return new UriTemplate(template);
	}
	var parts = template.split("{");
	var textParts = [parts.shift()];
	var prefixes = [];
	var substitutions = [];
	var varNames = [];
	while (parts.length > 0) {
		var part = parts.shift();
		var spec = part.split("}")[0];
		var remainder = part.substring(spec.length + 1);
		var funcs = uriTemplateSubstitution(spec);
		substitutions.push(funcs.substitution);
		prefixes.push(funcs.prefix);
		textParts.push(remainder);
		varNames = varNames.concat(funcs.substitution.varNames);
	}
	this.fill = function (valueFunction) {
		var result = textParts[0];
		for (var i = 0; i < substitutions.length; i++) {
			var substitution = substitutions[i];
			result += substitution(valueFunction);
			result += textParts[i + 1];
		}
		return result;
	};
	this.varNames = varNames;
	this.template = template;
}
UriTemplate.prototype = {
	toString: function () {
		return this.template;
	},
	fillFromObject: function (obj) {
		return this.fill(function (varName) {
			return obj[varName];
		});
	}
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
	this.missing = [];
	this.missingMap = {};
	this.formatValidators = parent ? Object.create(parent.formatValidators) : {};
	this.schemas = parent ? Object.create(parent.schemas) : {};
	this.collectMultiple = collectMultiple;
	this.errors = [];
	this.handleError = collectMultiple ? this.collectError : this.returnError;
	if (checkRecursive) {
		this.checkRecursive = true;
		this.scanned = [];
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
		this.scannedFrozenValidationErrors = [];
		this.validatedSchemasKey = 'tv4_validation_id';
		this.validationErrorsKey = 'tv4_validation_errors_id';
	}
	if (trackUnknownProperties) {
		this.trackUnknownProperties = true;
		this.knownPropertyPaths = {};
		this.unknownPropertyPaths = {};
	}
	this.errorReporter = errorReporter || defaultErrorReporter('en');
	if (typeof this.errorReporter === 'string') {
		throw new Error('debug');
	}
	this.definedKeywords = {};
	if (parent) {
		for (var key in parent.definedKeywords) {
			this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
		}
	}
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
	this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
	this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
	var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
	error.message = this.errorReporter(error, data, schema);
	return error;
};
ValidatorContext.prototype.returnError = function (error) {
	return error;
};
ValidatorContext.prototype.collectError = function (error) {
	if (error) {
		this.errors.push(error);
	}
	return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
	for (var i = startIndex; i < this.errors.length; i++) {
		this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
	}
	return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
	for (var unknownPath in this.unknownPropertyPaths) {
		var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, "", null, data, schema);
		var result = this.handleError(error);
		if (result) {
			return result;
		}
	}
	return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
	if (typeof format === 'object') {
		for (var key in format) {
			this.addFormat(key, format[key]);
		}
		return this;
	}
	this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
	if (schema['$ref'] !== undefined) {
		urlHistory = urlHistory || {};
		if (urlHistory[schema['$ref']]) {
			return this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '', null, undefined, schema);
		}
		urlHistory[schema['$ref']] = true;
		schema = this.getSchema(schema['$ref'], urlHistory);
	}
	return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
	var schema;
	if (this.schemas[url] !== undefined) {
		schema = this.schemas[url];
		return this.resolveRefs(schema, urlHistory);
	}
	var baseUrl = url;
	var fragment = "";
	if (url.indexOf('#') !== -1) {
		fragment = url.substring(url.indexOf("#") + 1);
		baseUrl = url.substring(0, url.indexOf("#"));
	}
	if (typeof this.schemas[baseUrl] === 'object') {
		schema = this.schemas[baseUrl];
		var pointerPath = decodeURIComponent(fragment);
		if (pointerPath === "") {
			return this.resolveRefs(schema, urlHistory);
		} else if (pointerPath.charAt(0) !== "/") {
			return undefined;
		}
		var parts = pointerPath.split("/").slice(1);
		for (var i = 0; i < parts.length; i++) {
			var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
			if (schema[component] === undefined) {
				schema = undefined;
				break;
			}
			schema = schema[component];
		}
		if (schema !== undefined) {
			return this.resolveRefs(schema, urlHistory);
		}
	}
	if (this.missing[baseUrl] === undefined) {
		this.missing.push(baseUrl);
		this.missing[baseUrl] = baseUrl;
		this.missingMap[baseUrl] = baseUrl;
	}
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
	if (Array.isArray(schema)) {
		for (var i = 0; i < schema.length; i++) {
			this.searchSchemas(schema[i], url);
		}
	} else if (schema && typeof schema === "object") {
		if (typeof schema.id === "string") {
			if (isTrustedUrl(url, schema.id)) {
				if (this.schemas[schema.id] === undefined) {
					this.schemas[schema.id] = schema;
				}
			}
		}
		for (var key in schema) {
			if (key !== "enum") {
				if (typeof schema[key] === "object") {
					this.searchSchemas(schema[key], url);
				} else if (key === "$ref") {
					var uri = getDocumentUri(schema[key]);
					if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
						this.missingMap[uri] = uri;
					}
				}
			}
		}
	}
};
ValidatorContext.prototype.addSchema = function (url, schema) {
	//overload
	if (typeof url !== 'string' || typeof schema === 'undefined') {
		if (typeof url === 'object' && typeof url.id === 'string') {
			schema = url;
			url = schema.id;
		}
		else {
			return;
		}
	}
	if (url === getDocumentUri(url) + "#") {
		// Remove empty fragment
		url = getDocumentUri(url);
	}
	this.schemas[url] = schema;
	delete this.missingMap[url];
	normSchema(schema, url);
	this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
	var map = {};
	for (var key in this.schemas) {
		map[key] = this.schemas[key];
	}
	return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
	var list = [];
	for (var key in this.schemas) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
	var list = [];
	for (var key in this.missingMap) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.dropSchemas = function () {
	this.schemas = {};
	this.reset();
};
ValidatorContext.prototype.reset = function () {
	this.missing = [];
	this.missingMap = {};
	this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
	var topLevel;
	schema = this.resolveRefs(schema);
	if (!schema) {
		return null;
	} else if (schema instanceof ValidationError) {
		this.errors.push(schema);
		return schema;
	}

	var startErrorCount = this.errors.length;
	var frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;
	if (this.checkRecursive && data && typeof data === 'object') {
		topLevel = !this.scanned.length;
		if (data[this.validatedSchemasKey]) {
			var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
			if (schemaIndex !== -1) {
				this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
				return null;
			}
		}
		if (Object.isFrozen(data)) {
			frozenIndex = this.scannedFrozen.indexOf(data);
			if (frozenIndex !== -1) {
				var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
				if (frozenSchemaIndex !== -1) {
					this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
					return null;
				}
			}
		}
		this.scanned.push(data);
		if (Object.isFrozen(data)) {
			if (frozenIndex === -1) {
				frozenIndex = this.scannedFrozen.length;
				this.scannedFrozen.push(data);
				this.scannedFrozenSchemas.push([]);
			}
			scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
			this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
			this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
		} else {
			if (!data[this.validatedSchemasKey]) {
				try {
					Object.defineProperty(data, this.validatedSchemasKey, {
						value: [],
						configurable: true
					});
					Object.defineProperty(data, this.validationErrorsKey, {
						value: [],
						configurable: true
					});
				} catch (e) {
					//IE 7/8 workaround
					data[this.validatedSchemasKey] = [];
					data[this.validationErrorsKey] = [];
				}
			}
			scannedSchemasIndex = data[this.validatedSchemasKey].length;
			data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
			data[this.validationErrorsKey][scannedSchemasIndex] = [];
		}
	}

	var errorCount = this.errors.length;
	var error = this.validateBasic(data, schema, dataPointerPath)
		|| this.validateNumeric(data, schema, dataPointerPath)
		|| this.validateString(data, schema, dataPointerPath)
		|| this.validateArray(data, schema, dataPointerPath)
		|| this.validateObject(data, schema, dataPointerPath)
		|| this.validateCombinations(data, schema, dataPointerPath)
		|| this.validateHypermedia(data, schema, dataPointerPath)
		|| this.validateFormat(data, schema, dataPointerPath)
		|| this.validateDefinedKeywords(data, schema, dataPointerPath)
		|| null;

	if (topLevel) {
		while (this.scanned.length) {
			var item = this.scanned.pop();
			delete item[this.validatedSchemasKey];
		}
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
	}

	if (error || errorCount !== this.errors.length) {
		while ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {
			var dataPart = (dataPathParts && dataPathParts.length) ? "" + dataPathParts.pop() : null;
			var schemaPart = (schemaPathParts && schemaPathParts.length) ? "" + schemaPathParts.pop() : null;
			if (error) {
				error = error.prefixWith(dataPart, schemaPart);
			}
			this.prefixErrors(errorCount, dataPart, schemaPart);
		}
	}

	if (scannedFrozenSchemaIndex !== null) {
		this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
	} else if (scannedSchemasIndex !== null) {
		data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
	}

	return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
	if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
		return null;
	}
	var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
	if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}, '', '/format', null, data, schema);
	} else if (errorMessage && typeof errorMessage === 'object') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || "?"}, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
	}
	return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
	for (var key in this.definedKeywords) {
		if (typeof schema[key] === 'undefined') {
			continue;
		}
		var validationFunctions = this.definedKeywords[key];
		for (var i = 0; i < validationFunctions.length; i++) {
			var func = validationFunctions[i];
			var result = func(data, schema[key], schema, dataPointerPath);
			if (typeof result === 'string' || typeof result === 'number') {
				return this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}, '', '', null, data, schema).prefixWith(null, key);
			} else if (result && typeof result === 'object') {
				var code = result.code;
				if (typeof code === 'string') {
					if (!ErrorCodes[code]) {
						throw new Error('Undefined error code (use defineError): ' + code);
					}
					code = ErrorCodes[code];
				} else if (typeof code !== 'number') {
					code = ErrorCodes.KEYWORD_CUSTOM;
				}
				var messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || "?"};
				var schemaPath = result.schemaPath || ("/" + key.replace(/~/g, '~0').replace(/\//g, '~1'));
				return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
			}
		}
	}
	return null;
};

function recursiveCompare(A, B) {
	if (A === B) {
		return true;
	}
	if (A && B && typeof A === "object" && typeof B === "object") {
		if (Array.isArray(A) !== Array.isArray(B)) {
			return false;
		} else if (Array.isArray(A)) {
			if (A.length !== B.length) {
				return false;
			}
			for (var i = 0; i < A.length; i++) {
				if (!recursiveCompare(A[i], B[i])) {
					return false;
				}
			}
		} else {
			var key;
			for (key in A) {
				if (B[key] === undefined && A[key] !== undefined) {
					return false;
				}
			}
			for (key in B) {
				if (A[key] === undefined && B[key] !== undefined) {
					return false;
				}
			}
			for (key in A) {
				if (!recursiveCompare(A[key], B[key])) {
					return false;
				}
			}
		}
		return true;
	}
	return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
	var error;
	if (error = this.validateType(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	if (error = this.validateEnum(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
	if (schema.type === undefined) {
		return null;
	}
	var dataType = typeof data;
	if (data === null) {
		dataType = "null";
	} else if (Array.isArray(data)) {
		dataType = "array";
	}
	var allowedTypes = schema.type;
	if (!Array.isArray(allowedTypes)) {
		allowedTypes = [allowedTypes];
	}

	for (var i = 0; i < allowedTypes.length; i++) {
		var type = allowedTypes[i];
		if (type === dataType || (type === "integer" && dataType === "number" && (data % 1 === 0))) {
			return null;
		}
	}
	return this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join("/")}, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
	if (schema["enum"] === undefined) {
		return null;
	}
	for (var i = 0; i < schema["enum"].length; i++) {
		var enumVal = schema["enum"][i];
		if (recursiveCompare(data, enumVal)) {
			return null;
		}
	}
	return this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data}, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
	return this.validateMultipleOf(data, schema, dataPointerPath)
		|| this.validateMinMax(data, schema, dataPointerPath)
		|| this.validateNaN(data, schema, dataPointerPath)
		|| null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
	var multipleOf = schema.multipleOf || schema.divisibleBy;
	if (multipleOf === undefined) {
		return null;
	}
	if (typeof data === "number") {
		var remainder = (data/multipleOf)%1;
		if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
			return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf}, '', '', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
	if (typeof data !== "number") {
		return null;
	}
	if (schema.minimum !== undefined) {
		if (data < schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}, '', '/minimum', null, data, schema);
		}
		if (schema.exclusiveMinimum && data === schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}, '', '/exclusiveMinimum', null, data, schema);
		}
	}
	if (schema.maximum !== undefined) {
		if (data > schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}, '', '/maximum', null, data, schema);
		}
		if (schema.exclusiveMaximum && data === schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}, '', '/exclusiveMaximum', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
	if (typeof data !== "number") {
		return null;
	}
	if (isNaN(data) === true || data === Infinity || data === -Infinity) {
		return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, {value: data}, '', '/type', null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
	return this.validateStringLength(data, schema, dataPointerPath)
		|| this.validateStringPattern(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
	if (typeof data !== "string") {
		return null;
	}
	if (schema.minLength !== undefined) {
		if (data.length < schema.minLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}, '', '/minLength', null, data, schema);
		}
	}
	if (schema.maxLength !== undefined) {
		if (data.length > schema.maxLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}, '', '/maxLength', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
	if (typeof data !== "string" || (typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp))) {
		return null;
	}
	var regexp;
	if (schema.pattern instanceof RegExp) {
	  regexp = schema.pattern;
	}
	else {
	  var body, flags = '';
	  // Check for regular expression literals
	  // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
	  var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
	  if (literal) {
	    body = literal[1];
	    flags = literal[2];
	  }
	  else {
	    body = schema.pattern;
	  }
	  regexp = new RegExp(body, flags);
	}
	if (!regexp.test(data)) {
		return this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}, '', '/pattern', null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
	if (!Array.isArray(data)) {
		return null;
	}
	return this.validateArrayLength(data, schema, dataPointerPath)
		|| this.validateArrayUniqueItems(data, schema, dataPointerPath)
		|| this.validateArrayItems(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
	var error;
	if (schema.minItems !== undefined) {
		if (data.length < schema.minItems) {
			error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems}, '', '/minItems', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxItems !== undefined) {
		if (data.length > schema.maxItems) {
			error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems}, '', '/maxItems', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
	if (schema.uniqueItems) {
		for (var i = 0; i < data.length; i++) {
			for (var j = i + 1; j < data.length; j++) {
				if (recursiveCompare(data[i], data[j])) {
					var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j}, '', '/uniqueItems', null, data, schema);
					if (this.handleError(error)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
	if (schema.items === undefined) {
		return null;
	}
	var error, i;
	if (Array.isArray(schema.items)) {
		for (i = 0; i < data.length; i++) {
			if (i < schema.items.length) {
				if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
					return error;
				}
			} else if (schema.additionalItems !== undefined) {
				if (typeof schema.additionalItems === "boolean") {
					if (!schema.additionalItems) {
						error = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema));
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
					return error;
				}
			}
		}
	} else {
		for (i = 0; i < data.length; i++) {
			if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
	if (typeof data !== "object" || data === null || Array.isArray(data)) {
		return null;
	}
	return this.validateObjectMinMaxProperties(data, schema, dataPointerPath)
		|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)
		|| this.validateObjectProperties(data, schema, dataPointerPath)
		|| this.validateObjectDependencies(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
	var keys = Object.keys(data);
	var error;
	if (schema.minProperties !== undefined) {
		if (keys.length < schema.minProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}, '', '/minProperties', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxProperties !== undefined) {
		if (keys.length > schema.maxProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}, '', '/maxProperties', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
	if (schema.required !== undefined) {
		for (var i = 0; i < schema.required.length; i++) {
			var key = schema.required[i];
			if (data[key] === undefined) {
				var error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}, '', '/required/' + i, null, data, schema);
				if (this.handleError(error)) {
					return error;
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
	var error;
	for (var key in data) {
		var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
		var foundMatch = false;
		if (schema.properties !== undefined && schema.properties[key] !== undefined) {
			foundMatch = true;
			if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
				return error;
			}
		}
		if (schema.patternProperties !== undefined) {
			for (var patternKey in schema.patternProperties) {
				var regexp = new RegExp(patternKey);
				if (regexp.test(key)) {
					foundMatch = true;
					if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
						return error;
					}
				}
			}
		}
		if (!foundMatch) {
			if (schema.additionalProperties !== undefined) {
				if (this.trackUnknownProperties) {
					this.knownPropertyPaths[keyPointerPath] = true;
					delete this.unknownPropertyPaths[keyPointerPath];
				}
				if (typeof schema.additionalProperties === "boolean") {
					if (!schema.additionalProperties) {
						error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {key: key}, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
						if (this.handleError(error)) {
							return error;
						}
					}
				} else {
					if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
						return error;
					}
				}
			} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
				this.unknownPropertyPaths[keyPointerPath] = true;
			}
		} else if (this.trackUnknownProperties) {
			this.knownPropertyPaths[keyPointerPath] = true;
			delete this.unknownPropertyPaths[keyPointerPath];
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
	var error;
	if (schema.dependencies !== undefined) {
		for (var depKey in schema.dependencies) {
			if (data[depKey] !== undefined) {
				var dep = schema.dependencies[depKey];
				if (typeof dep === "string") {
					if (data[dep] === undefined) {
						error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (Array.isArray(dep)) {
					for (var i = 0; i < dep.length; i++) {
						var requiredKey = dep[i];
						if (data[requiredKey] === undefined) {
							error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
							if (this.handleError(error)) {
								return error;
							}
						}
					}
				} else {
					if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
	return this.validateAllOf(data, schema, dataPointerPath)
		|| this.validateAnyOf(data, schema, dataPointerPath)
		|| this.validateOneOf(data, schema, dataPointerPath)
		|| this.validateNot(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
	if (schema.allOf === undefined) {
		return null;
	}
	var error;
	for (var i = 0; i < schema.allOf.length; i++) {
		var subSchema = schema.allOf[i];
		if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
			return error;
		}
	}
	return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
	if (schema.anyOf === undefined) {
		return null;
	}
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	var errorAtEnd = true;
	for (var i = 0; i < schema.anyOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.anyOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			this.errors = this.errors.slice(0, startErrorCount);

			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
				// We need to continue looping so we catch all the property definitions, but we don't want to return an error
				errorAtEnd = false;
				continue;
			}

			return null;
		}
		if (error) {
			errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (errorAtEnd) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
	}
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
	if (schema.oneOf === undefined) {
		return null;
	}
	var validIndex = null;
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	for (var i = 0; i < schema.oneOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.oneOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			if (validIndex === null) {
				validIndex = i;
			} else {
				this.errors = this.errors.slice(0, startErrorCount);
				return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, "", "/oneOf", null, data, schema);
			}
			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
			}
		} else if (error) {
			errors.push(error);
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (validIndex === null) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
	} else {
		this.errors = this.errors.slice(0, startErrorCount);
	}
	return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
	if (schema.not === undefined) {
		return null;
	}
	var oldErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
		this.unknownPropertyPaths = {};
		this.knownPropertyPaths = {};
	}
	var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
	var notErrors = this.errors.slice(oldErrorCount);
	this.errors = this.errors.slice(0, oldErrorCount);
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (error === null && notErrors.length === 0) {
		return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
	if (!schema.links) {
		return null;
	}
	var error;
	for (var i = 0; i < schema.links.length; i++) {
		var ldo = schema.links[i];
		if (ldo.rel === "describedby") {
			var template = new UriTemplate(ldo.href);
			var allPresent = true;
			for (var j = 0; j < template.varNames.length; j++) {
				if (!(template.varNames[j] in data)) {
					allPresent = false;
					break;
				}
			}
			if (allPresent) {
				var schemaUrl = template.fillFromObject(data);
				var subSchema = {"$ref": schemaUrl};
				if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
					return error;
				}
			}
		}
	}
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
	var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
	// authority = '//' + user + ':' + pass '@' + hostname + ':' port
	return (m ? {
		href     : m[0] || '',
		protocol : m[1] || '',
		authority: m[2] || '',
		host     : m[3] || '',
		hostname : m[4] || '',
		port     : m[5] || '',
		pathname : m[6] || '',
		search   : m[7] || '',
		hash     : m[8] || ''
	} : null);
}

function resolveUrl(base, href) {// RFC 3986

	function removeDotSegments(input) {
		var output = [];
		input.replace(/^(\.\.?(\/|$))+/, '')
			.replace(/\/(\.(\/|$))+/g, '/')
			.replace(/\/\.\.$/, '/../')
			.replace(/\/?[^\/]*/g, function (p) {
				if (p === '/..') {
					output.pop();
				} else {
					output.push(p);
				}
		});
		return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
	}

	href = parseURI(href || '');
	base = parseURI(base || '');

	return !href || !base ? null : (href.protocol || base.protocol) +
		(href.protocol || href.authority ? href.authority : base.authority) +
		removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
		(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
		href.hash;
}

function getDocumentUri(uri) {
	return uri.split('#')[0];
}
function normSchema(schema, baseUri) {
	if (schema && typeof schema === "object") {
		if (baseUri === undefined) {
			baseUri = schema.id;
		} else if (typeof schema.id === "string") {
			baseUri = resolveUrl(baseUri, schema.id);
			schema.id = baseUri;
		}
		if (Array.isArray(schema)) {
			for (var i = 0; i < schema.length; i++) {
				normSchema(schema[i], baseUri);
			}
		} else {
			if (typeof schema['$ref'] === "string") {
				schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
			}
			for (var key in schema) {
				if (key !== "enum") {
					normSchema(schema[key], baseUri);
				}
			}
		}
	}
}

function defaultErrorReporter(language) {
	language = language || 'en';

	var errorMessages = languages[language];

	return function (error) {
		var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
		if (typeof messageTemplate !== 'string') {
			return "Unknown error code " + error.code + ": " + JSON.stringify(error.messageParams);
		}
		var messageParams = error.params;
		// Adapted from Crockford's supplant()
		return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
			var subValue = messageParams[varName];
			return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
		});
	};
}

var ErrorCodes = {
	INVALID_TYPE: 0,
	ENUM_MISMATCH: 1,
	ANY_OF_MISSING: 10,
	ONE_OF_MISSING: 11,
	ONE_OF_MULTIPLE: 12,
	NOT_PASSED: 13,
	// Numeric errors
	NUMBER_MULTIPLE_OF: 100,
	NUMBER_MINIMUM: 101,
	NUMBER_MINIMUM_EXCLUSIVE: 102,
	NUMBER_MAXIMUM: 103,
	NUMBER_MAXIMUM_EXCLUSIVE: 104,
	NUMBER_NOT_A_NUMBER: 105,
	// String errors
	STRING_LENGTH_SHORT: 200,
	STRING_LENGTH_LONG: 201,
	STRING_PATTERN: 202,
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: 300,
	OBJECT_PROPERTIES_MAXIMUM: 301,
	OBJECT_REQUIRED: 302,
	OBJECT_ADDITIONAL_PROPERTIES: 303,
	OBJECT_DEPENDENCY_KEY: 304,
	// Array errors
	ARRAY_LENGTH_SHORT: 400,
	ARRAY_LENGTH_LONG: 401,
	ARRAY_UNIQUE: 402,
	ARRAY_ADDITIONAL_ITEMS: 403,
	// Custom/user-defined errors
	FORMAT_CUSTOM: 500,
	KEYWORD_CUSTOM: 501,
	// Schema structure
	CIRCULAR_REFERENCE: 600,
	// Non-standard validation options
	UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
	ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
	INVALID_TYPE: "Invalid type: {type} (expected {expected})",
	ENUM_MISMATCH: "No enum match for: {value}",
	ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
	ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
	ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
	NOT_PASSED: "Data matches schema from \"not\"",
	// Numeric errors
	NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
	NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
	NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
	NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
	NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
	NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
	// String errors
	STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
	STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
	STRING_PATTERN: "String does not match pattern: {pattern}",
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
	OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
	OBJECT_REQUIRED: "Missing required property: {key}",
	OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
	OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
	// Array errors
	ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
	ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
	ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
	ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
	// Format errors
	FORMAT_CUSTOM: "Format validation failed ({message})",
	KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
	// Schema structure
	CIRCULAR_REFERENCE: "Circular $refs: {urls}",
	// Non-standard validation options
	UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
	Error.call(this);
	if (code === undefined) {
		throw new Error ("No error code supplied: " + schemaPath);
	}
	this.message = '';
	this.params = params;
	this.code = code;
	this.dataPath = dataPath || "";
	this.schemaPath = schemaPath || "";
	this.subErrors = subErrors || null;

	var err = new Error(this.message);
	this.stack = err.stack || err.stacktrace;
	if (!this.stack) {
		try {
			throw err;
		}
		catch(err) {
			this.stack = err.stack || err.stacktrace;
		}
	}
}
ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
	if (dataPrefix !== null) {
		dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.dataPath = "/" + dataPrefix + this.dataPath;
	}
	if (schemaPrefix !== null) {
		schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.schemaPath = "/" + schemaPrefix + this.schemaPath;
	}
	if (this.subErrors !== null) {
		for (var i = 0; i < this.subErrors.length; i++) {
			this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
		}
	}
	return this;
};

function isTrustedUrl(baseUrl, testUrl) {
	if(testUrl.substring(0, baseUrl.length) === baseUrl){
		var remainder = testUrl.substring(baseUrl.length);
		if ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/")
			|| remainder.charAt(0) === "#"
			|| remainder.charAt(0) === "?") {
			return true;
		}
	}
	return false;
}

var languages = {};
function createApi(language) {
	var globalContext = new ValidatorContext();
	var currentLanguage;
	var customErrorReporter;
	var api = {
		setErrorReporter: function (reporter) {
			if (typeof reporter === 'string') {
				return this.language(reporter);
			}
			customErrorReporter = reporter;
			return true;
		},
		addFormat: function () {
			globalContext.addFormat.apply(globalContext, arguments);
		},
		language: function (code) {
			if (!code) {
				return currentLanguage;
			}
			if (!languages[code]) {
				code = code.split('-')[0]; // fall back to base language
			}
			if (languages[code]) {
				currentLanguage = code;
				return code; // so you can tell if fall-back has happened
			}
			return false;
		},
		addLanguage: function (code, messageMap) {
			var key;
			for (key in ErrorCodes) {
				if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
					messageMap[ErrorCodes[key]] = messageMap[key];
				}
			}
			var rootCode = code.split('-')[0];
			if (!languages[rootCode]) { // use for base language if not yet defined
				languages[code] = messageMap;
				languages[rootCode] = messageMap;
			} else {
				languages[code] = Object.create(languages[rootCode]);
				for (key in messageMap) {
					if (typeof languages[rootCode][key] === 'undefined') {
						languages[rootCode][key] = messageMap[key];
					}
					languages[code][key] = messageMap[key];
				}
			}
			return this;
		},
		freshApi: function (language) {
			var result = createApi();
			if (language) {
				result.language(language);
			}
			return result;
		},
		validate: function (data, schema, checkRecursive, banUnknownProperties) {
			var def = defaultErrorReporter(currentLanguage);
			var errorReporter = customErrorReporter ? function (error, data, schema) {
				return customErrorReporter(error, data, schema) || def(error, data, schema);
			} : def;
			var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			var error = context.validateAll(data, schema, null, null, "");
			if (!error && banUnknownProperties) {
				error = context.banUnknownProperties(data, schema);
			}
			this.error = error;
			this.missing = context.missing;
			this.valid = (error === null);
			return this.valid;
		},
		validateResult: function () {
			var result = {toString: function () {
				return this.valid ? 'valid' : this.error.message;
			}};
			this.validate.apply(result, arguments);
			return result;
		},
		validateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {
			var def = defaultErrorReporter(currentLanguage);
			var errorReporter = customErrorReporter ? function (error, data, schema) {
				return customErrorReporter(error, data, schema) || def(error, data, schema);
			} : def;
			var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			context.validateAll(data, schema, null, null, "");
			if (banUnknownProperties) {
				context.banUnknownProperties(data, schema);
			}
			var result = {toString: function () {
				return this.valid ? 'valid' : this.error.message;
			}};
			result.errors = context.errors;
			result.missing = context.missing;
			result.valid = (result.errors.length === 0);
			return result;
		},
		addSchema: function () {
			return globalContext.addSchema.apply(globalContext, arguments);
		},
		getSchema: function () {
			return globalContext.getSchema.apply(globalContext, arguments);
		},
		getSchemaMap: function () {
			return globalContext.getSchemaMap.apply(globalContext, arguments);
		},
		getSchemaUris: function () {
			return globalContext.getSchemaUris.apply(globalContext, arguments);
		},
		getMissingUris: function () {
			return globalContext.getMissingUris.apply(globalContext, arguments);
		},
		dropSchemas: function () {
			globalContext.dropSchemas.apply(globalContext, arguments);
		},
		defineKeyword: function () {
			globalContext.defineKeyword.apply(globalContext, arguments);
		},
		defineError: function (codeName, codeNumber, defaultMessage) {
			if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
				throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
			}
			if (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {
				throw new Error('Code number must be an integer > 10000');
			}
			if (typeof ErrorCodes[codeName] !== 'undefined') {
				throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
			}
			if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
				throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
			}
			ErrorCodes[codeName] = codeNumber;
			ErrorCodeLookup[codeNumber] = codeName;
			ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
			for (var langCode in languages) {
				var language = languages[langCode];
				if (language[codeName]) {
					language[codeNumber] = language[codeNumber] || language[codeName];
				}
			}
		},
		reset: function () {
			globalContext.reset();
			this.error = null;
			this.missing = [];
			this.valid = true;
		},
		missing: [],
		error: null,
		valid: true,
		normSchema: normSchema,
		resolveUrl: resolveUrl,
		getDocumentUri: getDocumentUri,
		errorCodes: ErrorCodes
	};
	api.language(language || 'en');
	return api;
}

var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;

return tv4; // used by _header.js to globalise.

}));

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vm-browserify/index.js":
/***/ (function(module, exports) {

var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 0:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });