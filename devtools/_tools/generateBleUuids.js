const yaml = require('js-yaml');
const fetch = require('node-fetch');
const fs = require('fs').promises;

const UuidsDefinitionOutputPath = 'src/obniz/ObnizPartsBleUuids.ts';
const BluetoothSigServiceUuidsYamlUrl =
  'https://bitbucket.org/bluetooth-SIG/public/raw/1adacb47983ad0ff8fb2ffb7c4461f03d3d74ab4/assigned_numbers/uuids/service_uuids.yaml';
const BluetoothSigCharUuidsYamlUrl =
  'https://bitbucket.org/bluetooth-SIG/public/raw/1adacb47983ad0ff8fb2ffb7c4461f03d3d74ab4/assigned_numbers/uuids/characteristic_uuids.yaml';

const parseUuid = (type) => (u) => {
  const rawVarName = u.id.split('.').slice(-1)[0];
  return [
    `  /** ${u.name} ${type} (0x${u.uuid.toString(16).toUpperCase()}) */`,
    `  ${rawVarName.replaceAll('-', '_')}: '${u.uuid.toString(16)}',`,
  ];
};
(async () => {
  try {
    const serviceUuidsRes = await fetch(BluetoothSigServiceUuidsYamlUrl);
    if (!serviceUuidsRes.ok) {
      throw new Error(
        `${serviceUuidsRes.status} ${serviceUuidsRes.statusText}`
      );
    }
    const charUuidsRes = await fetch(BluetoothSigCharUuidsYamlUrl);
    if (!charUuidsRes.ok) {
      throw new Error(`${charUuidsRes.status} ${charUuidsRes.statusText}`);
    }

    // { uuids: [{ uuid: number, name: string, id: string, },...] }
    const serviceUuidsData = yaml.load(await serviceUuidsRes.text());
    const charUuidsData = yaml.load(await charUuidsRes.text());

    const contents = [
      '// Generated By devtools/_tools/generateBleUuids.js',
      '',
      'export const ServiceUuids = {',
      ...serviceUuidsData.uuids.flatMap(parseUuid('Service')),
      '} as const;',
      '',
      'export const CharUuids = {',
      ...charUuidsData.uuids.flatMap(parseUuid('Characteristic')),
      '} as const;',
      '',
    ];

    await fs.writeFile(UuidsDefinitionOutputPath, contents.join('\n'));

    console.log(
      `\nðŸŽ‰ Generated ${UuidsDefinitionOutputPath}  by latest Bluetooth SIG's assigned numbers\n`
    );
  } catch (e) {
    console.error(e);
  }
})();
