{"version":3,"sources":["../src/obniz/ObnizComponents.ts"],"names":[],"mappings":"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","file":"ObnizComponents.js","sourcesContent":["import semver = require(\"semver\");\r\nimport ObnizBLE from \"./libs/embeds/ble/ble\";\r\nimport ObnizBLEHci from \"./libs/embeds/bleHci/ble\";\r\nimport Display from \"./libs/embeds/display\";\r\nimport ObnizSwitch from \"./libs/embeds/switch\";\r\n\r\nimport PeripheralAD from \"./libs/io_peripherals/ad\";\r\nimport {DriveType} from \"./libs/io_peripherals/common\";\r\nimport PeripheralDirective from \"./libs/io_peripherals/directive\";\r\nimport PeripheralI2C from \"./libs/io_peripherals/i2c\";\r\nimport PeripheralIO from \"./libs/io_peripherals/io\";\r\nimport PeripheralPWM from \"./libs/io_peripherals/pwm\";\r\nimport PeripheralSPI from \"./libs/io_peripherals/spi\";\r\nimport PeripheralUART from \"./libs/io_peripherals/uart\";\r\nimport LogicAnalyzer from \"./libs/measurements/logicanalyzer\";\r\nimport ObnizMeasure from \"./libs/measurements/measure\";\r\n\r\nimport TCP from \"./libs/protocol/tcp\";\r\n\r\nimport ObnizParts from \"./ObnizParts\";\r\n\r\nimport HW from \"./libs/hw\";\r\n\r\ninterface ObnizComponentsObnizBoard {\r\n\r\n  // onconnect: () => Promise<void>;\r\n  // onclose: () => Promise<void>;\r\n  // wired<K extends keyof WiredNameMap>(name: K, options?: WiredNameOptionsMap[K]): WiredNameMap[K];\r\n  //\r\n  // // connect\r\n  // connectionState: ConnectionState;\r\n  // debugprint: boolean;\r\n  // connect(): void;\r\n  // connectWait(options?: ConnectOptions): Promise<boolean>;\r\n  // close(): void;\r\n  // resetOnDisconnect(reset: boolean): void;\r\n  //\r\n  // // systems\r\n  // sleepSeconds(sec: number): void;\r\n  // sleepMinute(sec: number): void;\r\n  // sleep(date: Date): void;\r\n  // sleepIoTrigger(trigger: boolean): void;\r\n  // pingWait(): Promise<void>;\r\n  //\r\n  // // utils\r\n  // util: any;\r\n  // reset(): void;\r\n  // repeat(callback: () => void): void;\r\n  // wait(time: number): Promise<void>;\r\n  // keepWorkingAtOffline(working: boolean): void;\r\n  // setVccGnd(vcc: number, gnd: number, drive: DriveType): void;\r\n  // isValidIO(io: any): io is PeripheralIO;\r\n\r\n}\r\n\r\nexport default class ObnizComponents extends ObnizParts {\r\n\r\n  public pongObservers: any;\r\n  public _allComponentKeys: any;\r\n\r\n  /* board peripherals */\r\n  public io!: PeripheralDirective;\r\n  public io0?: PeripheralIO;\r\n  public io1?: PeripheralIO;\r\n  public io2?: PeripheralIO;\r\n  public io3?: PeripheralIO;\r\n  public io4?: PeripheralIO;\r\n  public io5?: PeripheralIO;\r\n  public io6?: PeripheralIO;\r\n  public io7?: PeripheralIO;\r\n  public io8?: PeripheralIO;\r\n  public io9?: PeripheralIO;\r\n  public io10?: PeripheralIO;\r\n  public io11?: PeripheralIO;\r\n\r\n  public ad0?: PeripheralAD;\r\n  public ad1?: PeripheralAD;\r\n  public ad2?: PeripheralAD;\r\n  public ad3?: PeripheralAD;\r\n  public ad4?: PeripheralAD;\r\n  public ad5?: PeripheralAD;\r\n  public ad6?: PeripheralAD;\r\n  public ad7?: PeripheralAD;\r\n  public ad8?: PeripheralAD;\r\n  public ad9?: PeripheralAD;\r\n  public ad10?: PeripheralAD;\r\n  public ad11?: PeripheralAD;\r\n\r\n  public pwm0?: PeripheralPWM;\r\n  public pwm1?: PeripheralPWM;\r\n  public pwm2?: PeripheralPWM;\r\n  public pwm3?: PeripheralPWM;\r\n  public pwm4?: PeripheralPWM;\r\n  public pwm5?: PeripheralPWM;\r\n\r\n  public uart0?: PeripheralUART;\r\n  public uart1?: PeripheralUART;\r\n  public spi0?: PeripheralSPI;\r\n  public spi1?: PeripheralSPI;\r\n  public i2c0?: PeripheralI2C;\r\n  public logicAnalyzer?: LogicAnalyzer;\r\n  public measure?: ObnizMeasure;\r\n  public display?: Display;\r\n  public switch?: ObnizSwitch;\r\n  public ble?: ObnizBLE | ObnizBLEHci;\r\n\r\n  constructor(id: any, options?: any) {\r\n    super(id, options);\r\n    this.pongObservers = [];\r\n    this._allComponentKeys = [];\r\n  }\r\n\r\n  public close() {\r\n    super.close();\r\n    if (this.options.reset_obniz_on_ws_disconnection) {\r\n      this._resetComponents();\r\n    }\r\n  }\r\n\r\n  public _callOnConnect() {\r\n    this._prepareComponents();\r\n    super._callOnConnect();\r\n  }\r\n\r\n  public _prepareComponents() {\r\n    if (this._allComponentKeys.length !== 0) {\r\n      return;\r\n    }\r\n\r\n    const hwDefinition: any = HW.getDefinitionFor(this.hw);\r\n    if (!hwDefinition) {\r\n      throw new Error(`unkown hw ${this.hw}`);\r\n    }\r\n\r\n    const hw_peripherals: any = hwDefinition.peripherals;\r\n    const hw_embeds: any = hwDefinition.embeds;\r\n    const hw_protocol: any = hwDefinition.protocol;\r\n\r\n    const shared_map: any = {\r\n      io: PeripheralDirective,\r\n      logicAnalyzer: LogicAnalyzer,\r\n      measure: ObnizMeasure,\r\n    };\r\n\r\n    const peripheral_map: any = {\r\n      io: PeripheralIO,\r\n      ad: PeripheralAD,\r\n      uart: PeripheralUART,\r\n      spi: PeripheralSPI,\r\n      i2c: PeripheralI2C,\r\n      pwm: PeripheralPWM,\r\n    };\r\n\r\n    let ble: any = ObnizBLEHci;\r\n\r\n    // < 3.0.0-beta\r\n    if (semver.lt(this.firmware_ver, \"3.0.0-beta\")) {\r\n      ble = ObnizBLE;\r\n    }\r\n\r\n    const embeds_map: any = {\r\n      display: Display,\r\n      switch: ObnizSwitch,\r\n      ble,\r\n    };\r\n\r\n    const protocol_map: any = {\r\n      tcp: TCP,\r\n    };\r\n\r\n    for (const key in shared_map) {\r\n      const Class: any = shared_map[key];\r\n      (this as any)[key] = new Class(this);\r\n      this._allComponentKeys.push(key);\r\n    }\r\n\r\n    if (hw_peripherals) {\r\n      for (const key in peripheral_map) {\r\n        if (hw_peripherals[key]) {\r\n          const units: any = hw_peripherals[key].units;\r\n          const Class: any = peripheral_map[key];\r\n          for (const unitId in units) {\r\n            const unitIdNumber = parseInt(unitId);\r\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\r\n            this._allComponentKeys.push(key + unitIdNumber);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hw_embeds) {\r\n      for (const key in embeds_map) {\r\n        if (hw_embeds[key]) {\r\n          const Class: any = embeds_map[key];\r\n          (this as any)[key] = new Class(this);\r\n          this._allComponentKeys.push(key);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hw_protocol) {\r\n      for (const key in protocol_map) {\r\n        if (hw_protocol[key]) {\r\n          const units: any = hw_protocol[key].units;\r\n          const Class: any = protocol_map[key];\r\n          for (const unitId in units) {\r\n            const unitIdNumber = parseInt(unitId);\r\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\r\n            this._allComponentKeys.push(key + unitIdNumber);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public _resetComponents() {\r\n    this.print_debug(\"components state resets\");\r\n    for (const key of this._allComponentKeys) {\r\n      (this as any)[key]._reset();\r\n    }\r\n  }\r\n\r\n  public notifyToModule(obj: any) {\r\n    super.notifyToModule(obj);\r\n    for (const key of this._allComponentKeys) {\r\n      if (key === \"logicAnalyzer\") {\r\n        if (obj.hasOwnProperty(\"logic_analyzer\")) {\r\n          (this as any).logicAnalyzer.notified(obj.logic_analyzer);\r\n        }\r\n        continue;\r\n      }\r\n      if (obj.hasOwnProperty(key)) {\r\n        /* because of nullable */\r\n        (this as any)[key].notified(obj[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public handleSystemCommand(wsObj: any) {\r\n    super.handleSystemCommand(wsObj);\r\n    // ping pong\r\n    if (wsObj.pong) {\r\n      for (const callback of this.pongObservers) {\r\n        callback(wsObj);\r\n      }\r\n    }\r\n  }\r\n\r\n  public addPongObserver(callback: any) {\r\n    if (callback) {\r\n      this.pongObservers.push(callback);\r\n    }\r\n  }\r\n\r\n  public removePongObserver(callback: any) {\r\n    if (this.pongObservers.includes(callback)) {\r\n      const index: any = this.pongObservers.indexOf(callback);\r\n      this.pongObservers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  public setVccGnd(vcc: number | null, gnd: number | null, drive: DriveType) {\r\n    if (this.isValidIO(vcc)) {\r\n      if (drive) {\r\n        this.getIO(vcc!).drive(drive);\r\n      }\r\n      this.getIO(vcc!).output(true);\r\n    }\r\n\r\n    if (this.isValidIO(gnd)) {\r\n      if (drive) {\r\n        this.getIO(gnd!).drive(drive);\r\n      }\r\n      this.getIO(gnd!).output(false);\r\n    }\r\n  }\r\n\r\n  public getIO(io: number): PeripheralIO {\r\n    if (!this.isValidIO(io)) {\r\n      throw new Error(\"io \" + io + \" is not valid io\");\r\n    }\r\n    return (this as any)[\"io\" + io];\r\n  }\r\n\r\n  public getAD(io: number): PeripheralAD {\r\n    if (!this.isValidIO(io)) {\r\n      throw new Error(\"ad \" + io + \" is not valid io\");\r\n    }\r\n    return (this as any)[\"ad\" + io];\r\n  }\r\n\r\n  public _getFreePeripheralUnit(peripheral: any): any {\r\n    for (const key of this._allComponentKeys) {\r\n      if (key.indexOf(peripheral) === 0) {\r\n        /* \"io\" for \"io0\" */\r\n        const obj: any = (this as any)[key];\r\n        if (typeof obj === \"object\" && !obj.isUsed()) {\r\n          obj.used = true;\r\n          return obj;\r\n        }\r\n      }\r\n    }\r\n    throw new Error(`No More ${peripheral} Available.`);\r\n  }\r\n\r\n  public getFreePwm(): PeripheralPWM {\r\n    return this._getFreePeripheralUnit(\"pwm\");\r\n  }\r\n\r\n  public getFreeI2C(): PeripheralI2C {\r\n    return this._getFreePeripheralUnit(\"i2c\");\r\n  }\r\n\r\n  public getI2CWithConfig(config: any): PeripheralI2C {\r\n    if (typeof config !== \"object\") {\r\n      throw new Error(\"getI2CWithConfig need config arg\");\r\n    }\r\n    if (config.i2c) {\r\n      return config.i2c;\r\n    }\r\n    const i2c: any = this.getFreeI2C();\r\n    i2c.start(config);\r\n    return i2c;\r\n  }\r\n\r\n  public getFreeSpi(): PeripheralSPI {\r\n    return this._getFreePeripheralUnit(\"spi\");\r\n  }\r\n\r\n  public getSpiWithConfig(config: any): PeripheralSPI {\r\n    if (typeof config !== \"object\") {\r\n      throw new Error(\"getSpiWithConfig need config arg\");\r\n    }\r\n    if (config.spi) {\r\n      return config.spi;\r\n    }\r\n    const spi: any = this.getFreeSpi();\r\n    spi.start(config);\r\n    return spi;\r\n  }\r\n\r\n  public getFreeUart(): PeripheralUART {\r\n    return this._getFreePeripheralUnit(\"uart\");\r\n  }\r\n\r\n  public getFreeTcp() {\r\n    return this._getFreePeripheralUnit(\"tcp\");\r\n  }\r\n}\r\n"]}