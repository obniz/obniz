import WSCommand from "./libs/wscommand";
export default class ObnizConnection {
    isNode: boolean;
    id: any;
    socket: any;
    socket_local: any;
    debugprint: boolean;
    debugprintBinary: boolean;
    debugs: any;
    onConnectCalled: boolean;
    hw: any;
    firmware_ver: any;
    connectionState: "closed" | "connecting" | "connected" | "closing";
    bufferdAmoundWarnBytes: number;
    emitter: any;
    options: any;
    wscommand: any;
    wscommands: any;
    _sendQueueTimer: any;
    _sendQueue: any;
    _waitForLocalConnectReadyTimer: any;
    _connectionRetryCount: number;
    onopen: any;
    onclose: any;
    onconnect: any;
    sendPool: any;
    constructor(id: any, options?: any);
    prompt(filled: any, callback: any): void;
    static get version(): any;
    wsOnOpen(): void;
    wsOnMessage(data: any): void;
    wsOnClose(event: any): void;
    connectWait(option: any): Promise<unknown>;
    _reconnect(): void;
    wsOnError(event: any): void;
    wsOnUnexpectedResponse(req: any, res?: any): void;
    wsconnect(desired_server?: any): void;
    _connectLocal(host: any): void;
    _disconnectLocal(): void;
    clearSocket(socket: any): void;
    connect(): void;
    close(): void;
    _callOnConnect(): void;
    print_debug(str: any): void;
    send(obj: any, options?: any): void;
    _sendRouted(data: any): void;
    _drainQueued(): void;
    notifyToModule(obj: any): void;
    _canConnectToInsecure(): boolean;
    handleWSCommand(wsObj: any): void;
    handleSystemCommand(wsObj: any): void;
    static get WSCommand(): typeof WSCommand;
    binary2Json(binary: any): any;
    warning(msg: any): void;
    error(msg: any): void;
}
