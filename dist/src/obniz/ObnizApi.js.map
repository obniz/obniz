{"version":3,"sources":["../src/obniz/ObnizApi.ts"],"names":[],"mappings":";;;;;AAAA,4DAA+B;AAE/B,aAAa;AACb,4DAAwC,CAAC,yDAAyD;AAElG,MAAM,QAAQ;IAKZ,YAAY,OAAY,EAAE,OAAY;QACpC,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC;QAClB,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG;YACb,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,IAAI;YAC1C,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,kBAAkB;SACzD,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;IACjE,CAAC;IAED,IAAI,UAAU;QAEZ,MAAM,aAAa,GAAQ,iBAAW,CAAC,OAAO,CAAC;QAC/C,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC;IAEM,IAAI,CAAC,IAAS,EAAE,MAAW,EAAE,QAAa;QAC/C,MAAM,GAAG,GAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAErC,kBAAkB;QAClB,qBAAqB;QACrB,wBAAwB;QACxB,kCAAkC;QAClC,IAAI;QAEJ,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC;QAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YAC7B,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;SAC/D;QAED,MAAM,WAAW,GAAQ;YACvB,MAAM,EAAE,MAAM;YACd,OAAO;SACR,CAAC;QACF,IAAI,MAAM,EAAE;YACV,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC3C;QAED,OAAO,oBAAK,CAAC,GAAG,EAAE,WAAW,CAAC;aAC3B,IAAI,CAAE,CAAC,GAAQ,EAAE,EAAE;YAClB,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE;YAClB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAChB;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAG,EAAE;gBACnC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ,CAAC,QAAa;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,QAAQ,CAAC,IAAS,EAAE,QAAa;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,mBAAmB;IAClF,CAAC;CACF;AAED,kBAAe,QAAQ,CAAC","file":"ObnizApi.js","sourcesContent":["import fetch from \"node-fetch\";\r\n\r\n// @ts-ignore\r\nimport packageJson from \"../../package\"; // pakcage.js will be created from package.json on build.\r\n\r\nclass ObnizApi {\r\n  public id: any;\r\n  public options: any;\r\n  public urlBase: any;\r\n\r\n  constructor(obnizId: any, options: any) {\r\n    this.id = obnizId;\r\n    options = options || {};\r\n    this.options = {\r\n      access_token: options.access_token || null,\r\n      obniz_server: options.obniz_server || \"https://obniz.io\",\r\n    };\r\n    this.urlBase = this.options.obniz_server + \"/obniz/\" + this.id;\r\n  }\r\n\r\n  get apiVersion() {\r\n\r\n    const versionString: any = packageJson.version;\r\n    return versionString.split(\".\").shift();\r\n  }\r\n\r\n  public post(path: any, params: any, callback: any) {\r\n    const url: any = this.urlBase + path;\r\n\r\n    // let query = [];\r\n    // query.push(\"XXX\");\r\n    // if(query.length > 0){\r\n    //   url += \"?\" + query.join(\"&\");\r\n    // }\r\n\r\n    const headers: any = {};\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    if (this.options.access_token) {\r\n      headers.authorization = \"Bearer \" + this.options.access_token;\r\n    }\r\n\r\n    const fetchParams: any = {\r\n      method: \"POST\",\r\n      headers,\r\n    };\r\n    if (params) {\r\n      fetchParams.body = JSON.stringify(params);\r\n    }\r\n\r\n    return fetch(url, fetchParams)\r\n      .then ((res: any) => {\r\n        return res.json();\r\n      })\r\n      .then((json: any) => {\r\n        if (typeof callback === \"function\") {\r\n          callback(json);\r\n        }\r\n        return new Promise((resolve: any ) => {\r\n          resolve(json);\r\n        });\r\n      });\r\n  }\r\n\r\n  public getState(callback: any) {\r\n    return this.post(\"/state\", null, callback);\r\n  }\r\n\r\n  public postJson(json: any, callback: any) {\r\n    return this.post(\"/api/\" + this.apiVersion, json, callback); // 1 is api version\r\n  }\r\n}\r\n\r\nexport default ObnizApi;\r\n"]}