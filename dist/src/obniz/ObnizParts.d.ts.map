{"version":3,"sources":["../src/obniz/ObnizParts.ts"],"names":[],"mappings":"AACA,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,YAAY,EAAE,mBAAmB,EAAC,MAAM,kBAAkB,CAAC;AAInE,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,eAAe;WAEvC,MAAM,IAAI,GAAG;WAIb,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;WAYrC,KAAK,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG;gBAOvB,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAI3B,SAAS,CAAC,EAAE,EAAE,GAAG,GAAG,OAAO;IAI3B,KAAK,CAAC,CAAC,SAAS,MAAM,YAAY,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE,mBAAmB,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;CA0C5G","file":"ObnizParts.d.ts","sourcesContent":["import ObnizUtil from \"./libs/utils/util\";\r\nimport ObnizConnection from \"./ObnizConnection\";\r\nimport {WiredNameMap, WiredNameOptionsMap} from \"./ObnizPartsList\";\r\n\r\nconst _parts: any = {};\r\n\r\nexport default class ObnizParts extends ObnizConnection {\r\n\r\n  public static _parts(): any {\r\n    return _parts;\r\n  }\r\n\r\n  public static PartsRegistrate(arg0: any, arg1?: any) {\r\n    if (\r\n      arg0 &&\r\n      typeof arg0.info === \"function\" &&\r\n      typeof arg0.info().name === \"string\"\r\n    ) {\r\n      _parts[arg0.info().name] = arg0;\r\n    } else if (typeof arg0 === \"string\" && typeof arg1 === \"object\") {\r\n      _parts[arg0] = arg1;\r\n    }\r\n  }\r\n\r\n  public static Parts(name: any): any {\r\n    if (!_parts[name]) {\r\n      throw new Error(`unknown parts [${name}]`);\r\n    }\r\n    return new _parts[name]();\r\n  }\r\n\r\n  constructor(id: any, options?: any) {\r\n    super(id, options);\r\n  }\r\n\r\n  public isValidIO(io: any): boolean {\r\n    return typeof io === \"number\" && (this as any)[\"io\" + io] !== null;\r\n  }\r\n\r\n  public wired<K extends keyof WiredNameMap>(partsname: K, options?: WiredNameOptionsMap[K]): WiredNameMap[K] {\r\n    const parts: any = ObnizParts.Parts(partsname);\r\n    if (!parts) {\r\n      throw new Error(\"No such a parts [\" + partsname + \"] found\");\r\n    }\r\n    const args: any = Array.from(arguments);\r\n    args.shift();\r\n    args.unshift(this);\r\n    if (parts.keys) {\r\n      if (parts.requiredKeys) {\r\n        const err: any = ObnizUtil._requiredKeys(args[1], parts.requiredKeys);\r\n        if (err) {\r\n          throw new Error(\r\n            partsname + \" wired param '\" + err + \"' required, but not found \",\r\n          );\r\n        }\r\n      }\r\n      parts.params = ObnizUtil._keyFilter(args[1], parts.keys);\r\n    }\r\n    parts.obniz = this;\r\n    parts.wired.apply(parts, args);\r\n    if (parts.keys || parts.ioKeys) {\r\n      const keys: any = parts.ioKeys || parts.keys;\r\n      const displayPartsName: any = parts.displayName || partsname;\r\n      const ioNames: any = {};\r\n      for (const index in keys) {\r\n        let pinName: any = keys[index];\r\n        const io: any = args[1][pinName];\r\n        if (this.isValidIO(io)) {\r\n          if (parts.displayIoNames && parts.displayIoNames[pinName]) {\r\n            pinName = parts.displayIoNames[pinName];\r\n          }\r\n          ioNames[io] = pinName;\r\n        }\r\n      }\r\n      const display = (this as any).display;\r\n      if (display) {\r\n        display.setPinNames(displayPartsName, ioNames);\r\n      }\r\n    }\r\n    return parts;\r\n  }\r\n}\r\n"]}