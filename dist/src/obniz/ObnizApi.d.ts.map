{"version":3,"sources":["../src/obniz/ObnizApi.ts"],"names":[],"mappings":"AAKA,cAAM,QAAQ;IACL,EAAE,EAAE,GAAG,CAAC;IACR,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;gBAER,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAUtC,IAAI,UAAU,QAIb;IAEM,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAqC1C,QAAQ,CAAC,QAAQ,EAAE,GAAG;IAItB,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;CAGzC;AAED,eAAe,QAAQ,CAAC","file":"ObnizApi.d.ts","sourcesContent":["import fetch from \"node-fetch\";\r\n\r\n// @ts-ignore\r\nimport packageJson from \"../../package\"; // pakcage.js will be created from package.json on build.\r\n\r\nclass ObnizApi {\r\n  public id: any;\r\n  public options: any;\r\n  public urlBase: any;\r\n\r\n  constructor(obnizId: any, options: any) {\r\n    this.id = obnizId;\r\n    options = options || {};\r\n    this.options = {\r\n      access_token: options.access_token || null,\r\n      obniz_server: options.obniz_server || \"https://obniz.io\",\r\n    };\r\n    this.urlBase = this.options.obniz_server + \"/obniz/\" + this.id;\r\n  }\r\n\r\n  get apiVersion() {\r\n\r\n    const versionString: any = packageJson.version;\r\n    return versionString.split(\".\").shift();\r\n  }\r\n\r\n  public post(path: any, params: any, callback: any) {\r\n    const url: any = this.urlBase + path;\r\n\r\n    // let query = [];\r\n    // query.push(\"XXX\");\r\n    // if(query.length > 0){\r\n    //   url += \"?\" + query.join(\"&\");\r\n    // }\r\n\r\n    const headers: any = {};\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n    if (this.options.access_token) {\r\n      headers.authorization = \"Bearer \" + this.options.access_token;\r\n    }\r\n\r\n    const fetchParams: any = {\r\n      method: \"POST\",\r\n      headers,\r\n    };\r\n    if (params) {\r\n      fetchParams.body = JSON.stringify(params);\r\n    }\r\n\r\n    return fetch(url, fetchParams)\r\n      .then ((res: any) => {\r\n        return res.json();\r\n      })\r\n      .then((json: any) => {\r\n        if (typeof callback === \"function\") {\r\n          callback(json);\r\n        }\r\n        return new Promise((resolve: any ) => {\r\n          resolve(json);\r\n        });\r\n      });\r\n  }\r\n\r\n  public getState(callback: any) {\r\n    return this.post(\"/state\", null, callback);\r\n  }\r\n\r\n  public postJson(json: any, callback: any) {\r\n    return this.post(\"/api/\" + this.apiVersion, json, callback); // 1 is api version\r\n  }\r\n}\r\n\r\nexport default ObnizApi;\r\n"]}