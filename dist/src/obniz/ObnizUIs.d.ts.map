{"version":3,"sources":["../src/obniz/ObnizUIs.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,kBAAkB;gBAC1C,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAI3B,cAAc,CAAC,GAAG,EAAE,MAAM;IAY1B,SAAS,CAAC,cAAc,EAAE,GAAG;IAoB7B,WAAW,CAAC,GAAG,EAAE,GAAG;IAapB,YAAY;;;;;IAsBZ,cAAc;IAKd,KAAK;IAKL,gBAAgB;IAKhB,cAAc;IAiBd,UAAU,CAAC,kBAAkB,EAAE,GAAG;IAmBlC,WAAW;CAenB","file":"ObnizUIs.d.ts","sourcesContent":["import ObnizSystemMethods from \"./ObnizSystemMethods\";\r\n\r\nexport default class ObnizUIs extends ObnizSystemMethods {\r\n  constructor(id: any, options?: any) {\r\n    super(id, options);\r\n  }\r\n\r\n  public isValidObnizId(str: string ) {\r\n    if (typeof str !== \"string\" || str.length < 8) {\r\n      return null;\r\n    }\r\n    str = str.replace(\"-\", \"\");\r\n    let id: any = parseInt(str);\r\n    if (isNaN(id)) {\r\n      id = null;\r\n    }\r\n    return id !== null;\r\n  }\r\n\r\n  public wsconnect(desired_server: any) {\r\n    this.showOffLine();\r\n    if (!this.isValidObnizId(this.id)) {\r\n      if (this.isNode) {\r\n        this.error(\"invalid obniz id\");\r\n      } else {\r\n        const filled: any = _ReadCookie(\"obniz-last-used\") || \"\";\r\n        this.prompt(\r\n          filled,\r\n          (obnizid: any ) => {\r\n            this.id = obnizid;\r\n            this.wsconnect(desired_server);\r\n          },\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    super.wsconnect(desired_server);\r\n  }\r\n\r\n  public showAlertUI(obj: any) {\r\n    if (this.isNode || !document.getElementById(this.options.debug_dom_id)) {\r\n      return;\r\n    }\r\n    const dom: any = `\r\n    <div style=\"background-color:${\r\n      obj.alert === \"warning\" ? \"#ffee35\" : \"#ff7b34\"\r\n    }\">${obj.message}</div>`;\r\n    document\r\n      .getElementById(this.options.debug_dom_id)!\r\n      .insertAdjacentHTML(\"beforeend\", dom);\r\n  }\r\n\r\n  public getDebugDoms() {\r\n    if (this.isNode) {\r\n      return;\r\n    }\r\n    const loaderDom: any = document.querySelector(\"#loader\");\r\n    const debugDom: any = document.querySelector(\"#\" + this.options.debug_dom_id);\r\n    let statusDom: any = document.querySelector(\r\n      \"#\" + this.options.debug_dom_id + \" #online-status\",\r\n    );\r\n    if (debugDom && !statusDom) {\r\n      statusDom = document.createElement(\"div\");\r\n      statusDom.id = \"online-status\";\r\n      statusDom.style.color = \"#FFF\";\r\n      statusDom.style.padding = \"5px\";\r\n      statusDom.style.textAlign = \"center\";\r\n      debugDom.insertBefore(statusDom, debugDom.firstChild);\r\n    }\r\n    return {loaderDom, debugDom, statusDom};\r\n  }\r\n\r\n  /* online offline */\r\n\r\n  public _callOnConnect() {\r\n    this.updateOnlineUI();\r\n    super._callOnConnect();\r\n  }\r\n\r\n  public close() {\r\n    super.close();\r\n    this.updateOnlineUI();\r\n  }\r\n\r\n  public _disconnectLocal() {\r\n    super._disconnectLocal();\r\n    this.updateOnlineUI();\r\n  }\r\n\r\n  public updateOnlineUI() {\r\n    if (this.isNode) {\r\n      return;\r\n    }\r\n\r\n    const isConnected: any = this.socket && this.socket.readyState === 1;\r\n    const isConnectedLocally: any =\r\n      this.socket_local && this.socket_local.readyState === 1;\r\n    if (isConnected && isConnectedLocally) {\r\n      this.showOnLine(true);\r\n    } else if (isConnected) {\r\n      this.showOnLine(false);\r\n    } else {\r\n      this.showOffLine();\r\n    }\r\n  }\r\n\r\n  public showOnLine(isConnectedLocally: any) {\r\n    if (this.isNode) {\r\n      return;\r\n    }\r\n    const doms: any = this.getDebugDoms();\r\n    if (doms.loaderDom) {\r\n      doms.loaderDom.style.display = \"none\";\r\n    }\r\n    if (doms.statusDom) {\r\n      doms.statusDom.style.backgroundColor = isConnectedLocally\r\n        ? \"#0cd362\"\r\n        : \"#31965d\";\r\n      doms.statusDom.style.color = \"#FFF\";\r\n      doms.statusDom.innerHTML =\r\n        (this.id ? \"online : \" + this.id : \"online\") +\r\n        (isConnectedLocally ? \" via local_connect\" : \" via internet\");\r\n    }\r\n  }\r\n\r\n  public showOffLine() {\r\n    if (this.isNode) {\r\n      return;\r\n    }\r\n\r\n    const doms: any = this.getDebugDoms();\r\n    if (doms.loaderDom) {\r\n      doms.loaderDom.style.display = \"block\";\r\n    }\r\n    if (doms.statusDom) {\r\n      doms.statusDom.style.backgroundColor = \"#d9534f\";\r\n      doms.statusDom.style.color = \"#FFF\";\r\n      doms.statusDom.innerHTML = this.id ? \"offline : \" + this.id : \"offline\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction _ReadCookie(name: any) {\r\n  const nameEQ: any = name + \"=\";\r\n  const ca: any = document.cookie.split(\";\");\r\n  for (let i = 0; i < ca.length; i++) {\r\n    let c: any = ca[i];\r\n    while (c.charAt(0) === \" \") {\r\n      c = c.substring(1, c.length);\r\n    }\r\n    if (c.indexOf(nameEQ) === 0) {\r\n      return c.substring(nameEQ.length, c.length);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"]}