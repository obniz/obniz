{"version":3,"sources":["../src/obniz/ObnizUIs.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,kBAAkB;gBAC1C,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAI3B,cAAc,CAAC,GAAG,EAAE,MAAM;IAY1B,SAAS,CAAC,cAAc,EAAE,GAAG;IAoB7B,WAAW,CAAC,GAAG,EAAE,GAAG;IAapB,YAAY;;;;;IAsBZ,cAAc;IAKd,KAAK;IAKL,gBAAgB;IAKhB,cAAc;IAiBd,UAAU,CAAC,kBAAkB,EAAE,GAAG;IAmBlC,WAAW;CAenB","file":"ObnizUIs.d.ts","sourcesContent":["import ObnizSystemMethods from \"./ObnizSystemMethods\";\n\nexport default class ObnizUIs extends ObnizSystemMethods {\n  constructor(id: any, options?: any) {\n    super(id, options);\n  }\n\n  public isValidObnizId(str: string ) {\n    if (typeof str !== \"string\" || str.length < 8) {\n      return null;\n    }\n    str = str.replace(\"-\", \"\");\n    let id: any = parseInt(str);\n    if (isNaN(id)) {\n      id = null;\n    }\n    return id !== null;\n  }\n\n  public wsconnect(desired_server: any) {\n    this.showOffLine();\n    if (!this.isValidObnizId(this.id)) {\n      if (this.isNode) {\n        this.error(\"invalid obniz id\");\n      } else {\n        const filled: any = _ReadCookie(\"obniz-last-used\") || \"\";\n        this.prompt(\n          filled,\n          (obnizid: any ) => {\n            this.id = obnizid;\n            this.wsconnect(desired_server);\n          },\n        );\n      }\n      return;\n    }\n    super.wsconnect(desired_server);\n  }\n\n  public showAlertUI(obj: any) {\n    if (this.isNode || !document.getElementById(this.options.debug_dom_id)) {\n      return;\n    }\n    const dom: any = `\n    <div style=\"background-color:${\n      obj.alert === \"warning\" ? \"#ffee35\" : \"#ff7b34\"\n    }\">${obj.message}</div>`;\n    document\n      .getElementById(this.options.debug_dom_id)!\n      .insertAdjacentHTML(\"beforeend\", dom);\n  }\n\n  public getDebugDoms() {\n    if (this.isNode) {\n      return;\n    }\n    const loaderDom: any = document.querySelector(\"#loader\");\n    const debugDom: any = document.querySelector(\"#\" + this.options.debug_dom_id);\n    let statusDom: any = document.querySelector(\n      \"#\" + this.options.debug_dom_id + \" #online-status\",\n    );\n    if (debugDom && !statusDom) {\n      statusDom = document.createElement(\"div\");\n      statusDom.id = \"online-status\";\n      statusDom.style.color = \"#FFF\";\n      statusDom.style.padding = \"5px\";\n      statusDom.style.textAlign = \"center\";\n      debugDom.insertBefore(statusDom, debugDom.firstChild);\n    }\n    return {loaderDom, debugDom, statusDom};\n  }\n\n  /* online offline */\n\n  public _callOnConnect() {\n    this.updateOnlineUI();\n    super._callOnConnect();\n  }\n\n  public close() {\n    super.close();\n    this.updateOnlineUI();\n  }\n\n  public _disconnectLocal() {\n    super._disconnectLocal();\n    this.updateOnlineUI();\n  }\n\n  public updateOnlineUI() {\n    if (this.isNode) {\n      return;\n    }\n\n    const isConnected: any = this.socket && this.socket.readyState === 1;\n    const isConnectedLocally: any =\n      this.socket_local && this.socket_local.readyState === 1;\n    if (isConnected && isConnectedLocally) {\n      this.showOnLine(true);\n    } else if (isConnected) {\n      this.showOnLine(false);\n    } else {\n      this.showOffLine();\n    }\n  }\n\n  public showOnLine(isConnectedLocally: any) {\n    if (this.isNode) {\n      return;\n    }\n    const doms: any = this.getDebugDoms();\n    if (doms.loaderDom) {\n      doms.loaderDom.style.display = \"none\";\n    }\n    if (doms.statusDom) {\n      doms.statusDom.style.backgroundColor = isConnectedLocally\n        ? \"#0cd362\"\n        : \"#31965d\";\n      doms.statusDom.style.color = \"#FFF\";\n      doms.statusDom.innerHTML =\n        (this.id ? \"online : \" + this.id : \"online\") +\n        (isConnectedLocally ? \" via local_connect\" : \" via internet\");\n    }\n  }\n\n  public showOffLine() {\n    if (this.isNode) {\n      return;\n    }\n\n    const doms: any = this.getDebugDoms();\n    if (doms.loaderDom) {\n      doms.loaderDom.style.display = \"block\";\n    }\n    if (doms.statusDom) {\n      doms.statusDom.style.backgroundColor = \"#d9534f\";\n      doms.statusDom.style.color = \"#FFF\";\n      doms.statusDom.innerHTML = this.id ? \"offline : \" + this.id : \"offline\";\n    }\n  }\n}\n\nfunction _ReadCookie(name: any) {\n  const nameEQ: any = name + \"=\";\n  const ca: any = document.cookie.split(\";\");\n  for (let i = 0; i < ca.length; i++) {\n    let c: any = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1, c.length);\n    }\n    if (c.indexOf(nameEQ) === 0) {\n      return c.substring(nameEQ.length, c.length);\n    }\n  }\n  return null;\n}\n"]}