{"version":3,"sources":["../src/obniz/ObnizConnection.ts"],"names":[],"mappings":"AAKA,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAIzC,MAAM,CAAC,OAAO,OAAO,eAAe;IAE3B,MAAM,EAAE,OAAO,CAAC;IAChB,EAAE,EAAE,GAAG,CAAC;IACR,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,UAAU,EAAE,OAAO,CAAC;IACpB,gBAAgB,EAAE,OAAO,CAAC;IAC1B,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,OAAO,CAAC;IACzB,EAAE,EAAE,GAAG,CAAC;IACR,YAAY,EAAE,GAAG,CAAC;IAClB,eAAe,EAAE,QAAQ,GAAG,YAAY,GAAG,WAAW,GAAG,SAAS,CAAC;IACnE,sBAAsB,EAAE,MAAM,CAAC;IAC/B,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,UAAU,EAAE,GAAG,CAAC;IAChB,eAAe,EAAE,GAAG,CAAC;IACrB,UAAU,EAAE,GAAG,CAAC;IAChB,8BAA8B,EAAE,GAAG,CAAC;IACpC,qBAAqB,EAAE,MAAM,CAAC;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,QAAQ,EAAE,GAAG,CAAC;gBAET,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAmD3B,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAOxC,MAAM,KAAK,OAAO,QAGjB;IAEM,QAAQ;IASR,WAAW,CAAC,IAAI,EAAE,GAAG;IAoBrB,SAAS,CAAC,KAAK,EAAE,GAAG;IAYpB,WAAW,CAAC,MAAM,EAAE,GAAG;IA0BvB,UAAU;IAiBV,SAAS,CAAC,KAAK,EAAE,GAAG;IAIpB,sBAAsB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG;IAa1C,SAAS,CAAC,cAAc,CAAC,EAAE,GAAG;IAmD9B,aAAa,CAAC,IAAI,EAAE,GAAG;IAiDvB,gBAAgB;IAehB,WAAW,CAAC,MAAM,EAAE,GAAG;IA8BvB,OAAO;IAOP,KAAK;IAeL,cAAc;IAgCd,WAAW,CAAC,GAAG,EAAE,GAAG;IAMpB,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAiE5B,WAAW,CAAC,IAAI,EAAE,GAAG;IAyBrB,YAAY;IAoBZ,cAAc,CAAC,GAAG,EAAE,GAAG;IAevB,qBAAqB;IAQrB,eAAe,CAAC,KAAK,EAAE,GAAG;IAiD1B,mBAAmB,CAAC,KAAK,EAAE,GAAG;IAGrC,MAAM,KAAK,SAAS,qBAEnB;IAEM,WAAW,CAAC,MAAM,EAAE,GAAG;IAsBvB,OAAO,CAAC,GAAG,EAAE,GAAG;IAIhB,KAAK,CAAC,GAAG,EAAE,GAAG;CAGtB","file":"ObnizConnection.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport wsClient = require(\"ws\");\n\n// @ts-ignore\nimport packageJson from \"../../package\";  // pakcage.js will be created from package.json on build.\nimport WSCommand from \"./libs/wscommand\";\n\nconst isNode: any = typeof window === \"undefined\";\n\nexport default class ObnizConnection {\n\n  public isNode: boolean;\n  public id: any;\n  public socket: any;\n  public socket_local: any;\n  public debugprint: boolean;\n  public debugprintBinary: boolean;\n  public debugs: any;\n  public onConnectCalled: boolean;\n  public hw: any;\n  public firmware_ver: any;\n  public connectionState: \"closed\" | \"connecting\" | \"connected\" | \"closing\";\n  public bufferdAmoundWarnBytes: number;\n  public emitter: any;\n  public options: any;\n  public wscommand: any;\n  public wscommands: any;\n  public _sendQueueTimer: any;\n  public _sendQueue: any;\n  public _waitForLocalConnectReadyTimer: any;\n  public _connectionRetryCount: number;\n  public onopen: any;\n  public onclose: any;\n  public onconnect: any;\n  public sendPool: any;\n\n  constructor(id: any, options?: any) {\n    this.isNode = isNode;\n    this.id = id;\n    this.socket = null;\n    this.socket_local = null;\n    this.debugprint = false;\n    this.debugprintBinary = false;\n    this.debugs = [];\n    this.onConnectCalled = false;\n    this.hw = undefined;\n    this.firmware_ver = undefined;\n    this.connectionState = \"closed\"; // closed/connecting/connected/closing\n    this.bufferdAmoundWarnBytes = 10 * 1000 * 1000; // 10M bytes\n    this.emitter = new emitter();\n\n    this._connectionRetryCount = 0;\n\n    if (!options) {\n      options = {};\n    }\n    this.options = {\n      binary: options.binary === false ? false : true,\n      local_connect: options.local_connect === false ? false : true,\n      debug_dom_id: options.debug_dom_id || \"obniz-debug\",\n      auto_connect: options.auto_connect === false ? false : true,\n      access_token: options.access_token || null,\n      obniz_server: options.obniz_server || \"wss://obniz.io\",\n      reset_obniz_on_ws_disconnection:\n        options.reset_obniz_on_ws_disconnection === false ? false : true,\n    };\n    if (this.options.binary) {\n      this.wscommand = (this.constructor as typeof ObnizConnection).WSCommand;\n      const classes: any = (this.constructor as typeof ObnizConnection).WSCommand.CommandClasses;\n      this.wscommands = [];\n      for (const class_name in classes) {\n        this.wscommands.push(\n          new classes[class_name]({\n            hw: {\n              firmware: undefined,\n              model: \"obniz_board\",\n            },\n            delegate: undefined,\n          }),\n        );\n      }\n    }\n    if (this.options.auto_connect) {\n      this.wsconnect();\n    }\n  }\n\n  public prompt(filled: any, callback: any) {\n    const obnizid: any = prompt(\"Please enter obniz id\", filled);\n    if (obnizid) {\n      callback(obnizid);\n    }\n  }\n\n  static get version() {\n\n    return packageJson.version;\n  }\n\n  public wsOnOpen() {\n    this.print_debug(\"ws connected\");\n    this._connectionRetryCount = 0;\n    // wait for {ws:{ready:true}} object\n    if (typeof this.onopen === \"function\") {\n      this.onopen(this);\n    }\n  }\n\n  public wsOnMessage(data: any) {\n    let json: any;\n    if (typeof data === \"string\") {\n      json = JSON.parse(data);\n    } else if (this.wscommands) {\n      if (this.debugprintBinary) {\n        console.log(\"Obniz: binalized: \" + new Uint8Array(data).toString());\n      }\n      json = this.binary2Json(data);\n    }\n\n    if (Array.isArray(json)) {\n      for (const i in json) {\n        this.notifyToModule(json[i]);\n      }\n    } else {\n      // invalid json\n    }\n  }\n\n  public wsOnClose(event: any) {\n    this.print_debug(\"closed\");\n    this.close();\n    this.emitter.emit(\"closed\");\n    if (typeof this.onclose === \"function\" && this.onConnectCalled === true) {\n      this.onclose(this);\n    }\n    this.onConnectCalled = false;\n\n    this._reconnect();\n  }\n\n  public connectWait(option: any) {\n    option = option || {};\n    const timeout: any = option.timeout || null;\n\n    return new Promise((resolve: any, reject: any) => {\n      if (this.onConnectCalled) {\n        resolve(true);\n        return;\n      }\n      this.emitter.once(\"connected\", () => {\n        resolve(true);\n      });\n      if (!this.options.auto_connect) {\n        this.emitter.once(\"closed\", () => {\n          resolve(false);\n        });\n      }\n      if (timeout) {\n        setTimeout(() => {\n          resolve(false);\n        }, timeout * 1000);\n      }\n      this.connect();\n    });\n  }\n\n  public _reconnect() {\n    this._connectionRetryCount++;\n    let tryAfter: any = 1000;\n    if (this._connectionRetryCount > 15) {\n      tryAfter = (this._connectionRetryCount - 15) * 1000;\n      const Limit: any = isNode ? 60 * 1000 : 10 * 1000;\n      if (tryAfter > Limit) {\n        tryAfter = Limit;\n      }\n    }\n    if (this.options.auto_connect) {\n      setTimeout(() => {\n        this.wsconnect(); // always connect to mainserver if ws lost\n      }, tryAfter);\n    }\n  }\n\n  public wsOnError(event: any) {\n    // console.error(event);\n  }\n\n  public wsOnUnexpectedResponse(req: any, res?: any) {\n    if (res && res.statusCode === 404) {\n      this.print_debug(\"obniz not online\");\n    } else {\n      this.print_debug(\"invalid server response \" + res ? res.statusCode : \"\");\n    }\n\n    this.clearSocket(this.socket);\n    delete this.socket;\n\n    this._reconnect();\n  }\n\n  public wsconnect(desired_server?: any) {\n    let server: any = this.options.obniz_server;\n    if (desired_server) {\n      server = \"\" + desired_server;\n    }\n\n    if (this.socket && this.socket.readyState <= 1) {\n      this.close();\n    }\n\n    let url: any = server + \"/obniz/\" + this.id + \"/ws/1\";\n\n    const query: any = [];\n    if ((this.constructor as typeof ObnizConnection).version) {\n      query.push(\"obnizjs=\" + (this.constructor as typeof ObnizConnection).version);\n    }\n    if (this.options.access_token) {\n      query.push(\"access_token=\" + this.options.access_token);\n    }\n    if (this.wscommand) {\n      query.push(\"accept_binary=true\");\n    }\n    if (query.length > 0) {\n      url += \"?\" + query.join(\"&\");\n    }\n    this.print_debug(\"connecting to \" + url);\n\n    let socket: any;\n    if (this.isNode) {\n\n      socket = new wsClient(url);\n      socket.on(\"open\", this.wsOnOpen.bind(this));\n      socket.on(\"message\", this.wsOnMessage.bind(this));\n      socket.on(\"close\", this.wsOnClose.bind(this));\n      socket.on(\"error\", this.wsOnError.bind(this));\n      socket.on(\"unexpected-response\", this.wsOnUnexpectedResponse.bind(this));\n    } else {\n      socket = new WebSocket(url);\n      socket.binaryType = \"arraybuffer\";\n      socket.onopen = this.wsOnOpen.bind(this);\n      socket.onmessage = (event: any) => {\n        this.wsOnMessage(event.data);\n      };\n      socket.onclose = this.wsOnClose.bind(this);\n      socket.onerror = this.wsOnError.bind(this);\n    }\n    this.socket = socket;\n\n    this.connectionState = \"connecting\";\n  }\n\n  public _connectLocal(host: any) {\n    const url: any = \"ws://\" + host;\n    this.print_debug(\"local connect to \" + url);\n    let ws: any;\n    if (this.isNode) {\n      ws = new wsClient(url);\n      ws.on(\"open\", () => {\n        this.print_debug(\"connected to \" + url);\n        this._callOnConnect();\n      });\n      ws.on(\"message\", (data: any) => {\n        this.print_debug(\"recvd via local\");\n        this.wsOnMessage(data);\n      });\n      ws.on(\"close\", (event: any) => {\n        console.log(\"local websocket closed\");\n        this._disconnectLocal();\n      });\n      ws.on(\"error\", (err: any) => {\n        console.error(\"local websocket error.\", err);\n        this._disconnectLocal();\n      });\n      ws.on(\"unexpected-response\", (event: any) => {\n        console.log(\"local websocket closed\");\n        this._disconnectLocal();\n      });\n    } else {\n      ws = new WebSocket(url);\n      ws.binaryType = \"arraybuffer\";\n      ws.onopen = () => {\n        this.print_debug(\"connected to \" + url);\n        this._callOnConnect();\n      };\n      ws.onmessage = (event: any) => {\n        this.print_debug(\"recvd via local\");\n        this.wsOnMessage(event.data);\n      };\n      ws.onclose = (event: any) => {\n        console.log(\"local websocket closed\");\n        this._disconnectLocal();\n      };\n      ws.onerror = (err: any) => {\n        console.log(\"local websocket error.\", err);\n        this._disconnectLocal();\n      };\n    }\n    this.socket_local = ws;\n  }\n\n  public _disconnectLocal() {\n    if (this.socket_local) {\n      if (this.socket.readyState <= 1) {\n        this.socket_local.close();\n      }\n      this.clearSocket(this.socket_local);\n      delete this.socket_local;\n    }\n    if (this._waitForLocalConnectReadyTimer) {\n      clearTimeout(this._waitForLocalConnectReadyTimer);\n      this._waitForLocalConnectReadyTimer = null;\n      this._callOnConnect(); /* should call. onlyl local connect was lost. and waiting. */\n    }\n  }\n\n  public clearSocket(socket: any) {\n    if (!socket) {\n      return;\n    }\n    /* send queue */\n    if (this._sendQueueTimer) {\n      delete this._sendQueue;\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n    /* unbind */\n    if (this.isNode) {\n      const shouldRemoveObservers: any = [\n        \"open\",\n        \"message\",\n        \"close\",\n        \"error\",\n        \"unexpected-response\",\n      ];\n      for (let i = 0; i < shouldRemoveObservers.length; i++) {\n        socket.removeAllListeners(shouldRemoveObservers[i]);\n      }\n    } else {\n      socket.onopen = null;\n      socket.onmessage = null;\n      socket.onclose = null;\n      socket.onerror = null;\n    }\n  }\n\n  public connect() {\n    if (this.socket && this.socket.readyState <= 1) {\n      return;\n    }\n    this.wsconnect();\n  }\n\n  public close() {\n    this._drainQueued();\n    this._disconnectLocal();\n    if (this.socket) {\n      if (this.socket.readyState <= 1) {\n        // Connecting & Connected\n        this.connectionState = \"closing\";\n        this.socket.close(1000, \"close\");\n      }\n      this.clearSocket(this.socket);\n      delete this.socket;\n    }\n    this.connectionState = \"closed\";\n  }\n\n  public _callOnConnect() {\n    let canChangeToConnected: any = true;\n    if (this._waitForLocalConnectReadyTimer) {\n      /* obniz.js can't wait for local_connect any more! */\n      clearTimeout(this._waitForLocalConnectReadyTimer);\n      this._waitForLocalConnectReadyTimer = null;\n    } else {\n      /* obniz.js has to wait for local_connect establish */\n      if (this.socket_local && this.socket_local.readyState === 1) {\n        /* delayed connect */\n        canChangeToConnected = false;\n      } else {\n        /* local_connect is not used */\n      }\n    }\n\n    this.emitter.emit(\"connected\");\n\n    if (canChangeToConnected) {\n      this.connectionState = \"connected\";\n      if (typeof this.onconnect === \"function\") {\n        const promise: any = this.onconnect(this);\n        if (promise instanceof Promise) {\n          promise.catch((err: any) => {\n            console.error(err);\n          });\n        }\n      }\n      this.onConnectCalled = true;\n    }\n  }\n\n  public print_debug(str: any) {\n    if (this.debugprint) {\n      console.log(\"Obniz: \" + str);\n    }\n  }\n\n  public send(obj: any, options?: any) {\n    try {\n      if (!obj || typeof obj !== \"object\") {\n        console.log(\"obnizjs. didnt send \", obj);\n        return;\n      }\n      if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n          this.send(obj[i]);\n        }\n        return;\n      }\n      if (this.sendPool) {\n        this.sendPool.push(obj);\n        return;\n      }\n\n      let sendData: any = JSON.stringify([obj]);\n      if (this.debugprint) {\n        this.print_debug(\"send: \" + sendData);\n      }\n\n      /* compress */\n      if (\n        this.wscommand &&\n        (typeof options !== \"object\" || options.local_connect !== false)\n      ) {\n        let compressed: any;\n        try {\n          compressed = this.wscommand.compress(\n            this.wscommands,\n            JSON.parse(sendData)[0],\n          );\n          if (compressed) {\n            sendData = compressed;\n            if (this.debugprintBinary) {\n              console.log(\n                \"Obniz: binalized: \" + new Uint8Array(compressed).toString(),\n              );\n            }\n          }\n        } catch (e) {\n          this.error(\"------ errored json -------\");\n          this.error(sendData);\n          throw e;\n        }\n      }\n\n      /* queue sending */\n      if (typeof sendData === \"string\") {\n        this._drainQueued();\n        this._sendRouted(sendData);\n      } else {\n        if (this._sendQueue) {\n          this._sendQueue.push(sendData);\n        } else {\n          this._sendQueue = [sendData];\n          this._sendQueueTimer = setTimeout(this._drainQueued.bind(this), 0);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  public _sendRouted(data: any) {\n    if (\n      this.socket_local &&\n      this.socket_local.readyState === 1 &&\n      typeof data !== \"string\"\n    ) {\n      this.print_debug(\"send via local\");\n      this.socket_local.send(data);\n      if (this.socket_local.bufferedAmount > this.bufferdAmoundWarnBytes) {\n        this.warning(\n          \"over \" + this.socket_local.bufferedAmount + \" bytes queued\",\n        );\n      }\n      return;\n    }\n\n    if (this.socket && this.socket.readyState === 1) {\n      this.socket.send(data);\n      if (this.socket.bufferedAmount > this.bufferdAmoundWarnBytes) {\n        this.warning(\"over \" + this.socket.bufferedAmount + \" bytes queued\");\n      }\n      return;\n    }\n  }\n\n  public _drainQueued() {\n    if (!this._sendQueue) {\n      return;\n    }\n    let expectSize: any = 0;\n    for (let i = 0; i < this._sendQueue.length; i++) {\n      expectSize += this._sendQueue[i].length;\n    }\n    let filled: any = 0;\n    const sendData: any = new Uint8Array(expectSize);\n    for (let i = 0; i < this._sendQueue.length; i++) {\n      sendData.set(this._sendQueue[i], filled);\n      filled += this._sendQueue[i].length;\n    }\n    this._sendRouted(sendData);\n    delete this._sendQueue;\n    clearTimeout(this._sendQueueTimer);\n    this._sendQueueTimer = null;\n  }\n\n  public notifyToModule(obj: any) {\n    if (this.debugprint) {\n      this.print_debug(JSON.stringify(obj));\n    }\n\n    if (obj.ws) {\n      this.handleWSCommand(obj.ws);\n      return;\n    }\n    if (obj.system) {\n      this.handleSystemCommand(obj.system);\n      return;\n    }\n  }\n\n  public _canConnectToInsecure() {\n    if (this.isNode) {\n      return true;\n    } else {\n      return location.protocol !== \"https:\";\n    }\n  }\n\n  public handleWSCommand(wsObj: any) {\n    if (wsObj.ready) {\n      this.firmware_ver = wsObj.obniz.firmware;\n      this.hw = wsObj.obniz.hw;\n      if (!this.hw) {\n        this.hw = \"obnizb1\";\n      }\n      if (this.wscommands) {\n        for (let i = 0; i < this.wscommands.length; i++) {\n          const command: any = this.wscommands[i];\n          command.setHw({\n            hw: this.hw, // hard coding\n            firmware: this.firmware_ver,\n          });\n        }\n      }\n      if (this.options.reset_obniz_on_ws_disconnection) {\n        (this as any).resetOnDisconnect(true);\n      }\n      if (\n        wsObj.local_connect &&\n        wsObj.local_connect.ip &&\n        this.wscommand &&\n        this.options.local_connect &&\n        this._canConnectToInsecure()\n      ) {\n        this._connectLocal(wsObj.local_connect.ip);\n        this._waitForLocalConnectReadyTimer = setTimeout(() => {\n          this._callOnConnect();\n        }, 3000);\n      } else {\n        this._callOnConnect();\n      }\n    }\n    if (wsObj.redirect) {\n      const server: any = wsObj.redirect;\n      this.print_debug(\"WS connection changed to \" + server);\n\n      /* close current ws immidiately */\n      /*  */\n      this.socket.close(1000, \"close\");\n      this.clearSocket(this.socket);\n      delete this.socket;\n\n      /* connect to new server */\n      this.wsconnect(server);\n    }\n  }\n\n  public handleSystemCommand(wsObj: any) {\n  }\n\n  static get WSCommand() {\n    return WSCommand;\n  }\n\n  public binary2Json(binary: any) {\n    let data: any = new Uint8Array(binary);\n    const json: any = [];\n    while (data !== null) {\n      const frame: any = WSCommand.dequeueOne(data);\n      if (!frame) {\n        break;\n      }\n      const obj: any = {};\n      for (let i = 0; i < this.wscommands.length; i++) {\n        const command: any = this.wscommands[i];\n        if (command.module === frame.module) {\n          command.notifyFromBinary(obj, frame.func, frame.payload);\n          break;\n        }\n      }\n      json.push(obj);\n      data = frame.next;\n    }\n    return json;\n  }\n\n  public warning(msg: any) {\n    console.log(\"warning:\" + msg);\n  }\n\n  public error(msg: any) {\n    console.error(\"error:\" + msg);\n  }\n}\n"]}