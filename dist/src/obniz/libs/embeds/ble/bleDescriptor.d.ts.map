{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleDescriptor.ts"],"names":[],"mappings":"AAAA,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAG1D,cAAM,aAAc,SAAQ,oBAAoB;IACvC,WAAW,EAAE,GAAG,CAAC;IACjB,cAAc,EAAE,GAAG,CAAC;IACpB,IAAI,EAAE,GAAG,CAAC;gBAEL,GAAG,EAAE,GAAG;IASpB,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAEM,aAAa,CAAC,KAAK,EAAE,GAAG;IAMxB,gBAAgB,CAAC,KAAK,EAAE,GAAG;IAM3B,MAAM;IASN,KAAK,CAAC,SAAS,EAAE,GAAG;IAiBpB,IAAI;CAeZ;AAED,eAAe,aAAa,CAAC","file":"bleDescriptor.d.ts","sourcesContent":["import BleAttributeAbstract from \"./bleAttributeAbstract\";\r\nimport BleHelper from \"./bleHelper\";\r\n\r\nclass BleDescriptor extends BleAttributeAbstract {\r\n  public permissions: any;\r\n  public characteristic: any;\r\n  public uuid: any;\r\n\r\n  constructor(obj: any) {\r\n    super(obj);\r\n\r\n    this.permissions = obj.permissions || [];\r\n    if (!Array.isArray(this.permissions)) {\r\n      this.permissions = [this.permissions];\r\n    }\r\n  }\r\n\r\n  get parentName(): string | null {\r\n    return \"characteristic\";\r\n  }\r\n\r\n  public addPermission(param: any) {\r\n    if (!this.permissions.includes(param)) {\r\n      this.permissions.push(param);\r\n    }\r\n  }\r\n\r\n  public removePermission(param: any) {\r\n    this.permissions = this.permissions.filter ((elm: any ) => {\r\n      return elm !== param;\r\n    });\r\n  }\r\n\r\n  public toJSON() {\r\n    const obj: any = super.toJSON();\r\n\r\n    if (this.permissions.length > 0) {\r\n      obj.permissions = this.permissions;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  public write(dataArray: any) {\r\n    this.characteristic.service.peripheral.Obniz.send({\r\n      ble: {\r\n        peripheral: {\r\n          write_descriptor: {\r\n            service_uuid: BleHelper.uuidFilter(\r\n              this.characteristic.service.uuid,\r\n            ),\r\n            characteristic_uuid: BleHelper.uuidFilter(this.characteristic.uuid),\r\n            descriptor_uuid: this.uuid,\r\n            data: dataArray,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public read() {\r\n    this.characteristic.service.peripheral.Obniz.send({\r\n      ble: {\r\n        peripheral: {\r\n          read_descriptor: {\r\n            service_uuid: BleHelper.uuidFilter(\r\n              this.characteristic.service.uuid,\r\n            ),\r\n            characteristic_uuid: BleHelper.uuidFilter(this.characteristic.uuid),\r\n            descriptor_uuid: this.uuid,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default BleDescriptor;\r\n"]}