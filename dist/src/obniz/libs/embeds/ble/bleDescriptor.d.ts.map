{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleDescriptor.ts"],"names":[],"mappings":"AAAA,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAG1D,cAAM,aAAc,SAAQ,oBAAoB;IACvC,WAAW,EAAE,GAAG,CAAC;IACjB,cAAc,EAAE,GAAG,CAAC;IACpB,IAAI,EAAE,GAAG,CAAC;gBAEL,GAAG,EAAE,GAAG;IASpB,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAEM,aAAa,CAAC,KAAK,EAAE,GAAG;IAMxB,gBAAgB,CAAC,KAAK,EAAE,GAAG;IAM3B,MAAM;IASN,KAAK,CAAC,SAAS,EAAE,GAAG;IAiBpB,IAAI;CAeZ;AAED,eAAe,aAAa,CAAC","file":"bleDescriptor.d.ts","sourcesContent":["import BleAttributeAbstract from \"./bleAttributeAbstract\";\nimport BleHelper from \"./bleHelper\";\n\nclass BleDescriptor extends BleAttributeAbstract {\n  public permissions: any;\n  public characteristic: any;\n  public uuid: any;\n\n  constructor(obj: any) {\n    super(obj);\n\n    this.permissions = obj.permissions || [];\n    if (!Array.isArray(this.permissions)) {\n      this.permissions = [this.permissions];\n    }\n  }\n\n  get parentName(): string | null {\n    return \"characteristic\";\n  }\n\n  public addPermission(param: any) {\n    if (!this.permissions.includes(param)) {\n      this.permissions.push(param);\n    }\n  }\n\n  public removePermission(param: any) {\n    this.permissions = this.permissions.filter ((elm: any ) => {\n      return elm !== param;\n    });\n  }\n\n  public toJSON() {\n    const obj: any = super.toJSON();\n\n    if (this.permissions.length > 0) {\n      obj.permissions = this.permissions;\n    }\n    return obj;\n  }\n\n  public write(dataArray: any) {\n    this.characteristic.service.peripheral.Obniz.send({\n      ble: {\n        peripheral: {\n          write_descriptor: {\n            service_uuid: BleHelper.uuidFilter(\n              this.characteristic.service.uuid,\n            ),\n            characteristic_uuid: BleHelper.uuidFilter(this.characteristic.uuid),\n            descriptor_uuid: this.uuid,\n            data: dataArray,\n          },\n        },\n      },\n    });\n  }\n\n  public read() {\n    this.characteristic.service.peripheral.Obniz.send({\n      ble: {\n        peripheral: {\n          read_descriptor: {\n            service_uuid: BleHelper.uuidFilter(\n              this.characteristic.service.uuid,\n            ),\n            characteristic_uuid: BleHelper.uuidFilter(this.characteristic.uuid),\n            descriptor_uuid: this.uuid,\n          },\n        },\n      },\n    });\n  }\n}\n\nexport default BleDescriptor;\n"]}