{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleAdvertisementBuilder.ts"],"names":[],"mappings":"AAEA,cAAM,uBAAuB;IACpB,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;gBAEL,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IA6B1B,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAI3B,MAAM,CAAC,IAAI,EAAE,GAAG;IAIhB,KAAK;IAoBL,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAUpC,qBAAqB,CAAC,IAAI,EAAE,GAAG;IAI/B,oBAAoB,CAAC,IAAI,EAAE,GAAG;IAI9B,2BAA2B,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAQvD,OAAO,CAAC,IAAI,EAAE,GAAG;IAcjB,WAAW,CAAC,IAAI,EAAE,GAAG,GAAG,MAAM,EAAE;IAmBhC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAiB9D,cAAc,CAAC,IAAI,EAAE,GAAG;IAsBxB,QAAQ,CAAC,IAAI,EAAE,GAAG;IAMlB,gCAAgC;IAIhC,gCAAgC;IAIhC,wBAAwB;IAIxB,wBAAwB;IAIxB,kBAAkB;CAG1B;AAED,eAAe,uBAAuB,CAAC","file":"bleAdvertisementBuilder.d.ts","sourcesContent":["import BleHelper from \"./bleHelper\";\n\nclass BleAdvertisementBuilder {\n  public Obniz: any;\n  public rows: any;\n\n  constructor(Obniz: any, json: any) {\n    this.Obniz = Obniz;\n    this.rows = {};\n\n    if (json) {\n      if (json.localName) {\n        this.setCompleteLocalName(json.localName);\n      }\n      if (\n        json.manufacturerData &&\n        json.manufacturerData.companyCode &&\n        json.manufacturerData.data\n      ) {\n        this.setManufacturerSpecificData(\n          json.manufacturerData.companyCode,\n          json.manufacturerData.data,\n        );\n      }\n      if (json.serviceUuids) {\n        for (const uuid of json.serviceUuids) {\n          this.setUuid(uuid);\n        }\n      }\n    }\n    if (typeof this.extendEvalJson === \"function\") {\n      this.extendEvalJson(json);\n    }\n  }\n\n  public setRow(type: any, data: any) {\n    this.rows[type] = data;\n  }\n\n  public getRow(type: any) {\n    return this.rows[type] || [];\n  }\n\n  public build() {\n    const data: any = [];\n    for (const key in this.rows) {\n      if (this.rows[key].length === 0) {\n        continue;\n      }\n\n      data.push(this.rows[key].length + 1);\n      data.push(parseInt(key));\n      Array.prototype.push.apply(data, this.rows[key]);\n    }\n    if (data.length > 31) {\n      this.Obniz.error(\n        \"Too large data. Advertise/ScanResponse data are must be less than 32 byte.\",\n      );\n    }\n\n    return data;\n  }\n\n  public setStringData(type: any, string: any) {\n    const data: any = [];\n\n    for (let i = 0; i < string.length; i++) {\n      data.push(string.charCodeAt(i));\n    }\n\n    this.setRow(type, data);\n  }\n\n  public setShortenedLocalName(name: any) {\n    this.setStringData(0x08, name);\n  }\n\n  public setCompleteLocalName(name: any) {\n    this.setStringData(0x09, name);\n  }\n\n  public setManufacturerSpecificData(companyCode: any, data: any) {\n    const row: any = [];\n    row.push(companyCode & 0xff);\n    row.push((companyCode >> 8) & 0xff);\n    Array.prototype.push.apply(row, data);\n    this.setRow(0xff, row);\n  }\n\n  public setUuid(uuid: any) {\n    const uuidData: number[] = this.convertUuid(uuid);\n    let type: any;\n    if (uuidData.length === 16) {\n      type = 0x06;\n    } else if (uuidData.length === 4) {\n      type = 0x04;\n\n    } else if (uuidData.length === 2) {\n      type = 0x02;\n    }\n    this.setRow(type, uuidData);\n  }\n\n  public convertUuid(uuid: any): number[] {\n    const uuidNumeric: any = BleHelper.uuidFilter(uuid);\n    if (\n      uuidNumeric.length !== 32 &&\n      uuidNumeric.length !== 8 &&\n      uuidNumeric.length !== 4\n    ) {\n      this.Obniz.error(\n        \"BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)\",\n      );\n    }\n\n    const data: any = [];\n    for (let i = uuidNumeric.length; i > 1; i -= 2) {\n      data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));\n    }\n    return data;\n  }\n\n  public setIbeaconData(uuid: any, major: any, minor: any, txPower: any) {\n    const data: any = [];\n    data.push(0x02, 0x15); // fixed data\n\n    const uuidData: any = this.convertUuid(uuid);\n    Array.prototype.push.apply(data, uuidData);\n\n    data.push((major >> 8) & 0xff);\n    data.push((major >> 0) & 0xff);\n    data.push((minor >> 8) & 0xff);\n    data.push((minor >> 0) & 0xff);\n    data.push((txPower >> 0) & 0xff);\n\n    this.setManufacturerSpecificData(0x004c, data);\n    return;\n  }\n\n  public extendEvalJson(json: any) {\n    if (json) {\n      if (json.flags) {\n        if (json.flags.includes(\"limited_discoverable_mode\")) {\n          this.setLeLimitedDiscoverableModeFlag();\n        }\n        if (json.flags.includes(\"general_discoverable_mode\")) {\n          this.setLeGeneralDiscoverableModeFlag();\n        }\n        if (json.flags.includes(\"br_edr_not_supported\")) {\n          this.setBrEdrNotSupportedFlag();\n        }\n        if (json.flags.includes(\"le_br_edr_controller\")) {\n          this.setLeBrEdrControllerFlag();\n        }\n        if (json.flags.includes(\"le_br_edr_host\")) {\n          this.setLeBrEdrHostFlag();\n        }\n      }\n    }\n  }\n\n  public setFlags(flag: any) {\n    const data: any = this.getRow(0x01);\n    data[0] = (data[0] || 0) | flag;\n    this.setRow(0x01, data);\n  }\n\n  public setLeLimitedDiscoverableModeFlag() {\n    this.setFlags(0x01);\n  }\n\n  public setLeGeneralDiscoverableModeFlag() {\n    this.setFlags(0x02);\n  }\n\n  public setBrEdrNotSupportedFlag() {\n    this.setFlags(0x04);\n  }\n\n  public setLeBrEdrControllerFlag() {\n    this.setFlags(0x08);\n  }\n\n  public setLeBrEdrHostFlag() {\n    this.setFlags(0x10);\n  }\n}\n\nexport default BleAdvertisementBuilder;\n"]}