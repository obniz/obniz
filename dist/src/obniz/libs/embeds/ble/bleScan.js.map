{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleScan.ts"],"names":[],"mappings":"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","file":"bleScan.js","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport BleHelper from \"./bleHelper\";\n\nclass BleScan {\n  public scanTarget: any;\n  public Obniz: any;\n  public emitter: any;\n  public scanedPeripherals: any;\n\n  constructor(Obniz: any) {\n    this.scanTarget = null;\n    this.Obniz = Obniz;\n    this.emitter = new emitter();\n\n    this.scanedPeripherals = [];\n  }\n\n  public start(target: any, settings: any) {\n    const obj: any = {};\n    obj.ble = {};\n    obj.ble.scan = {\n      //    \"targetUuid\" : settings && settings.targetUuid ? settings.targetUuid : null,\n      //    \"interval\" : settings && settings.interval ? settings.interval : 30,\n      duration: settings && settings.duration ? settings.duration : 30,\n    };\n    if (settings && settings.duplicate) {\n      throw new Error(\n        `duplicate property can only be used with obnizOS3 or later`,\n      );\n    }\n\n    this.scanTarget = target;\n    if (\n      this.scanTarget &&\n      this.scanTarget.uuids &&\n      Array.isArray(this.scanTarget.uuids)\n    ) {\n      this.scanTarget.uuids = this.scanTarget.uuids.map ((elm: any ) => {\n        return BleHelper.uuidFilter(elm);\n      });\n    }\n    this.scanedPeripherals = [];\n    this.Obniz.send(obj);\n  }\n\n  public startOneWait(target: any, settings: any) {\n    let state: any = 0;\n\n    return new Promise ((resolve: any ) => {\n      this.emitter.once(\"onfind\", (param: any ) => {\n        if (state === 0) {\n          state = 1;\n          this.end();\n          resolve(param);\n        }\n      });\n\n      this.emitter.once(\"onfinish\", () => {\n        if (state === 0) {\n          state = 1;\n          resolve(null);\n        }\n      });\n\n      this.start(target, settings);\n    });\n  }\n\n  public startAllWait(target: any, settings: any) {\n    return new Promise ((resolve: any ) => {\n      this.emitter.once(\"onfinish\", () => {\n        resolve(this.scanedPeripherals);\n      });\n\n      this.start(target, settings);\n    });\n  }\n\n  public end() {\n    const obj: any = {};\n    obj.ble = {};\n    obj.ble.scan = null;\n    this.Obniz.send(obj);\n  }\n\n  public isTarget(peripheral: any) {\n    if (\n      this.scanTarget &&\n      this.scanTarget.localName &&\n      peripheral.localName !== this.scanTarget.localName\n    ) {\n      return false;\n    }\n    if (this.scanTarget && this.scanTarget.uuids) {\n      const uuids: any = peripheral.advertisementServiceUuids().map ((e: any ) => {\n        return BleHelper.uuidFilter(e);\n      });\n      for (const uuid of this.scanTarget.uuids) {\n        if (!uuids.includes(uuid)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public onfinish(scanedPeripherals: any) {\n  } // dummy\n  public onfind(params: any) {\n  } // dummy\n\n  public notifyFromServer(notifyName: any, params: any) {\n    switch (notifyName) {\n      case \"onfind\": {\n        if (this.isTarget(params)) {\n          this.scanedPeripherals.push(params);\n          this.emitter.emit(notifyName, params);\n          this.onfind(params);\n        }\n        break;\n      }\n      case \"onfinish\": {\n        this.emitter.emit(notifyName, this.scanedPeripherals);\n        this.onfinish(this.scanedPeripherals);\n        break;\n      }\n    }\n  }\n}\n\nexport default BleScan;\n"]}