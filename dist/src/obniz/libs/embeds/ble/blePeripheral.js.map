{"version":3,"sources":["../src/obniz/libs/embeds/ble/blePeripheral.ts"],"names":[],"mappings":"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","file":"blePeripheral.js","sourcesContent":["import BleHelper from \"./bleHelper\";\nimport BleService from \"./bleService\";\n\nclass BlePeripheral {\n  public Obniz: any;\n  public _services: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this._services = [];\n  }\n\n  get services() {\n    return this._services;\n  }\n\n  public addService(obj: any) {\n    if (!(obj instanceof BleService)) {\n      obj = new BleService(obj);\n    }\n    this._services.push(obj);\n    obj.peripheral = this;\n    this.Obniz.send({ble: {peripheral: {services: [obj]}}});\n  }\n\n  public setJson(json: any) {\n    if (json.services) {\n      for (const service of json.services) {\n        this.addService(service);\n      }\n    }\n  }\n\n  public getService(uuid: any) {\n    uuid = BleHelper.uuidFilter(uuid);\n    return this._services\n      .filter((element: any) => {\n        return BleHelper.uuidFilter(element.uuid) === uuid;\n      })\n      .shift();\n  }\n\n  public removeService(uuid: any) {\n    this._services = this._services.filter ((element: any ) => {\n      return BleHelper.uuidFilter(element.uuid) !== uuid;\n    });\n  }\n\n  public stopAllService() {\n    this.Obniz.send({\n      ble: {\n        peripheral: null,\n      },\n    });\n    this._services = [];\n  }\n\n  public toJSON() {\n    return {\n      services: this._services,\n    };\n  }\n\n  public findCharacteristic(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\n    const s: any = this.getService(serviceUuid);\n    if (s) {\n      return s.getCharacteristic(characteristicUuid);\n    }\n    return null;\n  }\n\n  public findDescriptor(param: any) {\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\n    const c: any = this.findCharacteristic(param);\n    if (c) {\n      return c.getDescriptor(descriptorUuid);\n    }\n    return null;\n  }\n\n  public end() {\n    this.Obniz.send({ble: {peripheral: null}});\n  }\n\n  public onconnectionupdates() {\n  }\n\n  public onerror() {\n  }\n}\n\nexport default BlePeripheral;\n"]}