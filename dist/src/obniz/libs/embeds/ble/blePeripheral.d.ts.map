{"version":3,"sources":["../src/obniz/libs/embeds/ble/blePeripheral.ts"],"names":[],"mappings":"AAGA,cAAM,aAAa;IACV,KAAK,EAAE,GAAG,CAAC;IACX,SAAS,EAAE,GAAG,CAAC;gBAEV,KAAK,EAAE,GAAG;IAKtB,IAAI,QAAQ,QAEX;IAEM,UAAU,CAAC,GAAG,EAAE,GAAG;IASnB,OAAO,CAAC,IAAI,EAAE,GAAG;IAQjB,UAAU,CAAC,IAAI,EAAE,GAAG;IASpB,aAAa,CAAC,IAAI,EAAE,GAAG;IAMvB,cAAc;IASd,MAAM;;;IAMN,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAU7B,cAAc,CAAC,KAAK,EAAE,GAAG;IASzB,GAAG;IAIH,mBAAmB;IAGnB,OAAO;CAEf;AAED,eAAe,aAAa,CAAC","file":"blePeripheral.d.ts","sourcesContent":["import BleHelper from \"./bleHelper\";\r\nimport BleService from \"./bleService\";\r\n\r\nclass BlePeripheral {\r\n  public Obniz: any;\r\n  public _services: any;\r\n\r\n  constructor(Obniz: any) {\r\n    this.Obniz = Obniz;\r\n    this._services = [];\r\n  }\r\n\r\n  get services() {\r\n    return this._services;\r\n  }\r\n\r\n  public addService(obj: any) {\r\n    if (!(obj instanceof BleService)) {\r\n      obj = new BleService(obj);\r\n    }\r\n    this._services.push(obj);\r\n    obj.peripheral = this;\r\n    this.Obniz.send({ble: {peripheral: {services: [obj]}}});\r\n  }\r\n\r\n  public setJson(json: any) {\r\n    if (json.services) {\r\n      for (const service of json.services) {\r\n        this.addService(service);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getService(uuid: any) {\r\n    uuid = BleHelper.uuidFilter(uuid);\r\n    return this._services\r\n      .filter((element: any) => {\r\n        return BleHelper.uuidFilter(element.uuid) === uuid;\r\n      })\r\n      .shift();\r\n  }\r\n\r\n  public removeService(uuid: any) {\r\n    this._services = this._services.filter ((element: any ) => {\r\n      return BleHelper.uuidFilter(element.uuid) !== uuid;\r\n    });\r\n  }\r\n\r\n  public stopAllService() {\r\n    this.Obniz.send({\r\n      ble: {\r\n        peripheral: null,\r\n      },\r\n    });\r\n    this._services = [];\r\n  }\r\n\r\n  public toJSON() {\r\n    return {\r\n      services: this._services,\r\n    };\r\n  }\r\n\r\n  public findCharacteristic(param: any) {\r\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\r\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\r\n    const s: any = this.getService(serviceUuid);\r\n    if (s) {\r\n      return s.getCharacteristic(characteristicUuid);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public findDescriptor(param: any) {\r\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\r\n    const c: any = this.findCharacteristic(param);\r\n    if (c) {\r\n      return c.getDescriptor(descriptorUuid);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public end() {\r\n    this.Obniz.send({ble: {peripheral: null}});\r\n  }\r\n\r\n  public onconnectionupdates() {\r\n  }\r\n\r\n  public onerror() {\r\n  }\r\n}\r\n\r\nexport default BlePeripheral;\r\n"]}