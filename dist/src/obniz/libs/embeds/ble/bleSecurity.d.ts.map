{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleSecurity.ts"],"names":[],"mappings":"AAGA,cAAM,WAAW;IACR,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;gBAER,KAAK,EAAE,GAAG;IAKf,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IA+ClC,uBAAuB,CAAC,iBAAiB,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAWjE,OAAO,CAAC,SAAS,EAAE,GAAG;IA0BtB,wBAAwB,CAAC,KAAK,EAAE,GAAG;IAenC,iBAAiB,CAAC,QAAQ,EAAE,GAAG;IA0B/B,aAAa,CAAC,IAAI,EAAE,GAAG;IAcvB,uBAAuB;IAUvB,OAAO,CAAC,MAAM,EAAE,GAAG;IAGnB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAQrD;AAED,eAAe,WAAW,CAAC","file":"bleSecurity.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport semver = require(\"semver\");\n\nclass BleSecurity {\n  public Obniz: any;\n  public emitter: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this.emitter = new emitter();\n  }\n\n  public setModeLevel(mode: any, level: any) {\n    let auth: any;\n    let keys: any;\n    let indicateSecurityLevel: any;\n\n    if (mode === 1) {\n      if (level === 1) {\n        auth = [];\n        indicateSecurityLevel = 0; // no pairing request\n        keys = [\"LTK\", \"IRK\"];\n      } else if (level === 2) {\n        auth = [\"bonding\"];\n        indicateSecurityLevel = 2;\n        keys = [\"LTK\", \"IRK\"];\n      } else if (level === 3) {\n        // TODO\n        // auth = ['bonding','mitm'];\n        // indicateSecurityLevel = 3;\n        // keys = ['LTK', 'IRK'];\n      }\n    } else if (mode === 2) {\n      if (level === 1) {\n        // TODO\n        // auth = [];\n        // keys = ['LTK', 'IRK','CSRK'];\n      } else if (level === 2) {\n        // TODO\n        // auth = ['bonding'];\n        // keys = ['LTK', 'IRK','CSRK'];\n      }\n    }\n\n    if (\n      auth !== undefined &&\n      indicateSecurityLevel !== undefined &&\n      keys !== undefined\n    ) {\n      this.setAuth(auth);\n      this.setIndicateSecurityLevel(indicateSecurityLevel);\n      this.setEnableKeyTypes(keys);\n    } else {\n      const msg: any = `BLE security mode${mode}, level${level} is not available.`;\n      this.Obniz.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  public checkIntroducedFirmware(introducedVersion: any, functionName: any) {\n    const results: any = semver.lt(this.Obniz.firmware_ver, introducedVersion);\n    if (results) {\n      const msg: any = `${functionName} is available obniz firmware ${introducedVersion}.( your obniz version is ${\n        this.Obniz.firmware_ver\n      })`;\n      this.Obniz.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  public setAuth(authTypes: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setAuth\");\n    if (!Array.isArray(authTypes)) {\n      authTypes = [authTypes];\n    }\n    const sendTypes: any = authTypes\n      .map ((elm: any) => {\n        return elm.toLowerCase();\n      })\n      .filter((elm: any ) => {\n        return [\"mitm\", \"secure_connection\", \"bonding\"].includes(elm);\n      });\n\n    if (sendTypes.length !== authTypes.length) {\n      throw new Error(\"unknown auth type\");\n    }\n\n    this.Obniz.send({\n      ble: {\n        security: {\n          auth: authTypes,\n        },\n      },\n    });\n  }\n\n  public setIndicateSecurityLevel(level: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setIndicateSecurityLevel\");\n\n    if (typeof level !== \"number\") {\n      throw new Error(\"unknown secrity level : \" + level);\n    }\n    this.Obniz.send({\n      ble: {\n        security: {\n          indicate_security_level: level,\n        },\n      },\n    });\n  }\n\n  public setEnableKeyTypes(keyTypes: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setEnableKeyTypes\");\n    if (!Array.isArray(keyTypes)) {\n      keyTypes = [keyTypes];\n    }\n    const sendTypes: any = keyTypes\n      .map ((elm: any) => {\n        return elm.toLowerCase();\n      })\n      .filter((elm: any ) => {\n        return [\"ltk\", \"csrk\", \"irk\"].includes(elm);\n      });\n\n    if (sendTypes.length !== keyTypes.length) {\n      throw new Error(\"unknown key type\");\n    }\n\n    this.Obniz.send({\n      ble: {\n        security: {\n          key: {type: sendTypes},\n        },\n      },\n    });\n  }\n\n  public setKeyMaxSize(size: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setKeyMaxSize\");\n    if (typeof size !== \"number\") {\n      throw new Error(\"please provide key size in number\");\n    }\n    this.Obniz.send({\n      ble: {\n        security: {\n          key: {max_size: size},\n        },\n      },\n    });\n  }\n\n  public clearBondingDevicesList() {\n    this.Obniz.send({\n      ble: {\n        security: {\n          devices: {clear: true},\n        },\n      },\n    });\n  }\n\n  public onerror(params: any) {\n  } // dummy\n\n  public notifyFromServer(notifyName: any, params: any) {\n    switch (notifyName) {\n      case \"onerror\": {\n        this.onerror(params);\n        break;\n      }\n    }\n  }\n}\n\nexport default BleSecurity;\n"]}