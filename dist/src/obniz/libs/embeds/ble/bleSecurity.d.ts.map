{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleSecurity.ts"],"names":[],"mappings":"AAGA,cAAM,WAAW;IACR,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;gBAER,KAAK,EAAE,GAAG;IAKf,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IA+ClC,uBAAuB,CAAC,iBAAiB,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAWjE,OAAO,CAAC,SAAS,EAAE,GAAG;IA0BtB,wBAAwB,CAAC,KAAK,EAAE,GAAG;IAenC,iBAAiB,CAAC,QAAQ,EAAE,GAAG;IA0B/B,aAAa,CAAC,IAAI,EAAE,GAAG;IAcvB,uBAAuB;IAUvB,OAAO,CAAC,MAAM,EAAE,GAAG;IAGnB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAQrD;AAED,eAAe,WAAW,CAAC","file":"bleSecurity.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\r\nimport semver = require(\"semver\");\r\n\r\nclass BleSecurity {\r\n  public Obniz: any;\r\n  public emitter: any;\r\n\r\n  constructor(Obniz: any) {\r\n    this.Obniz = Obniz;\r\n    this.emitter = new emitter();\r\n  }\r\n\r\n  public setModeLevel(mode: any, level: any) {\r\n    let auth: any;\r\n    let keys: any;\r\n    let indicateSecurityLevel: any;\r\n\r\n    if (mode === 1) {\r\n      if (level === 1) {\r\n        auth = [];\r\n        indicateSecurityLevel = 0; // no pairing request\r\n        keys = [\"LTK\", \"IRK\"];\r\n      } else if (level === 2) {\r\n        auth = [\"bonding\"];\r\n        indicateSecurityLevel = 2;\r\n        keys = [\"LTK\", \"IRK\"];\r\n      } else if (level === 3) {\r\n        // TODO\r\n        // auth = ['bonding','mitm'];\r\n        // indicateSecurityLevel = 3;\r\n        // keys = ['LTK', 'IRK'];\r\n      }\r\n    } else if (mode === 2) {\r\n      if (level === 1) {\r\n        // TODO\r\n        // auth = [];\r\n        // keys = ['LTK', 'IRK','CSRK'];\r\n      } else if (level === 2) {\r\n        // TODO\r\n        // auth = ['bonding'];\r\n        // keys = ['LTK', 'IRK','CSRK'];\r\n      }\r\n    }\r\n\r\n    if (\r\n      auth !== undefined &&\r\n      indicateSecurityLevel !== undefined &&\r\n      keys !== undefined\r\n    ) {\r\n      this.setAuth(auth);\r\n      this.setIndicateSecurityLevel(indicateSecurityLevel);\r\n      this.setEnableKeyTypes(keys);\r\n    } else {\r\n      const msg: any = `BLE security mode${mode}, level${level} is not available.`;\r\n      this.Obniz.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  public checkIntroducedFirmware(introducedVersion: any, functionName: any) {\r\n    const results: any = semver.lt(this.Obniz.firmware_ver, introducedVersion);\r\n    if (results) {\r\n      const msg: any = `${functionName} is available obniz firmware ${introducedVersion}.( your obniz version is ${\r\n        this.Obniz.firmware_ver\r\n      })`;\r\n      this.Obniz.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  public setAuth(authTypes: any) {\r\n    this.checkIntroducedFirmware(\"1.1.0\", \"setAuth\");\r\n    if (!Array.isArray(authTypes)) {\r\n      authTypes = [authTypes];\r\n    }\r\n    const sendTypes: any = authTypes\r\n      .map ((elm: any) => {\r\n        return elm.toLowerCase();\r\n      })\r\n      .filter((elm: any ) => {\r\n        return [\"mitm\", \"secure_connection\", \"bonding\"].includes(elm);\r\n      });\r\n\r\n    if (sendTypes.length !== authTypes.length) {\r\n      throw new Error(\"unknown auth type\");\r\n    }\r\n\r\n    this.Obniz.send({\r\n      ble: {\r\n        security: {\r\n          auth: authTypes,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public setIndicateSecurityLevel(level: any) {\r\n    this.checkIntroducedFirmware(\"1.1.0\", \"setIndicateSecurityLevel\");\r\n\r\n    if (typeof level !== \"number\") {\r\n      throw new Error(\"unknown secrity level : \" + level);\r\n    }\r\n    this.Obniz.send({\r\n      ble: {\r\n        security: {\r\n          indicate_security_level: level,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public setEnableKeyTypes(keyTypes: any) {\r\n    this.checkIntroducedFirmware(\"1.1.0\", \"setEnableKeyTypes\");\r\n    if (!Array.isArray(keyTypes)) {\r\n      keyTypes = [keyTypes];\r\n    }\r\n    const sendTypes: any = keyTypes\r\n      .map ((elm: any) => {\r\n        return elm.toLowerCase();\r\n      })\r\n      .filter((elm: any ) => {\r\n        return [\"ltk\", \"csrk\", \"irk\"].includes(elm);\r\n      });\r\n\r\n    if (sendTypes.length !== keyTypes.length) {\r\n      throw new Error(\"unknown key type\");\r\n    }\r\n\r\n    this.Obniz.send({\r\n      ble: {\r\n        security: {\r\n          key: {type: sendTypes},\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public setKeyMaxSize(size: any) {\r\n    this.checkIntroducedFirmware(\"1.1.0\", \"setKeyMaxSize\");\r\n    if (typeof size !== \"number\") {\r\n      throw new Error(\"please provide key size in number\");\r\n    }\r\n    this.Obniz.send({\r\n      ble: {\r\n        security: {\r\n          key: {max_size: size},\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public clearBondingDevicesList() {\r\n    this.Obniz.send({\r\n      ble: {\r\n        security: {\r\n          devices: {clear: true},\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public onerror(params: any) {\r\n  } // dummy\r\n\r\n  public notifyFromServer(notifyName: any, params: any) {\r\n    switch (notifyName) {\r\n      case \"onerror\": {\r\n        this.onerror(params);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BleSecurity;\r\n"]}