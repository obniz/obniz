{"version":3,"sources":["../src/obniz/libs/embeds/ble/ble.ts"],"names":[],"mappings":"AASA,cAAM,QAAQ;WAEE,kBAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAwBjD,KAAK,EAAE,GAAG,CAAC;IACX,iBAAiB,EAAE,GAAG,CAAC;IACvB,OAAO,EAAE,GAAG,CAAC;IACb,cAAc,EAAE,GAAG,CAAC;IACpB,UAAU,EAAE,GAAG,CAAC;IAChB,UAAU,EAAE,GAAG,CAAC;IAChB,UAAU,EAAE,GAAG,CAAC;IAChB,aAAa,EAAE,GAAG,CAAC;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,GAAG,CAAC;gBAET,KAAK,EAAE,GAAG;IAkBT,QAAQ;IAGd,MAAM;IAGN,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAMnC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAMnD,cAAc,CAAC,OAAO,EAAE,GAAG;IAS3B,QAAQ,CAAC,GAAG,EAAE,GAAG;CA0MzB;AAED,eAAe,QAAQ,CAAC","file":"ble.d.ts","sourcesContent":["import BleAdvertisement from \"./bleAdvertisement\";\nimport BleCharacteristic from \"./bleCharacteristic\";\nimport BleDescriptor from \"./bleDescriptor\";\nimport BlePeripheral from \"./blePeripheral\";\nimport BleRemotePeripheral from \"./bleRemotePeripheral\";\nimport BleScan from \"./bleScan\";\nimport BleSecurity from \"./bleSecurity\";\nimport BleService from \"./bleService\";\n\nclass ObnizBLE {\n\n  public static _dataArray2uuidHex(data: any, reverse: any) {\n    let uuid: any = [];\n    for (let i = 0; i < data.length; i++) {\n      uuid.push((\"00\" + data[i].toString(16).toLowerCase()).slice(-2));\n    }\n    if (reverse) {\n      uuid = uuid.reverse();\n    }\n    let str: any = uuid.join(\"\");\n    if (uuid.length >= 16) {\n      str =\n        str.slice(0, 8) +\n        \"-\" +\n        str.slice(8, 12) +\n        \"-\" +\n        str.slice(12, 16) +\n        \"-\" +\n        str.slice(16, 20) +\n        \"-\" +\n        str.slice(20);\n    }\n    return str;\n  }\n\n  public Obniz: any;\n  public remotePeripherals: any;\n  public service: any;\n  public characteristic: any;\n  public descriptor: any;\n  public peripheral: any;\n  public scanTarget: any;\n  public advertisement: any;\n  public scan: any;\n  public security: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this.remotePeripherals = [];\n\n    this.service = BleService;\n    this.characteristic = BleCharacteristic;\n    this.descriptor = BleDescriptor;\n    this.peripheral = new BlePeripheral(Obniz);\n\n    this.scanTarget = null;\n\n    this.advertisement = new BleAdvertisement(Obniz);\n    this.scan = new BleScan(Obniz);\n    this.security = new BleSecurity(Obniz);\n    this._reset();\n  }\n\n  // dummy\n  public async initWait() {\n  }\n\n  public _reset() {\n  }\n\n  public directConnect(uuid: any, addressType: any) {\n    throw new Error(\n      \"directConnect cannot use obnizOS < 3.0.0. Please update obnizOS\",\n    );\n  }\n\n  public async directConnectWait(uuid: any, addressType: any) {\n    throw new Error(\n      \"directConnectWait cannot use obnizOS < 3.0.0. Please update obnizOS\",\n    );\n  }\n\n  public findPeripheral(address: any) {\n    for (const key in this.remotePeripherals) {\n      if (this.remotePeripherals[key].address === address) {\n        return this.remotePeripherals[key];\n      }\n    }\n    return null;\n  }\n\n  public notified(obj: any) {\n    if (obj.scan_result) {\n      let val: any = this.findPeripheral(obj.scan_result.address);\n      if (!val) {\n        val = new BleRemotePeripheral(this.Obniz, obj.scan_result.address);\n        this.remotePeripherals.push(val);\n      }\n      val.discoverdOnRemote = true;\n      val.setParams(obj.scan_result);\n\n      this.scan.notifyFromServer(\"onfind\", val);\n    }\n\n    if (obj.scan_result_finish) {\n      this.scan.notifyFromServer(\"onfinish\");\n    }\n\n    const remotePeripheralCallbackFunc: any = (val: any, func: any, type: any) => {\n      let target: any = null;\n      if (val === undefined) {\n        return;\n      }\n      const p: any = this.findPeripheral(val.address);\n      if (!p) {\n        return;\n      }\n      if (type === \"peripheral\") {\n        target = p;\n      } else if (type === \"service\") {\n        target = p.findService(val);\n      } else if (type === \"characteristic\") {\n        target = p.findCharacteristic(val);\n      } else if (type === \"descriptor\") {\n        target = p.findDescriptor(val);\n      }\n      if (!target) {\n        return;\n      }\n      func(val, target);\n    };\n\n    const paramList: any = {\n      status_update: {name: \"statusupdate\", obj: \"peripheral\"},\n      get_service_result: {name: \"discover\", obj: \"peripheral\"},\n      get_service_result_finish: {\n        name: \"discoverfinished\",\n        obj: \"peripheral\",\n      },\n      get_characteristic_result: {name: \"discover\", obj: \"service\"},\n      get_characteristic_result_finish: {\n        name: \"discoverfinished\",\n        obj: \"service\",\n      },\n      write_characteristic_result: {name: \"onwrite\", obj: \"characteristic\"},\n      read_characteristic_result: {name: \"onread\", obj: \"characteristic\"},\n      register_notify_characteristic_result: {\n        name: \"onregisternotify\",\n        obj: \"characteristic\",\n      },\n      // for typo\n      register_nofity_characteristic_result: {\n        name: \"onregisternotify\",\n        obj: \"characteristic\",\n      },\n      unregister_notify_characteristic_result: {\n        name: \"onunregisternotify\",\n        obj: \"characteristic\",\n      },\n      // for typo\n      unregister_nofity_characteristic_result: {\n        name: \"onunregisternotify\",\n        obj: \"characteristic\",\n      },\n      notify_characteristic: {name: \"onnotify\", obj: \"characteristic\"},\n      // for typo\n      nofity_characteristic: {name: \"onnotify\", obj: \"characteristic\"},\n      get_descriptor_result: {name: \"discover\", obj: \"characteristic\"},\n      get_descriptor_result_finish: {\n        name: \"discoverfinished\",\n        obj: \"characteristic\",\n      },\n      write_descriptor_result: {name: \"onwrite\", obj: \"descriptor\"},\n      read_descriptor_result: {name: \"onread\", obj: \"descriptor\"},\n    };\n\n    for (const paramListKey in paramList) {\n      remotePeripheralCallbackFunc(\n        obj[paramListKey],\n        (val: any, bleobj: any) => {\n          bleobj.notifyFromServer(paramList[paramListKey].name, val);\n        },\n        paramList[paramListKey].obj,\n      );\n    }\n\n    const callbackFunc: any = (val: any, func: any, type: any) => {\n      let target: any = null;\n      if (val === undefined) {\n        return;\n      }\n      if (type === \"peripheral\") {\n        target = this.peripheral;\n      } else if (type === \"service\") {\n        target = this.peripheral.getService(val);\n      } else if (type === \"characteristic\") {\n        target = this.peripheral.findCharacteristic(val);\n      } else if (type === \"descriptor\") {\n        target = this.peripheral.findDescriptor(val);\n      }\n      if (!target) {\n        return;\n      }\n      func(val, target);\n    };\n\n    if (obj.peripheral) {\n      callbackFunc(\n        obj.peripheral.connection_status,\n        (val: any) => {\n          this.peripheral.onconnectionupdates(val);\n        },\n        \"peripheral\",\n      );\n\n      const centralParamList: any = {\n        read_characteristic_result: {name: \"onread\", obj: \"characteristic\"},\n        write_characteristic_result: {name: \"onwrite\", obj: \"characteristic\"},\n        notify_read_characteristic: {\n          name: \"onreadfromremote\",\n          obj: \"characteristic\",\n        },\n        notify_write_characteristic: {\n          name: \"onwritefromremote\",\n          obj: \"characteristic\",\n        },\n        read_descriptor_result: {name: \"onread\", obj: \"descriptor\"},\n        write_descriptor_result: {name: \"onwrite\", obj: \"descriptor\"},\n        notify_read_descriptor: {name: \"onreadfromremote\", obj: \"descriptor\"},\n        notify_write_descriptor: {\n          name: \"onwritefromremote\",\n          obj: \"descriptor\",\n        },\n      };\n\n      for (const key in centralParamList) {\n        callbackFunc(\n          obj.peripheral[key],\n          (val: any, bleobj: any) => {\n            bleobj.notifyFromServer(centralParamList[key].name, val);\n          },\n          centralParamList[key].obj,\n        );\n      }\n    }\n\n    if (obj.error) {\n      const params: any = obj.error;\n      let handled: any = false;\n      let peripheral: any;\n      let target: any;\n      if (!params.address) {\n        peripheral = this.peripheral;\n      } else {\n        peripheral = this.findPeripheral(params.address);\n      }\n\n      if (peripheral) {\n        if (\n          params.service_uuid &&\n          params.characteristic_uuid &&\n          params.descriptor_uuid\n        ) {\n          target = peripheral.findDescriptor(params);\n        } else if (params.service_uuid && params.characteristic_uuid) {\n          target = peripheral.findCharacteristic(params);\n        } else if (params.service_uuid) {\n          target = peripheral.findService(params);\n        }\n        if (target) {\n          target.notifyFromServer(\"onerror\", params);\n          handled = true;\n        } else {\n          peripheral.onerror(params);\n          handled = true;\n        }\n      }\n\n      if ([35, 36, 37, 38, 39].includes(params.function_code)) {\n        this.security.onerror(params);\n        handled = true;\n      }\n      if (!handled) {\n        this.Obniz.error(\n          `ble ${params.message} service=${\n            params.service_uuid\n          } characteristic_uuid=${params.characteristic_uuid} descriptor_uuid=${\n            params.descriptor_uuid\n          }`,\n        );\n      }\n    }\n  }\n}\n\nexport default ObnizBLE;\n"]}