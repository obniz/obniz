{"version":3,"sources":["../src/obniz/libs/embeds/ble/ble.ts"],"names":[],"mappings":"AASA,cAAM,QAAQ;WAEE,kBAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAwBjD,KAAK,EAAE,GAAG,CAAC;IACX,iBAAiB,EAAE,GAAG,CAAC;IACvB,OAAO,EAAE,GAAG,CAAC;IACb,cAAc,EAAE,GAAG,CAAC;IACpB,UAAU,EAAE,GAAG,CAAC;IAChB,UAAU,EAAE,GAAG,CAAC;IAChB,UAAU,EAAE,GAAG,CAAC;IAChB,aAAa,EAAE,GAAG,CAAC;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,GAAG,CAAC;gBAET,KAAK,EAAE,GAAG;IAkBT,QAAQ;IAGd,MAAM;IAGN,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAMnC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAMnD,cAAc,CAAC,OAAO,EAAE,GAAG;IAS3B,QAAQ,CAAC,GAAG,EAAE,GAAG;CA0MzB;AAED,eAAe,QAAQ,CAAC","file":"ble.d.ts","sourcesContent":["import BleAdvertisement from \"./bleAdvertisement\";\r\nimport BleCharacteristic from \"./bleCharacteristic\";\r\nimport BleDescriptor from \"./bleDescriptor\";\r\nimport BlePeripheral from \"./blePeripheral\";\r\nimport BleRemotePeripheral from \"./bleRemotePeripheral\";\r\nimport BleScan from \"./bleScan\";\r\nimport BleSecurity from \"./bleSecurity\";\r\nimport BleService from \"./bleService\";\r\n\r\nclass ObnizBLE {\r\n\r\n  public static _dataArray2uuidHex(data: any, reverse: any) {\r\n    let uuid: any = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      uuid.push((\"00\" + data[i].toString(16).toLowerCase()).slice(-2));\r\n    }\r\n    if (reverse) {\r\n      uuid = uuid.reverse();\r\n    }\r\n    let str: any = uuid.join(\"\");\r\n    if (uuid.length >= 16) {\r\n      str =\r\n        str.slice(0, 8) +\r\n        \"-\" +\r\n        str.slice(8, 12) +\r\n        \"-\" +\r\n        str.slice(12, 16) +\r\n        \"-\" +\r\n        str.slice(16, 20) +\r\n        \"-\" +\r\n        str.slice(20);\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public Obniz: any;\r\n  public remotePeripherals: any;\r\n  public service: any;\r\n  public characteristic: any;\r\n  public descriptor: any;\r\n  public peripheral: any;\r\n  public scanTarget: any;\r\n  public advertisement: any;\r\n  public scan: any;\r\n  public security: any;\r\n\r\n  constructor(Obniz: any) {\r\n    this.Obniz = Obniz;\r\n    this.remotePeripherals = [];\r\n\r\n    this.service = BleService;\r\n    this.characteristic = BleCharacteristic;\r\n    this.descriptor = BleDescriptor;\r\n    this.peripheral = new BlePeripheral(Obniz);\r\n\r\n    this.scanTarget = null;\r\n\r\n    this.advertisement = new BleAdvertisement(Obniz);\r\n    this.scan = new BleScan(Obniz);\r\n    this.security = new BleSecurity(Obniz);\r\n    this._reset();\r\n  }\r\n\r\n  // dummy\r\n  public async initWait() {\r\n  }\r\n\r\n  public _reset() {\r\n  }\r\n\r\n  public directConnect(uuid: any, addressType: any) {\r\n    throw new Error(\r\n      \"directConnect cannot use obnizOS < 3.0.0. Please update obnizOS\",\r\n    );\r\n  }\r\n\r\n  public async directConnectWait(uuid: any, addressType: any) {\r\n    throw new Error(\r\n      \"directConnectWait cannot use obnizOS < 3.0.0. Please update obnizOS\",\r\n    );\r\n  }\r\n\r\n  public findPeripheral(address: any) {\r\n    for (const key in this.remotePeripherals) {\r\n      if (this.remotePeripherals[key].address === address) {\r\n        return this.remotePeripherals[key];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (obj.scan_result) {\r\n      let val: any = this.findPeripheral(obj.scan_result.address);\r\n      if (!val) {\r\n        val = new BleRemotePeripheral(this.Obniz, obj.scan_result.address);\r\n        this.remotePeripherals.push(val);\r\n      }\r\n      val.discoverdOnRemote = true;\r\n      val.setParams(obj.scan_result);\r\n\r\n      this.scan.notifyFromServer(\"onfind\", val);\r\n    }\r\n\r\n    if (obj.scan_result_finish) {\r\n      this.scan.notifyFromServer(\"onfinish\");\r\n    }\r\n\r\n    const remotePeripheralCallbackFunc: any = (val: any, func: any, type: any) => {\r\n      let target: any = null;\r\n      if (val === undefined) {\r\n        return;\r\n      }\r\n      const p: any = this.findPeripheral(val.address);\r\n      if (!p) {\r\n        return;\r\n      }\r\n      if (type === \"peripheral\") {\r\n        target = p;\r\n      } else if (type === \"service\") {\r\n        target = p.findService(val);\r\n      } else if (type === \"characteristic\") {\r\n        target = p.findCharacteristic(val);\r\n      } else if (type === \"descriptor\") {\r\n        target = p.findDescriptor(val);\r\n      }\r\n      if (!target) {\r\n        return;\r\n      }\r\n      func(val, target);\r\n    };\r\n\r\n    const paramList: any = {\r\n      status_update: {name: \"statusupdate\", obj: \"peripheral\"},\r\n      get_service_result: {name: \"discover\", obj: \"peripheral\"},\r\n      get_service_result_finish: {\r\n        name: \"discoverfinished\",\r\n        obj: \"peripheral\",\r\n      },\r\n      get_characteristic_result: {name: \"discover\", obj: \"service\"},\r\n      get_characteristic_result_finish: {\r\n        name: \"discoverfinished\",\r\n        obj: \"service\",\r\n      },\r\n      write_characteristic_result: {name: \"onwrite\", obj: \"characteristic\"},\r\n      read_characteristic_result: {name: \"onread\", obj: \"characteristic\"},\r\n      register_notify_characteristic_result: {\r\n        name: \"onregisternotify\",\r\n        obj: \"characteristic\",\r\n      },\r\n      // for typo\r\n      register_nofity_characteristic_result: {\r\n        name: \"onregisternotify\",\r\n        obj: \"characteristic\",\r\n      },\r\n      unregister_notify_characteristic_result: {\r\n        name: \"onunregisternotify\",\r\n        obj: \"characteristic\",\r\n      },\r\n      // for typo\r\n      unregister_nofity_characteristic_result: {\r\n        name: \"onunregisternotify\",\r\n        obj: \"characteristic\",\r\n      },\r\n      notify_characteristic: {name: \"onnotify\", obj: \"characteristic\"},\r\n      // for typo\r\n      nofity_characteristic: {name: \"onnotify\", obj: \"characteristic\"},\r\n      get_descriptor_result: {name: \"discover\", obj: \"characteristic\"},\r\n      get_descriptor_result_finish: {\r\n        name: \"discoverfinished\",\r\n        obj: \"characteristic\",\r\n      },\r\n      write_descriptor_result: {name: \"onwrite\", obj: \"descriptor\"},\r\n      read_descriptor_result: {name: \"onread\", obj: \"descriptor\"},\r\n    };\r\n\r\n    for (const paramListKey in paramList) {\r\n      remotePeripheralCallbackFunc(\r\n        obj[paramListKey],\r\n        (val: any, bleobj: any) => {\r\n          bleobj.notifyFromServer(paramList[paramListKey].name, val);\r\n        },\r\n        paramList[paramListKey].obj,\r\n      );\r\n    }\r\n\r\n    const callbackFunc: any = (val: any, func: any, type: any) => {\r\n      let target: any = null;\r\n      if (val === undefined) {\r\n        return;\r\n      }\r\n      if (type === \"peripheral\") {\r\n        target = this.peripheral;\r\n      } else if (type === \"service\") {\r\n        target = this.peripheral.getService(val);\r\n      } else if (type === \"characteristic\") {\r\n        target = this.peripheral.findCharacteristic(val);\r\n      } else if (type === \"descriptor\") {\r\n        target = this.peripheral.findDescriptor(val);\r\n      }\r\n      if (!target) {\r\n        return;\r\n      }\r\n      func(val, target);\r\n    };\r\n\r\n    if (obj.peripheral) {\r\n      callbackFunc(\r\n        obj.peripheral.connection_status,\r\n        (val: any) => {\r\n          this.peripheral.onconnectionupdates(val);\r\n        },\r\n        \"peripheral\",\r\n      );\r\n\r\n      const centralParamList: any = {\r\n        read_characteristic_result: {name: \"onread\", obj: \"characteristic\"},\r\n        write_characteristic_result: {name: \"onwrite\", obj: \"characteristic\"},\r\n        notify_read_characteristic: {\r\n          name: \"onreadfromremote\",\r\n          obj: \"characteristic\",\r\n        },\r\n        notify_write_characteristic: {\r\n          name: \"onwritefromremote\",\r\n          obj: \"characteristic\",\r\n        },\r\n        read_descriptor_result: {name: \"onread\", obj: \"descriptor\"},\r\n        write_descriptor_result: {name: \"onwrite\", obj: \"descriptor\"},\r\n        notify_read_descriptor: {name: \"onreadfromremote\", obj: \"descriptor\"},\r\n        notify_write_descriptor: {\r\n          name: \"onwritefromremote\",\r\n          obj: \"descriptor\",\r\n        },\r\n      };\r\n\r\n      for (const key in centralParamList) {\r\n        callbackFunc(\r\n          obj.peripheral[key],\r\n          (val: any, bleobj: any) => {\r\n            bleobj.notifyFromServer(centralParamList[key].name, val);\r\n          },\r\n          centralParamList[key].obj,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (obj.error) {\r\n      const params: any = obj.error;\r\n      let handled: any = false;\r\n      let peripheral: any;\r\n      let target: any;\r\n      if (!params.address) {\r\n        peripheral = this.peripheral;\r\n      } else {\r\n        peripheral = this.findPeripheral(params.address);\r\n      }\r\n\r\n      if (peripheral) {\r\n        if (\r\n          params.service_uuid &&\r\n          params.characteristic_uuid &&\r\n          params.descriptor_uuid\r\n        ) {\r\n          target = peripheral.findDescriptor(params);\r\n        } else if (params.service_uuid && params.characteristic_uuid) {\r\n          target = peripheral.findCharacteristic(params);\r\n        } else if (params.service_uuid) {\r\n          target = peripheral.findService(params);\r\n        }\r\n        if (target) {\r\n          target.notifyFromServer(\"onerror\", params);\r\n          handled = true;\r\n        } else {\r\n          peripheral.onerror(params);\r\n          handled = true;\r\n        }\r\n      }\r\n\r\n      if ([35, 36, 37, 38, 39].includes(params.function_code)) {\r\n        this.security.onerror(params);\r\n        handled = true;\r\n      }\r\n      if (!handled) {\r\n        this.Obniz.error(\r\n          `ble ${params.message} service=${\r\n            params.service_uuid\r\n          } characteristic_uuid=${params.characteristic_uuid} descriptor_uuid=${\r\n            params.descriptor_uuid\r\n          }`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ObnizBLE;\r\n"]}