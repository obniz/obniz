{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleScan.ts"],"names":[],"mappings":"AAGA,cAAM,OAAO;IACJ,UAAU,EAAE,GAAG,CAAC;IAChB,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;IACb,iBAAiB,EAAE,GAAG,CAAC;gBAElB,KAAK,EAAE,GAAG;IAQf,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IA4BhC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAuBvC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAUvC,GAAG;IAOH,QAAQ,CAAC,UAAU,EAAE,GAAG;IAqBxB,QAAQ,CAAC,iBAAiB,EAAE,GAAG;IAE/B,MAAM,CAAC,MAAM,EAAE,GAAG;IAGlB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAiBrD;AAED,eAAe,OAAO,CAAC","file":"bleScan.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\r\nimport BleHelper from \"./bleHelper\";\r\n\r\nclass BleScan {\r\n  public scanTarget: any;\r\n  public Obniz: any;\r\n  public emitter: any;\r\n  public scanedPeripherals: any;\r\n\r\n  constructor(Obniz: any) {\r\n    this.scanTarget = null;\r\n    this.Obniz = Obniz;\r\n    this.emitter = new emitter();\r\n\r\n    this.scanedPeripherals = [];\r\n  }\r\n\r\n  public start(target: any, settings: any) {\r\n    const obj: any = {};\r\n    obj.ble = {};\r\n    obj.ble.scan = {\r\n      //    \"targetUuid\" : settings && settings.targetUuid ? settings.targetUuid : null,\r\n      //    \"interval\" : settings && settings.interval ? settings.interval : 30,\r\n      duration: settings && settings.duration ? settings.duration : 30,\r\n    };\r\n    if (settings && settings.duplicate) {\r\n      throw new Error(\r\n        `duplicate property can only be used with obnizOS3 or later`,\r\n      );\r\n    }\r\n\r\n    this.scanTarget = target;\r\n    if (\r\n      this.scanTarget &&\r\n      this.scanTarget.uuids &&\r\n      Array.isArray(this.scanTarget.uuids)\r\n    ) {\r\n      this.scanTarget.uuids = this.scanTarget.uuids.map ((elm: any ) => {\r\n        return BleHelper.uuidFilter(elm);\r\n      });\r\n    }\r\n    this.scanedPeripherals = [];\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public startOneWait(target: any, settings: any) {\r\n    let state: any = 0;\r\n\r\n    return new Promise ((resolve: any ) => {\r\n      this.emitter.once(\"onfind\", (param: any ) => {\r\n        if (state === 0) {\r\n          state = 1;\r\n          this.end();\r\n          resolve(param);\r\n        }\r\n      });\r\n\r\n      this.emitter.once(\"onfinish\", () => {\r\n        if (state === 0) {\r\n          state = 1;\r\n          resolve(null);\r\n        }\r\n      });\r\n\r\n      this.start(target, settings);\r\n    });\r\n  }\r\n\r\n  public startAllWait(target: any, settings: any) {\r\n    return new Promise ((resolve: any ) => {\r\n      this.emitter.once(\"onfinish\", () => {\r\n        resolve(this.scanedPeripherals);\r\n      });\r\n\r\n      this.start(target, settings);\r\n    });\r\n  }\r\n\r\n  public end() {\r\n    const obj: any = {};\r\n    obj.ble = {};\r\n    obj.ble.scan = null;\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public isTarget(peripheral: any) {\r\n    if (\r\n      this.scanTarget &&\r\n      this.scanTarget.localName &&\r\n      peripheral.localName !== this.scanTarget.localName\r\n    ) {\r\n      return false;\r\n    }\r\n    if (this.scanTarget && this.scanTarget.uuids) {\r\n      const uuids: any = peripheral.advertisementServiceUuids().map ((e: any ) => {\r\n        return BleHelper.uuidFilter(e);\r\n      });\r\n      for (const uuid of this.scanTarget.uuids) {\r\n        if (!uuids.includes(uuid)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public onfinish(scanedPeripherals: any) {\r\n  } // dummy\r\n  public onfind(params: any) {\r\n  } // dummy\r\n\r\n  public notifyFromServer(notifyName: any, params: any) {\r\n    switch (notifyName) {\r\n      case \"onfind\": {\r\n        if (this.isTarget(params)) {\r\n          this.scanedPeripherals.push(params);\r\n          this.emitter.emit(notifyName, params);\r\n          this.onfind(params);\r\n        }\r\n        break;\r\n      }\r\n      case \"onfinish\": {\r\n        this.emitter.emit(notifyName, this.scanedPeripherals);\r\n        this.onfinish(this.scanedPeripherals);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BleScan;\r\n"]}