{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleRemotePeripheral.ts"],"names":[],"mappings":"AAIA,cAAM,mBAAmB;IAChB,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,WAAW,EAAE,GAAG,CAAC;IACjB,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,GAAG,CAAC;IACd,SAAS,EAAE,GAAG,CAAC;IACf,IAAI,EAAE,GAAG,CAAC;IACV,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,mBAAmB,EAAE,GAAG,CAAC;IACzB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;gBAER,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAyBpC,IAAI,QAAQ,QAEX;IAED;;;OAGG;IACI,QAAQ;IAUR,SAAS,CAAC,GAAG,EAAE,GAAG;IAUlB,oBAAoB;IA8BpB,aAAa,CAAC,IAAI,EAAE,GAAG;IAYvB,YAAY;IAYZ,UAAU;IAwCV,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAWlD,yBAAyB;IAWzB,OAAO;IAYP,WAAW;IAaX,UAAU;IAWV,cAAc;IAad,UAAU,CAAC,IAAI,EAAE,GAAG;IAUpB,WAAW,CAAC,KAAK,EAAE,GAAG;IAKtB,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAU7B,cAAc,CAAC,KAAK,EAAE,GAAG;IASzB,mBAAmB;IAWnB,uBAAuB;IAYjB,sBAAsB;IA4B5B,SAAS;IAGT,YAAY;IAGZ,iBAAiB,CAAC,KAAK,EAAE,GAAG;IAG5B,yBAAyB,CAAC,QAAQ,EAAE,GAAG;IAGvC,UAAU;IAGV,kBAAkB;IAGZ,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAuCnD,OAAO;CAEf;AAED,eAAe,mBAAmB,CAAC","file":"bleRemotePeripheral.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport BleHelper from \"./bleHelper\";\nimport BleRemoteService from \"./bleRemoteService\";\n\nclass BleRemotePeripheral {\n  public Obniz: any;\n  public address: any;\n  public connected: any;\n  public device_type: any;\n  public address_type: any;\n  public ble_event_type: any;\n  public rssi: any;\n  public adv_data: any;\n  public scan_resp: any;\n  public keys: any;\n  public _services: any;\n  public emitter: any;\n  public advertise_data_rows: any;\n  public localName: any;\n  public iBeacon: any;\n\n  constructor(Obniz: any, address: any) {\n    this.Obniz = Obniz;\n    this.address = address;\n    this.connected = false;\n\n    this.device_type = null;\n    this.address_type = null;\n    this.ble_event_type = null;\n    this.rssi = null;\n    this.adv_data = null;\n    this.scan_resp = null;\n\n    this.keys = [\n      \"device_type\",\n      \"address_type\",\n      \"ble_event_type\",\n      \"rssi\",\n      \"adv_data\",\n      \"scan_resp\",\n    ];\n\n    this._services = [];\n    this.emitter = new emitter();\n  }\n\n  get services() {\n    return this._services;\n  }\n\n  /**\n   *\n   * @return {String} json value\n   */\n  public toString() {\n    return JSON.stringify({\n      address: this.address,\n      addressType: this.address_type,\n      advertisement: this.adv_data,\n      scanResponse: this.scan_resp,\n      rssi: this.rssi,\n    });\n  }\n\n  public setParams(dic: any) {\n    this.advertise_data_rows = null;\n    for (const key in dic) {\n      if (dic.hasOwnProperty(key) && this.keys.includes(key)) {\n        (this as any) [key] = dic[key];\n      }\n    }\n    this.analyseAdvertisement();\n  }\n\n  public analyseAdvertisement() {\n    if (!this.advertise_data_rows) {\n      this.advertise_data_rows = [];\n      if (this.adv_data) {\n        for (let i = 0; i < this.adv_data.length; i++) {\n          const length: any = this.adv_data[i];\n          const arr: any = new Array(length);\n          for (let j = 0; j < length; j++) {\n            arr[j] = this.adv_data[i + j + 1];\n          }\n          this.advertise_data_rows.push(arr);\n          i = i + length;\n        }\n      }\n      if (this.scan_resp) {\n        for (let i = 0; i < this.scan_resp.length; i++) {\n          const length: any = this.scan_resp[i];\n          const arr: any = new Array(length);\n          for (let j = 0; j < length; j++) {\n            arr[j] = this.scan_resp[i + j + 1];\n          }\n          this.advertise_data_rows.push(arr);\n          i = i + length;\n        }\n      }\n      this.setLocalName();\n      this.setIBeacon();\n    }\n  }\n\n  public searchTypeVal(type: any) {\n    this.analyseAdvertisement();\n    for (let i = 0; i < this.advertise_data_rows.length; i++) {\n      if (this.advertise_data_rows[i][0] === type) {\n        const results: any = [].concat(this.advertise_data_rows[i]);\n        results.shift();\n        return results;\n      }\n    }\n    return undefined;\n  }\n\n  public setLocalName() {\n    let data: any = this.searchTypeVal(0x09);\n    if (!data) {\n      data = this.searchTypeVal(0x08);\n    }\n    if (!data) {\n      this.localName = null;\n    } else {\n      this.localName = String.fromCharCode.apply(null, data);\n    }\n  }\n\n  public setIBeacon() {\n    const data: any = this.searchTypeVal(0xff);\n    if (\n      !data ||\n      data[0] !== 0x4c ||\n      data[1] !== 0x00 ||\n      data[2] !== 0x02 ||\n      data[3] !== 0x15 ||\n      data.length !== 25\n    ) {\n      this.iBeacon = null;\n      return;\n    }\n    const uuidData: any = data.slice(4, 20);\n    let uuid: any = \"\";\n    for (let i = 0; i < uuidData.length; i++) {\n      uuid = uuid + (\"00\" + uuidData[i].toString(16)).slice(-2);\n      if (\n        i === 4 - 1 ||\n        i === 4 + 2 - 1 ||\n        i === 4 + 2 * 2 - 1 ||\n        i === 4 + 2 * 3 - 1\n      ) {\n        uuid += \"-\";\n      }\n    }\n\n    const major: any = (data[20] << 8) + data[21];\n    const minor: any = (data[22] << 8) + data[23];\n    const power: any = data[24];\n\n    this.iBeacon = {\n      uuid,\n      major,\n      minor,\n      power,\n      rssi: this.rssi,\n    };\n  }\n\n  public _addServiceUuids(results: any, data: any, bit: any) {\n    if (!data) {\n      return;\n    }\n    const uuidLength: any = bit / 4;\n    for (let i = 0; i < data.length; i = i + uuidLength) {\n      const one: any = data.slice(i, i + uuidLength);\n      results.push(this.Obniz.ble.constructor._dataArray2uuidHex(one, true));\n    }\n  }\n\n  public advertisementServiceUuids() {\n    const results: any = [];\n    this._addServiceUuids(results, this.searchTypeVal(0x02), 16);\n    this._addServiceUuids(results, this.searchTypeVal(0x03), 16);\n    this._addServiceUuids(results, this.searchTypeVal(0x04), 32);\n    this._addServiceUuids(results, this.searchTypeVal(0x05), 32);\n    this._addServiceUuids(results, this.searchTypeVal(0x06), 64);\n    this._addServiceUuids(results, this.searchTypeVal(0x07), 64);\n    return results;\n  }\n\n  public connect() {\n    this.Obniz.ble.scan.end();\n    const obj: any = {\n      ble: {\n        connect: {\n          address: this.address,\n        },\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  public connectWait() {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"statusupdate\", (params: any) => {\n        if (params.status === \"connected\") {\n          resolve(true);\n        } else {\n          reject(new Error(\"connection not established\"));\n        }\n      });\n      this.connect();\n    });\n  }\n\n  public disconnect() {\n    const obj: any = {\n      ble: {\n        disconnect: {\n          address: this.address,\n        },\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  public disconnectWait() {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"statusupdate\", (params: any) => {\n        if (params.status === \"disconnected\") {\n          resolve(true);\n        } else {\n          reject(new Error(\"disconnectWait failed\"));\n        }\n      });\n      this.disconnect();\n    });\n  }\n\n  public getService(uuid: any) {\n    uuid = BleHelper.uuidFilter(uuid);\n    for (const key in this._services) {\n      if (this._services[key].uuid === uuid) {\n        return this._services[key];\n      }\n    }\n    return undefined;\n  }\n\n  public findService(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    return this.getService(serviceUuid);\n  }\n\n  public findCharacteristic(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\n    const s: any = this.getService(serviceUuid);\n    if (s) {\n      return s.getCharacteristic(characteristicUuid);\n    }\n    return null;\n  }\n\n  public findDescriptor(param: any) {\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\n    const c: any = this.findCharacteristic(param);\n    if (c) {\n      return c.getDescriptor(descriptorUuid);\n    }\n    return null;\n  }\n\n  public discoverAllServices() {\n    const obj: any = {\n      ble: {\n        get_services: {\n          address: this.address,\n        },\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  public discoverAllServicesWait() {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"discoverfinished\", () => {\n        const children: any = this._services.filter((elm: any) => {\n          return elm.discoverdOnRemote;\n        });\n        resolve(children);\n      });\n      this.discoverAllServices();\n    });\n  }\n\n  public async discoverAllHandlesWait() {\n    const ArrayFlat: any = (array: any, depth: any) => {\n      const flattend: any = [];\n      const flat = (_array: any, _depth: any) => {\n        for (const el of _array) {\n          if (Array.isArray(el) && _depth > 0) {\n            flat(el, _depth - 1);\n          } else {\n            flattend.push(el);\n          }\n        }\n      };\n      flat(array, Math.floor(depth) || 1);\n      return flattend;\n    };\n\n    const services: any = await this.discoverAllServicesWait();\n    const charsNest: any = await Promise.all(\n      services.map((s: any) => s.discoverAllCharacteristicsWait()),\n    );\n    const chars: any = ArrayFlat(charsNest);\n    const descriptorsNest: any = await Promise.all(\n      chars.map((c: any) => c.discoverAllDescriptorsWait()),\n    );\n    // eslint-disable-next-line no-unused-vars\n    const descriptors: any = ArrayFlat(descriptorsNest);\n  }\n\n  public onconnect() {\n  }\n\n  public ondisconnect() {\n  }\n\n  public ondiscoverservice(child: any) {\n  }\n\n  public ondiscoverservicefinished(children: any) {\n  }\n\n  public ondiscover() {\n  }\n\n  public ondiscoverfinished() {\n  }\n\n  public async notifyFromServer(notifyName: any, params: any) {\n    this.emitter.emit(notifyName, params);\n    switch (notifyName) {\n      case \"statusupdate\": {\n        if (params.status === \"connected\") {\n          this.connected = true;\n          await this.discoverAllHandlesWait();\n\n          this.onconnect();\n        }\n        if (params.status === \"disconnected\") {\n          this.connected = false;\n          this.ondisconnect();\n        }\n        break;\n      }\n      case \"discover\": {\n        const uuid: any = params.service_uuid;\n        let child: any = this.getService(uuid);\n        if (!child) {\n          const newService: any = new BleRemoteService({uuid});\n          newService.parent = this;\n          this._services.push(newService);\n          child = newService;\n        }\n        child.discoverdOnRemote = true;\n        this.ondiscoverservice(child);\n        break;\n      }\n      case \"discoverfinished\": {\n        const children: any = this._services.filter((elm: any) => {\n          return elm.discoverdOnRemote;\n        });\n        this.ondiscoverservicefinished(children);\n        break;\n      }\n    }\n  }\n\n  public onerror() {\n  }\n}\n\nexport default BleRemotePeripheral;\n"]}