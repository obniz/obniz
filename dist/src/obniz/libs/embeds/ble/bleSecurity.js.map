{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleSecurity.ts"],"names":[],"mappings":"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","file":"bleSecurity.js","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport semver = require(\"semver\");\n\nclass BleSecurity {\n  public Obniz: any;\n  public emitter: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this.emitter = new emitter();\n  }\n\n  public setModeLevel(mode: any, level: any) {\n    let auth: any;\n    let keys: any;\n    let indicateSecurityLevel: any;\n\n    if (mode === 1) {\n      if (level === 1) {\n        auth = [];\n        indicateSecurityLevel = 0; // no pairing request\n        keys = [\"LTK\", \"IRK\"];\n      } else if (level === 2) {\n        auth = [\"bonding\"];\n        indicateSecurityLevel = 2;\n        keys = [\"LTK\", \"IRK\"];\n      } else if (level === 3) {\n        // TODO\n        // auth = ['bonding','mitm'];\n        // indicateSecurityLevel = 3;\n        // keys = ['LTK', 'IRK'];\n      }\n    } else if (mode === 2) {\n      if (level === 1) {\n        // TODO\n        // auth = [];\n        // keys = ['LTK', 'IRK','CSRK'];\n      } else if (level === 2) {\n        // TODO\n        // auth = ['bonding'];\n        // keys = ['LTK', 'IRK','CSRK'];\n      }\n    }\n\n    if (\n      auth !== undefined &&\n      indicateSecurityLevel !== undefined &&\n      keys !== undefined\n    ) {\n      this.setAuth(auth);\n      this.setIndicateSecurityLevel(indicateSecurityLevel);\n      this.setEnableKeyTypes(keys);\n    } else {\n      const msg: any = `BLE security mode${mode}, level${level} is not available.`;\n      this.Obniz.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  public checkIntroducedFirmware(introducedVersion: any, functionName: any) {\n    const results: any = semver.lt(this.Obniz.firmware_ver, introducedVersion);\n    if (results) {\n      const msg: any = `${functionName} is available obniz firmware ${introducedVersion}.( your obniz version is ${\n        this.Obniz.firmware_ver\n      })`;\n      this.Obniz.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  public setAuth(authTypes: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setAuth\");\n    if (!Array.isArray(authTypes)) {\n      authTypes = [authTypes];\n    }\n    const sendTypes: any = authTypes\n      .map ((elm: any) => {\n        return elm.toLowerCase();\n      })\n      .filter((elm: any ) => {\n        return [\"mitm\", \"secure_connection\", \"bonding\"].includes(elm);\n      });\n\n    if (sendTypes.length !== authTypes.length) {\n      throw new Error(\"unknown auth type\");\n    }\n\n    this.Obniz.send({\n      ble: {\n        security: {\n          auth: authTypes,\n        },\n      },\n    });\n  }\n\n  public setIndicateSecurityLevel(level: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setIndicateSecurityLevel\");\n\n    if (typeof level !== \"number\") {\n      throw new Error(\"unknown secrity level : \" + level);\n    }\n    this.Obniz.send({\n      ble: {\n        security: {\n          indicate_security_level: level,\n        },\n      },\n    });\n  }\n\n  public setEnableKeyTypes(keyTypes: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setEnableKeyTypes\");\n    if (!Array.isArray(keyTypes)) {\n      keyTypes = [keyTypes];\n    }\n    const sendTypes: any = keyTypes\n      .map ((elm: any) => {\n        return elm.toLowerCase();\n      })\n      .filter((elm: any ) => {\n        return [\"ltk\", \"csrk\", \"irk\"].includes(elm);\n      });\n\n    if (sendTypes.length !== keyTypes.length) {\n      throw new Error(\"unknown key type\");\n    }\n\n    this.Obniz.send({\n      ble: {\n        security: {\n          key: {type: sendTypes},\n        },\n      },\n    });\n  }\n\n  public setKeyMaxSize(size: any) {\n    this.checkIntroducedFirmware(\"1.1.0\", \"setKeyMaxSize\");\n    if (typeof size !== \"number\") {\n      throw new Error(\"please provide key size in number\");\n    }\n    this.Obniz.send({\n      ble: {\n        security: {\n          key: {max_size: size},\n        },\n      },\n    });\n  }\n\n  public clearBondingDevicesList() {\n    this.Obniz.send({\n      ble: {\n        security: {\n          devices: {clear: true},\n        },\n      },\n    });\n  }\n\n  public onerror(params: any) {\n  } // dummy\n\n  public notifyFromServer(notifyName: any, params: any) {\n    switch (notifyName) {\n      case \"onerror\": {\n        this.onerror(params);\n        break;\n      }\n    }\n  }\n}\n\nexport default BleSecurity;\n"]}