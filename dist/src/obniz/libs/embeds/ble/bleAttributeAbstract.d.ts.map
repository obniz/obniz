{"version":3,"sources":["../src/obniz/libs/embeds/ble/bleAttributeAbstract.ts"],"names":[],"mappings":"AAIA,cAAM,oBAAoB;IACjB,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,iBAAiB,EAAE,GAAG,CAAC;IACvB,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;gBAER,MAAM,EAAE,GAAG;IA2BhB,YAAY;IA4BnB,IAAI,aAAa,IAAI,GAAG,CAEvB;IAED,IAAI,YAAY,IAAI,GAAG,CAEtB;IAED,IAAI,UAAU,IAAI,GAAG,CAEpB;IAEM,QAAQ,CAAC,KAAK,EAAE,GAAG;IAWnB,QAAQ,CAAC,IAAI,EAAE,GAAG;IASlB,MAAM;IAeb;;OAEG;IAEI,IAAI;IAGJ,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG;IAGlC,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG;IAIxC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG;IAItC,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAa7B,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAatC,aAAa,CAAC,IAAI,EAAE,GAAG;IAavB,eAAe,CAAC,IAAI,EAAE,GAAG;IAazB,kBAAkB;IAQlB,mBAAmB;IAQ1B;;OAEG;IACI,OAAO,CAAC,MAAM,EAAE,GAAG;IAGnB,MAAM,CAAC,IAAI,EAAE,GAAG;IAGhB,iBAAiB,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAGzC,gBAAgB,CAAC,OAAO,EAAE,GAAG;IAG7B,OAAO,CAAC,GAAG,EAAE,GAAG;IAIhB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAyBrD;AAED,eAAe,oBAAoB,CAAC","file":"bleAttributeAbstract.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\r\nimport ObnizUtil from \"../../utils/util\";\r\nimport BleHelper from \"./bleHelper\";\r\n\r\nclass BleAttributeAbstract {\r\n  public uuid: any;\r\n  public parent: any;\r\n  public children: any;\r\n  public isRemote: any;\r\n  public discoverdOnRemote: any;\r\n  public data: any;\r\n  public emitter: any;\r\n\r\n  constructor(params: any) {\r\n    this.uuid = BleHelper.uuidFilter(params.uuid);\r\n    this.parent = null;\r\n    this.children = [];\r\n\r\n    this.isRemote = false;\r\n    this.discoverdOnRemote = false;\r\n\r\n    this.data = params.data || null;\r\n    if (!this.data && params.text) {\r\n      this.data = ObnizUtil.string2dataArray(params.text);\r\n    }\r\n    if (!this.data && params.value) {\r\n      this.data = [params.value];\r\n    }\r\n\r\n    if (params[this.childrenName]) {\r\n      for (const child of params[this.childrenName]) {\r\n        this.addChild(child);\r\n      }\r\n    }\r\n\r\n    this.setFunctions();\r\n\r\n    this.emitter = new emitter();\r\n  }\r\n\r\n  public setFunctions() {\r\n    let childrenName: any = this.childrenName;\r\n    if (childrenName) {\r\n      childrenName =\r\n        childrenName.charAt(0).toUpperCase() + childrenName.slice(1);\r\n      const childName: any = childrenName.slice(0, -1);\r\n\r\n      let funcName: any = \"add\" + childName;\r\n      (this as any)[funcName] = this.addChild;\r\n\r\n      funcName = \"get\" + childName;\r\n      (this as any)[funcName] = this.getChild;\r\n    }\r\n\r\n    const parentName: any = this.parentName;\r\n    if (parentName) {\r\n      Object.defineProperty(this, parentName, {\r\n        get() {\r\n          return this.parent;\r\n        },\r\n        set(newValue: any) {\r\n          this.parent = newValue;\r\n        }\r\n        ,\r\n      });\r\n    }\r\n  }\r\n\r\n  get childrenClass(): any {\r\n    return Object;\r\n  }\r\n\r\n  get childrenName(): any {\r\n    return null;\r\n  }\r\n\r\n  get parentName(): any {\r\n    return null;\r\n  }\r\n\r\n  public addChild(child: any) {\r\n    if (!(child instanceof this.childrenClass)) {\r\n      const childrenClass: any = this.childrenClass;\r\n      child = new childrenClass(child);\r\n    }\r\n    child.parent = this;\r\n\r\n    this.children.push(child);\r\n    return child;\r\n  }\r\n\r\n  public getChild(uuid: any) {\r\n    uuid = BleHelper.uuidFilter(uuid);\r\n    return this.children\r\n      .filter((element: any) => {\r\n        return BleHelper.uuidFilter(element.uuid) === uuid;\r\n      })\r\n      .shift();\r\n  }\r\n\r\n  public toJSON() {\r\n    const obj: any = {\r\n      uuid: BleHelper.uuidFilter(this.uuid),\r\n    };\r\n\r\n    if (this.children.length > 0) {\r\n      const key: any = this.childrenName;\r\n      obj[key] = this.children;\r\n    }\r\n    if (this.data) {\r\n      obj.data = this.data;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * WS COMMANDS\r\n   */\r\n\r\n  public read() {\r\n  }\r\n\r\n  public write(val: any, needResponse?: any) {\r\n  }\r\n\r\n  public writeNumber(val: any, needResponse?: any) {\r\n    this.write([val], needResponse);\r\n  }\r\n\r\n  public writeText(str: any, needResponse?: any) {\r\n    this.write(ObnizUtil.string2dataArray(str), needResponse);\r\n  }\r\n\r\n  public readWait(): Promise<number[]> {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.emitter.once(\"onread\", (params: any) => {\r\n        if (params.result === \"success\") {\r\n          resolve(params.data);\r\n        } else {\r\n          reject(new Error(\"readWait failed\"));\r\n        }\r\n      });\r\n      this.read();\r\n    });\r\n  }\r\n\r\n  public writeWait(data: any, needResponse: any) {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.emitter.once(\"onwrite\", (params: any) => {\r\n        if (params.result === \"success\") {\r\n          resolve(true);\r\n        } else {\r\n          reject(new Error(\"writeWait failed\"));\r\n        }\r\n      });\r\n      this.write(data, needResponse);\r\n    });\r\n  }\r\n\r\n  public writeTextWait(data: any) {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.emitter.once(\"onwrite\", (params: any) => {\r\n        if (params.result === \"success\") {\r\n          resolve(true);\r\n        } else {\r\n          reject(new Error(\"writeTextWait failed\"));\r\n        }\r\n      });\r\n      this.writeText(data);\r\n    });\r\n  }\r\n\r\n  public writeNumberWait(data: any) {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.emitter.once(\"onwrite\", (params: any) => {\r\n        if (params.result === \"success\") {\r\n          resolve(true);\r\n        } else {\r\n          reject(new Error(\"writeNumberWait failed\"));\r\n        }\r\n      });\r\n      this.writeNumber(data);\r\n    });\r\n  }\r\n\r\n  public readFromRemoteWait() {\r\n    return new Promise ((resolve: any ) => {\r\n      this.emitter.once(\"onreadfromremote\", () => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  public writeFromRemoteWait() {\r\n    return new Promise ((resolve: any ) => {\r\n      this.emitter.once(\"onreadfromremote\", (params: any) => {\r\n        resolve(params.data);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * CALLBACKS\r\n   */\r\n  public onwrite(result: any) {\r\n  }\r\n\r\n  public onread(data: any) {\r\n  }\r\n\r\n  public onwritefromremote(address: any, data: any) {\r\n  }\r\n\r\n  public onreadfromremote(address: any) {\r\n  }\r\n\r\n  public onerror(err: any) {\r\n    console.error(err.message);\r\n  }\r\n\r\n  public notifyFromServer(notifyName: any, params: any) {\r\n    this.emitter.emit(notifyName, params);\r\n    switch (notifyName) {\r\n      case \"onerror\": {\r\n        this.onerror(params);\r\n        break;\r\n      }\r\n      case \"onwrite\": {\r\n        this.onwrite(params.result);\r\n        break;\r\n      }\r\n      case \"onread\": {\r\n        this.onread(params.data);\r\n        break;\r\n      }\r\n      case \"onwritefromremote\": {\r\n        this.onwritefromremote(params.address, params.data);\r\n        break;\r\n      }\r\n      case \"onreadfromremote\": {\r\n        this.onreadfromremote(params.address);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BleAttributeAbstract;\r\n"]}