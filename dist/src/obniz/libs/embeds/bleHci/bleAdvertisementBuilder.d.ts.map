{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.ts"],"names":[],"mappings":"AAEA,cAAM,uBAAuB;IACpB,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;gBAEL,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IA6B1B,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAI3B,MAAM,CAAC,IAAI,EAAE,GAAG;IAIhB,KAAK;IAoBL,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAUpC,qBAAqB,CAAC,IAAI,EAAE,GAAG;IAI/B,oBAAoB,CAAC,IAAI,EAAE,GAAG;IAI9B,2BAA2B,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAQvD,OAAO,CAAC,IAAI,EAAE,GAAG;IAMjB,WAAW,CAAC,IAAI,EAAE,GAAG;IAmBrB,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAiB9D,cAAc,CAAC,IAAI,EAAE,GAAG;IAsBxB,QAAQ,CAAC,IAAI,EAAE,GAAG;IAMlB,gCAAgC;IAIhC,gCAAgC;IAIhC,wBAAwB;IAIxB,wBAAwB;IAIxB,kBAAkB;CAG1B;AAED,eAAe,uBAAuB,CAAC","file":"bleAdvertisementBuilder.d.ts","sourcesContent":["import BleHelper from \"./bleHelper\";\r\n\r\nclass BleAdvertisementBuilder {\r\n  public Obniz: any;\r\n  public rows: any;\r\n\r\n  constructor(Obniz: any, json: any) {\r\n    this.Obniz = Obniz;\r\n    this.rows = {};\r\n\r\n    if (json) {\r\n      if (json.localName) {\r\n        this.setCompleteLocalName(json.localName);\r\n      }\r\n      if (\r\n        json.manufacturerData &&\r\n        json.manufacturerData.companyCode &&\r\n        json.manufacturerData.data\r\n      ) {\r\n        this.setManufacturerSpecificData(\r\n          json.manufacturerData.companyCode,\r\n          json.manufacturerData.data,\r\n        );\r\n      }\r\n      if (json.serviceUuids) {\r\n        for (const uuid of json.serviceUuids) {\r\n          this.setUuid(uuid);\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.extendEvalJson === \"function\") {\r\n      this.extendEvalJson(json);\r\n    }\r\n  }\r\n\r\n  public setRow(type: any, data: any) {\r\n    this.rows[type] = data;\r\n  }\r\n\r\n  public getRow(type: any) {\r\n    return this.rows[type] || [];\r\n  }\r\n\r\n  public build() {\r\n    const data: any = [];\r\n    for (const key in this.rows) {\r\n      if (this.rows[key].length === 0) {\r\n        continue;\r\n      }\r\n\r\n      data.push(this.rows[key].length + 1);\r\n      data.push(parseInt(key));\r\n      Array.prototype.push.apply(data, this.rows[key]);\r\n    }\r\n    if (data.length > 31) {\r\n      this.Obniz.error(\r\n        \"Too large data. Advertise/ScanResponse data are must be less than 32 byte.\",\r\n      );\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  public setStringData(type: any, string: any) {\r\n    const data: any = [];\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n      data.push(string.charCodeAt(i));\r\n    }\r\n\r\n    this.setRow(type, data);\r\n  }\r\n\r\n  public setShortenedLocalName(name: any) {\r\n    this.setStringData(0x08, name);\r\n  }\r\n\r\n  public setCompleteLocalName(name: any) {\r\n    this.setStringData(0x09, name);\r\n  }\r\n\r\n  public setManufacturerSpecificData(companyCode: any, data: any) {\r\n    const row: any = [];\r\n    row.push(companyCode & 0xff);\r\n    row.push((companyCode >> 8) & 0xff);\r\n    Array.prototype.push.apply(row, data);\r\n    this.setRow(0xff, row);\r\n  }\r\n\r\n  public setUuid(uuid: any) {\r\n    const uuidData: any = this.convertUuid(uuid);\r\n    const type: any = {16: 0x06, 4: 0x04, 2: 0x02}[uuidData.length as (16 | 4 | 2)];\r\n    this.setRow(type, uuidData);\r\n  }\r\n\r\n  public convertUuid(uuid: any) {\r\n    const uuidNumeric: any = BleHelper.uuidFilter(uuid);\r\n    if (\r\n      uuidNumeric.length !== 32 &&\r\n      uuidNumeric.length !== 8 &&\r\n      uuidNumeric.length !== 4\r\n    ) {\r\n      this.Obniz.error(\r\n        \"BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)\",\r\n      );\r\n    }\r\n\r\n    const data: any = [];\r\n    for (let i = uuidNumeric.length; i > 1; i -= 2) {\r\n      data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  public setIbeaconData(uuid: any, major: any, minor: any, txPower: any) {\r\n    const data: any = [];\r\n    data.push(0x02, 0x15); // fixed data\r\n\r\n    const uuidData: any = this.convertUuid(uuid);\r\n    Array.prototype.push.apply(data, uuidData);\r\n\r\n    data.push((major >> 8) & 0xff);\r\n    data.push((major >> 0) & 0xff);\r\n    data.push((minor >> 8) & 0xff);\r\n    data.push((minor >> 0) & 0xff);\r\n    data.push((txPower >> 0) & 0xff);\r\n\r\n    this.setManufacturerSpecificData(0x004c, data);\r\n    return;\r\n  }\r\n\r\n  public extendEvalJson(json: any) {\r\n    if (json) {\r\n      if (json.flags) {\r\n        if (json.flags.includes(\"limited_discoverable_mode\")) {\r\n          this.setLeLimitedDiscoverableModeFlag();\r\n        }\r\n        if (json.flags.includes(\"general_discoverable_mode\")) {\r\n          this.setLeGeneralDiscoverableModeFlag();\r\n        }\r\n        if (json.flags.includes(\"br_edr_not_supported\")) {\r\n          this.setBrEdrNotSupportedFlag();\r\n        }\r\n        if (json.flags.includes(\"le_br_edr_controller\")) {\r\n          this.setLeBrEdrControllerFlag();\r\n        }\r\n        if (json.flags.includes(\"le_br_edr_host\")) {\r\n          this.setLeBrEdrHostFlag();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public setFlags(flag: any) {\r\n    const data: any = this.getRow(0x01);\r\n    data[0] = (data[0] || 0) | flag;\r\n    this.setRow(0x01, data);\r\n  }\r\n\r\n  public setLeLimitedDiscoverableModeFlag() {\r\n    this.setFlags(0x01);\r\n  }\r\n\r\n  public setLeGeneralDiscoverableModeFlag() {\r\n    this.setFlags(0x02);\r\n  }\r\n\r\n  public setBrEdrNotSupportedFlag() {\r\n    this.setFlags(0x04);\r\n  }\r\n\r\n  public setLeBrEdrControllerFlag() {\r\n    this.setFlags(0x08);\r\n  }\r\n\r\n  public setLeBrEdrHostFlag() {\r\n    this.setFlags(0x10);\r\n  }\r\n}\r\n\r\nexport default BleAdvertisementBuilder;\r\n"]}