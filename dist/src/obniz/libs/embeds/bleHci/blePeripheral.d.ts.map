{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/blePeripheral.ts"],"names":[],"mappings":"AAGA,cAAM,aAAa;IACV,QAAQ,EAAE,GAAG,CAAC;IACd,SAAS,EAAE,GAAG,CAAC;IACf,6BAA6B,EAAE,GAAG,CAAC;gBAE9B,QAAQ,EAAE,GAAG;IAMlB,eAAe;IAKf,UAAU,CAAC,GAAG,EAAE,GAAG;IAWnB,OAAO,CAAC,IAAI,EAAE,GAAG;IAQjB,UAAU,CAAC,IAAI,EAAE,GAAG;IASpB,aAAa,CAAC,IAAI,EAAE,GAAG;IAQvB,cAAc;IAKd,MAAM;;;IAMN,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAU7B,cAAc,CAAC,KAAK,EAAE,GAAG;IASzB,GAAG;IAIH,mBAAmB,CAAC,KAAK,EAAE,GAAG;IAG9B,OAAO,CAAC,KAAK,EAAE,GAAG;CAE1B;AAED,eAAe,aAAa,CAAC","file":"blePeripheral.d.ts","sourcesContent":["import BleHelper from \"./bleHelper\";\nimport BleService from \"./bleService\";\n\nclass BlePeripheral {\n  public obnizBle: any;\n  public _services: any;\n  public currentConnectedDeviceAddress: any;\n\n  constructor(obnizBle: any) {\n    this.obnizBle = obnizBle;\n    this._services = [];\n    this.currentConnectedDeviceAddress = null;\n  }\n\n  public _updateServices() {\n    const bufData: any = this._services.map((e: any) => e.toBufferObj());\n    this.obnizBle.peripheralBindings.setServices(bufData);\n  }\n\n  public addService(obj: any) {\n    this.obnizBle.warningIfNotInitialize();\n    if (!(obj instanceof BleService)) {\n      obj = new BleService(obj);\n    }\n    this._services.push(obj);\n    obj.peripheral = this;\n\n    this._updateServices();\n  }\n\n  public setJson(json: any) {\n    if (json.services) {\n      for (const service of json.services) {\n        this.addService(service);\n      }\n    }\n  }\n\n  public getService(uuid: any) {\n    uuid = BleHelper.uuidFilter(uuid);\n    return this._services\n      .filter((element: any) => {\n        return BleHelper.uuidFilter(element.uuid) === uuid;\n      })\n      .shift();\n  }\n\n  public removeService(uuid: any) {\n    this._services = this._services.filter((element: any) => {\n      return BleHelper.uuidFilter(element.uuid) !== uuid;\n    });\n\n    this._updateServices();\n  }\n\n  public stopAllService() {\n    this._services = [];\n    this._updateServices();\n  }\n\n  public toJSON() {\n    return {\n      services: this._services,\n    };\n  }\n\n  public findCharacteristic(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\n    const s: any = this.getService(serviceUuid);\n    if (s) {\n      return s.getCharacteristic(characteristicUuid);\n    }\n    return null;\n  }\n\n  public findDescriptor(param: any) {\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\n    const c: any = this.findCharacteristic(param);\n    if (c) {\n      return c.getDescriptor(descriptorUuid);\n    }\n    return null;\n  }\n\n  public end() {\n    this.stopAllService();\n  }\n\n  public onconnectionupdates(param: any) {\n  }\n\n  public onerror(error: any) {\n  }\n}\n\nexport default BlePeripheral;\n"]}