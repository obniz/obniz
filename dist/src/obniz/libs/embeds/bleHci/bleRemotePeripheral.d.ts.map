{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemotePeripheral.ts"],"names":[],"mappings":"AAIA,cAAM,mBAAmB;IAChB,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,WAAW,EAAE,GAAG,CAAC;IACjB,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,GAAG,CAAC;IACd,SAAS,EAAE,GAAG,CAAC;IACf,IAAI,EAAE,GAAG,CAAC;IACV,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,mBAAmB,EAAE,GAAG,CAAC;IACzB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;gBAER,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAyBvC;;;OAGG;IACI,QAAQ;IAUR,SAAS,CAAC,GAAG,EAAE,GAAG;IAUlB,oBAAoB;IA8BpB,aAAa,CAAC,IAAI,EAAE,GAAG;IAYvB,YAAY;IAYZ,UAAU;IAwCV,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAWlD,yBAAyB;IAWzB,OAAO;IAKP,WAAW;IAuBX,UAAU;IAIV,cAAc;IAuBrB,IAAI,QAAQ,QAEX;IAEM,UAAU,CAAC,IAAI,EAAE,GAAG;IAUpB,WAAW,CAAC,KAAK,EAAE,GAAG;IAKtB,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAU7B,cAAc,CAAC,KAAK,EAAE,GAAG;IASzB,mBAAmB;IAInB,uBAAuB;IAYjB,sBAAsB;IA4B5B,SAAS;IAGT,YAAY;IAGZ,iBAAiB,CAAC,KAAK,EAAE,GAAG;IAG5B,yBAAyB,CAAC,QAAQ,EAAE,GAAG;IAGvC,UAAU;IAGV,kBAAkB;IAGlB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAqC7C,OAAO;CAEf;AAED,eAAe,mBAAmB,CAAC","file":"bleRemotePeripheral.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\r\nimport BleHelper from \"./bleHelper\";\r\nimport BleRemoteService from \"./bleRemoteService\";\r\n\r\nclass BleRemotePeripheral {\r\n  public obnizBle: any;\r\n  public address: any;\r\n  public connected: any;\r\n  public device_type: any;\r\n  public address_type: any;\r\n  public ble_event_type: any;\r\n  public rssi: any;\r\n  public adv_data: any;\r\n  public scan_resp: any;\r\n  public keys: any;\r\n  public _services: any;\r\n  public emitter: any;\r\n  public advertise_data_rows: any;\r\n  public localName: any;\r\n  public iBeacon: any;\r\n\r\n  constructor(obnizBle: any, address: any) {\r\n    this.obnizBle = obnizBle;\r\n    this.address = address;\r\n    this.connected = false;\r\n\r\n    this.device_type = null;\r\n    this.address_type = null;\r\n    this.ble_event_type = null;\r\n    this.rssi = null;\r\n    this.adv_data = null;\r\n    this.scan_resp = null;\r\n\r\n    this.keys = [\r\n      \"device_type\",\r\n      \"address_type\",\r\n      \"ble_event_type\",\r\n      \"rssi\",\r\n      \"adv_data\",\r\n      \"scan_resp\",\r\n    ];\r\n\r\n    this._services = [];\r\n    this.emitter = new emitter();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {String} json value\r\n   */\r\n  public toString() {\r\n    return JSON.stringify({\r\n      address: this.address,\r\n      addressType: this.address_type,\r\n      advertisement: this.adv_data,\r\n      scanResponse: this.scan_resp,\r\n      rssi: this.rssi,\r\n    });\r\n  }\r\n\r\n  public setParams(dic: any) {\r\n    this.advertise_data_rows = null;\r\n    for (const key in dic) {\r\n      if (dic.hasOwnProperty(key) && this.keys.includes(key)) {\r\n        (this as any)[key] = dic[key];\r\n      }\r\n    }\r\n    this.analyseAdvertisement();\r\n  }\r\n\r\n  public analyseAdvertisement() {\r\n    if (!this.advertise_data_rows) {\r\n      this.advertise_data_rows = [];\r\n      if (this.adv_data) {\r\n        for (let i = 0; i < this.adv_data.length; i++) {\r\n          const length: any = this.adv_data[i];\r\n          const arr: any = new Array(length);\r\n          for (let j = 0; j < length; j++) {\r\n            arr[j] = this.adv_data[i + j + 1];\r\n          }\r\n          this.advertise_data_rows.push(arr);\r\n          i = i + length;\r\n        }\r\n      }\r\n      if (this.scan_resp) {\r\n        for (let i = 0; i < this.scan_resp.length; i++) {\r\n          const length: any = this.scan_resp[i];\r\n          const arr: any = new Array(length);\r\n          for (let j = 0; j < length; j++) {\r\n            arr[j] = this.scan_resp[i + j + 1];\r\n          }\r\n          this.advertise_data_rows.push(arr);\r\n          i = i + length;\r\n        }\r\n      }\r\n      this.setLocalName();\r\n      this.setIBeacon();\r\n    }\r\n  }\r\n\r\n  public searchTypeVal(type: any) {\r\n    this.analyseAdvertisement();\r\n    for (let i = 0; i < this.advertise_data_rows.length; i++) {\r\n      if (this.advertise_data_rows[i][0] === type) {\r\n        const results: any = [].concat(this.advertise_data_rows[i]);\r\n        results.shift();\r\n        return results;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public setLocalName() {\r\n    let data: any = this.searchTypeVal(0x09);\r\n    if (!data) {\r\n      data = this.searchTypeVal(0x08);\r\n    }\r\n    if (!data) {\r\n      this.localName = null;\r\n    } else {\r\n      this.localName = String.fromCharCode.apply(null, data);\r\n    }\r\n  }\r\n\r\n  public setIBeacon() {\r\n    const data: any = this.searchTypeVal(0xff);\r\n    if (\r\n      !data ||\r\n      data[0] !== 0x4c ||\r\n      data[1] !== 0x00 ||\r\n      data[2] !== 0x02 ||\r\n      data[3] !== 0x15 ||\r\n      data.length !== 25\r\n    ) {\r\n      this.iBeacon = null;\r\n      return;\r\n    }\r\n    const uuidData: any = data.slice(4, 20);\r\n    let uuid: any = \"\";\r\n    for (let i = 0; i < uuidData.length; i++) {\r\n      uuid = uuid + (\"00\" + uuidData[i].toString(16)).slice(-2);\r\n      if (\r\n        i === 4 - 1 ||\r\n        i === 4 + 2 - 1 ||\r\n        i === 4 + 2 * 2 - 1 ||\r\n        i === 4 + 2 * 3 - 1\r\n      ) {\r\n        uuid += \"-\";\r\n      }\r\n    }\r\n\r\n    const major: any = (data[20] << 8) + data[21];\r\n    const minor: any = (data[22] << 8) + data[23];\r\n    const power: any = data[24];\r\n\r\n    this.iBeacon = {\r\n      uuid,\r\n      major,\r\n      minor,\r\n      power,\r\n      rssi: this.rssi,\r\n    };\r\n  }\r\n\r\n  public _addServiceUuids(results: any, data: any, bit: any) {\r\n    if (!data) {\r\n      return;\r\n    }\r\n    const uuidLength: any = bit / 4;\r\n    for (let i = 0; i < data.length; i = i + uuidLength) {\r\n      const one: any = data.slice(i, i + uuidLength);\r\n      results.push(this.obnizBle.constructor._dataArray2uuidHex(one, true));\r\n    }\r\n  }\r\n\r\n  public advertisementServiceUuids() {\r\n    const results: any = [];\r\n    this._addServiceUuids(results, this.searchTypeVal(0x02), 16);\r\n    this._addServiceUuids(results, this.searchTypeVal(0x03), 16);\r\n    this._addServiceUuids(results, this.searchTypeVal(0x04), 32);\r\n    this._addServiceUuids(results, this.searchTypeVal(0x05), 32);\r\n    this._addServiceUuids(results, this.searchTypeVal(0x06), 64);\r\n    this._addServiceUuids(results, this.searchTypeVal(0x07), 64);\r\n    return results;\r\n  }\r\n\r\n  public connect() {\r\n    this.obnizBle.scan.end();\r\n    this.obnizBle.centralBindings.connect(this.address);\r\n  }\r\n\r\n  public connectWait() {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      // if (this.connected) {\r\n      //   resolve();\r\n      //   return;\r\n      // }\r\n      this.emitter.once(\"statusupdate\", (params: any ) => {\r\n        if (params.status === \"connected\") {\r\n          resolve(true); // for compatibility\r\n        } else {\r\n          reject(\r\n            new Error(\r\n              `connection to peripheral name=${this.localName} address=${\r\n                this.address\r\n              } can't be established`,\r\n            ),\r\n          );\r\n        }\r\n      });\r\n      this.connect();\r\n    });\r\n  }\r\n\r\n  public disconnect() {\r\n    this.obnizBle.centralBindings.disconnect(this.address);\r\n  }\r\n\r\n  public disconnectWait() {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      // if (!this.connected) {\r\n      //   resolve();\r\n      //   return;\r\n      // }\r\n      this.emitter.once(\"statusupdate\", (params: any ) => {\r\n        if (params.status === \"disconnected\") {\r\n          resolve(true); // for compatibility\r\n        } else {\r\n          reject(\r\n            new Error(\r\n              `cutting connection to peripheral name=${\r\n                this.localName\r\n              } address=${this.address} was failed`,\r\n            ),\r\n          );\r\n        }\r\n      });\r\n      this.disconnect();\r\n    });\r\n  }\r\n\r\n  get services() {\r\n    return this._services;\r\n  }\r\n\r\n  public getService(uuid: any) {\r\n    uuid = BleHelper.uuidFilter(uuid);\r\n    for (const key in this._services) {\r\n      if (this._services[key].uuid === uuid) {\r\n        return this._services[key];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public findService(param: any) {\r\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\r\n    return this.getService(serviceUuid);\r\n  }\r\n\r\n  public findCharacteristic(param: any) {\r\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\r\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\r\n    const s: any = this.getService(serviceUuid);\r\n    if (s) {\r\n      return s.getCharacteristic(characteristicUuid);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public findDescriptor(param: any) {\r\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\r\n    const c: any = this.findCharacteristic(param);\r\n    if (c) {\r\n      return c.getDescriptor(descriptorUuid);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public discoverAllServices() {\r\n    this.obnizBle.centralBindings.discoverServices(this.address);\r\n  }\r\n\r\n  public discoverAllServicesWait() {\r\n    return new Promise ((resolve: any ) => {\r\n      this.emitter.once(\"discoverfinished\", () => {\r\n        const children: any = this._services.filter ((elm: any ) => {\r\n          return elm.discoverdOnRemote;\r\n        });\r\n        resolve(children);\r\n      });\r\n      this.discoverAllServices();\r\n    });\r\n  }\r\n\r\n  public async discoverAllHandlesWait() {\r\n    const ArrayFlat: any = (array: any, depth: any) => {\r\n      const flattend: any = [];\r\n      (function flat(_array: any, _depth: any) {\r\n        for (const el of _array) {\r\n          if (Array.isArray(el) && _depth > 0) {\r\n            flat(el, _depth - 1);\r\n          } else {\r\n            flattend.push(el);\r\n          }\r\n        }\r\n      })(array, Math.floor(depth) || 1);\r\n      return flattend;\r\n    };\r\n\r\n    const services: any = await this.discoverAllServicesWait();\r\n    const charsNest: any = await Promise.all(\r\n      services.map((s: any) => s.discoverAllCharacteristicsWait()),\r\n    );\r\n    const chars: any = ArrayFlat(charsNest);\r\n    const descriptorsNest: any = await Promise.all(\r\n      chars.map((c: any) => c.discoverAllDescriptorsWait()),\r\n    );\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const descriptors: any = ArrayFlat(descriptorsNest);\r\n  }\r\n\r\n  public onconnect() {\r\n  }\r\n\r\n  public ondisconnect() {\r\n  }\r\n\r\n  public ondiscoverservice(child: any) {\r\n  }\r\n\r\n  public ondiscoverservicefinished(children: any) {\r\n  }\r\n\r\n  public ondiscover() {\r\n  }\r\n\r\n  public ondiscoverfinished() {\r\n  }\r\n\r\n  public notifyFromServer(notifyName: any, params: any) {\r\n    this.emitter.emit(notifyName, params);\r\n    switch (notifyName) {\r\n      case \"statusupdate\": {\r\n        if (params.status === \"connected\") {\r\n          this.connected = true;\r\n          this.onconnect();\r\n        }\r\n        if (params.status === \"disconnected\") {\r\n          this.connected = false;\r\n          this.ondisconnect();\r\n        }\r\n        break;\r\n      }\r\n      case \"discover\": {\r\n        const uuid: any = params.service_uuid;\r\n        let child: any = this.getService(uuid);\r\n        if (!child) {\r\n          const newService: any = new BleRemoteService({uuid});\r\n          newService.parent = this;\r\n          this._services.push(newService);\r\n          child = newService;\r\n        }\r\n        child.discoverdOnRemote = true;\r\n        this.ondiscoverservice(child);\r\n        break;\r\n      }\r\n      case \"discoverfinished\": {\r\n        const children: any = this._services.filter((elm: any) => {\r\n          return elm.discoverdOnRemote;\r\n        });\r\n        this.ondiscoverservicefinished(children);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public onerror() {\r\n  }\r\n}\r\n\r\nexport default BleRemotePeripheral;\r\n"]}