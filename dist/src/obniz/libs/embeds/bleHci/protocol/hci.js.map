{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/hci.ts"],"names":[],"mappings":"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","file":"hci.js","sourcesContent":["// let debug = require('debug')('hci');\nconst debug: any = () => {\n};\n\nconst events: any = require(\"events\");\n\nconst HCI_COMMAND_PKT: any = 0x01;\nconst HCI_ACLDATA_PKT: any = 0x02;\nconst HCI_EVENT_PKT: any = 0x04;\n\nconst ACL_START_NO_FLUSH: any = 0x00;\nconst ACL_CONT: any = 0x01;\nconst ACL_START: any = 0x02;\n\nconst EVT_DISCONN_COMPLETE: any = 0x05;\nconst EVT_ENCRYPT_CHANGE: any = 0x08;\nconst EVT_CMD_COMPLETE: any = 0x0e;\nconst EVT_CMD_STATUS: any = 0x0f;\nconst EVT_NUMBER_OF_COMPLETED_PACKETS: any = 0x13;\nconst EVT_LE_META_EVENT: any = 0x3e;\n\nconst EVT_LE_CONN_COMPLETE: any = 0x01;\nconst EVT_LE_ADVERTISING_REPORT: any = 0x02;\nconst EVT_LE_CONN_UPDATE_COMPLETE: any = 0x03;\n\nconst OGF_LINK_CTL: any = 0x01;\nconst OCF_DISCONNECT: any = 0x0006;\n\nconst OGF_HOST_CTL: any = 0x03;\nconst OCF_SET_EVENT_MASK: any = 0x0001;\nconst OCF_RESET: any = 0x0003;\nconst OCF_READ_LE_HOST_SUPPORTED: any = 0x006c;\nconst OCF_WRITE_LE_HOST_SUPPORTED: any = 0x006d;\n\nconst OGF_INFO_PARAM: any = 0x04;\nconst OCF_READ_LOCAL_VERSION: any = 0x0001;\nconst OCF_READ_BUFFER_SIZE: any = 0x0005;\nconst OCF_READ_BD_ADDR: any = 0x0009;\n\nconst OGF_STATUS_PARAM: any = 0x05;\nconst OCF_READ_RSSI: any = 0x0005;\n\nconst OGF_LE_CTL: any = 0x08;\nconst OCF_LE_SET_EVENT_MASK: any = 0x0001;\nconst OCF_LE_READ_BUFFER_SIZE: any = 0x0002;\nconst OCF_LE_SET_ADVERTISING_PARAMETERS: any = 0x0006;\nconst OCF_LE_SET_ADVERTISING_DATA: any = 0x0008;\nconst OCF_LE_SET_SCAN_RESPONSE_DATA: any = 0x0009;\nconst OCF_LE_SET_ADVERTISE_ENABLE: any = 0x000a;\nconst OCF_LE_SET_SCAN_PARAMETERS: any = 0x000b;\nconst OCF_LE_SET_SCAN_ENABLE: any = 0x000c;\nconst OCF_LE_CREATE_CONN: any = 0x000d;\nconst OCF_LE_CONN_UPDATE: any = 0x0013;\nconst OCF_LE_START_ENCRYPTION: any = 0x0019;\nconst OCF_LE_LTK_NEG_REPLY: any = 0x001b;\n\nconst DISCONNECT_CMD: any = OCF_DISCONNECT | (OGF_LINK_CTL << 10);\n\nconst SET_EVENT_MASK_CMD: any = OCF_SET_EVENT_MASK | (OGF_HOST_CTL << 10);\nconst RESET_CMD: any = OCF_RESET | (OGF_HOST_CTL << 10);\nconst READ_LE_HOST_SUPPORTED_CMD: any =\n  OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\nconst WRITE_LE_HOST_SUPPORTED_CMD: any =\n  OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\n\nconst READ_LOCAL_VERSION_CMD: any = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\nconst READ_BUFFER_SIZE_CMD: any = OCF_READ_BUFFER_SIZE | (OGF_INFO_PARAM << 10);\nconst READ_BD_ADDR_CMD: any = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\n\nconst READ_RSSI_CMD: any = OCF_READ_RSSI | (OGF_STATUS_PARAM << 10);\n\nconst LE_SET_EVENT_MASK_CMD: any = OCF_LE_SET_EVENT_MASK | (OGF_LE_CTL << 10);\nconst LE_READ_BUFFER_SIZE_CMD: any = OCF_LE_READ_BUFFER_SIZE | (OGF_LE_CTL << 10);\nconst LE_SET_SCAN_PARAMETERS_CMD: any =\n  OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL << 10);\nconst LE_SET_SCAN_ENABLE_CMD: any = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL << 10);\nconst LE_CREATE_CONN_CMD: any = OCF_LE_CREATE_CONN | (OGF_LE_CTL << 10);\nconst LE_CONN_UPDATE_CMD: any = OCF_LE_CONN_UPDATE | (OGF_LE_CTL << 10);\nconst LE_START_ENCRYPTION_CMD: any = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL << 10);\nconst LE_SET_ADVERTISING_PARAMETERS_CMD: any =\n  OCF_LE_SET_ADVERTISING_PARAMETERS | (OGF_LE_CTL << 10);\n\nconst LE_SET_ADVERTISING_DATA_CMD: any =\n  OCF_LE_SET_ADVERTISING_DATA | (OGF_LE_CTL << 10);\nconst LE_SET_SCAN_RESPONSE_DATA_CMD: any =\n  OCF_LE_SET_SCAN_RESPONSE_DATA | (OGF_LE_CTL << 10);\nconst LE_SET_ADVERTISE_ENABLE_CMD: any =\n  OCF_LE_SET_ADVERTISE_ENABLE | (OGF_LE_CTL << 10);\nconst LE_LTK_NEG_REPLY_CMD: any = OCF_LE_LTK_NEG_REPLY | (OGF_LE_CTL << 10);\n\nconst HCI_OE_USER_ENDED_CONNECTION: any = 0x13;\n\nconst STATUS_MAPPER: any = require(\"./hci-status\");\n\nclass Hci extends events.EventEmitter {\n  public _obnizHci: any;\n  public _state: any;\n  public _handleBuffers: any;\n  public on: any;\n  public _socket: any;\n  public once: any;\n  public _handleAclsInProgress: any;\n  public _aclOutQueue: any;\n  public _aclMtu: any;\n  public _aclMaxInProgress: any;\n  public addressType: any;\n  public address: any;\n\n  constructor(obnizHci: any) {\n    super();\n    this._obnizHci = obnizHci;\n    this._state = null;\n\n    this._handleBuffers = {};\n\n    this.on(\"stateChange\", this.onStateChange.bind(this));\n\n    this._socket = {\n      write: (data: any) => {\n        const arr: any = Array.from(data);\n        this._obnizHci.write(arr);\n      },\n    };\n    this._obnizHci.onread = this.onSocketData.bind(this);\n  }\n\n  public async initWait() {\n    this.reset();\n    // this.setEventMask();\n    // this.setLeEventMask();\n    // this.readLocalVersion();\n    // this.writeLeHostSupported();\n    // this.readLeHostSupported();\n    // this.readBdAddr();\n\n    return new Promise ((resolve: any ) => {\n      this.once(\"stateChange\", () => {\n        // console.log('te');\n        resolve();\n      });\n    });\n  }\n\n  public setEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const eventMask: any = Buffer.from(\"fffffbff07f8bf3d\", \"hex\");\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(eventMask.length, 3);\n\n    eventMask.copy(cmd, 4);\n\n    debug(\"set event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public reset() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(OCF_RESET | (OGF_HOST_CTL << 10), 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    debug(\"reset - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public resetBuffers() {\n    this._handleAclsInProgress = {};\n    this._handleBuffers = {};\n    this._aclOutQueue = [];\n  }\n\n  public readLocalVersion() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(READ_LOCAL_VERSION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    debug(\"read local version - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public readBdAddr() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(READ_BD_ADDR_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    debug(\"read bd addr - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setLeEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const leEventMask: any = Buffer.from(\"1f00000000000000\", \"hex\");\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(leEventMask.length, 3);\n\n    leEventMask.copy(cmd, 4);\n\n    debug(\"set le event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public readLeHostSupported() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(READ_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    debug(\"read LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public writeLeHostSupported() {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(WRITE_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(0x01, 4); // le\n    cmd.writeUInt8(0x00, 5); // simul\n\n    debug(\"write LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setScanParameters() {\n    const cmd: any = Buffer.alloc(11);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_SCAN_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x07, 3);\n\n    // data\n    cmd.writeUInt8(0x01, 4); // type: 0 -> passive, 1 -> active\n    cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6\n    cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6\n    cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random\n    cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types\n\n    debug(\"set scan parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setScanEnabled(enabled: boolean, filterDuplicates: boolean) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_SCAN_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n    cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates\n\n    debug(\"set scan enabled - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public createLeConn(address: any, addressType: any) {\n    const cmd: any = Buffer.alloc(29);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_CREATE_CONN_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x19, 3);\n\n    // data\n    cmd.writeUInt16LE(0x0060, 4); // interval\n    cmd.writeUInt16LE(0x0030, 6); // window\n    cmd.writeUInt8(0x00, 8); // initiator filter\n\n    cmd.writeUInt8(addressType === \"random\" ? 0x01 : 0x00, 9); // peer address type\n    Buffer.from(\n      address\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    ).copy(cmd, 10); // peer address\n\n    cmd.writeUInt8(0x00, 16); // own address type\n\n    cmd.writeUInt16LE(0x0006, 17); // min interval\n    cmd.writeUInt16LE(0x000c, 19); // max interval\n    cmd.writeUInt16LE(0x0000, 21); // latency\n    cmd.writeUInt16LE(0x00c8, 23); // supervision timeout\n    cmd.writeUInt16LE(0x0004, 25); // min ce length\n    cmd.writeUInt16LE(0x0006, 27); // max ce length\n\n    debug(\"create le conn - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public connUpdateLe(handle: any, minInterval: any, maxInterval: any, latency: any, supervisionTimeout: any) {\n    const cmd: any = Buffer.alloc(18);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_CONN_UPDATE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0e, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4);\n    cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval\n    cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval\n    cmd.writeUInt16LE(latency, 10); // latency\n    cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout\n    cmd.writeUInt16LE(0x0000, 14); // min ce length\n    cmd.writeUInt16LE(0x0000, 16); // max ce length\n\n    debug(\"conn update le - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public startLeEncryption(handle: any, random: any, diversifier: any, key: any) {\n    const cmd: any = Buffer.alloc(32);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_START_ENCRYPTION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x1c, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    random.copy(cmd, 6);\n    diversifier.copy(cmd, 14);\n    key.copy(cmd, 16);\n\n    debug(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public disconnect(handle: any, reason: any) {\n    const cmd: any = Buffer.alloc(7);\n\n    reason = reason || HCI_OE_USER_ENDED_CONNECTION;\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(DISCONNECT_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x03, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    cmd.writeUInt8(reason, 6); // reason\n\n    debug(\"disconnect - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public readRssi(handle: any) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(READ_RSSI_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n\n    debug(\"read rssi - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public writeAclDataPkt(handle: any, cid: any, data: any) {\n    const pkt: any = Buffer.alloc(9 + data.length);\n\n    // header\n    pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\n    pkt.writeUInt16LE(handle | (ACL_START_NO_FLUSH << 12), 1);\n    pkt.writeUInt16LE(data.length + 4, 3); // data length 1\n    pkt.writeUInt16LE(data.length, 5); // data length 2\n    pkt.writeUInt16LE(cid, 7);\n\n    data.copy(pkt, 9);\n\n    debug(\"write acl data pkt - writing: \" + pkt.toString(\"hex\"));\n    this._socket.write(pkt);\n  }\n\n  public setAdvertisingParameters() {\n    const cmd: any = Buffer.alloc(19);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_ADVERTISING_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(15, 3);\n\n    const advertisementInterval: any = Math.floor(\n      (process.env.BLENO_ADVERTISING_INTERVAL\n        ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL)\n        : 100) * 1.6,\n    );\n\n    // data\n    cmd.writeUInt16LE(advertisementInterval, 4); // min interval\n    cmd.writeUInt16LE(advertisementInterval, 6); // max interval\n    cmd.writeUInt8(0x00, 8); // adv type\n    cmd.writeUInt8(0x00, 9); // own addr typ\n    cmd.writeUInt8(0x00, 10); // direct addr type\n    Buffer.from(\"000000000000\", \"hex\").copy(cmd, 11); // direct addr\n    cmd.writeUInt8(0x07, 17);\n    cmd.writeUInt8(0x00, 18);\n\n    debug(\"set advertisement parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setAdvertisingData(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_ADVERTISING_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    debug(\"set advertisement data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setScanResponseData(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_SCAN_RESPONSE_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    debug(\"set scan response data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public setAdvertiseEnable(enabled: any) {\n    const cmd: any = Buffer.alloc(5);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_SET_ADVERTISE_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x01, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n\n    debug(\"set advertise enable - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public leReadBufferSize() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(LE_READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    debug(\"le read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public readBufferSize() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    debug(\"read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public queueAclDataPkt(handle: any, cid: any, data: any) {\n    let hf: any = handle | (ACL_START_NO_FLUSH << 12);\n    // l2cap pdu may be fragmented on hci level\n    let l2capPdu: any = Buffer.alloc(4 + data.length);\n    l2capPdu.writeUInt16LE(data.length, 0);\n    l2capPdu.writeUInt16LE(cid, 2);\n    data.copy(l2capPdu, 4);\n    let fragId: any = 0;\n\n    while (l2capPdu.length) {\n      const frag: any = l2capPdu.slice(0, this._aclMtu);\n      l2capPdu = l2capPdu.slice(frag.length);\n      const pkt: any = Buffer.alloc(5 + frag.length);\n\n      // hci header\n      pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\n      pkt.writeUInt16LE(hf, 1);\n      hf |= ACL_CONT << 12;\n      pkt.writeUInt16LE(frag.length, 3); // hci pdu length\n\n      frag.copy(pkt, 5);\n\n      this._aclOutQueue.push({\n        handle,\n        pkt,\n        fragId: fragId++,\n      });\n    }\n\n    this.pushAclOutQueue();\n  }\n\n  public pushAclOutQueue() {\n    debug(\"pushAclOutQueue\");\n    let inProgress: any = 0;\n    for (const handle in this._handleAclsInProgress) {\n      inProgress += this._handleAclsInProgress[handle];\n    }\n    debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);\n    while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {\n      inProgress++;\n      this.writeOneAclDataPkt();\n    }\n\n    if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {\n      debug(\"acl out queue congested\");\n      debug(\"\\tin progress = \" + inProgress);\n      debug(\"\\twaiting = \" + this._aclOutQueue.length);\n    }\n  }\n\n  public writeOneAclDataPkt() {\n    debug(\"writeOneAclDataPkt\");\n    const pkt: any = this._aclOutQueue.shift();\n    this._handleAclsInProgress[pkt.handle]++;\n    debug(\n      \"write acl data pkt frag \" +\n      pkt.fragId +\n      \" handle \" +\n      pkt.handle +\n      \" - writing: \" +\n      pkt.pkt.toString(\"hex\"),\n    );\n    this._socket.write(pkt.pkt);\n  }\n\n  public onSocketData(array: any) {\n    const data: any = Buffer.from(array);\n    debug(\"onSocketData: \" + data.toString(\"hex\"));\n\n    const eventType: any = data.readUInt8(0);\n\n    debug(\"\\tevent type = \" + eventType);\n\n    if (HCI_EVENT_PKT === eventType) {\n      const subEventType: any = data.readUInt8(1);\n\n      debug(\"\\tsub event type = \" + subEventType);\n\n      if (subEventType === EVT_DISCONN_COMPLETE) {\n        const handle: any = data.readUInt16LE(4);\n        const reason: any = data.readUInt8(6);\n\n        debug(\"\\t\\thandle = \" + handle);\n        debug(\"\\t\\treason = \" + reason);\n\n        delete this._handleAclsInProgress[handle];\n        const aclOutQueue: any = [];\n        let discarded: any = 0;\n        for (const i in this._aclOutQueue) {\n          if (this._aclOutQueue[i].handle !== handle) {\n            aclOutQueue.push(this._aclOutQueue[i]);\n          } else {\n            discarded++;\n          }\n        }\n        if (discarded) {\n          debug(\"\\t\\tacls discarded = \" + discarded);\n        }\n        this._aclOutQueue = aclOutQueue;\n        this.pushAclOutQueue();\n\n        this.emit(\"disconnComplete\", handle, reason);\n      } else if (subEventType === EVT_ENCRYPT_CHANGE) {\n        const handle: any = data.readUInt16LE(4);\n        const encrypt: any = data.readUInt8(6);\n\n        debug(\"\\t\\thandle = \" + handle);\n        debug(\"\\t\\tencrypt = \" + encrypt);\n\n        this.emit(\"encryptChange\", handle, encrypt);\n      } else if (subEventType === EVT_CMD_COMPLETE) {\n        const ncmd: any = data.readUInt8(3);\n        const cmd: any = data.readUInt16LE(4);\n        const status: any = data.readUInt8(6);\n        const result: any = data.slice(7);\n\n        debug(\"\\t\\tncmd = \" + ncmd);\n        debug(\"\\t\\tcmd = \" + cmd);\n        debug(\"\\t\\tstatus = \" + status);\n        debug(\"\\t\\tresult = \" + result.toString(\"hex\"));\n\n        this.processCmdCompleteEvent(cmd, status, result);\n      } else if (subEventType === EVT_CMD_STATUS) {\n        const status: any = data.readUInt8(3);\n        const cmd: any = data.readUInt16LE(5);\n\n        debug(\"\\t\\tstatus = \" + status);\n        debug(\"\\t\\tcmd = \" + cmd);\n\n        this.processCmdStatusEvent(cmd, status);\n      } else if (subEventType === EVT_LE_META_EVENT) {\n        const leMetaEventType: any = data.readUInt8(3);\n        const leMetaEventStatus: any = data.readUInt8(4);\n        const leMetaEventData: any = data.slice(5);\n\n        debug(\"\\t\\tLE meta event type = \" + leMetaEventType);\n        debug(\"\\t\\tLE meta event status = \" + leMetaEventStatus);\n        debug(\"\\t\\tLE meta event data = \" + leMetaEventData.toString(\"hex\"));\n\n        this.processLeMetaEvent(\n          leMetaEventType,\n          leMetaEventStatus,\n          leMetaEventData,\n        );\n      } else if (subEventType === EVT_NUMBER_OF_COMPLETED_PACKETS) {\n        const handles: any = data.readUInt8(3);\n        for (let i = 0; i < handles; i++) {\n          const handle: any = data.readUInt16LE(4 + i * 4);\n          const pkts: any = data.readUInt16LE(6 + i * 4);\n          debug(\"\\thandle = \" + handle);\n          debug(\"\\t\\tcompleted = \" + pkts);\n          if (this._handleAclsInProgress[handle] === undefined) {\n            debug(\"\\t\\talready closed\");\n            continue;\n          }\n          if (pkts > this._handleAclsInProgress[handle]) {\n            // Linux kernel may send acl packets by itself, so be ready for underflow\n            this._handleAclsInProgress[handle] = 0;\n          } else {\n            this._handleAclsInProgress[handle] -= pkts;\n          }\n          debug(\"\\t\\tin progress = \" + this._handleAclsInProgress[handle]);\n        }\n        this.pushAclOutQueue();\n      }\n    } else if (HCI_ACLDATA_PKT === eventType) {\n      const flags: any = data.readUInt16LE(1) >> 12;\n      const handle: any = data.readUInt16LE(1) & 0x0fff;\n\n      if (ACL_START === flags) {\n        const cid: any = data.readUInt16LE(7);\n\n        const length: any = data.readUInt16LE(5);\n        const pktData: any = data.slice(9);\n\n        debug(\"\\t\\tcid = \" + cid);\n\n        if (length === pktData.length) {\n          debug(\"\\t\\thandle = \" + handle);\n          debug(\"\\t\\tdata = \" + pktData.toString(\"hex\"));\n\n          this.emit(\"aclDataPkt\", handle, cid, pktData);\n        } else {\n          this._handleBuffers[handle] = {\n            length,\n            cid,\n            data: pktData,\n          };\n        }\n      } else if (ACL_CONT === flags) {\n        if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\n          return;\n        }\n\n        this._handleBuffers[handle].data = Buffer.concat([\n          this._handleBuffers[handle].data,\n          data.slice(5),\n        ]);\n\n        if (\n          this._handleBuffers[handle].data.length ===\n          this._handleBuffers[handle].length\n        ) {\n          this.emit(\n            \"aclDataPkt\",\n            handle,\n            this._handleBuffers[handle].cid,\n            this._handleBuffers[handle].data,\n          );\n\n          delete this._handleBuffers[handle];\n        }\n      }\n    } else if (HCI_COMMAND_PKT === eventType) {\n      const cmd: any = data.readUInt16LE(1);\n      const len: any = data.readUInt8(3);\n\n      debug(\"\\t\\tcmd = \" + cmd);\n      debug(\"\\t\\tdata len = \" + len);\n\n      if (cmd === LE_SET_SCAN_ENABLE_CMD) {\n        const enable: any = data.readUInt8(4) === 0x1;\n        const filterDuplicates: any = data.readUInt8(5) === 0x1;\n\n        debug(\"\\t\\t\\tLE enable scan command\");\n        debug(\"\\t\\t\\tenable scanning = \" + enable);\n        debug(\"\\t\\t\\tfilter duplicates = \" + filterDuplicates);\n\n        this.emit(\"leScanEnableSetCmd\", enable, filterDuplicates);\n      }\n    }\n  }\n\n  public onSocketError(error: any) {\n    debug(\"onSocketError: \" + error.message);\n\n    if (error.message === \"Operation not permitted\") {\n      this.emit(\"stateChange\", \"unauthorized\");\n    } else if (error.message === \"Network is down\") {\n      // no-op\n    }\n  }\n\n  public processCmdCompleteEvent(cmd: any, status: any, result: any) {\n    if (cmd === RESET_CMD) {\n      this.resetBuffers();\n      this.setEventMask();\n      this.setLeEventMask();\n      this.readLocalVersion();\n      this.readBdAddr();\n      this.writeLeHostSupported();\n      this.readLeHostSupported();\n      this.leReadBufferSize();\n    } else if (cmd === READ_LE_HOST_SUPPORTED_CMD) {\n      if (status === 0) {\n        const le: any = result.readUInt8(0);\n        const simul: any = result.readUInt8(1);\n\n        debug(\"\\t\\t\\tle = \" + le);\n        debug(\"\\t\\t\\tsimul = \" + simul);\n      }\n    } else if (cmd === READ_LOCAL_VERSION_CMD) {\n      const hciVer: any = result.readUInt8(0);\n      const hciRev: any = result.readUInt16LE(1);\n      const lmpVer: any = result.readInt8(3);\n      const manufacturer: any = result.readUInt16LE(4);\n      const lmpSubVer: any = result.readUInt16LE(6);\n\n      if (hciVer < 0x06) {\n        this.emit(\"stateChange\", \"unsupported\");\n      } else if (this._state !== \"poweredOn\") {\n        this.setScanEnabled(false, true);\n        this.setScanParameters();\n      }\n\n      this.emit(\n        \"readLocalVersion\",\n        hciVer,\n        hciRev,\n        lmpVer,\n        manufacturer,\n        lmpSubVer,\n      );\n    } else if (cmd === READ_BD_ADDR_CMD) {\n      this.addressType = \"public\";\n      this.address = result\n        .toString(\"hex\")\n        .match(/.{1,2}/g)\n        .reverse()\n        .join(\":\");\n\n      debug(\"address = \" + this.address);\n\n      this.emit(\"addressChange\", this.address);\n    } else if (cmd === LE_SET_SCAN_PARAMETERS_CMD) {\n      this.emit(\"stateChange\", \"poweredOn\");\n\n      this.emit(\"leScanParametersSet\", status);\n    } else if (cmd === LE_SET_SCAN_ENABLE_CMD) {\n      this.emit(\"leScanEnableSet\", status);\n    } else if (cmd === LE_SET_ADVERTISING_PARAMETERS_CMD) {\n      this.emit(\"stateChange\", \"poweredOn\");\n\n      this.emit(\"leAdvertisingParametersSet\", status);\n    } else if (cmd === LE_SET_ADVERTISING_DATA_CMD) {\n      this.emit(\"leAdvertisingDataSet\", status);\n    } else if (cmd === LE_SET_SCAN_RESPONSE_DATA_CMD) {\n      this.emit(\"leScanResponseDataSet\", status);\n    } else if (cmd === LE_SET_ADVERTISE_ENABLE_CMD) {\n      this.emit(\"leAdvertiseEnableSet\", status);\n    } else if (cmd === READ_RSSI_CMD) {\n      const handle: any = result.readUInt16LE(0);\n      const rssi: any = result.readInt8(2);\n\n      debug(\"\\t\\t\\thandle = \" + handle);\n      debug(\"\\t\\t\\trssi = \" + rssi);\n\n      this.emit(\"rssiRead\", handle, rssi);\n    } else if (cmd === LE_LTK_NEG_REPLY_CMD) {\n      const handle: any = result.readUInt16LE(0);\n\n      debug(\"\\t\\t\\thandle = \" + handle);\n      this.emit(\"leLtkNegReply\", handle);\n    } else if (cmd === LE_READ_BUFFER_SIZE_CMD) {\n      if (!status) {\n        this.processLeReadBufferSize(result);\n      }\n    } else if (cmd === READ_BUFFER_SIZE_CMD) {\n      if (!status) {\n        const aclMtu: any = result.readUInt16LE(0);\n        const aclMaxInProgress: any = result.readUInt16LE(3);\n        // sanity\n        if (aclMtu && aclMaxInProgress) {\n          debug(\"br/edr acl mtu = \" + aclMtu);\n          debug(\"br/edr acl max pkts = \" + aclMaxInProgress);\n          this._aclMtu = aclMtu;\n          this._aclMaxInProgress = aclMaxInProgress;\n        }\n      }\n    }\n  }\n\n  public processLeMetaEvent(eventType: any, status: any, data: any) {\n    if (eventType === EVT_LE_CONN_COMPLETE) {\n      this.processLeConnComplete(status, data);\n    } else if (eventType === EVT_LE_ADVERTISING_REPORT) {\n      this.processLeAdvertisingReport(status, data);\n    } else if (eventType === EVT_LE_CONN_UPDATE_COMPLETE) {\n      this.processLeConnUpdateComplete(status, data);\n    }\n  }\n\n  public processLeConnComplete(status: any, data: any) {\n    const handle: any = data.readUInt16LE(0);\n    const role: any = data.readUInt8(2);\n    const addressType: any = data.readUInt8(3) === 0x01 ? \"random\" : \"public\";\n    const address: any = data\n      .slice(4, 10)\n      .toString(\"hex\")\n      .match(/.{1,2}/g)\n      .reverse()\n      .join(\":\");\n    const interval: any = data.readUInt16LE(10) * 1.25;\n    const latency: any = data.readUInt16LE(12); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(14) * 10;\n    const masterClockAccuracy: any = data.readUInt8(16); // TODO: multiplier?\n\n    debug(\"\\t\\t\\thandle = \" + handle);\n    debug(\"\\t\\t\\trole = \" + role);\n    debug(\"\\t\\t\\taddress type = \" + addressType);\n    debug(\"\\t\\t\\taddress = \" + address);\n    debug(\"\\t\\t\\tinterval = \" + interval);\n    debug(\"\\t\\t\\tlatency = \" + latency);\n    debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n    debug(\"\\t\\t\\tmaster clock accuracy = \" + masterClockAccuracy);\n\n    this._handleAclsInProgress[handle] = 0;\n\n    this.emit(\n      \"leConnComplete\",\n      status,\n      handle,\n      role,\n      addressType,\n      address,\n      interval,\n      latency,\n      supervisionTimeout,\n      masterClockAccuracy,\n    );\n  }\n\n  public processLeAdvertisingReport(count: any, data: any) {\n    for (let i = 0; i < count; i++) {\n      const type: any = data.readUInt8(0);\n      const addressType: any = data.readUInt8(1) === 0x01 ? \"random\" : \"public\";\n      const address: any = data\n        .slice(2, 8)\n        .toString(\"hex\")\n        .match(/.{1,2}/g)\n        .reverse()\n        .join(\":\");\n      const eirLength: any = data.readUInt8(8);\n      const eir: any = data.slice(9, eirLength + 9);\n      const rssi: any = data.readInt8(eirLength + 9);\n\n      debug(\"\\t\\t\\ttype = \" + type);\n      debug(\"\\t\\t\\taddress = \" + address);\n      debug(\"\\t\\t\\taddress type = \" + addressType);\n      debug(\"\\t\\t\\teir = \" + eir.toString(\"hex\"));\n      debug(\"\\t\\t\\trssi = \" + rssi);\n\n      this.emit(\n        \"leAdvertisingReport\",\n        0,\n        type,\n        address,\n        addressType,\n        eir,\n        rssi,\n      );\n\n      data = data.slice(eirLength + 10);\n    }\n  }\n\n  public processLeConnUpdateComplete(status: any, data: any) {\n    const handle: any = data.readUInt16LE(0);\n    const interval: any = data.readUInt16LE(2) * 1.25;\n    const latency: any = data.readUInt16LE(4); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(6) * 10;\n\n    debug(\"\\t\\t\\thandle = \" + handle);\n    debug(\"\\t\\t\\tinterval = \" + interval);\n    debug(\"\\t\\t\\tlatency = \" + latency);\n    debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n\n    this.emit(\n      \"leConnUpdateComplete\",\n      status,\n      handle,\n      interval,\n      latency,\n      supervisionTimeout,\n    );\n  }\n\n  public processCmdStatusEvent(cmd: any, status: any) {\n    if (cmd === LE_CREATE_CONN_CMD) {\n      if (status !== 0) {\n        this.emit(\"leConnComplete\", status);\n      }\n    }\n  }\n\n  public processLeReadBufferSize(result: any) {\n    const aclMtu: any = result.readUInt16LE(0);\n    const aclMaxInProgress: any = result.readUInt8(2);\n    if (!aclMtu) {\n      // as per Bluetooth specs\n      debug(\"falling back to br/edr buffer size\");\n      this.readBufferSize();\n    } else {\n      debug(\"le acl mtu = \" + aclMtu);\n      debug(\"le acl max in progress = \" + aclMaxInProgress);\n      this._aclMtu = aclMtu;\n      this._aclMaxInProgress = aclMaxInProgress;\n    }\n  }\n\n  public onStateChange(state: any) {\n    this._state = state;\n  }\n}\n\nHci.STATUS_MAPPER = STATUS_MAPPER;\nexport default Hci;\n"]}