{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/gatt.ts"],"names":[],"mappings":"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","file":"gatt.d.ts","sourcesContent":["// let debug = require('debug')('att');\r\nconst debug: any = () => {\r\n};\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport events from \"events\";\r\n\r\nconst ATT_OP_ERROR: any = 0x01;\r\nconst ATT_OP_MTU_REQ: any = 0x02;\r\nconst ATT_OP_MTU_RESP: any = 0x03;\r\nconst ATT_OP_FIND_INFO_REQ: any = 0x04;\r\nconst ATT_OP_FIND_INFO_RESP: any = 0x05;\r\nconst ATT_OP_READ_BY_TYPE_REQ: any = 0x08;\r\nconst ATT_OP_READ_BY_TYPE_RESP: any = 0x09;\r\nconst ATT_OP_READ_REQ: any = 0x0a;\r\nconst ATT_OP_READ_RESP: any = 0x0b;\r\nconst ATT_OP_READ_BLOB_REQ: any = 0x0c;\r\nconst ATT_OP_READ_BLOB_RESP: any = 0x0d;\r\nconst ATT_OP_READ_BY_GROUP_REQ: any = 0x10;\r\nconst ATT_OP_READ_BY_GROUP_RESP: any = 0x11;\r\nconst ATT_OP_WRITE_REQ: any = 0x12;\r\nconst ATT_OP_WRITE_RESP: any = 0x13;\r\nconst ATT_OP_PREPARE_WRITE_REQ: any = 0x16;\r\nconst ATT_OP_PREPARE_WRITE_RESP: any = 0x17;\r\nconst ATT_OP_EXECUTE_WRITE_REQ: any = 0x18;\r\nconst ATT_OP_EXECUTE_WRITE_RESP: any = 0x19;\r\nconst ATT_OP_HANDLE_NOTIFY: any = 0x1b;\r\nconst ATT_OP_HANDLE_IND: any = 0x1d;\r\nconst ATT_OP_HANDLE_CNF: any = 0x1e;\r\nconst ATT_OP_WRITE_CMD: any = 0x52;\r\n\r\nconst ATT_ECODE_SUCCESS: any = 0x00;\r\nconst ATT_ECODE_INVALID_HANDLE: any = 0x01;\r\nconst ATT_ECODE_READ_NOT_PERM: any = 0x02;\r\nconst ATT_ECODE_WRITE_NOT_PERM: any = 0x03;\r\nconst ATT_ECODE_INVALID_PDU: any = 0x04;\r\nconst ATT_ECODE_AUTHENTICATION: any = 0x05;\r\nconst ATT_ECODE_REQ_NOT_SUPP: any = 0x06;\r\nconst ATT_ECODE_INVALID_OFFSET: any = 0x07;\r\nconst ATT_ECODE_AUTHORIZATION: any = 0x08;\r\nconst ATT_ECODE_PREP_QUEUE_FULL: any = 0x09;\r\nconst ATT_ECODE_ATTR_NOT_FOUND: any = 0x0a;\r\nconst ATT_ECODE_ATTR_NOT_LONG: any = 0x0b;\r\nconst ATT_ECODE_INSUFF_ENCR_KEY_SIZE: any = 0x0c;\r\nconst ATT_ECODE_INVAL_ATTR_VALUE_LEN: any = 0x0d;\r\nconst ATT_ECODE_UNLIKELY: any = 0x0e;\r\nconst ATT_ECODE_INSUFF_ENC: any = 0x0f;\r\nconst ATT_ECODE_UNSUPP_GRP_TYPE: any = 0x10;\r\nconst ATT_ECODE_INSUFF_RESOURCES: any = 0x11;\r\n\r\nconst GATT_PRIM_SVC_UUID: any = 0x2800;\r\nconst GATT_INCLUDE_UUID: any = 0x2802;\r\nconst GATT_CHARAC_UUID: any = 0x2803;\r\n\r\nconst GATT_CLIENT_CHARAC_CFG_UUID: any = 0x2902;\r\nconst GATT_SERVER_CHARAC_CFG_UUID: any = 0x2903;\r\n\r\nconst ATT_CID: any = 0x0004;\r\n\r\n/* eslint-enable no-unused-vars */\r\nclass Gatt extends events.EventEmitter {\r\n  public _address: any;\r\n  public _aclStream: any;\r\n  public _services: any;\r\n  public _characteristics: any;\r\n  public _descriptors: any;\r\n  public _currentCommand: any;\r\n  public _commandQueue: any;\r\n  public _mtu: any;\r\n  public _security: any;\r\n  public onAclStreamDataBinded: any;\r\n  public onAclStreamEncryptBinded: any;\r\n  public onAclStreamEncryptFailBinded: any;\r\n  public onAclStreamEndBinded: any;\r\n\r\n  constructor(address: any, aclStream: any) {\r\n    super();\r\n    this._address = address;\r\n    this._aclStream = aclStream;\r\n\r\n    this._services = {};\r\n    this._characteristics = {};\r\n    this._descriptors = {};\r\n\r\n    this._currentCommand = null;\r\n    this._commandQueue = [];\r\n\r\n    this._mtu = 23;\r\n    this._security = \"low\";\r\n\r\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\r\n    this.onAclStreamEncryptBinded = this.onAclStreamEncrypt.bind(this);\r\n    this.onAclStreamEncryptFailBinded = this.onAclStreamEncryptFail.bind(this);\r\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\r\n\r\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.on(\"encrypt\", this.onAclStreamEncryptBinded);\r\n    this._aclStream.on(\"encryptFail\", this.onAclStreamEncryptFailBinded);\r\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\r\n  }\r\n\r\n  public onAclStreamData(cid: any, data?: any) {\r\n    if (cid !== ATT_CID) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this._currentCommand &&\r\n      data.toString(\"hex\") === this._currentCommand.buffer.toString(\"hex\")\r\n    ) {\r\n      debug(this._address + \": echo ... echo ... echo ...\");\r\n    } else if (data[0] % 2 === 0) {\r\n      if (process.env.NOBLE_MULTI_ROLE) {\r\n        debug(\r\n          this._address +\r\n          \": multi-role flag in use, ignoring command meant for peripheral role.\",\r\n        );\r\n      } else {\r\n        const requestType: any = data[0];\r\n        debug(\r\n          this._address +\r\n          \": replying with REQ_NOT_SUPP to 0x\" +\r\n          requestType.toString(16),\r\n        );\r\n        this.writeAtt(\r\n          this.errorResponse(requestType, 0x0000, ATT_ECODE_REQ_NOT_SUPP),\r\n        );\r\n      }\r\n    } else if (\r\n      data[0] === ATT_OP_HANDLE_NOTIFY ||\r\n      data[0] === ATT_OP_HANDLE_IND\r\n    ) {\r\n      const valueHandle: any = data.readUInt16LE(1);\r\n      const valueData: any = data.slice(3);\r\n\r\n      this.emit(\"handleNotify\", this._address, valueHandle, valueData);\r\n\r\n      if (data[0] === ATT_OP_HANDLE_IND) {\r\n        this._queueCommand(\r\n          this.handleConfirmation(),\r\n          null,\r\n          () => {\r\n            this.emit(\"handleConfirmation\", this._address, valueHandle);\r\n          },\r\n        );\r\n      }\r\n\r\n      for (const serviceUuid in this._services) {\r\n        for (const characteristicUuid in this._characteristics[serviceUuid]) {\r\n          if (\r\n            this._characteristics[serviceUuid][characteristicUuid]\r\n              .valueHandle === valueHandle\r\n          ) {\r\n            this.emit(\r\n              \"notification\",\r\n              this._address,\r\n              serviceUuid,\r\n              characteristicUuid,\r\n              valueData,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else if (!this._currentCommand) {\r\n      debug(this._address + \": uh oh, no current command\");\r\n    } else {\r\n      if (\r\n        data[0] === ATT_OP_ERROR &&\r\n        (data[4] === ATT_ECODE_AUTHENTICATION ||\r\n          data[4] === ATT_ECODE_AUTHORIZATION ||\r\n          data[4] === ATT_ECODE_INSUFF_ENC) &&\r\n        this._security !== \"medium\"\r\n      ) {\r\n        this._aclStream.encrypt();\r\n        return;\r\n      }\r\n\r\n      debug(this._address + \": read: \" + data.toString(\"hex\"));\r\n\r\n      this._currentCommand.callback(data);\r\n\r\n      this._currentCommand = null;\r\n\r\n      while (this._commandQueue.length) {\r\n        this._currentCommand = this._commandQueue.shift();\r\n\r\n        this.writeAtt(this._currentCommand.buffer);\r\n\r\n        if (this._currentCommand.callback) {\r\n          break;\r\n        } else if (this._currentCommand.writeCallback) {\r\n          this._currentCommand.writeCallback();\r\n\r\n          this._currentCommand = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public onAclStreamEncrypt(encrypt: any) {\r\n    if (encrypt) {\r\n      this._security = \"medium\";\r\n\r\n      this.writeAtt(this._currentCommand.buffer);\r\n    }\r\n  }\r\n\r\n  public onAclStreamEncryptFail() {\r\n  }\r\n\r\n  public onAclStreamEnd() {\r\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.removeListener(\"encrypt\", this.onAclStreamEncryptBinded);\r\n    this._aclStream.removeListener(\r\n      \"encryptFail\",\r\n      this.onAclStreamEncryptFailBinded,\r\n    );\r\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\r\n  }\r\n\r\n  public writeAtt(data: any) {\r\n    debug(this._address + \": write: \" + data.toString(\"hex\"));\r\n\r\n    this._aclStream.write(ATT_CID, data);\r\n  }\r\n\r\n  public errorResponse(opcode: any, handle: any, status: any) {\r\n    const buf: any = Buffer.alloc(5);\r\n\r\n    buf.writeUInt8(ATT_OP_ERROR, 0);\r\n    buf.writeUInt8(opcode, 1);\r\n    buf.writeUInt16LE(handle, 2);\r\n    buf.writeUInt8(status, 4);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public _queueCommand(buffer: any, callback: any, writeCallback?: any) {\r\n    this._commandQueue.push({\r\n      buffer,\r\n      callback,\r\n      writeCallback,\r\n    });\r\n\r\n    if (this._currentCommand === null) {\r\n      while (this._commandQueue.length) {\r\n        this._currentCommand = this._commandQueue.shift();\r\n\r\n        this.writeAtt(this._currentCommand.buffer);\r\n\r\n        if (this._currentCommand.callback) {\r\n          break;\r\n        } else if (this._currentCommand.writeCallback) {\r\n          this._currentCommand.writeCallback();\r\n\r\n          this._currentCommand = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public mtuRequest(mtu: any) {\r\n    const buf: any = Buffer.alloc(3);\r\n\r\n    buf.writeUInt8(ATT_OP_MTU_REQ, 0);\r\n    buf.writeUInt16LE(mtu, 1);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public readByGroupRequest(startHandle: any, endHandle: any, groupUuid: any) {\r\n    const buf: any = Buffer.alloc(7);\r\n\r\n    buf.writeUInt8(ATT_OP_READ_BY_GROUP_REQ, 0);\r\n    buf.writeUInt16LE(startHandle, 1);\r\n    buf.writeUInt16LE(endHandle, 3);\r\n    buf.writeUInt16LE(groupUuid, 5);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public readByTypeRequest(startHandle: any, endHandle: any, groupUuid: any) {\r\n    const buf: any = Buffer.alloc(7);\r\n\r\n    buf.writeUInt8(ATT_OP_READ_BY_TYPE_REQ, 0);\r\n    buf.writeUInt16LE(startHandle, 1);\r\n    buf.writeUInt16LE(endHandle, 3);\r\n    buf.writeUInt16LE(groupUuid, 5);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public readRequest(handle: any) {\r\n    const buf: any = Buffer.alloc(3);\r\n\r\n    buf.writeUInt8(ATT_OP_READ_REQ, 0);\r\n    buf.writeUInt16LE(handle, 1);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public readBlobRequest(handle: any, offset: any) {\r\n    const buf: any = Buffer.alloc(5);\r\n\r\n    buf.writeUInt8(ATT_OP_READ_BLOB_REQ, 0);\r\n    buf.writeUInt16LE(handle, 1);\r\n    buf.writeUInt16LE(offset, 3);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public findInfoRequest(startHandle: any, endHandle: any) {\r\n    const buf: any = Buffer.alloc(5);\r\n\r\n    buf.writeUInt8(ATT_OP_FIND_INFO_REQ, 0);\r\n    buf.writeUInt16LE(startHandle, 1);\r\n    buf.writeUInt16LE(endHandle, 3);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public writeRequest(handle: any, data: any, withoutResponse: any) {\r\n    const buf: any = Buffer.alloc(3 + data.length);\r\n\r\n    buf.writeUInt8(withoutResponse ? ATT_OP_WRITE_CMD : ATT_OP_WRITE_REQ, 0);\r\n    buf.writeUInt16LE(handle, 1);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      buf.writeUInt8(data.readUInt8(i), i + 3);\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  public prepareWriteRequest(handle: any, offset: any, data: any) {\r\n    const buf: any = Buffer.alloc(5 + data.length);\r\n\r\n    buf.writeUInt8(ATT_OP_PREPARE_WRITE_REQ, 0);\r\n    buf.writeUInt16LE(handle, 1);\r\n    buf.writeUInt16LE(offset, 3);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      buf.writeUInt8(data.readUInt8(i), i + 5);\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  public executeWriteRequest(handle: any, cancelPreparedWrites?: any) {\r\n    const buf: any = Buffer.alloc(2);\r\n\r\n    buf.writeUInt8(ATT_OP_EXECUTE_WRITE_REQ, 0);\r\n    buf.writeUInt8(cancelPreparedWrites ? 0 : 1, 1);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public handleConfirmation() {\r\n    const buf: any = Buffer.alloc(1);\r\n\r\n    buf.writeUInt8(ATT_OP_HANDLE_CNF, 0);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public exchangeMtu(mtu: any) {\r\n    this._queueCommand(\r\n      this.mtuRequest(mtu),\r\n      (data: any ) => {\r\n        const opcode: any = data[0];\r\n\r\n        if (opcode === ATT_OP_MTU_RESP) {\r\n          const newMtu: any = data.readUInt16LE(1);\r\n\r\n          debug(this._address + \": new MTU is \" + newMtu);\r\n\r\n          this._mtu = newMtu;\r\n        }\r\n\r\n        this.emit(\"mtu\", this._address, this._mtu);\r\n      },\r\n    );\r\n  }\r\n\r\n  public discoverServices(uuids: any) {\r\n    const services: any = [];\r\n\r\n    const callback: any = (data: any ) => {\r\n      const opcode: any = data[0];\r\n      let i: any = 0;\r\n\r\n      if (opcode === ATT_OP_READ_BY_GROUP_RESP) {\r\n        const type: any = data[1];\r\n        const num: any = (data.length - 2) / type;\r\n\r\n        for (i = 0; i < num; i++) {\r\n          services.push({\r\n            startHandle: data.readUInt16LE(2 + i * type + 0),\r\n            endHandle: data.readUInt16LE(2 + i * type + 2),\r\n            uuid:\r\n              type === 6\r\n                ? data.readUInt16LE(2 + i * type + 4).toString(16)\r\n                : data\r\n                  .slice(2 + i * type + 4)\r\n                  .slice(0, 16)\r\n                  .toString(\"hex\")\r\n                  .match(/.{1,2}/g)\r\n                  .reverse()\r\n                  .join(\"\"),\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        opcode !== ATT_OP_READ_BY_GROUP_RESP ||\r\n        services[services.length - 1].endHandle === 0xffff\r\n      ) {\r\n        const serviceUuids: any = [];\r\n        for (i = 0; i < services.length; i++) {\r\n          if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {\r\n            serviceUuids.push(services[i].uuid);\r\n          }\r\n\r\n          this._services[services[i].uuid] = services[i];\r\n        }\r\n        this.emit(\"servicesDiscover\", this._address, serviceUuids);\r\n      } else {\r\n        this._queueCommand(\r\n          this.readByGroupRequest(\r\n            services[services.length - 1].endHandle + 1,\r\n            0xffff,\r\n            GATT_PRIM_SVC_UUID,\r\n          ),\r\n          callback,\r\n        );\r\n      }\r\n    };\r\n\r\n    this._queueCommand(\r\n      this.readByGroupRequest(0x0001, 0xffff, GATT_PRIM_SVC_UUID),\r\n      callback,\r\n    );\r\n  }\r\n\r\n  public discoverIncludedServices(serviceUuid: any, uuids: any) {\r\n    const service: any = this._services[serviceUuid];\r\n    const includedServices: any = [];\r\n\r\n    const callback: any = (data: any ) => {\r\n      const opcode: any = data[0];\r\n      let i: any = 0;\r\n\r\n      if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\r\n        const type: any = data[1];\r\n        const num: any = (data.length - 2) / type;\r\n\r\n        for (i = 0; i < num; i++) {\r\n          includedServices.push({\r\n            endHandle: data.readUInt16LE(2 + i * type + 0),\r\n            startHandle: data.readUInt16LE(2 + i * type + 2),\r\n            uuid:\r\n              type === 8\r\n                ? data.readUInt16LE(2 + i * type + 6).toString(16)\r\n                : data\r\n                  .slice(2 + i * type + 6)\r\n                  .slice(0, 16)\r\n                  .toString(\"hex\")\r\n                  .match(/.{1,2}/g)\r\n                  .reverse()\r\n                  .join(\"\"),\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        opcode !== ATT_OP_READ_BY_TYPE_RESP ||\r\n        includedServices[includedServices.length - 1].endHandle ===\r\n        service.endHandle\r\n      ) {\r\n        const includedServiceUuids: any = [];\r\n\r\n        for (i = 0; i < includedServices.length; i++) {\r\n          if (\r\n            uuids.length === 0 ||\r\n            uuids.indexOf(includedServices[i].uuid) !== -1\r\n          ) {\r\n            includedServiceUuids.push(includedServices[i].uuid);\r\n          }\r\n        }\r\n\r\n        this.emit(\r\n          \"includedServicesDiscover\",\r\n          this._address,\r\n          service.uuid,\r\n          includedServiceUuids,\r\n        );\r\n      } else {\r\n        this._queueCommand(\r\n          this.readByTypeRequest(\r\n            includedServices[includedServices.length - 1].endHandle + 1,\r\n            service.endHandle,\r\n            GATT_INCLUDE_UUID,\r\n          ),\r\n          callback,\r\n        );\r\n      }\r\n    };\r\n\r\n    this._queueCommand(\r\n      this.readByTypeRequest(\r\n        service.startHandle,\r\n        service.endHandle,\r\n        GATT_INCLUDE_UUID,\r\n      ),\r\n      callback,\r\n    );\r\n  }\r\n\r\n  public discoverCharacteristics(serviceUuid: any, characteristicUuids: any) {\r\n    const service: any = this._services[serviceUuid];\r\n    const characteristics: any = [];\r\n\r\n    this._characteristics[serviceUuid] =\r\n      this._characteristics[serviceUuid] || {};\r\n    this._descriptors[serviceUuid] = this._descriptors[serviceUuid] || {};\r\n\r\n    const callback: any = (data: any ) => {\r\n      const opcode: any = data[0];\r\n      let i: any = 0;\r\n\r\n      if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\r\n        const type: any = data[1];\r\n        const num: any = (data.length - 2) / type;\r\n\r\n        for (i = 0; i < num; i++) {\r\n          characteristics.push({\r\n            startHandle: data.readUInt16LE(2 + i * type + 0),\r\n            properties: data.readUInt8(2 + i * type + 2),\r\n            valueHandle: data.readUInt16LE(2 + i * type + 3),\r\n            uuid:\r\n              type === 7\r\n                ? data.readUInt16LE(2 + i * type + 5).toString(16)\r\n                : data\r\n                  .slice(2 + i * type + 5)\r\n                  .slice(0, 16)\r\n                  .toString(\"hex\")\r\n                  .match(/.{1,2}/g)\r\n                  .reverse()\r\n                  .join(\"\"),\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        opcode !== ATT_OP_READ_BY_TYPE_RESP ||\r\n        characteristics[characteristics.length - 1].valueHandle ===\r\n        service.endHandle\r\n      ) {\r\n        const characteristicsDiscovered: any = [];\r\n        for (i = 0; i < characteristics.length; i++) {\r\n          const properties: any = characteristics[i].properties;\r\n\r\n          const characteristic: any = {\r\n            properties: [],\r\n            uuid: characteristics[i].uuid,\r\n          };\r\n\r\n          if (i !== 0) {\r\n            characteristics[i - 1].endHandle =\r\n              characteristics[i].startHandle - 1;\r\n          }\r\n\r\n          if (i === characteristics.length - 1) {\r\n            characteristics[i].endHandle = service.endHandle;\r\n          }\r\n\r\n          this._characteristics[serviceUuid][characteristics[i].uuid] =\r\n            characteristics[i];\r\n\r\n          if (properties & 0x01) {\r\n            characteristic.properties.push(\"broadcast\");\r\n          }\r\n\r\n          if (properties & 0x02) {\r\n            characteristic.properties.push(\"read\");\r\n          }\r\n\r\n          if (properties & 0x04) {\r\n            characteristic.properties.push(\"writeWithoutResponse\");\r\n          }\r\n\r\n          if (properties & 0x08) {\r\n            characteristic.properties.push(\"write\");\r\n          }\r\n\r\n          if (properties & 0x10) {\r\n            characteristic.properties.push(\"notify\");\r\n          }\r\n\r\n          if (properties & 0x20) {\r\n            characteristic.properties.push(\"indicate\");\r\n          }\r\n\r\n          if (properties & 0x40) {\r\n            characteristic.properties.push(\"authenticatedSignedWrites\");\r\n          }\r\n\r\n          if (properties & 0x80) {\r\n            characteristic.properties.push(\"extendedProperties\");\r\n          }\r\n\r\n          if (\r\n            characteristicUuids.length === 0 ||\r\n            characteristicUuids.indexOf(characteristic.uuid) !== -1\r\n          ) {\r\n            characteristicsDiscovered.push(characteristic);\r\n          }\r\n        }\r\n\r\n        this.emit(\r\n          \"characteristicsDiscover\",\r\n          this._address,\r\n          serviceUuid,\r\n          characteristicsDiscovered,\r\n        );\r\n      } else {\r\n        this._queueCommand(\r\n          this.readByTypeRequest(\r\n            characteristics[characteristics.length - 1].valueHandle + 1,\r\n            service.endHandle,\r\n            GATT_CHARAC_UUID,\r\n          ),\r\n          callback,\r\n        );\r\n      }\r\n    };\r\n\r\n    this._queueCommand(\r\n      this.readByTypeRequest(\r\n        service.startHandle,\r\n        service.endHandle,\r\n        GATT_CHARAC_UUID,\r\n      ),\r\n      callback,\r\n    );\r\n  }\r\n\r\n  public read(serviceUuid: any, characteristicUuid: any) {\r\n    if (\r\n      !this._characteristics[serviceUuid] ||\r\n      !this._characteristics[serviceUuid][characteristicUuid]\r\n    ) {\r\n      this.emit(\r\n        \"read\",\r\n        this._address,\r\n        serviceUuid,\r\n        characteristicUuid,\r\n        Buffer.alloc(0),\r\n        false,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n\r\n    let readData: any = Buffer.alloc(0);\r\n\r\n    const callback: any = (data: any ) => {\r\n      const opcode: any = data[0];\r\n\r\n      if (opcode === ATT_OP_READ_RESP || opcode === ATT_OP_READ_BLOB_RESP) {\r\n        readData = Buffer.from(\r\n          readData.toString(\"hex\") + data.slice(1).toString(\"hex\"),\r\n          \"hex\",\r\n        );\r\n\r\n        if (data.length === this._mtu) {\r\n          this._queueCommand(\r\n            this.readBlobRequest(characteristic.valueHandle, readData.length),\r\n            callback,\r\n          );\r\n        } else {\r\n          this.emit(\r\n            \"read\",\r\n            this._address,\r\n            serviceUuid,\r\n            characteristicUuid,\r\n            readData,\r\n            true,\r\n          );\r\n        }\r\n      } else if (opcode === ATT_OP_ERROR) {\r\n        this.emit(\r\n          \"read\",\r\n          this._address,\r\n          serviceUuid,\r\n          characteristicUuid,\r\n          Buffer.alloc(0),\r\n          false,\r\n        );\r\n      } else {\r\n        this.emit(\r\n          \"read\",\r\n          this._address,\r\n          serviceUuid,\r\n          characteristicUuid,\r\n          readData,\r\n          true,\r\n        );\r\n      }\r\n    };\r\n\r\n    this._queueCommand(this.readRequest(characteristic.valueHandle), callback);\r\n  }\r\n\r\n  public write(serviceUuid: any, characteristicUuid: any, data: any, withoutResponse: any) {\r\n    if (\r\n      !this._characteristics[serviceUuid] ||\r\n      !this._characteristics[serviceUuid][characteristicUuid]\r\n    ) {\r\n      this.emit(\"write\", this._address, serviceUuid, characteristicUuid, false);\r\n      return;\r\n    }\r\n\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n    if (withoutResponse) {\r\n      this._queueCommand(\r\n        this.writeRequest(characteristic.valueHandle, data, true),\r\n        null,\r\n        () => {\r\n          this.emit(\"write\", this._address, serviceUuid, characteristicUuid);\r\n        },\r\n      );\r\n    } else if (data.length + 3 > this._mtu) {\r\n      return this.longWrite(\r\n        serviceUuid,\r\n        characteristicUuid,\r\n        data,\r\n        withoutResponse,\r\n      );\r\n    } else {\r\n      this._queueCommand(\r\n        this.writeRequest(characteristic.valueHandle, data, false),\r\n        (_data: any) => {\r\n          const opcode: any = _data[0];\r\n\r\n          if (opcode === ATT_OP_WRITE_RESP || opcode === ATT_OP_ERROR) {\r\n            this.emit(\r\n              \"write\",\r\n              this._address,\r\n              serviceUuid,\r\n              characteristicUuid,\r\n              opcode === ATT_OP_WRITE_RESP,\r\n            );\r\n          }\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  /* Perform a \"long write\" as described Bluetooth Spec section 4.9.4 \"Write Long Characteristic Values\" */\r\n  public longWrite(serviceUuid: any, characteristicUuid: any, data: any, withoutResponse: any) {\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n    const limit: any = this._mtu - 5;\r\n\r\n    const prepareWriteCallback: any = (data_chunk: any ) => {\r\n      return (resp: any) => {\r\n        const opcode: any = resp[0];\r\n\r\n        if (opcode !== ATT_OP_PREPARE_WRITE_RESP) {\r\n          debug(\r\n            this._address +\r\n            \": unexpected reply opcode %d (expecting ATT_OP_PREPARE_WRITE_RESP)\",\r\n            opcode,\r\n          );\r\n        } else {\r\n          const expected_length: any = data_chunk.length + 5;\r\n\r\n          if (resp.length !== expected_length) {\r\n            /* the response should contain the data packet echoed back to the caller */\r\n            debug(\r\n              this._address +\r\n              \": unexpected prepareWriteResponse length %d (expecting %d)\",\r\n              resp.length,\r\n              expected_length,\r\n            );\r\n          }\r\n        }\r\n      };\r\n    };\r\n\r\n    /* split into prepare-write chunks and queue them */\r\n    let offset: any = 0;\r\n\r\n    while (offset < data.length) {\r\n      const end: any = offset + limit;\r\n      const chunk: any = data.slice(offset, end);\r\n      this._queueCommand(\r\n        this.prepareWriteRequest(characteristic.valueHandle, offset, chunk),\r\n        prepareWriteCallback(chunk),\r\n      );\r\n      offset = end;\r\n    }\r\n\r\n    /* queue the execute command with a callback to emit the write signal when done */\r\n    this._queueCommand(\r\n      this.executeWriteRequest(characteristic.valueHandle),\r\n      (resp: any) => {\r\n        const opcode: any = resp[0];\r\n\r\n        if (opcode === ATT_OP_EXECUTE_WRITE_RESP && !withoutResponse) {\r\n          this.emit(\"write\", this._address, serviceUuid, characteristicUuid);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public broadcast(serviceUuid: any, characteristicUuid: any, broadcast: any) {\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n\r\n    this._queueCommand(\r\n      this.readByTypeRequest(\r\n        characteristic.startHandle,\r\n        characteristic.endHandle,\r\n        GATT_SERVER_CHARAC_CFG_UUID,\r\n      ),\r\n      (data: any) => {\r\n        const opcode: any = data[0];\r\n        if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\r\n          // let type = data[1];\r\n          const handle: any = data.readUInt16LE(2);\r\n          let value: any = data.readUInt16LE(4);\r\n\r\n          if (broadcast) {\r\n            value |= 0x0001;\r\n          } else {\r\n            value &= 0xfffe;\r\n          }\r\n\r\n          const valueBuffer: any = Buffer.alloc(2);\r\n          valueBuffer.writeUInt16LE(value, 0);\r\n\r\n          this._queueCommand(\r\n            this.writeRequest(handle, valueBuffer, false),\r\n            (_data: any ) => {\r\n              const _opcode: any = _data[0];\r\n\r\n              if (_opcode === ATT_OP_WRITE_RESP) {\r\n                this.emit(\r\n                  \"broadcast\",\r\n                  this._address,\r\n                  serviceUuid,\r\n                  characteristicUuid,\r\n                  broadcast,\r\n                );\r\n              }\r\n            },\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public notify(serviceUuid: any, characteristicUuid: any, notify: any) {\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n\r\n    this._queueCommand(\r\n      this.readByTypeRequest(\r\n        characteristic.startHandle,\r\n        characteristic.endHandle,\r\n        GATT_CLIENT_CHARAC_CFG_UUID,\r\n      ),\r\n      (data: any ) => {\r\n        const opcode: any = data[0];\r\n        if (opcode === ATT_OP_READ_BY_TYPE_RESP) {\r\n          // let type = data[1];\r\n          const handle: any = data.readUInt16LE(2);\r\n          let value: any = data.readUInt16LE(4);\r\n\r\n          const useNotify: any = characteristic.properties & 0x10;\r\n          const useIndicate: any = characteristic.properties & 0x20;\r\n\r\n          if (notify) {\r\n            if (useNotify) {\r\n              value |= 0x0001;\r\n            } else if (useIndicate) {\r\n              value |= 0x0002;\r\n            }\r\n          } else {\r\n            if (useNotify) {\r\n              value &= 0xfffe;\r\n            } else if (useIndicate) {\r\n              value &= 0xfffd;\r\n            }\r\n          }\r\n\r\n          const valueBuffer: any = Buffer.alloc(2);\r\n          valueBuffer.writeUInt16LE(value, 0);\r\n\r\n          this._queueCommand(\r\n            this.writeRequest(handle, valueBuffer, false),\r\n            (_data: any ) => {\r\n              const _opcode: any = _data[0];\r\n              debug(\r\n                \"set notify write results: \" + (_opcode === ATT_OP_WRITE_RESP),\r\n              );\r\n              // if (opcode === ATT_OP_WRITE_RESP) {\r\n              this.emit(\r\n                \"notify\",\r\n                this._address,\r\n                serviceUuid,\r\n                characteristicUuid,\r\n                notify,\r\n              );\r\n              // }\r\n            },\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public discoverDescriptors(serviceUuid: any, characteristicUuid: any) {\r\n    const characteristic: any = this._characteristics[serviceUuid][characteristicUuid];\r\n    const descriptors: any = [];\r\n\r\n    this._descriptors[serviceUuid][characteristicUuid] = {};\r\n\r\n    const callback: any = (data: any) => {\r\n      const opcode: any = data[0];\r\n      let i: any = 0;\r\n\r\n      if (opcode === ATT_OP_FIND_INFO_RESP) {\r\n        const num: any = data[1];\r\n\r\n        for (i = 0; i < num; i++) {\r\n          descriptors.push({\r\n            handle: data.readUInt16LE(2 + i * 4 + 0),\r\n            uuid: data.readUInt16LE(2 + i * 4 + 2).toString(16),\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        opcode !== ATT_OP_FIND_INFO_RESP ||\r\n        descriptors[descriptors.length - 1].handle === characteristic.endHandle\r\n      ) {\r\n        const descriptorUuids: any = [];\r\n        for (i = 0; i < descriptors.length; i++) {\r\n          descriptorUuids.push(descriptors[i].uuid);\r\n\r\n          this._descriptors[serviceUuid][characteristicUuid][\r\n            descriptors[i].uuid\r\n            ] = descriptors[i];\r\n        }\r\n\r\n        this.emit(\r\n          \"descriptorsDiscover\",\r\n          this._address,\r\n          serviceUuid,\r\n          characteristicUuid,\r\n          descriptorUuids,\r\n        );\r\n      } else {\r\n        this._queueCommand(\r\n          this.findInfoRequest(\r\n            descriptors[descriptors.length - 1].handle + 1,\r\n            characteristic.endHandle,\r\n          ),\r\n          callback,\r\n        );\r\n      }\r\n    };\r\n\r\n    this._queueCommand(\r\n      this.findInfoRequest(\r\n        characteristic.valueHandle + 1,\r\n        characteristic.endHandle,\r\n      ),\r\n      callback,\r\n    );\r\n  }\r\n\r\n  public readValue(serviceUuid: any, characteristicUuid: any, descriptorUuid: any) {\r\n    if (\r\n      !this._descriptors[serviceUuid] ||\r\n      !this._descriptors[serviceUuid][characteristicUuid] ||\r\n      !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]\r\n    ) {\r\n      this.emit(\r\n        \"valueRead\",\r\n        this._address,\r\n        serviceUuid,\r\n        characteristicUuid,\r\n        descriptorUuid,\r\n        Buffer.alloc(0),\r\n        false,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const descriptor: any = this._descriptors[serviceUuid][characteristicUuid][\r\n      descriptorUuid\r\n      ];\r\n\r\n    this._queueCommand(\r\n      this.readRequest(descriptor.handle),\r\n      (data: any ) => {\r\n        const opcode: any = data[0];\r\n\r\n        if (opcode === ATT_OP_READ_RESP || opcode === ATT_OP_ERROR) {\r\n          this.emit(\r\n            \"valueRead\",\r\n            this._address,\r\n            serviceUuid,\r\n            characteristicUuid,\r\n            descriptorUuid,\r\n            data.slice(1),\r\n            opcode === ATT_OP_READ_RESP,\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public writeValue(serviceUuid: any, characteristicUuid: any, descriptorUuid: any, data: any) {\r\n    if (\r\n      !this._descriptors[serviceUuid] ||\r\n      !this._descriptors[serviceUuid][characteristicUuid] ||\r\n      !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]\r\n    ) {\r\n      this.emit(\r\n        \"valueWrite\",\r\n        this._address,\r\n        serviceUuid,\r\n        characteristicUuid,\r\n        descriptorUuid,\r\n        false,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const descriptor: any = this._descriptors[serviceUuid][characteristicUuid][\r\n      descriptorUuid\r\n      ];\r\n\r\n    this._queueCommand(\r\n      this.writeRequest(descriptor.handle, data, false),\r\n      (_data: any ) => {\r\n        const opcode: any = _data[0];\r\n\r\n        if (opcode === ATT_OP_WRITE_RESP || opcode === ATT_OP_ERROR) {\r\n          this.emit(\r\n            \"valueWrite\",\r\n            this._address,\r\n            serviceUuid,\r\n            characteristicUuid,\r\n            descriptorUuid,\r\n            opcode === ATT_OP_WRITE_RESP,\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public readHandle(handle: any) {\r\n    this._queueCommand(\r\n      this.readRequest(handle),\r\n      (data: any ) => {\r\n        const opcode: any = data[0];\r\n\r\n        if (opcode === ATT_OP_READ_RESP) {\r\n          this.emit(\"handleRead\", this._address, handle, data.slice(1));\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  public writeHandle(handle: any, data: any, withoutResponse: any) {\r\n    if (withoutResponse) {\r\n      this._queueCommand(\r\n        this.writeRequest(handle, data, true),\r\n        null,\r\n        () => {\r\n          this.emit(\"handleWrite\", this._address, handle);\r\n        },\r\n      );\r\n    } else {\r\n      this._queueCommand(\r\n        this.writeRequest(handle, data, false),\r\n        (_data: any ) => {\r\n          const opcode: any = _data[0];\r\n\r\n          if (opcode === ATT_OP_WRITE_RESP) {\r\n            this.emit(\"handleWrite\", this._address, handle);\r\n          }\r\n        },\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gatt;\r\n"]}