{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":";AAAA,kDAAkD;;;;;AAElD,oDAA4B;AAE5B,gDAAwB;AAExB,MAAuB,SAAU,SAAQ,gBAAM,CAAC,YAAY;IAQ1D,YACE,GAAQ,EACR,MAAW,EACX,gBAAqB,EACrB,YAAiB,EACjB,iBAAsB,EACtB,aAAkB;QAElB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,CACjB,IAAI,EACJ,gBAAgB,EAChB,YAAY,EACZ,iBAAiB,EACjB,aAAa,CACd,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC3C,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,GAAQ,EAAE,IAAS;QAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,IAAI,CAAC,GAAQ,EAAE,IAAS;QAC7B,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClB;IACH,CAAC;IAEM,WAAW,CAAC,OAAY;QAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,MAAM,MAAM,GAAQ,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEpD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;IACtE,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACrD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvD,CAAC;CACF;AAzED,4BAyEC","file":"acl-stream.js","sourcesContent":["// var debug = require('debug')('acl-att-stream');\n\nimport events from \"events\";\n\nimport Smp from \"./smp\";\n\nexport  default  class AclStream extends events.EventEmitter {\n  public _hci: any;\n  public _handle: any;\n  public _smp: any;\n  public onSmpStkBinded: any;\n  public onSmpFailBinded: any;\n  public onSmpEndBinded: any;\n\n  constructor(\n    hci: any,\n    handle: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n\n    this._smp = new Smp(\n      this,\n      localAddressType,\n      localAddress,\n      remoteAddressType,\n      remoteAddress,\n    );\n\n    this.onSmpStkBinded = this.onSmpStk.bind(this);\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\n\n    this._smp.on(\"stk\", this.onSmpStkBinded);\n    this._smp.on(\"fail\", this.onSmpFailBinded);\n    this._smp.on(\"end\", this.onSmpEndBinded);\n  }\n\n  public encrypt() {\n    this._smp.sendPairingRequest();\n  }\n\n  public write(cid: any, data: any) {\n    this._hci.writeAclDataPkt(this._handle, cid, data);\n  }\n\n  public push(cid: any, data: any) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    } else {\n      this.emit(\"end\");\n    }\n  }\n\n  public pushEncrypt(encrypt: any) {\n    this.emit(\"encrypt\", encrypt);\n  }\n\n  public onSmpStk(stk: any) {\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\n\n    this._hci.startLeEncryption(this._handle, random, diversifier, stk);\n  }\n\n  public onSmpFail() {\n    this.emit(\"encryptFail\");\n  }\n\n  public onSmpEnd() {\n    this._smp.removeListener(\"stk\", this.onSmpStkBinded);\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\n  }\n}\n"]}