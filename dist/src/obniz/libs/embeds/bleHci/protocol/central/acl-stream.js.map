{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":";AAAA,kDAAkD;;;;;AAElD,oDAA4B;AAE5B,gDAAwB;AAExB,MAAuB,SAAU,SAAQ,gBAAM,CAAC,YAAY;IAQ1D,YACE,GAAQ,EACR,MAAW,EACX,gBAAqB,EACrB,YAAiB,EACjB,iBAAsB,EACtB,aAAkB;QAElB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,CACjB,IAAI,EACJ,gBAAgB,EAChB,YAAY,EACZ,iBAAiB,EACjB,aAAa,CACd,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC3C,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,GAAQ,EAAE,IAAS;QAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,IAAI,CAAC,GAAQ,EAAE,IAAS;QAC7B,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClB;IACH,CAAC;IAEM,WAAW,CAAC,OAAY;QAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,MAAM,MAAM,GAAQ,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEpD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;IACtE,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACrD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvD,CAAC;CACF;AAzED,4BAyEC","file":"acl-stream.js","sourcesContent":["// var debug = require('debug')('acl-att-stream');\r\n\r\nimport events from \"events\";\r\n\r\nimport Smp from \"./smp\";\r\n\r\nexport  default  class AclStream extends events.EventEmitter {\r\n  public _hci: any;\r\n  public _handle: any;\r\n  public _smp: any;\r\n  public onSmpStkBinded: any;\r\n  public onSmpFailBinded: any;\r\n  public onSmpEndBinded: any;\r\n\r\n  constructor(\r\n    hci: any,\r\n    handle: any,\r\n    localAddressType: any,\r\n    localAddress: any,\r\n    remoteAddressType: any,\r\n    remoteAddress: any,\r\n  ) {\r\n    super();\r\n    this._hci = hci;\r\n    this._handle = handle;\r\n\r\n    this._smp = new Smp(\r\n      this,\r\n      localAddressType,\r\n      localAddress,\r\n      remoteAddressType,\r\n      remoteAddress,\r\n    );\r\n\r\n    this.onSmpStkBinded = this.onSmpStk.bind(this);\r\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\r\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\r\n\r\n    this._smp.on(\"stk\", this.onSmpStkBinded);\r\n    this._smp.on(\"fail\", this.onSmpFailBinded);\r\n    this._smp.on(\"end\", this.onSmpEndBinded);\r\n  }\r\n\r\n  public encrypt() {\r\n    this._smp.sendPairingRequest();\r\n  }\r\n\r\n  public write(cid: any, data: any) {\r\n    this._hci.writeAclDataPkt(this._handle, cid, data);\r\n  }\r\n\r\n  public push(cid: any, data: any) {\r\n    if (data) {\r\n      this.emit(\"data\", cid, data);\r\n    } else {\r\n      this.emit(\"end\");\r\n    }\r\n  }\r\n\r\n  public pushEncrypt(encrypt: any) {\r\n    this.emit(\"encrypt\", encrypt);\r\n  }\r\n\r\n  public onSmpStk(stk: any) {\r\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\r\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\r\n\r\n    this._hci.startLeEncryption(this._handle, random, diversifier, stk);\r\n  }\r\n\r\n  public onSmpFail() {\r\n    this.emit(\"encryptFail\");\r\n  }\r\n\r\n  public onSmpEnd() {\r\n    this._smp.removeListener(\"stk\", this.onSmpStkBinded);\r\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\r\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\r\n  }\r\n}\r\n"]}