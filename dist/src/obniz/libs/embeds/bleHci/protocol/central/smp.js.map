{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/smp.ts"],"names":[],"mappings":"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","file":"smp.js","sourcesContent":["import events from \"events\";\r\n\r\nimport crypto from \"./crypto\";\r\n\r\nconst SMP_CID: any = 0x0006;\r\n\r\nconst SMP_PAIRING_REQUEST: any = 0x01;\r\nconst SMP_PAIRING_RESPONSE: any = 0x02;\r\nconst SMP_PAIRING_CONFIRM: any = 0x03;\r\nconst SMP_PAIRING_RANDOM: any = 0x04;\r\nconst SMP_PAIRING_FAILED: any = 0x05;\r\nconst SMP_ENCRYPT_INFO: any = 0x06;\r\nconst SMP_MASTER_IDENT: any = 0x07;\r\n\r\nclass Smp extends events.EventEmitter {\r\n  public _aclStream: any;\r\n  public _iat: any;\r\n  public _ia: any;\r\n  public _rat: any;\r\n  public _ra: any;\r\n  public onAclStreamDataBinded: any;\r\n  public onAclStreamEndBinded: any;\r\n  public _preq: any;\r\n  public _pres: any;\r\n  public _tk: any;\r\n  public _r: any;\r\n  public _pcnf: any;\r\n\r\n  constructor(\r\n    aclStream: any,\r\n    localAddressType: any,\r\n    localAddress: any,\r\n    remoteAddressType: any,\r\n    remoteAddress: any,\r\n  ) {\r\n    super();\r\n    this._aclStream = aclStream;\r\n\r\n    this._iat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\r\n    this._ia = Buffer.from(\r\n      localAddress\r\n        .split(\":\")\r\n        .reverse()\r\n        .join(\"\"),\r\n      \"hex\",\r\n    );\r\n    this._rat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\r\n    this._ra = Buffer.from(\r\n      remoteAddress\r\n        .split(\":\")\r\n        .reverse()\r\n        .join(\"\"),\r\n      \"hex\",\r\n    );\r\n\r\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\r\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\r\n\r\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\r\n  }\r\n\r\n  public sendPairingRequest() {\r\n    this._preq = Buffer.from([\r\n      SMP_PAIRING_REQUEST,\r\n      0x03, // IO capability: NoInputNoOutput\r\n      0x00, // OOB data: Authentication data not present\r\n      0x01, // Authentication requirement: Bonding - No MITM\r\n      0x10, // Max encryption key size\r\n      0x00, // Initiator key distribution: <none>\r\n      0x01, // Responder key distribution: EncKey\r\n    ]);\r\n\r\n    this.write(this._preq);\r\n  }\r\n\r\n  public onAclStreamData(cid: any, data?: any) {\r\n    if (cid !== SMP_CID) {\r\n      return;\r\n    }\r\n\r\n    const code: any = data.readUInt8(0);\r\n\r\n    if (SMP_PAIRING_RESPONSE === code) {\r\n      this.handlePairingResponse(data);\r\n    } else if (SMP_PAIRING_CONFIRM === code) {\r\n      this.handlePairingConfirm(data);\r\n    } else if (SMP_PAIRING_RANDOM === code) {\r\n      this.handlePairingRandom(data);\r\n    } else if (SMP_PAIRING_FAILED === code) {\r\n      this.handlePairingFailed(data);\r\n    } else if (SMP_ENCRYPT_INFO === code) {\r\n      this.handleEncryptInfo(data);\r\n    } else if (SMP_MASTER_IDENT === code) {\r\n      this.handleMasterIdent(data);\r\n    }\r\n  }\r\n\r\n  public onAclStreamEnd() {\r\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\r\n\r\n    this.emit(\"end\");\r\n  }\r\n\r\n  public handlePairingResponse(data: any) {\r\n    this._pres = data;\r\n\r\n    this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\r\n    this._r = crypto.r();\r\n\r\n    this.write(\r\n      Buffer.concat([\r\n        Buffer.from([SMP_PAIRING_CONFIRM]),\r\n        crypto.c1(\r\n          this._tk,\r\n          this._r,\r\n          this._pres,\r\n          this._preq,\r\n          this._iat,\r\n          this._ia,\r\n          this._rat,\r\n          this._ra,\r\n        ),\r\n      ]),\r\n    );\r\n  }\r\n\r\n  public handlePairingConfirm(data: any) {\r\n    this._pcnf = data;\r\n\r\n    this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));\r\n  }\r\n\r\n  public handlePairingRandom(data: any) {\r\n    const r: any = data.slice(1);\r\n\r\n    const pcnf: any = Buffer.concat([\r\n      Buffer.from([SMP_PAIRING_CONFIRM]),\r\n      crypto.c1(\r\n        this._tk,\r\n        r,\r\n        this._pres,\r\n        this._preq,\r\n        this._iat,\r\n        this._ia,\r\n        this._rat,\r\n        this._ra,\r\n      ),\r\n    ]);\r\n\r\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\r\n      const stk: any = crypto.s1(this._tk, r, this._r);\r\n\r\n      this.emit(\"stk\", stk);\r\n    } else {\r\n      this.write(Buffer.from([SMP_PAIRING_RANDOM, SMP_PAIRING_CONFIRM]));\r\n\r\n      this.emit(\"fail\");\r\n    }\r\n  }\r\n\r\n  public handlePairingFailed(data: any) {\r\n    this.emit(\"fail\");\r\n  }\r\n\r\n  public handleEncryptInfo(data: any) {\r\n    const ltk: any = data.slice(1);\r\n\r\n    this.emit(\"ltk\", ltk);\r\n  }\r\n\r\n  public handleMasterIdent(data: any) {\r\n    const ediv: any = data.slice(1, 3);\r\n    const rand: any = data.slice(3);\r\n\r\n    this.emit(\"masterIdent\", ediv, rand);\r\n  }\r\n\r\n  public write(data: any) {\r\n    this._aclStream.write(SMP_CID, data);\r\n  }\r\n}\r\n\r\nexport default Smp;\r\n"]}