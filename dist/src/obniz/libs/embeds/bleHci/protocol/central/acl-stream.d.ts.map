{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":";AAEA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B,MAAM,CAAE,OAAO,OAAQ,SAAU,SAAQ,MAAM,CAAC,YAAY;IACnD,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,cAAc,EAAE,GAAG,CAAC;gBAGzB,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,GAAG,EACX,gBAAgB,EAAE,GAAG,EACrB,YAAY,EAAE,GAAG,EACjB,iBAAiB,EAAE,GAAG,EACtB,aAAa,EAAE,GAAG;IAuBb,OAAO;IAIP,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAIzB,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAQxB,WAAW,CAAC,OAAO,EAAE,GAAG;IAIxB,QAAQ,CAAC,GAAG,EAAE,GAAG;IAOjB,SAAS;IAIT,QAAQ;CAKhB","file":"acl-stream.d.ts","sourcesContent":["// var debug = require('debug')('acl-att-stream');\n\nimport events from \"events\";\n\nimport Smp from \"./smp\";\n\nexport  default  class AclStream extends events.EventEmitter {\n  public _hci: any;\n  public _handle: any;\n  public _smp: any;\n  public onSmpStkBinded: any;\n  public onSmpFailBinded: any;\n  public onSmpEndBinded: any;\n\n  constructor(\n    hci: any,\n    handle: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n\n    this._smp = new Smp(\n      this,\n      localAddressType,\n      localAddress,\n      remoteAddressType,\n      remoteAddress,\n    );\n\n    this.onSmpStkBinded = this.onSmpStk.bind(this);\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\n\n    this._smp.on(\"stk\", this.onSmpStkBinded);\n    this._smp.on(\"fail\", this.onSmpFailBinded);\n    this._smp.on(\"end\", this.onSmpEndBinded);\n  }\n\n  public encrypt() {\n    this._smp.sendPairingRequest();\n  }\n\n  public write(cid: any, data: any) {\n    this._hci.writeAclDataPkt(this._handle, cid, data);\n  }\n\n  public push(cid: any, data: any) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    } else {\n      this.emit(\"end\");\n    }\n  }\n\n  public pushEncrypt(encrypt: any) {\n    this.emit(\"encrypt\", encrypt);\n  }\n\n  public onSmpStk(stk: any) {\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\n\n    this._hci.startLeEncryption(this._handle, random, diversifier, stk);\n  }\n\n  public onSmpFail() {\n    this.emit(\"encryptFail\");\n  }\n\n  public onSmpEnd() {\n    this._smp.removeListener(\"stk\", this.onSmpStkBinded);\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\n  }\n}\n"]}