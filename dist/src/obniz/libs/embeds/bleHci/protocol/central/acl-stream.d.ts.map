{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":";AAEA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B,MAAM,CAAE,OAAO,OAAQ,SAAU,SAAQ,MAAM,CAAC,YAAY;IACnD,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,cAAc,EAAE,GAAG,CAAC;gBAGzB,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,GAAG,EACX,gBAAgB,EAAE,GAAG,EACrB,YAAY,EAAE,GAAG,EACjB,iBAAiB,EAAE,GAAG,EACtB,aAAa,EAAE,GAAG;IAuBb,OAAO;IAIP,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAIzB,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAQxB,WAAW,CAAC,OAAO,EAAE,GAAG;IAIxB,QAAQ,CAAC,GAAG,EAAE,GAAG;IAOjB,SAAS;IAIT,QAAQ;CAKhB","file":"acl-stream.d.ts","sourcesContent":["// var debug = require('debug')('acl-att-stream');\r\n\r\nimport events from \"events\";\r\n\r\nimport Smp from \"./smp\";\r\n\r\nexport  default  class AclStream extends events.EventEmitter {\r\n  public _hci: any;\r\n  public _handle: any;\r\n  public _smp: any;\r\n  public onSmpStkBinded: any;\r\n  public onSmpFailBinded: any;\r\n  public onSmpEndBinded: any;\r\n\r\n  constructor(\r\n    hci: any,\r\n    handle: any,\r\n    localAddressType: any,\r\n    localAddress: any,\r\n    remoteAddressType: any,\r\n    remoteAddress: any,\r\n  ) {\r\n    super();\r\n    this._hci = hci;\r\n    this._handle = handle;\r\n\r\n    this._smp = new Smp(\r\n      this,\r\n      localAddressType,\r\n      localAddress,\r\n      remoteAddressType,\r\n      remoteAddress,\r\n    );\r\n\r\n    this.onSmpStkBinded = this.onSmpStk.bind(this);\r\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\r\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\r\n\r\n    this._smp.on(\"stk\", this.onSmpStkBinded);\r\n    this._smp.on(\"fail\", this.onSmpFailBinded);\r\n    this._smp.on(\"end\", this.onSmpEndBinded);\r\n  }\r\n\r\n  public encrypt() {\r\n    this._smp.sendPairingRequest();\r\n  }\r\n\r\n  public write(cid: any, data: any) {\r\n    this._hci.writeAclDataPkt(this._handle, cid, data);\r\n  }\r\n\r\n  public push(cid: any, data: any) {\r\n    if (data) {\r\n      this.emit(\"data\", cid, data);\r\n    } else {\r\n      this.emit(\"end\");\r\n    }\r\n  }\r\n\r\n  public pushEncrypt(encrypt: any) {\r\n    this.emit(\"encrypt\", encrypt);\r\n  }\r\n\r\n  public onSmpStk(stk: any) {\r\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\r\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\r\n\r\n    this._hci.startLeEncryption(this._handle, random, diversifier, stk);\r\n  }\r\n\r\n  public onSmpFail() {\r\n    this.emit(\"encryptFail\");\r\n  }\r\n\r\n  public onSmpEnd() {\r\n    this._smp.removeListener(\"stk\", this.onSmpStkBinded);\r\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\r\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\r\n  }\r\n}\r\n"]}