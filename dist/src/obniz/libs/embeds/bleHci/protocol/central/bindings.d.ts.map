{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/bindings.ts"],"names":[],"mappings":"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","file":"bindings.d.ts","sourcesContent":["// var debug = require('debug')('bindings');\r\n\r\nconst events: any = require(\"events\");\r\n\r\nimport Hci from \"../hci\";\r\nimport AclStream from \"./acl-stream\";\r\nimport Gap from \"./gap\";\r\nimport Gatt from \"./gatt\";\r\nimport Signaling from \"./signaling\";\r\n\r\nclass NobleBindings extends events.EventEmitter {\r\n  public _state: any;\r\n  public _addresses: any;\r\n  public _addresseTypes: any;\r\n  public _connectable: any;\r\n  public _pendingConnectionUuid: any;\r\n  public _connectionQueue: any;\r\n  public _handles: any;\r\n  public _gatts: any;\r\n  public _aclStreams: any;\r\n  public _signalings: any;\r\n  public _hci: any;\r\n  public _gap: any;\r\n  public _scanServiceUuids: any;\r\n\r\n  constructor(hciProtocol: any) {\r\n    super();\r\n    this._state = null;\r\n\r\n    this._addresses = {};\r\n    this._addresseTypes = {};\r\n    this._connectable = {};\r\n\r\n    this._pendingConnectionUuid = null;\r\n    this._connectionQueue = [];\r\n\r\n    this._handles = {};\r\n    this._gatts = {};\r\n    this._aclStreams = {};\r\n    this._signalings = {};\r\n\r\n    this._hci = hciProtocol;\r\n    this._gap = new Gap(this._hci);\r\n  }\r\n\r\n  public startScanning(serviceUuids: any, allowDuplicates: any) {\r\n    this._scanServiceUuids = serviceUuids || [];\r\n\r\n    this._gap.startScanning(allowDuplicates);\r\n  }\r\n\r\n  public stopScanning() {\r\n    this._gap.stopScanning();\r\n  }\r\n\r\n  public connect(peripheralUuid: any) {\r\n    const address: any = this._addresses[peripheralUuid];\r\n    const addressType: any = this._addresseTypes[peripheralUuid];\r\n\r\n    if (!this._pendingConnectionUuid) {\r\n      this._pendingConnectionUuid = peripheralUuid;\r\n\r\n      this._hci.createLeConn(address, addressType);\r\n    } else {\r\n      this._connectionQueue.push(peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public disconnect(peripheralUuid: any) {\r\n    this._hci.disconnect(this._handles[peripheralUuid]);\r\n  }\r\n\r\n  public updateRssi(peripheralUuid: any) {\r\n    this._hci.readRssi(this._handles[peripheralUuid]);\r\n  }\r\n\r\n  public init() {\r\n    this._gap.on(\"scanStart\", this.onScanStart.bind(this));\r\n    this._gap.on(\"scanStop\", this.onScanStop.bind(this));\r\n    this._gap.on(\"discover\", this.onDiscover.bind(this));\r\n\r\n    this._hci.on(\"stateChange\", this.onStateChange.bind(this));\r\n    this._hci.on(\"addressChange\", this.onAddressChange.bind(this));\r\n    this._hci.on(\"leConnComplete\", this.onLeConnComplete.bind(this));\r\n    this._hci.on(\r\n      \"leConnUpdateComplete\",\r\n      this.onLeConnUpdateComplete.bind(this),\r\n    );\r\n    this._hci.on(\"rssiRead\", this.onRssiRead.bind(this));\r\n    this._hci.on(\"disconnComplete\", this.onDisconnComplete.bind(this));\r\n    this._hci.on(\"encryptChange\", this.onEncryptChange.bind(this));\r\n    this._hci.on(\"aclDataPkt\", this.onAclDataPkt.bind(this));\r\n  }\r\n\r\n  public onStateChange(state: any) {\r\n    if (this._state === state) {\r\n      return;\r\n    }\r\n    this._state = state;\r\n\r\n    if (state === \"unauthorized\") {\r\n      console.log(\r\n        \"noble warning: adapter state unauthorized, please run as root or with sudo\",\r\n      );\r\n      console.log(\r\n        \"               or see README for information on running without root/sudo:\",\r\n      );\r\n      console.log(\r\n        \"               https://github.com/sandeepmistry/noble#running-on-linux\",\r\n      );\r\n    } else if (state === \"unsupported\") {\r\n      console.log(\r\n        \"noble warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).\",\r\n      );\r\n      console.log(\"               Try to run with environment variable:\");\r\n      console.log(\"               [sudo] NOBLE_HCI_DEVICE_ID=x node ...\");\r\n    }\r\n\r\n    this.emit(\"stateChange\", state);\r\n  }\r\n\r\n  public onAddressChange(address: any) {\r\n    this.emit(\"addressChange\", address);\r\n  }\r\n\r\n  public onScanStart(filterDuplicates: any) {\r\n    this.emit(\"scanStart\", filterDuplicates);\r\n  }\r\n\r\n  public onScanStop() {\r\n    this.emit(\"scanStop\");\r\n  }\r\n\r\n  public onDiscover(status: any, address?: any, addressType?: any, connectable?: any, advertisement?: any, rssi?: any) {\r\n    if (this._scanServiceUuids === undefined) {\r\n      return;\r\n    }\r\n\r\n    let serviceUuids: any = advertisement.serviceUuids || [];\r\n    const serviceData: any = advertisement.serviceData || [];\r\n    let hasScanServiceUuids: any = this._scanServiceUuids.length === 0;\r\n\r\n    if (!hasScanServiceUuids) {\r\n      let i: any;\r\n\r\n      serviceUuids = serviceUuids.slice();\r\n\r\n      for (i in serviceData) {\r\n        serviceUuids.push(serviceData[i].uuid);\r\n      }\r\n\r\n      for (i in serviceUuids) {\r\n        hasScanServiceUuids =\r\n          this._scanServiceUuids.indexOf(serviceUuids[i]) !== -1;\r\n\r\n        if (hasScanServiceUuids) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hasScanServiceUuids) {\r\n      const uuid: any = address.split(\":\").join(\"\");\r\n      this._addresses[uuid] = address;\r\n      this._addresseTypes[uuid] = addressType;\r\n      this._connectable[uuid] = connectable;\r\n\r\n      this.emit(\r\n        \"discover\",\r\n        uuid,\r\n        address,\r\n        addressType,\r\n        connectable,\r\n        advertisement,\r\n        rssi,\r\n      );\r\n    }\r\n  }\r\n\r\n  public onLeConnComplete(\r\n    status: any,\r\n    handle?: any,\r\n    role?: any,\r\n    addressType?: any,\r\n    address?: any,\r\n    interval?: any,\r\n    latency?: any,\r\n    supervisionTimeout?: any,\r\n    masterClockAccuracy?: any,\r\n  ) {\r\n    if (role !== 0) {\r\n      // not master, ignore\r\n      return;\r\n    }\r\n\r\n    let uuid: any = null;\r\n\r\n    let error: any = null;\r\n\r\n    if (status === 0) {\r\n      uuid = address\r\n        .split(\":\")\r\n        .join(\"\")\r\n        .toLowerCase();\r\n\r\n      const aclStream: any = new AclStream(\r\n        this._hci,\r\n        handle,\r\n        this._hci.addressType,\r\n        this._hci.address,\r\n        addressType,\r\n        address,\r\n      );\r\n      const gatt: any = new Gatt(address, aclStream);\r\n      const signaling: any = new Signaling(handle, aclStream);\r\n\r\n      this._gatts[uuid] = this._gatts[handle] = gatt;\r\n      this._signalings[uuid] = this._signalings[handle] = signaling;\r\n      this._aclStreams[handle] = aclStream;\r\n      this._handles[uuid] = handle;\r\n      this._handles[handle] = uuid;\r\n\r\n      this._gatts[handle].on(\"mtu\", this.onMtu.bind(this));\r\n      this._gatts[handle].on(\r\n        \"servicesDiscover\",\r\n        this.onServicesDiscovered.bind(this),\r\n      );\r\n      this._gatts[handle].on(\r\n        \"includedServicesDiscover\",\r\n        this.onIncludedServicesDiscovered.bind(this),\r\n      );\r\n      this._gatts[handle].on(\r\n        \"characteristicsDiscover\",\r\n        this.onCharacteristicsDiscovered.bind(this),\r\n      );\r\n      this._gatts[handle].on(\"read\", this.onRead.bind(this));\r\n      this._gatts[handle].on(\"write\", this.onWrite.bind(this));\r\n      this._gatts[handle].on(\"broadcast\", this.onBroadcast.bind(this));\r\n      this._gatts[handle].on(\"notify\", this.onNotify.bind(this));\r\n      this._gatts[handle].on(\"notification\", this.onNotification.bind(this));\r\n      this._gatts[handle].on(\r\n        \"descriptorsDiscover\",\r\n        this.onDescriptorsDiscovered.bind(this),\r\n      );\r\n      this._gatts[handle].on(\"valueRead\", this.onValueRead.bind(this));\r\n      this._gatts[handle].on(\"valueWrite\", this.onValueWrite.bind(this));\r\n      this._gatts[handle].on(\"handleRead\", this.onHandleRead.bind(this));\r\n      this._gatts[handle].on(\"handleWrite\", this.onHandleWrite.bind(this));\r\n      this._gatts[handle].on(\"handleNotify\", this.onHandleNotify.bind(this));\r\n\r\n      this._signalings[handle].on(\r\n        \"connectionParameterUpdateRequest\",\r\n        this.onConnectionParameterUpdateRequest.bind(this),\r\n      );\r\n\r\n      this._gatts[handle].exchangeMtu(256);\r\n    } else {\r\n      uuid = this._pendingConnectionUuid;\r\n      let statusMessage: any = Hci.STATUS_MAPPER[status] || \"HCI Error: Unknown\";\r\n      const errorCode: any = \" (0x\" + status.toString(16) + \")\";\r\n      statusMessage = statusMessage + errorCode;\r\n      error = new Error(statusMessage);\r\n    }\r\n\r\n    this.emit(\"connect\", uuid, error);\r\n\r\n    if (this._connectionQueue.length > 0) {\r\n      const peripheralUuid: any = this._connectionQueue.shift();\r\n\r\n      address = this._addresses[peripheralUuid];\r\n      addressType = this._addresseTypes[peripheralUuid];\r\n\r\n      this._pendingConnectionUuid = peripheralUuid;\r\n\r\n      this._hci.createLeConn(address, addressType);\r\n    } else {\r\n      this._pendingConnectionUuid = null;\r\n    }\r\n  }\r\n\r\n  public onLeConnUpdateComplete(handle: any, interval?: any, latency?: any, supervisionTimeout?: any) {\r\n    // no-op\r\n  }\r\n\r\n  public onDisconnComplete(handle: any, reason?: any) {\r\n    const uuid: any = this._handles[handle];\r\n\r\n    if (uuid) {\r\n      this._aclStreams[handle].push(null, null);\r\n      this._gatts[handle].removeAllListeners();\r\n      this._signalings[handle].removeAllListeners();\r\n\r\n      delete this._gatts[uuid];\r\n      delete this._gatts[handle];\r\n      delete this._signalings[uuid];\r\n      delete this._signalings[handle];\r\n      delete this._aclStreams[handle];\r\n      delete this._handles[uuid];\r\n      delete this._handles[handle];\r\n\r\n      this.emit(\"disconnect\", uuid); // TODO: handle reason?\r\n    } else {\r\n      // maybe disconnect as peripheral\r\n      // console.warn(\r\n      //   'noble warning: unknown handle ' + handle + ' disconnected!'\r\n      // );\r\n    }\r\n  }\r\n\r\n  public onEncryptChange(handle: any, encrypt?: any) {\r\n    const aclStream: any = this._aclStreams[handle];\r\n\r\n    if (aclStream) {\r\n      aclStream.pushEncrypt(encrypt);\r\n    }\r\n  }\r\n\r\n  public onMtu(address: any, mtu?: any) {\r\n  }\r\n\r\n  public onRssiRead(handle: any, rssi?: any) {\r\n    this.emit(\"rssiUpdate\", this._handles[handle], rssi);\r\n  }\r\n\r\n  public onAclDataPkt(handle: any, cid?: any, data?: any) {\r\n    const aclStream: any = this._aclStreams[handle];\r\n\r\n    if (aclStream) {\r\n      aclStream.push(cid, data);\r\n    }\r\n  }\r\n\r\n  public discoverServices(peripheralUuid: any, uuids: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.discoverServices(uuids || []);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onServicesDiscovered(address: any, serviceUuids?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"servicesDiscover\", uuid, serviceUuids);\r\n  }\r\n\r\n  public discoverIncludedServices(peripheralUuid: any, serviceUuid: any, serviceUuids: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.discoverIncludedServices(serviceUuid, serviceUuids || []);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onIncludedServicesDiscovered(address: any, serviceUuid?: any, includedServiceUuids?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\r\n      \"includedServicesDiscover\",\r\n      uuid,\r\n      serviceUuid,\r\n      includedServiceUuids,\r\n    );\r\n  }\r\n\r\n  public discoverCharacteristics(peripheralUuid: any, serviceUuid: any, characteristicUuids: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.discoverCharacteristics(serviceUuid, characteristicUuids || []);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onCharacteristicsDiscovered(address: any, serviceUuid?: any, characteristics?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"characteristicsDiscover\", uuid, serviceUuid, characteristics);\r\n  }\r\n\r\n  public read(peripheralUuid: any, serviceUuid: any, characteristicUuid: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.read(serviceUuid, characteristicUuid);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onRead(address: any, serviceUuid?: any, characteristicUuid?: any, data?: any, isSuccess?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\r\n      \"read\",\r\n      uuid,\r\n      serviceUuid,\r\n      characteristicUuid,\r\n      data,\r\n      false,\r\n      isSuccess,\r\n    );\r\n  }\r\n\r\n  public write(\r\n    peripheralUuid: any,\r\n    serviceUuid: any,\r\n    characteristicUuid: any,\r\n    data: any,\r\n    withoutResponse: any,\r\n  ) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.write(serviceUuid, characteristicUuid, data, withoutResponse);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onWrite(address: any, serviceUuid?: any, characteristicUuid?: any, isSuccess?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"write\", uuid, serviceUuid, characteristicUuid, isSuccess);\r\n  }\r\n\r\n  public broadcast(peripheralUuid: any, serviceUuid: any, characteristicUuid: any, broadcast: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.broadcast(serviceUuid, characteristicUuid, broadcast);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onBroadcast(address: any, serviceUuid?: any, characteristicUuid?: any, state?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"broadcast\", uuid, serviceUuid, characteristicUuid, state);\r\n  }\r\n\r\n  public notify(peripheralUuid: any, serviceUuid: any, characteristicUuid: any, notify: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.notify(serviceUuid, characteristicUuid, notify);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onNotify(address: any, serviceUuid?: any, characteristicUuid?: any, state?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"notify\", uuid, serviceUuid, characteristicUuid, state);\r\n  }\r\n\r\n  public onNotification(address: any, serviceUuid?: any, characteristicUuid?: any, data?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"read\", uuid, serviceUuid, characteristicUuid, data, true, true);\r\n  }\r\n\r\n  public discoverDescriptors(peripheralUuid: any, serviceUuid: any, characteristicUuid: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.discoverDescriptors(serviceUuid, characteristicUuid);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onDescriptorsDiscovered(\r\n    address: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptorUuids?: any,\r\n  ) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\r\n      \"descriptorsDiscover\",\r\n      uuid,\r\n      serviceUuid,\r\n      characteristicUuid,\r\n      descriptorUuids,\r\n    );\r\n  }\r\n\r\n  public readValue(peripheralUuid: any, serviceUuid: any, characteristicUuid: any, descriptorUuid: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.readValue(serviceUuid, characteristicUuid, descriptorUuid);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onValueRead(\r\n    address: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptorUuid?: any,\r\n    data?: any,\r\n    isSuccess?: any,\r\n  ) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\r\n      \"valueRead\",\r\n      uuid,\r\n      serviceUuid,\r\n      characteristicUuid,\r\n      descriptorUuid,\r\n      data,\r\n      isSuccess,\r\n    );\r\n  }\r\n\r\n  public writeValue(\r\n    peripheralUuid: any,\r\n    serviceUuid: any,\r\n    characteristicUuid: any,\r\n    descriptorUuid: any,\r\n    data: any,\r\n  ) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.writeValue(serviceUuid, characteristicUuid, descriptorUuid, data);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onValueWrite(\r\n    address: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptorUuid?: any,\r\n    isSuccess?: any,\r\n  ) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\r\n      \"valueWrite\",\r\n      uuid,\r\n      serviceUuid,\r\n      characteristicUuid,\r\n      descriptorUuid,\r\n      isSuccess,\r\n    );\r\n  }\r\n\r\n  public readHandle(peripheralUuid: any, attHandle: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.readHandle(attHandle);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onHandleRead(address: any, handle?: any, data?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"handleRead\", uuid, handle, data);\r\n  }\r\n\r\n  public writeHandle(peripheralUuid: any, attHandle: any, data: any, withoutResponse: any) {\r\n    const handle: any = this._handles[peripheralUuid];\r\n    const gatt: any = this._gatts[handle];\r\n\r\n    if (gatt) {\r\n      gatt.writeHandle(attHandle, data, withoutResponse);\r\n    } else {\r\n      console.warn(\"noble warning: unknown peripheral \" + peripheralUuid);\r\n    }\r\n  }\r\n\r\n  public onHandleWrite(address: any, handle?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"handleWrite\", uuid, handle);\r\n  }\r\n\r\n  public onHandleNotify(address: any, handle?: any, data?: any) {\r\n    const uuid: any = address\r\n      .split(\":\")\r\n      .join(\"\")\r\n      .toLowerCase();\r\n\r\n    this.emit(\"handleNotify\", uuid, handle, data);\r\n  }\r\n\r\n  public onConnectionParameterUpdateRequest(\r\n    handle: any,\r\n    minInterval?: any,\r\n    maxInterval?: any,\r\n    latency?: any,\r\n    supervisionTimeout?: any,\r\n  ) {\r\n    this._hci.connUpdateLe(\r\n      handle,\r\n      minInterval,\r\n      maxInterval,\r\n      latency,\r\n      supervisionTimeout,\r\n    );\r\n  }\r\n}\r\n\r\nexport default NobleBindings;\r\n"]}