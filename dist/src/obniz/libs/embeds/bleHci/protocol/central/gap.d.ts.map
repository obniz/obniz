{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/gap.ts"],"names":[],"mappings":";AAIA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,IAAI,EAAE,GAAG,CAAC;IACV,UAAU,EAAE,GAAG,CAAC;IAChB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,YAAY,EAAE,GAAG,CAAC;IAClB,eAAe,EAAE,GAAG,CAAC;gBAEhB,GAAG,EAAE,GAAG;IAuCb,aAAa,CAAC,eAAe,EAAE,OAAO;IAuBtC,YAAY;IAMZ,wBAAwB;IAIxB,oBAAoB,CAAC,MAAM,EAAE,GAAG;IAoBhC,oBAAoB,CAAC,MAAM,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE,GAAG;IAsBxD,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAqPzG,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAmG7C,uBAAuB,CAAC,IAAI,EAAE,GAAG;IA0BjC,2BAA2B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAiCjE,kBAAkB;IAMlB,eAAe;IAMf,UAAU,CAAC,KAAK,EAAE,GAAG;IAGrB,+BAA+B,CAAC,MAAM,EAAE,GAAG;IAG3C,yBAAyB,CAAC,MAAM,EAAE,GAAG;IAGrC,0BAA0B,CAAC,MAAM,EAAE,GAAG;IAGtC,yBAAyB,CAAC,MAAM,EAAE,GAAG;CAmB7C;AAED,eAAe,GAAG,CAAC","file":"gap.d.ts","sourcesContent":["// let debug = require('debug')('gap');\nconst debug: any = () => {\n};\n\nimport events from \"events\";\nimport Hci from \"../hci\";\n\nclass Gap extends events.EventEmitter {\n  public _hci: any;\n  public _scanState: any;\n  public _scanFilterDuplicates: any;\n  public _discoveries: any;\n  public _advertiseState: any;\n\n  constructor(hci: any) {\n    super();\n    this._hci = hci;\n\n    this._scanState = null;\n    this._scanFilterDuplicates = null;\n    this._discoveries = {};\n\n    this._hci.on(\"error\", this.onHciError.bind(this));\n    this._hci.on(\n      \"leScanParametersSet\",\n      this.onHciLeScanParametersSet.bind(this),\n    );\n    this._hci.on(\"leScanEnableSet\", this.onHciLeScanEnableSet.bind(this));\n    this._hci.on(\n      \"leAdvertisingReport\",\n      this.onHciLeAdvertisingReport.bind(this),\n    );\n\n    this._hci.on(\"leScanEnableSetCmd\", this.onLeScanEnableSetCmd.bind(this));\n\n    this._hci.on(\n      \"leAdvertisingParametersSet\",\n      this.onHciLeAdvertisingParametersSet.bind(this),\n    );\n    this._hci.on(\n      \"leAdvertisingDataSet\",\n      this.onHciLeAdvertisingDataSet.bind(this),\n    );\n    this._hci.on(\n      \"leScanResponseDataSet\",\n      this.onHciLeScanResponseDataSet.bind(this),\n    );\n    this._hci.on(\n      \"leAdvertiseEnableSet\",\n      this.onHciLeAdvertiseEnableSet.bind(this),\n    );\n  }\n\n  public startScanning(allowDuplicates: boolean) {\n    this._scanState = \"starting\";\n    this._scanFilterDuplicates = !allowDuplicates;\n    this._discoveries = {};\n    // Always set scan parameters before scanning\n    // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737\n    // p106 - p107\n    this._hci.setScanEnabled(false, true);\n\n    this._hci.once(\"leScanEnableSet\", (scanStopStatus: number) => {\n      this._hci.setScanParameters();\n      this._hci.once(\"leScanParametersSet\", (setParamStatus: number) => {\n        setTimeout(() => {\n          this._hci.setScanEnabled(true, this._scanFilterDuplicates);\n          this._hci.once(\"leScanEnableSet\", (scanStartStatus: number) => {\n            console.log(\"stan start \", scanStopStatus, setParamStatus, scanStartStatus);\n          });\n        }, 10);\n      });\n    });\n\n  }\n\n  public stopScanning() {\n    this._scanState = \"stopping\";\n\n    this._hci.setScanEnabled(false, true);\n  }\n\n  public onHciLeScanParametersSet() {\n  }\n\n  // Called when receive an event \"Command Complete\" for \"LE Set Scan Enable\"\n  public onHciLeScanEnableSet(status: any) {\n    // Check the status we got from the command complete function.\n    if (status !== 0) {\n      // If it is non-zero there was an error, and we should not change\n      // our status as a result.\n      return;\n    }\n\n    if (this._scanState === \"starting\") {\n      this._scanState = \"started\";\n\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\n    } else if (this._scanState === \"stopping\") {\n      this._scanState = \"stopped\";\n\n      this.emit(\"scanStop\");\n    }\n  }\n\n  // Called when we see the actual command \"LE Set Scan Enable\"\n  public onLeScanEnableSetCmd(enable: any, filterDuplicates?: any) {\n    // Check to see if the new settings differ from what we expect.\n    // If we are scanning, then a change happens if the new command stops\n    // scanning or if duplicate filtering changes.\n    // If we are not scanning, then a change happens if scanning was enabled.\n    if (this._scanState === \"starting\" || this._scanState === \"started\") {\n      if (!enable) {\n        this.emit(\"scanStop\");\n      } else if (this._scanFilterDuplicates !== filterDuplicates) {\n        this._scanFilterDuplicates = filterDuplicates;\n\n        this.emit(\"scanStart\", this._scanFilterDuplicates);\n      }\n    } else if (\n      (this._scanState === \"stopping\" || this._scanState === \"stopped\") &&\n      enable\n    ) {\n      // Someone started scanning on us.\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\n    }\n  }\n\n  public onHciLeAdvertisingReport(status: any, type?: any, address?: any, addressType?: any, eir?: any, rssi?: any) {\n    const previouslyDiscovered: any = !!this._discoveries[address];\n    const advertisement: any = previouslyDiscovered\n      ? this._discoveries[address].advertisement\n      : {\n        localName: undefined,\n        txPowerLevel: undefined,\n        manufacturerData: undefined,\n        serviceData: [],\n        serviceUuids: [],\n        solicitationServiceUuids: [],\n        advertisementRaw: [],\n        scanResponseRaw: [],\n        raw: [],\n      };\n\n    let discoveryCount: any = previouslyDiscovered\n      ? this._discoveries[address].count\n      : 0;\n    let hasScanResponse: any = previouslyDiscovered\n      ? this._discoveries[address].hasScanResponse\n      : false;\n\n    if (type === 0x04) {\n      hasScanResponse = true;\n\n      if (eir.length > 0) {\n        advertisement.scanResponseRaw = Array.from(eir);\n      }\n    } else {\n      // reset service data every non-scan response event\n      advertisement.serviceData = [];\n      advertisement.serviceUuids = [];\n      advertisement.serviceSolicitationUuids = [];\n\n      if (eir.length > 0) {\n        advertisement.advertisementRaw = Array.from(eir);\n      }\n    }\n\n    discoveryCount++;\n\n    let i: any = 0;\n    let j: any = 0;\n    let serviceUuid: any = null;\n    let serviceSolicitationUuid: any = null;\n\n    while (i + 1 < eir.length) {\n      const length: any = eir.readUInt8(i);\n\n      if (length < 1) {\n        debug(\"invalid EIR data, length = \" + length);\n        break;\n      }\n\n      const eirType: any = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile\n\n      if (i + length + 1 > eir.length) {\n        debug(\"invalid EIR data, out of range of buffer length\");\n        break;\n      }\n\n      const bytes: any = eir.slice(i + 2).slice(0, length - 1);\n\n      switch (eirType) {\n        case 0x02: // Incomplete List of 16-bit Service Class UUID\n        case 0x03: // Complete List of 16-bit Service Class UUIDs\n          for (j = 0; j < bytes.length; j += 2) {\n            serviceUuid = bytes.readUInt16LE(j).toString(16);\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\n              advertisement.serviceUuids.push(serviceUuid);\n            }\n          }\n          break;\n\n        case 0x06: // Incomplete List of 128-bit Service Class UUIDs\n        case 0x07: // Complete List of 128-bit Service Class UUIDs\n          for (j = 0; j < bytes.length; j += 16) {\n            serviceUuid = bytes\n              .slice(j, j + 16)\n              .toString(\"hex\")\n              .match(/.{1,2}/g)\n              .reverse()\n              .join(\"\");\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\n              advertisement.serviceUuids.push(serviceUuid);\n            }\n          }\n          break;\n\n        case 0x08: // Shortened Local Name\n        case 0x09: // Complete Local Name\n          advertisement.localName = bytes.toString(\"utf8\");\n          break;\n\n        case 0x0a: {\n          // Tx Power Level\n          advertisement.txPowerLevel = bytes.readInt8(0);\n          break;\n        }\n        case 0x14: {\n          // List of 16 bit solicitation UUIDs\n          for (j = 0; j < bytes.length; j += 2) {\n            serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);\n            if (\n              advertisement.serviceSolicitationUuids.indexOf(\n                serviceSolicitationUuid,\n              ) === -1\n            ) {\n              advertisement.serviceSolicitationUuids.push(\n                serviceSolicitationUuid,\n              );\n            }\n          }\n          break;\n        }\n        case 0x15: {\n          // List of 128 bit solicitation UUIDs\n          for (j = 0; j < bytes.length; j += 16) {\n            serviceSolicitationUuid = bytes\n              .slice(j, j + 16)\n              .toString(\"hex\")\n              .match(/.{1,2}/g)\n              .reverse()\n              .join(\"\");\n            if (\n              advertisement.serviceSolicitationUuids.indexOf(\n                serviceSolicitationUuid,\n              ) === -1\n            ) {\n              advertisement.serviceSolicitationUuids.push(\n                serviceSolicitationUuid,\n              );\n            }\n          }\n          break;\n        }\n        case 0x16: {\n          // 16-bit Service Data, there can be multiple occurences\n          const serviceDataUuid: any = bytes\n            .slice(0, 2)\n            .toString(\"hex\")\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\");\n          const serviceData: any = bytes.slice(2, bytes.length);\n\n          advertisement.serviceData.push({\n            uuid: serviceDataUuid,\n            data: serviceData,\n          });\n          break;\n        }\n        case 0x20: {\n          // 32-bit Service Data, there can be multiple occurences\n          const serviceData32Uuid: any = bytes\n            .slice(0, 4)\n            .toString(\"hex\")\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\");\n          const serviceData32: any = bytes.slice(4, bytes.length);\n\n          advertisement.serviceData.push({\n            uuid: serviceData32Uuid,\n            data: serviceData32,\n          });\n          break;\n        }\n        case 0x21: {\n          // 128-bit Service Data, there can be multiple occurences\n\n          const serviceData128Uuid: any = bytes\n            .slice(0, 16)\n            .toString(\"hex\")\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\");\n          const serviceData128: any = bytes.slice(16, bytes.length);\n\n          advertisement.serviceData.push({\n            uuid: serviceData128Uuid,\n            data: serviceData128,\n          });\n          break;\n        }\n        case 0x1f: // List of 32 bit solicitation UUIDs\n          for (j = 0; j < bytes.length; j += 4) {\n            serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);\n            if (\n              advertisement.serviceSolicitationUuids.indexOf(\n                serviceSolicitationUuid,\n              ) === -1\n            ) {\n              advertisement.serviceSolicitationUuids.push(\n                serviceSolicitationUuid,\n              );\n            }\n          }\n          break;\n\n        case 0xff: // Manufacturer Specific Data\n          advertisement.manufacturerData = bytes;\n          break;\n      }\n\n      i += length + 1;\n    }\n\n    debug(\"advertisement = \" + JSON.stringify(advertisement, null, 0));\n\n    const connectable: any =\n      type === 0x04 && previouslyDiscovered\n        ? this._discoveries[address].connectable\n        : type !== 0x03;\n\n    this._discoveries[address] = {\n      address,\n      addressType,\n      connectable,\n      advertisement,\n      rssi,\n      count: discoveryCount,\n      hasScanResponse,\n    };\n\n    // only report after a scan response event or if non-connectable or more than one discovery without a scan response, so more data can be collected\n    if (\n      type === 0x04 ||\n      !connectable ||\n      (discoveryCount > 1 && !hasScanResponse) ||\n      process.env.NOBLE_REPORT_ALL_HCI_EVENTS\n    ) {\n      this.emit(\n        \"discover\",\n        status,\n        address,\n        addressType,\n        connectable,\n        advertisement,\n        rssi,\n      );\n    }\n  }\n\n  public startAdvertising(name: any, serviceUuids: any) {\n    debug(\n      \"startAdvertising: name = \" +\n      name +\n      \", serviceUuids = \" +\n      JSON.stringify(serviceUuids, null, 2),\n    );\n\n    let advertisementDataLength: any = 3;\n    let scanDataLength: any = 0;\n\n    const serviceUuids16bit: any = [];\n    const serviceUuids128bit: any = [];\n    let i: any = 0;\n\n    if (name && name.length) {\n      scanDataLength += 2 + name.length;\n    }\n\n    if (serviceUuids && serviceUuids.length) {\n      for (i = 0; i < serviceUuids.length; i++) {\n        const serviceUuid: any = Buffer.from(\n          serviceUuids[i]\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\"),\n          \"hex\",\n        );\n\n        if (serviceUuid.length === 2) {\n          serviceUuids16bit.push(serviceUuid);\n        } else if (serviceUuid.length === 16) {\n          serviceUuids128bit.push(serviceUuid);\n        }\n      }\n    }\n\n    if (serviceUuids16bit.length) {\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\n    }\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(scanDataLength);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    let advertisementDataOffset: any = 3;\n\n    if (serviceUuids16bit.length) {\n      advertisementData.writeUInt8(\n        1 + 2 * serviceUuids16bit.length,\n        advertisementDataOffset,\n      );\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids16bit.length; i++) {\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids16bit[i].length;\n      }\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementData.writeUInt8(\n        1 + 16 * serviceUuids128bit.length,\n        advertisementDataOffset,\n      );\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids128bit.length; i++) {\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids128bit[i].length;\n      }\n    }\n\n    // name\n    if (name && name.length) {\n      const nameBuffer: any = Buffer.from(name);\n\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\n      scanData.writeUInt8(0x08, 1);\n      nameBuffer.copy(scanData, 2);\n    }\n\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\n  }\n\n  public startAdvertisingIBeacon(data: any) {\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\n\n    const dataLength: any = data.length;\n    const manufacturerDataLength: any = 4 + dataLength;\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(0);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\n    advertisementData.writeUInt8(0xff, 4);\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\n    advertisementData.writeUInt8(dataLength, 8);\n\n    data.copy(advertisementData, 9);\n\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\n  }\n\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\n    advertisementData = advertisementData || Buffer.alloc(0);\n    scanData = scanData || Buffer.alloc(0);\n\n    debug(\n      \"startAdvertisingWithEIRData: advertisement data = \" +\n      advertisementData.toString(\"hex\") +\n      \", scan data = \" +\n      scanData.toString(\"hex\"),\n    );\n\n    let error: any = null;\n\n    if (advertisementData.length > 31) {\n      error = new Error(\"Advertisement data is over maximum limit of 31 bytes\");\n    } else if (scanData.length > 31) {\n      error = new Error(\"Scan data is over maximum limit of 31 bytes\");\n    }\n\n    if (error) {\n      this.emit(\"advertisingStart\", error);\n    } else {\n      this._advertiseState = \"starting\";\n\n      this._hci.setScanResponseData(scanData);\n      this._hci.setAdvertisingData(advertisementData);\n\n      this._hci.setAdvertiseEnable(true);\n      this._hci.setScanResponseData(scanData);\n      this._hci.setAdvertisingData(advertisementData);\n    }\n  }\n\n  public restartAdvertising() {\n    this._advertiseState = \"restarting\";\n\n    this._hci.setAdvertiseEnable(true);\n  }\n\n  public stopAdvertising() {\n    this._advertiseState = \"stopping\";\n\n    this._hci.setAdvertiseEnable(false);\n  }\n\n  public onHciError(error: any) {\n  }\n\n  public onHciLeAdvertisingParametersSet(status: any) {\n  }\n\n  public onHciLeAdvertisingDataSet(status: any) {\n  }\n\n  public onHciLeScanResponseDataSet(status: any) {\n  }\n\n  public onHciLeAdvertiseEnableSet(status: any) {\n    if (this._advertiseState === \"starting\") {\n      this._advertiseState = \"started\";\n\n      let error: any = null;\n\n      if (status) {\n        error = new Error(\n          Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\",\n        );\n      }\n\n      this.emit(\"advertisingStart\", error);\n    } else if (this._advertiseState === \"stopping\") {\n      this._advertiseState = \"stopped\";\n\n      this.emit(\"advertisingStop\");\n    }\n  }\n}\n\nexport default Gap;\n"]}