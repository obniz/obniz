{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/gap.ts"],"names":[],"mappings":";AAIA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,IAAI,EAAE,GAAG,CAAC;IACV,UAAU,EAAE,GAAG,CAAC;IAChB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,YAAY,EAAE,GAAG,CAAC;IAClB,eAAe,EAAE,GAAG,CAAC;gBAEhB,GAAG,EAAE,GAAG;IAuCb,aAAa,CAAC,eAAe,EAAE,OAAO;IAuBtC,YAAY;IAMZ,wBAAwB;IAIxB,oBAAoB,CAAC,MAAM,EAAE,GAAG;IAoBhC,oBAAoB,CAAC,MAAM,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE,GAAG;IAsBxD,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAqPzG,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAmG7C,uBAAuB,CAAC,IAAI,EAAE,GAAG;IA0BjC,2BAA2B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAiCjE,kBAAkB;IAMlB,eAAe;IAMf,UAAU,CAAC,KAAK,EAAE,GAAG;IAGrB,+BAA+B,CAAC,MAAM,EAAE,GAAG;IAG3C,yBAAyB,CAAC,MAAM,EAAE,GAAG;IAGrC,0BAA0B,CAAC,MAAM,EAAE,GAAG;IAGtC,yBAAyB,CAAC,MAAM,EAAE,GAAG;CAmB7C;AAED,eAAe,GAAG,CAAC","file":"gap.d.ts","sourcesContent":["// let debug = require('debug')('gap');\r\nconst debug: any = () => {\r\n};\r\n\r\nimport events from \"events\";\r\nimport Hci from \"../hci\";\r\n\r\nclass Gap extends events.EventEmitter {\r\n  public _hci: any;\r\n  public _scanState: any;\r\n  public _scanFilterDuplicates: any;\r\n  public _discoveries: any;\r\n  public _advertiseState: any;\r\n\r\n  constructor(hci: any) {\r\n    super();\r\n    this._hci = hci;\r\n\r\n    this._scanState = null;\r\n    this._scanFilterDuplicates = null;\r\n    this._discoveries = {};\r\n\r\n    this._hci.on(\"error\", this.onHciError.bind(this));\r\n    this._hci.on(\r\n      \"leScanParametersSet\",\r\n      this.onHciLeScanParametersSet.bind(this),\r\n    );\r\n    this._hci.on(\"leScanEnableSet\", this.onHciLeScanEnableSet.bind(this));\r\n    this._hci.on(\r\n      \"leAdvertisingReport\",\r\n      this.onHciLeAdvertisingReport.bind(this),\r\n    );\r\n\r\n    this._hci.on(\"leScanEnableSetCmd\", this.onLeScanEnableSetCmd.bind(this));\r\n\r\n    this._hci.on(\r\n      \"leAdvertisingParametersSet\",\r\n      this.onHciLeAdvertisingParametersSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertisingDataSet\",\r\n      this.onHciLeAdvertisingDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leScanResponseDataSet\",\r\n      this.onHciLeScanResponseDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertiseEnableSet\",\r\n      this.onHciLeAdvertiseEnableSet.bind(this),\r\n    );\r\n  }\r\n\r\n  public startScanning(allowDuplicates: boolean) {\r\n    this._scanState = \"starting\";\r\n    this._scanFilterDuplicates = !allowDuplicates;\r\n    this._discoveries = {};\r\n    // Always set scan parameters before scanning\r\n    // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737\r\n    // p106 - p107\r\n    this._hci.setScanEnabled(false, true);\r\n\r\n    this._hci.once(\"leScanEnableSet\", (scanStopStatus: number) => {\r\n      this._hci.setScanParameters();\r\n      this._hci.once(\"leScanParametersSet\", (setParamStatus: number) => {\r\n        setTimeout(() => {\r\n          this._hci.setScanEnabled(true, this._scanFilterDuplicates);\r\n          this._hci.once(\"leScanEnableSet\", (scanStartStatus: number) => {\r\n            console.log(\"stan start \", scanStopStatus, setParamStatus, scanStartStatus);\r\n          });\r\n        }, 10);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  public stopScanning() {\r\n    this._scanState = \"stopping\";\r\n\r\n    this._hci.setScanEnabled(false, true);\r\n  }\r\n\r\n  public onHciLeScanParametersSet() {\r\n  }\r\n\r\n  // Called when receive an event \"Command Complete\" for \"LE Set Scan Enable\"\r\n  public onHciLeScanEnableSet(status: any) {\r\n    // Check the status we got from the command complete function.\r\n    if (status !== 0) {\r\n      // If it is non-zero there was an error, and we should not change\r\n      // our status as a result.\r\n      return;\r\n    }\r\n\r\n    if (this._scanState === \"starting\") {\r\n      this._scanState = \"started\";\r\n\r\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n    } else if (this._scanState === \"stopping\") {\r\n      this._scanState = \"stopped\";\r\n\r\n      this.emit(\"scanStop\");\r\n    }\r\n  }\r\n\r\n  // Called when we see the actual command \"LE Set Scan Enable\"\r\n  public onLeScanEnableSetCmd(enable: any, filterDuplicates?: any) {\r\n    // Check to see if the new settings differ from what we expect.\r\n    // If we are scanning, then a change happens if the new command stops\r\n    // scanning or if duplicate filtering changes.\r\n    // If we are not scanning, then a change happens if scanning was enabled.\r\n    if (this._scanState === \"starting\" || this._scanState === \"started\") {\r\n      if (!enable) {\r\n        this.emit(\"scanStop\");\r\n      } else if (this._scanFilterDuplicates !== filterDuplicates) {\r\n        this._scanFilterDuplicates = filterDuplicates;\r\n\r\n        this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n      }\r\n    } else if (\r\n      (this._scanState === \"stopping\" || this._scanState === \"stopped\") &&\r\n      enable\r\n    ) {\r\n      // Someone started scanning on us.\r\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n    }\r\n  }\r\n\r\n  public onHciLeAdvertisingReport(status: any, type?: any, address?: any, addressType?: any, eir?: any, rssi?: any) {\r\n    const previouslyDiscovered: any = !!this._discoveries[address];\r\n    const advertisement: any = previouslyDiscovered\r\n      ? this._discoveries[address].advertisement\r\n      : {\r\n        localName: undefined,\r\n        txPowerLevel: undefined,\r\n        manufacturerData: undefined,\r\n        serviceData: [],\r\n        serviceUuids: [],\r\n        solicitationServiceUuids: [],\r\n        advertisementRaw: [],\r\n        scanResponseRaw: [],\r\n        raw: [],\r\n      };\r\n\r\n    let discoveryCount: any = previouslyDiscovered\r\n      ? this._discoveries[address].count\r\n      : 0;\r\n    let hasScanResponse: any = previouslyDiscovered\r\n      ? this._discoveries[address].hasScanResponse\r\n      : false;\r\n\r\n    if (type === 0x04) {\r\n      hasScanResponse = true;\r\n\r\n      if (eir.length > 0) {\r\n        advertisement.scanResponseRaw = Array.from(eir);\r\n      }\r\n    } else {\r\n      // reset service data every non-scan response event\r\n      advertisement.serviceData = [];\r\n      advertisement.serviceUuids = [];\r\n      advertisement.serviceSolicitationUuids = [];\r\n\r\n      if (eir.length > 0) {\r\n        advertisement.advertisementRaw = Array.from(eir);\r\n      }\r\n    }\r\n\r\n    discoveryCount++;\r\n\r\n    let i: any = 0;\r\n    let j: any = 0;\r\n    let serviceUuid: any = null;\r\n    let serviceSolicitationUuid: any = null;\r\n\r\n    while (i + 1 < eir.length) {\r\n      const length: any = eir.readUInt8(i);\r\n\r\n      if (length < 1) {\r\n        debug(\"invalid EIR data, length = \" + length);\r\n        break;\r\n      }\r\n\r\n      const eirType: any = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile\r\n\r\n      if (i + length + 1 > eir.length) {\r\n        debug(\"invalid EIR data, out of range of buffer length\");\r\n        break;\r\n      }\r\n\r\n      const bytes: any = eir.slice(i + 2).slice(0, length - 1);\r\n\r\n      switch (eirType) {\r\n        case 0x02: // Incomplete List of 16-bit Service Class UUID\r\n        case 0x03: // Complete List of 16-bit Service Class UUIDs\r\n          for (j = 0; j < bytes.length; j += 2) {\r\n            serviceUuid = bytes.readUInt16LE(j).toString(16);\r\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\r\n              advertisement.serviceUuids.push(serviceUuid);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0x06: // Incomplete List of 128-bit Service Class UUIDs\r\n        case 0x07: // Complete List of 128-bit Service Class UUIDs\r\n          for (j = 0; j < bytes.length; j += 16) {\r\n            serviceUuid = bytes\r\n              .slice(j, j + 16)\r\n              .toString(\"hex\")\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\");\r\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\r\n              advertisement.serviceUuids.push(serviceUuid);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0x08: // Shortened Local Name\r\n        case 0x09: // Complete Local Name\r\n          advertisement.localName = bytes.toString(\"utf8\");\r\n          break;\r\n\r\n        case 0x0a: {\r\n          // Tx Power Level\r\n          advertisement.txPowerLevel = bytes.readInt8(0);\r\n          break;\r\n        }\r\n        case 0x14: {\r\n          // List of 16 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 2) {\r\n            serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 0x15: {\r\n          // List of 128 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 16) {\r\n            serviceSolicitationUuid = bytes\r\n              .slice(j, j + 16)\r\n              .toString(\"hex\")\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\");\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 0x16: {\r\n          // 16-bit Service Data, there can be multiple occurences\r\n          const serviceDataUuid: any = bytes\r\n            .slice(0, 2)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData: any = bytes.slice(2, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceDataUuid,\r\n            data: serviceData,\r\n          });\r\n          break;\r\n        }\r\n        case 0x20: {\r\n          // 32-bit Service Data, there can be multiple occurences\r\n          const serviceData32Uuid: any = bytes\r\n            .slice(0, 4)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData32: any = bytes.slice(4, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceData32Uuid,\r\n            data: serviceData32,\r\n          });\r\n          break;\r\n        }\r\n        case 0x21: {\r\n          // 128-bit Service Data, there can be multiple occurences\r\n\r\n          const serviceData128Uuid: any = bytes\r\n            .slice(0, 16)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData128: any = bytes.slice(16, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceData128Uuid,\r\n            data: serviceData128,\r\n          });\r\n          break;\r\n        }\r\n        case 0x1f: // List of 32 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 4) {\r\n            serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0xff: // Manufacturer Specific Data\r\n          advertisement.manufacturerData = bytes;\r\n          break;\r\n      }\r\n\r\n      i += length + 1;\r\n    }\r\n\r\n    debug(\"advertisement = \" + JSON.stringify(advertisement, null, 0));\r\n\r\n    const connectable: any =\r\n      type === 0x04 && previouslyDiscovered\r\n        ? this._discoveries[address].connectable\r\n        : type !== 0x03;\r\n\r\n    this._discoveries[address] = {\r\n      address,\r\n      addressType,\r\n      connectable,\r\n      advertisement,\r\n      rssi,\r\n      count: discoveryCount,\r\n      hasScanResponse,\r\n    };\r\n\r\n    // only report after a scan response event or if non-connectable or more than one discovery without a scan response, so more data can be collected\r\n    if (\r\n      type === 0x04 ||\r\n      !connectable ||\r\n      (discoveryCount > 1 && !hasScanResponse) ||\r\n      process.env.NOBLE_REPORT_ALL_HCI_EVENTS\r\n    ) {\r\n      this.emit(\r\n        \"discover\",\r\n        status,\r\n        address,\r\n        addressType,\r\n        connectable,\r\n        advertisement,\r\n        rssi,\r\n      );\r\n    }\r\n  }\r\n\r\n  public startAdvertising(name: any, serviceUuids: any) {\r\n    debug(\r\n      \"startAdvertising: name = \" +\r\n      name +\r\n      \", serviceUuids = \" +\r\n      JSON.stringify(serviceUuids, null, 2),\r\n    );\r\n\r\n    let advertisementDataLength: any = 3;\r\n    let scanDataLength: any = 0;\r\n\r\n    const serviceUuids16bit: any = [];\r\n    const serviceUuids128bit: any = [];\r\n    let i: any = 0;\r\n\r\n    if (name && name.length) {\r\n      scanDataLength += 2 + name.length;\r\n    }\r\n\r\n    if (serviceUuids && serviceUuids.length) {\r\n      for (i = 0; i < serviceUuids.length; i++) {\r\n        const serviceUuid: any = Buffer.from(\r\n          serviceUuids[i]\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n\r\n        if (serviceUuid.length === 2) {\r\n          serviceUuids16bit.push(serviceUuid);\r\n        } else if (serviceUuid.length === 16) {\r\n          serviceUuids128bit.push(serviceUuid);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\r\n    }\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(scanDataLength);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    let advertisementDataOffset: any = 3;\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 2 * serviceUuids16bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids16bit.length; i++) {\r\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids16bit[i].length;\r\n      }\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 16 * serviceUuids128bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids128bit.length; i++) {\r\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids128bit[i].length;\r\n      }\r\n    }\r\n\r\n    // name\r\n    if (name && name.length) {\r\n      const nameBuffer: any = Buffer.from(name);\r\n\r\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\r\n      scanData.writeUInt8(0x08, 1);\r\n      nameBuffer.copy(scanData, 2);\r\n    }\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingIBeacon(data: any) {\r\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\r\n\r\n    const dataLength: any = data.length;\r\n    const manufacturerDataLength: any = 4 + dataLength;\r\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(0);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\r\n    advertisementData.writeUInt8(0xff, 4);\r\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\r\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\r\n    advertisementData.writeUInt8(dataLength, 8);\r\n\r\n    data.copy(advertisementData, 9);\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\r\n    advertisementData = advertisementData || Buffer.alloc(0);\r\n    scanData = scanData || Buffer.alloc(0);\r\n\r\n    debug(\r\n      \"startAdvertisingWithEIRData: advertisement data = \" +\r\n      advertisementData.toString(\"hex\") +\r\n      \", scan data = \" +\r\n      scanData.toString(\"hex\"),\r\n    );\r\n\r\n    let error: any = null;\r\n\r\n    if (advertisementData.length > 31) {\r\n      error = new Error(\"Advertisement data is over maximum limit of 31 bytes\");\r\n    } else if (scanData.length > 31) {\r\n      error = new Error(\"Scan data is over maximum limit of 31 bytes\");\r\n    }\r\n\r\n    if (error) {\r\n      this.emit(\"advertisingStart\", error);\r\n    } else {\r\n      this._advertiseState = \"starting\";\r\n\r\n      this._hci.setScanResponseData(scanData);\r\n      this._hci.setAdvertisingData(advertisementData);\r\n\r\n      this._hci.setAdvertiseEnable(true);\r\n      this._hci.setScanResponseData(scanData);\r\n      this._hci.setAdvertisingData(advertisementData);\r\n    }\r\n  }\r\n\r\n  public restartAdvertising() {\r\n    this._advertiseState = \"restarting\";\r\n\r\n    this._hci.setAdvertiseEnable(true);\r\n  }\r\n\r\n  public stopAdvertising() {\r\n    this._advertiseState = \"stopping\";\r\n\r\n    this._hci.setAdvertiseEnable(false);\r\n  }\r\n\r\n  public onHciError(error: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingParametersSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeScanResponseDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertiseEnableSet(status: any) {\r\n    if (this._advertiseState === \"starting\") {\r\n      this._advertiseState = \"started\";\r\n\r\n      let error: any = null;\r\n\r\n      if (status) {\r\n        error = new Error(\r\n          Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\",\r\n        );\r\n      }\r\n\r\n      this.emit(\"advertisingStart\", error);\r\n    } else if (this._advertiseState === \"stopping\") {\r\n      this._advertiseState = \"stopped\";\r\n\r\n      this.emit(\"advertisingStop\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gap;\r\n"]}