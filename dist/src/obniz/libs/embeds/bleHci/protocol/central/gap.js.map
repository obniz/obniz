{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/gap.ts"],"names":[],"mappings":"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","file":"gap.js","sourcesContent":["// let debug = require('debug')('gap');\r\nconst debug: any = () => {\r\n};\r\n\r\nimport events from \"events\";\r\nimport Hci from \"../hci\";\r\n\r\nclass Gap extends events.EventEmitter {\r\n  public _hci: any;\r\n  public _scanState: any;\r\n  public _scanFilterDuplicates: any;\r\n  public _discoveries: any;\r\n  public _advertiseState: any;\r\n\r\n  constructor(hci: any) {\r\n    super();\r\n    this._hci = hci;\r\n\r\n    this._scanState = null;\r\n    this._scanFilterDuplicates = null;\r\n    this._discoveries = {};\r\n\r\n    this._hci.on(\"error\", this.onHciError.bind(this));\r\n    this._hci.on(\r\n      \"leScanParametersSet\",\r\n      this.onHciLeScanParametersSet.bind(this),\r\n    );\r\n    this._hci.on(\"leScanEnableSet\", this.onHciLeScanEnableSet.bind(this));\r\n    this._hci.on(\r\n      \"leAdvertisingReport\",\r\n      this.onHciLeAdvertisingReport.bind(this),\r\n    );\r\n\r\n    this._hci.on(\"leScanEnableSetCmd\", this.onLeScanEnableSetCmd.bind(this));\r\n\r\n    this._hci.on(\r\n      \"leAdvertisingParametersSet\",\r\n      this.onHciLeAdvertisingParametersSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertisingDataSet\",\r\n      this.onHciLeAdvertisingDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leScanResponseDataSet\",\r\n      this.onHciLeScanResponseDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertiseEnableSet\",\r\n      this.onHciLeAdvertiseEnableSet.bind(this),\r\n    );\r\n  }\r\n\r\n  public startScanning(allowDuplicates: boolean) {\r\n    this._scanState = \"starting\";\r\n    this._scanFilterDuplicates = !allowDuplicates;\r\n    this._discoveries = {};\r\n    // Always set scan parameters before scanning\r\n    // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737\r\n    // p106 - p107\r\n    this._hci.setScanEnabled(false, true);\r\n\r\n    this._hci.once(\"leScanEnableSet\", (scanStopStatus: number) => {\r\n      this._hci.setScanParameters();\r\n      this._hci.once(\"leScanParametersSet\", (setParamStatus: number) => {\r\n        setTimeout(() => {\r\n          this._hci.setScanEnabled(true, this._scanFilterDuplicates);\r\n          this._hci.once(\"leScanEnableSet\", (scanStartStatus: number) => {\r\n            console.log(\"stan start \", scanStopStatus, setParamStatus, scanStartStatus);\r\n          });\r\n        }, 10);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  public stopScanning() {\r\n    this._scanState = \"stopping\";\r\n\r\n    this._hci.setScanEnabled(false, true);\r\n  }\r\n\r\n  public onHciLeScanParametersSet() {\r\n  }\r\n\r\n  // Called when receive an event \"Command Complete\" for \"LE Set Scan Enable\"\r\n  public onHciLeScanEnableSet(status: any) {\r\n    // Check the status we got from the command complete function.\r\n    if (status !== 0) {\r\n      // If it is non-zero there was an error, and we should not change\r\n      // our status as a result.\r\n      return;\r\n    }\r\n\r\n    if (this._scanState === \"starting\") {\r\n      this._scanState = \"started\";\r\n\r\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n    } else if (this._scanState === \"stopping\") {\r\n      this._scanState = \"stopped\";\r\n\r\n      this.emit(\"scanStop\");\r\n    }\r\n  }\r\n\r\n  // Called when we see the actual command \"LE Set Scan Enable\"\r\n  public onLeScanEnableSetCmd(enable: any, filterDuplicates?: any) {\r\n    // Check to see if the new settings differ from what we expect.\r\n    // If we are scanning, then a change happens if the new command stops\r\n    // scanning or if duplicate filtering changes.\r\n    // If we are not scanning, then a change happens if scanning was enabled.\r\n    if (this._scanState === \"starting\" || this._scanState === \"started\") {\r\n      if (!enable) {\r\n        this.emit(\"scanStop\");\r\n      } else if (this._scanFilterDuplicates !== filterDuplicates) {\r\n        this._scanFilterDuplicates = filterDuplicates;\r\n\r\n        this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n      }\r\n    } else if (\r\n      (this._scanState === \"stopping\" || this._scanState === \"stopped\") &&\r\n      enable\r\n    ) {\r\n      // Someone started scanning on us.\r\n      this.emit(\"scanStart\", this._scanFilterDuplicates);\r\n    }\r\n  }\r\n\r\n  public onHciLeAdvertisingReport(status: any, type?: any, address?: any, addressType?: any, eir?: any, rssi?: any) {\r\n    const previouslyDiscovered: any = !!this._discoveries[address];\r\n    const advertisement: any = previouslyDiscovered\r\n      ? this._discoveries[address].advertisement\r\n      : {\r\n        localName: undefined,\r\n        txPowerLevel: undefined,\r\n        manufacturerData: undefined,\r\n        serviceData: [],\r\n        serviceUuids: [],\r\n        solicitationServiceUuids: [],\r\n        advertisementRaw: [],\r\n        scanResponseRaw: [],\r\n        raw: [],\r\n      };\r\n\r\n    let discoveryCount: any = previouslyDiscovered\r\n      ? this._discoveries[address].count\r\n      : 0;\r\n    let hasScanResponse: any = previouslyDiscovered\r\n      ? this._discoveries[address].hasScanResponse\r\n      : false;\r\n\r\n    if (type === 0x04) {\r\n      hasScanResponse = true;\r\n\r\n      if (eir.length > 0) {\r\n        advertisement.scanResponseRaw = Array.from(eir);\r\n      }\r\n    } else {\r\n      // reset service data every non-scan response event\r\n      advertisement.serviceData = [];\r\n      advertisement.serviceUuids = [];\r\n      advertisement.serviceSolicitationUuids = [];\r\n\r\n      if (eir.length > 0) {\r\n        advertisement.advertisementRaw = Array.from(eir);\r\n      }\r\n    }\r\n\r\n    discoveryCount++;\r\n\r\n    let i: any = 0;\r\n    let j: any = 0;\r\n    let serviceUuid: any = null;\r\n    let serviceSolicitationUuid: any = null;\r\n\r\n    while (i + 1 < eir.length) {\r\n      const length: any = eir.readUInt8(i);\r\n\r\n      if (length < 1) {\r\n        debug(\"invalid EIR data, length = \" + length);\r\n        break;\r\n      }\r\n\r\n      const eirType: any = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile\r\n\r\n      if (i + length + 1 > eir.length) {\r\n        debug(\"invalid EIR data, out of range of buffer length\");\r\n        break;\r\n      }\r\n\r\n      const bytes: any = eir.slice(i + 2).slice(0, length - 1);\r\n\r\n      switch (eirType) {\r\n        case 0x02: // Incomplete List of 16-bit Service Class UUID\r\n        case 0x03: // Complete List of 16-bit Service Class UUIDs\r\n          for (j = 0; j < bytes.length; j += 2) {\r\n            serviceUuid = bytes.readUInt16LE(j).toString(16);\r\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\r\n              advertisement.serviceUuids.push(serviceUuid);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0x06: // Incomplete List of 128-bit Service Class UUIDs\r\n        case 0x07: // Complete List of 128-bit Service Class UUIDs\r\n          for (j = 0; j < bytes.length; j += 16) {\r\n            serviceUuid = bytes\r\n              .slice(j, j + 16)\r\n              .toString(\"hex\")\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\");\r\n            if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {\r\n              advertisement.serviceUuids.push(serviceUuid);\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0x08: // Shortened Local Name\r\n        case 0x09: // Complete Local Name\r\n          advertisement.localName = bytes.toString(\"utf8\");\r\n          break;\r\n\r\n        case 0x0a: {\r\n          // Tx Power Level\r\n          advertisement.txPowerLevel = bytes.readInt8(0);\r\n          break;\r\n        }\r\n        case 0x14: {\r\n          // List of 16 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 2) {\r\n            serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 0x15: {\r\n          // List of 128 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 16) {\r\n            serviceSolicitationUuid = bytes\r\n              .slice(j, j + 16)\r\n              .toString(\"hex\")\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\");\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 0x16: {\r\n          // 16-bit Service Data, there can be multiple occurences\r\n          const serviceDataUuid: any = bytes\r\n            .slice(0, 2)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData: any = bytes.slice(2, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceDataUuid,\r\n            data: serviceData,\r\n          });\r\n          break;\r\n        }\r\n        case 0x20: {\r\n          // 32-bit Service Data, there can be multiple occurences\r\n          const serviceData32Uuid: any = bytes\r\n            .slice(0, 4)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData32: any = bytes.slice(4, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceData32Uuid,\r\n            data: serviceData32,\r\n          });\r\n          break;\r\n        }\r\n        case 0x21: {\r\n          // 128-bit Service Data, there can be multiple occurences\r\n\r\n          const serviceData128Uuid: any = bytes\r\n            .slice(0, 16)\r\n            .toString(\"hex\")\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\");\r\n          const serviceData128: any = bytes.slice(16, bytes.length);\r\n\r\n          advertisement.serviceData.push({\r\n            uuid: serviceData128Uuid,\r\n            data: serviceData128,\r\n          });\r\n          break;\r\n        }\r\n        case 0x1f: // List of 32 bit solicitation UUIDs\r\n          for (j = 0; j < bytes.length; j += 4) {\r\n            serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);\r\n            if (\r\n              advertisement.serviceSolicitationUuids.indexOf(\r\n                serviceSolicitationUuid,\r\n              ) === -1\r\n            ) {\r\n              advertisement.serviceSolicitationUuids.push(\r\n                serviceSolicitationUuid,\r\n              );\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 0xff: // Manufacturer Specific Data\r\n          advertisement.manufacturerData = bytes;\r\n          break;\r\n      }\r\n\r\n      i += length + 1;\r\n    }\r\n\r\n    debug(\"advertisement = \" + JSON.stringify(advertisement, null, 0));\r\n\r\n    const connectable: any =\r\n      type === 0x04 && previouslyDiscovered\r\n        ? this._discoveries[address].connectable\r\n        : type !== 0x03;\r\n\r\n    this._discoveries[address] = {\r\n      address,\r\n      addressType,\r\n      connectable,\r\n      advertisement,\r\n      rssi,\r\n      count: discoveryCount,\r\n      hasScanResponse,\r\n    };\r\n\r\n    // only report after a scan response event or if non-connectable or more than one discovery without a scan response, so more data can be collected\r\n    if (\r\n      type === 0x04 ||\r\n      !connectable ||\r\n      (discoveryCount > 1 && !hasScanResponse) ||\r\n      process.env.NOBLE_REPORT_ALL_HCI_EVENTS\r\n    ) {\r\n      this.emit(\r\n        \"discover\",\r\n        status,\r\n        address,\r\n        addressType,\r\n        connectable,\r\n        advertisement,\r\n        rssi,\r\n      );\r\n    }\r\n  }\r\n\r\n  public startAdvertising(name: any, serviceUuids: any) {\r\n    debug(\r\n      \"startAdvertising: name = \" +\r\n      name +\r\n      \", serviceUuids = \" +\r\n      JSON.stringify(serviceUuids, null, 2),\r\n    );\r\n\r\n    let advertisementDataLength: any = 3;\r\n    let scanDataLength: any = 0;\r\n\r\n    const serviceUuids16bit: any = [];\r\n    const serviceUuids128bit: any = [];\r\n    let i: any = 0;\r\n\r\n    if (name && name.length) {\r\n      scanDataLength += 2 + name.length;\r\n    }\r\n\r\n    if (serviceUuids && serviceUuids.length) {\r\n      for (i = 0; i < serviceUuids.length; i++) {\r\n        const serviceUuid: any = Buffer.from(\r\n          serviceUuids[i]\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n\r\n        if (serviceUuid.length === 2) {\r\n          serviceUuids16bit.push(serviceUuid);\r\n        } else if (serviceUuid.length === 16) {\r\n          serviceUuids128bit.push(serviceUuid);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\r\n    }\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(scanDataLength);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    let advertisementDataOffset: any = 3;\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 2 * serviceUuids16bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids16bit.length; i++) {\r\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids16bit[i].length;\r\n      }\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 16 * serviceUuids128bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids128bit.length; i++) {\r\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids128bit[i].length;\r\n      }\r\n    }\r\n\r\n    // name\r\n    if (name && name.length) {\r\n      const nameBuffer: any = Buffer.from(name);\r\n\r\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\r\n      scanData.writeUInt8(0x08, 1);\r\n      nameBuffer.copy(scanData, 2);\r\n    }\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingIBeacon(data: any) {\r\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\r\n\r\n    const dataLength: any = data.length;\r\n    const manufacturerDataLength: any = 4 + dataLength;\r\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(0);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\r\n    advertisementData.writeUInt8(0xff, 4);\r\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\r\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\r\n    advertisementData.writeUInt8(dataLength, 8);\r\n\r\n    data.copy(advertisementData, 9);\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\r\n    advertisementData = advertisementData || Buffer.alloc(0);\r\n    scanData = scanData || Buffer.alloc(0);\r\n\r\n    debug(\r\n      \"startAdvertisingWithEIRData: advertisement data = \" +\r\n      advertisementData.toString(\"hex\") +\r\n      \", scan data = \" +\r\n      scanData.toString(\"hex\"),\r\n    );\r\n\r\n    let error: any = null;\r\n\r\n    if (advertisementData.length > 31) {\r\n      error = new Error(\"Advertisement data is over maximum limit of 31 bytes\");\r\n    } else if (scanData.length > 31) {\r\n      error = new Error(\"Scan data is over maximum limit of 31 bytes\");\r\n    }\r\n\r\n    if (error) {\r\n      this.emit(\"advertisingStart\", error);\r\n    } else {\r\n      this._advertiseState = \"starting\";\r\n\r\n      this._hci.setScanResponseData(scanData);\r\n      this._hci.setAdvertisingData(advertisementData);\r\n\r\n      this._hci.setAdvertiseEnable(true);\r\n      this._hci.setScanResponseData(scanData);\r\n      this._hci.setAdvertisingData(advertisementData);\r\n    }\r\n  }\r\n\r\n  public restartAdvertising() {\r\n    this._advertiseState = \"restarting\";\r\n\r\n    this._hci.setAdvertiseEnable(true);\r\n  }\r\n\r\n  public stopAdvertising() {\r\n    this._advertiseState = \"stopping\";\r\n\r\n    this._hci.setAdvertiseEnable(false);\r\n  }\r\n\r\n  public onHciError(error: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingParametersSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeScanResponseDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertiseEnableSet(status: any) {\r\n    if (this._advertiseState === \"starting\") {\r\n      this._advertiseState = \"started\";\r\n\r\n      let error: any = null;\r\n\r\n      if (status) {\r\n        error = new Error(\r\n          Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\",\r\n        );\r\n      }\r\n\r\n      this.emit(\"advertisingStart\", error);\r\n    } else if (this._advertiseState === \"stopping\") {\r\n      this._advertiseState = \"stopped\";\r\n\r\n      this.emit(\"advertisingStop\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gap;\r\n"]}