{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/smp.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAc5B,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,UAAU,EAAE,GAAG,CAAC;IAChB,IAAI,EAAE,GAAG,CAAC;IACV,GAAG,EAAE,GAAG,CAAC;IACT,IAAI,EAAE,GAAG,CAAC;IACV,GAAG,EAAE,GAAG,CAAC;IACT,qBAAqB,EAAE,GAAG,CAAC;IAC3B,oBAAoB,EAAE,GAAG,CAAC;IAC1B,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,GAAG,EAAE,GAAG,CAAC;IACT,EAAE,EAAE,GAAG,CAAC;IACR,KAAK,EAAE,GAAG,CAAC;gBAGhB,SAAS,EAAE,GAAG,EACd,gBAAgB,EAAE,GAAG,EACrB,YAAY,EAAE,GAAG,EACjB,iBAAiB,EAAE,GAAG,EACtB,aAAa,EAAE,GAAG;IA6Bb,kBAAkB;IAclB,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAsBpC,cAAc;IAOd,qBAAqB,CAAC,IAAI,EAAE,GAAG;IAuB/B,oBAAoB,CAAC,IAAI,EAAE,GAAG;IAM9B,mBAAmB,CAAC,IAAI,EAAE,GAAG;IA4B7B,mBAAmB,CAAC,IAAI,EAAE,GAAG;IAI7B,iBAAiB,CAAC,IAAI,EAAE,GAAG;IAM3B,iBAAiB,CAAC,IAAI,EAAE,GAAG;IAO3B,KAAK,CAAC,IAAI,EAAE,GAAG;CAGvB;AAED,eAAe,GAAG,CAAC","file":"smp.d.ts","sourcesContent":["import events from \"events\";\n\nimport crypto from \"./crypto\";\n\nconst SMP_CID: any = 0x0006;\n\nconst SMP_PAIRING_REQUEST: any = 0x01;\nconst SMP_PAIRING_RESPONSE: any = 0x02;\nconst SMP_PAIRING_CONFIRM: any = 0x03;\nconst SMP_PAIRING_RANDOM: any = 0x04;\nconst SMP_PAIRING_FAILED: any = 0x05;\nconst SMP_ENCRYPT_INFO: any = 0x06;\nconst SMP_MASTER_IDENT: any = 0x07;\n\nclass Smp extends events.EventEmitter {\n  public _aclStream: any;\n  public _iat: any;\n  public _ia: any;\n  public _rat: any;\n  public _ra: any;\n  public onAclStreamDataBinded: any;\n  public onAclStreamEndBinded: any;\n  public _preq: any;\n  public _pres: any;\n  public _tk: any;\n  public _r: any;\n  public _pcnf: any;\n\n  constructor(\n    aclStream: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._aclStream = aclStream;\n\n    this._iat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public sendPairingRequest() {\n    this._preq = Buffer.from([\n      SMP_PAIRING_REQUEST,\n      0x03, // IO capability: NoInputNoOutput\n      0x00, // OOB data: Authentication data not present\n      0x01, // Authentication requirement: Bonding - No MITM\n      0x10, // Max encryption key size\n      0x00, // Initiator key distribution: <none>\n      0x01, // Responder key distribution: EncKey\n    ]);\n\n    this.write(this._preq);\n  }\n\n  public onAclStreamData(cid: any, data?: any) {\n    if (cid !== SMP_CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n\n    if (SMP_PAIRING_RESPONSE === code) {\n      this.handlePairingResponse(data);\n    } else if (SMP_PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP_PAIRING_RANDOM === code) {\n      this.handlePairingRandom(data);\n    } else if (SMP_PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    } else if (SMP_ENCRYPT_INFO === code) {\n      this.handleEncryptInfo(data);\n    } else if (SMP_MASTER_IDENT === code) {\n      this.handleMasterIdent(data);\n    }\n  }\n\n  public onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n\n    this.emit(\"end\");\n  }\n\n  public handlePairingResponse(data: any) {\n    this._pres = data;\n\n    this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP_PAIRING_CONFIRM]),\n        crypto.c1(\n          this._tk,\n          this._r,\n          this._pres,\n          this._preq,\n          this._iat,\n          this._ia,\n          this._rat,\n          this._ra,\n        ),\n      ]),\n    );\n  }\n\n  public handlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));\n  }\n\n  public handlePairingRandom(data: any) {\n    const r: any = data.slice(1);\n\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP_PAIRING_CONFIRM]),\n      crypto.c1(\n        this._tk,\n        r,\n        this._pres,\n        this._preq,\n        this._iat,\n        this._ia,\n        this._rat,\n        this._ra,\n      ),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      const stk: any = crypto.s1(this._tk, r, this._r);\n\n      this.emit(\"stk\", stk);\n    } else {\n      this.write(Buffer.from([SMP_PAIRING_RANDOM, SMP_PAIRING_CONFIRM]));\n\n      this.emit(\"fail\");\n    }\n  }\n\n  public handlePairingFailed(data: any) {\n    this.emit(\"fail\");\n  }\n\n  public handleEncryptInfo(data: any) {\n    const ltk: any = data.slice(1);\n\n    this.emit(\"ltk\", ltk);\n  }\n\n  public handleMasterIdent(data: any) {\n    const ediv: any = data.slice(1, 3);\n    const rand: any = data.slice(3);\n\n    this.emit(\"masterIdent\", ediv, rand);\n  }\n\n  public write(data: any) {\n    this._aclStream.write(SMP_CID, data);\n  }\n}\n\nexport default Smp;\n"]}