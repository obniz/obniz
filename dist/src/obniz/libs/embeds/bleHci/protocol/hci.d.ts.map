{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/hci.ts"],"names":[],"mappings":"AAIA,QAAA,MAAM,MAAM,EAAE,GAAuB,CAAC;AA0FtC,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,SAAS,EAAE,GAAG,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IACZ,cAAc,EAAE,GAAG,CAAC;IACpB,EAAE,EAAE,GAAG,CAAC;IACR,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,qBAAqB,EAAE,GAAG,CAAC;IAC3B,YAAY,EAAE,GAAG,CAAC;IAClB,OAAO,EAAE,GAAG,CAAC;IACb,iBAAiB,EAAE,GAAG,CAAC;IACvB,WAAW,EAAE,GAAG,CAAC;IACjB,OAAO,EAAE,GAAG,CAAC;gBAER,QAAQ,EAAE,GAAG;IAkBZ,QAAQ;IAiBd,YAAY;IAiBZ,KAAK;IAcL,YAAY;IAMZ,gBAAgB;IAchB,UAAU;IAcV,cAAc;IAiBd,mBAAmB;IAcnB,oBAAoB;IAkBpB,iBAAiB;IAqBjB,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,OAAO;IAkB1D,YAAY,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAqC3C,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,kBAAkB,EAAE,GAAG;IAuBnG,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAoBtE,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAoBnC,QAAQ,CAAC,MAAM,EAAE,GAAG;IAiBpB,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAgBhD,wBAAwB;IA8BxB,kBAAkB,CAAC,IAAI,EAAE,GAAG;IAoB5B,mBAAmB,CAAC,IAAI,EAAE,GAAG;IAoB7B,kBAAkB,CAAC,OAAO,EAAE,GAAG;IAiB/B,gBAAgB;IAchB,cAAc;IAcd,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAgChD,eAAe;IAmBf,kBAAkB;IAelB,YAAY,CAAC,KAAK,EAAE,GAAG;IAwKvB,aAAa,CAAC,KAAK,EAAE,GAAG;IAUxB,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAmG1D,kBAAkB,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAUzD,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAwC5C,0BAA0B,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAkChD,2BAA2B,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAqBlD,qBAAqB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAQ3C,uBAAuB,CAAC,MAAM,EAAE,GAAG;IAenC,aAAa,CAAC,KAAK,EAAE,GAAG;CAGhC;AAGD,eAAe,GAAG,CAAC","file":"hci.d.ts","sourcesContent":["// let debug = require('debug')('hci');\r\nconst debug: any = () => {\r\n};\r\n\r\nconst events: any = require(\"events\");\r\n\r\nconst HCI_COMMAND_PKT: any = 0x01;\r\nconst HCI_ACLDATA_PKT: any = 0x02;\r\nconst HCI_EVENT_PKT: any = 0x04;\r\n\r\nconst ACL_START_NO_FLUSH: any = 0x00;\r\nconst ACL_CONT: any = 0x01;\r\nconst ACL_START: any = 0x02;\r\n\r\nconst EVT_DISCONN_COMPLETE: any = 0x05;\r\nconst EVT_ENCRYPT_CHANGE: any = 0x08;\r\nconst EVT_CMD_COMPLETE: any = 0x0e;\r\nconst EVT_CMD_STATUS: any = 0x0f;\r\nconst EVT_NUMBER_OF_COMPLETED_PACKETS: any = 0x13;\r\nconst EVT_LE_META_EVENT: any = 0x3e;\r\n\r\nconst EVT_LE_CONN_COMPLETE: any = 0x01;\r\nconst EVT_LE_ADVERTISING_REPORT: any = 0x02;\r\nconst EVT_LE_CONN_UPDATE_COMPLETE: any = 0x03;\r\n\r\nconst OGF_LINK_CTL: any = 0x01;\r\nconst OCF_DISCONNECT: any = 0x0006;\r\n\r\nconst OGF_HOST_CTL: any = 0x03;\r\nconst OCF_SET_EVENT_MASK: any = 0x0001;\r\nconst OCF_RESET: any = 0x0003;\r\nconst OCF_READ_LE_HOST_SUPPORTED: any = 0x006c;\r\nconst OCF_WRITE_LE_HOST_SUPPORTED: any = 0x006d;\r\n\r\nconst OGF_INFO_PARAM: any = 0x04;\r\nconst OCF_READ_LOCAL_VERSION: any = 0x0001;\r\nconst OCF_READ_BUFFER_SIZE: any = 0x0005;\r\nconst OCF_READ_BD_ADDR: any = 0x0009;\r\n\r\nconst OGF_STATUS_PARAM: any = 0x05;\r\nconst OCF_READ_RSSI: any = 0x0005;\r\n\r\nconst OGF_LE_CTL: any = 0x08;\r\nconst OCF_LE_SET_EVENT_MASK: any = 0x0001;\r\nconst OCF_LE_READ_BUFFER_SIZE: any = 0x0002;\r\nconst OCF_LE_SET_ADVERTISING_PARAMETERS: any = 0x0006;\r\nconst OCF_LE_SET_ADVERTISING_DATA: any = 0x0008;\r\nconst OCF_LE_SET_SCAN_RESPONSE_DATA: any = 0x0009;\r\nconst OCF_LE_SET_ADVERTISE_ENABLE: any = 0x000a;\r\nconst OCF_LE_SET_SCAN_PARAMETERS: any = 0x000b;\r\nconst OCF_LE_SET_SCAN_ENABLE: any = 0x000c;\r\nconst OCF_LE_CREATE_CONN: any = 0x000d;\r\nconst OCF_LE_CONN_UPDATE: any = 0x0013;\r\nconst OCF_LE_START_ENCRYPTION: any = 0x0019;\r\nconst OCF_LE_LTK_NEG_REPLY: any = 0x001b;\r\n\r\nconst DISCONNECT_CMD: any = OCF_DISCONNECT | (OGF_LINK_CTL << 10);\r\n\r\nconst SET_EVENT_MASK_CMD: any = OCF_SET_EVENT_MASK | (OGF_HOST_CTL << 10);\r\nconst RESET_CMD: any = OCF_RESET | (OGF_HOST_CTL << 10);\r\nconst READ_LE_HOST_SUPPORTED_CMD: any =\r\n  OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\r\nconst WRITE_LE_HOST_SUPPORTED_CMD: any =\r\n  OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\r\n\r\nconst READ_LOCAL_VERSION_CMD: any = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\r\nconst READ_BUFFER_SIZE_CMD: any = OCF_READ_BUFFER_SIZE | (OGF_INFO_PARAM << 10);\r\nconst READ_BD_ADDR_CMD: any = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\r\n\r\nconst READ_RSSI_CMD: any = OCF_READ_RSSI | (OGF_STATUS_PARAM << 10);\r\n\r\nconst LE_SET_EVENT_MASK_CMD: any = OCF_LE_SET_EVENT_MASK | (OGF_LE_CTL << 10);\r\nconst LE_READ_BUFFER_SIZE_CMD: any = OCF_LE_READ_BUFFER_SIZE | (OGF_LE_CTL << 10);\r\nconst LE_SET_SCAN_PARAMETERS_CMD: any =\r\n  OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL << 10);\r\nconst LE_SET_SCAN_ENABLE_CMD: any = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL << 10);\r\nconst LE_CREATE_CONN_CMD: any = OCF_LE_CREATE_CONN | (OGF_LE_CTL << 10);\r\nconst LE_CONN_UPDATE_CMD: any = OCF_LE_CONN_UPDATE | (OGF_LE_CTL << 10);\r\nconst LE_START_ENCRYPTION_CMD: any = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL << 10);\r\nconst LE_SET_ADVERTISING_PARAMETERS_CMD: any =\r\n  OCF_LE_SET_ADVERTISING_PARAMETERS | (OGF_LE_CTL << 10);\r\n\r\nconst LE_SET_ADVERTISING_DATA_CMD: any =\r\n  OCF_LE_SET_ADVERTISING_DATA | (OGF_LE_CTL << 10);\r\nconst LE_SET_SCAN_RESPONSE_DATA_CMD: any =\r\n  OCF_LE_SET_SCAN_RESPONSE_DATA | (OGF_LE_CTL << 10);\r\nconst LE_SET_ADVERTISE_ENABLE_CMD: any =\r\n  OCF_LE_SET_ADVERTISE_ENABLE | (OGF_LE_CTL << 10);\r\nconst LE_LTK_NEG_REPLY_CMD: any = OCF_LE_LTK_NEG_REPLY | (OGF_LE_CTL << 10);\r\n\r\nconst HCI_OE_USER_ENDED_CONNECTION: any = 0x13;\r\n\r\nconst STATUS_MAPPER: any = require(\"./hci-status\");\r\n\r\nclass Hci extends events.EventEmitter {\r\n  public _obnizHci: any;\r\n  public _state: any;\r\n  public _handleBuffers: any;\r\n  public on: any;\r\n  public _socket: any;\r\n  public once: any;\r\n  public _handleAclsInProgress: any;\r\n  public _aclOutQueue: any;\r\n  public _aclMtu: any;\r\n  public _aclMaxInProgress: any;\r\n  public addressType: any;\r\n  public address: any;\r\n\r\n  constructor(obnizHci: any) {\r\n    super();\r\n    this._obnizHci = obnizHci;\r\n    this._state = null;\r\n\r\n    this._handleBuffers = {};\r\n\r\n    this.on(\"stateChange\", this.onStateChange.bind(this));\r\n\r\n    this._socket = {\r\n      write: (data: any) => {\r\n        const arr: any = Array.from(data);\r\n        this._obnizHci.write(arr);\r\n      },\r\n    };\r\n    this._obnizHci.onread = this.onSocketData.bind(this);\r\n  }\r\n\r\n  public async initWait() {\r\n    this.reset();\r\n    // this.setEventMask();\r\n    // this.setLeEventMask();\r\n    // this.readLocalVersion();\r\n    // this.writeLeHostSupported();\r\n    // this.readLeHostSupported();\r\n    // this.readBdAddr();\r\n\r\n    return new Promise ((resolve: any ) => {\r\n      this.once(\"stateChange\", () => {\r\n        // console.log('te');\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  public setEventMask() {\r\n    const cmd: any = Buffer.alloc(12);\r\n    const eventMask: any = Buffer.from(\"fffffbff07f8bf3d\", \"hex\");\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(SET_EVENT_MASK_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(eventMask.length, 3);\r\n\r\n    eventMask.copy(cmd, 4);\r\n\r\n    debug(\"set event mask - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public reset() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(OCF_RESET | (OGF_HOST_CTL << 10), 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x00, 3);\r\n\r\n    debug(\"reset - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public resetBuffers() {\r\n    this._handleAclsInProgress = {};\r\n    this._handleBuffers = {};\r\n    this._aclOutQueue = [];\r\n  }\r\n\r\n  public readLocalVersion() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(READ_LOCAL_VERSION_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x0, 3);\r\n\r\n    debug(\"read local version - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public readBdAddr() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(READ_BD_ADDR_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x0, 3);\r\n\r\n    debug(\"read bd addr - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setLeEventMask() {\r\n    const cmd: any = Buffer.alloc(12);\r\n    const leEventMask: any = Buffer.from(\"1f00000000000000\", \"hex\");\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_EVENT_MASK_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(leEventMask.length, 3);\r\n\r\n    leEventMask.copy(cmd, 4);\r\n\r\n    debug(\"set le event mask - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public readLeHostSupported() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(READ_LE_HOST_SUPPORTED_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x00, 3);\r\n\r\n    debug(\"read LE host supported - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public writeLeHostSupported() {\r\n    const cmd: any = Buffer.alloc(6);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(WRITE_LE_HOST_SUPPORTED_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x02, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(0x01, 4); // le\r\n    cmd.writeUInt8(0x00, 5); // simul\r\n\r\n    debug(\"write LE host supported - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setScanParameters() {\r\n    const cmd: any = Buffer.alloc(11);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_SCAN_PARAMETERS_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x07, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(0x01, 4); // type: 0 -> passive, 1 -> active\r\n    cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6\r\n    cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6\r\n    cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random\r\n    cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types\r\n\r\n    debug(\"set scan parameters - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setScanEnabled(enabled: boolean, filterDuplicates: boolean) {\r\n    const cmd: any = Buffer.alloc(6);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_SCAN_ENABLE_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x02, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\r\n    cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates\r\n\r\n    debug(\"set scan enabled - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public createLeConn(address: any, addressType: any) {\r\n    const cmd: any = Buffer.alloc(29);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_CREATE_CONN_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x19, 3);\r\n\r\n    // data\r\n    cmd.writeUInt16LE(0x0060, 4); // interval\r\n    cmd.writeUInt16LE(0x0030, 6); // window\r\n    cmd.writeUInt8(0x00, 8); // initiator filter\r\n\r\n    cmd.writeUInt8(addressType === \"random\" ? 0x01 : 0x00, 9); // peer address type\r\n    Buffer.from(\r\n      address\r\n        .split(\":\")\r\n        .reverse()\r\n        .join(\"\"),\r\n      \"hex\",\r\n    ).copy(cmd, 10); // peer address\r\n\r\n    cmd.writeUInt8(0x00, 16); // own address type\r\n\r\n    cmd.writeUInt16LE(0x0006, 17); // min interval\r\n    cmd.writeUInt16LE(0x000c, 19); // max interval\r\n    cmd.writeUInt16LE(0x0000, 21); // latency\r\n    cmd.writeUInt16LE(0x00c8, 23); // supervision timeout\r\n    cmd.writeUInt16LE(0x0004, 25); // min ce length\r\n    cmd.writeUInt16LE(0x0006, 27); // max ce length\r\n\r\n    debug(\"create le conn - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public connUpdateLe(handle: any, minInterval: any, maxInterval: any, latency: any, supervisionTimeout: any) {\r\n    const cmd: any = Buffer.alloc(18);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_CONN_UPDATE_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x0e, 3);\r\n\r\n    // data\r\n    cmd.writeUInt16LE(handle, 4);\r\n    cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval\r\n    cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval\r\n    cmd.writeUInt16LE(latency, 10); // latency\r\n    cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout\r\n    cmd.writeUInt16LE(0x0000, 14); // min ce length\r\n    cmd.writeUInt16LE(0x0000, 16); // max ce length\r\n\r\n    debug(\"conn update le - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public startLeEncryption(handle: any, random: any, diversifier: any, key: any) {\r\n    const cmd: any = Buffer.alloc(32);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_START_ENCRYPTION_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x1c, 3);\r\n\r\n    // data\r\n    cmd.writeUInt16LE(handle, 4); // handle\r\n    random.copy(cmd, 6);\r\n    diversifier.copy(cmd, 14);\r\n    key.copy(cmd, 16);\r\n\r\n    debug(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public disconnect(handle: any, reason: any) {\r\n    const cmd: any = Buffer.alloc(7);\r\n\r\n    reason = reason || HCI_OE_USER_ENDED_CONNECTION;\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(DISCONNECT_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x03, 3);\r\n\r\n    // data\r\n    cmd.writeUInt16LE(handle, 4); // handle\r\n    cmd.writeUInt8(reason, 6); // reason\r\n\r\n    debug(\"disconnect - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public readRssi(handle: any) {\r\n    const cmd: any = Buffer.alloc(6);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(READ_RSSI_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x02, 3);\r\n\r\n    // data\r\n    cmd.writeUInt16LE(handle, 4); // handle\r\n\r\n    debug(\"read rssi - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public writeAclDataPkt(handle: any, cid: any, data: any) {\r\n    const pkt: any = Buffer.alloc(9 + data.length);\r\n\r\n    // header\r\n    pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\r\n    pkt.writeUInt16LE(handle | (ACL_START_NO_FLUSH << 12), 1);\r\n    pkt.writeUInt16LE(data.length + 4, 3); // data length 1\r\n    pkt.writeUInt16LE(data.length, 5); // data length 2\r\n    pkt.writeUInt16LE(cid, 7);\r\n\r\n    data.copy(pkt, 9);\r\n\r\n    debug(\"write acl data pkt - writing: \" + pkt.toString(\"hex\"));\r\n    this._socket.write(pkt);\r\n  }\r\n\r\n  public setAdvertisingParameters() {\r\n    const cmd: any = Buffer.alloc(19);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_ADVERTISING_PARAMETERS_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(15, 3);\r\n\r\n    const advertisementInterval: any = Math.floor(\r\n      (process.env.BLENO_ADVERTISING_INTERVAL\r\n        ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL)\r\n        : 100) * 1.6,\r\n    );\r\n\r\n    // data\r\n    cmd.writeUInt16LE(advertisementInterval, 4); // min interval\r\n    cmd.writeUInt16LE(advertisementInterval, 6); // max interval\r\n    cmd.writeUInt8(0x00, 8); // adv type\r\n    cmd.writeUInt8(0x00, 9); // own addr typ\r\n    cmd.writeUInt8(0x00, 10); // direct addr type\r\n    Buffer.from(\"000000000000\", \"hex\").copy(cmd, 11); // direct addr\r\n    cmd.writeUInt8(0x07, 17);\r\n    cmd.writeUInt8(0x00, 18);\r\n\r\n    debug(\"set advertisement parameters - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setAdvertisingData(data: any) {\r\n    const cmd: any = Buffer.alloc(36);\r\n\r\n    cmd.fill(0x00);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_ADVERTISING_DATA_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(32, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(data.length, 4);\r\n    data.copy(cmd, 5);\r\n\r\n    debug(\"set advertisement data - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setScanResponseData(data: any) {\r\n    const cmd: any = Buffer.alloc(36);\r\n\r\n    cmd.fill(0x00);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_SCAN_RESPONSE_DATA_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(32, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(data.length, 4);\r\n    data.copy(cmd, 5);\r\n\r\n    debug(\"set scan response data - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public setAdvertiseEnable(enabled: any) {\r\n    const cmd: any = Buffer.alloc(5);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_SET_ADVERTISE_ENABLE_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x01, 3);\r\n\r\n    // data\r\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\r\n\r\n    debug(\"set advertise enable - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public leReadBufferSize() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(LE_READ_BUFFER_SIZE_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x0, 3);\r\n\r\n    debug(\"le read buffer size - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public readBufferSize() {\r\n    const cmd: any = Buffer.alloc(4);\r\n\r\n    // header\r\n    cmd.writeUInt8(HCI_COMMAND_PKT, 0);\r\n    cmd.writeUInt16LE(READ_BUFFER_SIZE_CMD, 1);\r\n\r\n    // length\r\n    cmd.writeUInt8(0x0, 3);\r\n\r\n    debug(\"read buffer size - writing: \" + cmd.toString(\"hex\"));\r\n    this._socket.write(cmd);\r\n  }\r\n\r\n  public queueAclDataPkt(handle: any, cid: any, data: any) {\r\n    let hf: any = handle | (ACL_START_NO_FLUSH << 12);\r\n    // l2cap pdu may be fragmented on hci level\r\n    let l2capPdu: any = Buffer.alloc(4 + data.length);\r\n    l2capPdu.writeUInt16LE(data.length, 0);\r\n    l2capPdu.writeUInt16LE(cid, 2);\r\n    data.copy(l2capPdu, 4);\r\n    let fragId: any = 0;\r\n\r\n    while (l2capPdu.length) {\r\n      const frag: any = l2capPdu.slice(0, this._aclMtu);\r\n      l2capPdu = l2capPdu.slice(frag.length);\r\n      const pkt: any = Buffer.alloc(5 + frag.length);\r\n\r\n      // hci header\r\n      pkt.writeUInt8(HCI_ACLDATA_PKT, 0);\r\n      pkt.writeUInt16LE(hf, 1);\r\n      hf |= ACL_CONT << 12;\r\n      pkt.writeUInt16LE(frag.length, 3); // hci pdu length\r\n\r\n      frag.copy(pkt, 5);\r\n\r\n      this._aclOutQueue.push({\r\n        handle,\r\n        pkt,\r\n        fragId: fragId++,\r\n      });\r\n    }\r\n\r\n    this.pushAclOutQueue();\r\n  }\r\n\r\n  public pushAclOutQueue() {\r\n    debug(\"pushAclOutQueue\");\r\n    let inProgress: any = 0;\r\n    for (const handle in this._handleAclsInProgress) {\r\n      inProgress += this._handleAclsInProgress[handle];\r\n    }\r\n    debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);\r\n    while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {\r\n      inProgress++;\r\n      this.writeOneAclDataPkt();\r\n    }\r\n\r\n    if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {\r\n      debug(\"acl out queue congested\");\r\n      debug(\"\\tin progress = \" + inProgress);\r\n      debug(\"\\twaiting = \" + this._aclOutQueue.length);\r\n    }\r\n  }\r\n\r\n  public writeOneAclDataPkt() {\r\n    debug(\"writeOneAclDataPkt\");\r\n    const pkt: any = this._aclOutQueue.shift();\r\n    this._handleAclsInProgress[pkt.handle]++;\r\n    debug(\r\n      \"write acl data pkt frag \" +\r\n      pkt.fragId +\r\n      \" handle \" +\r\n      pkt.handle +\r\n      \" - writing: \" +\r\n      pkt.pkt.toString(\"hex\"),\r\n    );\r\n    this._socket.write(pkt.pkt);\r\n  }\r\n\r\n  public onSocketData(array: any) {\r\n    const data: any = Buffer.from(array);\r\n    debug(\"onSocketData: \" + data.toString(\"hex\"));\r\n\r\n    const eventType: any = data.readUInt8(0);\r\n\r\n    debug(\"\\tevent type = \" + eventType);\r\n\r\n    if (HCI_EVENT_PKT === eventType) {\r\n      const subEventType: any = data.readUInt8(1);\r\n\r\n      debug(\"\\tsub event type = \" + subEventType);\r\n\r\n      if (subEventType === EVT_DISCONN_COMPLETE) {\r\n        const handle: any = data.readUInt16LE(4);\r\n        const reason: any = data.readUInt8(6);\r\n\r\n        debug(\"\\t\\thandle = \" + handle);\r\n        debug(\"\\t\\treason = \" + reason);\r\n\r\n        delete this._handleAclsInProgress[handle];\r\n        const aclOutQueue: any = [];\r\n        let discarded: any = 0;\r\n        for (const i in this._aclOutQueue) {\r\n          if (this._aclOutQueue[i].handle !== handle) {\r\n            aclOutQueue.push(this._aclOutQueue[i]);\r\n          } else {\r\n            discarded++;\r\n          }\r\n        }\r\n        if (discarded) {\r\n          debug(\"\\t\\tacls discarded = \" + discarded);\r\n        }\r\n        this._aclOutQueue = aclOutQueue;\r\n        this.pushAclOutQueue();\r\n\r\n        this.emit(\"disconnComplete\", handle, reason);\r\n      } else if (subEventType === EVT_ENCRYPT_CHANGE) {\r\n        const handle: any = data.readUInt16LE(4);\r\n        const encrypt: any = data.readUInt8(6);\r\n\r\n        debug(\"\\t\\thandle = \" + handle);\r\n        debug(\"\\t\\tencrypt = \" + encrypt);\r\n\r\n        this.emit(\"encryptChange\", handle, encrypt);\r\n      } else if (subEventType === EVT_CMD_COMPLETE) {\r\n        const ncmd: any = data.readUInt8(3);\r\n        const cmd: any = data.readUInt16LE(4);\r\n        const status: any = data.readUInt8(6);\r\n        const result: any = data.slice(7);\r\n\r\n        debug(\"\\t\\tncmd = \" + ncmd);\r\n        debug(\"\\t\\tcmd = \" + cmd);\r\n        debug(\"\\t\\tstatus = \" + status);\r\n        debug(\"\\t\\tresult = \" + result.toString(\"hex\"));\r\n\r\n        this.processCmdCompleteEvent(cmd, status, result);\r\n      } else if (subEventType === EVT_CMD_STATUS) {\r\n        const status: any = data.readUInt8(3);\r\n        const cmd: any = data.readUInt16LE(5);\r\n\r\n        debug(\"\\t\\tstatus = \" + status);\r\n        debug(\"\\t\\tcmd = \" + cmd);\r\n\r\n        this.processCmdStatusEvent(cmd, status);\r\n      } else if (subEventType === EVT_LE_META_EVENT) {\r\n        const leMetaEventType: any = data.readUInt8(3);\r\n        const leMetaEventStatus: any = data.readUInt8(4);\r\n        const leMetaEventData: any = data.slice(5);\r\n\r\n        debug(\"\\t\\tLE meta event type = \" + leMetaEventType);\r\n        debug(\"\\t\\tLE meta event status = \" + leMetaEventStatus);\r\n        debug(\"\\t\\tLE meta event data = \" + leMetaEventData.toString(\"hex\"));\r\n\r\n        this.processLeMetaEvent(\r\n          leMetaEventType,\r\n          leMetaEventStatus,\r\n          leMetaEventData,\r\n        );\r\n      } else if (subEventType === EVT_NUMBER_OF_COMPLETED_PACKETS) {\r\n        const handles: any = data.readUInt8(3);\r\n        for (let i = 0; i < handles; i++) {\r\n          const handle: any = data.readUInt16LE(4 + i * 4);\r\n          const pkts: any = data.readUInt16LE(6 + i * 4);\r\n          debug(\"\\thandle = \" + handle);\r\n          debug(\"\\t\\tcompleted = \" + pkts);\r\n          if (this._handleAclsInProgress[handle] === undefined) {\r\n            debug(\"\\t\\talready closed\");\r\n            continue;\r\n          }\r\n          if (pkts > this._handleAclsInProgress[handle]) {\r\n            // Linux kernel may send acl packets by itself, so be ready for underflow\r\n            this._handleAclsInProgress[handle] = 0;\r\n          } else {\r\n            this._handleAclsInProgress[handle] -= pkts;\r\n          }\r\n          debug(\"\\t\\tin progress = \" + this._handleAclsInProgress[handle]);\r\n        }\r\n        this.pushAclOutQueue();\r\n      }\r\n    } else if (HCI_ACLDATA_PKT === eventType) {\r\n      const flags: any = data.readUInt16LE(1) >> 12;\r\n      const handle: any = data.readUInt16LE(1) & 0x0fff;\r\n\r\n      if (ACL_START === flags) {\r\n        const cid: any = data.readUInt16LE(7);\r\n\r\n        const length: any = data.readUInt16LE(5);\r\n        const pktData: any = data.slice(9);\r\n\r\n        debug(\"\\t\\tcid = \" + cid);\r\n\r\n        if (length === pktData.length) {\r\n          debug(\"\\t\\thandle = \" + handle);\r\n          debug(\"\\t\\tdata = \" + pktData.toString(\"hex\"));\r\n\r\n          this.emit(\"aclDataPkt\", handle, cid, pktData);\r\n        } else {\r\n          this._handleBuffers[handle] = {\r\n            length,\r\n            cid,\r\n            data: pktData,\r\n          };\r\n        }\r\n      } else if (ACL_CONT === flags) {\r\n        if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\r\n          return;\r\n        }\r\n\r\n        this._handleBuffers[handle].data = Buffer.concat([\r\n          this._handleBuffers[handle].data,\r\n          data.slice(5),\r\n        ]);\r\n\r\n        if (\r\n          this._handleBuffers[handle].data.length ===\r\n          this._handleBuffers[handle].length\r\n        ) {\r\n          this.emit(\r\n            \"aclDataPkt\",\r\n            handle,\r\n            this._handleBuffers[handle].cid,\r\n            this._handleBuffers[handle].data,\r\n          );\r\n\r\n          delete this._handleBuffers[handle];\r\n        }\r\n      }\r\n    } else if (HCI_COMMAND_PKT === eventType) {\r\n      const cmd: any = data.readUInt16LE(1);\r\n      const len: any = data.readUInt8(3);\r\n\r\n      debug(\"\\t\\tcmd = \" + cmd);\r\n      debug(\"\\t\\tdata len = \" + len);\r\n\r\n      if (cmd === LE_SET_SCAN_ENABLE_CMD) {\r\n        const enable: any = data.readUInt8(4) === 0x1;\r\n        const filterDuplicates: any = data.readUInt8(5) === 0x1;\r\n\r\n        debug(\"\\t\\t\\tLE enable scan command\");\r\n        debug(\"\\t\\t\\tenable scanning = \" + enable);\r\n        debug(\"\\t\\t\\tfilter duplicates = \" + filterDuplicates);\r\n\r\n        this.emit(\"leScanEnableSetCmd\", enable, filterDuplicates);\r\n      }\r\n    }\r\n  }\r\n\r\n  public onSocketError(error: any) {\r\n    debug(\"onSocketError: \" + error.message);\r\n\r\n    if (error.message === \"Operation not permitted\") {\r\n      this.emit(\"stateChange\", \"unauthorized\");\r\n    } else if (error.message === \"Network is down\") {\r\n      // no-op\r\n    }\r\n  }\r\n\r\n  public processCmdCompleteEvent(cmd: any, status: any, result: any) {\r\n    if (cmd === RESET_CMD) {\r\n      this.resetBuffers();\r\n      this.setEventMask();\r\n      this.setLeEventMask();\r\n      this.readLocalVersion();\r\n      this.readBdAddr();\r\n      this.writeLeHostSupported();\r\n      this.readLeHostSupported();\r\n      this.leReadBufferSize();\r\n    } else if (cmd === READ_LE_HOST_SUPPORTED_CMD) {\r\n      if (status === 0) {\r\n        const le: any = result.readUInt8(0);\r\n        const simul: any = result.readUInt8(1);\r\n\r\n        debug(\"\\t\\t\\tle = \" + le);\r\n        debug(\"\\t\\t\\tsimul = \" + simul);\r\n      }\r\n    } else if (cmd === READ_LOCAL_VERSION_CMD) {\r\n      const hciVer: any = result.readUInt8(0);\r\n      const hciRev: any = result.readUInt16LE(1);\r\n      const lmpVer: any = result.readInt8(3);\r\n      const manufacturer: any = result.readUInt16LE(4);\r\n      const lmpSubVer: any = result.readUInt16LE(6);\r\n\r\n      if (hciVer < 0x06) {\r\n        this.emit(\"stateChange\", \"unsupported\");\r\n      } else if (this._state !== \"poweredOn\") {\r\n        this.setScanEnabled(false, true);\r\n        this.setScanParameters();\r\n      }\r\n\r\n      this.emit(\r\n        \"readLocalVersion\",\r\n        hciVer,\r\n        hciRev,\r\n        lmpVer,\r\n        manufacturer,\r\n        lmpSubVer,\r\n      );\r\n    } else if (cmd === READ_BD_ADDR_CMD) {\r\n      this.addressType = \"public\";\r\n      this.address = result\r\n        .toString(\"hex\")\r\n        .match(/.{1,2}/g)\r\n        .reverse()\r\n        .join(\":\");\r\n\r\n      debug(\"address = \" + this.address);\r\n\r\n      this.emit(\"addressChange\", this.address);\r\n    } else if (cmd === LE_SET_SCAN_PARAMETERS_CMD) {\r\n      this.emit(\"stateChange\", \"poweredOn\");\r\n\r\n      this.emit(\"leScanParametersSet\", status);\r\n    } else if (cmd === LE_SET_SCAN_ENABLE_CMD) {\r\n      this.emit(\"leScanEnableSet\", status);\r\n    } else if (cmd === LE_SET_ADVERTISING_PARAMETERS_CMD) {\r\n      this.emit(\"stateChange\", \"poweredOn\");\r\n\r\n      this.emit(\"leAdvertisingParametersSet\", status);\r\n    } else if (cmd === LE_SET_ADVERTISING_DATA_CMD) {\r\n      this.emit(\"leAdvertisingDataSet\", status);\r\n    } else if (cmd === LE_SET_SCAN_RESPONSE_DATA_CMD) {\r\n      this.emit(\"leScanResponseDataSet\", status);\r\n    } else if (cmd === LE_SET_ADVERTISE_ENABLE_CMD) {\r\n      this.emit(\"leAdvertiseEnableSet\", status);\r\n    } else if (cmd === READ_RSSI_CMD) {\r\n      const handle: any = result.readUInt16LE(0);\r\n      const rssi: any = result.readInt8(2);\r\n\r\n      debug(\"\\t\\t\\thandle = \" + handle);\r\n      debug(\"\\t\\t\\trssi = \" + rssi);\r\n\r\n      this.emit(\"rssiRead\", handle, rssi);\r\n    } else if (cmd === LE_LTK_NEG_REPLY_CMD) {\r\n      const handle: any = result.readUInt16LE(0);\r\n\r\n      debug(\"\\t\\t\\thandle = \" + handle);\r\n      this.emit(\"leLtkNegReply\", handle);\r\n    } else if (cmd === LE_READ_BUFFER_SIZE_CMD) {\r\n      if (!status) {\r\n        this.processLeReadBufferSize(result);\r\n      }\r\n    } else if (cmd === READ_BUFFER_SIZE_CMD) {\r\n      if (!status) {\r\n        const aclMtu: any = result.readUInt16LE(0);\r\n        const aclMaxInProgress: any = result.readUInt16LE(3);\r\n        // sanity\r\n        if (aclMtu && aclMaxInProgress) {\r\n          debug(\"br/edr acl mtu = \" + aclMtu);\r\n          debug(\"br/edr acl max pkts = \" + aclMaxInProgress);\r\n          this._aclMtu = aclMtu;\r\n          this._aclMaxInProgress = aclMaxInProgress;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public processLeMetaEvent(eventType: any, status: any, data: any) {\r\n    if (eventType === EVT_LE_CONN_COMPLETE) {\r\n      this.processLeConnComplete(status, data);\r\n    } else if (eventType === EVT_LE_ADVERTISING_REPORT) {\r\n      this.processLeAdvertisingReport(status, data);\r\n    } else if (eventType === EVT_LE_CONN_UPDATE_COMPLETE) {\r\n      this.processLeConnUpdateComplete(status, data);\r\n    }\r\n  }\r\n\r\n  public processLeConnComplete(status: any, data: any) {\r\n    const handle: any = data.readUInt16LE(0);\r\n    const role: any = data.readUInt8(2);\r\n    const addressType: any = data.readUInt8(3) === 0x01 ? \"random\" : \"public\";\r\n    const address: any = data\r\n      .slice(4, 10)\r\n      .toString(\"hex\")\r\n      .match(/.{1,2}/g)\r\n      .reverse()\r\n      .join(\":\");\r\n    const interval: any = data.readUInt16LE(10) * 1.25;\r\n    const latency: any = data.readUInt16LE(12); // TODO: multiplier?\r\n    const supervisionTimeout: any = data.readUInt16LE(14) * 10;\r\n    const masterClockAccuracy: any = data.readUInt8(16); // TODO: multiplier?\r\n\r\n    debug(\"\\t\\t\\thandle = \" + handle);\r\n    debug(\"\\t\\t\\trole = \" + role);\r\n    debug(\"\\t\\t\\taddress type = \" + addressType);\r\n    debug(\"\\t\\t\\taddress = \" + address);\r\n    debug(\"\\t\\t\\tinterval = \" + interval);\r\n    debug(\"\\t\\t\\tlatency = \" + latency);\r\n    debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\r\n    debug(\"\\t\\t\\tmaster clock accuracy = \" + masterClockAccuracy);\r\n\r\n    this._handleAclsInProgress[handle] = 0;\r\n\r\n    this.emit(\r\n      \"leConnComplete\",\r\n      status,\r\n      handle,\r\n      role,\r\n      addressType,\r\n      address,\r\n      interval,\r\n      latency,\r\n      supervisionTimeout,\r\n      masterClockAccuracy,\r\n    );\r\n  }\r\n\r\n  public processLeAdvertisingReport(count: any, data: any) {\r\n    for (let i = 0; i < count; i++) {\r\n      const type: any = data.readUInt8(0);\r\n      const addressType: any = data.readUInt8(1) === 0x01 ? \"random\" : \"public\";\r\n      const address: any = data\r\n        .slice(2, 8)\r\n        .toString(\"hex\")\r\n        .match(/.{1,2}/g)\r\n        .reverse()\r\n        .join(\":\");\r\n      const eirLength: any = data.readUInt8(8);\r\n      const eir: any = data.slice(9, eirLength + 9);\r\n      const rssi: any = data.readInt8(eirLength + 9);\r\n\r\n      debug(\"\\t\\t\\ttype = \" + type);\r\n      debug(\"\\t\\t\\taddress = \" + address);\r\n      debug(\"\\t\\t\\taddress type = \" + addressType);\r\n      debug(\"\\t\\t\\teir = \" + eir.toString(\"hex\"));\r\n      debug(\"\\t\\t\\trssi = \" + rssi);\r\n\r\n      this.emit(\r\n        \"leAdvertisingReport\",\r\n        0,\r\n        type,\r\n        address,\r\n        addressType,\r\n        eir,\r\n        rssi,\r\n      );\r\n\r\n      data = data.slice(eirLength + 10);\r\n    }\r\n  }\r\n\r\n  public processLeConnUpdateComplete(status: any, data: any) {\r\n    const handle: any = data.readUInt16LE(0);\r\n    const interval: any = data.readUInt16LE(2) * 1.25;\r\n    const latency: any = data.readUInt16LE(4); // TODO: multiplier?\r\n    const supervisionTimeout: any = data.readUInt16LE(6) * 10;\r\n\r\n    debug(\"\\t\\t\\thandle = \" + handle);\r\n    debug(\"\\t\\t\\tinterval = \" + interval);\r\n    debug(\"\\t\\t\\tlatency = \" + latency);\r\n    debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\r\n\r\n    this.emit(\r\n      \"leConnUpdateComplete\",\r\n      status,\r\n      handle,\r\n      interval,\r\n      latency,\r\n      supervisionTimeout,\r\n    );\r\n  }\r\n\r\n  public processCmdStatusEvent(cmd: any, status: any) {\r\n    if (cmd === LE_CREATE_CONN_CMD) {\r\n      if (status !== 0) {\r\n        this.emit(\"leConnComplete\", status);\r\n      }\r\n    }\r\n  }\r\n\r\n  public processLeReadBufferSize(result: any) {\r\n    const aclMtu: any = result.readUInt16LE(0);\r\n    const aclMaxInProgress: any = result.readUInt8(2);\r\n    if (!aclMtu) {\r\n      // as per Bluetooth specs\r\n      debug(\"falling back to br/edr buffer size\");\r\n      this.readBufferSize();\r\n    } else {\r\n      debug(\"le acl mtu = \" + aclMtu);\r\n      debug(\"le acl max in progress = \" + aclMaxInProgress);\r\n      this._aclMtu = aclMtu;\r\n      this._aclMaxInProgress = aclMaxInProgress;\r\n    }\r\n  }\r\n\r\n  public onStateChange(state: any) {\r\n    this._state = state;\r\n  }\r\n}\r\n\r\nHci.STATUS_MAPPER = STATUS_MAPPER;\r\nexport default Hci;\r\n"]}