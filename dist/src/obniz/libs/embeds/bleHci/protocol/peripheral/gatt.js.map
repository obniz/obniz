{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.ts"],"names":[],"mappings":"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","file":"gatt.js","sourcesContent":["// var debug = require('debug')('gatt');\r\nconst debug: any = () => {\r\n};\r\n\r\nimport events from \"events\";\r\n\r\n/* eslint-disable no-unused-vars */\r\nconst ATT_OP_ERROR: any = 0x01;\r\nconst ATT_OP_MTU_REQ: any = 0x02;\r\nconst ATT_OP_MTU_RESP: any = 0x03;\r\nconst ATT_OP_FIND_INFO_REQ: any = 0x04;\r\nconst ATT_OP_FIND_INFO_RESP: any = 0x05;\r\nconst ATT_OP_FIND_BY_TYPE_REQ: any = 0x06;\r\nconst ATT_OP_FIND_BY_TYPE_RESP: any = 0x07;\r\nconst ATT_OP_READ_BY_TYPE_REQ: any = 0x08;\r\nconst ATT_OP_READ_BY_TYPE_RESP: any = 0x09;\r\nconst ATT_OP_READ_REQ: any = 0x0a;\r\nconst ATT_OP_READ_RESP: any = 0x0b;\r\nconst ATT_OP_READ_BLOB_REQ: any = 0x0c;\r\nconst ATT_OP_READ_BLOB_RESP: any = 0x0d;\r\nconst ATT_OP_READ_MULTI_REQ: any = 0x0e;\r\nconst ATT_OP_READ_MULTI_RESP: any = 0x0f;\r\nconst ATT_OP_READ_BY_GROUP_REQ: any = 0x10;\r\nconst ATT_OP_READ_BY_GROUP_RESP: any = 0x11;\r\nconst ATT_OP_WRITE_REQ: any = 0x12;\r\nconst ATT_OP_WRITE_RESP: any = 0x13;\r\nconst ATT_OP_WRITE_CMD: any = 0x52;\r\nconst ATT_OP_PREP_WRITE_REQ: any = 0x16;\r\nconst ATT_OP_PREP_WRITE_RESP: any = 0x17;\r\nconst ATT_OP_EXEC_WRITE_REQ: any = 0x18;\r\nconst ATT_OP_EXEC_WRITE_RESP: any = 0x19;\r\nconst ATT_OP_HANDLE_NOTIFY: any = 0x1b;\r\nconst ATT_OP_HANDLE_IND: any = 0x1d;\r\nconst ATT_OP_HANDLE_CNF: any = 0x1e;\r\nconst ATT_OP_SIGNED_WRITE_CMD: any = 0xd2;\r\n\r\nconst GATT_PRIM_SVC_UUID: any = 0x2800;\r\nconst GATT_INCLUDE_UUID: any = 0x2802;\r\nconst GATT_CHARAC_UUID: any = 0x2803;\r\n\r\nconst GATT_CLIENT_CHARAC_CFG_UUID: any = 0x2902;\r\nconst GATT_SERVER_CHARAC_CFG_UUID: any = 0x2903;\r\n\r\nconst ATT_ECODE_SUCCESS: any = 0x00;\r\nconst ATT_ECODE_INVALID_HANDLE: any = 0x01;\r\nconst ATT_ECODE_READ_NOT_PERM: any = 0x02;\r\nconst ATT_ECODE_WRITE_NOT_PERM: any = 0x03;\r\nconst ATT_ECODE_INVALID_PDU: any = 0x04;\r\nconst ATT_ECODE_AUTHENTICATION: any = 0x05;\r\nconst ATT_ECODE_REQ_NOT_SUPP: any = 0x06;\r\nconst ATT_ECODE_INVALID_OFFSET: any = 0x07;\r\nconst ATT_ECODE_AUTHORIZATION: any = 0x08;\r\nconst ATT_ECODE_PREP_QUEUE_FULL: any = 0x09;\r\nconst ATT_ECODE_ATTR_NOT_FOUND: any = 0x0a;\r\nconst ATT_ECODE_ATTR_NOT_LONG: any = 0x0b;\r\nconst ATT_ECODE_INSUFF_ENCR_KEY_SIZE: any = 0x0c;\r\nconst ATT_ECODE_INVAL_ATTR_VALUE_LEN: any = 0x0d;\r\nconst ATT_ECODE_UNLIKELY: any = 0x0e;\r\nconst ATT_ECODE_INSUFF_ENC: any = 0x0f;\r\nconst ATT_ECODE_UNSUPP_GRP_TYPE: any = 0x10;\r\nconst ATT_ECODE_INSUFF_RESOURCES: any = 0x11;\r\n\r\n/* eslint-enable no-unused-vars */\r\nconst ATT_CID: any = 0x0004;\r\n\r\nexport default class Gatt extends events.EventEmitter {\r\n  public maxMtu: any;\r\n  public _mtu: any;\r\n  public _preparedWriteRequest: any;\r\n  public onAclStreamDataBinded: any;\r\n  public onAclStreamEndBinded: any;\r\n  public _handles: any;\r\n  public _aclStream: any;\r\n  public _lastIndicatedAttribute: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.maxMtu = 256;\r\n    this._mtu = 23;\r\n    this._preparedWriteRequest = null;\r\n\r\n    this.setServices([]);\r\n\r\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\r\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\r\n  }\r\n\r\n  public setServices(services: any) {\r\n    // var deviceName = process.env.BLENO_DEVICE_NAME || os.hostname();\r\n\r\n    // base services and characteristics\r\n    const allServices: any = [\r\n      // {\r\n      //   uuid: '1800',\r\n      //   characteristics: [\r\n      //     {\r\n      //       uuid: '2a00',\r\n      //       properties: ['read'],\r\n      //       secure: [],\r\n      //       value: Buffer.from(deviceName),\r\n      //       descriptors: []\r\n      //     },\r\n      //     {\r\n      //       uuid: '2a01',\r\n      //       properties: ['read'],\r\n      //       secure: [],\r\n      //       value: Buffer.from([0x80, 0x00]),\r\n      //       descriptors: []\r\n      //     }\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   uuid: '1801',\r\n      //   characteristics: [\r\n      //     {\r\n      //       uuid: '2a05',\r\n      //       properties: ['indicate'],\r\n      //       secure: [],\r\n      //       value: Buffer.from([0x00, 0x00, 0x00, 0x00]),\r\n      //       descriptors: []\r\n      //     }\r\n      //   ]\r\n      // }\r\n    ].concat(services);\r\n\r\n    this._handles = [];\r\n\r\n    let handle: any = 0;\r\n    let i: any;\r\n    let j: any;\r\n\r\n    for (i = 0; i < allServices.length; i++) {\r\n      const service: any = allServices[i];\r\n\r\n      handle++;\r\n      const serviceHandle: any = handle;\r\n\r\n      this._handles[serviceHandle] = {\r\n        type: \"service\",\r\n        uuid: service.uuid,\r\n        attribute: service,\r\n        startHandle: serviceHandle,\r\n        // endHandle filled in below\r\n      };\r\n\r\n      for (j = 0; j < service.characteristics.length; j++) {\r\n        const characteristic: any = service.characteristics[j];\r\n\r\n        let properties: any = 0;\r\n        let secure: any = 0;\r\n\r\n        if (characteristic.properties.indexOf(\"read\") !== -1) {\r\n          properties |= 0x02;\r\n\r\n          if (characteristic.secure.indexOf(\"read\") !== -1) {\r\n            secure |= 0x02;\r\n          }\r\n        }\r\n\r\n        if (characteristic.properties.indexOf(\"writeWithoutResponse\") !== -1) {\r\n          properties |= 0x04;\r\n\r\n          if (characteristic.secure.indexOf(\"writeWithoutResponse\") !== -1) {\r\n            secure |= 0x04;\r\n          }\r\n        }\r\n\r\n        if (characteristic.properties.indexOf(\"write\") !== -1) {\r\n          properties |= 0x08;\r\n\r\n          if (characteristic.secure.indexOf(\"write\") !== -1) {\r\n            secure |= 0x08;\r\n          }\r\n        }\r\n\r\n        if (characteristic.properties.indexOf(\"notify\") !== -1) {\r\n          properties |= 0x10;\r\n\r\n          if (characteristic.secure.indexOf(\"notify\") !== -1) {\r\n            secure |= 0x10;\r\n          }\r\n        }\r\n\r\n        if (characteristic.properties.indexOf(\"indicate\") !== -1) {\r\n          properties |= 0x20;\r\n\r\n          if (characteristic.secure.indexOf(\"indicate\") !== -1) {\r\n            secure |= 0x20;\r\n          }\r\n        }\r\n\r\n        handle++;\r\n        const characteristicHandle: any = handle;\r\n\r\n        handle++;\r\n        const characteristicValueHandle: any = handle;\r\n\r\n        this._handles[characteristicHandle] = {\r\n          type: \"characteristic\",\r\n          uuid: characteristic.uuid,\r\n          properties,\r\n          secure,\r\n          attribute: characteristic,\r\n          startHandle: characteristicHandle,\r\n          valueHandle: characteristicValueHandle,\r\n        };\r\n\r\n        this._handles[characteristicValueHandle] = {\r\n          type: \"characteristicValue\",\r\n          handle: characteristicValueHandle,\r\n          value: characteristic.value,\r\n        };\r\n\r\n        const hasCCCD: any = characteristic.descriptors.find((e: any) => e.uuid === \"2902\");\r\n        if (hasCCCD || properties & 0x30) {\r\n          // notify or indicate\r\n          // add client characteristic configuration descriptor\r\n\r\n          handle++;\r\n          const clientCharacteristicConfigurationDescriptorHandle: any = handle;\r\n          this._handles[clientCharacteristicConfigurationDescriptorHandle] = {\r\n            type: \"descriptor\",\r\n            handle: clientCharacteristicConfigurationDescriptorHandle,\r\n            uuid: \"2902\",\r\n            attribute: characteristic,\r\n            properties: 0x02 | 0x04 | 0x08, // read/write\r\n            secure: secure & 0x10 ? 0x02 | 0x04 | 0x08 : 0,\r\n            value: Buffer.from([0x00, 0x00]),\r\n          };\r\n        }\r\n\r\n        for (let k = 0; k < characteristic.descriptors.length; k++) {\r\n          const descriptor: any = characteristic.descriptors[k];\r\n          if (descriptor.uuid === \"2902\") {\r\n            continue;\r\n          }\r\n          handle++;\r\n          const descriptorHandle: any = handle;\r\n\r\n          this._handles[descriptorHandle] = {\r\n            type: \"descriptor\",\r\n            handle: descriptorHandle,\r\n            uuid: descriptor.uuid,\r\n            attribute: descriptor,\r\n            properties: 0x02, // read only\r\n            secure: 0x00,\r\n            value: descriptor.value,\r\n          };\r\n        }\r\n      }\r\n\r\n      this._handles[serviceHandle].endHandle = handle;\r\n    }\r\n\r\n    const debugHandles: any = [];\r\n    for (i = 0; i < this._handles.length; i++) {\r\n      handle = this._handles[i];\r\n\r\n      debugHandles[i] = {};\r\n      for (j in handle) {\r\n        if (Buffer.isBuffer(handle[j])) {\r\n          debugHandles[i][j] = handle[j]\r\n            ? \"Buffer('\" + handle[j].toString(\"hex\") + \"', 'hex')\"\r\n            : null;\r\n        } else if (j !== \"attribute\") {\r\n          debugHandles[i][j] = handle[j];\r\n        }\r\n      }\r\n    }\r\n\r\n    debug(\"handles = \" + JSON.stringify(debugHandles, null, 2));\r\n  }\r\n\r\n  public setAclStream(aclStream: any) {\r\n    this._mtu = 23;\r\n    this._preparedWriteRequest = null;\r\n\r\n    this._aclStream = aclStream;\r\n\r\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\r\n  }\r\n\r\n  public onAclStreamData(cid: any, data?: any) {\r\n    if (cid !== ATT_CID) {\r\n      return;\r\n    }\r\n\r\n    this.handleRequest(data);\r\n  }\r\n\r\n  public onAclStreamEnd() {\r\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\r\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\r\n\r\n    for (let i = 0; i < this._handles.length; i++) {\r\n      if (\r\n        this._handles[i] &&\r\n        this._handles[i].type === \"descriptor\" &&\r\n        this._handles[i].uuid === \"2902\" &&\r\n        this._handles[i].value.readUInt16LE(0) !== 0\r\n      ) {\r\n        this._handles[i].value = Buffer.from([0x00, 0x00]);\r\n\r\n        if (this._handles[i].attribute && this._handles[i].attribute.emit) {\r\n          this._handles[i].attribute.emit(\"unsubscribe\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public send(data: any) {\r\n    debug(\"send: \" + data.toString(\"hex\"));\r\n    this._aclStream.write(ATT_CID, data);\r\n  }\r\n\r\n  public errorResponse(opcode: any, handle: any, status: any) {\r\n    const buf: any = Buffer.alloc(5);\r\n\r\n    buf.writeUInt8(ATT_OP_ERROR, 0);\r\n    buf.writeUInt8(opcode, 1);\r\n    buf.writeUInt16LE(handle, 2);\r\n    buf.writeUInt8(status, 4);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public handleRequest(request: any) {\r\n    debug(\"handing request: \" + request.toString(\"hex\"));\r\n\r\n    const requestType: any = request[0];\r\n    let response: any = null;\r\n\r\n    switch (requestType) {\r\n      case ATT_OP_MTU_REQ:\r\n        response = this.handleMtuRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_FIND_INFO_REQ:\r\n        response = this.handleFindInfoRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_FIND_BY_TYPE_REQ:\r\n        response = this.handleFindByTypeRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_READ_BY_TYPE_REQ:\r\n        response = this.handleReadByTypeRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_READ_REQ:\r\n      case ATT_OP_READ_BLOB_REQ:\r\n        response = this.handleReadOrReadBlobRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_READ_BY_GROUP_REQ:\r\n        response = this.handleReadByGroupRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_WRITE_REQ:\r\n      case ATT_OP_WRITE_CMD:\r\n        response = this.handleWriteRequestOrCommand(request);\r\n        break;\r\n\r\n      case ATT_OP_PREP_WRITE_REQ:\r\n        response = this.handlePrepareWriteRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_EXEC_WRITE_REQ:\r\n        response = this.handleExecuteWriteRequest(request);\r\n        break;\r\n\r\n      case ATT_OP_HANDLE_CNF:\r\n        response = this.handleConfirmation(request);\r\n        break;\r\n\r\n      default:\r\n      case ATT_OP_READ_MULTI_REQ:\r\n      case ATT_OP_SIGNED_WRITE_CMD:\r\n        response = this.errorResponse(\r\n          requestType,\r\n          0x0000,\r\n          ATT_ECODE_REQ_NOT_SUPP,\r\n        );\r\n        break;\r\n    }\r\n\r\n    if (response) {\r\n      debug(\"response: \" + response.toString(\"hex\"));\r\n\r\n      this.send(response);\r\n    }\r\n  }\r\n\r\n  public handleMtuRequest(request: any) {\r\n    let mtu: any = request.readUInt16LE(1);\r\n\r\n    if (mtu < 23) {\r\n      mtu = 23;\r\n    } else if (mtu > this.maxMtu) {\r\n      mtu = this.maxMtu;\r\n    }\r\n\r\n    this._mtu = mtu;\r\n\r\n    this.emit(\"mtuChange\", this._mtu);\r\n\r\n    const response: any = Buffer.alloc(3);\r\n\r\n    response.writeUInt8(ATT_OP_MTU_RESP, 0);\r\n    response.writeUInt16LE(mtu, 1);\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleFindInfoRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const startHandle: any = request.readUInt16LE(1);\r\n    const endHandle: any = request.readUInt16LE(3);\r\n\r\n    const infos: any = [];\r\n    let uuid: any = null;\r\n    let i: any;\r\n\r\n    for (i = startHandle; i <= endHandle; i++) {\r\n      const handle: any = this._handles[i];\r\n\r\n      if (!handle) {\r\n        break;\r\n      }\r\n\r\n      uuid = null;\r\n\r\n      if (\"service\" === handle.type) {\r\n        uuid = \"2800\";\r\n      } else if (\"includedService\" === handle.type) {\r\n        uuid = \"2802\";\r\n      } else if (\"characteristic\" === handle.type) {\r\n        uuid = \"2803\";\r\n      } else if (\"characteristicValue\" === handle.type) {\r\n        uuid = this._handles[i - 1].uuid;\r\n      } else if (\"descriptor\" === handle.type) {\r\n        uuid = handle.uuid;\r\n      }\r\n\r\n      if (uuid) {\r\n        infos.push({\r\n          handle: i,\r\n          uuid,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (infos.length) {\r\n      const uuidSize: any = infos[0].uuid.length / 2;\r\n      let numInfo: any = 1;\r\n\r\n      for (i = 1; i < infos.length; i++) {\r\n        if (infos[0].uuid.length !== infos[i].uuid.length) {\r\n          break;\r\n        }\r\n        numInfo++;\r\n      }\r\n\r\n      const lengthPerInfo: any = uuidSize === 2 ? 4 : 18;\r\n      const maxInfo: any = Math.floor((this._mtu - 2) / lengthPerInfo);\r\n      numInfo = Math.min(numInfo, maxInfo);\r\n\r\n      response = Buffer.alloc(2 + numInfo * lengthPerInfo);\r\n\r\n      response[0] = ATT_OP_FIND_INFO_RESP;\r\n      response[1] = uuidSize === 2 ? 0x01 : 0x2;\r\n\r\n      for (i = 0; i < numInfo; i++) {\r\n        const info: any = infos[i];\r\n\r\n        response.writeUInt16LE(info.handle, 2 + i * lengthPerInfo);\r\n\r\n        uuid = Buffer.from(\r\n          info.uuid\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n        for (let j = 0; j < uuid.length; j++) {\r\n          response[2 + i * lengthPerInfo + 2 + j] = uuid[j];\r\n        }\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        ATT_OP_FIND_INFO_REQ,\r\n        startHandle,\r\n        ATT_ECODE_ATTR_NOT_FOUND,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleFindByTypeRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const startHandle: any = request.readUInt16LE(1);\r\n    const endHandle: any = request.readUInt16LE(3);\r\n    const uuid: any = request\r\n      .slice(5, 7)\r\n      .toString(\"hex\")\r\n      .match(/.{1,2}/g)\r\n      .reverse()\r\n      .join(\"\");\r\n    const value: any = request\r\n      .slice(7)\r\n      .toString(\"hex\")\r\n      .match(/.{1,2}/g)\r\n      .reverse()\r\n      .join(\"\");\r\n\r\n    const handles: any = [];\r\n    let handle: any;\r\n\r\n    for (let i = startHandle; i <= endHandle; i++) {\r\n      handle = this._handles[i];\r\n\r\n      if (!handle) {\r\n        break;\r\n      }\r\n\r\n      if (\r\n        \"2800\" === uuid &&\r\n        handle.type === \"service\" &&\r\n        handle.uuid === value\r\n      ) {\r\n        handles.push({\r\n          start: handle.startHandle,\r\n          end: handle.endHandle,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (handles.length) {\r\n      const lengthPerHandle: any = 4;\r\n      let numHandles: any = handles.length;\r\n      const maxHandles: any = Math.floor((this._mtu - 1) / lengthPerHandle);\r\n\r\n      numHandles = Math.min(numHandles, maxHandles);\r\n\r\n      response = Buffer.alloc(1 + numHandles * lengthPerHandle);\r\n\r\n      response[0] = ATT_OP_FIND_BY_TYPE_RESP;\r\n\r\n      for (let i = 0; i < numHandles; i++) {\r\n        handle = handles[i];\r\n\r\n        response.writeUInt16LE(handle.start, 1 + i * lengthPerHandle);\r\n        response.writeUInt16LE(handle.end, 1 + i * lengthPerHandle + 2);\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        ATT_OP_FIND_BY_TYPE_REQ,\r\n        startHandle,\r\n        ATT_ECODE_ATTR_NOT_FOUND,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleReadByGroupRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const startHandle: any = request.readUInt16LE(1);\r\n    const endHandle: any = request.readUInt16LE(3);\r\n    const uuid: any = request\r\n      .slice(5)\r\n      .toString(\"hex\")\r\n      .match(/.{1,2}/g)\r\n      .reverse()\r\n      .join(\"\");\r\n\r\n    debug(\r\n      \"read by group: startHandle = 0x\" +\r\n      startHandle.toString(16) +\r\n      \", endHandle = 0x\" +\r\n      endHandle.toString(16) +\r\n      \", uuid = 0x\" +\r\n      uuid.toString(16),\r\n    );\r\n\r\n    if (\"2800\" === uuid || \"2802\" === uuid) {\r\n      const services: any = [];\r\n      const type: any = \"2800\" === uuid ? \"service\" : \"includedService\";\r\n      let i: any;\r\n\r\n      for (i = startHandle; i <= endHandle; i++) {\r\n        const handle: any = this._handles[i];\r\n\r\n        if (!handle) {\r\n          break;\r\n        }\r\n\r\n        if (handle.type === type) {\r\n          services.push(handle);\r\n        }\r\n      }\r\n\r\n      if (services.length) {\r\n        const uuidSize: any = services[0].uuid.length / 2;\r\n        let numServices: any = 1;\r\n\r\n        for (i = 1; i < services.length; i++) {\r\n          if (services[0].uuid.length !== services[i].uuid.length) {\r\n            break;\r\n          }\r\n          numServices++;\r\n        }\r\n\r\n        const lengthPerService: any = uuidSize === 2 ? 6 : 20;\r\n        const maxServices: any = Math.floor((this._mtu - 2) / lengthPerService);\r\n        numServices = Math.min(numServices, maxServices);\r\n\r\n        response = Buffer.alloc(2 + numServices * lengthPerService);\r\n\r\n        response[0] = ATT_OP_READ_BY_GROUP_RESP;\r\n        response[1] = lengthPerService;\r\n\r\n        for (i = 0; i < numServices; i++) {\r\n          const service: any = services[i];\r\n\r\n          response.writeUInt16LE(service.startHandle, 2 + i * lengthPerService);\r\n          response.writeUInt16LE(\r\n            service.endHandle,\r\n            2 + i * lengthPerService + 2,\r\n          );\r\n\r\n          const serviceUuid: any = Buffer.from(\r\n            service.uuid\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\"),\r\n            \"hex\",\r\n          );\r\n          for (let j = 0; j < serviceUuid.length; j++) {\r\n            response[2 + i * lengthPerService + 4 + j] = serviceUuid[j];\r\n          }\r\n        }\r\n      } else {\r\n        response = this.errorResponse(\r\n          ATT_OP_READ_BY_GROUP_REQ,\r\n          startHandle,\r\n          ATT_ECODE_ATTR_NOT_FOUND,\r\n        );\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        ATT_OP_READ_BY_GROUP_REQ,\r\n        startHandle,\r\n        ATT_ECODE_UNSUPP_GRP_TYPE,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleReadByTypeRequest(request: any) {\r\n    let response: any = null;\r\n    const requestType: any = request[0];\r\n\r\n    const startHandle: any = request.readUInt16LE(1);\r\n    const endHandle: any = request.readUInt16LE(3);\r\n    const uuid: any = request\r\n      .slice(5)\r\n      .toString(\"hex\")\r\n      .match(/.{1,2}/g)\r\n      .reverse()\r\n      .join(\"\");\r\n    let i: any;\r\n    let handle: any;\r\n\r\n    debug(\r\n      \"read by type: startHandle = 0x\" +\r\n      startHandle.toString(16) +\r\n      \", endHandle = 0x\" +\r\n      endHandle.toString(16) +\r\n      \", uuid = 0x\" +\r\n      uuid.toString(16),\r\n    );\r\n\r\n    if (\"2803\" === uuid) {\r\n      const characteristics: any = [];\r\n\r\n      for (i = startHandle; i <= endHandle; i++) {\r\n        handle = this._handles[i];\r\n\r\n        if (!handle) {\r\n          break;\r\n        }\r\n\r\n        if (handle.type === \"characteristic\") {\r\n          characteristics.push(handle);\r\n        }\r\n      }\r\n\r\n      if (characteristics.length) {\r\n        const uuidSize: any = characteristics[0].uuid.length / 2;\r\n        let numCharacteristics: any = 1;\r\n\r\n        for (i = 1; i < characteristics.length; i++) {\r\n          if (\r\n            characteristics[0].uuid.length !== characteristics[i].uuid.length\r\n          ) {\r\n            break;\r\n          }\r\n          numCharacteristics++;\r\n        }\r\n\r\n        const lengthPerCharacteristic: any = uuidSize === 2 ? 7 : 21;\r\n        const maxCharacteristics: any = Math.floor(\r\n          (this._mtu - 2) / lengthPerCharacteristic,\r\n        );\r\n        numCharacteristics = Math.min(numCharacteristics, maxCharacteristics);\r\n\r\n        response = Buffer.alloc(\r\n          2 + numCharacteristics * lengthPerCharacteristic,\r\n        );\r\n\r\n        response[0] = ATT_OP_READ_BY_TYPE_RESP;\r\n        response[1] = lengthPerCharacteristic;\r\n\r\n        for (i = 0; i < numCharacteristics; i++) {\r\n          const characteristic: any = characteristics[i];\r\n\r\n          response.writeUInt16LE(\r\n            characteristic.startHandle,\r\n            2 + i * lengthPerCharacteristic,\r\n          );\r\n          response.writeUInt8(\r\n            characteristic.properties,\r\n            2 + i * lengthPerCharacteristic + 2,\r\n          );\r\n          response.writeUInt16LE(\r\n            characteristic.valueHandle,\r\n            2 + i * lengthPerCharacteristic + 3,\r\n          );\r\n\r\n          const characteristicUuid: any = Buffer.from(\r\n            characteristic.uuid\r\n              .match(/.{1,2}/g)\r\n              .reverse()\r\n              .join(\"\"),\r\n            \"hex\",\r\n          );\r\n          for (let j = 0; j < characteristicUuid.length; j++) {\r\n            response[2 + i * lengthPerCharacteristic + 5 + j] =\r\n              characteristicUuid[j];\r\n          }\r\n        }\r\n      } else {\r\n        response = this.errorResponse(\r\n          ATT_OP_READ_BY_TYPE_REQ,\r\n          startHandle,\r\n          ATT_ECODE_ATTR_NOT_FOUND,\r\n        );\r\n      }\r\n    } else {\r\n      let handleAttribute: any = null;\r\n      let valueHandle: any = null;\r\n      let secure: any = false;\r\n\r\n      for (i = startHandle; i <= endHandle; i++) {\r\n        handle = this._handles[i];\r\n\r\n        if (!handle) {\r\n          break;\r\n        }\r\n\r\n        if (handle.type === \"characteristic\" && handle.uuid === uuid) {\r\n          handleAttribute = handle.attribute;\r\n          valueHandle = handle.valueHandle;\r\n          secure = handle.secure & 0x02;\r\n          break;\r\n        } else if (handle.type === \"descriptor\" && handle.uuid === uuid) {\r\n          valueHandle = i;\r\n          secure = handle.secure & 0x02;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (secure && !this._aclStream.encrypted) {\r\n        response = this.errorResponse(\r\n          ATT_OP_READ_BY_TYPE_REQ,\r\n          startHandle,\r\n          ATT_ECODE_AUTHENTICATION,\r\n        );\r\n      } else if (valueHandle) {\r\n        const callback: any = ((_valueHandle: any) => {\r\n          return (result: any, _data: any) => {\r\n            let callbackResponse: any = null;\r\n\r\n            if (ATT_ECODE_SUCCESS === result) {\r\n              const dataLength: any = Math.min(_data.length, this._mtu - 4);\r\n              callbackResponse = Buffer.alloc(4 + dataLength);\r\n\r\n              callbackResponse[0] = ATT_OP_READ_BY_TYPE_RESP;\r\n              callbackResponse[1] = dataLength + 2;\r\n              callbackResponse.writeUInt16LE(_valueHandle, 2);\r\n              for (i = 0; i < dataLength; i++) {\r\n                callbackResponse[4 + i] = _data[i];\r\n              }\r\n            } else {\r\n              callbackResponse = this.errorResponse(\r\n                requestType,\r\n                _valueHandle,\r\n                result,\r\n              );\r\n            }\r\n\r\n            debug(\"read by type response: \" + callbackResponse.toString(\"hex\"));\r\n\r\n            this.send(callbackResponse);\r\n          };\r\n        })(valueHandle);\r\n\r\n        const data: any = this._handles[valueHandle].value;\r\n\r\n        if (data) {\r\n          callback(ATT_ECODE_SUCCESS, data);\r\n        } else if (handleAttribute) {\r\n          handleAttribute.emit(\"readRequest\", 0, callback);\r\n        } else {\r\n          callback(ATT_ECODE_UNLIKELY);\r\n        }\r\n      } else {\r\n        response = this.errorResponse(\r\n          ATT_OP_READ_BY_TYPE_REQ,\r\n          startHandle,\r\n          ATT_ECODE_ATTR_NOT_FOUND,\r\n        );\r\n      }\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleReadOrReadBlobRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const requestType: any = request[0];\r\n    const valueHandle: any = request.readUInt16LE(1);\r\n    const offset: any =\r\n      requestType === ATT_OP_READ_BLOB_REQ ? request.readUInt16LE(3) : 0;\r\n\r\n    const handle: any = this._handles[valueHandle];\r\n    let i: any;\r\n\r\n    if (handle) {\r\n      let result: any = null;\r\n      let data: any = null;\r\n      const handleType: any = handle.type;\r\n\r\n      const callback: any = ((_requestType: any, _valueHandle: any) => {\r\n        return (_result: any, _data: any) => {\r\n          let callbackResponse: any = null;\r\n\r\n          if (ATT_ECODE_SUCCESS === _result) {\r\n            const dataLength: any = Math.min(_data.length, this._mtu - 1);\r\n            callbackResponse = Buffer.alloc(1 + dataLength);\r\n\r\n            callbackResponse[0] =\r\n              _requestType === ATT_OP_READ_BLOB_REQ\r\n                ? ATT_OP_READ_BLOB_RESP\r\n                : ATT_OP_READ_RESP;\r\n            for (i = 0; i < dataLength; i++) {\r\n              callbackResponse[1 + i] = _data[i];\r\n            }\r\n          } else {\r\n            callbackResponse = this.errorResponse(\r\n              _requestType,\r\n              _valueHandle,\r\n              _result,\r\n            );\r\n          }\r\n\r\n          debug(\"read response: \" + callbackResponse.toString(\"hex\"));\r\n\r\n          this.send(callbackResponse);\r\n        };\r\n      })(requestType, valueHandle);\r\n\r\n      if (handleType === \"service\" || handleType === \"includedService\") {\r\n        result = ATT_ECODE_SUCCESS;\r\n        data = Buffer.from(\r\n          handle.uuid\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n      } else if (handleType === \"characteristic\") {\r\n        const uuid: any = Buffer.from(\r\n          handle.uuid\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n\r\n        result = ATT_ECODE_SUCCESS;\r\n        data = Buffer.alloc(3 + uuid.length);\r\n        data.writeUInt8(handle.properties, 0);\r\n        data.writeUInt16LE(handle.valueHandle, 1);\r\n\r\n        for (i = 0; i < uuid.length; i++) {\r\n          data[i + 3] = uuid[i];\r\n        }\r\n      } else if (\r\n        handleType === \"characteristicValue\" ||\r\n        handleType === \"descriptor\"\r\n      ) {\r\n        let handleProperties: any = handle.properties;\r\n        let handleSecure: any = handle.secure;\r\n        let handleAttribute: any = handle.attribute;\r\n        if (handleType === \"characteristicValue\") {\r\n          handleProperties = this._handles[valueHandle - 1].properties;\r\n          handleSecure = this._handles[valueHandle - 1].secure;\r\n          handleAttribute = this._handles[valueHandle - 1].attribute;\r\n        }\r\n\r\n        if (handleProperties & 0x02) {\r\n          if (handleSecure & 0x02 && !this._aclStream.encrypted) {\r\n            result = ATT_ECODE_AUTHENTICATION;\r\n          } else {\r\n            data = handle.value;\r\n\r\n            if (data) {\r\n              result = ATT_ECODE_SUCCESS;\r\n            } else {\r\n              handleAttribute.emit(\"readRequest\", offset, callback);\r\n            }\r\n          }\r\n        } else {\r\n          result = ATT_ECODE_READ_NOT_PERM; // non-readable\r\n        }\r\n      }\r\n\r\n      if (data && typeof data === \"string\") {\r\n        data = Buffer.from(data);\r\n      }\r\n\r\n      if (result === ATT_ECODE_SUCCESS && data && offset) {\r\n        if (data.length < offset) {\r\n          result = ATT_ECODE_INVALID_OFFSET;\r\n          data = null;\r\n        } else {\r\n          data = data.slice(offset);\r\n        }\r\n      }\r\n\r\n      if (result !== null) {\r\n        callback(result, data);\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        requestType,\r\n        valueHandle,\r\n        ATT_ECODE_INVALID_HANDLE,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleWriteRequestOrCommand(request: any) {\r\n    let response: any = null;\r\n\r\n    const requestType: any = request[0];\r\n    const withoutResponse: any = requestType === ATT_OP_WRITE_CMD;\r\n    const valueHandle: any = request.readUInt16LE(1);\r\n    const data: any = request.slice(3);\r\n    const offset: any = 0;\r\n\r\n    let handle: any = this._handles[valueHandle];\r\n\r\n    if (handle) {\r\n      if (handle.type === \"characteristicValue\") {\r\n        handle = this._handles[valueHandle - 1];\r\n      }\r\n\r\n      const handleProperties: any = handle.properties;\r\n      const handleSecure: any = handle.secure;\r\n\r\n      if (\r\n        handleProperties &&\r\n        (withoutResponse ? handleProperties & 0x04 : handleProperties & 0x08)\r\n      ) {\r\n        const callback: any = ((_requestType: any, _valueHandle: any, _withoutResponse: any) => {\r\n          return (result: any) => {\r\n            if (!_withoutResponse) {\r\n              let callbackResponse: any = null;\r\n\r\n              if (ATT_ECODE_SUCCESS === result) {\r\n                callbackResponse = Buffer.from([ATT_OP_WRITE_RESP]);\r\n              } else {\r\n                callbackResponse = this.errorResponse(\r\n                  _requestType,\r\n                  _valueHandle,\r\n                  result,\r\n                );\r\n              }\r\n\r\n              debug(\"write response: \" + callbackResponse.toString(\"hex\"));\r\n\r\n              this.send(callbackResponse);\r\n            }\r\n          };\r\n        })(requestType, valueHandle, withoutResponse);\r\n\r\n        if (\r\n          handleSecure & (withoutResponse ? 0x04 : 0x08) &&\r\n          !this._aclStream.encrypted\r\n        ) {\r\n          response = this.errorResponse(\r\n            requestType,\r\n            valueHandle,\r\n            ATT_ECODE_AUTHENTICATION,\r\n          );\r\n        } else if (handle.type === \"descriptor\" || handle.uuid === \"2902\") {\r\n          let result: any = null;\r\n\r\n          if (data.length !== 2) {\r\n            result = ATT_ECODE_INVAL_ATTR_VALUE_LEN;\r\n          } else {\r\n            const value: any = data.readUInt16LE(0);\r\n            const handleAttribute: any = handle.attribute;\r\n\r\n            handle.value = data;\r\n\r\n            if (value & 0x0003) {\r\n              const updateValueCallback: any = ((_valueHandle: any, _attribute: any) => {\r\n                return (_data: any) => {\r\n                  const dataLength: any = Math.min(_data.length, this._mtu - 3);\r\n                  const useNotify: any = _attribute.properties.indexOf(\"notify\") !== -1;\r\n                  const useIndicate: any =\r\n                    _attribute.properties.indexOf(\"indicate\") !== -1;\r\n                  let i: any;\r\n\r\n                  if (useNotify) {\r\n                    const notifyMessage: any = Buffer.alloc(3 + dataLength);\r\n\r\n                    notifyMessage.writeUInt8(ATT_OP_HANDLE_NOTIFY, 0);\r\n                    notifyMessage.writeUInt16LE(_valueHandle, 1);\r\n\r\n                    for (i = 0; i < dataLength; i++) {\r\n                      notifyMessage[3 + i] = _data[i];\r\n                    }\r\n\r\n                    debug(\"notify message: \" + notifyMessage.toString(\"hex\"));\r\n                    this.send(notifyMessage);\r\n\r\n                    _attribute.emit(\"notify\");\r\n                  } else if (useIndicate) {\r\n                    const indicateMessage: any = Buffer.alloc(3 + dataLength);\r\n\r\n                    indicateMessage.writeUInt8(ATT_OP_HANDLE_IND, 0);\r\n                    indicateMessage.writeUInt16LE(_valueHandle, 1);\r\n\r\n                    for (i = 0; i < dataLength; i++) {\r\n                      indicateMessage[3 + i] = _data[i];\r\n                    }\r\n\r\n                    this._lastIndicatedAttribute = _attribute;\r\n\r\n                    debug(\r\n                      \"indicate message: \" + indicateMessage.toString(\"hex\"),\r\n                    );\r\n                    this.send(indicateMessage);\r\n                  }\r\n                };\r\n              })(valueHandle - 1, handleAttribute);\r\n\r\n              if (handleAttribute.emit) {\r\n                handleAttribute.emit(\r\n                  \"subscribe\",\r\n                  this._mtu - 3,\r\n                  updateValueCallback,\r\n                );\r\n              }\r\n            } else {\r\n              handleAttribute.emit(\"unsubscribe\");\r\n            }\r\n\r\n            result = ATT_ECODE_SUCCESS;\r\n          }\r\n\r\n          callback(result);\r\n        } else {\r\n          handle.attribute.emit(\r\n            \"writeRequest\",\r\n            data,\r\n            offset,\r\n            withoutResponse,\r\n            callback,\r\n          );\r\n        }\r\n      } else {\r\n        response = this.errorResponse(\r\n          requestType,\r\n          valueHandle,\r\n          ATT_ECODE_WRITE_NOT_PERM,\r\n        );\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        requestType,\r\n        valueHandle,\r\n        ATT_ECODE_INVALID_HANDLE,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handlePrepareWriteRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const requestType: any = request[0];\r\n    const valueHandle: any = request.readUInt16LE(1);\r\n    const offset: any = request.readUInt16LE(3);\r\n    const data: any = request.slice(5);\r\n\r\n    let handle: any = this._handles[valueHandle];\r\n\r\n    if (handle) {\r\n      if (handle.type === \"characteristicValue\") {\r\n        handle = this._handles[valueHandle - 1];\r\n\r\n        const handleProperties: any = handle.properties;\r\n        const handleSecure: any = handle.secure;\r\n\r\n        if (handleProperties && handleProperties & 0x08) {\r\n          if (handleSecure & 0x08 && !this._aclStream.encrypted) {\r\n            response = this.errorResponse(\r\n              requestType,\r\n              valueHandle,\r\n              ATT_ECODE_AUTHENTICATION,\r\n            );\r\n          } else if (this._preparedWriteRequest) {\r\n            if (this._preparedWriteRequest.handle !== handle) {\r\n              response = this.errorResponse(\r\n                requestType,\r\n                valueHandle,\r\n                ATT_ECODE_UNLIKELY,\r\n              );\r\n            } else if (\r\n              offset ===\r\n              this._preparedWriteRequest.offset +\r\n              this._preparedWriteRequest.data.length\r\n            ) {\r\n              this._preparedWriteRequest.data = Buffer.concat([\r\n                this._preparedWriteRequest.data,\r\n                data,\r\n              ]);\r\n\r\n              response = Buffer.alloc(request.length);\r\n              request.copy(response);\r\n              response[0] = ATT_OP_PREP_WRITE_RESP;\r\n            } else {\r\n              response = this.errorResponse(\r\n                requestType,\r\n                valueHandle,\r\n                ATT_ECODE_INVALID_OFFSET,\r\n              );\r\n            }\r\n          } else {\r\n            this._preparedWriteRequest = {\r\n              handle,\r\n              valueHandle,\r\n              offset,\r\n              data,\r\n            };\r\n\r\n            response = Buffer.alloc(request.length);\r\n            request.copy(response);\r\n            response[0] = ATT_OP_PREP_WRITE_RESP;\r\n          }\r\n        } else {\r\n          response = this.errorResponse(\r\n            requestType,\r\n            valueHandle,\r\n            ATT_ECODE_WRITE_NOT_PERM,\r\n          );\r\n        }\r\n      } else {\r\n        response = this.errorResponse(\r\n          requestType,\r\n          valueHandle,\r\n          ATT_ECODE_ATTR_NOT_LONG,\r\n        );\r\n      }\r\n    } else {\r\n      response = this.errorResponse(\r\n        requestType,\r\n        valueHandle,\r\n        ATT_ECODE_INVALID_HANDLE,\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleExecuteWriteRequest(request: any) {\r\n    let response: any = null;\r\n\r\n    const requestType: any = request[0];\r\n    const flag: any = request[1];\r\n\r\n    if (this._preparedWriteRequest) {\r\n      if (flag === 0x00) {\r\n        response = Buffer.from([ATT_OP_EXEC_WRITE_RESP]);\r\n      } else if (flag === 0x01) {\r\n        const callback: any = ((_requestType: any, _valueHandle: any) => {\r\n          return (result: any) => {\r\n            let callbackResponse: any = null;\r\n\r\n            if (ATT_ECODE_SUCCESS === result) {\r\n              callbackResponse = Buffer.from([ATT_OP_EXEC_WRITE_RESP]);\r\n            } else {\r\n              callbackResponse = this.errorResponse(\r\n                _requestType,\r\n                _valueHandle,\r\n                result,\r\n              );\r\n            }\r\n\r\n            debug(\r\n              \"execute write response: \" + callbackResponse.toString(\"hex\"),\r\n            );\r\n\r\n            this.send(callbackResponse);\r\n          };\r\n        })(requestType, this._preparedWriteRequest.valueHandle);\r\n\r\n        this._preparedWriteRequest.handle.attribute.emit(\r\n          \"writeRequest\",\r\n          this._preparedWriteRequest.data,\r\n          this._preparedWriteRequest.offset,\r\n          false,\r\n          callback,\r\n        );\r\n      } else {\r\n        response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);\r\n      }\r\n\r\n      this._preparedWriteRequest = null;\r\n    } else {\r\n      response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  public handleConfirmation(request: any) {\r\n    if (this._lastIndicatedAttribute) {\r\n      if (this._lastIndicatedAttribute.emit) {\r\n        this._lastIndicatedAttribute.emit(\"indicate\");\r\n      }\r\n\r\n      this._lastIndicatedAttribute = null;\r\n    }\r\n  }\r\n}\r\n"]}