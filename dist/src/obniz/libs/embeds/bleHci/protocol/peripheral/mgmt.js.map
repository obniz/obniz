{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.ts"],"names":[],"mappings":"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","file":"mgmt.js","sourcesContent":["// let debug = require('debug')('mgmt');\r\nconst debug: any = () => {\r\n};\r\n\r\nconst LTK_INFO_SIZE: any = 36;\r\n\r\nconst MGMT_OP_LOAD_LONG_TERM_KEYS: any = 0x0013;\r\n\r\nexport default class Mgmt {\r\n  public _ltkInfos: any;\r\n  public _hci: any;\r\n  public loadLongTermKeys: any;\r\n  public write: any;\r\n\r\n  public constructor(hciProtocol: any) {\r\n    this._ltkInfos = [];\r\n    this._hci = hciProtocol;\r\n  }\r\n\r\n  public nSocketData(data: any) {\r\n    debug(\"on data ->\" + data.toString(\"hex\"));\r\n  }\r\n\r\n  public nSocketError(error: any) {\r\n    debug(\"on error ->\" + error.message);\r\n  }\r\n\r\n  public ddLongTermKey(address: any, addressType: any, authenticated: any, master: any, ediv: any, rand: any, key: any) {\r\n    const ltkInfo: any = Buffer.alloc(LTK_INFO_SIZE);\r\n\r\n    address.copy(ltkInfo, 0);\r\n    ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one\r\n\r\n    ltkInfo.writeUInt8(authenticated, 7);\r\n    ltkInfo.writeUInt8(master, 8);\r\n    ltkInfo.writeUInt8(key.length, 9);\r\n\r\n    ediv.copy(ltkInfo, 10);\r\n    rand.copy(ltkInfo, 12);\r\n    key.copy(ltkInfo, 20);\r\n\r\n    this._ltkInfos.push(ltkInfo);\r\n\r\n    this.loadLongTermKeys();\r\n  }\r\n\r\n  public learLongTermKeys() {\r\n    this._ltkInfos = [];\r\n\r\n    this.loadLongTermKeys();\r\n  }\r\n\r\n  public oadLongTermKeys() {\r\n    const numLongTermKeys: any = this._ltkInfos.length;\r\n    const op: any = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);\r\n\r\n    op.writeUInt16LE(numLongTermKeys, 0);\r\n\r\n    for (let i = 0; i < numLongTermKeys; i++) {\r\n      this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);\r\n    }\r\n\r\n    this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);\r\n  }\r\n\r\n  public rite(opcode: any, index: any, data: any) {\r\n    let length: any = 0;\r\n\r\n    if (data) {\r\n      length = data.length;\r\n    }\r\n\r\n    const pkt: any = Buffer.alloc(6 + length);\r\n\r\n    pkt.writeUInt16LE(opcode, 0);\r\n    pkt.writeUInt16LE(index, 2);\r\n    pkt.writeUInt16LE(length, 4);\r\n\r\n    if (length) {\r\n      data.copy(pkt, 6);\r\n    }\r\n\r\n    debug(\"writing -> \" + pkt.toString(\"hex\"));\r\n    this._hci._socket.write(pkt);\r\n  }\r\n}\r\n"]}