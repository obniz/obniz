{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/crypto.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,SAAS,CAAC;IACR,OAAO,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AAChC,CAAC;AAED,SAAS,EAAE,CAAC,CAAM,EAAE,EAAO,EAAE,IAAS,EAAE,IAAS,EAAE,GAAQ,EAAE,EAAO,EAAE,GAAQ,EAAE,EAAO;IACrF,MAAM,EAAE,GAAQ,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAEtD,MAAM,EAAE,GAAQ,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAExE,IAAI,GAAG,GAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3B,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAChB,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACnB,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAEhB,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,EAAE,CAAC,CAAM,EAAE,EAAO,EAAE,EAAO;IAClC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED,SAAS,CAAC,CAAC,GAAQ,EAAE,IAAS;IAC5B,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IAChB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAElB,MAAM,MAAM,GAAQ,gBAAM,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IAClE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAE7B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAED,SAAS,GAAG,CAAC,EAAO,EAAE,EAAO;IAC3B,MAAM,MAAM,GAAQ,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KAC3B;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,IAAI,CAAC,KAAU;IACtB,MAAM,MAAM,GAAQ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KACzC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,kBAAe;IACb,CAAC;IACD,EAAE;IACF,EAAE;IACF,CAAC;CACF,CAAC","file":"crypto.js","sourcesContent":["import crypto from \"crypto\";\r\n\r\nfunction r() {\r\n  return crypto.randomBytes(16);\r\n}\r\n\r\nfunction c1(k: any, _r: any, pres: any, preq: any, iat: any, ia: any, rat: any, ra: any) {\r\n  const p1: any = Buffer.concat([iat, rat, preq, pres]);\r\n\r\n  const p2: any = Buffer.concat([ra, ia, Buffer.from(\"00000000\", \"hex\")]);\r\n\r\n  let res: any = xor(_r, p1);\r\n  res = e(k, res);\r\n  res = xor(res, p2);\r\n  res = e(k, res);\r\n\r\n  return res;\r\n}\r\n\r\nfunction s1(k: any, r1: any, r2: any) {\r\n  return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));\r\n}\r\n\r\nfunction e(key: any, data: any) {\r\n  key = swap(key);\r\n  data = swap(data);\r\n\r\n  const cipher: any = crypto.createCipheriv(\"aes-128-ecb\", key, \"\");\r\n  cipher.setAutoPadding(false);\r\n\r\n  return swap(Buffer.concat([cipher.update(data), cipher.final()]));\r\n}\r\n\r\nfunction xor(b1: any, b2: any) {\r\n  const result: any = Buffer.alloc(b1.length);\r\n\r\n  for (let i = 0; i < b1.length; i++) {\r\n    result[i] = b1[i] ^ b2[i];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction swap(input: any) {\r\n  const output: any = Buffer.alloc(input.length);\r\n\r\n  for (let i = 0; i < output.length; i++) {\r\n    output[i] = input[input.length - i - 1];\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport default {\r\n  r,\r\n  c1,\r\n  s1,\r\n  e,\r\n};\r\n"]}