{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.ts"],"names":[],"mappings":";AAIA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAO5B,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,IAAI,EAAE,GAAG,CAAC;IACV,eAAe,EAAE,GAAG,CAAC;gBAEhB,GAAG,EAAE,GAAG;IA0Bb,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAmG7C,uBAAuB,CAAC,IAAI,EAAE,GAAG;IA2BjC,2BAA2B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAqCjE,kBAAkB;IAMlB,eAAe;IAMf,UAAU,CAAC,KAAK,EAAE,GAAG;IAGrB,+BAA+B,CAAC,MAAM,EAAE,GAAG;IAG3C,yBAAyB,CAAC,MAAM,EAAE,GAAG;IAGrC,0BAA0B,CAAC,MAAM,EAAE,GAAG;IAGtC,yBAAyB,CAAC,MAAM,EAAE,GAAG;CAmB7C;AAED,eAAe,GAAG,CAAC","file":"gap.d.ts","sourcesContent":["// var debug = require('debug')('gap');\nconst debug: any = () => {\n};\n\nimport events from \"events\";\nimport Hci from \"../hci\";\n\nconst isLinux: boolean = false;\nconst isIntelEdison: boolean = false;\nconst isYocto: boolean = false;\n\nclass Gap extends events.EventEmitter {\n  public _hci: any;\n  public _advertiseState: any;\n\n  constructor(hci: any) {\n    super();\n    this._hci = hci;\n\n    this._advertiseState = null;\n\n    this._hci.on(\"error\", this.onHciError.bind(this));\n\n    this._hci.on(\n      \"leAdvertisingParametersSet\",\n      this.onHciLeAdvertisingParametersSet.bind(this),\n    );\n    this._hci.on(\n      \"leAdvertisingDataSet\",\n      this.onHciLeAdvertisingDataSet.bind(this),\n    );\n    this._hci.on(\n      \"leScanResponseDataSet\",\n      this.onHciLeScanResponseDataSet.bind(this),\n    );\n    this._hci.on(\n      \"leAdvertiseEnableSet\",\n      this.onHciLeAdvertiseEnableSet.bind(this),\n    );\n  }\n\n  public startAdvertising(name: any, serviceUuids: any) {\n    debug(\n      \"startAdvertising: name = \" +\n      name +\n      \", serviceUuids = \" +\n      JSON.stringify(serviceUuids, null, 2),\n    );\n\n    let advertisementDataLength: any = 3;\n    let scanDataLength: any = 0;\n\n    const serviceUuids16bit: any = [];\n    const serviceUuids128bit: any = [];\n    let i: any = 0;\n\n    if (name && name.length) {\n      scanDataLength += 2 + name.length;\n    }\n\n    if (serviceUuids && serviceUuids.length) {\n      for (i = 0; i < serviceUuids.length; i++) {\n        const serviceUuid: any = Buffer.from(\n          serviceUuids[i]\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\"),\n          \"hex\",\n        );\n\n        if (serviceUuid.length === 2) {\n          serviceUuids16bit.push(serviceUuid);\n        } else if (serviceUuid.length === 16) {\n          serviceUuids128bit.push(serviceUuid);\n        }\n      }\n    }\n\n    if (serviceUuids16bit.length) {\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\n    }\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(scanDataLength);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    let advertisementDataOffset: any = 3;\n\n    if (serviceUuids16bit.length) {\n      advertisementData.writeUInt8(\n        1 + 2 * serviceUuids16bit.length,\n        advertisementDataOffset,\n      );\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids16bit.length; i++) {\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids16bit[i].length;\n      }\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementData.writeUInt8(\n        1 + 16 * serviceUuids128bit.length,\n        advertisementDataOffset,\n      );\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids128bit.length; i++) {\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids128bit[i].length;\n      }\n    }\n\n    // name\n    if (name && name.length) {\n      const nameBuffer: any = Buffer.alloc(name);\n\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\n      scanData.writeUInt8(0x08, 1);\n      nameBuffer.copy(scanData, 2);\n    }\n\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\n  }\n\n  public startAdvertisingIBeacon(data: any) {\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\n\n    const dataLength: any = data.length;\n    const manufacturerDataLength: any = 4 + dataLength;\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\n    // let scanDataLength = 0;\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(0);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\n    advertisementData.writeUInt8(0xff, 4);\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\n    advertisementData.writeUInt8(dataLength, 8);\n\n    data.copy(advertisementData, 9);\n\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\n  }\n\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\n    advertisementData = advertisementData || Buffer.alloc(0);\n    scanData = scanData || Buffer.alloc(0);\n\n    debug(\n      \"startAdvertisingWithEIRData: advertisement data = \" +\n      advertisementData.toString(\"hex\") +\n      \", scan data = \" +\n      scanData.toString(\"hex\"),\n    );\n\n    let error: any = null;\n\n    if (advertisementData.length > 31) {\n      error = new Error(\"Advertisement data is over maximum limit of 31 bytes\");\n    } else if (scanData.length > 31) {\n      error = new Error(\"Scan data is over maximum limit of 31 bytes\");\n    }\n\n    if (error) {\n      this.emit(\"advertisingStart\", error);\n    } else {\n      this._advertiseState = \"starting\";\n\n      if (isIntelEdison || isYocto) {\n        // work around for Intel Edison\n        debug(\"skipping first set of scan response and advertisement data\");\n      } else {\n        this._hci.setScanResponseData(scanData);\n        this._hci.setAdvertisingData(advertisementData);\n      }\n      this._hci.setAdvertiseEnable(true);\n      this._hci.setScanResponseData(scanData);\n      this._hci.setAdvertisingData(advertisementData);\n    }\n  }\n\n  public restartAdvertising() {\n    this._advertiseState = \"restarting\";\n\n    this._hci.setAdvertiseEnable(true);\n  }\n\n  public stopAdvertising() {\n    this._advertiseState = \"stopping\";\n\n    this._hci.setAdvertiseEnable(false);\n  }\n\n  public onHciError(error: any) {\n  }\n\n  public onHciLeAdvertisingParametersSet(status: any) {\n  }\n\n  public onHciLeAdvertisingDataSet(status: any) {\n  }\n\n  public onHciLeScanResponseDataSet(status: any) {\n  }\n\n  public onHciLeAdvertiseEnableSet(status: any) {\n    if (this._advertiseState === \"starting\") {\n      this._advertiseState = \"started\";\n\n      let error: any = null;\n\n      if (status) {\n        error = new Error(\n          Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\",\n        );\n      }\n\n      this.emit(\"advertisingStart\", error);\n    } else if (this._advertiseState === \"stopping\") {\n      this._advertiseState = \"stopped\";\n\n      this.emit(\"advertisingStop\");\n    }\n  }\n}\n\nexport default Gap;\n"]}