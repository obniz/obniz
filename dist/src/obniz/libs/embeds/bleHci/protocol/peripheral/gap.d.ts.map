{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.ts"],"names":[],"mappings":";AAIA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAO5B,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,IAAI,EAAE,GAAG,CAAC;IACV,eAAe,EAAE,GAAG,CAAC;gBAEhB,GAAG,EAAE,GAAG;IA0Bb,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAmG7C,uBAAuB,CAAC,IAAI,EAAE,GAAG;IA2BjC,2BAA2B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAqCjE,kBAAkB;IAMlB,eAAe;IAMf,UAAU,CAAC,KAAK,EAAE,GAAG;IAGrB,+BAA+B,CAAC,MAAM,EAAE,GAAG;IAG3C,yBAAyB,CAAC,MAAM,EAAE,GAAG;IAGrC,0BAA0B,CAAC,MAAM,EAAE,GAAG;IAGtC,yBAAyB,CAAC,MAAM,EAAE,GAAG;CAmB7C;AAED,eAAe,GAAG,CAAC","file":"gap.d.ts","sourcesContent":["// var debug = require('debug')('gap');\r\nconst debug: any = () => {\r\n};\r\n\r\nimport events from \"events\";\r\nimport Hci from \"../hci\";\r\n\r\nconst isLinux: boolean = false;\r\nconst isIntelEdison: boolean = false;\r\nconst isYocto: boolean = false;\r\n\r\nclass Gap extends events.EventEmitter {\r\n  public _hci: any;\r\n  public _advertiseState: any;\r\n\r\n  constructor(hci: any) {\r\n    super();\r\n    this._hci = hci;\r\n\r\n    this._advertiseState = null;\r\n\r\n    this._hci.on(\"error\", this.onHciError.bind(this));\r\n\r\n    this._hci.on(\r\n      \"leAdvertisingParametersSet\",\r\n      this.onHciLeAdvertisingParametersSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertisingDataSet\",\r\n      this.onHciLeAdvertisingDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leScanResponseDataSet\",\r\n      this.onHciLeScanResponseDataSet.bind(this),\r\n    );\r\n    this._hci.on(\r\n      \"leAdvertiseEnableSet\",\r\n      this.onHciLeAdvertiseEnableSet.bind(this),\r\n    );\r\n  }\r\n\r\n  public startAdvertising(name: any, serviceUuids: any) {\r\n    debug(\r\n      \"startAdvertising: name = \" +\r\n      name +\r\n      \", serviceUuids = \" +\r\n      JSON.stringify(serviceUuids, null, 2),\r\n    );\r\n\r\n    let advertisementDataLength: any = 3;\r\n    let scanDataLength: any = 0;\r\n\r\n    const serviceUuids16bit: any = [];\r\n    const serviceUuids128bit: any = [];\r\n    let i: any = 0;\r\n\r\n    if (name && name.length) {\r\n      scanDataLength += 2 + name.length;\r\n    }\r\n\r\n    if (serviceUuids && serviceUuids.length) {\r\n      for (i = 0; i < serviceUuids.length; i++) {\r\n        const serviceUuid: any = Buffer.from(\r\n          serviceUuids[i]\r\n            .match(/.{1,2}/g)\r\n            .reverse()\r\n            .join(\"\"),\r\n          \"hex\",\r\n        );\r\n\r\n        if (serviceUuid.length === 2) {\r\n          serviceUuids16bit.push(serviceUuid);\r\n        } else if (serviceUuid.length === 16) {\r\n          serviceUuids128bit.push(serviceUuid);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\r\n    }\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(scanDataLength);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    let advertisementDataOffset: any = 3;\r\n\r\n    if (serviceUuids16bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 2 * serviceUuids16bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids16bit.length; i++) {\r\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids16bit[i].length;\r\n      }\r\n    }\r\n\r\n    if (serviceUuids128bit.length) {\r\n      advertisementData.writeUInt8(\r\n        1 + 16 * serviceUuids128bit.length,\r\n        advertisementDataOffset,\r\n      );\r\n      advertisementDataOffset++;\r\n\r\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\r\n      advertisementDataOffset++;\r\n\r\n      for (i = 0; i < serviceUuids128bit.length; i++) {\r\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\r\n        advertisementDataOffset += serviceUuids128bit[i].length;\r\n      }\r\n    }\r\n\r\n    // name\r\n    if (name && name.length) {\r\n      const nameBuffer: any = Buffer.alloc(name);\r\n\r\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\r\n      scanData.writeUInt8(0x08, 1);\r\n      nameBuffer.copy(scanData, 2);\r\n    }\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingIBeacon(data: any) {\r\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\r\n\r\n    const dataLength: any = data.length;\r\n    const manufacturerDataLength: any = 4 + dataLength;\r\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\r\n    // let scanDataLength = 0;\r\n\r\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\r\n    const scanData: any = Buffer.alloc(0);\r\n\r\n    // flags\r\n    advertisementData.writeUInt8(2, 0);\r\n    advertisementData.writeUInt8(0x01, 1);\r\n    advertisementData.writeUInt8(0x06, 2);\r\n\r\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\r\n    advertisementData.writeUInt8(0xff, 4);\r\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\r\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\r\n    advertisementData.writeUInt8(dataLength, 8);\r\n\r\n    data.copy(advertisementData, 9);\r\n\r\n    this.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\r\n    advertisementData = advertisementData || Buffer.alloc(0);\r\n    scanData = scanData || Buffer.alloc(0);\r\n\r\n    debug(\r\n      \"startAdvertisingWithEIRData: advertisement data = \" +\r\n      advertisementData.toString(\"hex\") +\r\n      \", scan data = \" +\r\n      scanData.toString(\"hex\"),\r\n    );\r\n\r\n    let error: any = null;\r\n\r\n    if (advertisementData.length > 31) {\r\n      error = new Error(\"Advertisement data is over maximum limit of 31 bytes\");\r\n    } else if (scanData.length > 31) {\r\n      error = new Error(\"Scan data is over maximum limit of 31 bytes\");\r\n    }\r\n\r\n    if (error) {\r\n      this.emit(\"advertisingStart\", error);\r\n    } else {\r\n      this._advertiseState = \"starting\";\r\n\r\n      if (isIntelEdison || isYocto) {\r\n        // work around for Intel Edison\r\n        debug(\"skipping first set of scan response and advertisement data\");\r\n      } else {\r\n        this._hci.setScanResponseData(scanData);\r\n        this._hci.setAdvertisingData(advertisementData);\r\n      }\r\n      this._hci.setAdvertiseEnable(true);\r\n      this._hci.setScanResponseData(scanData);\r\n      this._hci.setAdvertisingData(advertisementData);\r\n    }\r\n  }\r\n\r\n  public restartAdvertising() {\r\n    this._advertiseState = \"restarting\";\r\n\r\n    this._hci.setAdvertiseEnable(true);\r\n  }\r\n\r\n  public stopAdvertising() {\r\n    this._advertiseState = \"stopping\";\r\n\r\n    this._hci.setAdvertiseEnable(false);\r\n  }\r\n\r\n  public onHciError(error: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingParametersSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertisingDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeScanResponseDataSet(status: any) {\r\n  }\r\n\r\n  public onHciLeAdvertiseEnableSet(status: any) {\r\n    if (this._advertiseState === \"starting\") {\r\n      this._advertiseState = \"started\";\r\n\r\n      let error: any = null;\r\n\r\n      if (status) {\r\n        error = new Error(\r\n          Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\",\r\n        );\r\n      }\r\n\r\n      this.emit(\"advertisingStart\", error);\r\n    } else if (this._advertiseState === \"stopping\") {\r\n      this._advertiseState = \"stopped\";\r\n\r\n      this.emit(\"advertisingStop\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gap;\r\n"]}