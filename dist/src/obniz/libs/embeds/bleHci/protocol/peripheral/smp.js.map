{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.ts"],"names":[],"mappings":"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","file":"smp.js","sourcesContent":["const events: any = require(\"events\");\n\nimport crypto from \"./crypto\";\nimport Mgmt from \"./mgmt\";\n\nconst SMP_CID: any = 0x0006;\n\nconst SMP_PAIRING_REQUEST: any = 0x01;\nconst SMP_PAIRING_RESPONSE: any = 0x02;\nconst SMP_PAIRING_CONFIRM: any = 0x03;\nconst SMP_PAIRING_RANDOM: any = 0x04;\nconst SMP_PAIRING_FAILED: any = 0x05;\nconst SMP_ENCRYPT_INFO: any = 0x06;\nconst SMP_MASTER_IDENT: any = 0x07;\n\nconst SMP_UNSPECIFIED: any = 0x08;\n\nexport default class Smp extends events.EventEmitter {\n  public _aclStream: any;\n  public _mgmt: any;\n  public _iat: any;\n  public _ia: any;\n  public _rat: any;\n  public _ra: any;\n  public _stk: any;\n  public _random: any;\n  public _diversifier: any;\n  public _preq: any;\n  public _pres: any;\n  public _pcnf: any;\n  public _tk: any;\n  public _r: any;\n\n  constructor(\n    aclStream: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n    hciProtocol: any,\n  ) {\n    super();\n    this._aclStream = aclStream;\n    this._mgmt = new Mgmt(hciProtocol);\n\n    this._iat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this._stk = null;\n    this._random = null;\n    this._diversifier = null;\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(\n      this,\n    );\n    this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"encryptChange\", this.onAclStreamEncryptChangeBinded);\n    this._aclStream.on(\"ltkNegReply\", this.onAclStreamLtkNegReplyBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public onAclStreamData(cid: any, data: any) {\n    if (cid !== SMP_CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n\n    if (SMP_PAIRING_REQUEST === code) {\n      this.handlePairingRequest(data);\n    } else if (SMP_PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP_PAIRING_RANDOM === code) {\n      this.handlePairingRandom(data);\n    } else if (SMP_PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    }\n  }\n\n  public onAclStreamEncryptChange(encrypted: any) {\n    if (encrypted) {\n      if (this._stk && this._diversifier && this._random) {\n        this.write(Buffer.concat([Buffer.from([SMP_ENCRYPT_INFO]), this._stk]));\n\n        this.write(\n          Buffer.concat([\n            Buffer.from([SMP_MASTER_IDENT]),\n            this._diversifier,\n            this._random,\n          ]),\n        );\n      }\n    }\n  }\n\n  public onAclStreamLtkNegReply() {\n    this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_UNSPECIFIED]));\n\n    this.emit(\"fail\");\n  }\n\n  public onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\n      \"encryptChange\",\n      this.onAclStreamEncryptChangeBinded,\n    );\n    this._aclStream.removeListener(\n      \"ltkNegReply\",\n      this.onAclStreamLtkNegReplyBinded,\n    );\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public handlePairingRequest(data: any) {\n    this._preq = data;\n    this._pres = Buffer.from([\n      SMP_PAIRING_RESPONSE,\n      0x03, // IO capability: NoInputNoOutput\n      0x00, // OOB data: Authentication data not present\n      0x01, // Authentication requirement: Bonding - No MITM\n      0x10, // Max encryption key size\n      0x00, // Initiator key distribution: <none>\n      0x01, // Responder key distribution: EncKey\n    ]);\n\n    this.write(this._pres);\n  }\n\n  public handlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP_PAIRING_CONFIRM]),\n        crypto.c1(\n          this._tk,\n          this._r,\n          this._pres,\n          this._preq,\n          this._iat,\n          this._ia,\n          this._rat,\n          this._ra,\n        ),\n      ]),\n    );\n  }\n\n  public handlePairingRandom(data: any) {\n    const r: any = data.slice(1);\n\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP_PAIRING_CONFIRM]),\n      crypto.c1(\n        this._tk,\n        r,\n        this._pres,\n        this._preq,\n        this._iat,\n        this._ia,\n        this._rat,\n        this._ra,\n      ),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      this._diversifier = Buffer.from(\"0000\", \"hex\");\n      this._random = Buffer.from(\"0000000000000000\", \"hex\");\n      this._stk = crypto.s1(this._tk, this._r, r);\n\n      this._mgmt.addLongTermKey(\n        this._ia,\n        this._iat,\n        0,\n        0,\n        this._diversifier,\n        this._random,\n        this._stk,\n      );\n\n      this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));\n    } else {\n      this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_PAIRING_CONFIRM]));\n\n      this.emit(\"fail\");\n    }\n  }\n\n  public handlePairingFailed(data: any) {\n    this.emit(\"fail\");\n  }\n\n  public write(data: any) {\n    this._aclStream.write(SMP_CID, data);\n  }\n}\n"]}