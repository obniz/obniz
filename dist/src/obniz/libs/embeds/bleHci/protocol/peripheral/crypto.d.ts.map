{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/crypto.ts"],"names":[],"mappings":";AAEA,iBAAS,CAAC,WAET;AAED,iBAAS,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,OAWtF;AAED,iBAAS,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,OAEnC;AAED,iBAAS,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,OAQ7B;;;;;;;AAsBD,wBAKE","file":"crypto.d.ts","sourcesContent":["import crypto from \"crypto\";\n\nfunction r() {\n  return crypto.randomBytes(16);\n}\n\nfunction c1(k: any, _r: any, pres: any, preq: any, iat: any, ia: any, rat: any, ra: any) {\n  const p1: any = Buffer.concat([iat, rat, preq, pres]);\n\n  const p2: any = Buffer.concat([ra, ia, Buffer.from(\"00000000\", \"hex\")]);\n\n  let res: any = xor(_r, p1);\n  res = e(k, res);\n  res = xor(res, p2);\n  res = e(k, res);\n\n  return res;\n}\n\nfunction s1(k: any, r1: any, r2: any) {\n  return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));\n}\n\nfunction e(key: any, data: any) {\n  key = swap(key);\n  data = swap(data);\n\n  const cipher: any = crypto.createCipheriv(\"aes-128-ecb\", key, \"\");\n  cipher.setAutoPadding(false);\n\n  return swap(Buffer.concat([cipher.update(data), cipher.final()]));\n}\n\nfunction xor(b1: any, b2: any) {\n  const result: any = Buffer.alloc(b1.length);\n\n  for (let i = 0; i < b1.length; i++) {\n    result[i] = b1[i] ^ b2[i];\n  }\n\n  return result;\n}\n\nfunction swap(input: any) {\n  const output: any = Buffer.alloc(input.length);\n\n  for (let i = 0; i < output.length; i++) {\n    output[i] = input[input.length - i - 1];\n  }\n\n  return output;\n}\n\nexport default {\n  r,\n  c1,\n  s1,\n  e,\n};\n"]}