{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.ts"],"names":[],"mappings":"AAQA,MAAM,CAAC,OAAO,OAAO,IAAI;IAChB,SAAS,EAAE,GAAG,CAAC;IACf,IAAI,EAAE,GAAG,CAAC;IACV,gBAAgB,EAAE,GAAG,CAAC;IACtB,KAAK,EAAE,GAAG,CAAC;gBAEC,WAAW,EAAE,GAAG;IAK5B,WAAW,CAAC,IAAI,EAAE,GAAG;IAIrB,YAAY,CAAC,KAAK,EAAE,GAAG;IAIvB,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAmB7G,gBAAgB;IAMhB,eAAe;IAaf,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;CAoB/C","file":"mgmt.d.ts","sourcesContent":["// let debug = require('debug')('mgmt');\nconst debug: any = () => {\n};\n\nconst LTK_INFO_SIZE: any = 36;\n\nconst MGMT_OP_LOAD_LONG_TERM_KEYS: any = 0x0013;\n\nexport default class Mgmt {\n  public _ltkInfos: any;\n  public _hci: any;\n  public loadLongTermKeys: any;\n  public write: any;\n\n  public constructor(hciProtocol: any) {\n    this._ltkInfos = [];\n    this._hci = hciProtocol;\n  }\n\n  public nSocketData(data: any) {\n    debug(\"on data ->\" + data.toString(\"hex\"));\n  }\n\n  public nSocketError(error: any) {\n    debug(\"on error ->\" + error.message);\n  }\n\n  public ddLongTermKey(address: any, addressType: any, authenticated: any, master: any, ediv: any, rand: any, key: any) {\n    const ltkInfo: any = Buffer.alloc(LTK_INFO_SIZE);\n\n    address.copy(ltkInfo, 0);\n    ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one\n\n    ltkInfo.writeUInt8(authenticated, 7);\n    ltkInfo.writeUInt8(master, 8);\n    ltkInfo.writeUInt8(key.length, 9);\n\n    ediv.copy(ltkInfo, 10);\n    rand.copy(ltkInfo, 12);\n    key.copy(ltkInfo, 20);\n\n    this._ltkInfos.push(ltkInfo);\n\n    this.loadLongTermKeys();\n  }\n\n  public learLongTermKeys() {\n    this._ltkInfos = [];\n\n    this.loadLongTermKeys();\n  }\n\n  public oadLongTermKeys() {\n    const numLongTermKeys: any = this._ltkInfos.length;\n    const op: any = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);\n\n    op.writeUInt16LE(numLongTermKeys, 0);\n\n    for (let i = 0; i < numLongTermKeys; i++) {\n      this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);\n    }\n\n    this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);\n  }\n\n  public rite(opcode: any, index: any, data: any) {\n    let length: any = 0;\n\n    if (data) {\n      length = data.length;\n    }\n\n    const pkt: any = Buffer.alloc(6 + length);\n\n    pkt.writeUInt16LE(opcode, 0);\n    pkt.writeUInt16LE(index, 2);\n    pkt.writeUInt16LE(length, 4);\n\n    if (length) {\n      data.copy(pkt, 6);\n    }\n\n    debug(\"writing -> \" + pkt.toString(\"hex\"));\n    this._hci._socket.write(pkt);\n  }\n}\n"]}