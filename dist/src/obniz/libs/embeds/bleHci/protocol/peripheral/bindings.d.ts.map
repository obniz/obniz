{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.ts"],"names":[],"mappings":";AAIA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAM5B,cAAM,aAAc,SAAQ,MAAM,CAAC,YAAY;IACtC,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;IACV,KAAK,EAAE,GAAG,CAAC;IACX,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAE,GAAG,CAAC;IACpB,OAAO,CAAC,UAAU,CAAmB;gBAEzB,WAAW,EAAE,GAAG;IAerB,gBAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAM7C,uBAAuB,CAAC,IAAI,EAAE,GAAG;IAMjC,2BAA2B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAMjE,eAAe;IAMf,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,UAAU;IAQV,UAAU;IAMV,IAAI;IAwBJ,aAAa,CAAC,KAAK,EAAE,GAAG;IA2BxB,eAAe,CAAC,OAAO,EAAE,GAAG;IAI5B,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,EAAE,GAAG;IAG/F,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAI7B,iBAAiB;IAIjB,gBAAgB,CACrB,MAAM,EAAE,GAAG,EACX,MAAM,CAAC,EAAE,GAAG,EACZ,IAAI,CAAC,EAAE,GAAG,EACV,WAAW,CAAC,EAAE,GAAG,EACjB,OAAO,CAAC,EAAE,GAAG,EACb,QAAQ,CAAC,EAAE,GAAG,EACd,OAAO,CAAC,EAAE,GAAG,EACb,kBAAkB,CAAC,EAAE,GAAG,EACxB,mBAAmB,CAAC,EAAE,GAAG;IAsBpB,sBAAsB,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,GAAG;IAI3F,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;IAuB3C,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAM1C,eAAe,CAAC,MAAM,EAAE,GAAG;IAM3B,WAAW,CAAC,GAAG,EAAE,GAAG;IAIpB,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAIlC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;CAKvD;AAED,eAAe,aAAa,CAAC","file":"bindings.d.ts","sourcesContent":["// var debug = require('debug')('bindings');\r\nconst debug: any = () => {\r\n};\r\n\r\nimport events from \"events\";\r\nimport os from \"os\";\r\nimport AclStream from \"./acl-stream\";\r\nimport Gap from \"./gap\";\r\nimport Gatt from \"./gatt\";\r\n\r\nclass BlenoBindings extends events.EventEmitter {\r\n  public _state: any;\r\n  public _advertising: any;\r\n  public _hci: any;\r\n  public _gap: any;\r\n  public _gatt: any;\r\n  public _address: any;\r\n  public _handle: any;\r\n  private _aclStream: AclStream | null;\r\n\r\n  constructor(hciProtocol: any) {\r\n    super();\r\n    this._state = null;\r\n\r\n    this._advertising = false;\r\n\r\n    this._hci = hciProtocol;\r\n    this._gap = new Gap(this._hci);\r\n    this._gatt = new Gatt();\r\n\r\n    this._address = null;\r\n    this._handle = null;\r\n    this._aclStream = null;\r\n  }\r\n\r\n  public startAdvertising(name: any, serviceUuids: any) {\r\n    this._advertising = true;\r\n\r\n    this._gap.startAdvertising(name, serviceUuids);\r\n  }\r\n\r\n  public startAdvertisingIBeacon(data: any) {\r\n    this._advertising = true;\r\n\r\n    this._gap.startAdvertisingIBeacon(data);\r\n  }\r\n\r\n  public startAdvertisingWithEIRData(advertisementData: any, scanData: any) {\r\n    this._advertising = true;\r\n\r\n    this._gap.startAdvertisingWithEIRData(advertisementData, scanData);\r\n  }\r\n\r\n  public stopAdvertising() {\r\n    this._advertising = false;\r\n\r\n    this._gap.stopAdvertising();\r\n  }\r\n\r\n  public setServices(services: any) {\r\n    this._gatt.setServices(services);\r\n\r\n    this.emit(\"servicesSet\");\r\n  }\r\n\r\n  public disconnect() {\r\n    if (this._handle) {\r\n      debug(\"disconnect by server\");\r\n\r\n      this._hci.disconnect(this._handle);\r\n    }\r\n  }\r\n\r\n  public updateRssi() {\r\n    if (this._handle) {\r\n      this._hci.readRssi(this._handle);\r\n    }\r\n  }\r\n\r\n  public init() {\r\n    this._gap.on(\"advertisingStart\", this.onAdvertisingStart.bind(this));\r\n    this._gap.on(\"advertisingStop\", this.onAdvertisingStop.bind(this));\r\n\r\n    this._gatt.on(\"mtuChange\", this.onMtuChange.bind(this));\r\n\r\n    this._hci.on(\"stateChange\", this.onStateChange.bind(this));\r\n    this._hci.on(\"addressChange\", this.onAddressChange.bind(this));\r\n    this._hci.on(\"readLocalVersion\", this.onReadLocalVersion.bind(this));\r\n\r\n    this._hci.on(\"leConnComplete\", this.onLeConnComplete.bind(this));\r\n    this._hci.on(\r\n      \"leConnUpdateComplete\",\r\n      this.onLeConnUpdateComplete.bind(this),\r\n    );\r\n    this._hci.on(\"rssiRead\", this.onRssiRead.bind(this));\r\n    this._hci.on(\"disconnComplete\", this.onDisconnComplete.bind(this));\r\n    this._hci.on(\"encryptChange\", this.onEncryptChange.bind(this));\r\n    this._hci.on(\"leLtkNegReply\", this.onLeLtkNegReply.bind(this));\r\n    this._hci.on(\"aclDataPkt\", this.onAclDataPkt.bind(this));\r\n\r\n    this.emit(\"platform\", os.platform());\r\n  }\r\n\r\n  public onStateChange(state: any) {\r\n    if (this._state === state) {\r\n      return;\r\n    }\r\n    this._state = state;\r\n\r\n    if (state === \"unauthorized\") {\r\n      console.log(\r\n        \"bleno warning: adapter state unauthorized, please run as root or with sudo\",\r\n      );\r\n      console.log(\r\n        \"               or see README for information on running without root/sudo:\",\r\n      );\r\n      console.log(\r\n        \"               https://github.com/sandeepmistry/bleno#running-on-linux\",\r\n      );\r\n    } else if (state === \"unsupported\") {\r\n      console.log(\r\n        \"bleno warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).\",\r\n      );\r\n      console.log(\"               Try to run with environment variable:\");\r\n      console.log(\"               [sudo] BLENO_HCI_DEVICE_ID=x node ...\");\r\n    }\r\n\r\n    this.emit(\"stateChange\", state);\r\n  }\r\n\r\n  public onAddressChange(address: any) {\r\n    this.emit(\"addressChange\", address);\r\n  }\r\n\r\n  public onReadLocalVersion(hciVer: any, hciRev?: any, lmpVer?: any, manufacturer?: any, lmpSubVer?: any) {\r\n  }\r\n\r\n  public onAdvertisingStart(error: any) {\r\n    this.emit(\"advertisingStart\", error);\r\n  }\r\n\r\n  public onAdvertisingStop() {\r\n    this.emit(\"advertisingStop\");\r\n  }\r\n\r\n  public onLeConnComplete(\r\n    status: any,\r\n    handle?: any,\r\n    role?: any,\r\n    addressType?: any,\r\n    address?: any,\r\n    interval?: any,\r\n    latency?: any,\r\n    supervisionTimeout?: any,\r\n    masterClockAccuracy?: any,\r\n  ) {\r\n    if (role !== 1) {\r\n      // not slave, ignore\r\n      return;\r\n    }\r\n\r\n    this._address = address;\r\n    this._handle = handle;\r\n    this._aclStream = new AclStream(\r\n      this._hci,\r\n      handle,\r\n      this._hci.addressType,\r\n      this._hci.address,\r\n      addressType,\r\n      address,\r\n    );\r\n    this._gatt.setAclStream(this._aclStream);\r\n\r\n    this.emit(\"accept\", address);\r\n  }\r\n\r\n  public onLeConnUpdateComplete(handle: any, interval?: any, latency?: any, supervisionTimeout?: any) {\r\n    // no-op\r\n  }\r\n\r\n  public onDisconnComplete(handle: any, reason?: any) {\r\n    if (this._handle !== handle) {\r\n      return; // not peripheral\r\n    }\r\n    if (this._aclStream) {\r\n      this._aclStream.push(null, null);\r\n    }\r\n\r\n    const address: any = this._address;\r\n\r\n    this._address = null;\r\n    this._handle = null;\r\n    this._aclStream = null;\r\n\r\n    if (address) {\r\n      this.emit(\"disconnect\", address); // TODO: use reason\r\n    }\r\n\r\n    if (this._advertising) {\r\n      this._gap.restartAdvertising();\r\n    }\r\n  }\r\n\r\n  public onEncryptChange(handle: any, encrypt?: any) {\r\n    if (this._handle === handle && this._aclStream) {\r\n      this._aclStream.pushEncrypt(encrypt);\r\n    }\r\n  }\r\n\r\n  public onLeLtkNegReply(handle: any) {\r\n    if (this._handle === handle && this._aclStream) {\r\n      this._aclStream.pushLtkNegReply();\r\n    }\r\n  }\r\n\r\n  public onMtuChange(mtu: any) {\r\n    this.emit(\"mtuChange\", mtu);\r\n  }\r\n\r\n  public onRssiRead(handle: any, rssi?: any) {\r\n    this.emit(\"rssiUpdate\", rssi);\r\n  }\r\n\r\n  public onAclDataPkt(handle: any, cid?: any, data?: any) {\r\n    if (this._handle === handle && this._aclStream) {\r\n      this._aclStream.push(cid, data);\r\n    }\r\n  }\r\n}\r\n\r\nexport default BlenoBindings;\r\n"]}