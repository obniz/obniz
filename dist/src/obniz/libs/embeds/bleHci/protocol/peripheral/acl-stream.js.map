{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,gDAAwB;AAExB,MAAM,SAAU,SAAQ,gBAAM,CAAC,YAAY;IAOzC,YACE,GAAQ,EACR,MAAW,EACX,gBAAqB,EACrB,YAAiB,EACjB,iBAAsB,EACtB,aAAkB;QAElB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,CACjB,IAAI,EACJ,gBAAgB,EAChB,YAAY,EACZ,iBAAiB,EACjB,aAAa,EACb,IAAI,CAAC,IAAI,CACV,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,GAAQ,EAAE,IAAS;QAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,IAAI,CAAC,GAAQ,EAAE,IAAS;QAC7B,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClB;IACH,CAAC;IAEM,WAAW,CAAC,OAAY;QAC7B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IAEM,eAAe;QACpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;CACF;AAED,kBAAe,SAAS,CAAC","file":"acl-stream.js","sourcesContent":["import events from \"events\";\n\nimport Smp from \"./smp\";\n\nclass AclStream extends events.EventEmitter {\n  public _hci: any;\n  public _handle: any;\n  public encypted: any;\n  public _smp: any;\n  public encrypted: any;\n\n  constructor(\n    hci: any,\n    handle: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n    this.encypted = false;\n\n    this._smp = new Smp(\n      this,\n      localAddressType,\n      localAddress,\n      remoteAddressType,\n      remoteAddress,\n      this._hci,\n    );\n  }\n\n  public write(cid: any, data: any) {\n    this._hci.queueAclDataPkt(this._handle, cid, data);\n  }\n\n  public push(cid: any, data: any) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    } else {\n      this.emit(\"end\");\n    }\n  }\n\n  public pushEncrypt(encrypt: any) {\n    this.encrypted = encrypt ? true : false;\n\n    this.emit(\"encryptChange\", this.encrypted);\n  }\n\n  public pushLtkNegReply() {\n    this.emit(\"ltkNegReply\");\n  }\n}\n\nexport default AclStream;\n"]}