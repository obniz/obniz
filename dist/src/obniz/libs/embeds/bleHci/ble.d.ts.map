{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/ble.ts"],"names":[],"mappings":"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","file":"ble.d.ts","sourcesContent":["import BleHelper from \"./bleHelper\";\r\nimport ObnizBLEHci from \"./hci\";\r\nimport CentralBindings from \"./protocol/central/bindings\";\r\nimport HciProtocol from \"./protocol/hci\";\r\nimport PeripheralBindings from \"./protocol/peripheral/bindings\";\r\n\r\nimport Obniz from \"../../../index\";\r\nimport BleAdvertisement from \"./bleAdvertisement\";\r\nimport BleCharacteristic from \"./bleCharacteristic\";\r\nimport BleDescriptor from \"./bleDescriptor\";\r\nimport BlePeripheral from \"./blePeripheral\";\r\nimport BleRemotePeripheral from \"./bleRemotePeripheral\";\r\nimport BleScan from \"./bleScan\";\r\nimport BleSecurity from \"./bleSecurity\";\r\nimport BleService from \"./bleService\";\r\nimport {BleDeviceAddressType, UUID} from \"./bleTypes\";\r\n\r\nclass ObnizBLE {\r\n\r\n  public static _dataArray2uuidHex(data: number[], reverse: boolean): UUID {\r\n    let uuid: any = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      uuid.push((\"00\" + data[i].toString(16).toLowerCase()).slice(-2));\r\n    }\r\n    if (reverse) {\r\n      uuid = uuid.reverse();\r\n    }\r\n    let str: any = uuid.join(\"\");\r\n    if (uuid.length >= 16) {\r\n      str =\r\n        str.slice(0, 8) +\r\n        \"-\" +\r\n        str.slice(8, 12) +\r\n        \"-\" +\r\n        str.slice(12, 16) +\r\n        \"-\" +\r\n        str.slice(16, 20) +\r\n        \"-\" +\r\n        str.slice(20);\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public Obniz: Obniz;\r\n  public hci: ObnizBLEHci;\r\n  public hciProtocol: HciProtocol;\r\n  public centralBindings: CentralBindings;\r\n  public peripheralBindings: PeripheralBindings;\r\n  public _initialized: boolean;\r\n  public _initializeWarning: boolean;\r\n  public remotePeripherals: BleRemotePeripheral[];\r\n  public service: typeof BleService;\r\n  public characteristic: typeof BleCharacteristic;\r\n  public descriptor: typeof BleDescriptor;\r\n  public peripheral: BlePeripheral;\r\n  public advertisement: any;\r\n  public scan: BleScan;\r\n  public security: any;\r\n\r\n  constructor(obniz: Obniz) {\r\n    this.Obniz = obniz;\r\n    this.hci = new ObnizBLEHci(obniz);\r\n    this.hciProtocol = new HciProtocol(this.hci);\r\n\r\n    this.centralBindings = new CentralBindings(this.hciProtocol);\r\n    this.peripheralBindings = new PeripheralBindings(this.hciProtocol);\r\n\r\n    // let dummy = {write : ()=>{}, on:()=>{}}\r\n    // this.centralBindings = new CentralBindings( dummy );\r\n    // this.peripheralBindings = new PeripheralBindings( dummy );\r\n\r\n    this.centralBindings.init();\r\n    this.peripheralBindings.init();\r\n\r\n    this._initialized = false;\r\n    this._initializeWarning = true;\r\n\r\n    this.remotePeripherals = [];\r\n\r\n    this.service = BleService;\r\n    this.characteristic = BleCharacteristic;\r\n    this.descriptor = BleDescriptor;\r\n    this.peripheral = new BlePeripheral(this);\r\n\r\n    this.advertisement = new BleAdvertisement(this);\r\n    this.scan = new BleScan(this);\r\n    this.security = new BleSecurity(this);\r\n\r\n    this._bind();\r\n    this._reset();\r\n  }\r\n\r\n  public async initWait(): Promise<void> {\r\n    if (!this._initialized) {\r\n      this._initialized = true;\r\n      await this.hciProtocol.initWait();\r\n    }\r\n  }\r\n\r\n  public warningIfNotInitialize() {\r\n    if (!this._initialized && this._initializeWarning) {\r\n      this._initializeWarning = true;\r\n      this.Obniz.warning({\r\n        alert: \"warning\",\r\n        message: `BLE is not initialized. Please call 'await obniz.ble.initWait()'`,\r\n      });\r\n    }\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (obj.hci) {\r\n      this.hci.notified(obj.hci);\r\n    }\r\n  }\r\n\r\n  public _reset() {\r\n  }\r\n\r\n  public directConnect(uuid: UUID, addressType: BleDeviceAddressType) {\r\n    let peripheral: any = this.findPeripheral(uuid);\r\n    if (!peripheral) {\r\n      peripheral = new BleRemotePeripheral(this, uuid);\r\n      this.remotePeripherals.push(peripheral);\r\n    }\r\n    if (!this.centralBindings._addresses[uuid]) {\r\n      const address: any = uuid.match(/.{1,2}/g)!.join(\":\");\r\n      this.centralBindings._addresses[uuid] = address;\r\n      this.centralBindings._addresseTypes[uuid] = addressType;\r\n      this.centralBindings._connectable[uuid] = true;\r\n    }\r\n    peripheral.connect();\r\n    return peripheral;\r\n  }\r\n\r\n  public async directConnectWait(uuid: any, addressType: any) {\r\n    const peripheral: any = this.directConnect(uuid, addressType);\r\n    await peripheral.connectWait();\r\n    return peripheral;\r\n  }\r\n\r\n  public findPeripheral(address: any) {\r\n    for (const key in this.remotePeripherals) {\r\n      if (this.remotePeripherals[key].address === address) {\r\n        return this.remotePeripherals[key];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public onStateChange() {\r\n  }\r\n\r\n  public onAddressChange() {\r\n  }\r\n\r\n  public onScanStart() {\r\n  }\r\n\r\n  public onScanStop() {\r\n    this.scan.notifyFromServer(\"onfinish\", null);\r\n  }\r\n\r\n  public onDiscover(uuid: any, address?: any, addressType?: any, connectable?: any, advertisement?: any, rssi?: any) {\r\n    let val: any = this.findPeripheral(uuid);\r\n    if (!val) {\r\n      val = new BleRemotePeripheral(this, uuid);\r\n      this.remotePeripherals.push(val);\r\n    }\r\n    val.discoverdOnRemote = true;\r\n\r\n    const peripheralData: any = {\r\n      device_type: \"ble\",\r\n      address_type: addressType,\r\n      ble_event_type: connectable\r\n        ? \"connectable_advertisemnt\"\r\n        : \"non_connectable_advertising\",\r\n      rssi,\r\n      adv_data: advertisement.advertisementRaw,\r\n      scan_resp: advertisement.scanResponseRaw,\r\n    };\r\n\r\n    val.setParams(peripheralData);\r\n    val._adv_data_filtered = advertisement;\r\n\r\n    this.scan.notifyFromServer(\"onfind\", val);\r\n  }\r\n\r\n  public async onConnect(peripheralUuid: any, error?: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    if (!error) {\r\n      await peripheral.discoverAllHandlesWait();\r\n    }\r\n    peripheral.notifyFromServer(\"statusupdate\", {\r\n      status: error ? \"disconnected\" : \"connected\",\r\n    });\r\n  }\r\n\r\n  public onDisconnect(peripheralUuid: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    peripheral.notifyFromServer(\"statusupdate\", {status: \"disconnected\"});\r\n  }\r\n\r\n  public onRssiUpdate() {\r\n  }\r\n\r\n  public onServicesDiscover(peripheralUuid: any, serviceUuids?: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    for (const serviceUuid of serviceUuids) {\r\n      peripheral.notifyFromServer(\"discover\", {service_uuid: serviceUuid});\r\n    }\r\n    peripheral.notifyFromServer(\"discoverfinished\", {});\r\n  }\r\n\r\n  public onIncludedServicesDiscover(\r\n    peripheralUuid: any,\r\n    serviceUuid?: any,\r\n    includedServiceUuids?: any,\r\n  ) {\r\n  }\r\n\r\n  public onCharacteristicsDiscover(peripheralUuid: any, serviceUuid?: any, characteristics?: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const service: any = peripheral.findService({service_uuid: serviceUuid});\r\n    for (const char of characteristics) {\r\n      const obj: any = {\r\n        properties: char.properties.map((e: any) => BleHelper.toSnakeCase(e)),\r\n        characteristic_uuid: char.uuid,\r\n      };\r\n      service.notifyFromServer(\"discover\", obj);\r\n    }\r\n    service.notifyFromServer(\"discoverfinished\", {});\r\n  }\r\n\r\n  public onRead(\r\n    peripheralUuid: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    data?: any,\r\n    isNotification?: any,\r\n    isSuccess?: any,\r\n  ) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const characteristic: any = peripheral.findCharacteristic({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n    });\r\n\r\n    if (isNotification) {\r\n      const obj: any = {\r\n        data: Array.from(data),\r\n      };\r\n      characteristic.notifyFromServer(\"onnotify\", obj);\r\n    } else {\r\n      const obj: any = {\r\n        result: isSuccess ? \"success\" : \"failed\",\r\n        data: Array.from(data),\r\n      };\r\n      characteristic.notifyFromServer(\"onread\", obj);\r\n    }\r\n  }\r\n\r\n  public onWrite(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, isSuccess?: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const characteristic: any = peripheral.findCharacteristic({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n    });\r\n    characteristic.notifyFromServer(\"onwrite\", {\r\n      result: isSuccess ? \"success\" : \"failed\",\r\n    });\r\n  }\r\n\r\n  public onBroadcast(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, state?: any) {\r\n  }\r\n\r\n  public onNotify(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, state?: any) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const char: any = peripheral.findCharacteristic({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n    });\r\n\r\n    if (state) {\r\n      char.notifyFromServer(\"onregisternotify\", {});\r\n    } else {\r\n      char.notifyFromServer(\"onunregisternotify\", {});\r\n    }\r\n  }\r\n\r\n  public onDescriptorsDiscover(\r\n    peripheralUuid: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptors?: any,\r\n  ) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const char: any = peripheral.findCharacteristic({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n    });\r\n    for (const descr of descriptors) {\r\n      const obj: any = {\r\n        descriptor_uuid: descr,\r\n      };\r\n      char.notifyFromServer(\"discover\", obj);\r\n    }\r\n    char.notifyFromServer(\"discoverfinished\", {});\r\n  }\r\n\r\n  public onValueRead(\r\n    peripheralUuid: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptorUuid?: any,\r\n    data?: any,\r\n    isSuccess?: any,\r\n  ) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const descriptor: any = peripheral.findDescriptor({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n      descriptor_uuid: descriptorUuid,\r\n    });\r\n\r\n    const obj: any = {\r\n      result: isSuccess ? \"success\" : \"failed\",\r\n      data: Array.from(data),\r\n    };\r\n    descriptor.notifyFromServer(\"onread\", obj);\r\n  }\r\n\r\n  public onValueWrite(\r\n    peripheralUuid: any,\r\n    serviceUuid?: any,\r\n    characteristicUuid?: any,\r\n    descriptorUuid?: any,\r\n    isSuccess?: any,\r\n  ) {\r\n    const peripheral: any = this.findPeripheral(peripheralUuid);\r\n    const descriptor: any = peripheral.findDescriptor({\r\n      service_uuid: serviceUuid,\r\n      characteristic_uuid: characteristicUuid,\r\n      descriptor_uuid: descriptorUuid,\r\n    });\r\n\r\n    const obj: any = {\r\n      result: isSuccess ? \"success\" : \"failed\",\r\n    };\r\n    descriptor.notifyFromServer(\"onwrite\", obj);\r\n  }\r\n\r\n  public onHandleRead(peripheralUuid: any, handle?: any, data?: any) {\r\n  }\r\n\r\n  public onHandleWrite(peripheralUuid: any, handle?: any) {\r\n  }\r\n\r\n  public onHandleNotify(peripheralUuid: any, handle?: any, data?: any) {\r\n  }\r\n\r\n  public onPeripheralStateChange(state: any) {\r\n    // console.error(\"onPeripheralStateChange\")\r\n  }\r\n\r\n  public onPeripheralAddressChange(address: any) {\r\n    // console.error(\"onPeripheralAddressChange\")\r\n  }\r\n\r\n  public onPeripheralPlatform(platform: any) {\r\n    // console.error(\"onPeripheralPlatform\")\r\n  }\r\n\r\n  public onPeripheralAdvertisingStart(error: any) {\r\n    // console.error(\"onPeripheralAdvertisingStart\")\r\n  }\r\n\r\n  public onPeripheralAdvertisingStop() {\r\n    // console.error(\"onPeripheralAdvertisingStop\")\r\n  }\r\n\r\n  public onPeripheralServicesSet(error: any) {\r\n    // console.error(\"onPeripheralServicesSet\")\r\n  }\r\n\r\n  public onPeripheralAccept(clientAddress: any) {\r\n    this.peripheral.currentConnectedDeviceAddress = clientAddress;\r\n    this.peripheral.onconnectionupdates({\r\n      address: clientAddress,\r\n      status: \"connected\",\r\n    });\r\n  }\r\n\r\n  public onPeripheralMtuChange(mtu: any) {\r\n    // console.error(\"onPeripheralMtuChange\")\r\n  }\r\n\r\n  public onPeripheralDisconnect(clientAddress: any) {\r\n    this.peripheral.currentConnectedDeviceAddress = null;\r\n    this.peripheral.onconnectionupdates({\r\n      address: clientAddress,\r\n      status: \"disconnected\",\r\n    });\r\n  }\r\n\r\n  public onPeripheralRssiUpdate(rssi: any) {\r\n    // console.error(\"onPeripheralRssiUpdate\")\r\n  }\r\n\r\n  public _bind() {\r\n    this.centralBindings.on(\"stateChange\", this.onStateChange.bind(this));\r\n\r\n    this.centralBindings.on(\"addressChange\", this.onAddressChange.bind(this));\r\n\r\n    this.centralBindings.on(\"scanStart\", this.onScanStart.bind(this));\r\n    this.centralBindings.on(\"scanStop\", this.onScanStop.bind(this));\r\n    this.centralBindings.on(\"discover\", this.onDiscover.bind(this));\r\n    this.centralBindings.on(\"connect\", this.onConnect.bind(this));\r\n    this.centralBindings.on(\"disconnect\", this.onDisconnect.bind(this));\r\n    this.centralBindings.on(\"rssiUpdate\", this.onRssiUpdate.bind(this));\r\n    this.centralBindings.on(\r\n      \"servicesDiscover\",\r\n      this.onServicesDiscover.bind(this),\r\n    );\r\n    this.centralBindings.on(\r\n      \"includedServicesDiscover\",\r\n      this.onIncludedServicesDiscover.bind(this),\r\n    );\r\n    this.centralBindings.on(\r\n      \"characteristicsDiscover\",\r\n      this.onCharacteristicsDiscover.bind(this),\r\n    );\r\n\r\n    this.centralBindings.on(\"read\", this.onRead.bind(this));\r\n    this.centralBindings.on(\"write\", this.onWrite.bind(this));\r\n    this.centralBindings.on(\"broadcast\", this.onBroadcast.bind(this));\r\n    this.centralBindings.on(\"notify\", this.onNotify.bind(this));\r\n    this.centralBindings.on(\r\n      \"descriptorsDiscover\",\r\n      this.onDescriptorsDiscover.bind(this),\r\n    );\r\n    this.centralBindings.on(\"valueRead\", this.onValueRead.bind(this));\r\n    this.centralBindings.on(\"valueWrite\", this.onValueWrite.bind(this));\r\n    this.centralBindings.on(\"handleRead\", this.onHandleRead.bind(this));\r\n    this.centralBindings.on(\"handleWrite\", this.onHandleWrite.bind(this));\r\n    this.centralBindings.on(\"handleNotify\", this.onHandleNotify.bind(this));\r\n\r\n    this.peripheralBindings.on(\r\n      \"stateChange\",\r\n      this.onPeripheralStateChange.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"addressChange\",\r\n      this.onPeripheralAddressChange.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"platform\",\r\n      this.onPeripheralPlatform.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"advertisingStart\",\r\n      this.onPeripheralAdvertisingStart.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"advertisingStop\",\r\n      this.onPeripheralAdvertisingStop.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"servicesSet\",\r\n      this.onPeripheralServicesSet.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\"accept\", this.onPeripheralAccept.bind(this));\r\n    this.peripheralBindings.on(\r\n      \"mtuChange\",\r\n      this.onPeripheralMtuChange.bind(this),\r\n    );\r\n    this.peripheralBindings.on(\r\n      \"disconnect\",\r\n      this.onPeripheralDisconnect.bind(this),\r\n    );\r\n\r\n    this.peripheralBindings.on(\r\n      \"rssiUpdate\",\r\n      this.onPeripheralRssiUpdate.bind(this),\r\n    );\r\n  }\r\n}\r\n\r\nexport default ObnizBLE;\r\n"]}