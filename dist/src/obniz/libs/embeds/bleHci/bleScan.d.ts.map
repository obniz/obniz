{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleScan.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,GAAG,QAAQ,eAAe,CAAC,CAAC;AAC1C,OAAO,QAAQ,MAAM,OAAO,CAAC;AAE7B,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAGhC,MAAM,WAAW,aAAa;IAC5B,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC;IACf,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,WAAW,cAAc;IAC7B,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,SAAS,CAAC,EAAE,OAAO,CAAC;CACrB;AAED,cAAM,OAAO;IACJ,UAAU,EAAE,aAAa,CAAC;IAC1B,YAAY,EAAE,cAAc,CAAC;IAC7B,QAAQ,EAAE,QAAQ,CAAC;IACnB,OAAO,EAAE,OAAO,CAAC;IACjB,iBAAiB,EAAE,aAAa,EAAE,CAAC;IAC1C,OAAO,CAAC,aAAa,CAAC,CAAiB;gBAE3B,QAAQ,EAAE,QAAQ;IAUvB,KAAK,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,QAAQ,CAAC,EAAE,cAAc;IA+BvD,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,GAAG,OAAO,CAAC,aAAa,CAAC;IAuBrF,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAUvF,GAAG;IAKH,QAAQ,CAAC,UAAU,EAAE,GAAG;IAqBxB,QAAQ,CAAC,IAAI,EAAE,GAAG;IAElB,MAAM,CAAC,MAAM,EAAE,GAAG;IAGlB,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG;IAyBhD,iBAAiB;CAMzB;AAED,eAAe,OAAO,CAAC","file":"bleScan.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\r\nimport ObnizBLE from \"./ble\";\r\nimport BleHelper from \"./bleHelper\";\r\nimport BlePeripheral from \"./blePeripheral\";\r\nimport {UUID} from \"./bleTypes\";\r\nimport ObnizBLEHci from \"./hci\";\r\n\r\nexport interface BleScanTarget {\r\n  uuids?: UUID[];\r\n  localName?: string;\r\n}\r\n\r\nexport interface BleScanSetting {\r\n  duration?: number;\r\n  duplicate?: boolean;\r\n}\r\n\r\nclass BleScan {\r\n  public scanTarget: BleScanTarget;\r\n  public scanSettings: BleScanSetting;\r\n  public obnizBle: ObnizBLE;\r\n  public emitter: emitter;\r\n  public scanedPeripherals: BlePeripheral[];\r\n  private _timeoutTimer?: NodeJS.Timeout;\r\n\r\n  constructor(obnizBle: ObnizBLE) {\r\n    this.scanTarget = {};\r\n    this.scanSettings = {};\r\n    this.obnizBle = obnizBle;\r\n    this.emitter = new emitter();\r\n\r\n    this.scanedPeripherals = [];\r\n    this._timeoutTimer = undefined;\r\n  }\r\n\r\n  public start(target?: BleScanTarget, settings?: BleScanSetting) {\r\n    this.obnizBle.warningIfNotInitialize();\r\n\r\n    if (!settings) {\r\n      settings = {};\r\n    }\r\n    const timeout: number = settings.duration || 30;\r\n    settings.duplicate = !!settings.duplicate;\r\n    this.scanSettings = settings;\r\n    target = target || {};\r\n    this.scanTarget = target;\r\n    if (\r\n      this.scanTarget &&\r\n      this.scanTarget.uuids &&\r\n      Array.isArray(this.scanTarget.uuids)\r\n    ) {\r\n      this.scanTarget.uuids = this.scanTarget.uuids.map((elm: UUID) => {\r\n        return BleHelper.uuidFilter(elm);\r\n      });\r\n    }\r\n    this.scanedPeripherals = [];\r\n\r\n    this.obnizBle.centralBindings.startScanning(null, false);\r\n\r\n    this.clearTimeoutTimer();\r\n    this._timeoutTimer = setTimeout(() => {\r\n      this._timeoutTimer = undefined;\r\n      this.end();\r\n    }, timeout * 1000);\r\n  }\r\n\r\n  public startOneWait(target: BleScanTarget, settings: BleScanSetting): Promise<BlePeripheral> {\r\n    let state: any = 0;\r\n\r\n    return new Promise((resolve: any) => {\r\n      this.emitter.once(\"onfind\", (param: any) => {\r\n        if (state === 0) {\r\n          state = 1;\r\n          this.end();\r\n          resolve(param);\r\n        }\r\n      });\r\n\r\n      this.emitter.once(\"onfinish\", () => {\r\n        if (state === 0) {\r\n          state = 1;\r\n          resolve(null);\r\n        }\r\n      });\r\n\r\n      this.start(target, settings);\r\n    });\r\n  }\r\n\r\n  public startAllWait(target: BleScanTarget, settings: BleScanSetting): Promise<BlePeripheral[]> {\r\n    return new Promise((resolve: any) => {\r\n      this.emitter.once(\"onfinish\", () => {\r\n        resolve(this.scanedPeripherals);\r\n      });\r\n\r\n      this.start(target, settings);\r\n    });\r\n  }\r\n\r\n  public end() {\r\n    this.clearTimeoutTimer();\r\n    this.obnizBle.centralBindings.stopScanning();\r\n  }\r\n\r\n  public isTarget(peripheral: any) {\r\n    if (\r\n      this.scanTarget &&\r\n      this.scanTarget.localName &&\r\n      peripheral.localName !== this.scanTarget.localName\r\n    ) {\r\n      return false;\r\n    }\r\n    if (this.scanTarget && this.scanTarget.uuids) {\r\n      const uuids: any = peripheral.advertisementServiceUuids().map((e: any) => {\r\n        return BleHelper.uuidFilter(e);\r\n      });\r\n      for (const uuid of this.scanTarget.uuids) {\r\n        if (!uuids.includes(uuid)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public onfinish(data: any) {\r\n  } // dummy\r\n  public onfind(params: any) {\r\n  } // dummy\r\n\r\n  public notifyFromServer(notifyName: string, params: any) {\r\n    switch (notifyName) {\r\n      case \"onfind\": {\r\n        if (this.scanSettings.duplicate === false) {\r\n          // duplicate filter\r\n          if (this.scanedPeripherals.find((e: any) => e.address === params.address)) {\r\n            break;\r\n          }\r\n        }\r\n        if (this.isTarget(params)) {\r\n          this.scanedPeripherals.push(params);\r\n          this.emitter.emit(notifyName, params);\r\n          this.onfind(params);\r\n        }\r\n        break;\r\n      }\r\n      case \"onfinish\": {\r\n        this.clearTimeoutTimer();\r\n        this.emitter.emit(notifyName, this.scanedPeripherals);\r\n        this.onfinish(this.scanedPeripherals);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public clearTimeoutTimer() {\r\n    if (this._timeoutTimer) {\r\n      clearTimeout(this._timeoutTimer);\r\n      this._timeoutTimer = undefined;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BleScan;\r\n"]}