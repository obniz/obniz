{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleAttributeAbstract.ts"],"names":[],"mappings":"AAIA,cAAM,oBAAoB;IACjB,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,iBAAiB,EAAE,GAAG,CAAC;IACvB,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;gBAER,MAAM,EAAE,GAAG;IA2BhB,YAAY;IA8BnB,IAAI,aAAa,IAAI,GAAG,CAEvB;IAED,IAAI,YAAY,IAAI,MAAM,GAAG,IAAI,CAEhC;IAED,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAEM,QAAQ,CAAC,KAAK,EAAE,GAAG;IAWnB,QAAQ,CAAC,IAAI,EAAE,GAAG;IASlB,MAAM;IAeb;;OAEG;IAEI,IAAI;IAGJ,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,OAAO;IAGvC,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG;IAIxC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,GAAG;IAItC,QAAQ;IAaR,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAatC,aAAa,CAAC,IAAI,EAAE,GAAG;IAavB,eAAe,CAAC,IAAI,EAAE,GAAG;IAazB,kBAAkB;IAQlB,mBAAmB;IAQ1B;;OAEG;IACI,OAAO,CAAC,MAAM,EAAE,GAAG;IAGnB,MAAM,CAAC,IAAI,EAAE,GAAG;IAGhB,iBAAiB,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAGzC,gBAAgB,CAAC,OAAO,EAAE,GAAG;IAG7B,OAAO,CAAC,GAAG,EAAE,GAAG;IAIhB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAyBrD;AAED,eAAe,oBAAoB,CAAC","file":"bleAttributeAbstract.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport ObnizUtil from \"../../utils/util\";\nimport BleHelper from \"./bleHelper\";\n\nclass BleAttributeAbstract {\n  public uuid: any;\n  public parent: any;\n  public children: any;\n  public isRemote: any;\n  public discoverdOnRemote: any;\n  public data: any;\n  public emitter: any;\n\n  constructor(params: any) {\n    this.uuid = BleHelper.uuidFilter(params.uuid);\n    this.parent = null;\n    this.children = [];\n\n    this.isRemote = false;\n    this.discoverdOnRemote = false;\n\n    this.data = params.data || null;\n    if (!this.data && params.text) {\n      this.data = ObnizUtil.string2dataArray(params.text);\n    }\n    if (!this.data && params.value) {\n      this.data = [params.value];\n    }\n\n    if (params[this.childrenName!]) {\n      for (const child of params[this.childrenName!]) {\n        this.addChild(child);\n      }\n    }\n\n    this.setFunctions();\n\n    this.emitter = new emitter();\n  }\n\n  public setFunctions() {\n    let childrenName: any = this.childrenName;\n    if (childrenName) {\n      childrenName =\n        childrenName.charAt(0).toUpperCase() + childrenName.slice(1);\n      const childName: any = childrenName.slice(0, -1);\n\n      let funcName: string = \"add\" + childName;\n      (this as any)[funcName] = this.addChild;\n\n      funcName = \"get\" + childName;\n      (this as any)[funcName] = this.getChild;\n    }\n\n    const parentName: any = this.parentName;\n    if (parentName) {\n      Object.defineProperty(this, parentName, {\n        get() {\n          return this.parent;\n        }\n        ,\n        set(newValue: any) {\n          this.parent = newValue;\n        }\n        ,\n      })\n      ;\n    }\n  }\n\n  get childrenClass(): any {\n    return Object;\n  }\n\n  get childrenName(): string | null {\n    return null;\n  }\n\n  get parentName(): string | null {\n    return null;\n  }\n\n  public addChild(child: any) {\n    if (!(child instanceof this.childrenClass)) {\n      const childrenClass: any = this.childrenClass;\n      child = new childrenClass(child);\n    }\n    child.parent = this;\n\n    this.children.push(child);\n    return child;\n  }\n\n  public getChild(uuid: any) {\n    uuid = BleHelper.uuidFilter(uuid);\n    return this.children\n      .filter((element: any) => {\n        return BleHelper.uuidFilter(element.uuid) === uuid;\n      })\n      .shift();\n  }\n\n  public toJSON() {\n    const obj: any = {\n      uuid: BleHelper.uuidFilter(this.uuid),\n    };\n\n    if (this.childrenName) {\n      const key: any = this.childrenName;\n      obj[key] = this.children;\n    }\n    if (this.data) {\n      obj.data = this.data;\n    }\n    return obj;\n  }\n\n  /**\n   * WS COMMANDS\n   */\n\n  public read() {\n  }\n\n  public write(data: any, needResponse?: boolean) {\n  }\n\n  public writeNumber(val: any, needResponse?: any) {\n    this.write([val], needResponse);\n  }\n\n  public writeText(str: any, needResponse?: any) {\n    this.write(ObnizUtil.string2dataArray(str), needResponse);\n  }\n\n  public readWait() {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"onread\", (params: any) => {\n        if (params.result === \"success\") {\n          resolve(params.data);\n        } else {\n          reject(new Error(\"readWait failed\"));\n        }\n      });\n      this.read();\n    });\n  }\n\n  public writeWait(data: any, needResponse: any) {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"onwrite\", (params: any) => {\n        if (params.result === \"success\") {\n          resolve(true);\n        } else {\n          reject(new Error(\"writeWait failed\"));\n        }\n      });\n      this.write(data, needResponse);\n    });\n  }\n\n  public writeTextWait(data: any) {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"onwrite\", (params: any) => {\n        if (params.result === \"success\") {\n          resolve(true);\n        } else {\n          reject(new Error(\"writeTextWait failed\"));\n        }\n      });\n      this.writeText(data);\n    });\n  }\n\n  public writeNumberWait(data: any) {\n    return new Promise((resolve: any, reject: any) => {\n      this.emitter.once(\"onwrite\", (params: any) => {\n        if (params.result === \"success\") {\n          resolve(true);\n        } else {\n          reject(new Error(\"writeNumberWait failed\"));\n        }\n      });\n      this.writeNumber(data);\n    });\n  }\n\n  public readFromRemoteWait() {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"onreadfromremote\", () => {\n        resolve();\n      });\n    });\n  }\n\n  public writeFromRemoteWait() {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"onreadfromremote\", (params: any) => {\n        resolve(params.data);\n      });\n    });\n  }\n\n  /**\n   * CALLBACKS\n   */\n  public onwrite(result: any) {\n  }\n\n  public onread(data: any) {\n  }\n\n  public onwritefromremote(address: any, data: any) {\n  }\n\n  public onreadfromremote(address: any) {\n  }\n\n  public onerror(err: any) {\n    console.error(err.message);\n  }\n\n  public notifyFromServer(notifyName: any, params: any) {\n    this.emitter.emit(notifyName, params);\n    switch (notifyName) {\n      case \"onerror\": {\n        this.onerror(params);\n        break;\n      }\n      case \"onwrite\": {\n        this.onwrite(params.result);\n        break;\n      }\n      case \"onread\": {\n        this.onread(params.data);\n        break;\n      }\n      case \"onwritefromremote\": {\n        this.onwritefromremote(params.address, params.data);\n        break;\n      }\n      case \"onreadfromremote\": {\n        this.onreadfromremote(params.address);\n        break;\n      }\n    }\n  }\n}\n\nexport default BleAttributeAbstract;\n"]}