{"version":3,"sources":["../src/obniz/libs/embeds/switch.ts"],"names":[],"mappings":"AACA,aAAK,mBAAmB,GAAG,CAAC,MAAM,EAAE,OAAO,KAAK,IAAI,CAAC;AAErD,cAAM,WAAW;IACR,KAAK,EAAE,GAAG,CAAC;IACX,SAAS,EAAG,mBAAmB,EAAE,CAAC;IAClC,oBAAoB,EAAE,GAAG,CAAC;IAC1B,KAAK,EAAE,GAAG,CAAC;IACX,QAAQ,EAAE,GAAG,CAAC;gBAET,KAAK,EAAE,GAAG;IAKf,MAAM;IAMN,WAAW,CAAC,QAAQ,EAAE,mBAAmB;IAMzC,OAAO;IAUP,SAAS,CAAC,SAAS,EAAE,OAAO;IAa5B,QAAQ,CAAC,GAAG,EAAE,GAAG;CAYzB;AAED,eAAe,WAAW,CAAC","file":"switch.d.ts","sourcesContent":["\ntype ObnizSwitchCallback = (result: boolean) => void;\n\nclass ObnizSwitch {\n  public Obniz: any;\n  public observers!: ObnizSwitchCallback[];\n  public onChangeForStateWait: any;\n  public state: any;\n  public onchange: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.observers = [];\n    this.onChangeForStateWait = () => {\n    };\n  }\n\n  public addObserver(callback: ObnizSwitchCallback) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public getWait() {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      const obj: any = {};\n      obj.switch = \"get\";\n      self.Obniz.send(obj);\n      self.addObserver(resolve);\n    });\n  }\n\n  public stateWait(isPressed: boolean) {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.onChangeForStateWait = (pressed: any) => {\n        if (isPressed === pressed) {\n          self.onChangeForStateWait = () => {\n          };\n          resolve();\n        }\n      };\n    });\n  }\n\n  public notified(obj: any) {\n    this.state = obj.state;\n    if (this.onchange) {\n      this.onchange(this.state);\n    }\n    this.onChangeForStateWait(this.state);\n\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(this.state);\n    }\n  }\n}\n\nexport default ObnizSwitch;\n"]}