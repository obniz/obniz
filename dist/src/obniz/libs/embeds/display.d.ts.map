{"version":3,"sources":["../src/obniz/libs/embeds/display.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,cAAM,OAAO;IACJ,KAAK,EAAE,KAAK,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;IACf,SAAS,EAAG,OAAO,CAAC;IACpB,QAAQ,EAAG,MAAM,CAAC;IAClB,YAAY,EAAE,GAAG,CAAC;IACzB,OAAO,CAAC,OAAO,CAAC,CAAoB;IACpC,OAAO,CAAC,IAAI,CAA4B;gBAE5B,KAAK,EAAE,GAAG;IASf,MAAM;IAKN,sBAAsB;IAUtB,eAAe;IAuCf,IAAI;IAOJ,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM;IAYvC,KAAK;IAmBL,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM;;;;IAWxB,KAAK,CAAC,IAAI,EAAE,MAAM;IAelB,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;IAavD,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IAc3E,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IAgBzD,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IAalD,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE;IAQlB,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAY3D,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG;IAiBzC,KAAK,CAAC,GAAG,EAAE,wBAAwB;IAsBnC,IAAI,CAAC,GAAG,EAAE,wBAAwB;IAMlC,OAAO,CAAC,SAAS,EAAE,OAAO;CAOlC;AAED,eAAe,OAAO,CAAC","file":"display.d.ts","sourcesContent":["import Obniz from \"../../index\";\n\nclass Display {\n  public Obniz: Obniz;\n  public width: number;\n  public height: number;\n  public autoFlush!: boolean;\n  public fontSize!: number;\n  public createCanvas: any;\n  private _canvas?: HTMLCanvasElement;\n  private _pos!: { x: number, y: number };\n\n  constructor(obniz: any) {\n    this.Obniz = obniz;\n    this.width = 128;\n    this.height = 64;\n\n    this._canvas = undefined;\n    this._reset();\n  }\n\n  public _reset() {\n    this._pos = {x: 0, y: 0};\n    this.autoFlush = true;\n  }\n\n  public warnCanvasAvailability() {\n    if (this.Obniz.isNode) {\n      throw new Error(\n        \"obniz.js require node-canvas to draw rich contents. see more detail on docs\",\n      );\n    } else {\n      throw new Error(\"obniz.js cant create canvas element to body\");\n    }\n  }\n\n  public _preparedCanvas() {\n    if (this._canvas) {\n      return this._canvas;\n    }\n    if (this.Obniz.isNode) {\n      try {\n        const {createCanvas} = require(\"canvas\");\n        this._canvas = createCanvas(this.width, this.height);\n      } catch (e) {\n        // this.warnCanvasAvailability();\n        return null;\n      }\n    } else {\n      const identifier: any = \"obnizcanvas-\" + this.Obniz.id;\n      let canvas: any = document.getElementById(identifier);\n      if (!canvas) {\n        canvas = document.createElement(\"canvas\");\n        canvas.setAttribute(\"id\", identifier);\n        canvas.style.visibility = \"hidden\";\n        canvas.width = this.width;\n        canvas.height = this.height;\n        canvas.style[\"-webkit-font-smoothing\"] = \"none\";\n        const body: any = document.getElementsByTagName(\"body\")[0];\n        body.appendChild(canvas);\n      }\n      this._canvas = canvas;\n    }\n    const ctx: any = this._canvas!.getContext(\"2d\");\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, this.width, this.height);\n    ctx.fillStyle = \"#FFF\";\n    ctx.strokeStyle = \"#FFF\";\n    this._pos.x = 0;\n    this._pos.y = 0;\n    this.fontSize = 16;\n    ctx.font = `${this.fontSize}px Arial`;\n    return this._canvas;\n  }\n\n  public _ctx() {\n    const canvas: any = this._preparedCanvas();\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n  }\n\n  public font(font: string | null, size?: number) {\n    const ctx: any = this._ctx();\n    if (typeof size !== \"number\") {\n      size = 16;\n    }\n    if (typeof font !== \"string\") {\n      font = \"Arial\";\n    }\n    this.fontSize = size;\n    ctx.font = \"\" + +\" \" + size + \"px \" + font;\n  }\n\n  public clear() {\n    const ctx: any = this._ctx();\n    this._pos.x = 0;\n    this._pos.y = 0;\n    if (ctx) {\n      ctx.fillStyle = \"#000\";\n      ctx.fillRect(0, 0, this.width, this.height);\n      ctx.fillStyle = \"#FFF\";\n      ctx.strokeStyle = \"#FFF\";\n      this.draw(ctx);\n    } else {\n      const obj: any = {};\n      obj.display = {\n        clear: true,\n      };\n      this.Obniz.send(obj);\n    }\n  }\n\n  public pos(x: number, y: number) {\n    this._ctx(); // crete first\n    if (typeof x === \"number\") {\n      this._pos.x = x;\n    }\n    if (typeof y === \"number\") {\n      this._pos.y = y;\n    }\n    return this._pos;\n  }\n\n  public print(text: string) {\n    const ctx: any = this._ctx();\n    if (ctx) {\n      ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);\n      this.draw(ctx);\n      this._pos.y += this.fontSize;\n    } else {\n      const obj: any = {};\n      obj.display = {\n        text: \"\" + text,\n      };\n      this.Obniz.send(obj);\n    }\n  }\n\n  public line(x_0: number, y_0: number, x_1: number, y_1: number) {\n    const ctx: any = this._ctx();\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x_0, y_0);\n      ctx.lineTo(x_1, y_1);\n      ctx.stroke();\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public rect(x: number, y: number, width: number, height: number, mustFill: boolean) {\n    const ctx: any = this._ctx();\n    if (ctx) {\n      if (mustFill) {\n        ctx.fillRect(x, y, width, height);\n      } else {\n        ctx.strokeRect(x, y, width, height);\n      }\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public circle(x: number, y: number, r: number, mustFill: boolean) {\n    const ctx: any = this._ctx();\n    if (ctx) {\n      ctx.beginPath();\n      ctx.arc(x, y, r, 0, Math.PI * 2);\n      if (mustFill) {\n        ctx.fill();\n      } else {\n        ctx.stroke();\n      }\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public qr(text: string, correction: \"L\" | \"M\" | \"Q\" | \"H\") {\n    const obj: any = {};\n    obj.display = {\n      qr: {\n        text,\n      },\n    };\n    if (correction) {\n      obj.display.qr.correction = correction;\n    }\n    this.Obniz.send(obj);\n  }\n\n  public raw(data: number[]) {\n    const obj: any = {};\n    obj.display = {\n      raw: data,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public setPinName(io: number, moduleName: string, funcName: string) {\n    const obj: any = {};\n    obj.display = {};\n    obj.display.pin_assign = {};\n    obj.display.pin_assign[io] = {\n      module_name: moduleName,\n      pin_name: funcName,\n    };\n\n    this.Obniz.send(obj);\n  }\n\n  public setPinNames(moduleName: string, data: any) {\n    const obj: any = {};\n    obj.display = {};\n    obj.display.pin_assign = {};\n    let noAssignee: any = true;\n    for (const key in data) {\n      noAssignee = false;\n      obj.display.pin_assign[key] = {\n        module_name: moduleName,\n        pin_name: data[key],\n      };\n    }\n    if (!noAssignee) {\n      this.Obniz.send(obj);\n    }\n  }\n\n  public _draw(ctx: CanvasRenderingContext2D) {\n    const stride: any = this.width / 8;\n    const vram: any = new Array(stride * 64);\n    const imageData: any = ctx.getImageData(0, 0, this.width, this.height);\n    const data: any = imageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const brightness: any = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\n      const index: any = Math.floor(i / 4);\n      const line: any = Math.floor(index / this.width);\n      const col: any = Math.floor((index - line * this.width) / 8);\n      const bits: any = Math.floor(index - line * this.width) % 8;\n      if (bits === 0) {\n        vram[line * stride + col] = 0x00;\n      }\n      if (brightness > 0x7f) {\n        vram[line * stride + col] |= 0x80 >> bits;\n      }\n    }\n    this.raw(vram);\n  }\n\n  public draw(ctx: CanvasRenderingContext2D) {\n    if (this.autoFlush) {\n      this._draw(ctx);\n    }\n  }\n\n  public drawing(autoFlush: boolean) {\n    this.autoFlush = !!autoFlush;\n    const ctx: any = this._ctx();\n    if (ctx) {\n      this.draw(ctx);\n    }\n  }\n}\n\nexport default Display;\n"]}