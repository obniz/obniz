{"version":3,"sources":["../src/obniz/libs/embeds/switch.ts"],"names":[],"mappings":";;AAGA,MAAM,WAAW;IAOf,YAAY,KAAU;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,oBAAoB,GAAG,GAAG,EAAE;QACjC,CAAC,CAAC;IACJ,CAAC;IAEM,WAAW,CAAC,QAA6B;QAC9C,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;IACH,CAAC;IAEM,OAAO;QACZ,MAAM,IAAI,GAAQ,IAAI,CAAC;QACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC/C,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,SAAkB;QACjC,MAAM,IAAI,GAAQ,IAAI,CAAC;QACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,oBAAoB,GAAG,CAAC,OAAY,EAAE,EAAE;gBAC3C,IAAI,SAAS,KAAK,OAAO,EAAE;oBACzB,IAAI,CAAC,oBAAoB,GAAG,GAAG,EAAE;oBACjC,CAAC,CAAC;oBACF,OAAO,EAAE,CAAC;iBACX;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtC,MAAM,QAAQ,GAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC7C,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;IACH,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","file":"switch.js","sourcesContent":["\ntype ObnizSwitchCallback = (result: boolean) => void;\n\nclass ObnizSwitch {\n  public Obniz: any;\n  public observers!: ObnizSwitchCallback[];\n  public onChangeForStateWait: any;\n  public state: any;\n  public onchange: any;\n\n  constructor(Obniz: any) {\n    this.Obniz = Obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.observers = [];\n    this.onChangeForStateWait = () => {\n    };\n  }\n\n  public addObserver(callback: ObnizSwitchCallback) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public getWait() {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      const obj: any = {};\n      obj.switch = \"get\";\n      self.Obniz.send(obj);\n      self.addObserver(resolve);\n    });\n  }\n\n  public stateWait(isPressed: boolean) {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.onChangeForStateWait = (pressed: any) => {\n        if (isPressed === pressed) {\n          self.onChangeForStateWait = () => {\n          };\n          resolve();\n        }\n      };\n    });\n  }\n\n  public notified(obj: any) {\n    this.state = obj.state;\n    if (this.onchange) {\n      this.onchange(this.state);\n    }\n    this.onChangeForStateWait(this.state);\n\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(this.state);\n    }\n  }\n}\n\nexport default ObnizSwitch;\n"]}