{"version":3,"sources":["../src/obniz/libs/measurements/measure.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAGhC,UAAU,kBAAkB;IAC1B,IAAI,EAAE,OAAO,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,aAAK,uBAAuB,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;AAExE,UAAU,mBAAmB;IAC3B,UAAU,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,UAAU,GAAG,UAAU,CAAC;IACjC,aAAa,EAAE,MAAM,CAAC;IACtB,SAAS,EAAE,MAAM,CAAC;IAClB,eAAe,EAAE,MAAM,CAAC;IACxB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,uBAAuB,KAAK,IAAI,CAAC;CACvD;AAED,cAAM,YAAY;IACT,KAAK,EAAE,KAAK,CAAC;IACb,SAAS,EAAG,KAAK,CAAC,CAAC,KAAK,EAAE,uBAAuB,KAAK,IAAI,CAAC,CAAC;IAC5D,MAAM,CAAC,EAAE,mBAAmB,CAAC;gBAExB,KAAK,EAAE,KAAK;IAKjB,MAAM;IAIN,IAAI,CAAC,MAAM,EAAE,mBAAmB;IA4ChC,QAAQ,CAAC,GAAG,EAAE,GAAG;CAMzB;AAED,eAAe,YAAY,CAAC","file":"measure.d.ts","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\n\ninterface ObnizMeasureResult {\n  edge: boolean;\n  timing: number;\n}\n\ntype ObnizMeasureResultArray = [ObnizMeasureResult, ObnizMeasureResult];\n\ninterface ObnizMeasureOptions {\n  \"io_pulse\": number;\n  \"pulse\": \"positive\" | \"negative\";\n  \"pulse_width\": number;\n  \"io_echo\": number;\n  \"measure_edges\": number;\n  \"timeout\"?: number;\n  \"callback\"?: (edges: ObnizMeasureResultArray) => void;\n}\n\nclass ObnizMeasure {\n  public obniz: Obniz;\n  public observers!: Array<(edges: ObnizMeasureResultArray) => void>;\n  public params?: ObnizMeasureOptions;\n\n  constructor(obniz: Obniz) {\n    this.obniz = obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.observers = [];\n  }\n\n  public echo(params: ObnizMeasureOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\n      \"io_pulse\",\n      \"pulse\",\n      \"pulse_width\",\n      \"io_echo\",\n      \"measure_edges\",\n    ]);\n    if (err) {\n      throw new Error(\n        \"Measure start param '\" + err + \"' required, but not found \",\n      );\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"io_pulse\",\n      \"pulse\",\n      \"pulse_width\",\n      \"io_echo\",\n      \"measure_edges\",\n      \"timeout\",\n      \"callback\",\n    ]) as ObnizMeasureOptions;\n\n    const echo: any = {};\n    echo.io_pulse = this.params.io_pulse;\n    echo.pulse = this.params.pulse;\n    echo.pulse_width = this.params.pulse_width;\n    echo.io_echo = this.params.io_echo;\n    echo.measure_edges = this.params.measure_edges;\n    if (typeof this.params.timeout === \"number\") {\n      echo.timeout = this.params.timeout;\n    }\n\n    this.obniz.send({\n      measure: {\n        echo,\n      },\n    });\n\n    if (this.params.callback) {\n      this.observers.push(this.params.callback);\n    }\n  }\n\n  public notified(obj: any) {\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(obj.echo);\n    }\n  }\n}\n\nexport default ObnizMeasure;\n"]}