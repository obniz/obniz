{"version":3,"sources":["../src/obniz/libs/measurements/measure.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAGhC,UAAU,kBAAkB;IAC1B,IAAI,EAAE,OAAO,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,aAAK,uBAAuB,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;AAExE,UAAU,mBAAmB;IAC3B,UAAU,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,UAAU,GAAG,UAAU,CAAC;IACjC,aAAa,EAAE,MAAM,CAAC;IACtB,SAAS,EAAE,MAAM,CAAC;IAClB,eAAe,EAAE,MAAM,CAAC;IACxB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,uBAAuB,KAAK,IAAI,CAAC;CACvD;AAED,cAAM,YAAY;IACT,KAAK,EAAE,KAAK,CAAC;IACb,SAAS,EAAG,KAAK,CAAC,CAAC,KAAK,EAAE,uBAAuB,KAAK,IAAI,CAAC,CAAC;IAC5D,MAAM,CAAC,EAAE,mBAAmB,CAAC;gBAExB,KAAK,EAAE,KAAK;IAKjB,MAAM;IAIN,IAAI,CAAC,MAAM,EAAE,mBAAmB;IA4ChC,QAAQ,CAAC,GAAG,EAAE,GAAG;CAMzB;AAED,eAAe,YAAY,CAAC","file":"measure.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\n\r\ninterface ObnizMeasureResult {\r\n  edge: boolean;\r\n  timing: number;\r\n}\r\n\r\ntype ObnizMeasureResultArray = [ObnizMeasureResult, ObnizMeasureResult];\r\n\r\ninterface ObnizMeasureOptions {\r\n  \"io_pulse\": number;\r\n  \"pulse\": \"positive\" | \"negative\";\r\n  \"pulse_width\": number;\r\n  \"io_echo\": number;\r\n  \"measure_edges\": number;\r\n  \"timeout\"?: number;\r\n  \"callback\"?: (edges: ObnizMeasureResultArray) => void;\r\n}\r\n\r\nclass ObnizMeasure {\r\n  public obniz: Obniz;\r\n  public observers!: Array<(edges: ObnizMeasureResultArray) => void>;\r\n  public params?: ObnizMeasureOptions;\r\n\r\n  constructor(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.observers = [];\r\n  }\r\n\r\n  public echo(params: ObnizMeasureOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\r\n      \"io_pulse\",\r\n      \"pulse\",\r\n      \"pulse_width\",\r\n      \"io_echo\",\r\n      \"measure_edges\",\r\n    ]);\r\n    if (err) {\r\n      throw new Error(\r\n        \"Measure start param '\" + err + \"' required, but not found \",\r\n      );\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"io_pulse\",\r\n      \"pulse\",\r\n      \"pulse_width\",\r\n      \"io_echo\",\r\n      \"measure_edges\",\r\n      \"timeout\",\r\n      \"callback\",\r\n    ]) as ObnizMeasureOptions;\r\n\r\n    const echo: any = {};\r\n    echo.io_pulse = this.params.io_pulse;\r\n    echo.pulse = this.params.pulse;\r\n    echo.pulse_width = this.params.pulse_width;\r\n    echo.io_echo = this.params.io_echo;\r\n    echo.measure_edges = this.params.measure_edges;\r\n    if (typeof this.params.timeout === \"number\") {\r\n      echo.timeout = this.params.timeout;\r\n    }\r\n\r\n    this.obniz.send({\r\n      measure: {\r\n        echo,\r\n      },\r\n    });\r\n\r\n    if (this.params.callback) {\r\n      this.observers.push(this.params.callback);\r\n    }\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    const callback: any = this.observers.shift();\r\n    if (callback) {\r\n      callback(obj.echo);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ObnizMeasure;\r\n"]}