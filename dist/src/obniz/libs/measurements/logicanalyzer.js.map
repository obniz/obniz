{"version":3,"sources":["../src/obniz/libs/measurements/logicanalyzer.ts"],"names":[],"mappings":";;;;;AACA,yDAAsC;AAatC,MAAM,aAAa;IAMjB,YAAY,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,MAAsD;QACjE,MAAM,GAAG,GAAQ,cAAS,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACjF,IAAI,GAAG,EAAE;YACP,MAAM,IAAI,KAAK,CACb,6BAA6B,GAAG,GAAG,GAAG,4BAA4B,CACnE,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG,cAAS,CAAC,UAAU,CAAC,MAAM,EAAE;YACzC,IAAI;YACJ,UAAU;YACV,UAAU;YACV,cAAc;YACd,qBAAqB;SACtB,CAAC,CAAC;QAEH,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,cAAc,GAAG;YACnB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACpB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YAC9B,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;SAC/B,CAAC;QACF,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,CAAC,EAAE;YACvC,GAAG,CAAC,cAAc,CAAC,OAAO,GAAG;gBAC3B,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY;gBACjC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB;aACzC,CAAC;SACH;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAEM,GAAG;QACR,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aACpB;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC9B;QACD,OAAO;IACT,CAAC;CACF;AAED,kBAAe,aAAa,CAAC","file":"logicanalyzer.js","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\n\r\ninterface LogicAnalyzerOptions {\r\n  \"io\": number;\r\n  \"interval\": number;\r\n  \"duration\": number;\r\n}\r\n\r\ninterface LogicAnalyzerOptionsExt extends LogicAnalyzerOptions {\r\n  \"triggerValue\": boolean;\r\n  \"triggerValueSamples\": number;\r\n}\r\n\r\nclass LogicAnalyzer {\r\n  public obniz: Obniz;\r\n  public onmeasured?: (array: number[]) => void;\r\n  public params: any;\r\n  public measured?: number[];\r\n\r\n  constructor(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.onmeasured = undefined;\r\n  }\r\n\r\n  public start(params: LogicAnalyzerOptions | LogicAnalyzerOptionsExt) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\", \"interval\", \"duration\"]);\r\n    if (err) {\r\n      throw new Error(\r\n        \"LogicAnalyzer start param '\" + err + \"' required, but not found \",\r\n      );\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"io\",\r\n      \"interval\",\r\n      \"duration\",\r\n      \"triggerValue\",\r\n      \"triggerValueSamples\",\r\n    ]);\r\n\r\n    const obj: any = {};\r\n    obj.logic_analyzer = {\r\n      io: [this.params.io],\r\n      interval: this.params.interval,\r\n      duration: this.params.duration,\r\n    };\r\n    if (this.params.triggerValueSamples > 0) {\r\n      obj.logic_analyzer.trigger = {\r\n        value: !!this.params.triggerValue,\r\n        samples: this.params.triggerValueSamples,\r\n      };\r\n    }\r\n\r\n    this.obniz.send(obj);\r\n    return;\r\n  }\r\n\r\n  public end() {\r\n    const obj: any = {};\r\n    obj.logic_analyzer = null;\r\n    this.obniz.send(obj);\r\n    return;\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (this.onmeasured) {\r\n      this.onmeasured(obj.data);\r\n    } else {\r\n      if (!this.measured) {\r\n        this.measured = [];\r\n      }\r\n      this.measured.push(obj.data);\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nexport default LogicAnalyzer;\r\n"]}