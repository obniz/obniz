{"version":3,"sources":["../src/obniz/libs/measurements/logicanalyzer.ts"],"names":[],"mappings":";;;;;AACA,yDAAsC;AAatC,MAAM,aAAa;IAMjB,YAAY,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,MAAsD;QACjE,MAAM,GAAG,GAAQ,cAAS,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACjF,IAAI,GAAG,EAAE;YACP,MAAM,IAAI,KAAK,CACb,6BAA6B,GAAG,GAAG,GAAG,4BAA4B,CACnE,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG,cAAS,CAAC,UAAU,CAAC,MAAM,EAAE;YACzC,IAAI;YACJ,UAAU;YACV,UAAU;YACV,cAAc;YACd,qBAAqB;SACtB,CAAC,CAAC;QAEH,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,cAAc,GAAG;YACnB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACpB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YAC9B,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;SAC/B,CAAC;QACF,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,CAAC,EAAE;YACvC,GAAG,CAAC,cAAc,CAAC,OAAO,GAAG;gBAC3B,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY;gBACjC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB;aACzC,CAAC;SACH;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAEM,GAAG;QACR,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aACpB;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC9B;QACD,OAAO;IACT,CAAC;CACF;AAED,kBAAe,aAAa,CAAC","file":"logicanalyzer.js","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\n\ninterface LogicAnalyzerOptions {\n  \"io\": number;\n  \"interval\": number;\n  \"duration\": number;\n}\n\ninterface LogicAnalyzerOptionsExt extends LogicAnalyzerOptions {\n  \"triggerValue\": boolean;\n  \"triggerValueSamples\": number;\n}\n\nclass LogicAnalyzer {\n  public obniz: Obniz;\n  public onmeasured?: (array: number[]) => void;\n  public params: any;\n  public measured?: number[];\n\n  constructor(obniz: Obniz) {\n    this.obniz = obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.onmeasured = undefined;\n  }\n\n  public start(params: LogicAnalyzerOptions | LogicAnalyzerOptionsExt) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\", \"interval\", \"duration\"]);\n    if (err) {\n      throw new Error(\n        \"LogicAnalyzer start param '\" + err + \"' required, but not found \",\n      );\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"io\",\n      \"interval\",\n      \"duration\",\n      \"triggerValue\",\n      \"triggerValueSamples\",\n    ]);\n\n    const obj: any = {};\n    obj.logic_analyzer = {\n      io: [this.params.io],\n      interval: this.params.interval,\n      duration: this.params.duration,\n    };\n    if (this.params.triggerValueSamples > 0) {\n      obj.logic_analyzer.trigger = {\n        value: !!this.params.triggerValue,\n        samples: this.params.triggerValueSamples,\n      };\n    }\n\n    this.obniz.send(obj);\n    return;\n  }\n\n  public end() {\n    const obj: any = {};\n    obj.logic_analyzer = null;\n    this.obniz.send(obj);\n    return;\n  }\n\n  public notified(obj: any) {\n    if (this.onmeasured) {\n      this.onmeasured(obj.data);\n    } else {\n      if (!this.measured) {\n        this.measured = [];\n      }\n      this.measured.push(obj.data);\n    }\n    return;\n  }\n}\n\nexport default LogicAnalyzer;\n"]}