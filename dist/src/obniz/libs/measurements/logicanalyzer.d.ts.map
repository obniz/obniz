{"version":3,"sources":["../src/obniz/libs/measurements/logicanalyzer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAGhC,UAAU,oBAAoB;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,UAAU,EAAE,MAAM,CAAC;IACnB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,UAAU,uBAAwB,SAAQ,oBAAoB;IAC5D,cAAc,EAAE,OAAO,CAAC;IACxB,qBAAqB,EAAE,MAAM,CAAC;CAC/B;AAED,cAAM,aAAa;IACV,KAAK,EAAE,KAAK,CAAC;IACb,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;IACvC,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;gBAEf,KAAK,EAAE,KAAK;IAKjB,MAAM;IAIN,KAAK,CAAC,MAAM,EAAE,oBAAoB,GAAG,uBAAuB;IAgC5D,GAAG;IAOH,QAAQ,CAAC,GAAG,EAAE,GAAG;CAWzB;AAED,eAAe,aAAa,CAAC","file":"logicanalyzer.d.ts","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\n\ninterface LogicAnalyzerOptions {\n  \"io\": number;\n  \"interval\": number;\n  \"duration\": number;\n}\n\ninterface LogicAnalyzerOptionsExt extends LogicAnalyzerOptions {\n  \"triggerValue\": boolean;\n  \"triggerValueSamples\": number;\n}\n\nclass LogicAnalyzer {\n  public obniz: Obniz;\n  public onmeasured?: (array: number[]) => void;\n  public params: any;\n  public measured?: number[];\n\n  constructor(obniz: Obniz) {\n    this.obniz = obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.onmeasured = undefined;\n  }\n\n  public start(params: LogicAnalyzerOptions | LogicAnalyzerOptionsExt) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\", \"interval\", \"duration\"]);\n    if (err) {\n      throw new Error(\n        \"LogicAnalyzer start param '\" + err + \"' required, but not found \",\n      );\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"io\",\n      \"interval\",\n      \"duration\",\n      \"triggerValue\",\n      \"triggerValueSamples\",\n    ]);\n\n    const obj: any = {};\n    obj.logic_analyzer = {\n      io: [this.params.io],\n      interval: this.params.interval,\n      duration: this.params.duration,\n    };\n    if (this.params.triggerValueSamples > 0) {\n      obj.logic_analyzer.trigger = {\n        value: !!this.params.triggerValue,\n        samples: this.params.triggerValueSamples,\n      };\n    }\n\n    this.obniz.send(obj);\n    return;\n  }\n\n  public end() {\n    const obj: any = {};\n    obj.logic_analyzer = null;\n    this.obniz.send(obj);\n    return;\n  }\n\n  public notified(obj: any) {\n    if (this.onmeasured) {\n      this.onmeasured(obj.data);\n    } else {\n      if (!this.measured) {\n        this.measured = [];\n      }\n      this.measured.push(obj.data);\n    }\n    return;\n  }\n}\n\nexport default LogicAnalyzer;\n"]}