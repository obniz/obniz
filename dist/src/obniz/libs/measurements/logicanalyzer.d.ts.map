{"version":3,"sources":["../src/obniz/libs/measurements/logicanalyzer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAGhC,UAAU,oBAAoB;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,UAAU,EAAE,MAAM,CAAC;IACnB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,UAAU,uBAAwB,SAAQ,oBAAoB;IAC5D,cAAc,EAAE,OAAO,CAAC;IACxB,qBAAqB,EAAE,MAAM,CAAC;CAC/B;AAED,cAAM,aAAa;IACV,KAAK,EAAE,KAAK,CAAC;IACb,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;IACvC,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;gBAEf,KAAK,EAAE,KAAK;IAKjB,MAAM;IAIN,KAAK,CAAC,MAAM,EAAE,oBAAoB,GAAG,uBAAuB;IAgC5D,GAAG;IAOH,QAAQ,CAAC,GAAG,EAAE,GAAG;CAWzB;AAED,eAAe,aAAa,CAAC","file":"logicanalyzer.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\n\r\ninterface LogicAnalyzerOptions {\r\n  \"io\": number;\r\n  \"interval\": number;\r\n  \"duration\": number;\r\n}\r\n\r\ninterface LogicAnalyzerOptionsExt extends LogicAnalyzerOptions {\r\n  \"triggerValue\": boolean;\r\n  \"triggerValueSamples\": number;\r\n}\r\n\r\nclass LogicAnalyzer {\r\n  public obniz: Obniz;\r\n  public onmeasured?: (array: number[]) => void;\r\n  public params: any;\r\n  public measured?: number[];\r\n\r\n  constructor(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.onmeasured = undefined;\r\n  }\r\n\r\n  public start(params: LogicAnalyzerOptions | LogicAnalyzerOptionsExt) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\", \"interval\", \"duration\"]);\r\n    if (err) {\r\n      throw new Error(\r\n        \"LogicAnalyzer start param '\" + err + \"' required, but not found \",\r\n      );\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"io\",\r\n      \"interval\",\r\n      \"duration\",\r\n      \"triggerValue\",\r\n      \"triggerValueSamples\",\r\n    ]);\r\n\r\n    const obj: any = {};\r\n    obj.logic_analyzer = {\r\n      io: [this.params.io],\r\n      interval: this.params.interval,\r\n      duration: this.params.duration,\r\n    };\r\n    if (this.params.triggerValueSamples > 0) {\r\n      obj.logic_analyzer.trigger = {\r\n        value: !!this.params.triggerValue,\r\n        samples: this.params.triggerValueSamples,\r\n      };\r\n    }\r\n\r\n    this.obniz.send(obj);\r\n    return;\r\n  }\r\n\r\n  public end() {\r\n    const obj: any = {};\r\n    obj.logic_analyzer = null;\r\n    this.obniz.send(obj);\r\n    return;\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (this.onmeasured) {\r\n      this.onmeasured(obj.data);\r\n    } else {\r\n      if (!this.measured) {\r\n        this.measured = [];\r\n      }\r\n      this.measured.push(obj.data);\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nexport default LogicAnalyzer;\r\n"]}