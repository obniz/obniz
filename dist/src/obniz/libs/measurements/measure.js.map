{"version":3,"sources":["../src/obniz/libs/measurements/measure.ts"],"names":[],"mappings":";;;;;AACA,yDAAsC;AAmBtC,MAAM,YAAY;IAKhB,YAAY,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,IAAI,CAAC,MAA2B;QACrC,MAAM,GAAG,GAAQ,cAAS,CAAC,aAAa,CAAC,MAAM,EAAE;YAC/C,UAAU;YACV,OAAO;YACP,aAAa;YACb,SAAS;YACT,eAAe;SAChB,CAAC,CAAC;QACH,IAAI,GAAG,EAAE;YACP,MAAM,IAAI,KAAK,CACb,uBAAuB,GAAG,GAAG,GAAG,4BAA4B,CAC7D,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG,cAAS,CAAC,UAAU,CAAC,MAAM,EAAE;YACzC,UAAU;YACV,OAAO;YACP,aAAa;YACb,SAAS;YACT,eAAe;YACf,SAAS;YACT,UAAU;SACX,CAAwB,CAAC;QAE1B,MAAM,IAAI,GAAQ,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QAC/C,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;YAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;SACpC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,OAAO,EAAE;gBACP,IAAI;aACL;SACF,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC3C;IACH,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,MAAM,QAAQ,GAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC7C,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACpB;IACH,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","file":"measure.js","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\n\r\ninterface ObnizMeasureResult {\r\n  edge: boolean;\r\n  timing: number;\r\n}\r\n\r\ntype ObnizMeasureResultArray = [ObnizMeasureResult, ObnizMeasureResult];\r\n\r\ninterface ObnizMeasureOptions {\r\n  \"io_pulse\": number;\r\n  \"pulse\": \"positive\" | \"negative\";\r\n  \"pulse_width\": number;\r\n  \"io_echo\": number;\r\n  \"measure_edges\": number;\r\n  \"timeout\"?: number;\r\n  \"callback\"?: (edges: ObnizMeasureResultArray) => void;\r\n}\r\n\r\nclass ObnizMeasure {\r\n  public obniz: Obniz;\r\n  public observers!: Array<(edges: ObnizMeasureResultArray) => void>;\r\n  public params?: ObnizMeasureOptions;\r\n\r\n  constructor(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.observers = [];\r\n  }\r\n\r\n  public echo(params: ObnizMeasureOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\r\n      \"io_pulse\",\r\n      \"pulse\",\r\n      \"pulse_width\",\r\n      \"io_echo\",\r\n      \"measure_edges\",\r\n    ]);\r\n    if (err) {\r\n      throw new Error(\r\n        \"Measure start param '\" + err + \"' required, but not found \",\r\n      );\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"io_pulse\",\r\n      \"pulse\",\r\n      \"pulse_width\",\r\n      \"io_echo\",\r\n      \"measure_edges\",\r\n      \"timeout\",\r\n      \"callback\",\r\n    ]) as ObnizMeasureOptions;\r\n\r\n    const echo: any = {};\r\n    echo.io_pulse = this.params.io_pulse;\r\n    echo.pulse = this.params.pulse;\r\n    echo.pulse_width = this.params.pulse_width;\r\n    echo.io_echo = this.params.io_echo;\r\n    echo.measure_edges = this.params.measure_edges;\r\n    if (typeof this.params.timeout === \"number\") {\r\n      echo.timeout = this.params.timeout;\r\n    }\r\n\r\n    this.obniz.send({\r\n      measure: {\r\n        echo,\r\n      },\r\n    });\r\n\r\n    if (this.params.callback) {\r\n      this.observers.push(this.params.callback);\r\n    }\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    const callback: any = this.observers.shift();\r\n    if (callback) {\r\n      callback(obj.echo);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ObnizMeasure;\r\n"]}