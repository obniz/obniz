{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":";;AAEA,MAAM,MAAM,GAAQ,OAAO,MAAM,KAAK,WAAW,CAAC;AAClD,iCAAkC;AAIlC,MAAM,GAAG;IAUP,YAAY,KAAY,EAAE,EAAU;QAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IAEM,mBAAmB,CAAC,QAAa;QACtC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtC;IACH,CAAC;IAEM,gBAAgB,CAAC,QAA6B;QACnD,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnC;IACH,CAAC;IAEM,WAAW,CAAC,IAAY,EAAE,MAAc;QAC7C,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,OAAO,CAAC,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,OAAO;QACP,mBAAmB;QACnB,iDAAiD;QACjD,IAAI;QAEJ,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,KAAK,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC;SAClD;QACD,IAAI,MAAM,CAAC,MAAM,GAAG,EAAE,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,wBAAwB,CAAC,CAAC;SACxD;QAED,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;gBACrB,OAAO,EAAE;oBACP,IAAI;oBACJ,MAAM;iBACP;aACF,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC;SAC9C;QACD,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;YACrB,UAAU,EAAE,IAAI;SACjB,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,IAAyC;QACpD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,iBAAiB,CAAC,CAAC;SACjD;QACD,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,OAAO;SACR;QACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SACf;QAED,IAAI,SAAS,GAAQ,IAAI,CAAC;QAC1B,IAAI,MAAM,IAAI,IAAI,YAAY,MAAM,EAAE;YACpC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;SACvB;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;YACrC,SAAS,GAAG,IAAI,CAAC;SAClB;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACnC,MAAM,GAAG,GAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;SACtB;QACD,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;YACrB,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;aAChB;SACF,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,iBAAiB,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,IAAI,GAAG,CAAC,UAAU,EAAE;YAClB,2FAA2F;YAC3F,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;aAC7C;YACD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE;gBAC7B,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;SACF;aAAM,IAAI,GAAG,CAAC,IAAI,EAAE;YACnB,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC/B;YACD,MAAM,QAAQ,GAAQ,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YACjD,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACzB;SACF;aAAM,IAAI,GAAG,CAAC,OAAO,EAAE;YACtB,2BAA2B;YAC3B,wDAAwD;YACxD,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE;gBAC1B,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC3B;aACF;YACD,MAAM,QAAQ,GAAQ,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;YACpD,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAED,kBAAe,GAAG,CAAC","file":"tcp.js","sourcesContent":["import Obniz from \"../../index\";\n\nconst isNode: any = typeof window === \"undefined\";\nimport semver = require(\"semver\");\n\ntype TCPCallbackFunction = (data: number[]) => void;\n\nclass Tcp {\n  public Obniz: Obniz;\n  public id: number;\n  public connectObservers: any;\n  public readObservers!: TCPCallbackFunction[];\n  public used!: boolean;\n  public onconnection: any;\n  public onreceive: any;\n  public onerror: any;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.connectObservers = [];\n    this.readObservers = [];\n    this.used = false;\n  }\n\n  public _addConnectObserver(callback: any) {\n    if (callback) {\n      this.connectObservers.push(callback);\n    }\n  }\n\n  public _addReadObserver(callback: TCPCallbackFunction) {\n    if (callback) {\n      this.readObservers.push(callback);\n    }\n  }\n\n  public connectWait(port: number, domain: string) {\n    if (semver.lt(this.Obniz.firmware_ver, \"2.1.0\")) {\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\n    }\n\n    // TODO\n    // if (this.used) {\n    //   throw new Error(`tcp${this.id} is in used`);\n    // }\n\n    if (port < 0 || port > 65535) {\n      throw new Error(`tcp${this.id} is invalid port`);\n    }\n    if (domain.length > 30) {\n      throw new Error(`tcp${this.id} is domain length over`);\n    }\n\n    this.connectObservers = [];\n    this.used = true;\n    return new Promise((resolve: any, reject: any) => {\n      this._addConnectObserver(resolve);\n      const obj: any = {};\n      obj[\"tcp\" + this.id] = {\n        connect: {\n          port,\n          domain,\n        },\n      };\n      this.Obniz.send(obj);\n    });\n  }\n\n  public close() {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not used`);\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      disconnect: true,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public write(data: number | number[] | Buffer | string) {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n\n    let send_data: any = null;\n    if (isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      write: {\n        data: send_data,\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  public readWait(): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    return new Promise((resolve: any, reject: any) => {\n      this._addReadObserver(resolve);\n    });\n  }\n\n  public end() {\n    this.close();\n  }\n\n  public notified(obj: any) {\n    if (obj.connection) {\n      /* Connectino state update. response of connect(), close from destination, response from */\n      if (this.onconnection) {\n        this.onconnection(obj.connection.connected);\n      }\n      if (!obj.connection.connected) {\n        this._reset();\n      }\n    } else if (obj.read) {\n      if (this.onreceive) {\n        this.onreceive(obj.read.data);\n      }\n      const callback: any = this.readObservers.shift();\n      if (callback) {\n        callback(obj.read.data);\n      }\n    } else if (obj.connect) {\n      /* response of connect() */\n      /* `this.connection` will called before this function */\n      if (obj.connect.code !== 0) {\n        if (this.onerror) {\n          this.onerror(obj.connect);\n        }\n      }\n      const callback: any = this.connectObservers.shift();\n      if (callback) {\n        callback(obj.connect.code);\n      }\n    }\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n}\n\nexport default Tcp;\n"]}