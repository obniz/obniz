{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":"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","file":"tcp.js","sourcesContent":["import Obniz from \"../../index\";\r\n\r\nconst isNode: any = typeof window === \"undefined\";\r\nimport semver = require(\"semver\");\r\n\r\ntype TCPCallbackFunction = (data: number[]) => void;\r\n\r\nclass Tcp {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public connectObservers: any;\r\n  public readObservers!: TCPCallbackFunction[];\r\n  public used!: boolean;\r\n  public onconnection: any;\r\n  public onreceive: any;\r\n  public onerror: any;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.connectObservers = [];\r\n    this.readObservers = [];\r\n    this.used = false;\r\n  }\r\n\r\n  public _addConnectObserver(callback: any) {\r\n    if (callback) {\r\n      this.connectObservers.push(callback);\r\n    }\r\n  }\r\n\r\n  public _addReadObserver(callback: TCPCallbackFunction) {\r\n    if (callback) {\r\n      this.readObservers.push(callback);\r\n    }\r\n  }\r\n\r\n  public connectWait(port: number, domain: string) {\r\n    if (semver.lt(this.Obniz.firmware_ver, \"2.1.0\")) {\r\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\r\n    }\r\n\r\n    // TODO\r\n    // if (this.used) {\r\n    //   throw new Error(`tcp${this.id} is in used`);\r\n    // }\r\n\r\n    if (port < 0 || port > 65535) {\r\n      throw new Error(`tcp${this.id} is invalid port`);\r\n    }\r\n    if (domain.length > 30) {\r\n      throw new Error(`tcp${this.id} is domain length over`);\r\n    }\r\n\r\n    this.connectObservers = [];\r\n    this.used = true;\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this._addConnectObserver(resolve);\r\n      const obj: any = {};\r\n      obj[\"tcp\" + this.id] = {\r\n        connect: {\r\n          port,\r\n          domain,\r\n        },\r\n      };\r\n      this.Obniz.send(obj);\r\n    });\r\n  }\r\n\r\n  public close() {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not used`);\r\n    }\r\n    const obj: any = {};\r\n    obj[\"tcp\" + this.id] = {\r\n      disconnect: true,\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public write(data: number | number[] | Buffer | string) {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not started`);\r\n    }\r\n    if (data === undefined) {\r\n      return;\r\n    }\r\n    if (typeof data === \"number\") {\r\n      data = [data];\r\n    }\r\n\r\n    let send_data: any = null;\r\n    if (isNode && data instanceof Buffer) {\r\n      send_data = [...data];\r\n    } else if (data.constructor === Array) {\r\n      send_data = data;\r\n    } else if (typeof data === \"string\") {\r\n      const buf: any = Buffer.from(data);\r\n      send_data = [...buf];\r\n    }\r\n    const obj: any = {};\r\n    obj[\"tcp\" + this.id] = {\r\n      write: {\r\n        data: send_data,\r\n      },\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public readWait(): Promise<number[]> {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not started`);\r\n    }\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this._addReadObserver(resolve);\r\n    });\r\n  }\r\n\r\n  public end() {\r\n    this.close();\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (obj.connection) {\r\n      /* Connectino state update. response of connect(), close from destination, response from */\r\n      if (this.onconnection) {\r\n        this.onconnection(obj.connection.connected);\r\n      }\r\n      if (!obj.connection.connected) {\r\n        this._reset();\r\n      }\r\n    } else if (obj.read) {\r\n      if (this.onreceive) {\r\n        this.onreceive(obj.read.data);\r\n      }\r\n      const callback: any = this.readObservers.shift();\r\n      if (callback) {\r\n        callback(obj.read.data);\r\n      }\r\n    } else if (obj.connect) {\r\n      /* response of connect() */\r\n      /* `this.connection` will called before this function */\r\n      if (obj.connect.code !== 0) {\r\n        if (this.onerror) {\r\n          this.onerror(obj.connect);\r\n        }\r\n      }\r\n      const callback: any = this.connectObservers.shift();\r\n      if (callback) {\r\n        callback(obj.connect.code);\r\n      }\r\n    }\r\n  }\r\n\r\n  public isUsed() {\r\n    return this.used;\r\n  }\r\n}\r\n\r\nexport default Tcp;\r\n"]}