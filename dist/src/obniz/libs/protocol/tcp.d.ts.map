{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAKhC,aAAK,mBAAmB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;AAEpD,cAAM,GAAG;IACA,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,GAAG,CAAC;IACtB,aAAa,EAAG,mBAAmB,EAAE,CAAC;IACtC,IAAI,EAAG,OAAO,CAAC;IACf,YAAY,EAAE,GAAG,CAAC;IAClB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;gBAER,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAMN,mBAAmB,CAAC,QAAQ,EAAE,GAAG;IAMjC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB;IAM9C,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAgCxC,KAAK;IAWL,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM;IA6B/C,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAS7B,GAAG;IAIH,QAAQ,CAAC,GAAG,EAAE,GAAG;IAgCjB,MAAM;CAGd;AAED,eAAe,GAAG,CAAC","file":"tcp.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\n\r\nconst isNode: any = typeof window === \"undefined\";\r\nimport semver = require(\"semver\");\r\n\r\ntype TCPCallbackFunction = (data: number[]) => void;\r\n\r\nclass Tcp {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public connectObservers: any;\r\n  public readObservers!: TCPCallbackFunction[];\r\n  public used!: boolean;\r\n  public onconnection: any;\r\n  public onreceive: any;\r\n  public onerror: any;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.connectObservers = [];\r\n    this.readObservers = [];\r\n    this.used = false;\r\n  }\r\n\r\n  public _addConnectObserver(callback: any) {\r\n    if (callback) {\r\n      this.connectObservers.push(callback);\r\n    }\r\n  }\r\n\r\n  public _addReadObserver(callback: TCPCallbackFunction) {\r\n    if (callback) {\r\n      this.readObservers.push(callback);\r\n    }\r\n  }\r\n\r\n  public connectWait(port: number, domain: string) {\r\n    if (semver.lt(this.Obniz.firmware_ver, \"2.1.0\")) {\r\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\r\n    }\r\n\r\n    // TODO\r\n    // if (this.used) {\r\n    //   throw new Error(`tcp${this.id} is in used`);\r\n    // }\r\n\r\n    if (port < 0 || port > 65535) {\r\n      throw new Error(`tcp${this.id} is invalid port`);\r\n    }\r\n    if (domain.length > 30) {\r\n      throw new Error(`tcp${this.id} is domain length over`);\r\n    }\r\n\r\n    this.connectObservers = [];\r\n    this.used = true;\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this._addConnectObserver(resolve);\r\n      const obj: any = {};\r\n      obj[\"tcp\" + this.id] = {\r\n        connect: {\r\n          port,\r\n          domain,\r\n        },\r\n      };\r\n      this.Obniz.send(obj);\r\n    });\r\n  }\r\n\r\n  public close() {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not used`);\r\n    }\r\n    const obj: any = {};\r\n    obj[\"tcp\" + this.id] = {\r\n      disconnect: true,\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public write(data: number | number[] | Buffer | string) {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not started`);\r\n    }\r\n    if (data === undefined) {\r\n      return;\r\n    }\r\n    if (typeof data === \"number\") {\r\n      data = [data];\r\n    }\r\n\r\n    let send_data: any = null;\r\n    if (isNode && data instanceof Buffer) {\r\n      send_data = [...data];\r\n    } else if (data.constructor === Array) {\r\n      send_data = data;\r\n    } else if (typeof data === \"string\") {\r\n      const buf: any = Buffer.from(data);\r\n      send_data = [...buf];\r\n    }\r\n    const obj: any = {};\r\n    obj[\"tcp\" + this.id] = {\r\n      write: {\r\n        data: send_data,\r\n      },\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public readWait(): Promise<number[]> {\r\n    if (!this.used) {\r\n      throw new Error(`tcp${this.id} is not started`);\r\n    }\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this._addReadObserver(resolve);\r\n    });\r\n  }\r\n\r\n  public end() {\r\n    this.close();\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (obj.connection) {\r\n      /* Connectino state update. response of connect(), close from destination, response from */\r\n      if (this.onconnection) {\r\n        this.onconnection(obj.connection.connected);\r\n      }\r\n      if (!obj.connection.connected) {\r\n        this._reset();\r\n      }\r\n    } else if (obj.read) {\r\n      if (this.onreceive) {\r\n        this.onreceive(obj.read.data);\r\n      }\r\n      const callback: any = this.readObservers.shift();\r\n      if (callback) {\r\n        callback(obj.read.data);\r\n      }\r\n    } else if (obj.connect) {\r\n      /* response of connect() */\r\n      /* `this.connection` will called before this function */\r\n      if (obj.connect.code !== 0) {\r\n        if (this.onerror) {\r\n          this.onerror(obj.connect);\r\n        }\r\n      }\r\n      const callback: any = this.connectObservers.shift();\r\n      if (callback) {\r\n        callback(obj.connect.code);\r\n      }\r\n    }\r\n  }\r\n\r\n  public isUsed() {\r\n    return this.used;\r\n  }\r\n}\r\n\r\nexport default Tcp;\r\n"]}