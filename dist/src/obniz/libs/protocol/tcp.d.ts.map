{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAKhC,aAAK,mBAAmB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;AAEpD,cAAM,GAAG;IACA,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,GAAG,CAAC;IACtB,aAAa,EAAG,mBAAmB,EAAE,CAAC;IACtC,IAAI,EAAG,OAAO,CAAC;IACf,YAAY,EAAE,GAAG,CAAC;IAClB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;gBAER,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAMN,mBAAmB,CAAC,QAAQ,EAAE,GAAG;IAMjC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB;IAM9C,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAgCxC,KAAK;IAWL,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM;IA6B/C,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAS7B,GAAG;IAIH,QAAQ,CAAC,GAAG,EAAE,GAAG;IAgCjB,MAAM;CAGd;AAED,eAAe,GAAG,CAAC","file":"tcp.d.ts","sourcesContent":["import Obniz from \"../../index\";\n\nconst isNode: any = typeof window === \"undefined\";\nimport semver = require(\"semver\");\n\ntype TCPCallbackFunction = (data: number[]) => void;\n\nclass Tcp {\n  public Obniz: Obniz;\n  public id: number;\n  public connectObservers: any;\n  public readObservers!: TCPCallbackFunction[];\n  public used!: boolean;\n  public onconnection: any;\n  public onreceive: any;\n  public onerror: any;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.connectObservers = [];\n    this.readObservers = [];\n    this.used = false;\n  }\n\n  public _addConnectObserver(callback: any) {\n    if (callback) {\n      this.connectObservers.push(callback);\n    }\n  }\n\n  public _addReadObserver(callback: TCPCallbackFunction) {\n    if (callback) {\n      this.readObservers.push(callback);\n    }\n  }\n\n  public connectWait(port: number, domain: string) {\n    if (semver.lt(this.Obniz.firmware_ver, \"2.1.0\")) {\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\n    }\n\n    // TODO\n    // if (this.used) {\n    //   throw new Error(`tcp${this.id} is in used`);\n    // }\n\n    if (port < 0 || port > 65535) {\n      throw new Error(`tcp${this.id} is invalid port`);\n    }\n    if (domain.length > 30) {\n      throw new Error(`tcp${this.id} is domain length over`);\n    }\n\n    this.connectObservers = [];\n    this.used = true;\n    return new Promise((resolve: any, reject: any) => {\n      this._addConnectObserver(resolve);\n      const obj: any = {};\n      obj[\"tcp\" + this.id] = {\n        connect: {\n          port,\n          domain,\n        },\n      };\n      this.Obniz.send(obj);\n    });\n  }\n\n  public close() {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not used`);\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      disconnect: true,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public write(data: number | number[] | Buffer | string) {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n\n    let send_data: any = null;\n    if (isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      write: {\n        data: send_data,\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  public readWait(): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    return new Promise((resolve: any, reject: any) => {\n      this._addReadObserver(resolve);\n    });\n  }\n\n  public end() {\n    this.close();\n  }\n\n  public notified(obj: any) {\n    if (obj.connection) {\n      /* Connectino state update. response of connect(), close from destination, response from */\n      if (this.onconnection) {\n        this.onconnection(obj.connection.connected);\n      }\n      if (!obj.connection.connected) {\n        this._reset();\n      }\n    } else if (obj.read) {\n      if (this.onreceive) {\n        this.onreceive(obj.read.data);\n      }\n      const callback: any = this.readObservers.shift();\n      if (callback) {\n        callback(obj.read.data);\n      }\n    } else if (obj.connect) {\n      /* response of connect() */\n      /* `this.connection` will called before this function */\n      if (obj.connect.code !== 0) {\n        if (this.onerror) {\n          this.onerror(obj.connect);\n        }\n      }\n      const callback: any = this.connectObservers.shift();\n      if (callback) {\n        callback(obj.connect.code);\n      }\n    }\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n}\n\nexport default Tcp;\n"]}