{"version":3,"sources":["../src/obniz/libs/io_peripherals/i2c.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,QAAQ,EAAC,MAAM,UAAU,CAAC;AAElC,aAAK,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC;AAElC,UAAU,kBAAkB;IAC1B,MAAM,EAAE,OAAO,CAAC;IAChB,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,CAAC,EAAE,QAAQ,CAAC;IAClB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,UAAU,oBAAqB,SAAQ,kBAAkB;IACvD,MAAM,EAAE,OAAO,CAAC;IAChB,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,aAAa,CAAC,EAAE,GAAG,CAAC;IACpB,oBAAoB,CAAC,EAAE,MAAM,CAAC;CAC/B;AAED,cAAM,aAAa;IACV,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,CAAC;IAC/B,SAAS,EAAE,GAAG,CAAC;IACf,KAAK,EAAG,kBAAkB,CAAC;IAC3B,IAAI,EAAG,OAAO,CAAC;IACf,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;gBAE9C,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAO7B,MAAM;IAMN,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,KAAK,CAAC,GAAG,EAAE,oBAAoB;IAsG/B,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAyB7B,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IA8BtD,QAAQ,CAAC,GAAG,EAAE,GAAG;IAiCjB,MAAM;IAIN,GAAG;CAMX;AAED,eAAe,aAAa,CAAC","file":"i2c.d.ts","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\nimport {PullType} from \"./common\";\n\ntype I2CMode = \"master\" | \"slave\";\n\ninterface PeripheralI2CState {\n  \"mode\": I2CMode;\n  \"sda\": number;\n  \"scl\": number;\n  \"pull\"?: PullType;\n  \"gnd\"?: number;\n}\n\ninterface PeripheralI2COptions extends PeripheralI2CState {\n  \"mode\": I2CMode;\n  \"sda\": number;\n  \"scl\": number;\n  clock?: number;\n  slave_address?: any;\n  slave_address_length?: number;\n}\n\nclass PeripheralI2C {\n  public Obniz: Obniz;\n  public id: number;\n  public onerror?: (error: any) => void;\n  public observers: any;\n  public state!: PeripheralI2CState;\n  public used!: boolean;\n  public onwritten?: (data: any[], address: string) => void;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n    this.onerror = undefined;\n  }\n\n  public _reset() {\n    this.observers = [];\n    this.used = false;\n    this.onwritten = undefined;\n  }\n\n  public addObserver(callback: any) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public start(arg: PeripheralI2COptions) {\n    const err: any = ObnizUtil._requiredKeys(arg, [\"mode\", \"sda\", \"scl\"]);\n    if (err) {\n      throw new Error(\"I2C start param '\" + err + \"' required, but not found \");\n    }\n    this.state = ObnizUtil._keyFilter(arg, [\n      \"mode\",\n      \"sda\",\n      \"scl\",\n      \"pull\",\n      \"gnd\",\n    ]);\n\n    const ioKeys: Array<keyof PeripheralI2CState> = [\"sda\", \"scl\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.state[key] && !this.Obniz.isValidIO(this.state[key])) {\n        throw new Error(\"i2c start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    const mode: I2CMode = this.state.mode!;\n    const clock: number | null = typeof arg.clock === \"number\" ? Math.floor(arg.clock) : null;\n    const slave_address: number | null =\n      typeof arg.slave_address === \"number\"\n        ? Math.floor(arg.slave_address)\n        : null;\n    const slave_address_length: number | null =\n      typeof arg.slave_address_length === \"number\"\n        ? Math.floor(arg.slave_address_length)\n        : null;\n\n    if (mode !== \"master\" && mode !== \"slave\") {\n      throw new Error(\"i2c: invalid mode \" + mode);\n    }\n    if (mode === \"master\") {\n      if (clock === null) {\n        throw new Error(\"i2c: please specify clock when master mode\");\n      }\n      if (clock <= 0 || clock > 1 * 1000 * 1000) {\n        throw new Error(\"i2c: invalid clock \" + clock);\n      }\n      if (arg.pull === \"5v\" && clock > 400 * 1000) {\n        throw new Error(\n          \"i2c: please use under 400khz when internal 5v internal pull-up\",\n        );\n      }\n      if (arg.pull === \"3v\" && clock > 100 * 1000) {\n        throw new Error(\n          \"i2c: please use under 100khz when internal 3v internal pull-up\",\n        );\n      }\n    } else {\n      if (slave_address === null) {\n        throw new Error(\"i2c: please specify slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address_length !== null && slave_address_length !== 7) {\n        throw new Error(\"i2c: invalid slave_address_length. please specify 7\");\n      }\n    }\n\n    this.Obniz.getIO(this.state.sda).drive(\"open-drain\");\n    this.Obniz.getIO(this.state.scl).drive(\"open-drain\");\n\n    if (this.state.pull) {\n      this.Obniz.getIO(this.state.sda).pull(this.state.pull);\n      this.Obniz.getIO(this.state.scl).pull(this.state.pull);\n    } else {\n      this.Obniz.getIO(this.state.sda).pull(null);\n      this.Obniz.getIO(this.state.scl).pull(null);\n    }\n\n    if (this.state.gnd !== undefined) {\n      this.Obniz.getIO(this.state.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.state.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"i2c\" + this.id, ioNames);\n      }\n    }\n\n    const startObj: any = ObnizUtil._keyFilter(this.state, [\"mode\", \"sda\", \"scl\"]);\n    if (mode === \"master\") {\n      startObj.clock = clock;\n    } else {\n      startObj.slave_address = slave_address;\n      if (slave_address_length) {\n        startObj.slave_address_length = slave_address_length;\n      }\n    }\n\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = startObj;\n    this.used = true;\n    this.Obniz.send(obj);\n  }\n\n  public write(address: any, data: any) {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    if (!data) {\n      throw new Error(\"i2c: please provide data\");\n    }\n    if (data.length > 1024) {\n      throw new Error(\"i2c: data should be under 1024 bytes\");\n    }\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = {\n      address,\n      data,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public readWait(address: any, length: any): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    length = parseInt(length);\n    if (isNaN(length) || length < 0) {\n      throw new Error(\"i2c: invalid length to read\");\n    }\n    if (length > 1024) {\n      throw new Error(\"i2c: data length should be under 1024 bytes\");\n    }\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"i2c\" + self.id] = {\n        address,\n        read: length,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  public notified(obj: any) {\n    if (obj && typeof obj === \"object\") {\n      if (obj.data) {\n        if (obj.mode === \"slave\" && typeof this.onwritten === \"function\") {\n          this.onwritten(obj.data, obj.address);\n        } else {\n          // TODO: we should compare byte length from sent\n          const callback: any = this.observers.shift();\n          if (callback) {\n            callback(obj.data);\n          }\n        }\n      }\n      if (obj.warning) {\n        this.Obniz.warning({\n          alert: \"warning\",\n          message: `i2c${this.id}: ${obj.warning.message}`,\n        });\n      }\n      if (obj.error) {\n        const message: any = `i2c${this.id}: ${obj.error.message}`;\n        if (typeof this.onerror === \"function\") {\n          this.onerror(new Error(message));\n        } else {\n          this.Obniz.error({\n            alert: \"error\",\n            message,\n          });\n        }\n      }\n    }\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n\n  public end() {\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = null;\n    this.Obniz.send(obj);\n    this.used = false;\n  }\n}\n\nexport default PeripheralI2C;\n"]}