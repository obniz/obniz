{"version":3,"sources":["../src/obniz/libs/io_peripherals/i2c.ts"],"names":[],"mappings":"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","file":"i2c.js","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\nimport {PullType} from \"./common\";\n\ntype I2CMode = \"master\" | \"slave\";\n\ninterface PeripheralI2CState {\n  \"mode\": I2CMode;\n  \"sda\": number;\n  \"scl\": number;\n  \"pull\"?: PullType;\n  \"gnd\"?: number;\n}\n\ninterface PeripheralI2COptions extends PeripheralI2CState {\n  \"mode\": I2CMode;\n  \"sda\": number;\n  \"scl\": number;\n  clock?: number;\n  slave_address?: any;\n  slave_address_length?: number;\n}\n\nclass PeripheralI2C {\n  public Obniz: Obniz;\n  public id: number;\n  public onerror?: (error: any) => void;\n  public observers: any;\n  public state!: PeripheralI2CState;\n  public used!: boolean;\n  public onwritten?: (data: any[], address: string) => void;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n    this.onerror = undefined;\n  }\n\n  public _reset() {\n    this.observers = [];\n    this.used = false;\n    this.onwritten = undefined;\n  }\n\n  public addObserver(callback: any) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public start(arg: PeripheralI2COptions) {\n    const err: any = ObnizUtil._requiredKeys(arg, [\"mode\", \"sda\", \"scl\"]);\n    if (err) {\n      throw new Error(\"I2C start param '\" + err + \"' required, but not found \");\n    }\n    this.state = ObnizUtil._keyFilter(arg, [\n      \"mode\",\n      \"sda\",\n      \"scl\",\n      \"pull\",\n      \"gnd\",\n    ]);\n\n    const ioKeys: Array<keyof PeripheralI2CState> = [\"sda\", \"scl\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.state[key] && !this.Obniz.isValidIO(this.state[key])) {\n        throw new Error(\"i2c start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    const mode: I2CMode = this.state.mode!;\n    const clock: number | null = typeof arg.clock === \"number\" ? Math.floor(arg.clock) : null;\n    const slave_address: number | null =\n      typeof arg.slave_address === \"number\"\n        ? Math.floor(arg.slave_address)\n        : null;\n    const slave_address_length: number | null =\n      typeof arg.slave_address_length === \"number\"\n        ? Math.floor(arg.slave_address_length)\n        : null;\n\n    if (mode !== \"master\" && mode !== \"slave\") {\n      throw new Error(\"i2c: invalid mode \" + mode);\n    }\n    if (mode === \"master\") {\n      if (clock === null) {\n        throw new Error(\"i2c: please specify clock when master mode\");\n      }\n      if (clock <= 0 || clock > 1 * 1000 * 1000) {\n        throw new Error(\"i2c: invalid clock \" + clock);\n      }\n      if (arg.pull === \"5v\" && clock > 400 * 1000) {\n        throw new Error(\n          \"i2c: please use under 400khz when internal 5v internal pull-up\",\n        );\n      }\n      if (arg.pull === \"3v\" && clock > 100 * 1000) {\n        throw new Error(\n          \"i2c: please use under 100khz when internal 3v internal pull-up\",\n        );\n      }\n    } else {\n      if (slave_address === null) {\n        throw new Error(\"i2c: please specify slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address_length !== null && slave_address_length !== 7) {\n        throw new Error(\"i2c: invalid slave_address_length. please specify 7\");\n      }\n    }\n\n    this.Obniz.getIO(this.state.sda).drive(\"open-drain\");\n    this.Obniz.getIO(this.state.scl).drive(\"open-drain\");\n\n    if (this.state.pull) {\n      this.Obniz.getIO(this.state.sda).pull(this.state.pull);\n      this.Obniz.getIO(this.state.scl).pull(this.state.pull);\n    } else {\n      this.Obniz.getIO(this.state.sda).pull(null);\n      this.Obniz.getIO(this.state.scl).pull(null);\n    }\n\n    if (this.state.gnd !== undefined) {\n      this.Obniz.getIO(this.state.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.state.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"i2c\" + this.id, ioNames);\n      }\n    }\n\n    const startObj: any = ObnizUtil._keyFilter(this.state, [\"mode\", \"sda\", \"scl\"]);\n    if (mode === \"master\") {\n      startObj.clock = clock;\n    } else {\n      startObj.slave_address = slave_address;\n      if (slave_address_length) {\n        startObj.slave_address_length = slave_address_length;\n      }\n    }\n\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = startObj;\n    this.used = true;\n    this.Obniz.send(obj);\n  }\n\n  public write(address: any, data: any) {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    if (!data) {\n      throw new Error(\"i2c: please provide data\");\n    }\n    if (data.length > 1024) {\n      throw new Error(\"i2c: data should be under 1024 bytes\");\n    }\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = {\n      address,\n      data,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public readWait(address: any, length: any): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    length = parseInt(length);\n    if (isNaN(length) || length < 0) {\n      throw new Error(\"i2c: invalid length to read\");\n    }\n    if (length > 1024) {\n      throw new Error(\"i2c: data length should be under 1024 bytes\");\n    }\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"i2c\" + self.id] = {\n        address,\n        read: length,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  public notified(obj: any) {\n    if (obj && typeof obj === \"object\") {\n      if (obj.data) {\n        if (obj.mode === \"slave\" && typeof this.onwritten === \"function\") {\n          this.onwritten(obj.data, obj.address);\n        } else {\n          // TODO: we should compare byte length from sent\n          const callback: any = this.observers.shift();\n          if (callback) {\n            callback(obj.data);\n          }\n        }\n      }\n      if (obj.warning) {\n        this.Obniz.warning({\n          alert: \"warning\",\n          message: `i2c${this.id}: ${obj.warning.message}`,\n        });\n      }\n      if (obj.error) {\n        const message: any = `i2c${this.id}: ${obj.error.message}`;\n        if (typeof this.onerror === \"function\") {\n          this.onerror(new Error(message));\n        } else {\n          this.Obniz.error({\n            alert: \"error\",\n            message,\n          });\n        }\n      }\n    }\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n\n  public end() {\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = null;\n    this.Obniz.send(obj);\n    this.used = false;\n  }\n}\n\nexport default PeripheralI2C;\n"]}