{"version":3,"sources":["../src/obniz/libs/io_peripherals/pwm.ts"],"names":[],"mappings":"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","file":"pwm.js","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\nimport {DriveType, PullType} from \"./common\";\r\n\r\ninterface PeripheralPWMOptions {\r\n  io: number;\r\n  drive?: DriveType;\r\n  pull?: PullType;\r\n}\r\n\r\nexport interface PWMInterface  {\r\n  freq: (frequency: number) => void;\r\n  pulse: (value: number) => void;\r\n  duty: (value: number) => void;\r\n}\r\n\r\nexport default class PeripheralPWM implements PWMInterface {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public state: any;\r\n  public used: any;\r\n  public params: any;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.state = {};\r\n    this.used = false;\r\n  }\r\n\r\n  public sendWS(obj: any) {\r\n    const wsObj: any = {};\r\n    wsObj[\"pwm\" + this.id] = obj;\r\n    this.Obniz.send(wsObj);\r\n  }\r\n\r\n  public start(params: PeripheralPWMOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\"]);\r\n    if (err) {\r\n      throw new Error(\"pwm start param '\" + err + \"' required, but not found \");\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\"io\", \"drive\", \"pull\"]);\r\n\r\n    const io: any = this.params.io;\r\n    const ioObj: any = this.Obniz.getIO(io);\r\n\r\n    ioObj.drive(this.params.drive || \"5v\");\r\n    ioObj.pull(this.params.pull || null);\r\n\r\n    this.state = {\r\n      io,\r\n      freq: 1000,\r\n    };\r\n    this.sendWS({\r\n      io,\r\n    });\r\n    this.used = true;\r\n  }\r\n\r\n  public freq(freq: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    freq *= 1;\r\n    if (typeof freq !== \"number\") {\r\n      throw new Error(\"please provide freq in number\");\r\n    }\r\n    this.state.freq = freq;\r\n    this.sendWS({\r\n      freq,\r\n    });\r\n    if (typeof this.state.duty === \"number\") {\r\n      this.duty(this.state.duty);\r\n    }\r\n  }\r\n\r\n  public pulse(pulse_width: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n\r\n    this.state.pulse = pulse_width;\r\n    delete this.state.duty;\r\n    this.sendWS({\r\n      pulse: pulse_width,\r\n    });\r\n  }\r\n\r\n  public duty(duty: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    duty *= 1;\r\n    if (typeof this.state.freq !== \"number\" || this.state.freq <= 0) {\r\n      throw new Error(\"please provide freq first.\");\r\n    }\r\n    if (typeof duty !== \"number\") {\r\n      throw new Error(\"please provide duty in number\");\r\n    }\r\n    if (duty < 0) {\r\n      duty = 0;\r\n    }\r\n    if (duty > 100) {\r\n      duty = 100;\r\n    }\r\n    const pulse_width: any = (1.0 / this.state.freq) * 1000 * duty * 0.01;\r\n    this.state.duty = duty;\r\n    this.sendWS({\r\n      pulse: pulse_width,\r\n    });\r\n  }\r\n\r\n  public isUsed() {\r\n    return this.used;\r\n  }\r\n\r\n  public end() {\r\n    this.state = {};\r\n    this.sendWS(null);\r\n    this.used = false;\r\n  }\r\n\r\n  public modulate(type: any, symbol_length: any, data: any) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    this.sendWS({\r\n      modulate: {\r\n        type,\r\n        symbol_length,\r\n        data,\r\n      },\r\n    });\r\n  }\r\n}\r\n"]}