{"version":3,"sources":["../src/obniz/libs/io_peripherals/uart.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAC,MAAM,UAAU,CAAC;AAIhG,UAAU,qBAAqB;IAC7B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,WAAW,CAAC;IACnB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,MAAM,CAAC,EAAE,UAAU,CAAC;IACpB,WAAW,CAAC,EAAE,eAAe,CAAC;IAC9B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB;AAED,cAAM,cAAc;IACX,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,QAAQ,EAAE,GAAG,CAAC;IACd,IAAI,EAAG,OAAO,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;gBAEzC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAKN,KAAK,CAAC,MAAM,EAAE,qBAAqB;IAwEnC,IAAI,CAAC,IAAI,EAAE,GAAG;IA0Bd,YAAY,IAAI,OAAO;IAIvB,SAAS,IAAI,MAAM,EAAE;IAWrB,QAAQ,IAAI,MAAM,GAAG,IAAI;IAQzB,QAAQ,IAAI,MAAM,GAAG,IAAI;IAUzB,gBAAgB,CAAC,IAAI,EAAE,GAAG;IAI1B,QAAQ,CAAC,GAAG,EAAE,GAAG;IAajB,MAAM,IAAI,OAAO;IAIjB,GAAG;CAOX;AAED,eAAe,cAAc,CAAC","file":"uart.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\nimport {BitType, DriveType, FlowControlType, ParityType, PullType, StopBitType} from \"./common\";\r\n\r\nconst isNode: any = typeof window === \"undefined\";\r\n\r\ninterface PeripheralUARTOptions {\r\n  tx: number;\r\n  rx: number;\r\n  gnd?: number;\r\n  baud?: number;\r\n  stop?: StopBitType;\r\n  bits?: BitType;\r\n  parity?: ParityType;\r\n  flowcontrol?: FlowControlType;\r\n  rts?: number;\r\n  cts?: number;\r\n  drive?: DriveType;\r\n  pull?: PullType;\r\n}\r\n\r\nclass PeripheralUART {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public received: any;\r\n  public used!: boolean;\r\n  public params: any;\r\n  public onreceive?: (data: any, text: string) => void;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.received = new Uint8Array([]);\r\n    this.used = false;\r\n  }\r\n\r\n  public start(params: PeripheralUARTOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"tx\", \"rx\"]);\r\n    if (err) {\r\n      throw new Error(\r\n        \"uart start param '\" + err + \"' required, but not found \",\r\n      );\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"tx\",\r\n      \"rx\",\r\n      \"baud\",\r\n      \"stop\",\r\n      \"bits\",\r\n      \"parity\",\r\n      \"flowcontrol\",\r\n      \"rts\",\r\n      \"cts\",\r\n      \"drive\",\r\n      \"pull\",\r\n      \"gnd\",\r\n    ]);\r\n\r\n    const ioKeys: any = [\"rx\", \"tx\", \"rts\", \"cts\", \"gnd\"];\r\n    for (const key of ioKeys) {\r\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\r\n        throw new Error(\"uart start param '\" + key + \"' are to be valid io no\");\r\n      }\r\n    }\r\n\r\n    if (this.params.hasOwnProperty(\"drive\")) {\r\n      this.Obniz.getIO(this.params.rx).drive(this.params.drive);\r\n      this.Obniz.getIO(this.params.tx).drive(this.params.drive);\r\n    } else {\r\n      this.Obniz.getIO(this.params.rx).drive(\"5v\");\r\n      this.Obniz.getIO(this.params.tx).drive(\"5v\");\r\n    }\r\n\r\n    if (this.params.hasOwnProperty(\"pull\")) {\r\n      this.Obniz.getIO(this.params.rx).pull(this.params.pull);\r\n      this.Obniz.getIO(this.params.tx).pull(this.params.pull);\r\n    } else {\r\n      this.Obniz.getIO(this.params.rx).pull(null);\r\n      this.Obniz.getIO(this.params.tx).pull(null);\r\n    }\r\n\r\n    if (this.params.hasOwnProperty(\"gnd\")) {\r\n      this.Obniz.getIO(this.params.gnd).output(false);\r\n      const ioNames: any = {};\r\n      ioNames[this.params.gnd] = \"gnd\";\r\n      if (this.Obniz.display) {\r\n        this.Obniz.display.setPinNames(\"uart\" + this.id, ioNames);\r\n      }\r\n    }\r\n\r\n    const obj: any = {};\r\n    const sendParams: any = ObnizUtil._keyFilter(this.params, [\r\n      \"tx\",\r\n      \"rx\",\r\n      \"baud\",\r\n      \"stop\",\r\n      \"bits\",\r\n      \"parity\",\r\n      \"flowcontrol\",\r\n      \"rts\",\r\n      \"cts\",\r\n    ]);\r\n    obj[\"uart\" + this.id] = sendParams;\r\n    this.Obniz.send(obj);\r\n    this.received = [];\r\n    this.used = true;\r\n  }\r\n\r\n  public send(data: any) {\r\n    if (!this.used) {\r\n      throw new Error(`uart${this.id} is not started`);\r\n    }\r\n    let send_data: any = null;\r\n    if (data === undefined) {\r\n      return;\r\n    }\r\n    if (typeof data === \"number\") {\r\n      data = [data];\r\n    }\r\n    if (isNode && data instanceof Buffer) {\r\n      send_data = [...data];\r\n    } else if (data.constructor === Array) {\r\n      send_data = data;\r\n    } else if (typeof data === \"string\") {\r\n      const buf: any = Buffer.from(data);\r\n      send_data = [...buf];\r\n    }\r\n    const obj: any = {};\r\n    obj[\"uart\" + this.id] = {};\r\n    obj[\"uart\" + this.id].data = send_data;\r\n    //  console.log(obj);\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public isDataExists(): boolean {\r\n    return this.received && this.received.length > 0;\r\n  }\r\n\r\n  public readBytes(): number[] {\r\n    const results: number[] = [];\r\n    if (this.isDataExists()) {\r\n      for (let i = 0; i < this.received.length; i++) {\r\n        results.push(this.received[i]);\r\n      }\r\n    }\r\n    this.received = [];\r\n    return results;\r\n  }\r\n\r\n  public readByte(): number | null {\r\n    const results: any = [];\r\n    if (this.isDataExists()) {\r\n      return results.unshift();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public readText(): string | null {\r\n    let string: string | null = null;\r\n    if (this.isDataExists()) {\r\n      const data: any = this.readBytes();\r\n      string = this.tryConvertString(data);\r\n    }\r\n    this.received = [];\r\n    return string;\r\n  }\r\n\r\n  public tryConvertString(data: any) {\r\n    return ObnizUtil.dataArray2string(data);\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (this.onreceive) {\r\n      const string: any = this.tryConvertString(obj.data);\r\n      this.onreceive(obj.data, string);\r\n    } else {\r\n      if (!this.received) {\r\n        this.received = [];\r\n      }\r\n\r\n      this.received.push.apply(this.received, obj.data);\r\n    }\r\n  }\r\n\r\n  public isUsed(): boolean {\r\n    return this.used;\r\n  }\r\n\r\n  public end() {\r\n    const obj: any = {};\r\n    obj[\"uart\" + this.id] = null;\r\n    this.params = null;\r\n    this.Obniz.send(obj);\r\n    this.used = false;\r\n  }\r\n}\r\n\r\nexport default PeripheralUART;\r\n"]}