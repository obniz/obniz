{"version":3,"sources":["../src/obniz/libs/io_peripherals/uart.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAC,MAAM,UAAU,CAAC;AAIhG,UAAU,qBAAqB;IAC7B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,WAAW,CAAC;IACnB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,MAAM,CAAC,EAAE,UAAU,CAAC;IACpB,WAAW,CAAC,EAAE,eAAe,CAAC;IAC9B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB;AAED,cAAM,cAAc;IACX,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,QAAQ,EAAE,GAAG,CAAC;IACd,IAAI,EAAG,OAAO,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;gBAEzC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAKN,KAAK,CAAC,MAAM,EAAE,qBAAqB;IAwEnC,IAAI,CAAC,IAAI,EAAE,GAAG;IA0Bd,YAAY,IAAI,OAAO;IAIvB,SAAS,IAAI,MAAM,EAAE;IAWrB,QAAQ,IAAI,MAAM,GAAG,IAAI;IAQzB,QAAQ,IAAI,MAAM,GAAG,IAAI;IAUzB,gBAAgB,CAAC,IAAI,EAAE,GAAG;IAI1B,QAAQ,CAAC,GAAG,EAAE,GAAG;IAajB,MAAM,IAAI,OAAO;IAIjB,GAAG;CAOX;AAED,eAAe,cAAc,CAAC","file":"uart.d.ts","sourcesContent":["import Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\nimport {BitType, DriveType, FlowControlType, ParityType, PullType, StopBitType} from \"./common\";\n\nconst isNode: any = typeof window === \"undefined\";\n\ninterface PeripheralUARTOptions {\n  tx: number;\n  rx: number;\n  gnd?: number;\n  baud?: number;\n  stop?: StopBitType;\n  bits?: BitType;\n  parity?: ParityType;\n  flowcontrol?: FlowControlType;\n  rts?: number;\n  cts?: number;\n  drive?: DriveType;\n  pull?: PullType;\n}\n\nclass PeripheralUART {\n  public Obniz: Obniz;\n  public id: number;\n  public received: any;\n  public used!: boolean;\n  public params: any;\n  public onreceive?: (data: any, text: string) => void;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.received = new Uint8Array([]);\n    this.used = false;\n  }\n\n  public start(params: PeripheralUARTOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"tx\", \"rx\"]);\n    if (err) {\n      throw new Error(\n        \"uart start param '\" + err + \"' required, but not found \",\n      );\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"tx\",\n      \"rx\",\n      \"baud\",\n      \"stop\",\n      \"bits\",\n      \"parity\",\n      \"flowcontrol\",\n      \"rts\",\n      \"cts\",\n      \"drive\",\n      \"pull\",\n      \"gnd\",\n    ]);\n\n    const ioKeys: any = [\"rx\", \"tx\", \"rts\", \"cts\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\n        throw new Error(\"uart start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    if (this.params.hasOwnProperty(\"drive\")) {\n      this.Obniz.getIO(this.params.rx).drive(this.params.drive);\n      this.Obniz.getIO(this.params.tx).drive(this.params.drive);\n    } else {\n      this.Obniz.getIO(this.params.rx).drive(\"5v\");\n      this.Obniz.getIO(this.params.tx).drive(\"5v\");\n    }\n\n    if (this.params.hasOwnProperty(\"pull\")) {\n      this.Obniz.getIO(this.params.rx).pull(this.params.pull);\n      this.Obniz.getIO(this.params.tx).pull(this.params.pull);\n    } else {\n      this.Obniz.getIO(this.params.rx).pull(null);\n      this.Obniz.getIO(this.params.tx).pull(null);\n    }\n\n    if (this.params.hasOwnProperty(\"gnd\")) {\n      this.Obniz.getIO(this.params.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.params.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"uart\" + this.id, ioNames);\n      }\n    }\n\n    const obj: any = {};\n    const sendParams: any = ObnizUtil._keyFilter(this.params, [\n      \"tx\",\n      \"rx\",\n      \"baud\",\n      \"stop\",\n      \"bits\",\n      \"parity\",\n      \"flowcontrol\",\n      \"rts\",\n      \"cts\",\n    ]);\n    obj[\"uart\" + this.id] = sendParams;\n    this.Obniz.send(obj);\n    this.received = [];\n    this.used = true;\n  }\n\n  public send(data: any) {\n    if (!this.used) {\n      throw new Error(`uart${this.id} is not started`);\n    }\n    let send_data: any = null;\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n    if (isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"uart\" + this.id] = {};\n    obj[\"uart\" + this.id].data = send_data;\n    //  console.log(obj);\n    this.Obniz.send(obj);\n  }\n\n  public isDataExists(): boolean {\n    return this.received && this.received.length > 0;\n  }\n\n  public readBytes(): number[] {\n    const results: number[] = [];\n    if (this.isDataExists()) {\n      for (let i = 0; i < this.received.length; i++) {\n        results.push(this.received[i]);\n      }\n    }\n    this.received = [];\n    return results;\n  }\n\n  public readByte(): number | null {\n    const results: any = [];\n    if (this.isDataExists()) {\n      return results.unshift();\n    }\n    return null;\n  }\n\n  public readText(): string | null {\n    let string: string | null = null;\n    if (this.isDataExists()) {\n      const data: any = this.readBytes();\n      string = this.tryConvertString(data);\n    }\n    this.received = [];\n    return string;\n  }\n\n  public tryConvertString(data: any) {\n    return ObnizUtil.dataArray2string(data);\n  }\n\n  public notified(obj: any) {\n    if (this.onreceive) {\n      const string: any = this.tryConvertString(obj.data);\n      this.onreceive(obj.data, string);\n    } else {\n      if (!this.received) {\n        this.received = [];\n      }\n\n      this.received.push.apply(this.received, obj.data);\n    }\n  }\n\n  public isUsed(): boolean {\n    return this.used;\n  }\n\n  public end() {\n    const obj: any = {};\n    obj[\"uart\" + this.id] = null;\n    this.params = null;\n    this.Obniz.send(obj);\n    this.used = false;\n  }\n}\n\nexport default PeripheralUART;\n"]}