{"version":3,"sources":["../src/obniz/libs/io_peripherals/pwm.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE7C,UAAU,oBAAoB;IAC5B,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB;AAED,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,KAAK,IAAI,CAAC;IAClC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAC/B,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;CAC/B;AAED,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,YAAY;IACjD,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;gBAEP,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAKN,MAAM,CAAC,GAAG,EAAE,GAAG;IAMf,KAAK,CAAC,MAAM,EAAE,oBAAoB;IAuBlC,IAAI,CAAC,IAAI,EAAE,MAAM;IAiBjB,KAAK,CAAC,WAAW,EAAE,MAAM;IAYzB,IAAI,CAAC,IAAI,EAAE,MAAM;IAwBjB,MAAM;IAIN,GAAG;IAMH,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;CAYzD","file":"pwm.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\nimport {DriveType, PullType} from \"./common\";\r\n\r\ninterface PeripheralPWMOptions {\r\n  io: number;\r\n  drive?: DriveType;\r\n  pull?: PullType;\r\n}\r\n\r\nexport interface PWMInterface  {\r\n  freq: (frequency: number) => void;\r\n  pulse: (value: number) => void;\r\n  duty: (value: number) => void;\r\n}\r\n\r\nexport default class PeripheralPWM implements PWMInterface {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public state: any;\r\n  public used: any;\r\n  public params: any;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.state = {};\r\n    this.used = false;\r\n  }\r\n\r\n  public sendWS(obj: any) {\r\n    const wsObj: any = {};\r\n    wsObj[\"pwm\" + this.id] = obj;\r\n    this.Obniz.send(wsObj);\r\n  }\r\n\r\n  public start(params: PeripheralPWMOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\"]);\r\n    if (err) {\r\n      throw new Error(\"pwm start param '\" + err + \"' required, but not found \");\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\"io\", \"drive\", \"pull\"]);\r\n\r\n    const io: any = this.params.io;\r\n    const ioObj: any = this.Obniz.getIO(io);\r\n\r\n    ioObj.drive(this.params.drive || \"5v\");\r\n    ioObj.pull(this.params.pull || null);\r\n\r\n    this.state = {\r\n      io,\r\n      freq: 1000,\r\n    };\r\n    this.sendWS({\r\n      io,\r\n    });\r\n    this.used = true;\r\n  }\r\n\r\n  public freq(freq: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    freq *= 1;\r\n    if (typeof freq !== \"number\") {\r\n      throw new Error(\"please provide freq in number\");\r\n    }\r\n    this.state.freq = freq;\r\n    this.sendWS({\r\n      freq,\r\n    });\r\n    if (typeof this.state.duty === \"number\") {\r\n      this.duty(this.state.duty);\r\n    }\r\n  }\r\n\r\n  public pulse(pulse_width: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n\r\n    this.state.pulse = pulse_width;\r\n    delete this.state.duty;\r\n    this.sendWS({\r\n      pulse: pulse_width,\r\n    });\r\n  }\r\n\r\n  public duty(duty: number) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    duty *= 1;\r\n    if (typeof this.state.freq !== \"number\" || this.state.freq <= 0) {\r\n      throw new Error(\"please provide freq first.\");\r\n    }\r\n    if (typeof duty !== \"number\") {\r\n      throw new Error(\"please provide duty in number\");\r\n    }\r\n    if (duty < 0) {\r\n      duty = 0;\r\n    }\r\n    if (duty > 100) {\r\n      duty = 100;\r\n    }\r\n    const pulse_width: any = (1.0 / this.state.freq) * 1000 * duty * 0.01;\r\n    this.state.duty = duty;\r\n    this.sendWS({\r\n      pulse: pulse_width,\r\n    });\r\n  }\r\n\r\n  public isUsed() {\r\n    return this.used;\r\n  }\r\n\r\n  public end() {\r\n    this.state = {};\r\n    this.sendWS(null);\r\n    this.used = false;\r\n  }\r\n\r\n  public modulate(type: any, symbol_length: any, data: any) {\r\n    if (!this.used) {\r\n      throw new Error(`pwm${this.id} is not started`);\r\n    }\r\n    this.sendWS({\r\n      modulate: {\r\n        type,\r\n        symbol_length,\r\n        data,\r\n      },\r\n    });\r\n  }\r\n}\r\n"]}