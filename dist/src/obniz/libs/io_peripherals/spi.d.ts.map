{"version":3,"sources":["../src/obniz/libs/io_peripherals/spi.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE7C,UAAU,oBAAoB;IAC5B,IAAI,EAAE,QAAQ,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;IAChB,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,cAAM,aAAa;IACV,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,SAAS,EAAG,GAAG,EAAE,CAAC;IAClB,IAAI,EAAG,OAAO,CAAC;IACf,MAAM,EAAG,oBAAoB,GAAG,IAAI,CAAC;gBAEhC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAMN,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,KAAK,CAAC,MAAM,EAAE,oBAAoB;IA8FlC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IA0B5C,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE;IAuBpB,QAAQ,CAAC,GAAG,EAAE,GAAG;IAQjB,MAAM;IAIN,GAAG,CAAC,KAAK,EAAE,GAAG;CAUtB;AAED,eAAe,aAAa,CAAC","file":"spi.d.ts","sourcesContent":["import semver = require(\"semver\");\r\nimport Obniz from \"../../index\";\r\nimport ObnizUtil from \"../utils/util\";\r\nimport {DriveType, PullType} from \"./common\";\r\n\r\ninterface PeripheralSPIOptions {\r\n  mode: \"master\";\r\n  clk?: number;\r\n  mosi?: number;\r\n  miso?: number;\r\n  frequency: number;\r\n  drive?: DriveType;\r\n  pull?: PullType;\r\n  gnd?: number;\r\n}\r\n\r\nclass PeripheralSPI {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public observers!: any[];\r\n  public used!: boolean;\r\n  public params!: PeripheralSPIOptions | null;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.observers = [];\r\n    this.used = false;\r\n    this.params = null;\r\n  }\r\n\r\n  public addObserver(callback: any) {\r\n    if (callback) {\r\n      this.observers.push(callback);\r\n    }\r\n  }\r\n\r\n  public start(params: PeripheralSPIOptions) {\r\n    const err: any = ObnizUtil._requiredKeys(params, [\"mode\", \"frequency\"]);\r\n    if (err) {\r\n      throw new Error(\"spi start param '\" + err + \"' required, but not found \");\r\n    }\r\n    this.params = ObnizUtil._keyFilter(params, [\r\n      \"mode\",\r\n      \"clk\",\r\n      \"mosi\",\r\n      \"miso\",\r\n      \"frequency\",\r\n      \"drive\",\r\n      \"pull\",\r\n      \"gnd\",\r\n    ]) as PeripheralSPIOptions;\r\n    const obj: any = {};\r\n\r\n    const ioKeys: Array<keyof PeripheralSPIOptions> = [\"clk\", \"mosi\", \"miso\", \"gnd\"];\r\n    for (const key of ioKeys) {\r\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\r\n        throw new Error(\"spi start param '\" + key + \"' are to be valid io no\");\r\n      }\r\n    }\r\n\r\n    obj[\"spi\" + this.id] = {\r\n      mode: this.params.mode,\r\n      clock: this.params.frequency, // name different\r\n    };\r\n    if (this.params.clk !== undefined) {\r\n      obj[\"spi\" + this.id].clk = this.params.clk;\r\n    }\r\n    if (this.params.mosi !== undefined) {\r\n      obj[\"spi\" + this.id].mosi = this.params.mosi;\r\n    }\r\n    if (this.params.miso !== undefined) {\r\n      obj[\"spi\" + this.id].miso = this.params.miso;\r\n    }\r\n\r\n    if (this.params.drive) {\r\n      if (this.params.clk !== undefined) {\r\n        this.Obniz.getIO(this.params.clk).drive(this.params.drive);\r\n      }\r\n      if (this.params.mosi !== undefined) {\r\n        this.Obniz.getIO(this.params.mosi).drive(this.params.drive);\r\n      }\r\n      if (this.params.miso !== undefined) {\r\n        this.Obniz.getIO(this.params.miso).drive(this.params.drive);\r\n      }\r\n    } else {\r\n      if (this.params.clk !== undefined) {\r\n        this.Obniz.getIO(this.params.clk).drive(\"5v\");\r\n      }\r\n      if (this.params.mosi !== undefined) {\r\n        this.Obniz.getIO(this.params.mosi).drive(\"5v\");\r\n      }\r\n      if (this.params.miso !== undefined) {\r\n        this.Obniz.getIO(this.params.miso).drive(\"5v\");\r\n      }\r\n    }\r\n\r\n    if (this.params.pull) {\r\n      if (this.params.clk !== undefined) {\r\n        this.Obniz.getIO(this.params.clk).pull(this.params.pull);\r\n      }\r\n      if (this.params.mosi !== undefined) {\r\n        this.Obniz.getIO(this.params.mosi).pull(this.params.pull);\r\n      }\r\n      if (this.params.miso !== undefined) {\r\n        this.Obniz.getIO(this.params.miso).pull(this.params.pull);\r\n      }\r\n    } else {\r\n      if (this.params.clk !== undefined) {\r\n        this.Obniz.getIO(this.params.clk).pull(null);\r\n      }\r\n      if (this.params.mosi !== undefined) {\r\n        this.Obniz.getIO(this.params.mosi).pull(null);\r\n      }\r\n      if (this.params.miso !== undefined) {\r\n        this.Obniz.getIO(this.params.miso).pull(null);\r\n      }\r\n    }\r\n\r\n    if (this.params.gnd !== undefined) {\r\n      this.Obniz.getIO(this.params.gnd).output(false);\r\n      const ioNames: any = {};\r\n      ioNames[this.params.gnd] = \"gnd\";\r\n      if (this.Obniz.display) {\r\n        this.Obniz.display.setPinNames(\"spi\" + this.id, ioNames);\r\n      }\r\n    }\r\n    this.used = true;\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public writeWait(data: number[]): Promise<number[]> {\r\n    if (!this.used) {\r\n      throw new Error(`spi${this.id} is not started`);\r\n    }\r\n    if (semver.lte(this.Obniz.firmware_ver, \"1.0.2\") && data.length > 32) {\r\n      throw new Error(\r\n        `with your obniz ${\r\n          this.Obniz.firmware_ver\r\n        }. spi max length=32byte but yours ${\r\n          data.length\r\n        }. Please update obniz firmware`,\r\n      );\r\n    }\r\n\r\n    const self: any = this;\r\n    return new Promise((resolve: any, reject: any) => {\r\n      self.addObserver(resolve);\r\n      const obj: any = {};\r\n      obj[\"spi\" + self.id] = {\r\n        data,\r\n        read: true,\r\n      };\r\n      self.Obniz.send(obj);\r\n    });\r\n  }\r\n\r\n  public write(data: number[]) {\r\n    if (!this.used) {\r\n      throw new Error(`spi${this.id} is not started`);\r\n    }\r\n    if (semver.lte(this.Obniz.firmware_ver, \"1.0.2\") && data.length > 32) {\r\n      throw new Error(\r\n        `with your obniz ${\r\n          this.Obniz.firmware_ver\r\n        }. spi max length=32byte but yours ${\r\n          data.length\r\n        }. Please update obniz firmware`,\r\n      );\r\n    }\r\n\r\n    const self: any = this;\r\n    const obj: any = {};\r\n    obj[\"spi\" + self.id] = {\r\n      data,\r\n      read: false,\r\n    };\r\n    self.Obniz.send(obj);\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    // TODO: we should compare byte length from sent\r\n    const callback: any = this.observers.shift();\r\n    if (callback) {\r\n      callback(obj.data);\r\n    }\r\n  }\r\n\r\n  public isUsed() {\r\n    return this.used;\r\n  }\r\n\r\n  public end(reuse: any) {\r\n    const self: any = this;\r\n    const obj: any = {};\r\n    obj[\"spi\" + self.id] = null;\r\n    this.params = null;\r\n    self.Obniz.send(obj);\r\n    if (!reuse) {\r\n      this.used = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PeripheralSPI;\r\n"]}