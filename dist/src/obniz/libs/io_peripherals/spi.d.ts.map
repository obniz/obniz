{"version":3,"sources":["../src/obniz/libs/io_peripherals/spi.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE7C,UAAU,oBAAoB;IAC5B,IAAI,EAAE,QAAQ,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;IAChB,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,cAAM,aAAa;IACV,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,SAAS,EAAG,GAAG,EAAE,CAAC;IAClB,IAAI,EAAG,OAAO,CAAC;IACf,MAAM,EAAG,oBAAoB,GAAG,IAAI,CAAC;gBAEhC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAMN,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,KAAK,CAAC,MAAM,EAAE,oBAAoB;IA8FlC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IA0B5C,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE;IAuBpB,QAAQ,CAAC,GAAG,EAAE,GAAG;IAQjB,MAAM;IAIN,GAAG,CAAC,KAAK,EAAE,GAAG;CAUtB;AAED,eAAe,aAAa,CAAC","file":"spi.d.ts","sourcesContent":["import semver = require(\"semver\");\nimport Obniz from \"../../index\";\nimport ObnizUtil from \"../utils/util\";\nimport {DriveType, PullType} from \"./common\";\n\ninterface PeripheralSPIOptions {\n  mode: \"master\";\n  clk?: number;\n  mosi?: number;\n  miso?: number;\n  frequency: number;\n  drive?: DriveType;\n  pull?: PullType;\n  gnd?: number;\n}\n\nclass PeripheralSPI {\n  public Obniz: Obniz;\n  public id: number;\n  public observers!: any[];\n  public used!: boolean;\n  public params!: PeripheralSPIOptions | null;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.observers = [];\n    this.used = false;\n    this.params = null;\n  }\n\n  public addObserver(callback: any) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public start(params: PeripheralSPIOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"mode\", \"frequency\"]);\n    if (err) {\n      throw new Error(\"spi start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"mode\",\n      \"clk\",\n      \"mosi\",\n      \"miso\",\n      \"frequency\",\n      \"drive\",\n      \"pull\",\n      \"gnd\",\n    ]) as PeripheralSPIOptions;\n    const obj: any = {};\n\n    const ioKeys: Array<keyof PeripheralSPIOptions> = [\"clk\", \"mosi\", \"miso\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\n        throw new Error(\"spi start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    obj[\"spi\" + this.id] = {\n      mode: this.params.mode,\n      clock: this.params.frequency, // name different\n    };\n    if (this.params.clk !== undefined) {\n      obj[\"spi\" + this.id].clk = this.params.clk;\n    }\n    if (this.params.mosi !== undefined) {\n      obj[\"spi\" + this.id].mosi = this.params.mosi;\n    }\n    if (this.params.miso !== undefined) {\n      obj[\"spi\" + this.id].miso = this.params.miso;\n    }\n\n    if (this.params.drive) {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).drive(this.params.drive);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).drive(this.params.drive);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).drive(this.params.drive);\n      }\n    } else {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).drive(\"5v\");\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).drive(\"5v\");\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).drive(\"5v\");\n      }\n    }\n\n    if (this.params.pull) {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).pull(this.params.pull);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).pull(this.params.pull);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).pull(this.params.pull);\n      }\n    } else {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).pull(null);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).pull(null);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).pull(null);\n      }\n    }\n\n    if (this.params.gnd !== undefined) {\n      this.Obniz.getIO(this.params.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.params.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"spi\" + this.id, ioNames);\n      }\n    }\n    this.used = true;\n    this.Obniz.send(obj);\n  }\n\n  public writeWait(data: number[]): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`spi${this.id} is not started`);\n    }\n    if (semver.lte(this.Obniz.firmware_ver, \"1.0.2\") && data.length > 32) {\n      throw new Error(\n        `with your obniz ${\n          this.Obniz.firmware_ver\n        }. spi max length=32byte but yours ${\n          data.length\n        }. Please update obniz firmware`,\n      );\n    }\n\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"spi\" + self.id] = {\n        data,\n        read: true,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  public write(data: number[]) {\n    if (!this.used) {\n      throw new Error(`spi${this.id} is not started`);\n    }\n    if (semver.lte(this.Obniz.firmware_ver, \"1.0.2\") && data.length > 32) {\n      throw new Error(\n        `with your obniz ${\n          this.Obniz.firmware_ver\n        }. spi max length=32byte but yours ${\n          data.length\n        }. Please update obniz firmware`,\n      );\n    }\n\n    const self: any = this;\n    const obj: any = {};\n    obj[\"spi\" + self.id] = {\n      data,\n      read: false,\n    };\n    self.Obniz.send(obj);\n  }\n\n  public notified(obj: any) {\n    // TODO: we should compare byte length from sent\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(obj.data);\n    }\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n\n  public end(reuse: any) {\n    const self: any = this;\n    const obj: any = {};\n    obj[\"spi\" + self.id] = null;\n    this.params = null;\n    self.Obniz.send(obj);\n    if (!reuse) {\n      this.used = false;\n    }\n  }\n}\n\nexport default PeripheralSPI;\n"]}