{"version":3,"sources":["../src/obniz/libs/io_peripherals/io.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE7C,cAAM,YAAY;IACT,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,EAAG,OAAO,CAAC;IAChB,SAAS,EAAG,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI,CAAC,CAAC;IAC5C,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI,CAAC;gBAE/B,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAKN,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,MAAM,CAAC,KAAK,EAAE,OAAO;IAQrB,KAAK,CAAC,KAAK,EAAE,SAAS;IA0BtB,IAAI,CAAC,MAAM,EAAE,QAAQ;IA6BrB,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI;IAWxC,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC;IAa7B,GAAG;IAMH,QAAQ,CAAC,GAAG,EAAE,GAAG;CAyBzB;AAED,eAAe,YAAY,CAAC","file":"io.d.ts","sourcesContent":["import Obniz from \"../../index\";\nimport {DriveType, PullType} from \"./common\";\n\nclass PeripheralIO {\n  public Obniz: Obniz;\n  public id: number;\n  public value!: boolean;\n  public observers!: Array<(value: boolean) => void>;\n  public onchange?: (value: boolean) => void;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.value = false;\n    this.observers = [];\n  }\n\n  public addObserver(callback: any) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  public output(value: boolean) {\n    value = !!value;\n    const obj: any = {};\n    obj[\"io\" + this.id] = value;\n    this.value = value;\n    this.Obniz.send(obj);\n  }\n\n  public drive(drive: DriveType) {\n    if (typeof drive !== \"string\") {\n      throw new Error(\"please specify drive methods in string\");\n    }\n    let output_type: any = \"\";\n    switch (drive) {\n      case \"5v\":\n        output_type = \"push-pull5v\";\n        break;\n      case \"3v\":\n        output_type = \"push-pull3v\";\n        break;\n      case \"open-drain\":\n        output_type = \"open-drain\";\n        break;\n      default:\n        throw new Error(\"unknown drive method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      output_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public pull(updown: PullType) {\n    if (typeof updown !== \"string\" && updown !== null) {\n      throw new Error(\"please specify pull methods in string\");\n    }\n    let pull_type: any = \"\";\n    switch (updown) {\n      case \"5v\":\n        pull_type = \"pull-up5v\";\n        break;\n      case \"3v\":\n        pull_type = \"pull-up3v\";\n        break;\n      case \"0v\":\n        pull_type = \"pull-down\";\n        break;\n      case null:\n        pull_type = \"float\";\n        break;\n      default:\n        throw new Error(\"unknown pull_type method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      pull_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  public input(callback: (value: boolean) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      direction: \"input\",\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  public inputWait(): Promise<boolean> {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"io\" + self.id] = {\n        direction: \"input\",\n        stream: false,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  public end() {\n    const obj: any = {};\n    obj[\"io\" + this.id] = null;\n    this.Obniz.send(obj);\n  }\n\n  public notified(obj: any) {\n    if (typeof obj === \"boolean\") {\n      this.value = obj;\n      const callback: any = this.observers.shift();\n      if (callback) {\n        callback(obj);\n      }\n      if (typeof this.onchange === \"function\") {\n        this.onchange(obj);\n      }\n    } else if (obj && typeof obj === \"object\") {\n      if (obj.warning) {\n        this.Obniz.warning({\n          alert: \"warning\",\n          message: `io${this.id}: ${obj.warning.message}`,\n        });\n      }\n      if (obj.error) {\n        this.Obniz.error({\n          alert: \"error\",\n          message: `io${this.id}: ${obj.error.message}`,\n        });\n      }\n    }\n  }\n}\n\nexport default PeripheralIO;\n"]}