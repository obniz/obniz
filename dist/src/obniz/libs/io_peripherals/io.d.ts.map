{"version":3,"sources":["../src/obniz/libs/io_peripherals/io.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,UAAU,CAAC;AAE7C,cAAM,YAAY;IACT,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,EAAG,OAAO,CAAC;IAChB,SAAS,EAAG,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI,CAAC,CAAC;IAC5C,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI,CAAC;gBAE/B,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAKN,WAAW,CAAC,QAAQ,EAAE,GAAG;IAMzB,MAAM,CAAC,KAAK,EAAE,OAAO;IAQrB,KAAK,CAAC,KAAK,EAAE,SAAS;IA0BtB,IAAI,CAAC,MAAM,EAAE,QAAQ;IA6BrB,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI;IAWxC,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC;IAa7B,GAAG;IAMH,QAAQ,CAAC,GAAG,EAAE,GAAG;CAyBzB;AAED,eAAe,YAAY,CAAC","file":"io.d.ts","sourcesContent":["import Obniz from \"../../index\";\r\nimport {DriveType, PullType} from \"./common\";\r\n\r\nclass PeripheralIO {\r\n  public Obniz: Obniz;\r\n  public id: number;\r\n  public value!: boolean;\r\n  public observers!: Array<(value: boolean) => void>;\r\n  public onchange?: (value: boolean) => void;\r\n\r\n  constructor(obniz: Obniz, id: number) {\r\n    this.Obniz = obniz;\r\n    this.id = id;\r\n    this._reset();\r\n  }\r\n\r\n  public _reset() {\r\n    this.value = false;\r\n    this.observers = [];\r\n  }\r\n\r\n  public addObserver(callback: any) {\r\n    if (callback) {\r\n      this.observers.push(callback);\r\n    }\r\n  }\r\n\r\n  public output(value: boolean) {\r\n    value = !!value;\r\n    const obj: any = {};\r\n    obj[\"io\" + this.id] = value;\r\n    this.value = value;\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public drive(drive: DriveType) {\r\n    if (typeof drive !== \"string\") {\r\n      throw new Error(\"please specify drive methods in string\");\r\n    }\r\n    let output_type: any = \"\";\r\n    switch (drive) {\r\n      case \"5v\":\r\n        output_type = \"push-pull5v\";\r\n        break;\r\n      case \"3v\":\r\n        output_type = \"push-pull3v\";\r\n        break;\r\n      case \"open-drain\":\r\n        output_type = \"open-drain\";\r\n        break;\r\n      default:\r\n        throw new Error(\"unknown drive method\");\r\n    }\r\n\r\n    const obj: any = {};\r\n    obj[\"io\" + this.id] = {\r\n      output_type,\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public pull(updown: PullType) {\r\n    if (typeof updown !== \"string\" && updown !== null) {\r\n      throw new Error(\"please specify pull methods in string\");\r\n    }\r\n    let pull_type: any = \"\";\r\n    switch (updown) {\r\n      case \"5v\":\r\n        pull_type = \"pull-up5v\";\r\n        break;\r\n      case \"3v\":\r\n        pull_type = \"pull-up3v\";\r\n        break;\r\n      case \"0v\":\r\n        pull_type = \"pull-down\";\r\n        break;\r\n      case null:\r\n        pull_type = \"float\";\r\n        break;\r\n      default:\r\n        throw new Error(\"unknown pull_type method\");\r\n    }\r\n\r\n    const obj: any = {};\r\n    obj[\"io\" + this.id] = {\r\n      pull_type,\r\n    };\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public input(callback: (value: boolean) => void) {\r\n    this.onchange = callback;\r\n    const obj: any = {};\r\n    obj[\"io\" + this.id] = {\r\n      direction: \"input\",\r\n      stream: true,\r\n    };\r\n    this.Obniz.send(obj);\r\n    return this.value;\r\n  }\r\n\r\n  public inputWait(): Promise<boolean> {\r\n    const self: any = this;\r\n    return new Promise((resolve: any, reject: any) => {\r\n      self.addObserver(resolve);\r\n      const obj: any = {};\r\n      obj[\"io\" + self.id] = {\r\n        direction: \"input\",\r\n        stream: false,\r\n      };\r\n      self.Obniz.send(obj);\r\n    });\r\n  }\r\n\r\n  public end() {\r\n    const obj: any = {};\r\n    obj[\"io\" + this.id] = null;\r\n    this.Obniz.send(obj);\r\n  }\r\n\r\n  public notified(obj: any) {\r\n    if (typeof obj === \"boolean\") {\r\n      this.value = obj;\r\n      const callback: any = this.observers.shift();\r\n      if (callback) {\r\n        callback(obj);\r\n      }\r\n      if (typeof this.onchange === \"function\") {\r\n        this.onchange(obj);\r\n      }\r\n    } else if (obj && typeof obj === \"object\") {\r\n      if (obj.warning) {\r\n        this.Obniz.warning({\r\n          alert: \"warning\",\r\n          message: `io${this.id}: ${obj.warning.message}`,\r\n        });\r\n      }\r\n      if (obj.error) {\r\n        this.Obniz.error({\r\n          alert: \"error\",\r\n          message: `io${this.id}: ${obj.error.message}`,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default PeripheralIO;\r\n"]}