{"version":3,"sources":["../src/obniz/libs/utils/util.ts"],"names":[],"mappings":"AAAA,cAAM,SAAS;WAEC,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAe/C;;;OAGG;WACW,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAapC,gBAAgB,CAAC,IAAI,EAAE,GAAG;WAa1B,gBAAgB,CAAC,GAAG,EAAE,GAAG;WAKzB,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAMrF,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;gBAEb,KAAK,EAAE,GAAG;IAIf,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAsBnD;AAED,eAAe,SAAS,CAAC","file":"util.d.ts","sourcesContent":["class ObnizUtil {\r\n\r\n  public static _keyFilter(params: any, keys: any) {\r\n    let filterdParams: any = {};\r\n    if (typeof params !== \"object\") {\r\n      return filterdParams;\r\n    }\r\n    filterdParams = Object.keys(params)\r\n      .filter((key) => keys.includes(key))\r\n      .reduce((obj: any, key) => {\r\n        obj[key] = params[key];\r\n        return obj;\r\n      }, {});\r\n\r\n    return filterdParams;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {String} key name of not found.\r\n   */\r\n  public static _requiredKeys(params: any, keys: any) {\r\n    if (typeof params !== \"object\") {\r\n      return keys[0];\r\n    }\r\n\r\n    for (const index in keys) {\r\n      if (!(keys[index] in params)) {\r\n        return keys[index];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static dataArray2string(data: any) {\r\n    let string: any = null;\r\n    try {\r\n      const StringDecoder: any = require(\"string_decoder\").StringDecoder;\r\n      if (StringDecoder) {\r\n        string = new StringDecoder(\"utf8\").write(Buffer.from(data));\r\n      }\r\n    } catch (e) {\r\n      // this.obniz.error(e);\r\n    }\r\n    return string;\r\n  }\r\n\r\n  public static string2dataArray(str: any) {\r\n    const buf: any = Buffer.from(str);\r\n    return [...buf];\r\n  }\r\n\r\n  public static assertNumber(min: number, max: number, variable_name: string, variable: number) {\r\n    if (!(min <= variable && variable <= max)) {\r\n      throw new Error(`${variable_name} is out of range.Input value : ${variable} .value range [ ${min} <= ${variable_name} <= ${max} ]`);\r\n    }\r\n  }\r\n\r\n  public obniz: any;\r\n  public width: any;\r\n  public height: any;\r\n  public createCanvas: any;\r\n\r\n  constructor(obniz: any) {\r\n    this.obniz = obniz;\r\n  }\r\n\r\n  public createCanvasContext(width: any, height: any) {\r\n    if (this.obniz.isNode) {\r\n      try {\r\n        const {createCanvas} = require(\"canvas\");\r\n        return createCanvas(this.width, this.height);\r\n      } catch (e) {\r\n        throw new Error(\r\n          \"obniz.js require node-canvas to draw rich contents. see more detail on docs\",\r\n        );\r\n      }\r\n    } else {\r\n      const canvas: any = document.createElement(\"canvas\");\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      (canvas.style as any)[\"-webkit-font-smoothing\"] = \"none\";\r\n      const body: any = document.getElementsByTagName(\"body\")[0];\r\n      body.appendChild(canvas);\r\n\r\n      const ctx: any = canvas.getContext(\"2d\");\r\n      return ctx;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ObnizUtil;\r\n"]}