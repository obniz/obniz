{"version":3,"sources":["../src/obniz/libs/utils/util.ts"],"names":[],"mappings":"AAAA,cAAM,SAAS;WAEC,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAe/C;;;OAGG;WACW,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAapC,gBAAgB,CAAC,IAAI,EAAE,GAAG;WAa1B,gBAAgB,CAAC,GAAG,EAAE,GAAG;IAKhC,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;gBAEb,KAAK,EAAE,GAAG;IAIf,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAsBnD;AAED,eAAe,SAAS,CAAC","file":"util.d.ts","sourcesContent":["class ObnizUtil {\n\n  public static _keyFilter(params: any, keys: any) {\n    let filterdParams: any = {};\n    if (typeof params !== \"object\") {\n      return filterdParams;\n    }\n    filterdParams = Object.keys(params)\n      .filter((key) => keys.includes(key))\n      .reduce((obj: any, key) => {\n        obj[key] = params[key];\n        return obj;\n      }, {});\n\n    return filterdParams;\n  }\n\n  /**\n   *\n   * @return {String} key name of not found.\n   */\n  public static _requiredKeys(params: any, keys: any) {\n    if (typeof params !== \"object\") {\n      return keys[0];\n    }\n\n    for (const index in keys) {\n      if (!(keys[index] in params)) {\n        return keys[index];\n      }\n    }\n    return null;\n  }\n\n  public static dataArray2string(data: any) {\n    let string: any = null;\n    try {\n      const StringDecoder: any = require(\"string_decoder\").StringDecoder;\n      if (StringDecoder) {\n        string = new StringDecoder(\"utf8\").write(Buffer.from(data));\n      }\n    } catch (e) {\n      // this.obniz.error(e);\n    }\n    return string;\n  }\n\n  public static string2dataArray(str: any) {\n    const buf: any = Buffer.from(str);\n    return [...buf];\n  }\n\n  public obniz: any;\n  public width: any;\n  public height: any;\n  public createCanvas: any;\n\n  constructor(obniz: any) {\n    this.obniz = obniz;\n  }\n\n  public createCanvasContext(width: any, height: any) {\n    if (this.obniz.isNode) {\n      try {\n        const {createCanvas} = require(\"canvas\");\n        return createCanvas(this.width, this.height);\n      } catch (e) {\n        throw new Error(\n          \"obniz.js require node-canvas to draw rich contents. see more detail on docs\",\n        );\n      }\n    } else {\n      const canvas: any = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      (canvas.style as any)[\"-webkit-font-smoothing\"] = \"none\";\n      const body: any = document.getElementsByTagName(\"body\")[0];\n      body.appendChild(canvas);\n\n      const ctx: any = canvas.getContext(\"2d\");\n      return ctx;\n    }\n  }\n}\n\nexport default ObnizUtil;\n"]}