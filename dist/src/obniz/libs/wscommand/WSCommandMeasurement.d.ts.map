{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandMeasurement.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,oBAAqB,SAAQ,SAAS;IACnC,MAAM,EAAE,GAAG,CAAC;IACZ,uBAAuB,EAAE,GAAG,CAAC;IAC7B,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAW5B,IAAI,CAAC,MAAM,EAAE,GAAG;IA0BhB,aAAa,CAAC,IAAI,EAAE,GAAG;IAiBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAyBhE;AAED,eAAe,oBAAoB,CAAC","file":"WSCommandMeasurement.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandMeasurement extends WSCommand {\r\n  public module: any;\r\n  public _CommandMeasurementEcho: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 12;\r\n\r\n    this._CommandMeasurementEcho = 0;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public echo(params: any) {\r\n    const triggerIO: any = params.echo.io_pulse;\r\n    const triggerPosNeg: any = params.echo.pulse === \"negative\" ? false : true;\r\n    const triggerWidthUs: any = Math.floor(params.echo.pulse_width * 1000);\r\n    const echoIO: any = params.echo.io_echo;\r\n    const responseCount: any = params.echo.measure_edges;\r\n    let timeoutUs: any = params.echo.timeout * 1000;\r\n    timeoutUs = parseInt(timeoutUs);\r\n\r\n    const buf: any = new Uint8Array(13);\r\n    buf[0] = 0;\r\n    buf[1] = triggerIO;\r\n    buf[2] = triggerPosNeg ? 1 : 0;\r\n    buf[3] = triggerWidthUs >> (8 * 3);\r\n    buf[4] = triggerWidthUs >> (8 * 2);\r\n    buf[5] = triggerWidthUs >> 8;\r\n    buf[6] = triggerWidthUs;\r\n    buf[7] = echoIO;\r\n    buf[8] = responseCount;\r\n    buf[9] = timeoutUs >> (8 * 3);\r\n    buf[10] = timeoutUs >> (8 * 2);\r\n    buf[11] = timeoutUs >> 8;\r\n    buf[12] = timeoutUs;\r\n    this.sendCommand(this._CommandMeasurementEcho, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    const module: any = json.measure;\r\n    if (module === undefined) {\r\n      return;\r\n    }\r\n    const schemaData: any = [{uri: \"/request/measure/echo\", onValid: this.echo}];\r\n    const res: any = this.validateCommandSchema(schemaData, module, \"measure\");\r\n\r\n    if (res.valid === 0) {\r\n      if (res.invalidButLike.length > 0) {\r\n        throw new Error(res.invalidButLike[0].message);\r\n      } else {\r\n        throw new this.WSCommandNotFoundError(`[measure]unknown command`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (func === this._CommandMeasurementEcho) {\r\n      let index: any = 0;\r\n      const count: any = parseInt(payload[index++]);\r\n      const array: any = [];\r\n      for (let i = 0; i < count; i++) {\r\n        let timing: any;\r\n        const edge: any = payload[index++] > 0 ? true : false;\r\n        timing = payload[index++] << (8 * 3);\r\n        timing += payload[index++] << (8 * 2);\r\n        timing += payload[index++] << 8;\r\n        timing += payload[index++];\r\n        timing = timing / 1000;\r\n        array.push({\r\n          edge,\r\n          timing,\r\n        });\r\n      }\r\n      objToSend.measure = {\r\n        echo: array,\r\n      };\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandMeasurement;\r\n"]}