{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandDirective.ts"],"names":[],"mappings":"AAEA,OAAO,SAAS,MAAM,aAAa,CAAC;AAIpC,MAAM,CAAC,OAAO,OAAO,kBAAmB,SAAQ,SAAS;IAC/C,iBAAiB,EAAE,GAAG,CAAC;IAE/B,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC;IACzB,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC;IACrC,SAAS,CAAC,aAAa,EAAE,MAAM,CAAC;IAChC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC;IACjC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC;;IAgB1B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG;IAkHrC,WAAW,CAAC,MAAM,EAAE,GAAG;IAkBvB,aAAa,CAAC,IAAI,EAAE,GAAG;IAiCvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAgBhE","file":"WSCommandDirective.d.ts","sourcesContent":["import semver = require(\"semver\");\nimport ObnizUtil from \"../utils/util\";\nimport WSCommand from \"./WSCommand\";\nimport CommandIO from \"./WSCommandIO\";\nimport CommandPWM from \"./WSCommandPWM\";\n\nexport default class WSCommandDirective extends WSCommand {\n  public  availableCommands: any;\n\n  protected module: number;\n  protected _CommandRegistrate: number;\n  protected _CommandPause: number;\n  protected _CommandResume: number;\n  protected _CommandNotify: number;\n\n  constructor() {\n    super();\n    this.module = 1;\n\n    this._CommandRegistrate = 0;\n    this._CommandPause = 1;\n    this._CommandResume = 2;\n    this._CommandNotify = 3;\n\n    this.availableCommands = [new CommandIO(), new CommandPWM()];\n  }\n\n  // Commands\n\n  public init(params: any, originalParams: any) {\n    const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\n    let frame: any;\n    let offset: any = 0;\n    if (semver.lt(this._hw.firmware, \"2.0.0\")) {\n      // < 2.0.0\n      frame = new Uint8Array(1 + nameArray.length + 1);\n      // name //\n      frame[offset++] = nameArray.length + 1;\n      frame.set(nameArray, offset);\n      offset += nameArray.length;\n      frame[offset++] = 0; // null string\n      if (\n        params.animation.status === \"registrate\" ||\n        typeof params.animation.repeat === \"number\"\n      ) {\n        throw new Error(\"you need to update your firmware >= 2.0.0\");\n      }\n    } else {\n      frame = new Uint8Array(1 + nameArray.length + 1 + 1 + 4);\n      // name //\n      frame[offset++] = nameArray.length + 1;\n      frame.set(nameArray, offset);\n      offset += nameArray.length;\n      frame[offset++] = 0; // null string\n      // type and count //\n      let type: any = 0;\n\n      let repeat_count: any = 0;\n      if (params.animation.status === \"loop\") {\n        type = 1; // auto start\n      }\n      if (typeof params.animation.repeat === \"number\") {\n        repeat_count = params.animation.repeat;\n        type += 2;\n      }\n      frame[offset++] = type;\n      frame[offset++] = repeat_count >> (8 * 3);\n      frame[offset++] = repeat_count >> (8 * 2);\n      frame[offset++] = repeat_count >> (8 * 1);\n      frame[offset++] = repeat_count;\n    }\n\n    const commandJsonArray: any = params.animation.states;\n\n    for (let i = 0; i < commandJsonArray.length; i++) {\n      const obj: any = commandJsonArray[i];\n      const duration: any = Math.floor(obj.duration * 1000);\n      const state: any = obj.state;\n\n      // Dry run commands\n      let parsedCommands: any = JSON.parse(JSON.stringify(state));\n      if (!Array.isArray(parsedCommands)) {\n        parsedCommands = [parsedCommands];\n      }\n      let compressed: any = null;\n      for (\n        let commandIndex: any = 0;\n        commandIndex < parsedCommands.length;\n        commandIndex++\n      ) {\n        const _frame: any = WSCommand.compress(\n          this.availableCommands,\n          parsedCommands[commandIndex],\n        );\n        if (!_frame) {\n          throw new Error(\n            \"[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.\",\n          );\n        }\n        if (compressed) {\n          const _combined: any = new Uint8Array(compressed.length + _frame.length);\n          _combined.set(compressed, 0);\n          _combined.set(_frame, compressed.length);\n          compressed = _combined;\n        } else {\n          compressed = _frame;\n        }\n      }\n      if (!compressed) {\n        throw new Error(\n          \"[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.\",\n        );\n      }\n      const length: any = compressed.byteLength;\n\n      const commandHeader: any = new Uint8Array(8);\n      commandHeader[0] = length >> (8 * 3);\n      commandHeader[1] = length >> (8 * 2);\n      commandHeader[2] = length >> (8 * 1);\n      commandHeader[3] = length;\n      commandHeader[4] = duration >> (8 * 3);\n      commandHeader[5] = duration >> (8 * 2);\n      commandHeader[6] = duration >> (8 * 1);\n      commandHeader[7] = duration;\n\n      const combined: any = new Uint8Array(\n        frame.byteLength + commandHeader.byteLength + compressed.byteLength,\n      );\n      combined.set(frame, 0);\n      combined.set(commandHeader, frame.byteLength);\n      combined.set(compressed, frame.byteLength + commandHeader.byteLength);\n\n      frame = combined;\n    }\n\n    if (frame.byteLength > 1000) {\n      // 1kbyte over\n      throw new Error(\"[io.animation]Too big animation datas\");\n    }\n\n    this.sendCommand(this._CommandRegistrate, frame);\n  }\n\n  public changeState(params: any) {\n    if (params.animation.status === \"resume\") {\n      const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\n      const frame: any = new Uint8Array(nameArray.length + 2);\n      frame[0] = nameArray.length + 1;\n      frame.set(nameArray, 1);\n      frame[frame.byteLength - 1] = 0;\n      this.sendCommand(this._CommandResume, frame);\n    } else if (params.animation.status === \"pause\") {\n      const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\n      const frame: any = new Uint8Array(nameArray.length + 2);\n      frame[0] = nameArray.length + 1;\n      frame.set(nameArray, 1);\n      frame[frame.byteLength - 1] = 0;\n      this.sendCommand(this._CommandPause, frame);\n    }\n  }\n\n  public parseFromJson(json: any) {\n    let parentCommandNotFound: any = false;\n    try {\n      super.parseFromJson(json);\n    } catch (err) {\n      if (err instanceof this.WSCommandNotFoundError) {\n        parentCommandNotFound = true;\n      } else {\n        throw err;\n      }\n    }\n\n    const module: any = json.io;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [\n      {uri: \"/request/ioAnimation/init\", onValid: this.init},\n      {uri: \"/request/ioAnimation/changeState\", onValid: this.changeState},\n    ];\n    const res: any = this.validateCommandSchema(schemaData, module, \"io\", module);\n\n    if (res.valid === 0 && parentCommandNotFound) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        const WSCommandNotFoundError: any = this.WSCommandNotFoundError;\n        throw new WSCommandNotFoundError(`[io.animation]unknown command`);\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    if (func === this._CommandNotify) {\n      const name: any = ObnizUtil.dataArray2string(\n        payload.slice(2, payload.byteLength - 1),\n      ); // remove null string\n\n      objToSend.io = {\n        animation: {\n          name,\n          status: \"finish\",\n        },\n      };\n    } else {\n      super.notifyFromBinary(objToSend, func, payload);\n    }\n  }\n}\n"]}