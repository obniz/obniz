{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandDirective.ts"],"names":[],"mappings":"AAEA,OAAO,SAAS,MAAM,aAAa,CAAC;AAIpC,MAAM,CAAC,OAAO,OAAO,kBAAmB,SAAQ,SAAS;IAC/C,iBAAiB,EAAE,GAAG,CAAC;IAE/B,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC;IACzB,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC;IACrC,SAAS,CAAC,aAAa,EAAE,MAAM,CAAC;IAChC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC;IACjC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC;;IAgB1B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG;IAkHrC,WAAW,CAAC,MAAM,EAAE,GAAG;IAkBvB,aAAa,CAAC,IAAI,EAAE,GAAG;IAiCvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAgBhE","file":"WSCommandDirective.d.ts","sourcesContent":["import semver = require(\"semver\");\r\nimport ObnizUtil from \"../utils/util\";\r\nimport WSCommand from \"./WSCommand\";\r\nimport CommandIO from \"./WSCommandIO\";\r\nimport CommandPWM from \"./WSCommandPWM\";\r\n\r\nexport default class WSCommandDirective extends WSCommand {\r\n  public  availableCommands: any;\r\n\r\n  protected module: number;\r\n  protected _CommandRegistrate: number;\r\n  protected _CommandPause: number;\r\n  protected _CommandResume: number;\r\n  protected _CommandNotify: number;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 1;\r\n\r\n    this._CommandRegistrate = 0;\r\n    this._CommandPause = 1;\r\n    this._CommandResume = 2;\r\n    this._CommandNotify = 3;\r\n\r\n    this.availableCommands = [new CommandIO(), new CommandPWM()];\r\n  }\r\n\r\n  // Commands\r\n\r\n  public init(params: any, originalParams: any) {\r\n    const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\r\n    let frame: any;\r\n    let offset: any = 0;\r\n    if (semver.lt(this._hw.firmware, \"2.0.0\")) {\r\n      // < 2.0.0\r\n      frame = new Uint8Array(1 + nameArray.length + 1);\r\n      // name //\r\n      frame[offset++] = nameArray.length + 1;\r\n      frame.set(nameArray, offset);\r\n      offset += nameArray.length;\r\n      frame[offset++] = 0; // null string\r\n      if (\r\n        params.animation.status === \"registrate\" ||\r\n        typeof params.animation.repeat === \"number\"\r\n      ) {\r\n        throw new Error(\"you need to update your firmware >= 2.0.0\");\r\n      }\r\n    } else {\r\n      frame = new Uint8Array(1 + nameArray.length + 1 + 1 + 4);\r\n      // name //\r\n      frame[offset++] = nameArray.length + 1;\r\n      frame.set(nameArray, offset);\r\n      offset += nameArray.length;\r\n      frame[offset++] = 0; // null string\r\n      // type and count //\r\n      let type: any = 0;\r\n\r\n      let repeat_count: any = 0;\r\n      if (params.animation.status === \"loop\") {\r\n        type = 1; // auto start\r\n      }\r\n      if (typeof params.animation.repeat === \"number\") {\r\n        repeat_count = params.animation.repeat;\r\n        type += 2;\r\n      }\r\n      frame[offset++] = type;\r\n      frame[offset++] = repeat_count >> (8 * 3);\r\n      frame[offset++] = repeat_count >> (8 * 2);\r\n      frame[offset++] = repeat_count >> (8 * 1);\r\n      frame[offset++] = repeat_count;\r\n    }\r\n\r\n    const commandJsonArray: any = params.animation.states;\r\n\r\n    for (let i = 0; i < commandJsonArray.length; i++) {\r\n      const obj: any = commandJsonArray[i];\r\n      const duration: any = Math.floor(obj.duration * 1000);\r\n      const state: any = obj.state;\r\n\r\n      // Dry run commands\r\n      let parsedCommands: any = JSON.parse(JSON.stringify(state));\r\n      if (!Array.isArray(parsedCommands)) {\r\n        parsedCommands = [parsedCommands];\r\n      }\r\n      let compressed: any = null;\r\n      for (\r\n        let commandIndex: any = 0;\r\n        commandIndex < parsedCommands.length;\r\n        commandIndex++\r\n      ) {\r\n        const _frame: any = WSCommand.compress(\r\n          this.availableCommands,\r\n          parsedCommands[commandIndex],\r\n        );\r\n        if (!_frame) {\r\n          throw new Error(\r\n            \"[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.\",\r\n          );\r\n        }\r\n        if (compressed) {\r\n          const _combined: any = new Uint8Array(compressed.length + _frame.length);\r\n          _combined.set(compressed, 0);\r\n          _combined.set(_frame, compressed.length);\r\n          compressed = _combined;\r\n        } else {\r\n          compressed = _frame;\r\n        }\r\n      }\r\n      if (!compressed) {\r\n        throw new Error(\r\n          \"[io.animation.states.state]only io or pwm commands. Pleave provide state at least one of them.\",\r\n        );\r\n      }\r\n      const length: any = compressed.byteLength;\r\n\r\n      const commandHeader: any = new Uint8Array(8);\r\n      commandHeader[0] = length >> (8 * 3);\r\n      commandHeader[1] = length >> (8 * 2);\r\n      commandHeader[2] = length >> (8 * 1);\r\n      commandHeader[3] = length;\r\n      commandHeader[4] = duration >> (8 * 3);\r\n      commandHeader[5] = duration >> (8 * 2);\r\n      commandHeader[6] = duration >> (8 * 1);\r\n      commandHeader[7] = duration;\r\n\r\n      const combined: any = new Uint8Array(\r\n        frame.byteLength + commandHeader.byteLength + compressed.byteLength,\r\n      );\r\n      combined.set(frame, 0);\r\n      combined.set(commandHeader, frame.byteLength);\r\n      combined.set(compressed, frame.byteLength + commandHeader.byteLength);\r\n\r\n      frame = combined;\r\n    }\r\n\r\n    if (frame.byteLength > 1000) {\r\n      // 1kbyte over\r\n      throw new Error(\"[io.animation]Too big animation datas\");\r\n    }\r\n\r\n    this.sendCommand(this._CommandRegistrate, frame);\r\n  }\r\n\r\n  public changeState(params: any) {\r\n    if (params.animation.status === \"resume\") {\r\n      const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\r\n      const frame: any = new Uint8Array(nameArray.length + 2);\r\n      frame[0] = nameArray.length + 1;\r\n      frame.set(nameArray, 1);\r\n      frame[frame.byteLength - 1] = 0;\r\n      this.sendCommand(this._CommandResume, frame);\r\n    } else if (params.animation.status === \"pause\") {\r\n      const nameArray: any = ObnizUtil.string2dataArray(params.animation.name);\r\n      const frame: any = new Uint8Array(nameArray.length + 2);\r\n      frame[0] = nameArray.length + 1;\r\n      frame.set(nameArray, 1);\r\n      frame[frame.byteLength - 1] = 0;\r\n      this.sendCommand(this._CommandPause, frame);\r\n    }\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    let parentCommandNotFound: any = false;\r\n    try {\r\n      super.parseFromJson(json);\r\n    } catch (err) {\r\n      if (err instanceof this.WSCommandNotFoundError) {\r\n        parentCommandNotFound = true;\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n\r\n    const module: any = json.io;\r\n    if (module === undefined) {\r\n      return;\r\n    }\r\n\r\n    const schemaData: any = [\r\n      {uri: \"/request/ioAnimation/init\", onValid: this.init},\r\n      {uri: \"/request/ioAnimation/changeState\", onValid: this.changeState},\r\n    ];\r\n    const res: any = this.validateCommandSchema(schemaData, module, \"io\", module);\r\n\r\n    if (res.valid === 0 && parentCommandNotFound) {\r\n      if (res.invalidButLike.length > 0) {\r\n        throw new Error(res.invalidButLike[0].message);\r\n      } else {\r\n        const WSCommandNotFoundError: any = this.WSCommandNotFoundError;\r\n        throw new WSCommandNotFoundError(`[io.animation]unknown command`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (func === this._CommandNotify) {\r\n      const name: any = ObnizUtil.dataArray2string(\r\n        payload.slice(2, payload.byteLength - 1),\r\n      ); // remove null string\r\n\r\n      objToSend.io = {\r\n        animation: {\r\n          name,\r\n          status: \"finish\",\r\n        },\r\n      };\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n"]}