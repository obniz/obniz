{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandTcp.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,YAAa,SAAQ,SAAS;IAC3B,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,GAAG,CAAC;IACnB,kBAAkB,EAAE,GAAG,CAAC;IACxB,aAAa,EAAE,GAAG,CAAC;IACnB,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAgB5B,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAY/B,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAKlC,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAS7B,aAAa,CAAC,IAAI,EAAE,GAAG;IAwBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CA+DhE;AAED,eAAe,YAAY,CAAC","file":"WSCommandTcp.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\n\nclass WSCommandTcp extends WSCommand {\n  public module: any;\n  public _MaxPort: any;\n  public _CommandConnect: any;\n  public _CommandClose: any;\n  public _CommandConnection: any;\n  public _CommandWrite: any;\n  public _CommandRead: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 13;\n    this._MaxPort = 8;\n\n    this._CommandConnect = 0;\n    this._CommandClose = 1;\n    // Notification\n    this._CommandConnection = 2;\n    this._CommandWrite = 3;\n    // Notification\n    this._CommandRead = 4;\n  }\n\n  public connect(params: any, index: any) {\n    const domain: any = new Uint8Array(Buffer.from(params.connect.domain, \"utf8\"));\n    const buf: any = new Uint8Array(domain.length + 3);\n    buf[0] = index;\n    buf[1] = 0xff && params.connect.port >> 8;\n    buf[2] = 0xff && params.connect.port;\n    for (let i = 0; i < domain.length; i++) {\n      buf[3 + i] = domain[i];\n    }\n    this.sendCommand(this._CommandConnect, buf);\n  }\n\n  public disconnect(params: any, index: any) {\n    const buf: any = new Uint8Array([index]);\n    this.sendCommand(this._CommandClose, buf);\n  }\n\n  public write(params: any, index: any) {\n    const buf: any = new Uint8Array(params.write.data.length + 1);\n    buf[0] = index;\n    for (let i = 0; i < params.write.data.length; i++) {\n      buf[1 + i] = params.write.data[i];\n    }\n    this.sendCommand(this._CommandWrite, buf);\n  }\n\n  public parseFromJson(json: any) {\n    for (let i = 0; i < this._MaxPort; i++) {\n      const module: any = json[\"tcp\" + i];\n      if (module === undefined) {\n        continue;\n      }\n\n      const schemaData: any = [\n        {uri: \"/request/tcp/connect\", onValid: this.connect},\n        {uri: \"/request/tcp/disconnect\", onValid: this.disconnect},\n        {uri: \"/request/tcp/write\", onValid: this.write},\n      ];\n      const res: any = this.validateCommandSchema(schemaData, module, \"tcp\" + i, i);\n\n      if (res.valid === 0) {\n        if (res.invalidButLike.length > 0) {\n          throw new Error(res.invalidButLike[0].message);\n        } else {\n          throw new this.WSCommandNotFoundError(`[tcp${i}]unknown command`);\n        }\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandConnect: {\n        let state: any = \"Error\";\n        switch (payload[1]) {\n          case 0:\n            state = \"ok\";\n            break;\n          case 1:\n            state = \"Port Used\";\n            break;\n          case 2:\n            state = \"Port Area Error\";\n            break;\n          case 3:\n            state = \"Lookup Error\";\n            break;\n          case 4:\n            state = \"Error\";\n            break;\n        }\n        const module_index: any = payload[0];\n        objToSend[\"tcp\" + module_index] = {\n          connect: {\n            message: state,\n            code: payload[1],\n          },\n        };\n        break;\n      }\n      case this._CommandConnection:\n        if (payload.length === 2 && payload[1] === 0) {\n          const module_index: any = payload[0];\n          objToSend[\"tcp\" + module_index] = {\n            connection: {\n              connected: true,\n            },\n          };\n        } else {\n          const module_index: any = payload[0];\n          objToSend[\"tcp\" + module_index] = {\n            connection: {\n              connected: false,\n            },\n          };\n        }\n        break;\n      case this._CommandRead:\n        if (payload.length >= 1) {\n          const module_index: any = payload[0];\n          const arr: any = new Array(payload.byteLength - 1);\n          for (let i = 0; i < arr.length; i++) {\n            arr[i] = payload[i + 1];\n          }\n          objToSend[\"tcp\" + module_index] = {\n            read: {\n              data: arr,\n            },\n          };\n        }\n        break;\n    }\n  }\n}\n\nexport default WSCommandTcp;\n"]}