{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandTcp.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,YAAa,SAAQ,SAAS;IAC3B,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,GAAG,CAAC;IACnB,kBAAkB,EAAE,GAAG,CAAC;IACxB,aAAa,EAAE,GAAG,CAAC;IACnB,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAgB5B,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAY/B,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAKlC,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAS7B,aAAa,CAAC,IAAI,EAAE,GAAG;IAwBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CA+DhE;AAED,eAAe,YAAY,CAAC","file":"WSCommandTcp.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandTcp extends WSCommand {\r\n  public module: any;\r\n  public _MaxPort: any;\r\n  public _CommandConnect: any;\r\n  public _CommandClose: any;\r\n  public _CommandConnection: any;\r\n  public _CommandWrite: any;\r\n  public _CommandRead: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 13;\r\n    this._MaxPort = 8;\r\n\r\n    this._CommandConnect = 0;\r\n    this._CommandClose = 1;\r\n    // Notification\r\n    this._CommandConnection = 2;\r\n    this._CommandWrite = 3;\r\n    // Notification\r\n    this._CommandRead = 4;\r\n  }\r\n\r\n  public connect(params: any, index: any) {\r\n    const domain: any = new Uint8Array(Buffer.from(params.connect.domain, \"utf8\"));\r\n    const buf: any = new Uint8Array(domain.length + 3);\r\n    buf[0] = index;\r\n    buf[1] = 0xff && params.connect.port >> 8;\r\n    buf[2] = 0xff && params.connect.port;\r\n    for (let i = 0; i < domain.length; i++) {\r\n      buf[3 + i] = domain[i];\r\n    }\r\n    this.sendCommand(this._CommandConnect, buf);\r\n  }\r\n\r\n  public disconnect(params: any, index: any) {\r\n    const buf: any = new Uint8Array([index]);\r\n    this.sendCommand(this._CommandClose, buf);\r\n  }\r\n\r\n  public write(params: any, index: any) {\r\n    const buf: any = new Uint8Array(params.write.data.length + 1);\r\n    buf[0] = index;\r\n    for (let i = 0; i < params.write.data.length; i++) {\r\n      buf[1 + i] = params.write.data[i];\r\n    }\r\n    this.sendCommand(this._CommandWrite, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    for (let i = 0; i < this._MaxPort; i++) {\r\n      const module: any = json[\"tcp\" + i];\r\n      if (module === undefined) {\r\n        continue;\r\n      }\r\n\r\n      const schemaData: any = [\r\n        {uri: \"/request/tcp/connect\", onValid: this.connect},\r\n        {uri: \"/request/tcp/disconnect\", onValid: this.disconnect},\r\n        {uri: \"/request/tcp/write\", onValid: this.write},\r\n      ];\r\n      const res: any = this.validateCommandSchema(schemaData, module, \"tcp\" + i, i);\r\n\r\n      if (res.valid === 0) {\r\n        if (res.invalidButLike.length > 0) {\r\n          throw new Error(res.invalidButLike[0].message);\r\n        } else {\r\n          throw new this.WSCommandNotFoundError(`[tcp${i}]unknown command`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    switch (func) {\r\n      case this._CommandConnect: {\r\n        let state: any = \"Error\";\r\n        switch (payload[1]) {\r\n          case 0:\r\n            state = \"ok\";\r\n            break;\r\n          case 1:\r\n            state = \"Port Used\";\r\n            break;\r\n          case 2:\r\n            state = \"Port Area Error\";\r\n            break;\r\n          case 3:\r\n            state = \"Lookup Error\";\r\n            break;\r\n          case 4:\r\n            state = \"Error\";\r\n            break;\r\n        }\r\n        const module_index: any = payload[0];\r\n        objToSend[\"tcp\" + module_index] = {\r\n          connect: {\r\n            message: state,\r\n            code: payload[1],\r\n          },\r\n        };\r\n        break;\r\n      }\r\n      case this._CommandConnection:\r\n        if (payload.length === 2 && payload[1] === 0) {\r\n          const module_index: any = payload[0];\r\n          objToSend[\"tcp\" + module_index] = {\r\n            connection: {\r\n              connected: true,\r\n            },\r\n          };\r\n        } else {\r\n          const module_index: any = payload[0];\r\n          objToSend[\"tcp\" + module_index] = {\r\n            connection: {\r\n              connected: false,\r\n            },\r\n          };\r\n        }\r\n        break;\r\n      case this._CommandRead:\r\n        if (payload.length >= 1) {\r\n          const module_index: any = payload[0];\r\n          const arr: any = new Array(payload.byteLength - 1);\r\n          for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = payload[i + 1];\r\n          }\r\n          objToSend[\"tcp\" + module_index] = {\r\n            read: {\r\n              data: arr,\r\n            },\r\n          };\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandTcp;\r\n"]}