{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandI2C.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,YAAa,SAAQ,SAAS;IAC3B,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,aAAa,EAAE,GAAG,CAAC;IACnB,YAAY,EAAE,GAAG,CAAC;IAClB,kBAAkB,EAAE,GAAG,CAAC;IACxB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;IAC5B,qBAAqB,EAAE,GAAG,CAAC;IAC3B,YAAY,EAAE,GAAG,CAAC;;IAelB,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAmBnC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA4BlC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAK/B,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAc9B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAkB7B,aAAa,CAAC,IAAI,EAAE,GAAG;IA2BvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CA0DhE;AAED,eAAe,YAAY,CAAC","file":"WSCommandI2C.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandI2C extends WSCommand {\r\n  public module: any;\r\n  public _CommandInit: any;\r\n  public _CommandDeinit: any;\r\n  public _CommandWrite: any;\r\n  public _CommandRead: any;\r\n  public _CommandSlvWritten: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n  public COMMAND_FUNC_ID_ERROR: any;\r\n  public envelopError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 6;\r\n\r\n    this._CommandInit = 0;\r\n    this._CommandDeinit = 1;\r\n    this._CommandWrite = 2;\r\n    this._CommandRead = 3;\r\n    this._CommandSlvWritten = 4;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public initMaster(params: any, module: any) {\r\n    const mode: any = 0;\r\n    const sda: any = parseInt(params.sda);\r\n    const scl: any = parseInt(params.scl);\r\n    const clock: any = parseInt(params.clock);\r\n\r\n    const buf: any = new Uint8Array(8);\r\n    buf[0] = module;\r\n    buf[1] = mode;\r\n    buf[2] = sda;\r\n    buf[3] = scl;\r\n    buf[4] = clock >> (3 * 8);\r\n    buf[5] = clock >> (2 * 8);\r\n    buf[6] = clock >> (1 * 8);\r\n    buf[7] = clock;\r\n\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public initSlave(params: any, module: any) {\r\n    const mode: any = 1;\r\n    const sda: any = parseInt(params.sda);\r\n    const scl: any = parseInt(params.scl);\r\n    const clock: any = 0;\r\n\r\n    let addressLength: any = params.slave_address_length;\r\n    const address: any = params.slave_address;\r\n    if (address > 0x7f) {\r\n      addressLength = 10;\r\n    }\r\n\r\n    const buf: any = new Uint8Array(11);\r\n    buf[0] = module;\r\n    buf[1] = mode;\r\n    buf[2] = sda;\r\n    buf[3] = scl;\r\n    buf[4] = clock >> (3 * 8);\r\n    buf[5] = clock >> (2 * 8);\r\n    buf[6] = clock >> (1 * 8);\r\n    buf[7] = clock;\r\n    buf[8] = addressLength;\r\n    buf[9] = address >> 8;\r\n    buf[10] = address;\r\n\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public deinit(params: any, module: any) {\r\n    const buf: any = new Uint8Array([module]);\r\n    this.sendCommand(this._CommandDeinit, buf);\r\n  }\r\n\r\n  public write(params: any, module: any) {\r\n    let address: any = parseInt(params.address);\r\n\r\n    if (params.address_bits === 10 || address > 0x7f) {\r\n      address = address | 0x8000; // mark 10bit mode\r\n    }\r\n    const buf: any = new Uint8Array(3 + params.data.length);\r\n    buf[0] = module;\r\n    buf[1] = address >> 8;\r\n    buf[2] = address;\r\n    buf.set(params.data, 3);\r\n    this.sendCommand(this._CommandWrite, buf);\r\n  }\r\n\r\n  public read(params: any, module: any) {\r\n    let address: any = parseInt(params.address);\r\n\r\n    if (params.address_bits === 10 || address > 0x7f) {\r\n      address = address | 0x8000; // mark 10bit mode\r\n    }\r\n    const read_length: any = params.read;\r\n    const buf: any = new Uint8Array(7);\r\n    buf[0] = module;\r\n    buf[1] = address >> 8;\r\n    buf[2] = address;\r\n    buf[3] = read_length >> (3 * 8);\r\n    buf[4] = read_length >> (2 * 8);\r\n    buf[5] = read_length >> (1 * 8);\r\n    buf[6] = read_length;\r\n    this.sendCommand(this._CommandRead, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    // 0\r\n    for (let i = 0; i < 1; i++) {\r\n      const module: any = json[\"i2c\" + i];\r\n      if (module === undefined) {\r\n        continue;\r\n      }\r\n\r\n      const schemaData: any = [\r\n        {uri: \"/request/i2c/init_master\", onValid: this.initMaster},\r\n        {uri: \"/request/i2c/init_slave\", onValid: this.initSlave},\r\n        {uri: \"/request/i2c/write\", onValid: this.write},\r\n        {uri: \"/request/i2c/read\", onValid: this.read},\r\n        {uri: \"/request/i2c/deinit\", onValid: this.deinit},\r\n      ];\r\n      const res: any = this.validateCommandSchema(schemaData, module, \"i2c\" + i, i);\r\n\r\n      if (res.valid === 0) {\r\n        if (res.invalidButLike.length > 0) {\r\n          throw new Error(res.invalidButLike[0].message);\r\n        } else {\r\n          throw new this.WSCommandNotFoundError(`[i2c${i}]unknown command`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (func === this._CommandRead && payload.byteLength > 3) {\r\n      const module_index: any = payload[0];\r\n      const address: any = (payload[1] << 8) + payload[2];\r\n\r\n      const arr: any = new Array(payload.byteLength - 3);\r\n      for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = payload[i + 3];\r\n      }\r\n\r\n      objToSend[\"i2c\" + module_index] = {\r\n        mode: \"master\",\r\n        address,\r\n        data: arr,\r\n      };\r\n    } else if (func === this._CommandSlvWritten && payload.byteLength > 4) {\r\n      const module_index: any = payload[0];\r\n      // let address_bit_length = payload[1];\r\n      const address: any = (payload[2] << 8) + payload[3];\r\n\r\n      const arr: any = new Array(payload.byteLength - 4);\r\n      for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = payload[i + 4];\r\n      }\r\n\r\n      objToSend[\"i2c\" + module_index] = {\r\n        mode: \"slave\",\r\n        is_fragmented: true,\r\n        address,\r\n        data: arr,\r\n      };\r\n    } else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength > 2) {\r\n      // const _esperr = payload[0];\r\n      const err: any = payload[1];\r\n      const ref_func_id: any = payload[2];\r\n\r\n      if (\r\n        ref_func_id === this._CommandWrite ||\r\n        ref_func_id === this._CommandRead\r\n      ) {\r\n        let reason: any =\r\n          \"\" +\r\n          (ref_func_id === this._CommandWrite ? \"writing\" : \"reading\") +\r\n          \" error. \";\r\n        if (err === 7) {\r\n          // in fact. it is 0x107. but truncated\r\n          reason += \"Communication Timeout. Maybe, target is not connected.\";\r\n        } else if (err === 255) {\r\n          reason += \"Communication Failed. Maybe, target is not connected.\";\r\n        }\r\n        this.envelopError(objToSend, `i2c0`, {message: reason});\r\n      } else {\r\n        super.notifyFromBinary(objToSend, func, payload);\r\n      }\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandI2C;\r\n"]}