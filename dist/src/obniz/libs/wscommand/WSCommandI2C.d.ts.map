{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandI2C.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,YAAa,SAAQ,SAAS;IAC3B,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,aAAa,EAAE,GAAG,CAAC;IACnB,YAAY,EAAE,GAAG,CAAC;IAClB,kBAAkB,EAAE,GAAG,CAAC;IACxB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;IAC5B,qBAAqB,EAAE,GAAG,CAAC;IAC3B,YAAY,EAAE,GAAG,CAAC;;IAelB,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAmBnC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA4BlC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAK/B,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAc9B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAkB7B,aAAa,CAAC,IAAI,EAAE,GAAG;IA2BvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CA0DhE;AAED,eAAe,YAAY,CAAC","file":"WSCommandI2C.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\n\nclass WSCommandI2C extends WSCommand {\n  public module: any;\n  public _CommandInit: any;\n  public _CommandDeinit: any;\n  public _CommandWrite: any;\n  public _CommandRead: any;\n  public _CommandSlvWritten: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n  public COMMAND_FUNC_ID_ERROR: any;\n  public envelopError: any;\n\n  constructor() {\n    super();\n    this.module = 6;\n\n    this._CommandInit = 0;\n    this._CommandDeinit = 1;\n    this._CommandWrite = 2;\n    this._CommandRead = 3;\n    this._CommandSlvWritten = 4;\n  }\n\n  // Commands\n\n  public initMaster(params: any, module: any) {\n    const mode: any = 0;\n    const sda: any = parseInt(params.sda);\n    const scl: any = parseInt(params.scl);\n    const clock: any = parseInt(params.clock);\n\n    const buf: any = new Uint8Array(8);\n    buf[0] = module;\n    buf[1] = mode;\n    buf[2] = sda;\n    buf[3] = scl;\n    buf[4] = clock >> (3 * 8);\n    buf[5] = clock >> (2 * 8);\n    buf[6] = clock >> (1 * 8);\n    buf[7] = clock;\n\n    this.sendCommand(this._CommandInit, buf);\n  }\n\n  public initSlave(params: any, module: any) {\n    const mode: any = 1;\n    const sda: any = parseInt(params.sda);\n    const scl: any = parseInt(params.scl);\n    const clock: any = 0;\n\n    let addressLength: any = params.slave_address_length;\n    const address: any = params.slave_address;\n    if (address > 0x7f) {\n      addressLength = 10;\n    }\n\n    const buf: any = new Uint8Array(11);\n    buf[0] = module;\n    buf[1] = mode;\n    buf[2] = sda;\n    buf[3] = scl;\n    buf[4] = clock >> (3 * 8);\n    buf[5] = clock >> (2 * 8);\n    buf[6] = clock >> (1 * 8);\n    buf[7] = clock;\n    buf[8] = addressLength;\n    buf[9] = address >> 8;\n    buf[10] = address;\n\n    this.sendCommand(this._CommandInit, buf);\n  }\n\n  public deinit(params: any, module: any) {\n    const buf: any = new Uint8Array([module]);\n    this.sendCommand(this._CommandDeinit, buf);\n  }\n\n  public write(params: any, module: any) {\n    let address: any = parseInt(params.address);\n\n    if (params.address_bits === 10 || address > 0x7f) {\n      address = address | 0x8000; // mark 10bit mode\n    }\n    const buf: any = new Uint8Array(3 + params.data.length);\n    buf[0] = module;\n    buf[1] = address >> 8;\n    buf[2] = address;\n    buf.set(params.data, 3);\n    this.sendCommand(this._CommandWrite, buf);\n  }\n\n  public read(params: any, module: any) {\n    let address: any = parseInt(params.address);\n\n    if (params.address_bits === 10 || address > 0x7f) {\n      address = address | 0x8000; // mark 10bit mode\n    }\n    const read_length: any = params.read;\n    const buf: any = new Uint8Array(7);\n    buf[0] = module;\n    buf[1] = address >> 8;\n    buf[2] = address;\n    buf[3] = read_length >> (3 * 8);\n    buf[4] = read_length >> (2 * 8);\n    buf[5] = read_length >> (1 * 8);\n    buf[6] = read_length;\n    this.sendCommand(this._CommandRead, buf);\n  }\n\n  public parseFromJson(json: any) {\n    // 0\n    for (let i = 0; i < 1; i++) {\n      const module: any = json[\"i2c\" + i];\n      if (module === undefined) {\n        continue;\n      }\n\n      const schemaData: any = [\n        {uri: \"/request/i2c/init_master\", onValid: this.initMaster},\n        {uri: \"/request/i2c/init_slave\", onValid: this.initSlave},\n        {uri: \"/request/i2c/write\", onValid: this.write},\n        {uri: \"/request/i2c/read\", onValid: this.read},\n        {uri: \"/request/i2c/deinit\", onValid: this.deinit},\n      ];\n      const res: any = this.validateCommandSchema(schemaData, module, \"i2c\" + i, i);\n\n      if (res.valid === 0) {\n        if (res.invalidButLike.length > 0) {\n          throw new Error(res.invalidButLike[0].message);\n        } else {\n          throw new this.WSCommandNotFoundError(`[i2c${i}]unknown command`);\n        }\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    if (func === this._CommandRead && payload.byteLength > 3) {\n      const module_index: any = payload[0];\n      const address: any = (payload[1] << 8) + payload[2];\n\n      const arr: any = new Array(payload.byteLength - 3);\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = payload[i + 3];\n      }\n\n      objToSend[\"i2c\" + module_index] = {\n        mode: \"master\",\n        address,\n        data: arr,\n      };\n    } else if (func === this._CommandSlvWritten && payload.byteLength > 4) {\n      const module_index: any = payload[0];\n      // let address_bit_length = payload[1];\n      const address: any = (payload[2] << 8) + payload[3];\n\n      const arr: any = new Array(payload.byteLength - 4);\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = payload[i + 4];\n      }\n\n      objToSend[\"i2c\" + module_index] = {\n        mode: \"slave\",\n        is_fragmented: true,\n        address,\n        data: arr,\n      };\n    } else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength > 2) {\n      // const _esperr = payload[0];\n      const err: any = payload[1];\n      const ref_func_id: any = payload[2];\n\n      if (\n        ref_func_id === this._CommandWrite ||\n        ref_func_id === this._CommandRead\n      ) {\n        let reason: any =\n          \"\" +\n          (ref_func_id === this._CommandWrite ? \"writing\" : \"reading\") +\n          \" error. \";\n        if (err === 7) {\n          // in fact. it is 0x107. but truncated\n          reason += \"Communication Timeout. Maybe, target is not connected.\";\n        } else if (err === 255) {\n          reason += \"Communication Failed. Maybe, target is not connected.\";\n        }\n        this.envelopError(objToSend, `i2c0`, {message: reason});\n      } else {\n        super.notifyFromBinary(objToSend, func, payload);\n      }\n    } else {\n      super.notifyFromBinary(objToSend, func, payload);\n    }\n  }\n}\n\nexport default WSCommandI2C;\n"]}