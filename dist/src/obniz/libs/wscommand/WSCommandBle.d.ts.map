{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandBle.ts"],"names":[],"mappings":"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","file":"WSCommandBle.d.ts","sourcesContent":["import JsonBinaryConverter from \"./jsonBinaryConverter\";\r\nimport WSCommand from \"./WSCommand\";\r\nimport WSCommandBleHci from \"./WSCommandBleHci\";\r\n\r\nclass WSCommandBle extends WSCommand {\r\n  public module: any;\r\n  public uuidLength: any;\r\n  public _CommandSetAdvData: any;\r\n  public _CommandSetScanRespData: any;\r\n  public _CommandStartAdv: any;\r\n  public _CommandStopAdv: any;\r\n  public _CommandScan: any;\r\n  public _CommandStartScan: any;\r\n  public _CommandStopScan: any;\r\n  public _CommandScanResults: any;\r\n  public _CommandConnect: any;\r\n  public _CommandServices: any;\r\n  public _CommandCharacteristics: any;\r\n  public _CommandWriteCharacteristics: any;\r\n  public _CommandReadCharacteristics: any;\r\n  public _CommandRegisterNotifyCharacteristic: any;\r\n  public _CommandUnregisterNotifyCharacteristic: any;\r\n  public _CommandDescriptors: any;\r\n  public _CommandWriteDescriptor: any;\r\n  public _CommandReadDescriptor: any;\r\n  public _CommandNotifyCharacteristic: any;\r\n  public _CommandSetDeviceName: any;\r\n  public _CommandServerStartPeripheral: any;\r\n  public _CommandServerNotifyConnect: any;\r\n  public _CommandServerAddService: any;\r\n  public _CommandServerAddCharacteristic: any;\r\n  public _CommandServerAddDescriptor: any;\r\n  public _CommandServerWriteCharavteristicValue: any;\r\n  public _CommandServerReadCharavteristicValue: any;\r\n  public _CommandServerNotifyWriteCharavteristicValue: any;\r\n  public _CommandServerNotifyReadCharavteristicValue: any;\r\n  public _CommandServerWriteDescriptorValue: any;\r\n  public _CommandServerReadDescriptorValue: any;\r\n  public _CommandServerNotifyWriteDescriptorValue: any;\r\n  public _CommandServerNotifyReadDescriptorValue: any;\r\n  public _CommandServerNotifyCharavteristic: any;\r\n  public _CommandServerStartStopService: any;\r\n  public _CommandSecuritySetAuth: any;\r\n  public _CommandSecuritySetEncryptionLevel: any;\r\n  public _CommandSecuritySetEnableKeyTypes: any;\r\n  public _CommandSecuritySetKeyMaxSize: any;\r\n  public _CommandSecuritySetIOCapability: any;\r\n  public _CommandSecurityClearBondingDevices: any;\r\n  public _CommandScanResultsDevice: any;\r\n  public _CommandScanResultsDeviceAddress: any;\r\n  public _CommandScanResultsEvet: any;\r\n  public _CommandScanResultsBleEvent: any;\r\n  public _CommandCharacteristicsProperties: any;\r\n  public _commandResults: any;\r\n  public _securityAuthValues: any;\r\n  public _securityEncryotionLevels: any;\r\n  public _securityKeyTypes: any;\r\n  public hciCommand: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n  public COMMAND_FUNC_ID_ERROR: any;\r\n  public envelopError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 11;\r\n\r\n    this.uuidLength = 16 + 2;\r\n\r\n    this._CommandSetAdvData = 0;\r\n    this._CommandSetScanRespData = 1;\r\n    this._CommandStartAdv = 2;\r\n    this._CommandStopAdv = 3;\r\n    this._CommandScan = 4;\r\n    this._CommandStartScan = 4;\r\n    this._CommandStopScan = 5;\r\n    this._CommandScanResults = 6;\r\n    this._CommandConnect = 7;\r\n    this._CommandServices = 8;\r\n    this._CommandCharacteristics = 9;\r\n    this._CommandWriteCharacteristics = 10;\r\n    this._CommandReadCharacteristics = 11;\r\n    this._CommandRegisterNotifyCharacteristic = 12;\r\n    this._CommandUnregisterNotifyCharacteristic = 13;\r\n    this._CommandDescriptors = 14;\r\n    this._CommandWriteDescriptor = 15;\r\n    this._CommandReadDescriptor = 16;\r\n    this._CommandNotifyCharacteristic = 17;\r\n\r\n    this._CommandSetDeviceName = 19;\r\n    this._CommandServerStartPeripheral = 20;\r\n    this._CommandServerNotifyConnect = 21;\r\n    this._CommandServerAddService = 22;\r\n    this._CommandServerAddCharacteristic = 23;\r\n    this._CommandServerAddDescriptor = 24;\r\n    this._CommandServerWriteCharavteristicValue = 25;\r\n    this._CommandServerReadCharavteristicValue = 26;\r\n    this._CommandServerNotifyWriteCharavteristicValue = 27;\r\n    this._CommandServerNotifyReadCharavteristicValue = 28;\r\n    this._CommandServerWriteDescriptorValue = 29;\r\n    this._CommandServerReadDescriptorValue = 30;\r\n    this._CommandServerNotifyWriteDescriptorValue = 31;\r\n    this._CommandServerNotifyReadDescriptorValue = 32;\r\n    this._CommandServerNotifyCharavteristic = 33;\r\n    this._CommandServerStartStopService = 34;\r\n\r\n    this._CommandSecuritySetAuth = 35;\r\n    this._CommandSecuritySetEncryptionLevel = 36;\r\n    this._CommandSecuritySetEnableKeyTypes = 37;\r\n    this._CommandSecuritySetKeyMaxSize = 38;\r\n    this._CommandSecuritySetIOCapability = 39;\r\n    this._CommandSecurityClearBondingDevices = 40;\r\n\r\n    this._CommandScanResultsDevice = {\r\n      breder: 0x01,\r\n      ble: 0x02,\r\n      dumo: 0x03,\r\n    };\r\n\r\n    /// BLE device address type\r\n    this._CommandScanResultsDeviceAddress = {\r\n      public: 0x00,\r\n      random: 0x01,\r\n      rpa_public: 0x02,\r\n      rpa_random: 0x03,\r\n    };\r\n\r\n    this._CommandScanResultsEvet = {\r\n      inquiry_result: 0 /*!< Inquiry result for a peer device. */,\r\n      inquiry_complete: 1 /*!< Inquiry complete. */,\r\n      discovery_result: 2 /*!< Discovery result for a peer device. */,\r\n      discovery_ble_result: 3 /*!< Discovery result for BLE GATT based service on a peer device. */,\r\n      discovery_cmoplete: 4 /*!< Discovery complete. */,\r\n      discovery_di_cmoplete: 5 /*!< Discovery complete. */,\r\n      cancelled: 6 /*!< Search cancelled */,\r\n    };\r\n\r\n    this._CommandScanResultsBleEvent = {\r\n      connectable_advertisemnt: 0x00 /*!< Connectable undirected advertising (ADV_IND) */,\r\n      connectable_directed_advertisemnt: 0x01 /*!< Connectable directed advertising (ADV_DIRECT_IND) */,\r\n      scannable_advertising: 0x02 /*!< Scannable undirected advertising (ADV_SCAN_IND) */,\r\n      non_connectable_advertising: 0x03 /*!< Non connectable undirected advertising (ADV_NONCONN_IND) */,\r\n      scan_response: 0x04 /*!< Scan Response (SCAN_RSP) */,\r\n    };\r\n\r\n    this._CommandCharacteristicsProperties = {\r\n      broadcast: 0x01,\r\n      read: 0x02,\r\n      write_without_response: 0x04,\r\n      write: 0x08,\r\n      notify: 0x10,\r\n      indicate: 0x20,\r\n      auth: 0x40,\r\n      extended_properties: 0x80,\r\n    };\r\n\r\n    this._commandResults = {\r\n      success: 0,\r\n      failed: 1,\r\n    };\r\n\r\n    this._securityAuthValues = {\r\n      0x01: \"bonding\",\r\n      0x04: \"mitm\",\r\n      0x08: \"secure_connection\",\r\n    };\r\n    this._securityEncryotionLevels = {\r\n      none: 0x01,\r\n      encryption: 0x02,\r\n      mitm: 0x03,\r\n    };\r\n\r\n    this._securityKeyTypes = {\r\n      0x01: \"ltk\",\r\n      0x02: \"irk\",\r\n      0x04: \"csrk\",\r\n    };\r\n\r\n    this.hciCommand = new WSCommandBleHci(this);\r\n  }\r\n\r\n  /* CENTRAL   */\r\n\r\n  public centralScanStart(params: any) {\r\n    const schema: any = [\r\n      {path: \"scan.duration\", length: 4, type: \"int\", default: 30},\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandStartScan, buf);\r\n  }\r\n\r\n  public centralScanStop(params: any) {\r\n    this.sendCommand(this._CommandStopScan, null);\r\n  }\r\n\r\n  public centralConnect(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"connect.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {path: null, length: 1, type: \"char\", default: false}, // const val\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandConnect, buf);\r\n  }\r\n\r\n  public centralDisconnect(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"disconnect.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {path: null, length: 1, type: \"char\", default: true}, // const val\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandConnect, buf);\r\n  }\r\n\r\n  public centralServiceGet(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"get_services.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServices, buf);\r\n  }\r\n\r\n  public centralCharacteristicGet(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"get_characteristics.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"get_characteristics.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandCharacteristics, buf);\r\n  }\r\n\r\n  public centralCharacteristicRead(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"read_characteristic.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"read_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"read_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandReadCharacteristics, buf);\r\n  }\r\n\r\n  public centralCharacteristicWrite(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"write_characteristic.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"write_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"write_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"write_characteristic.needResponse\",\r\n        length: 1,\r\n        type: \"char\",\r\n        default: 1,\r\n      },\r\n      {path: \"write_characteristic.data\", length: null, type: \"dataArray\"},\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandWriteCharacteristics, buf);\r\n  }\r\n\r\n  public centralCharacteristicRegisterNotify(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"register_notify_characteristic.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"register_notify_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"register_notify_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandRegisterNotifyCharacteristic, buf);\r\n  }\r\n\r\n  public centralCharacteristicUnregisterNotify(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"unregister_notify_characteristic.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"unregister_notify_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"unregister_notify_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandUnregisterNotifyCharacteristic, buf);\r\n  }\r\n\r\n  public centralDescriptorGet(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"get_descriptors.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"get_descriptors.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"get_descriptors.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandDescriptors, buf);\r\n  }\r\n\r\n  public centralDescriptorRead(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"read_descriptor.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"read_descriptor.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"read_descriptor.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"read_descriptor.descriptor_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandReadDescriptor, buf);\r\n  }\r\n\r\n  public centralDescriptorWrite(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"write_descriptor.address\",\r\n        length: 6,\r\n        type: \"hex\",\r\n        required: true,\r\n        endianness: \"little\",\r\n      },\r\n      {\r\n        path: \"write_descriptor.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"write_descriptor.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"write_descriptor.descriptor_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"write_descriptor.needResponse\",\r\n        length: 1,\r\n        type: \"char\",\r\n        default: 1,\r\n      },\r\n      {path: \"write_descriptor.data\", length: null, type: \"dataArray\"},\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandWriteDescriptor, buf);\r\n  }\r\n\r\n  /* PERIPHERAL   */\r\n\r\n  public peripheralAdvertisementStart(params: any) {\r\n    this.sendCommand(\r\n      this._CommandSetAdvData,\r\n      new Uint8Array(params.advertisement.adv_data),\r\n    );\r\n\r\n    if (params.advertisement.scan_resp) {\r\n      this.sendCommand(\r\n        this._CommandSetScanRespData,\r\n        new Uint8Array(params.advertisement.scan_resp),\r\n      );\r\n    }\r\n\r\n    this.sendCommand(this._CommandStartAdv, null);\r\n  }\r\n\r\n  public peripheralAdvertisementStop(params: any) {\r\n    this.sendCommand(this._CommandStopAdv, null);\r\n  }\r\n\r\n  public peripheralServiceStart(params: any) {\r\n    const val: any = params.peripheral;\r\n    const propFlags: any = {\r\n      0x01: \"broadcast\",\r\n      0x02: \"read\",\r\n      0x04: \"write_without_response\",\r\n      0x08: \"write\",\r\n      0x10: \"notify\",\r\n      0x20: \"indiate\",\r\n      0x40: \"auth\",\r\n      0x80: \"ext_prop\",\r\n    };\r\n\r\n    const permissionFlags: any = {\r\n      0x001: \"read\",\r\n      0x002: \"read_encrypted\",\r\n      0x004: \"read_encrypted_mitm\",\r\n      0x010: \"write\",\r\n      0x020: \"write_encrypted\",\r\n      0x040: \"write_encrypted_mitm\",\r\n      0x080: \"write_signed\",\r\n      0x100: \"write_signed_mitm\",\r\n    };\r\n    const schema: any = {\r\n      service: {\r\n        command: this._CommandServerAddService,\r\n        schema: [{path: \"uuid\", length: 18, type: \"uuid\", required: true}],\r\n      },\r\n      characteristic: {\r\n        command: this._CommandServerAddCharacteristic,\r\n        schema: [\r\n          {path: \"service_uuid\", length: 18, type: \"uuid\", required: true},\r\n          {path: \"uuid\", length: 18, type: \"uuid\", required: true},\r\n          {\r\n            path: \"permissions\",\r\n            length: 2,\r\n            type: \"flag\",\r\n            default: [\"write\", \"read\"],\r\n            flags: permissionFlags,\r\n          },\r\n          {\r\n            path: \"properties\",\r\n            length: 1,\r\n            type: \"flag\",\r\n            default: [\"write\", \"read\"],\r\n            flags: propFlags,\r\n          },\r\n          {path: \"data\", type: \"dataArray\"},\r\n        ],\r\n      },\r\n      descriptor: {\r\n        command: this._CommandServerAddDescriptor,\r\n        schema: [\r\n          {path: \"service_uuid\", length: 18, type: \"uuid\", required: true},\r\n          {\r\n            path: \"characteristic_uuid\",\r\n            length: 18,\r\n            type: \"uuid\",\r\n            required: true,\r\n          },\r\n          {path: \"uuid\", length: 18, type: \"uuid\", required: true},\r\n          {\r\n            path: \"permissions\",\r\n            length: 2,\r\n            type: \"flag\",\r\n            default: [\"write\", \"read\"],\r\n            flags: permissionFlags,\r\n          },\r\n          {path: \"data\", type: \"dataArray\"},\r\n        ],\r\n      },\r\n      startService: {\r\n        command: this._CommandServerStartStopService,\r\n        schema: [\r\n          {path: \"uuid\", length: 18, type: \"uuid\", required: true},\r\n          {path: null, length: 1, type: \"char\", default: 0}, // const val\r\n        ],\r\n      },\r\n    };\r\n\r\n    const sendBufs: any = [];\r\n    const startServiceBufs: any = [];\r\n    let buf: any;\r\n    for (const serviceIndex in val.services) {\r\n      const service: any = val.services[serviceIndex];\r\n      buf = JsonBinaryConverter.createSendBuffer(\r\n        schema.service.schema,\r\n        service,\r\n      );\r\n      if (buf.length === 0) {\r\n        return;\r\n      }\r\n      sendBufs.push({command: schema.service.command, buffer: buf});\r\n\r\n      buf = JsonBinaryConverter.createSendBuffer(\r\n        schema.startService.schema,\r\n        service,\r\n      );\r\n      startServiceBufs.push({\r\n        command: schema.startService.command,\r\n        buffer: buf,\r\n      });\r\n\r\n      for (const charaIndex in service.characteristics) {\r\n        const chara: any = service.characteristics[charaIndex];\r\n        chara.service_uuid = service.uuid;\r\n        buf = JsonBinaryConverter.createSendBuffer(\r\n          schema.characteristic.schema,\r\n          chara,\r\n        );\r\n        if (buf.length === 0) {\r\n          return;\r\n        }\r\n        sendBufs.push({\r\n          command: schema.characteristic.command,\r\n          buffer: buf,\r\n        });\r\n\r\n        for (const descIndex in chara.descriptors) {\r\n          const desc: any = chara.descriptors[descIndex];\r\n          desc.service_uuid = service.uuid;\r\n          desc.characteristic_uuid = chara.uuid;\r\n          buf = JsonBinaryConverter.createSendBuffer(\r\n            schema.descriptor.schema,\r\n            desc,\r\n          );\r\n          if (buf.length === 0) {\r\n            return;\r\n          }\r\n          sendBufs.push({command: schema.descriptor.command, buffer: buf});\r\n        }\r\n      }\r\n    }\r\n    for (const index in sendBufs) {\r\n      this.sendCommand(sendBufs[index].command, sendBufs[index].buffer);\r\n    }\r\n    for (const index in startServiceBufs) {\r\n      this.sendCommand(\r\n        startServiceBufs[index].command,\r\n        startServiceBufs[index].buffer,\r\n      );\r\n    }\r\n  }\r\n\r\n  public peripheralServiceStop(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.stop_service.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {path: null, length: 1, type: \"char\", default: 1}, // const val\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerStartStopService, buf);\r\n  }\r\n\r\n  public peripheralServiceStopAll() {\r\n    this.sendCommand(this._CommandServerStartPeripheral, new Uint8Array([1]));\r\n  }\r\n\r\n  public peripheralCharacteristicRead(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.read_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.read_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerReadCharavteristicValue, buf);\r\n  }\r\n\r\n  public peripheralCharacteristicWrite(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.write_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.write_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {path: \"peripheral.write_characteristic.data\", type: \"dataArray\"},\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerWriteCharavteristicValue, buf);\r\n  }\r\n\r\n  public peripheralCharacteristicNotify(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.notify_characteristic.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.notify_characteristic.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerNotifyCharavteristic, buf);\r\n  }\r\n\r\n  public peripheralDescriptorRead(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.read_descriptor.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.read_descriptor.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.read_descriptor.descriptor_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerReadDescriptorValue, buf);\r\n  }\r\n\r\n  public peripheralDescriptorWrite(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"peripheral.write_descriptor.service_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.write_descriptor.characteristic_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {\r\n        path: \"peripheral.write_descriptor.descriptor_uuid\",\r\n        length: 18,\r\n        type: \"uuid\",\r\n        required: true,\r\n      },\r\n      {path: \"peripheral.write_descriptor.data\", type: \"dataArray\"},\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandServerWriteDescriptorValue, buf);\r\n  }\r\n\r\n  public securityAuth(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"security.auth\",\r\n        type: \"flag\",\r\n        length: 1,\r\n        required: true,\r\n        flags: this._securityAuthValues,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandSecuritySetAuth, buf);\r\n  }\r\n\r\n  public securityIndicateLevel(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"security.indicate_security_level\",\r\n        type: \"char\",\r\n        length: 1,\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandSecuritySetEncryptionLevel, buf);\r\n  }\r\n\r\n  public securityKeyType(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"security.key.type\",\r\n        type: \"flag\",\r\n        length: 1,\r\n        required: true,\r\n        flags: this._securityKeyTypes,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandSecuritySetEnableKeyTypes, buf);\r\n  }\r\n\r\n  public securityKeySize(params: any) {\r\n    const schema: any = [\r\n      {\r\n        path: \"security.key.max_size\",\r\n        type: \"char\",\r\n        length: 1,\r\n        required: true,\r\n      },\r\n    ];\r\n    const buf: any = JsonBinaryConverter.createSendBuffer(schema, params);\r\n    this.sendCommand(this._CommandSecuritySetKeyMaxSize, buf);\r\n  }\r\n\r\n  public clearBondingDevicesList(params: any) {\r\n    const buf: any = new Uint8Array([]); // noting to send\r\n    this.sendCommand(this._CommandSecurityClearBondingDevices, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    const module: any = json.ble;\r\n    if (module === undefined) {\r\n      return;\r\n    }\r\n    const schemaData: any = [\r\n      {\r\n        uri: \"/request/ble/central/scan_start\",\r\n        onValid: this.centralScanStart,\r\n      },\r\n      {uri: \"/request/ble/central/scan_stop\", onValid: this.centralScanStop},\r\n      {uri: \"/request/ble/central/connect\", onValid: this.centralConnect},\r\n      {\r\n        uri: \"/request/ble/central/disconnect\",\r\n        onValid: this.centralDisconnect,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/service_get\",\r\n        onValid: this.centralServiceGet,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/characteristic_get\",\r\n        onValid: this.centralCharacteristicGet,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/characteristic_read\",\r\n        onValid: this.centralCharacteristicRead,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/characteristic_write\",\r\n        onValid: this.centralCharacteristicWrite,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/characteristic_register_notify\",\r\n        onValid: this.centralCharacteristicRegisterNotify,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/characteristic_unregister_notify\",\r\n        onValid: this.centralCharacteristicUnregisterNotify,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/descriptor_get\",\r\n        onValid: this.centralDescriptorGet,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/descriptor_read\",\r\n        onValid: this.centralDescriptorRead,\r\n      },\r\n      {\r\n        uri: \"/request/ble/central/descriptor_write\",\r\n        onValid: this.centralDescriptorWrite,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/advertisement_start\",\r\n        onValid: this.peripheralAdvertisementStart,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/advertisement_stop\",\r\n        onValid: this.peripheralAdvertisementStop,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/service_start\",\r\n        onValid: this.peripheralServiceStart,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/service_stop\",\r\n        onValid: this.peripheralServiceStop,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/service_stop_all\",\r\n        onValid: this.peripheralServiceStopAll,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/characteristic_read\",\r\n        onValid: this.peripheralCharacteristicRead,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/characteristic_write\",\r\n        onValid: this.peripheralCharacteristicWrite,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/characteristic_notify\",\r\n        onValid: this.peripheralCharacteristicNotify,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/descriptor_read\",\r\n        onValid: this.peripheralDescriptorRead,\r\n      },\r\n      {\r\n        uri: \"/request/ble/peripheral/descriptor_write\",\r\n        onValid: this.peripheralDescriptorWrite,\r\n      },\r\n      {\r\n        uri: \"/request/ble/security/auth\",\r\n        onValid: this.securityAuth,\r\n      },\r\n      {\r\n        uri: \"/request/ble/security/indicate_security_level\",\r\n        onValid: this.securityIndicateLevel,\r\n      },\r\n      {\r\n        uri: \"/request/ble/security/key_type\",\r\n        onValid: this.securityKeyType,\r\n      },\r\n      {\r\n        uri: \"/request/ble/security/key_max_size\",\r\n        onValid: this.securityKeySize,\r\n      },\r\n      {\r\n        uri: \"/request/ble/security/devices_clear\",\r\n        onValid: this.clearBondingDevicesList,\r\n      },\r\n    ];\r\n\r\n    schemaData.push(...this.hciCommand.schemaData());\r\n    const res: any = this.validateCommandSchema(schemaData, module, \"ble\");\r\n    if (res.valid === 0) {\r\n      if (res.invalidButLike.length > 0) {\r\n        throw new Error(res.invalidButLike[0].message);\r\n      } else {\r\n        throw new this.WSCommandNotFoundError(`[ble]unknown command`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    const funcList: any = {};\r\n    funcList[this._CommandScanResults] = this.notifyFromBinaryScanResponse.bind(\r\n      this,\r\n    );\r\n    funcList[this._CommandConnect] = this.notifyFromBinaryConnect.bind(this);\r\n    funcList[this._CommandServices] = this.notifyFromBinaryServices.bind(this);\r\n    funcList[\r\n      this._CommandCharacteristics\r\n      ] = this.notifyFromBinaryChacateristics.bind(this);\r\n    funcList[\r\n      this._CommandWriteCharacteristics\r\n      ] = this.notifyFromBinaryWriteChacateristics.bind(this);\r\n    funcList[\r\n      this._CommandReadCharacteristics\r\n      ] = this.notifyFromBinaryReadChacateristics.bind(this);\r\n    funcList[\r\n      this._CommandRegisterNotifyCharacteristic\r\n      ] = this.notifyFromBinaryRegisterNotifyChacateristic.bind(this);\r\n    funcList[\r\n      this._CommandUnregisterNotifyCharacteristic\r\n      ] = this.notifyFromBinaryUnregisterNotifyChacateristic.bind(this);\r\n    funcList[\r\n      this._CommandNotifyCharacteristic\r\n      ] = this.notifyFromBinaryNotifyChacateristic.bind(this);\r\n    funcList[this._CommandDescriptors] = this.notifyFromBinaryDescriptors.bind(\r\n      this,\r\n    );\r\n    funcList[\r\n      this._CommandWriteDescriptor\r\n      ] = this.notifyFromBinaryWriteDescriptor.bind(this);\r\n    funcList[\r\n      this._CommandReadDescriptor\r\n      ] = this.notifyFromBinaryReadDescriptor.bind(this);\r\n\r\n    funcList[\r\n      this._CommandServerNotifyConnect\r\n      ] = this.notifyFromBinaryServerConnectionState.bind(this);\r\n    funcList[\r\n      this._CommandServerReadCharavteristicValue\r\n      ] = this.notifyFromBinaryServerReadCharavteristicValue.bind(this);\r\n    funcList[\r\n      this._CommandServerWriteCharavteristicValue\r\n      ] = this.notifyFromBinaryServerWriteCharavteristicValue.bind(this);\r\n    funcList[\r\n      this._CommandServerNotifyReadCharavteristicValue\r\n      ] = this.notifyFromBinaryServerNotifyReadCharavteristicValue.bind(this);\r\n    funcList[\r\n      this._CommandServerNotifyWriteCharavteristicValue\r\n      ] = this.notifyFromBinaryServerNotifyWriteCharavteristicValue.bind(this);\r\n    funcList[\r\n      this._CommandServerReadDescriptorValue\r\n      ] = this.notifyFromBinaryServerReadDescriptorValue.bind(this);\r\n    funcList[\r\n      this._CommandServerWriteDescriptorValue\r\n      ] = this.notifyFromBinaryServerWriteDescriptorValue.bind(this);\r\n    funcList[\r\n      this._CommandServerNotifyReadDescriptorValue\r\n      ] = this.notifyFromBinaryServerNotifyReadDescriptorValue.bind(this);\r\n    funcList[\r\n      this._CommandServerNotifyWriteDescriptorValue\r\n      ] = this.notifyFromBinaryServerNotifyWriteDescriptorValue.bind(this);\r\n\r\n    funcList[this.COMMAND_FUNC_ID_ERROR] = this.notifyFromBinaryError.bind(\r\n      this,\r\n    );\r\n\r\n    Object.assign(funcList, this.hciCommand.notifyFunctionList());\r\n\r\n    if (funcList[func]) {\r\n      funcList[func](objToSend, payload);\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryScanResponse(objToSend: any, payload?: any) {\r\n    if (payload.byteLength > 1) {\r\n      const schema: any = [\r\n        {\r\n          name: \"event_type\",\r\n          type: \"enum\",\r\n          length: 1,\r\n          enum: this._CommandScanResultsEvet,\r\n        },\r\n        {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n        {\r\n          name: \"device_type\",\r\n          type: \"enum\",\r\n          length: 1,\r\n          enum: this._CommandScanResultsDevice,\r\n        },\r\n        {\r\n          name: \"address_type\",\r\n          type: \"enum\",\r\n          length: 1,\r\n          enum: this._CommandScanResultsDeviceAddress,\r\n        },\r\n        {\r\n          name: \"ble_event_type\",\r\n          type: \"enum\",\r\n          length: 1,\r\n          enum: this._CommandScanResultsBleEvent,\r\n        },\r\n        {name: \"rssi\", type: \"signed number\", length: 4},\r\n        {name: \"adv_data\", type: \"dataArray\", length: 31 * 2},\r\n        {name: \"flag\", type: \"number\", length: 4},\r\n        {name: \"num_response\", type: \"number\", length: 4},\r\n        {name: \"advertise_length\", type: \"number\", length: 1},\r\n        {name: \"scan_response_length\", type: \"number\", length: 1},\r\n      ];\r\n\r\n      const results: any = JsonBinaryConverter.convertFromBinaryToJson(\r\n        schema,\r\n        payload,\r\n      );\r\n\r\n      results.scan_resp = results.adv_data.slice(\r\n        results.advertise_length,\r\n        results.advertise_length + results.scan_response_length,\r\n      );\r\n      results.adv_data = results.adv_data.slice(0, results.advertise_length);\r\n\r\n      delete results.num_response;\r\n      delete results.advertise_length;\r\n      delete results.scan_response_length;\r\n      delete results.advertise_data;\r\n\r\n      if (results.event_type === \"inquiry_result\") {\r\n        delete results.event_type;\r\n        this._addRowForPath(objToSend, \"ble.scan_result\", results);\r\n      } else if (results.event_type === \"inquiry_complete\") {\r\n        this._addRowForPath(objToSend, \"ble.scan_result_finish\", true);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryConnect(objToSend: any, payload?: any) {\r\n    if (payload.length === 7) {\r\n      const schema: any = [\r\n        {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n        {\r\n          name: \"status\",\r\n          type: \"enum\",\r\n          length: 1,\r\n          enum: {connected: 0, disconnected: 1},\r\n        },\r\n      ];\r\n\r\n      const results: any = JsonBinaryConverter.convertFromBinaryToJson(\r\n        schema,\r\n        payload,\r\n      );\r\n      this._addRowForPath(objToSend, \"ble.status_update\", results);\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryServices(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n\r\n    if (results.service_uuid !== null) {\r\n      this._addRowForPath(objToSend, \"ble.get_service_result\", results);\r\n    } else {\r\n      delete results.service_uuid;\r\n      this._addRowForPath(objToSend, \"ble.get_service_result_finish\", results);\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryChacateristics(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {\r\n        name: \"properties\",\r\n        type: \"enum\",\r\n        length: 1,\r\n        enum: this._CommandCharacteristicsProperties,\r\n        flags: true,\r\n      },\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n\r\n    if (results.characteristic_uuid !== null) {\r\n      this._addRowForPath(objToSend, \"ble.get_characteristic_result\", results);\r\n    } else {\r\n      delete results.characteristic_uuid;\r\n      delete results.properties;\r\n      this._addRowForPath(\r\n        objToSend,\r\n        \"ble.get_characteristic_result_finish\",\r\n        results,\r\n      );\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryReadChacateristics(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(objToSend, \"ble.read_characteristic_result\", results);\r\n  }\r\n\r\n  public notifyFromBinaryWriteChacateristics(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(objToSend, \"ble.write_characteristic_result\", results);\r\n  }\r\n\r\n  public notifyFromBinaryRegisterNotifyChacateristic(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.register_notify_characteristic_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryUnregisterNotifyChacateristic(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.unregister_notify_characteristic_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryNotifyChacateristic(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"is_notify\", type: \"int\", length: 1},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.is_notify = results.is_notify === 1;\r\n    this._addRowForPath(objToSend, \"ble.notify_characteristic\", results);\r\n  }\r\n\r\n  public notifyFromBinaryDescriptors(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n\r\n    if (results.descriptor_uuid !== null) {\r\n      this._addRowForPath(objToSend, \"ble.get_descriptor_result\", results);\r\n    } else {\r\n      delete results.descriptor_uuid;\r\n      this._addRowForPath(\r\n        objToSend,\r\n        \"ble.get_descriptor_result_finish\",\r\n        results,\r\n      );\r\n    }\r\n  }\r\n\r\n  public notifyFromBinaryReadDescriptor(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(objToSend, \"ble.read_descriptor_result\", results);\r\n  }\r\n\r\n  public notifyFromBinaryWriteDescriptor(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(objToSend, \"ble.write_descriptor_result\", results);\r\n  }\r\n\r\n  public notifyFromBinaryServerConnectionState(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {\r\n        name: \"status\",\r\n        type: \"enum\",\r\n        length: 1,\r\n        enum: {connected: 1, disconnected: 0},\r\n      },\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    this._addRowForPath(objToSend, \"ble.peripheral.connection_status\", results);\r\n  }\r\n\r\n  public notifyFromBinaryServerWriteCharavteristicValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.write_characteristic_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerReadCharavteristicValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result = \"success\"; // always success\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.read_characteristic_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerNotifyReadCharavteristicValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.notify_read_characteristic\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerNotifyWriteCharavteristicValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.notify_write_characteristic\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerReadDescriptorValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result = \"success\"; // always success\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.read_descriptor_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerWriteDescriptorValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"result\", type: \"int\", length: 1},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    results.result =\r\n      results.result === this._commandResults.success ? \"success\" : \"failed\";\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.write_descriptor_result\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerNotifyReadDescriptorValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.notify_read_descriptor\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryServerNotifyWriteDescriptorValue(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"data\", type: \"dataArray\", length: null},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n    this._addRowForPath(\r\n      objToSend,\r\n      \"ble.peripheral.notify_write_descriptor\",\r\n      results,\r\n    );\r\n  }\r\n\r\n  public notifyFromBinaryError(objToSend: any, payload?: any) {\r\n    const schema: any = [\r\n      {name: \"module_error_code\", type: \"char\", length: 1},\r\n      {name: \"error_code\", type: \"char\", length: 1},\r\n      {name: \"function_code\", type: \"char\", length: 1},\r\n      {name: \"address\", type: \"hex\", length: 6, endianness: \"little\"},\r\n      {name: \"service_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"characteristic_uuid\", type: \"uuid\", length: this.uuidLength},\r\n      {name: \"descriptor_uuid\", type: \"uuid\", length: this.uuidLength},\r\n    ];\r\n\r\n    const results: any = JsonBinaryConverter.convertFromBinaryToJson(schema, payload);\r\n\r\n    const errorMessage: any = {\r\n      0x00: \"no error\",\r\n      0x01: \"device not connected\",\r\n      0x02: \"service not found\",\r\n      0x03: \"charavteristic not found\",\r\n      0x04: \"descriptor not found\",\r\n      0x05: \"no permission\",\r\n      0x06: \"device not found\",\r\n      0x07: \"ble is busy\",\r\n      0x08: \"service already running\",\r\n      0x09: \"security param are already set\",\r\n      0xff: \"error\",\r\n    };\r\n\r\n    const functionMessage: any = {\r\n      0: \"on setting advertisement data\",\r\n      1: \"on setting scan response data\",\r\n      2: \"on starting advertisement\",\r\n      3: \"on stopping advertisement\",\r\n      4: \"on starting scan\",\r\n      5: \"on stoping scan\",\r\n      6: \"\",\r\n      7: \"on connecting device\",\r\n      8: \"on getting services\",\r\n      9: \"on getting characteristic\",\r\n      10: \"on writing characteristic\",\r\n      11: \"on reading characteristic\",\r\n      14: \"on getting descriptor\",\r\n      15: \"on writing descriptor\",\r\n      16: \"on reading descriptor\",\r\n      20: \"on start pheripheral\",\r\n      21: \"on notify connect\",\r\n      22: \"on adding service\",\r\n      23: \"on adding characteristic\",\r\n      24: \"on adding descriptor\",\r\n      25: \"on writing characteristic\",\r\n      26: \"on reading characteristic\",\r\n      27: \"on writing characteristic from remote\",\r\n      28: \"on reading characteristic from remote\",\r\n      29: \"on writing descriptor\",\r\n      30: \"on reading descriptor\",\r\n      31: \"on writing descriptor from remote\",\r\n      32: \"on reading descriptor from remote\",\r\n      33: \"on notify characteristic\",\r\n      34: \"on start/stop service\",\r\n      35: \"on set security auth param\",\r\n      36: \"on set security encryption level param\",\r\n      37: \"on set security key type param\",\r\n      38: \"on set security key size param\",\r\n      39: \"on set security io capability\",\r\n      40: \"on clear bonding devices list\",\r\n    };\r\n\r\n    results.message =\r\n      errorMessage[results.error_code] +\r\n      \" \" +\r\n      functionMessage[results.function_code];\r\n\r\n    this.envelopError(objToSend, \"ble\", results);\r\n  }\r\n\r\n  public _addRowForPath(sendObj: any, path: any, row: any) {\r\n    const keys: any = path.split(\".\");\r\n    let target: any = sendObj;\r\n    for (let index = 0; index < keys.length - 1; index++) {\r\n      target[keys[index]] = target[keys[index]] || {};\r\n      target = target[keys[index]];\r\n    }\r\n    target[keys[keys.length - 1]] = row;\r\n  }\r\n}\r\n\r\nexport default WSCommandBle;\r\n"]}