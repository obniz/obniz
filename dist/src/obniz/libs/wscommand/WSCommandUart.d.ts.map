{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandUart.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,aAAc,SAAQ,SAAS;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,YAAY,EAAE,GAAG,CAAC;IAClB,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAc5B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAiD7B,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAM/B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAO7B,aAAa,CAAC,IAAI,EAAE,GAAG;IAwBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAehE;AAED,eAAe,aAAa,CAAC","file":"WSCommandUart.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandUart extends WSCommand {\r\n  public module: any;\r\n  public _CommandInit: any;\r\n  public _CommandDeinit: any;\r\n  public _CommandSend: any;\r\n  public _CommandRecv: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 4;\r\n\r\n    this._CommandInit = 0;\r\n    this._CommandDeinit = 1;\r\n    this._CommandSend = 2;\r\n    this._CommandRecv = 3;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public init(params: any, module: any) {\r\n    const buf: any = new Uint8Array(13);\r\n    buf[0] = module;\r\n    buf[1] = parseInt(params.tx);\r\n    buf[2] = parseInt(params.rx);\r\n\r\n    buf[3] = params.baud >> (3 * 8);\r\n    buf[4] = params.baud >> (2 * 8);\r\n    buf[5] = params.baud >> (1 * 8);\r\n    buf[6] = params.baud;\r\n\r\n    if (params.stop === 1) {\r\n      buf[7] = 1;\r\n    } else if (params.stop === 1.5) {\r\n      buf[7] = 2;\r\n    } else if (params.stop === 2) {\r\n      buf[7] = 3;\r\n    } else if (params.stop === 0) {\r\n      buf[7] = 0;\r\n    } else {\r\n      throw new Error(\"uart: invalid stop bits\");\r\n    }\r\n\r\n    buf[8] = params.bits;\r\n\r\n    if (params.parity === \"even\") {\r\n      buf[9] = 2;\r\n    } else if (params.parity === \"odd\") {\r\n      buf[9] = 3;\r\n    }\r\n\r\n    if (params.flowcontrol === \"rts\") {\r\n      buf[10] = 2;\r\n    } else if (params.flowcontrol === \"cts\") {\r\n      buf[10] = 3;\r\n    } else if (params.flowcontrol === \"rts-cts\") {\r\n      buf[10] = 4;\r\n    }\r\n\r\n    if (params.rts !== null) {\r\n      buf[11] = params.rts;\r\n    }\r\n    if (params.cts !== null) {\r\n      buf[12] = params.cts;\r\n    }\r\n\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public deinit(params: any, module: any) {\r\n    const buf: any = new Uint8Array(1);\r\n    buf[0] = module;\r\n    this.sendCommand(this._CommandDeinit, buf);\r\n  }\r\n\r\n  public send(params: any, module: any) {\r\n    const buf: any = new Uint8Array(1 + params.data.length);\r\n    buf[0] = module;\r\n    buf.set(params.data, 1);\r\n    this.sendCommand(this._CommandSend, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    // 0~2\r\n    for (let i = 0; i < 3; i++) {\r\n      const module: any = json[\"uart\" + i];\r\n      if (module === undefined) {\r\n        continue;\r\n      }\r\n      const schemaData: any = [\r\n        {uri: \"/request/uart/init\", onValid: this.init},\r\n        {uri: \"/request/uart/send\", onValid: this.send},\r\n        {uri: \"/request/uart/deinit\", onValid: this.deinit},\r\n      ];\r\n      const res: any = this.validateCommandSchema(schemaData, module, \"uart\" + i, i);\r\n\r\n      if (res.valid === 0) {\r\n        if (res.invalidButLike.length > 0) {\r\n          throw new Error(res.invalidButLike[0].message);\r\n        } else {\r\n          throw new this.WSCommandNotFoundError(`[uart${i}]unknown command`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (func === this._CommandRecv && payload.byteLength > 1) {\r\n      const module_index: any = payload[0];\r\n      const arr: any = new Array(payload.byteLength - 1);\r\n      for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = payload[i + 1];\r\n      }\r\n\r\n      objToSend[\"uart\" + module_index] = {\r\n        data: arr,\r\n      };\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandUart;\r\n"]}