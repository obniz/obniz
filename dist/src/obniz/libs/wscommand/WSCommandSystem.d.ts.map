{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandSystem.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,eAAgB,SAAQ,SAAS;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,cAAc,EAAE,GAAG,CAAC;IACpB,aAAa,EAAE,GAAG,CAAC;IACnB,iBAAiB,EAAE,GAAG,CAAC;IACvB,YAAY,EAAE,GAAG,CAAC;IAClB,yBAAyB,EAAE,GAAG,CAAC;IAC/B,gBAAgB,EAAE,GAAG,CAAC;IACtB,WAAW,EAAE,GAAG,CAAC;IACjB,oBAAoB,EAAE,GAAG,CAAC;IAC1B,mBAAmB,EAAE,GAAG,CAAC;IACzB,sBAAsB,EAAE,GAAG,CAAC;IAC5B,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;IAC5B,cAAc,EAAE,GAAG,CAAC;;IAsBpB,MAAM,CAAC,MAAM,EAAE,GAAG;IAIlB,KAAK,CAAC,MAAM,EAAE,GAAG;IAIjB,SAAS,CAAC,MAAM,EAAE,GAAG;IAIrB,IAAI,CAAC,MAAM,EAAE,GAAG;IAMhB,oBAAoB,CAAC,MAAM,EAAE,GAAG;IAIhC,IAAI,CAAC,MAAM,EAAE,GAAG;IAoBhB,iBAAiB,CAAC,SAAS,EAAE,GAAG;IAKhC,aAAa,CAAC,IAAI,EAAE,GAAG;IA+BvB,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IA2BjC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAuBxD,YAAY,CAAC,MAAM,EAAE,GAAG;IAMxB,WAAW,CAAC,MAAM,EAAE,GAAG;IAMvB,cAAc,CAAC,MAAM,EAAE,GAAG;CAUlC;AAED,eAAe,eAAe,CAAC","file":"WSCommandSystem.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\n\nclass WSCommandSystem extends WSCommand {\n  public module: any;\n  public _CommandReboot: any;\n  public _CommandReset: any;\n  public _CommandSelfCheck: any;\n  public _CommandWait: any;\n  public _CommandResetOnDisconnect: any;\n  public _CommandPingPong: any;\n  public _CommandVCC: any;\n  public _CommandSleepSeconds: any;\n  public _CommandSleepMinute: any;\n  public _CommandSleepIoTrigger: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n  public envelopWarning: any;\n\n  constructor() {\n    super();\n    this.module = 0;\n\n    this._CommandReboot = 0;\n\n    this._CommandReset = 2;\n    this._CommandSelfCheck = 3;\n    this._CommandWait = 4;\n    this._CommandResetOnDisconnect = 5;\n\n    this._CommandPingPong = 8;\n    this._CommandVCC = 9;\n    this._CommandSleepSeconds = 10;\n    this._CommandSleepMinute = 11;\n    this._CommandSleepIoTrigger = 12;\n  }\n\n  // Commands\n\n  public reboot(params: any) {\n    this.sendCommand(this._CommandReboot, null);\n  }\n\n  public reset(params: any) {\n    this.sendCommand(this._CommandReset, null);\n  }\n\n  public selfCheck(params: any) {\n    this.sendCommand(this._CommandSelfCheck, null);\n  }\n\n  public wait(params: any) {\n    const msec: any = params.wait;\n    const buf: any = new Uint8Array([msec >> 8, msec]);\n    this.sendCommand(this._CommandWait, buf);\n  }\n\n  public keepWorkingAtOffline(params: any) {\n    this.resetOnDisconnect(!params.keep_working_at_offline);\n  }\n\n  public ping(params: any) {\n    const unixtime: any = new Date().getTime();\n    const buf: any = new Uint8Array(params.ping.key.length + 8);\n    const upper: any = Math.floor(unixtime / Math.pow(2, 32));\n    const lower: any = unixtime - upper * Math.pow(2, 32);\n    buf[0] = upper >> (8 * 3);\n    buf[1] = upper >> (8 * 2);\n    buf[2] = upper >> (8 * 1);\n    buf[3] = upper >> (8 * 0);\n    buf[4] = lower >> (8 * 3);\n    buf[5] = lower >> (8 * 2);\n    buf[6] = lower >> (8 * 1);\n    buf[7] = lower >> (8 * 0);\n    for (let i = 0; i < params.ping.key.length; i++) {\n      buf[8 + i] = params.ping.key[i];\n    }\n\n    this.sendCommand(this._CommandPingPong, buf);\n  }\n\n  public resetOnDisconnect(mustReset: any) {\n    const buf: any = new Uint8Array([mustReset ? 1 : 0]);\n    this.sendCommand(this._CommandResetOnDisconnect, buf);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.system;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [\n      {uri: \"/request/system/reboot\", onValid: this.reboot},\n      {uri: \"/request/system/reset\", onValid: this.reset},\n      {uri: \"/request/system/wait\", onValid: this.wait},\n      {uri: \"/request/system/selfCheck\", onValid: this.selfCheck},\n      {\n        uri: \"/request/system/keepWorkingAtOffline\",\n        onValid: this.keepWorkingAtOffline,\n      },\n      {uri: \"/request/system/ping\", onValid: this.ping},\n      {uri: \"/request/system/sleepSeconds\", onValid: this.sleepSeconds},\n      {uri: \"/request/system/sleepMinute\", onValid: this.sleepMinute},\n      {uri: \"/request/system/sleepIoTrigger\", onValid: this.sleepIoTrigger},\n    ];\n    const res: any = this.validateCommandSchema(schemaData, module, \"system\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[system]unknown command`);\n      }\n    }\n  }\n\n  public pong(objToSend: any, payload: any) {\n    objToSend.system = objToSend.system || {};\n    const pongServerTime: any = new Date().getTime();\n\n    if (payload.length >= 16) {\n      payload = Buffer.from(payload);\n      const obnizTime: any =\n        payload.readUIntBE(0, 4) * Math.pow(2, 32) + payload.readUIntBE(4, 4);\n      const pingServerTime: any =\n        payload.readUIntBE(8, 4) * Math.pow(2, 32) + payload.readUIntBE(12, 4);\n      const key: any = [];\n      for (let i = 16; i < payload.length; i++) {\n        key.push(payload[i]);\n      }\n      objToSend.system.pong = {\n        key,\n        obnizTime,\n        pingServerTime,\n        pongServerTime,\n      };\n    } else {\n      objToSend.system.pong = {\n        pongServerTime,\n      };\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandVCC:\n        if (payload.byteLength === 3) {\n          let value: any = (payload[1] << 8) + payload[2];\n          value = value / 100.0;\n          this.envelopWarning(objToSend, \"debug\", {\n            message: `Low Voltage ${value}v. connect obniz to more powerful USB.`,\n          });\n        }\n        break;\n\n      case this._CommandPingPong:\n        this.pong(objToSend, payload);\n\n        break;\n\n      default:\n        super.notifyFromBinary(objToSend, func, payload);\n        break;\n    }\n  }\n\n  public sleepSeconds(params: any) {\n    const sec: any = params.sleep_seconds;\n    const buf: any = new Uint8Array([sec >> 8, sec]);\n    this.sendCommand(this._CommandSleepSeconds, buf);\n  }\n\n  public sleepMinute(params: any) {\n    const minute: any = params.sleep_minute;\n    const buf: any = new Uint8Array([minute >> 8, minute]);\n    this.sendCommand(this._CommandSleepMinute, buf);\n  }\n\n  public sleepIoTrigger(params: any) {\n    let trigger: any = params.sleep_io_trigger;\n    if (trigger === true) {\n      trigger = 1;\n    } else {\n      trigger = 0;\n    }\n    const buf: any = new Uint8Array([trigger]);\n    this.sendCommand(this._CommandSleepIoTrigger, buf);\n  }\n}\n\nexport default WSCommandSystem;\n"]}