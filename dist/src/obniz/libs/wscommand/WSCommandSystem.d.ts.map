{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandSystem.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,eAAgB,SAAQ,SAAS;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,cAAc,EAAE,GAAG,CAAC;IACpB,aAAa,EAAE,GAAG,CAAC;IACnB,iBAAiB,EAAE,GAAG,CAAC;IACvB,YAAY,EAAE,GAAG,CAAC;IAClB,yBAAyB,EAAE,GAAG,CAAC;IAC/B,gBAAgB,EAAE,GAAG,CAAC;IACtB,WAAW,EAAE,GAAG,CAAC;IACjB,oBAAoB,EAAE,GAAG,CAAC;IAC1B,mBAAmB,EAAE,GAAG,CAAC;IACzB,sBAAsB,EAAE,GAAG,CAAC;IAC5B,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;IAC5B,cAAc,EAAE,GAAG,CAAC;;IAsBpB,MAAM,CAAC,MAAM,EAAE,GAAG;IAIlB,KAAK,CAAC,MAAM,EAAE,GAAG;IAIjB,SAAS,CAAC,MAAM,EAAE,GAAG;IAIrB,IAAI,CAAC,MAAM,EAAE,GAAG;IAMhB,oBAAoB,CAAC,MAAM,EAAE,GAAG;IAIhC,IAAI,CAAC,MAAM,EAAE,GAAG;IAoBhB,iBAAiB,CAAC,SAAS,EAAE,GAAG;IAKhC,aAAa,CAAC,IAAI,EAAE,GAAG;IA+BvB,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IA2BjC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAuBxD,YAAY,CAAC,MAAM,EAAE,GAAG;IAMxB,WAAW,CAAC,MAAM,EAAE,GAAG;IAMvB,cAAc,CAAC,MAAM,EAAE,GAAG;CAUlC;AAED,eAAe,eAAe,CAAC","file":"WSCommandSystem.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandSystem extends WSCommand {\r\n  public module: any;\r\n  public _CommandReboot: any;\r\n  public _CommandReset: any;\r\n  public _CommandSelfCheck: any;\r\n  public _CommandWait: any;\r\n  public _CommandResetOnDisconnect: any;\r\n  public _CommandPingPong: any;\r\n  public _CommandVCC: any;\r\n  public _CommandSleepSeconds: any;\r\n  public _CommandSleepMinute: any;\r\n  public _CommandSleepIoTrigger: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n  public envelopWarning: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 0;\r\n\r\n    this._CommandReboot = 0;\r\n\r\n    this._CommandReset = 2;\r\n    this._CommandSelfCheck = 3;\r\n    this._CommandWait = 4;\r\n    this._CommandResetOnDisconnect = 5;\r\n\r\n    this._CommandPingPong = 8;\r\n    this._CommandVCC = 9;\r\n    this._CommandSleepSeconds = 10;\r\n    this._CommandSleepMinute = 11;\r\n    this._CommandSleepIoTrigger = 12;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public reboot(params: any) {\r\n    this.sendCommand(this._CommandReboot, null);\r\n  }\r\n\r\n  public reset(params: any) {\r\n    this.sendCommand(this._CommandReset, null);\r\n  }\r\n\r\n  public selfCheck(params: any) {\r\n    this.sendCommand(this._CommandSelfCheck, null);\r\n  }\r\n\r\n  public wait(params: any) {\r\n    const msec: any = params.wait;\r\n    const buf: any = new Uint8Array([msec >> 8, msec]);\r\n    this.sendCommand(this._CommandWait, buf);\r\n  }\r\n\r\n  public keepWorkingAtOffline(params: any) {\r\n    this.resetOnDisconnect(!params.keep_working_at_offline);\r\n  }\r\n\r\n  public ping(params: any) {\r\n    const unixtime: any = new Date().getTime();\r\n    const buf: any = new Uint8Array(params.ping.key.length + 8);\r\n    const upper: any = Math.floor(unixtime / Math.pow(2, 32));\r\n    const lower: any = unixtime - upper * Math.pow(2, 32);\r\n    buf[0] = upper >> (8 * 3);\r\n    buf[1] = upper >> (8 * 2);\r\n    buf[2] = upper >> (8 * 1);\r\n    buf[3] = upper >> (8 * 0);\r\n    buf[4] = lower >> (8 * 3);\r\n    buf[5] = lower >> (8 * 2);\r\n    buf[6] = lower >> (8 * 1);\r\n    buf[7] = lower >> (8 * 0);\r\n    for (let i = 0; i < params.ping.key.length; i++) {\r\n      buf[8 + i] = params.ping.key[i];\r\n    }\r\n\r\n    this.sendCommand(this._CommandPingPong, buf);\r\n  }\r\n\r\n  public resetOnDisconnect(mustReset: any) {\r\n    const buf: any = new Uint8Array([mustReset ? 1 : 0]);\r\n    this.sendCommand(this._CommandResetOnDisconnect, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    const module: any = json.system;\r\n    if (module === undefined) {\r\n      return;\r\n    }\r\n\r\n    const schemaData: any = [\r\n      {uri: \"/request/system/reboot\", onValid: this.reboot},\r\n      {uri: \"/request/system/reset\", onValid: this.reset},\r\n      {uri: \"/request/system/wait\", onValid: this.wait},\r\n      {uri: \"/request/system/selfCheck\", onValid: this.selfCheck},\r\n      {\r\n        uri: \"/request/system/keepWorkingAtOffline\",\r\n        onValid: this.keepWorkingAtOffline,\r\n      },\r\n      {uri: \"/request/system/ping\", onValid: this.ping},\r\n      {uri: \"/request/system/sleepSeconds\", onValid: this.sleepSeconds},\r\n      {uri: \"/request/system/sleepMinute\", onValid: this.sleepMinute},\r\n      {uri: \"/request/system/sleepIoTrigger\", onValid: this.sleepIoTrigger},\r\n    ];\r\n    const res: any = this.validateCommandSchema(schemaData, module, \"system\");\r\n\r\n    if (res.valid === 0) {\r\n      if (res.invalidButLike.length > 0) {\r\n        throw new Error(res.invalidButLike[0].message);\r\n      } else {\r\n        throw new this.WSCommandNotFoundError(`[system]unknown command`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public pong(objToSend: any, payload: any) {\r\n    objToSend.system = objToSend.system || {};\r\n    const pongServerTime: any = new Date().getTime();\r\n\r\n    if (payload.length >= 16) {\r\n      payload = Buffer.from(payload);\r\n      const obnizTime: any =\r\n        payload.readUIntBE(0, 4) * Math.pow(2, 32) + payload.readUIntBE(4, 4);\r\n      const pingServerTime: any =\r\n        payload.readUIntBE(8, 4) * Math.pow(2, 32) + payload.readUIntBE(12, 4);\r\n      const key: any = [];\r\n      for (let i = 16; i < payload.length; i++) {\r\n        key.push(payload[i]);\r\n      }\r\n      objToSend.system.pong = {\r\n        key,\r\n        obnizTime,\r\n        pingServerTime,\r\n        pongServerTime,\r\n      };\r\n    } else {\r\n      objToSend.system.pong = {\r\n        pongServerTime,\r\n      };\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    switch (func) {\r\n      case this._CommandVCC:\r\n        if (payload.byteLength === 3) {\r\n          let value: any = (payload[1] << 8) + payload[2];\r\n          value = value / 100.0;\r\n          this.envelopWarning(objToSend, \"debug\", {\r\n            message: `Low Voltage ${value}v. connect obniz to more powerful USB.`,\r\n          });\r\n        }\r\n        break;\r\n\r\n      case this._CommandPingPong:\r\n        this.pong(objToSend, payload);\r\n\r\n        break;\r\n\r\n      default:\r\n        super.notifyFromBinary(objToSend, func, payload);\r\n        break;\r\n    }\r\n  }\r\n\r\n  public sleepSeconds(params: any) {\r\n    const sec: any = params.sleep_seconds;\r\n    const buf: any = new Uint8Array([sec >> 8, sec]);\r\n    this.sendCommand(this._CommandSleepSeconds, buf);\r\n  }\r\n\r\n  public sleepMinute(params: any) {\r\n    const minute: any = params.sleep_minute;\r\n    const buf: any = new Uint8Array([minute >> 8, minute]);\r\n    this.sendCommand(this._CommandSleepMinute, buf);\r\n  }\r\n\r\n  public sleepIoTrigger(params: any) {\r\n    let trigger: any = params.sleep_io_trigger;\r\n    if (trigger === true) {\r\n      trigger = 1;\r\n    } else {\r\n      trigger = 0;\r\n    }\r\n    const buf: any = new Uint8Array([trigger]);\r\n    this.sendCommand(this._CommandSleepIoTrigger, buf);\r\n  }\r\n}\r\n\r\nexport default WSCommandSystem;\r\n"]}