{"version":3,"sources":["../src/obniz/libs/wscommand/jsonBinaryConverter.ts"],"names":[],"mappings":"AAAA,cAAM,mBAAmB;WACT,uBAAuB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;WA6BhD,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAYrC,cAAc,CAAC,IAAI,EAAE,GAAG;WAaxB,sBAAsB,CAAC,IAAI,EAAE,GAAG;WAYhC,gBAAgB,CAAC,IAAI,EAAE,GAAG;WAS1B,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;WAMjC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAsBtC,mBAAmB,CAAC,IAAI,EAAE,GAAG;WAQ7B,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAyBvC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;WAiC1C,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAsBlC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAYnC,WAAW,CAAC,IAAI,EAAE,GAAG;WASrB,YAAY,CAAC,IAAI,EAAE,GAAG;WAMtB,iBAAiB,CAAC,IAAI,EAAE,GAAG;WAO3B,YAAY,CAAC,IAAI,EAAE,GAAG;WAkBtB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAMpC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAoBpC,cAAc,CAAC,IAAI,EAAE,GAAG;CAGvC;AAED,eAAe,mBAAmB,CAAC","file":"jsonBinaryConverter.d.ts","sourcesContent":["class JsonBinaryConverter {\r\n  public static convertFromBinaryToJson(schema: any, binary: any) {\r\n    const types: any = {\r\n      \"hex\": this.hexFromBinary.bind(this),\r\n      \"uuid\": this.uuidFromBinary.bind(this),\r\n      \"number\": this.numberFromBinary.bind(this),\r\n      \"signed number\": this.signedNumberFromBinary.bind(this),\r\n      \"int\": this.numberFromBinary.bind(this),\r\n      \"char\": this.numberFromBinary.bind(this),\r\n      \"enum\": this.enumFromBinary.bind(this),\r\n      \"dataArray\": this.dataArrayFromBinary.bind(this),\r\n    };\r\n    const json: any = {};\r\n    let count: any = 0;\r\n    for (let i = 0; i < schema.length; i++) {\r\n      const data: any = binary.slice(\r\n        count,\r\n        schema[i].length ? count + schema[i].length : undefined,\r\n      );\r\n      json[schema[i].name] = types[schema[i].type](data, schema[i]);\r\n\r\n      if (schema[i].length) {\r\n        count += schema[i].length;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return json;\r\n  }\r\n\r\n  public static hexFromBinary(data: any, schema?: any) {\r\n    let str: any = \"\";\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (schema.endianness && schema.endianness === \"little\") {\r\n        str = (\"00\" + data[i].toString(16)).slice(-2) + str;\r\n      } else {\r\n        str = str + (\"00\" + data[i].toString(16)).slice(-2);\r\n      }\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public static uuidFromBinary(data: any) {\r\n    const len: any = data[0] * 16 + data[1];\r\n    if (len === 0) {\r\n      return null;\r\n    }\r\n    const uuidData: any = data.slice(2);\r\n    let str: any = \"\";\r\n    for (let i = 0; i < len; i++) {\r\n      str = (\"00\" + uuidData[i].toString(16)).slice(-2) + str;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public static signedNumberFromBinary(data: any) {\r\n    // big adian\r\n    let val: any = data[0] & 0x7f;\r\n    for (let i = 1; i < data.length; i++) {\r\n      val = val * 256 + data[i];\r\n    }\r\n    if ((data[0] & 0x80) !== 0) {\r\n      val = val - Math.pow(2, data.length * 8 - 1);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  public static numberFromBinary(data: any) {\r\n    // big adian\r\n    let val: any = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n      val = val * 256 + data[i];\r\n    }\r\n    return val;\r\n  }\r\n\r\n  public static keyForVal(enumvals: any, val: any) {\r\n    return Object.keys(enumvals).filter ((k: any ) => {\r\n      return enumvals[k] === val;\r\n    })[0];\r\n  }\r\n\r\n  public static enumFromBinary(data: any, schema?: any) {\r\n    const enumVals: any = schema.enum;\r\n    let val: any = this.numberFromBinary(data);\r\n\r\n    if (schema.flags === true) {\r\n      const temp: any = [];\r\n      for (const key of Object.keys(enumVals)) {\r\n        const flag: any = enumVals[key] & val;\r\n        if (flag) {\r\n          temp.push(key);\r\n        }\r\n      }\r\n      val = temp;\r\n    } else {\r\n      const tmp: any = this.keyForVal(enumVals, val);\r\n      if (tmp) {\r\n        val = tmp;\r\n      }\r\n    }\r\n    return val;\r\n  }\r\n\r\n  public static dataArrayFromBinary(data: any) {\r\n    const arr: any = new Array(data.length);\r\n    for (let i = 0; i < data.length; i++) {\r\n      arr[i] = data[i];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  public static createSendBuffer(schema: any, data: any) {\r\n    const array: any = [];\r\n    for (let i = 0; i < schema.length; i++) {\r\n      const schemaRow: any = schema[i];\r\n\r\n      let row: any;\r\n      if (Array.isArray(schemaRow)) {\r\n        for (const key in schemaRow) {\r\n          const customSchemaRow: any = Object.assign({}, schemaRow[key], {\r\n            required: true,\r\n          });\r\n          row = this.analyzeSchema(data, customSchemaRow);\r\n          if (row) {\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        row = this.analyzeSchema(data, schemaRow);\r\n      }\r\n\r\n      Array.prototype.push.apply(array, row);\r\n    }\r\n    return new Uint8Array(array);\r\n  }\r\n\r\n  public static analyzeSchema(allData: any, schemaRow: any) {\r\n    const types: any = {\r\n      hex: this.hexToBinary.bind(this),\r\n      uuid: this.uuidToBinary.bind(this),\r\n      int: this.intToBinary.bind(this),\r\n      char: this.charToBinary.bind(this),\r\n      dataArray: this.dataArrayToBinary.bind(this),\r\n      enum: this.enumToBinary.bind(this),\r\n      string: this.stringToBinary.bind(this),\r\n      text: this.stringToBinary.bind(this),\r\n      flag: this.flagToBinary.bind(this),\r\n    };\r\n\r\n    let val: any;\r\n    if (schemaRow.path) {\r\n      val = this.getProperty(allData, schemaRow.path);\r\n    }\r\n    if (val === undefined && schemaRow.required) {\r\n      return null;\r\n    }\r\n    if (val === undefined && schemaRow.default) {\r\n      val = schemaRow.default;\r\n    }\r\n\r\n    const row: any = types[schemaRow.type](val, schemaRow);\r\n\r\n    if (schemaRow.length && row.length !== schemaRow.length) {\r\n      console.log(\"JSON->BINARY SCHEMA ERROR: (\", val, \")\", schemaRow);\r\n    }\r\n\r\n    return row;\r\n  }\r\n\r\n  public static getProperty(object: any, path: any) {\r\n    if (path === \"\" || path === undefined) {\r\n      return object;\r\n    }\r\n    if (typeof path === \"string\") {\r\n      path = path.split(\".\");\r\n    }\r\n    if (!Array.isArray(path)) {\r\n      path = [path];\r\n    }\r\n\r\n    let index: any = 0; const length: any = path.length;\r\n\r\n    while (index < length) {\r\n      object = object[path[index++]];\r\n      if (object === undefined) {\r\n        return undefined;\r\n      }\r\n    }\r\n    return index && index === length ? object : undefined;\r\n  }\r\n\r\n  public static hexToBinary(data: any, schema?: any) {\r\n    const array: any = [];\r\n    const hex: any = data.toLowerCase().replace(/[^0-9abcdef]/g, \"\");\r\n    for (let i = 0; i < hex.length / 2; i++) {\r\n      array[i] = parseInt(hex[i * 2] + hex[i * 2 + 1], 16);\r\n    }\r\n    if (schema && schema.endianness && schema.endianness === \"little\") {\r\n      array.reverse();\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public static intToBinary(data: any) {\r\n    const array: any = [];\r\n    array[0] = (data >> (8 * 3)) & 0xff;\r\n    array[1] = (data >> (8 * 2)) & 0xff;\r\n    array[2] = (data >> (8 * 1)) & 0xff;\r\n    array[3] = (data >> (8 * 0)) & 0xff;\r\n    return array;\r\n  }\r\n\r\n  public static charToBinary(data: any) {\r\n    const array: any = [];\r\n    array[0] = data & 0xff;\r\n    return array;\r\n  }\r\n\r\n  public static dataArrayToBinary(data: any) {\r\n    if (!Array.isArray(data)) {\r\n      data = [data];\r\n    }\r\n    return data;\r\n  }\r\n\r\n  public static uuidToBinary(data: any) {\r\n    const uuid: any = this.hexToBinary(data);\r\n    uuid.reverse(); // big endianness -> little endianness;\r\n    const length: any = uuid.length;\r\n\r\n    const array: any = [];\r\n\r\n    array[0] = (length >> (8 * 1)) & 0xff;\r\n    array[1] = (length >> (8 * 0)) & 0xff;\r\n\r\n    Array.prototype.push.apply(array, uuid);\r\n    for (let i = array.length; i < 16 + 2; i++) {\r\n      array[i] = 0;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  public static enumToBinary(data: any, schema?: any) {\r\n    const array: any = [];\r\n    array.push(schema.enum[data]);\r\n    return array;\r\n  }\r\n\r\n  public static flagToBinary(data: any, schema?: any) {\r\n    if (!Array.isArray(data)) {\r\n      data = [data];\r\n    }\r\n    const flags: any = schema.flags;\r\n    let value: any = 0;\r\n    for (const key in flags) {\r\n      if (data.includes(flags[key])) {\r\n        value += parseInt(key);\r\n      }\r\n    }\r\n    const array: any = [];\r\n    const length: any = schema.length || 1;\r\n    for (let i = length - 1; i >= 0; i--) {\r\n      array.push((value >> (i * 8)) & 0xff);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  public static stringToBinary(data: any) {\r\n    return new Uint8Array(Buffer.from(data, \"utf8\"));\r\n  }\r\n}\r\n\r\nexport default JsonBinaryConverter;\r\n"]}