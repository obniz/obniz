{"version":3,"sources":["../src/obniz/libs/wscommand/jsonBinaryConverter.ts"],"names":[],"mappings":"AAAA,cAAM,mBAAmB;WACT,uBAAuB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;WA6BhD,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAYrC,cAAc,CAAC,IAAI,EAAE,GAAG;WAaxB,sBAAsB,CAAC,IAAI,EAAE,GAAG;WAYhC,gBAAgB,CAAC,IAAI,EAAE,GAAG;WAS1B,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;WAMjC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAsBtC,mBAAmB,CAAC,IAAI,EAAE,GAAG;WAQ7B,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAyBvC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;WAiC1C,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;WAsBlC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAYnC,WAAW,CAAC,IAAI,EAAE,GAAG;WASrB,YAAY,CAAC,IAAI,EAAE,GAAG;WAMtB,iBAAiB,CAAC,IAAI,EAAE,GAAG;WAO3B,YAAY,CAAC,IAAI,EAAE,GAAG;WAkBtB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAMpC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;WAoBpC,cAAc,CAAC,IAAI,EAAE,GAAG;CAGvC;AAED,eAAe,mBAAmB,CAAC","file":"jsonBinaryConverter.d.ts","sourcesContent":["class JsonBinaryConverter {\n  public static convertFromBinaryToJson(schema: any, binary: any) {\n    const types: any = {\n      \"hex\": this.hexFromBinary.bind(this),\n      \"uuid\": this.uuidFromBinary.bind(this),\n      \"number\": this.numberFromBinary.bind(this),\n      \"signed number\": this.signedNumberFromBinary.bind(this),\n      \"int\": this.numberFromBinary.bind(this),\n      \"char\": this.numberFromBinary.bind(this),\n      \"enum\": this.enumFromBinary.bind(this),\n      \"dataArray\": this.dataArrayFromBinary.bind(this),\n    };\n    const json: any = {};\n    let count: any = 0;\n    for (let i = 0; i < schema.length; i++) {\n      const data: any = binary.slice(\n        count,\n        schema[i].length ? count + schema[i].length : undefined,\n      );\n      json[schema[i].name] = types[schema[i].type](data, schema[i]);\n\n      if (schema[i].length) {\n        count += schema[i].length;\n      } else {\n        break;\n      }\n    }\n    return json;\n  }\n\n  public static hexFromBinary(data: any, schema?: any) {\n    let str: any = \"\";\n    for (let i = 0; i < data.length; i++) {\n      if (schema.endianness && schema.endianness === \"little\") {\n        str = (\"00\" + data[i].toString(16)).slice(-2) + str;\n      } else {\n        str = str + (\"00\" + data[i].toString(16)).slice(-2);\n      }\n    }\n    return str;\n  }\n\n  public static uuidFromBinary(data: any) {\n    const len: any = data[0] * 16 + data[1];\n    if (len === 0) {\n      return null;\n    }\n    const uuidData: any = data.slice(2);\n    let str: any = \"\";\n    for (let i = 0; i < len; i++) {\n      str = (\"00\" + uuidData[i].toString(16)).slice(-2) + str;\n    }\n    return str;\n  }\n\n  public static signedNumberFromBinary(data: any) {\n    // big adian\n    let val: any = data[0] & 0x7f;\n    for (let i = 1; i < data.length; i++) {\n      val = val * 256 + data[i];\n    }\n    if ((data[0] & 0x80) !== 0) {\n      val = val - Math.pow(2, data.length * 8 - 1);\n    }\n    return val;\n  }\n\n  public static numberFromBinary(data: any) {\n    // big adian\n    let val: any = 0;\n    for (let i = 0; i < data.length; i++) {\n      val = val * 256 + data[i];\n    }\n    return val;\n  }\n\n  public static keyForVal(enumvals: any, val: any) {\n    return Object.keys(enumvals).filter ((k: any ) => {\n      return enumvals[k] === val;\n    })[0];\n  }\n\n  public static enumFromBinary(data: any, schema?: any) {\n    const enumVals: any = schema.enum;\n    let val: any = this.numberFromBinary(data);\n\n    if (schema.flags === true) {\n      const temp: any = [];\n      for (const key of Object.keys(enumVals)) {\n        const flag: any = enumVals[key] & val;\n        if (flag) {\n          temp.push(key);\n        }\n      }\n      val = temp;\n    } else {\n      const tmp: any = this.keyForVal(enumVals, val);\n      if (tmp) {\n        val = tmp;\n      }\n    }\n    return val;\n  }\n\n  public static dataArrayFromBinary(data: any) {\n    const arr: any = new Array(data.length);\n    for (let i = 0; i < data.length; i++) {\n      arr[i] = data[i];\n    }\n    return arr;\n  }\n\n  public static createSendBuffer(schema: any, data: any) {\n    const array: any = [];\n    for (let i = 0; i < schema.length; i++) {\n      const schemaRow: any = schema[i];\n\n      let row: any;\n      if (Array.isArray(schemaRow)) {\n        for (const key in schemaRow) {\n          const customSchemaRow: any = Object.assign({}, schemaRow[key], {\n            required: true,\n          });\n          row = this.analyzeSchema(data, customSchemaRow);\n          if (row) {\n            break;\n          }\n        }\n      } else {\n        row = this.analyzeSchema(data, schemaRow);\n      }\n\n      Array.prototype.push.apply(array, row);\n    }\n    return new Uint8Array(array);\n  }\n\n  public static analyzeSchema(allData: any, schemaRow: any) {\n    const types: any = {\n      hex: this.hexToBinary.bind(this),\n      uuid: this.uuidToBinary.bind(this),\n      int: this.intToBinary.bind(this),\n      char: this.charToBinary.bind(this),\n      dataArray: this.dataArrayToBinary.bind(this),\n      enum: this.enumToBinary.bind(this),\n      string: this.stringToBinary.bind(this),\n      text: this.stringToBinary.bind(this),\n      flag: this.flagToBinary.bind(this),\n    };\n\n    let val: any;\n    if (schemaRow.path) {\n      val = this.getProperty(allData, schemaRow.path);\n    }\n    if (val === undefined && schemaRow.required) {\n      return null;\n    }\n    if (val === undefined && schemaRow.default) {\n      val = schemaRow.default;\n    }\n\n    const row: any = types[schemaRow.type](val, schemaRow);\n\n    if (schemaRow.length && row.length !== schemaRow.length) {\n      console.log(\"JSON->BINARY SCHEMA ERROR: (\", val, \")\", schemaRow);\n    }\n\n    return row;\n  }\n\n  public static getProperty(object: any, path: any) {\n    if (path === \"\" || path === undefined) {\n      return object;\n    }\n    if (typeof path === \"string\") {\n      path = path.split(\".\");\n    }\n    if (!Array.isArray(path)) {\n      path = [path];\n    }\n\n    let index: any = 0; const length: any = path.length;\n\n    while (index < length) {\n      object = object[path[index++]];\n      if (object === undefined) {\n        return undefined;\n      }\n    }\n    return index && index === length ? object : undefined;\n  }\n\n  public static hexToBinary(data: any, schema?: any) {\n    const array: any = [];\n    const hex: any = data.toLowerCase().replace(/[^0-9abcdef]/g, \"\");\n    for (let i = 0; i < hex.length / 2; i++) {\n      array[i] = parseInt(hex[i * 2] + hex[i * 2 + 1], 16);\n    }\n    if (schema && schema.endianness && schema.endianness === \"little\") {\n      array.reverse();\n    }\n    return array;\n  }\n\n  public static intToBinary(data: any) {\n    const array: any = [];\n    array[0] = (data >> (8 * 3)) & 0xff;\n    array[1] = (data >> (8 * 2)) & 0xff;\n    array[2] = (data >> (8 * 1)) & 0xff;\n    array[3] = (data >> (8 * 0)) & 0xff;\n    return array;\n  }\n\n  public static charToBinary(data: any) {\n    const array: any = [];\n    array[0] = data & 0xff;\n    return array;\n  }\n\n  public static dataArrayToBinary(data: any) {\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    return data;\n  }\n\n  public static uuidToBinary(data: any) {\n    const uuid: any = this.hexToBinary(data);\n    uuid.reverse(); // big endianness -> little endianness;\n    const length: any = uuid.length;\n\n    const array: any = [];\n\n    array[0] = (length >> (8 * 1)) & 0xff;\n    array[1] = (length >> (8 * 0)) & 0xff;\n\n    Array.prototype.push.apply(array, uuid);\n    for (let i = array.length; i < 16 + 2; i++) {\n      array[i] = 0;\n    }\n\n    return array;\n  }\n\n  public static enumToBinary(data: any, schema?: any) {\n    const array: any = [];\n    array.push(schema.enum[data]);\n    return array;\n  }\n\n  public static flagToBinary(data: any, schema?: any) {\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    const flags: any = schema.flags;\n    let value: any = 0;\n    for (const key in flags) {\n      if (data.includes(flags[key])) {\n        value += parseInt(key);\n      }\n    }\n    const array: any = [];\n    const length: any = schema.length || 1;\n    for (let i = length - 1; i >= 0; i--) {\n      array.push((value >> (i * 8)) & 0xff);\n    }\n\n    return array;\n  }\n\n  public static stringToBinary(data: any) {\n    return new Uint8Array(Buffer.from(data, \"utf8\"));\n  }\n}\n\nexport default JsonBinaryConverter;\n"]}