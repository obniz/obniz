{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandTcp.ts"],"names":[],"mappings":"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","file":"WSCommandTcp.js","sourcesContent":["import WSCommand from \"./WSCommand\";\n\nclass WSCommandTcp extends WSCommand {\n  public module: any;\n  public _MaxPort: any;\n  public _CommandConnect: any;\n  public _CommandClose: any;\n  public _CommandConnection: any;\n  public _CommandWrite: any;\n  public _CommandRead: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 13;\n    this._MaxPort = 8;\n\n    this._CommandConnect = 0;\n    this._CommandClose = 1;\n    // Notification\n    this._CommandConnection = 2;\n    this._CommandWrite = 3;\n    // Notification\n    this._CommandRead = 4;\n  }\n\n  public connect(params: any, index: any) {\n    const domain: any = new Uint8Array(Buffer.from(params.connect.domain, \"utf8\"));\n    const buf: any = new Uint8Array(domain.length + 3);\n    buf[0] = index;\n    buf[1] = 0xff && params.connect.port >> 8;\n    buf[2] = 0xff && params.connect.port;\n    for (let i = 0; i < domain.length; i++) {\n      buf[3 + i] = domain[i];\n    }\n    this.sendCommand(this._CommandConnect, buf);\n  }\n\n  public disconnect(params: any, index: any) {\n    const buf: any = new Uint8Array([index]);\n    this.sendCommand(this._CommandClose, buf);\n  }\n\n  public write(params: any, index: any) {\n    const buf: any = new Uint8Array(params.write.data.length + 1);\n    buf[0] = index;\n    for (let i = 0; i < params.write.data.length; i++) {\n      buf[1 + i] = params.write.data[i];\n    }\n    this.sendCommand(this._CommandWrite, buf);\n  }\n\n  public parseFromJson(json: any) {\n    for (let i = 0; i < this._MaxPort; i++) {\n      const module: any = json[\"tcp\" + i];\n      if (module === undefined) {\n        continue;\n      }\n\n      const schemaData: any = [\n        {uri: \"/request/tcp/connect\", onValid: this.connect},\n        {uri: \"/request/tcp/disconnect\", onValid: this.disconnect},\n        {uri: \"/request/tcp/write\", onValid: this.write},\n      ];\n      const res: any = this.validateCommandSchema(schemaData, module, \"tcp\" + i, i);\n\n      if (res.valid === 0) {\n        if (res.invalidButLike.length > 0) {\n          throw new Error(res.invalidButLike[0].message);\n        } else {\n          throw new this.WSCommandNotFoundError(`[tcp${i}]unknown command`);\n        }\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandConnect: {\n        let state: any = \"Error\";\n        switch (payload[1]) {\n          case 0:\n            state = \"ok\";\n            break;\n          case 1:\n            state = \"Port Used\";\n            break;\n          case 2:\n            state = \"Port Area Error\";\n            break;\n          case 3:\n            state = \"Lookup Error\";\n            break;\n          case 4:\n            state = \"Error\";\n            break;\n        }\n        const module_index: any = payload[0];\n        objToSend[\"tcp\" + module_index] = {\n          connect: {\n            message: state,\n            code: payload[1],\n          },\n        };\n        break;\n      }\n      case this._CommandConnection:\n        if (payload.length === 2 && payload[1] === 0) {\n          const module_index: any = payload[0];\n          objToSend[\"tcp\" + module_index] = {\n            connection: {\n              connected: true,\n            },\n          };\n        } else {\n          const module_index: any = payload[0];\n          objToSend[\"tcp\" + module_index] = {\n            connection: {\n              connected: false,\n            },\n          };\n        }\n        break;\n      case this._CommandRead:\n        if (payload.length >= 1) {\n          const module_index: any = payload[0];\n          const arr: any = new Array(payload.byteLength - 1);\n          for (let i = 0; i < arr.length; i++) {\n            arr[i] = payload[i + 1];\n          }\n          objToSend[\"tcp\" + module_index] = {\n            read: {\n              data: arr,\n            },\n          };\n        }\n        break;\n    }\n  }\n}\n\nexport default WSCommandTcp;\n"]}