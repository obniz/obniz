{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandSwitch.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,eAAgB,SAAQ,SAAS;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,mBAAmB,EAAE,GAAG,CAAC;IACzB,aAAa,EAAE,GAAG,CAAC;IACnB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAY5B,GAAG,CAAC,MAAM,EAAE,GAAG;IAKf,aAAa,CAAC,IAAI,EAAE,GAAG;IAiBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAiBhE;AAED,eAAe,eAAe,CAAC","file":"WSCommandSwitch.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\n\nclass WSCommandSwitch extends WSCommand {\n  public module: any;\n  public _CommandNotifyValue: any;\n  public _CommandOnece: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 9;\n\n    this._CommandNotifyValue = 0;\n    this._CommandOnece = 1;\n  }\n\n  // Commands\n\n  public get(params: any) {\n    const buf: any = new Uint8Array(0);\n    this.sendCommand(this._CommandOnece, buf);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.switch;\n    if (module === undefined) {\n      return;\n    }\n    const schemaData: any = [{uri: \"/request/switch/get\", onValid: this.get}];\n    const res: any = this.validateCommandSchema(schemaData, module, \"switch\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[switch]unknown command`);\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    if (\n      (func === this._CommandOnece || func === this._CommandNotifyValue) &&\n      payload.byteLength === 1\n    ) {\n      const state: any = parseInt(payload[0]);\n      const states: any = [\"none\", \"push\", \"left\", \"right\"];\n      objToSend.switch = {\n        state: states[state],\n      };\n      if (func === this._CommandOnece) {\n        objToSend.switch.action = \"get\";\n      }\n    } else {\n      super.notifyFromBinary(objToSend, func, payload);\n    }\n  }\n}\n\nexport default WSCommandSwitch;\n"]}