{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandSwitch.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,eAAgB,SAAQ,SAAS;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,mBAAmB,EAAE,GAAG,CAAC;IACzB,aAAa,EAAE,GAAG,CAAC;IACnB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAY5B,GAAG,CAAC,MAAM,EAAE,GAAG;IAKf,aAAa,CAAC,IAAI,EAAE,GAAG;IAiBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAiBhE;AAED,eAAe,eAAe,CAAC","file":"WSCommandSwitch.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandSwitch extends WSCommand {\r\n  public module: any;\r\n  public _CommandNotifyValue: any;\r\n  public _CommandOnece: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 9;\r\n\r\n    this._CommandNotifyValue = 0;\r\n    this._CommandOnece = 1;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public get(params: any) {\r\n    const buf: any = new Uint8Array(0);\r\n    this.sendCommand(this._CommandOnece, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    const module: any = json.switch;\r\n    if (module === undefined) {\r\n      return;\r\n    }\r\n    const schemaData: any = [{uri: \"/request/switch/get\", onValid: this.get}];\r\n    const res: any = this.validateCommandSchema(schemaData, module, \"switch\");\r\n\r\n    if (res.valid === 0) {\r\n      if (res.invalidButLike.length > 0) {\r\n        throw new Error(res.invalidButLike[0].message);\r\n      } else {\r\n        throw new this.WSCommandNotFoundError(`[switch]unknown command`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (\r\n      (func === this._CommandOnece || func === this._CommandNotifyValue) &&\r\n      payload.byteLength === 1\r\n    ) {\r\n      const state: any = parseInt(payload[0]);\r\n      const states: any = [\"none\", \"push\", \"left\", \"right\"];\r\n      objToSend.switch = {\r\n        state: states[state],\r\n      };\r\n      if (func === this._CommandOnece) {\r\n        objToSend.switch.action = \"get\";\r\n      }\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandSwitch;\r\n"]}