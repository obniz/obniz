{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandPWM.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,YAAa,SAAQ,SAAS;IAC3B,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,EAAE,GAAG,CAAC;IACf,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,eAAe,EAAE,GAAG,CAAC;IACrB,kBAAkB,EAAE,GAAG,CAAC;IACxB,IAAI,EAAE,GAAG,CAAC;IACV,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAe5B,mBAAmB;IASnB,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAQ7B,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAO/B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAW7B,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAY9B,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAsBnC,aAAa,CAAC,IAAI,EAAE,GAAG;CAyB/B;AAED,eAAe,YAAY,CAAC","file":"WSCommandPWM.d.ts","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandPWM extends WSCommand {\r\n  public module: any;\r\n  public ModuleNum: any;\r\n  public _CommandInit: any;\r\n  public _CommandDeinit: any;\r\n  public _CommandSetFreq: any;\r\n  public _CommandSetDuty: any;\r\n  public _CommandAMModulate: any;\r\n  public pwms: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 3;\r\n    this.ModuleNum = 6;\r\n    this.resetInternalStatus();\r\n\r\n    this._CommandInit = 0;\r\n    this._CommandDeinit = 1;\r\n    this._CommandSetFreq = 2;\r\n    this._CommandSetDuty = 3;\r\n    this._CommandAMModulate = 4;\r\n  }\r\n\r\n  public resetInternalStatus() {\r\n    this.pwms = [];\r\n    for (let i = 0; i < this.ModuleNum; i++) {\r\n      this.pwms.push({});\r\n    }\r\n  }\r\n\r\n  // Commands\r\n\r\n  public init(params: any, module: any) {\r\n    const buf: any = new Uint8Array(2);\r\n    buf[0] = module;\r\n    buf[1] = params.io;\r\n    this.pwms[module].io = params.io;\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public deinit(params: any, module: any) {\r\n    const buf: any = new Uint8Array(1);\r\n    buf[0] = module;\r\n    this.pwms[module] = {};\r\n    this.sendCommand(this._CommandDeinit, buf);\r\n  }\r\n\r\n  public freq(params: any, module: any) {\r\n    const buf: any = new Uint8Array(5);\r\n    buf[0] = module;\r\n    buf[1] = params.freq >> (8 * 3);\r\n    buf[2] = params.freq >> (8 * 2);\r\n    buf[3] = params.freq >> (8 * 1);\r\n    buf[4] = params.freq;\r\n    this.pwms[module].freq = params.freq;\r\n    this.sendCommand(this._CommandSetFreq, buf);\r\n  }\r\n\r\n  public pulse(params: any, module: any) {\r\n    const buf: any = new Uint8Array(5);\r\n    const pulseUSec: any = params.pulse * 1000;\r\n    buf[0] = module;\r\n    buf[1] = pulseUSec >> (8 * 3);\r\n    buf[2] = pulseUSec >> (8 * 2);\r\n    buf[3] = pulseUSec >> (8 * 1);\r\n    buf[4] = pulseUSec;\r\n    this.pwms[module].pulseUSec = pulseUSec;\r\n    this.sendCommand(this._CommandSetDuty, buf);\r\n  }\r\n\r\n  public amModulate(params: any, module: any) {\r\n    const bitLength: any = params.modulate.data.length;\r\n    const byteLength: any = Math.floor((bitLength + 7) / 8);\r\n    const buf: any = new Uint8Array(5 + byteLength);\r\n    const symbol_length_usec: any = params.modulate.symbol_length * 1000;\r\n    buf[0] = module;\r\n    buf[1] = symbol_length_usec >> (8 * 3);\r\n    buf[2] = symbol_length_usec >> (8 * 2);\r\n    buf[3] = symbol_length_usec >> (8 * 1);\r\n    buf[4] = symbol_length_usec;\r\n    let bitIndex: any = 0;\r\n    for (let byte = 0; byte < byteLength; byte++) {\r\n      buf[5 + byte] = 0;\r\n      for (let bit = 0; bit < 8; bit++) {\r\n        if (params.modulate.data[bitIndex++]) {\r\n          buf[5 + byte] |= 0x80 >>> bit;\r\n        }\r\n      }\r\n    }\r\n    this.sendCommand(this._CommandAMModulate, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    for (let i = 0; i < this.ModuleNum; i++) {\r\n      const module: any = json[\"pwm\" + i];\r\n      if (module === undefined) {\r\n        continue;\r\n      }\r\n\r\n      const schemaData: any = [\r\n        {uri: \"/request/pwm/init\", onValid: this.init},\r\n        {uri: \"/request/pwm/freq\", onValid: this.freq},\r\n        {uri: \"/request/pwm/pulse\", onValid: this.pulse},\r\n        {uri: \"/request/pwm/modulate\", onValid: this.amModulate},\r\n        {uri: \"/request/pwm/deinit\", onValid: this.deinit},\r\n      ];\r\n      const res: any = this.validateCommandSchema(schemaData, module, \"pwm\" + i, i);\r\n\r\n      if (res.valid === 0) {\r\n        if (res.invalidButLike.length > 0) {\r\n          throw new Error(res.invalidButLike[0].message);\r\n        } else {\r\n          throw new this.WSCommandNotFoundError(`[pwm${i}]unknown command`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandPWM;\r\n"]}