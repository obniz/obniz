{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandI2C.ts"],"names":[],"mappings":"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","file":"WSCommandI2C.js","sourcesContent":["import WSCommand from \"./WSCommand\";\r\n\r\nclass WSCommandI2C extends WSCommand {\r\n  public module: any;\r\n  public _CommandInit: any;\r\n  public _CommandDeinit: any;\r\n  public _CommandWrite: any;\r\n  public _CommandRead: any;\r\n  public _CommandSlvWritten: any;\r\n  public sendCommand: any;\r\n  public validateCommandSchema: any;\r\n  public WSCommandNotFoundError: any;\r\n  public COMMAND_FUNC_ID_ERROR: any;\r\n  public envelopError: any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.module = 6;\r\n\r\n    this._CommandInit = 0;\r\n    this._CommandDeinit = 1;\r\n    this._CommandWrite = 2;\r\n    this._CommandRead = 3;\r\n    this._CommandSlvWritten = 4;\r\n  }\r\n\r\n  // Commands\r\n\r\n  public initMaster(params: any, module: any) {\r\n    const mode: any = 0;\r\n    const sda: any = parseInt(params.sda);\r\n    const scl: any = parseInt(params.scl);\r\n    const clock: any = parseInt(params.clock);\r\n\r\n    const buf: any = new Uint8Array(8);\r\n    buf[0] = module;\r\n    buf[1] = mode;\r\n    buf[2] = sda;\r\n    buf[3] = scl;\r\n    buf[4] = clock >> (3 * 8);\r\n    buf[5] = clock >> (2 * 8);\r\n    buf[6] = clock >> (1 * 8);\r\n    buf[7] = clock;\r\n\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public initSlave(params: any, module: any) {\r\n    const mode: any = 1;\r\n    const sda: any = parseInt(params.sda);\r\n    const scl: any = parseInt(params.scl);\r\n    const clock: any = 0;\r\n\r\n    let addressLength: any = params.slave_address_length;\r\n    const address: any = params.slave_address;\r\n    if (address > 0x7f) {\r\n      addressLength = 10;\r\n    }\r\n\r\n    const buf: any = new Uint8Array(11);\r\n    buf[0] = module;\r\n    buf[1] = mode;\r\n    buf[2] = sda;\r\n    buf[3] = scl;\r\n    buf[4] = clock >> (3 * 8);\r\n    buf[5] = clock >> (2 * 8);\r\n    buf[6] = clock >> (1 * 8);\r\n    buf[7] = clock;\r\n    buf[8] = addressLength;\r\n    buf[9] = address >> 8;\r\n    buf[10] = address;\r\n\r\n    this.sendCommand(this._CommandInit, buf);\r\n  }\r\n\r\n  public deinit(params: any, module: any) {\r\n    const buf: any = new Uint8Array([module]);\r\n    this.sendCommand(this._CommandDeinit, buf);\r\n  }\r\n\r\n  public write(params: any, module: any) {\r\n    let address: any = parseInt(params.address);\r\n\r\n    if (params.address_bits === 10 || address > 0x7f) {\r\n      address = address | 0x8000; // mark 10bit mode\r\n    }\r\n    const buf: any = new Uint8Array(3 + params.data.length);\r\n    buf[0] = module;\r\n    buf[1] = address >> 8;\r\n    buf[2] = address;\r\n    buf.set(params.data, 3);\r\n    this.sendCommand(this._CommandWrite, buf);\r\n  }\r\n\r\n  public read(params: any, module: any) {\r\n    let address: any = parseInt(params.address);\r\n\r\n    if (params.address_bits === 10 || address > 0x7f) {\r\n      address = address | 0x8000; // mark 10bit mode\r\n    }\r\n    const read_length: any = params.read;\r\n    const buf: any = new Uint8Array(7);\r\n    buf[0] = module;\r\n    buf[1] = address >> 8;\r\n    buf[2] = address;\r\n    buf[3] = read_length >> (3 * 8);\r\n    buf[4] = read_length >> (2 * 8);\r\n    buf[5] = read_length >> (1 * 8);\r\n    buf[6] = read_length;\r\n    this.sendCommand(this._CommandRead, buf);\r\n  }\r\n\r\n  public parseFromJson(json: any) {\r\n    // 0\r\n    for (let i = 0; i < 1; i++) {\r\n      const module: any = json[\"i2c\" + i];\r\n      if (module === undefined) {\r\n        continue;\r\n      }\r\n\r\n      const schemaData: any = [\r\n        {uri: \"/request/i2c/init_master\", onValid: this.initMaster},\r\n        {uri: \"/request/i2c/init_slave\", onValid: this.initSlave},\r\n        {uri: \"/request/i2c/write\", onValid: this.write},\r\n        {uri: \"/request/i2c/read\", onValid: this.read},\r\n        {uri: \"/request/i2c/deinit\", onValid: this.deinit},\r\n      ];\r\n      const res: any = this.validateCommandSchema(schemaData, module, \"i2c\" + i, i);\r\n\r\n      if (res.valid === 0) {\r\n        if (res.invalidButLike.length > 0) {\r\n          throw new Error(res.invalidButLike[0].message);\r\n        } else {\r\n          throw new this.WSCommandNotFoundError(`[i2c${i}]unknown command`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\r\n    if (func === this._CommandRead && payload.byteLength > 3) {\r\n      const module_index: any = payload[0];\r\n      const address: any = (payload[1] << 8) + payload[2];\r\n\r\n      const arr: any = new Array(payload.byteLength - 3);\r\n      for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = payload[i + 3];\r\n      }\r\n\r\n      objToSend[\"i2c\" + module_index] = {\r\n        mode: \"master\",\r\n        address,\r\n        data: arr,\r\n      };\r\n    } else if (func === this._CommandSlvWritten && payload.byteLength > 4) {\r\n      const module_index: any = payload[0];\r\n      // let address_bit_length = payload[1];\r\n      const address: any = (payload[2] << 8) + payload[3];\r\n\r\n      const arr: any = new Array(payload.byteLength - 4);\r\n      for (let i = 0; i < arr.length; i++) {\r\n        arr[i] = payload[i + 4];\r\n      }\r\n\r\n      objToSend[\"i2c\" + module_index] = {\r\n        mode: \"slave\",\r\n        is_fragmented: true,\r\n        address,\r\n        data: arr,\r\n      };\r\n    } else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength > 2) {\r\n      // const _esperr = payload[0];\r\n      const err: any = payload[1];\r\n      const ref_func_id: any = payload[2];\r\n\r\n      if (\r\n        ref_func_id === this._CommandWrite ||\r\n        ref_func_id === this._CommandRead\r\n      ) {\r\n        let reason: any =\r\n          \"\" +\r\n          (ref_func_id === this._CommandWrite ? \"writing\" : \"reading\") +\r\n          \" error. \";\r\n        if (err === 7) {\r\n          // in fact. it is 0x107. but truncated\r\n          reason += \"Communication Timeout. Maybe, target is not connected.\";\r\n        } else if (err === 255) {\r\n          reason += \"Communication Failed. Maybe, target is not connected.\";\r\n        }\r\n        this.envelopError(objToSend, `i2c0`, {message: reason});\r\n      } else {\r\n        super.notifyFromBinary(objToSend, func, payload);\r\n      }\r\n    } else {\r\n      super.notifyFromBinary(objToSend, func, payload);\r\n    }\r\n  }\r\n}\r\n\r\nexport default WSCommandI2C;\r\n"]}