{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandDisplay.ts"],"names":[],"mappings":"AACA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,gBAAiB,SAAQ,SAAS;IAC/B,MAAM,EAAE,GAAG,CAAC;IACZ,aAAa,EAAE,GAAG,CAAC;IACnB,aAAa,EAAE,GAAG,CAAC;IACnB,+BAA+B,EAAE,GAAG,CAAC;IACrC,gCAAgC,EAAE,GAAG,CAAC;IACtC,mBAAmB,EAAE,GAAG,CAAC;IACzB,kBAAkB,EAAE,GAAG,CAAC;IACxB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAgB5B,KAAK,CAAC,MAAM,EAAE,GAAG;IAIjB,KAAK,CAAC,GAAG,EAAE,GAAG;IAId,SAAS,CAAC,IAAI,EAAE,GAAG;IAOnB,IAAI,CAAC,MAAM,EAAE,GAAG;IAIhB,GAAG,CAAC,MAAM,EAAE,GAAG;IAIf,EAAE,CAAC,MAAM,EAAE,GAAG;IA0Cd,OAAO,CAAC,MAAM,EAAE,GAAG;IAYnB,cAAc,CAAC,GAAG,EAAE,GAAG;IAIvB,eAAe,CAAC,GAAG,EAAE,GAAG;IAIxB,WAAW,CAAC,GAAG,EAAE,OAAO;IAKxB,UAAU,CAAC,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAejD,aAAa,CAAC,IAAI,EAAE,GAAG;CAuB/B;AAED,eAAe,gBAAgB,CAAC","file":"WSCommandDisplay.d.ts","sourcesContent":["import qrcode from \"../utils/qr\";\nimport WSCommand from \"./WSCommand\";\n\nclass WSCommandDisplay extends WSCommand {\n  public module: any;\n  public _CommandClear: any;\n  public _CommandPrint: any;\n  public _CommandDrawCampusVerticalBytes: any;\n  public _CommandDrawCampusHorizonalBytes: any;\n  public _CommandDrawIOState: any;\n  public _CommandSetPinName: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 8;\n\n    this._CommandClear = 0;\n    this._CommandPrint = 1;\n    this._CommandDrawCampusVerticalBytes = 2;\n    this._CommandDrawCampusHorizonalBytes = 3;\n    this._CommandDrawIOState = 4;\n    this._CommandSetPinName = 5;\n  }\n\n  // Commands\n\n  public clear(params: any) {\n    this.sendCommand(this._CommandClear, null);\n  }\n\n  public print(buf: any) {\n    this.sendCommand(this._CommandPrint, buf);\n  }\n\n  public printText(text: any) {\n    let result: any;\n    const buf: any = Buffer.from(text, \"utf8\");\n    result = new Uint8Array(buf);\n    this.print(result);\n  }\n\n  public text(params: any) {\n    this.printText(params.text);\n  }\n\n  public raw(params: any) {\n    this.drawHorizonally(new Uint8Array(params.raw));\n  }\n\n  public qr(params: any) {\n    const text: any = params.qr.text;\n    const correctionLevel: any = params.qr.correction || \"M\";\n\n    const typeNumber: any = 0; // auto detect type.\n    const qr: any = qrcode(typeNumber, correctionLevel);\n    qr.addData(text);\n    qr.make();\n    let size: any = qr.getModuleCount();\n    if (size) {\n      size *= 2;\n      const modules: any = qr.getModules();\n      const vram: any = new Uint8Array(1024);\n      vram.fill(0);\n\n      for (let row = 0; row < 2; row++) {\n        for (let col = 0; col < size + 4; col++) {\n          vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;\n          vram[Math.floor((row + size + 2) * 16 + col / 8)] |= 0x80 >> col % 8;\n        }\n      }\n      for (let row = 2; row < size + 2; row++) {\n        for (let col = 0; col < 2; col++) {\n          vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;\n        }\n        for (let col = size + 2; col < size + 4; col++) {\n          vram[Math.floor(row * 16 + col / 8)] |= 0x80 >> col % 8;\n        }\n      }\n\n      for (let row = 0; row < size; row++) {\n        for (let col = 0; col < size; col++) {\n          if (!modules[Math.floor(row / 2)][Math.floor(col / 2)]) {\n            vram[Math.floor((row + 2) * 16 + (col + 2) / 8)] |=\n              0x80 >> (col + 2) % 8;\n          }\n        }\n      }\n      this.drawHorizonally(vram);\n    }\n  }\n\n  public pinName(params: any) {\n    for (let i = 0; i < 40; i++) {\n      if (typeof params.pin_assign[i] === \"object\") {\n        this.setPinName(\n          i,\n          params.pin_assign[i].module_name || \"?\",\n          params.pin_assign[i].pin_name || \"?\",\n        );\n      }\n    }\n  }\n\n  public drawVertically(buf: any) {\n    this.sendCommand(this._CommandDrawCampusVerticalBytes, buf);\n  }\n\n  public drawHorizonally(buf: any) {\n    this.sendCommand(this._CommandDrawCampusHorizonalBytes, buf);\n  }\n\n  public drawIOState(val: boolean) {\n    const buf: any = new Uint8Array([!val ? 1 : 0]);\n    this.sendCommand(this._CommandDrawIOState, buf);\n  }\n\n  public setPinName(no: any, moduleName: any, pinName: any) {\n    let str: any = moduleName.slice(0, 4) + \" \" + pinName;\n    str = str.slice(0, 9);\n\n    const buf: any = new Uint8Array(1);\n    buf[0] = no;\n\n    const stringarray: any = new Uint8Array(Buffer.from(str, \"utf8\"));\n    const combined: any = new Uint8Array(buf.length + stringarray.length);\n    combined.set(buf, 0);\n    combined.set(stringarray, 1);\n\n    this.sendCommand(this._CommandSetPinName, combined);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.display;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [\n      {uri: \"/request/display/clear\", onValid: this.clear},\n      {uri: \"/request/display/text\", onValid: this.text},\n      {uri: \"/request/display/raw\", onValid: this.raw},\n      {uri: \"/request/display/pin_assign\", onValid: this.pinName},\n      {uri: \"/request/display/qr\", onValid: this.qr},\n    ];\n    const res: any = this.validateCommandSchema(schemaData, module, \"display\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[display]unknown command`);\n      }\n    }\n  }\n}\n\nexport default WSCommandDisplay;\n"]}