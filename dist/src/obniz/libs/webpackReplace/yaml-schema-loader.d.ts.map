{"version":3,"sources":["../src/obniz/libs/webpackReplace/yaml-schema-loader.ts"],"names":[],"mappings":";AAEA,wBAmBE","file":"yaml-schema-loader.d.ts","sourcesContent":["const yaml: any = require(\"js-yaml\");\r\n\r\nexport default (source: any) => {\r\n\r\n  // @ts-ignore\r\n  const self: any = this;\r\n  if (self.cacheable) {\r\n    self.cacheable();\r\n  }\r\n  try {\r\n    const src: any = yaml.safeLoad(source);\r\n    const excludeKeys: any = [\"example\", \"description\"];\r\n\r\n    const res: any = filter(src, excludeKeys);\r\n    // console.log(\"src\",src);\r\n    // console.log(\"res\",res);\r\n    return JSON.stringify(res, undefined, \"\\t\");\r\n  } catch (err) {\r\n    self.emitError(err);\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction filter(target: any, excludeKeys: any) {\r\n  if (typeof target !== \"object\") {\r\n    return target;\r\n  }\r\n  if (target === null) {\r\n    return target;\r\n  }\r\n  if (Array.isArray(target)) {\r\n    const newArr: any = [];\r\n    for (const key in target) {\r\n      if (!excludeKeys.includes(key)) {\r\n        newArr[key] = filter(target[key], excludeKeys);\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n  const newObj: any = {};\r\n  for (const key in target) {\r\n    if (!excludeKeys.includes(key)) {\r\n      newObj[key] = filter(target[key], excludeKeys);\r\n    }\r\n  }\r\n  return newObj;\r\n}\r\n"]}