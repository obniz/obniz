{"version":3,"sources":["../src/obniz/libs/webpackReplace/yaml-schema-loader.ts"],"names":[],"mappings":";AAEA,wBAmBE","file":"yaml-schema-loader.d.ts","sourcesContent":["const yaml: any = require(\"js-yaml\");\n\nexport default (source: any) => {\n\n  // @ts-ignore\n  const self: any = this;\n  if (self.cacheable) {\n    self.cacheable();\n  }\n  try {\n    const src: any = yaml.safeLoad(source);\n    const excludeKeys: any = [\"example\", \"description\"];\n\n    const res: any = filter(src, excludeKeys);\n    // console.log(\"src\",src);\n    // console.log(\"res\",res);\n    return JSON.stringify(res, undefined, \"\\t\");\n  } catch (err) {\n    self.emitError(err);\n    return null;\n  }\n};\n\nfunction filter(target: any, excludeKeys: any) {\n  if (typeof target !== \"object\") {\n    return target;\n  }\n  if (target === null) {\n    return target;\n  }\n  if (Array.isArray(target)) {\n    const newArr: any = [];\n    for (const key in target) {\n      if (!excludeKeys.includes(key)) {\n        newArr[key] = filter(target[key], excludeKeys);\n      }\n    }\n    return target;\n  }\n  const newObj: any = {};\n  for (const key in target) {\n    if (!excludeKeys.includes(key)) {\n      newObj[key] = filter(target[key], excludeKeys);\n    }\n  }\n  return newObj;\n}\n"]}