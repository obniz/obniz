{"version":3,"sources":["../src/obniz/libs/webpackReplace/require-context.ts"],"names":[],"mappings":";;AAAA,IAAI,OAAY,CAAC;AACjB,yBAA0B;AAC1B,gCAAiC;AACjC,oCAAqC;AACrC,6BAA8B;AAE9B,kBAAe,CAAC,SAAiB,EAAE,SAAkB,EAAE,MAAc,EAAO,EAAE;IAE5E,kCAAkC;IAClC,IAAI,QAAQ,GAAQ,SAAS,CAAC;IAE9B,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACxB,gBAAgB;QAChB,IAAI,GAAG,GAAQ,SAAS,CAAC;QACzB,IAAI,OAAO,EAAE;YACX,GAAG,GAAG,OAAO,CAAC;SACf;QACD,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;KACtC;SAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QACtC,cAAc;QACd,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACvC;IAED,MAAM,IAAI,GAAS,OAAe;SAC/B,KAAK,CAAC,QAAQ,EAAE;QACf,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,SAAS,IAAI,KAAK;KAC9B,CAAC;SACD,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,cAAc,CAAC,CAAC;IAC9C,CAAC,CAAC;SACD,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEL,MAAM,OAAO,GAAQ,CAAC,GAAW,EAAE,EAAE;QACnC,MAAM,UAAU,GAAQ,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACnC,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC;SAC5B;aAAM,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SAC3D;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;SACjC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,OAAO,GAAG,CAAC,GAAW,EAAE,EAAE;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,GAAG,GAAG,EAAE;QAClB,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAES,QAAA,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;IACvC,OAAO,GAAG,IAAI,CAAC;AACjB,CAAC,CAAC","file":"require-context.js","sourcesContent":["let baseDir: any;\nimport fs = require(\"fs\");\nimport yaml = require(\"js-yaml\");\nimport nodeDir = require(\"node-dir\");\nimport path = require(\"path\");\n\nexport default (directory: string, recursive: boolean, regExp: RegExp): any => {\n\n  // Assume absolute path by default\n  let basepath: any = directory;\n\n  if (directory[0] === \".\") {\n    // Relative path\n    let dir: any = __dirname;\n    if (baseDir) {\n      dir = baseDir;\n    }\n    basepath = path.join(dir, directory);\n  } else if (!path.isAbsolute(directory)) {\n    // Module path\n    basepath = require.resolve(directory);\n  }\n\n  const keys: any = (nodeDir as any)\n    .files(basepath, {\n      sync: true,\n      recursive: recursive || false,\n    })\n    .filter((file: string) => {\n      return file.match(regExp || /\\.(json|js)$/);\n    })\n    .map((file: string) => {\n      return path.join(\".\", file.slice(basepath.length + 1));\n    });\n\n  const context: any = (key: string) => {\n    const modulePath: any = context.resolve(key);\n    if (/\\.(json|js)$/.test(modulePath)) {\n      return require(modulePath);\n    } else if (/\\.(yaml|yml)$/.test(modulePath)) {\n      return yaml.safeLoad(fs.readFileSync(modulePath, \"utf8\"));\n    } else {\n      throw new Error(\"unknown type\");\n    }\n  };\n\n  context.resolve = (key: string) => {\n    return path.join(basepath, key);\n  };\n\n  context.keys = () => {\n    return keys;\n  };\n\n  return context;\n};\n\nexport let setBaseDir = (base: string) => {\n  baseDir = base;\n};\n"]}