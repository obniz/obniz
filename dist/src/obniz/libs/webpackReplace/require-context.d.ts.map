{"version":3,"sources":["../src/obniz/libs/webpackReplace/require-context.ts"],"names":[],"mappings":";AAMA,wBAiDE;AAEF,eAAO,IAAI,UAAU,wBAEpB,CAAC","file":"require-context.d.ts","sourcesContent":["let baseDir: any;\r\nimport fs = require(\"fs\");\r\nimport yaml = require(\"js-yaml\");\r\nimport nodeDir = require(\"node-dir\");\r\nimport path = require(\"path\");\r\n\r\nexport default (directory: string, recursive: boolean, regExp: RegExp): any => {\r\n\r\n  // Assume absolute path by default\r\n  let basepath: any = directory;\r\n\r\n  if (directory[0] === \".\") {\r\n    // Relative path\r\n    let dir: any = __dirname;\r\n    if (baseDir) {\r\n      dir = baseDir;\r\n    }\r\n    basepath = path.join(dir, directory);\r\n  } else if (!path.isAbsolute(directory)) {\r\n    // Module path\r\n    basepath = require.resolve(directory);\r\n  }\r\n\r\n  const keys: any = (nodeDir as any)\r\n    .files(basepath, {\r\n      sync: true,\r\n      recursive: recursive || false,\r\n    })\r\n    .filter((file: string) => {\r\n      return file.match(regExp || /\\.(json|js)$/);\r\n    })\r\n    .map((file: string) => {\r\n      return path.join(\".\", file.slice(basepath.length + 1));\r\n    });\r\n\r\n  const context: any = (key: string) => {\r\n    const modulePath: any = context.resolve(key);\r\n    if (/\\.(json|js)$/.test(modulePath)) {\r\n      return require(modulePath);\r\n    } else if (/\\.(yaml|yml)$/.test(modulePath)) {\r\n      return yaml.safeLoad(fs.readFileSync(modulePath, \"utf8\"));\r\n    } else {\r\n      throw new Error(\"unknown type\");\r\n    }\r\n  };\r\n\r\n  context.resolve = (key: string) => {\r\n    return path.join(basepath, key);\r\n  };\r\n\r\n  context.keys = () => {\r\n    return keys;\r\n  };\r\n\r\n  return context;\r\n};\r\n\r\nexport let setBaseDir = (base: string) => {\r\n  baseDir = base;\r\n};\r\n"]}