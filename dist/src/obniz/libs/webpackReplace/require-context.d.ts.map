{"version":3,"sources":["../src/obniz/libs/webpackReplace/require-context.ts"],"names":[],"mappings":";AAMA,wBAiDE;AAEF,eAAO,IAAI,UAAU,wBAEpB,CAAC","file":"require-context.d.ts","sourcesContent":["let baseDir: any;\nimport fs = require(\"fs\");\nimport yaml = require(\"js-yaml\");\nimport nodeDir = require(\"node-dir\");\nimport path = require(\"path\");\n\nexport default (directory: string, recursive: boolean, regExp: RegExp): any => {\n\n  // Assume absolute path by default\n  let basepath: any = directory;\n\n  if (directory[0] === \".\") {\n    // Relative path\n    let dir: any = __dirname;\n    if (baseDir) {\n      dir = baseDir;\n    }\n    basepath = path.join(dir, directory);\n  } else if (!path.isAbsolute(directory)) {\n    // Module path\n    basepath = require.resolve(directory);\n  }\n\n  const keys: any = (nodeDir as any)\n    .files(basepath, {\n      sync: true,\n      recursive: recursive || false,\n    })\n    .filter((file: string) => {\n      return file.match(regExp || /\\.(json|js)$/);\n    })\n    .map((file: string) => {\n      return path.join(\".\", file.slice(basepath.length + 1));\n    });\n\n  const context: any = (key: string) => {\n    const modulePath: any = context.resolve(key);\n    if (/\\.(json|js)$/.test(modulePath)) {\n      return require(modulePath);\n    } else if (/\\.(yaml|yml)$/.test(modulePath)) {\n      return yaml.safeLoad(fs.readFileSync(modulePath, \"utf8\"));\n    } else {\n      throw new Error(\"unknown type\");\n    }\n  };\n\n  context.resolve = (key: string) => {\n    return path.join(basepath, key);\n  };\n\n  context.keys = () => {\n    return keys;\n  };\n\n  return context;\n};\n\nexport let setBaseDir = (base: string) => {\n  baseDir = base;\n};\n"]}