{"version":3,"sources":["../src/obniz/libs/webpackReplace/yaml-schema-loader.ts"],"names":[],"mappings":";;AAAA,MAAM,IAAI,GAAQ,OAAO,CAAC,SAAS,CAAC,CAAC;AAErC,kBAAe,CAAC,MAAW,EAAE,EAAE;IAE7B,aAAa;IACb,MAAM,IAAI,GAAQ,IAAI,CAAC;IACvB,IAAI,IAAI,CAAC,SAAS,EAAE;QAClB,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IACD,IAAI;QACF,MAAM,GAAG,GAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,WAAW,GAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAEpD,MAAM,GAAG,GAAQ,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC1C,0BAA0B;QAC1B,0BAA0B;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;KAC7C;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC;AAEF,SAAS,MAAM,CAAC,MAAW,EAAE,WAAgB;IAC3C,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,KAAK,IAAI,EAAE;QACnB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACzB,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;aAChD;SACF;QACD,OAAO,MAAM,CAAC;KACf;IACD,MAAM,MAAM,GAAQ,EAAE,CAAC;IACvB,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;QACxB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;SAChD;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","file":"yaml-schema-loader.js","sourcesContent":["const yaml: any = require(\"js-yaml\");\n\nexport default (source: any) => {\n\n  // @ts-ignore\n  const self: any = this;\n  if (self.cacheable) {\n    self.cacheable();\n  }\n  try {\n    const src: any = yaml.safeLoad(source);\n    const excludeKeys: any = [\"example\", \"description\"];\n\n    const res: any = filter(src, excludeKeys);\n    // console.log(\"src\",src);\n    // console.log(\"res\",res);\n    return JSON.stringify(res, undefined, \"\\t\");\n  } catch (err) {\n    self.emitError(err);\n    return null;\n  }\n};\n\nfunction filter(target: any, excludeKeys: any) {\n  if (typeof target !== \"object\") {\n    return target;\n  }\n  if (target === null) {\n    return target;\n  }\n  if (Array.isArray(target)) {\n    const newArr: any = [];\n    for (const key in target) {\n      if (!excludeKeys.includes(key)) {\n        newArr[key] = filter(target[key], excludeKeys);\n      }\n    }\n    return target;\n  }\n  const newObj: any = {};\n  for (const key in target) {\n    if (!excludeKeys.includes(key)) {\n      newObj[key] = filter(target[key], excludeKeys);\n    }\n  }\n  return newObj;\n}\n"]}