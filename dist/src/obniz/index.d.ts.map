{"version":3,"sources":["../src/obniz/index.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,QAAQ,MAAM,YAAY,CAAC;AAElC,OAAO,CAAC,MAAM,CAAC;IACb,IAAI,mBAAmB,EAAE,GAAG,CAAC;IAC7B,IAAI,YAAY,EAAE,GAAG,CAAC;IAEtB,UAAU,MAAM;QACd,aAAa,CAAC,EAAE,GAAG,CAAC;QACpB,MAAM,CAAC,EAAE,GAAG,CAAC;QACb,SAAS,EAAE,GAAG,CAAC;QACf,YAAY,EAAE,GAAG,CAAC;KACnB;CACF;AAID,cAAM,KAAM,SAAQ,QAAQ;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;IACZ,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,IAAI,EAAE,GAAG,CAAC;IACV,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IACZ,WAAW,EAAE,GAAG,CAAC;gBAEZ,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAK3B,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAc7B,IAAI;IAUV,cAAc;IAKd,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAejC,cAAc,CAAC,GAAG,EAAE,GAAG;IAuBvB,OAAO,CAAC,GAAG,EAAE,GAAG;IAgBhB,KAAK,CAAC,GAAG,EAAE,GAAG;IAiBrB;;;OAGG;IACH,MAAM,KAAK,GAAG,oBAEb;CACF;AAED,SAAS,KAAK,CAAC","file":"index.d.ts","sourcesContent":["import ObnizUtil from \"./libs/utils/util\";\r\nimport ObnizApi from \"./ObnizApi\";\r\nimport ObnizUIs from \"./ObnizUIs\";\r\n\r\ndeclare global {\r\n  var showObnizDebugError: any;\r\n  var MozWebSocket: any;\r\n\r\n  interface Window {\r\n    userAppLoaded?: any;\r\n    logger?: any;\r\n    WebSocket: any;\r\n    MozWebSocket: any;\r\n  }\r\n}\r\n\r\nconst isNode: any = typeof window === \"undefined\";\r\n\r\nclass Obniz extends ObnizUIs {\r\n  public util: any;\r\n  public looper: any;\r\n  public repeatInterval: any;\r\n  public onConnectCalled: any;\r\n  public send: any;\r\n  public onmessage: any;\r\n  public ondebug: any;\r\n  public isNode: any;\r\n  public showAlertUI: any;\r\n\r\n  constructor(id: any, options?: any) {\r\n    super(id, options);\r\n    this.util = new ObnizUtil(this);\r\n  }\r\n\r\n  public repeat(callback: any, interval: any) {\r\n    if (this.looper) {\r\n      this.looper = callback;\r\n      this.repeatInterval = interval || this.repeatInterval || 100;\r\n      return;\r\n    }\r\n    this.looper = callback;\r\n    this.repeatInterval = interval || 100;\r\n\r\n    if (this.onConnectCalled) {\r\n      this.loop();\r\n    }\r\n  }\r\n\r\n  public async loop() {\r\n    if (typeof this.looper === \"function\" && this.onConnectCalled) {\r\n      const prom: any = this.looper();\r\n      if (prom instanceof Promise) {\r\n        await prom;\r\n      }\r\n      setTimeout(this.loop.bind(this), this.repeatInterval || 100);\r\n    }\r\n  }\r\n\r\n  public _callOnConnect() {\r\n    super._callOnConnect();\r\n    this.loop();\r\n  }\r\n\r\n  public message(target: any, message: any) {\r\n    let targets: any = [];\r\n    if (typeof target === \"string\") {\r\n      targets.push(target);\r\n    } else {\r\n      targets = target;\r\n    }\r\n    this.send({\r\n      message: {\r\n        to: targets,\r\n        data: message,\r\n      },\r\n    });\r\n  }\r\n\r\n  public notifyToModule(obj: any) {\r\n    super.notifyToModule(obj);\r\n    // notify messaging\r\n    if (typeof obj.message === \"object\" && this.onmessage) {\r\n      this.onmessage(obj.message.data, obj.message.from);\r\n    }\r\n    // debug\r\n    if (typeof obj.debug === \"object\") {\r\n      if (obj.debug.warning) {\r\n        const msg: any = \"Warning: \" + obj.debug.warning.message;\r\n        this.warning({alert: \"warning\", message: msg});\r\n      }\r\n\r\n      if (obj.debug.error) {\r\n        const msg: any = \"Error: \" + obj.debug.error.message;\r\n        this.error({alert: \"error\", message: msg});\r\n      }\r\n      if (this.ondebug) {\r\n        this.ondebug(obj.debug);\r\n      }\r\n    }\r\n  }\r\n\r\n  public warning(msg: any) {\r\n    if (this.isNode) {\r\n      console.error(msg);\r\n    } else {\r\n      if (msg && typeof msg === \"object\" && msg.alert) {\r\n        this.showAlertUI(msg);\r\n        console.log(msg.message);\r\n        return;\r\n      }\r\n      if (typeof showObnizDebugError === \"function\") {\r\n        showObnizDebugError(new Error(msg));\r\n      }\r\n      console.log(`Warning: ${msg}`);\r\n    }\r\n  }\r\n\r\n  public error(msg: any) {\r\n    if (this.isNode) {\r\n      console.error(msg);\r\n    } else {\r\n      if (msg && typeof msg === \"object\" && msg.alert) {\r\n        this.showAlertUI(msg);\r\n        msg = msg.message;\r\n      }\r\n      if (typeof showObnizDebugError === \"function\") {\r\n        showObnizDebugError(new Error(msg));\r\n        console.error(new Error(msg));\r\n      } else {\r\n        throw new Error(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {ObnizApi}\r\n   */\r\n  static get api() {\r\n    return ObnizApi;\r\n  }\r\n}\r\n\r\nexport = Obniz;\r\n\r\n/*===================*/\r\n/* Utils */\r\n/*===================*/\r\ntry {\r\n  if (!isNode) {\r\n    if (window && window.parent && window.parent.userAppLoaded) {\r\n      window.parent.userAppLoaded(window);\r\n    }\r\n\r\n    function showObnizDebugError(err: any) {// eslint-disable-line\r\n      if (window.parent && window.parent.logger) {\r\n        window.parent.logger.onObnizError(err);\r\n      }\r\n    }\r\n  }\r\n} catch (e) {\r\n  if (e instanceof DOMException) {\r\n    // cross origin iframe\r\n  } else {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/*===================*/\r\n/* ReadParts */\r\n/*===================*/\r\nimport requireContext = require( \"./libs/webpackReplace/require-context\");\r\n\r\nrequire.context = requireContext.default;\r\nif (requireContext.setBaseDir) {\r\n  requireContext.setBaseDir(__dirname);\r\n}\r\n\r\nconst context: any = require.context(\"../parts\", true, /\\.js$/);\r\n/* webpack loader */\r\nfor (const path of context.keys()) {\r\n  const anParts: any = context(path);\r\n  if (anParts.info) {\r\n    Obniz.PartsRegistrate(anParts);\r\n  } else if (anParts.default.info) { // for ts \"export default\"\r\n    Obniz.PartsRegistrate(anParts.default);\r\n  }\r\n}\r\n"]}