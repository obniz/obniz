{"version":3,"sources":["../src/obniz/index.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,QAAQ,MAAM,YAAY,CAAC;AAElC,OAAO,CAAC,MAAM,CAAC;IACb,IAAI,mBAAmB,EAAE,GAAG,CAAC;IAC7B,IAAI,YAAY,EAAE,GAAG,CAAC;IAEtB,UAAU,MAAM;QACd,aAAa,CAAC,EAAE,GAAG,CAAC;QACpB,MAAM,CAAC,EAAE,GAAG,CAAC;QACb,SAAS,EAAE,GAAG,CAAC;QACf,YAAY,EAAE,GAAG,CAAC;KACnB;CACF;AAID,cAAM,KAAM,SAAQ,QAAQ;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;IACZ,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,IAAI,EAAE,GAAG,CAAC;IACV,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IACZ,WAAW,EAAE,GAAG,CAAC;gBAEZ,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAK3B,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAc7B,IAAI;IAUV,cAAc;IAKd,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAejC,cAAc,CAAC,GAAG,EAAE,GAAG;IAuBvB,OAAO,CAAC,GAAG,EAAE,GAAG;IAgBhB,KAAK,CAAC,GAAG,EAAE,GAAG;IAiBrB;;;OAGG;IACH,MAAM,KAAK,GAAG,oBAEb;CACF;AAED,SAAS,KAAK,CAAC","file":"index.d.ts","sourcesContent":["import ObnizUtil from \"./libs/utils/util\";\nimport ObnizApi from \"./ObnizApi\";\nimport ObnizUIs from \"./ObnizUIs\";\n\ndeclare global {\n  var showObnizDebugError: any;\n  var MozWebSocket: any;\n\n  interface Window {\n    userAppLoaded?: any;\n    logger?: any;\n    WebSocket: any;\n    MozWebSocket: any;\n  }\n}\n\nconst isNode: any = typeof window === \"undefined\";\n\nclass Obniz extends ObnizUIs {\n  public util: any;\n  public looper: any;\n  public repeatInterval: any;\n  public onConnectCalled: any;\n  public send: any;\n  public onmessage: any;\n  public ondebug: any;\n  public isNode: any;\n  public showAlertUI: any;\n\n  constructor(id: any, options?: any) {\n    super(id, options);\n    this.util = new ObnizUtil(this);\n  }\n\n  public repeat(callback: any, interval: any) {\n    if (this.looper) {\n      this.looper = callback;\n      this.repeatInterval = interval || this.repeatInterval || 100;\n      return;\n    }\n    this.looper = callback;\n    this.repeatInterval = interval || 100;\n\n    if (this.onConnectCalled) {\n      this.loop();\n    }\n  }\n\n  public async loop() {\n    if (typeof this.looper === \"function\" && this.onConnectCalled) {\n      const prom: any = this.looper();\n      if (prom instanceof Promise) {\n        await prom;\n      }\n      setTimeout(this.loop.bind(this), this.repeatInterval || 100);\n    }\n  }\n\n  public _callOnConnect() {\n    super._callOnConnect();\n    this.loop();\n  }\n\n  public message(target: any, message: any) {\n    let targets: any = [];\n    if (typeof target === \"string\") {\n      targets.push(target);\n    } else {\n      targets = target;\n    }\n    this.send({\n      message: {\n        to: targets,\n        data: message,\n      },\n    });\n  }\n\n  public notifyToModule(obj: any) {\n    super.notifyToModule(obj);\n    // notify messaging\n    if (typeof obj.message === \"object\" && this.onmessage) {\n      this.onmessage(obj.message.data, obj.message.from);\n    }\n    // debug\n    if (typeof obj.debug === \"object\") {\n      if (obj.debug.warning) {\n        const msg: any = \"Warning: \" + obj.debug.warning.message;\n        this.warning({alert: \"warning\", message: msg});\n      }\n\n      if (obj.debug.error) {\n        const msg: any = \"Error: \" + obj.debug.error.message;\n        this.error({alert: \"error\", message: msg});\n      }\n      if (this.ondebug) {\n        this.ondebug(obj.debug);\n      }\n    }\n  }\n\n  public warning(msg: any) {\n    if (this.isNode) {\n      console.error(msg);\n    } else {\n      if (msg && typeof msg === \"object\" && msg.alert) {\n        this.showAlertUI(msg);\n        console.log(msg.message);\n        return;\n      }\n      if (typeof showObnizDebugError === \"function\") {\n        showObnizDebugError(new Error(msg));\n      }\n      console.log(`Warning: ${msg}`);\n    }\n  }\n\n  public error(msg: any) {\n    if (this.isNode) {\n      console.error(msg);\n    } else {\n      if (msg && typeof msg === \"object\" && msg.alert) {\n        this.showAlertUI(msg);\n        msg = msg.message;\n      }\n      if (typeof showObnizDebugError === \"function\") {\n        showObnizDebugError(new Error(msg));\n        console.error(new Error(msg));\n      } else {\n        throw new Error(msg);\n      }\n    }\n  }\n\n  /**\n   *\n   * @returns {ObnizApi}\n   */\n  static get api() {\n    return ObnizApi;\n  }\n}\n\nexport = Obniz;\n\n/*===================*/\n/* Utils */\n/*===================*/\ntry {\n  if (!isNode) {\n    if (window && window.parent && window.parent.userAppLoaded) {\n      window.parent.userAppLoaded(window);\n    }\n\n    function showObnizDebugError(err: any) {// eslint-disable-line\n      if (window.parent && window.parent.logger) {\n        window.parent.logger.onObnizError(err);\n      }\n    }\n  }\n} catch (e) {\n  if (e instanceof DOMException) {\n    // cross origin iframe\n  } else {\n    console.error(e);\n  }\n}\n\n/*===================*/\n/* ReadParts */\n/*===================*/\nimport requireContext = require( \"./libs/webpackReplace/require-context\");\n\nrequire.context = requireContext.default;\nif (requireContext.setBaseDir) {\n  requireContext.setBaseDir(__dirname);\n}\n\nconst context: any = require.context(\"../parts\", true, /\\.js$/);\n/* webpack loader */\nfor (const path of context.keys()) {\n  const anParts: any = context(path);\n  if (anParts.info) {\n    Obniz.PartsRegistrate(anParts);\n  } else if (anParts.default.info) { // for ts \"export default\"\n    Obniz.PartsRegistrate(anParts.default);\n  }\n}\n"]}