{"version":3,"sources":["../src/obniz/ObnizComponents.ts"],"names":[],"mappings":"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","file":"ObnizComponents.d.ts","sourcesContent":["import semver = require(\"semver\");\nimport ObnizBLE from \"./libs/embeds/ble/ble\";\nimport ObnizBLEHci from \"./libs/embeds/bleHci/ble\";\nimport Display from \"./libs/embeds/display\";\nimport ObnizSwitch from \"./libs/embeds/switch\";\n\nimport PeripheralAD from \"./libs/io_peripherals/ad\";\nimport {DriveType} from \"./libs/io_peripherals/common\";\nimport PeripheralDirective from \"./libs/io_peripherals/directive\";\nimport PeripheralI2C from \"./libs/io_peripherals/i2c\";\nimport PeripheralIO from \"./libs/io_peripherals/io\";\nimport PeripheralPWM from \"./libs/io_peripherals/pwm\";\nimport PeripheralSPI from \"./libs/io_peripherals/spi\";\nimport PeripheralUART from \"./libs/io_peripherals/uart\";\nimport LogicAnalyzer from \"./libs/measurements/logicanalyzer\";\nimport ObnizMeasure from \"./libs/measurements/measure\";\n\nimport TCP from \"./libs/protocol/tcp\";\n\nimport ObnizParts from \"./ObnizParts\";\n\nimport HW from \"./libs/hw\";\n\ninterface ObnizComponentsObnizBoard {\n\n  // onconnect: () => Promise<void>;\n  // onclose: () => Promise<void>;\n  // wired<K extends keyof WiredNameMap>(name: K, options?: WiredNameOptionsMap[K]): WiredNameMap[K];\n  //\n  // // connect\n  // connectionState: ConnectionState;\n  // debugprint: boolean;\n  // connect(): void;\n  // connectWait(options?: ConnectOptions): Promise<boolean>;\n  // close(): void;\n  // resetOnDisconnect(reset: boolean): void;\n  //\n  // // systems\n  // sleepSeconds(sec: number): void;\n  // sleepMinute(sec: number): void;\n  // sleep(date: Date): void;\n  // sleepIoTrigger(trigger: boolean): void;\n  // pingWait(): Promise<void>;\n  //\n  // // utils\n  // util: any;\n  // reset(): void;\n  // repeat(callback: () => void): void;\n  // wait(time: number): Promise<void>;\n  // keepWorkingAtOffline(working: boolean): void;\n  // setVccGnd(vcc: number, gnd: number, drive: DriveType): void;\n  // isValidIO(io: any): io is PeripheralIO;\n\n}\n\nexport default class ObnizComponents extends ObnizParts {\n\n  public pongObservers: any;\n  public _allComponentKeys: any;\n\n  /* board peripherals */\n  public io!: PeripheralDirective;\n  public io0?: PeripheralIO;\n  public io1?: PeripheralIO;\n  public io2?: PeripheralIO;\n  public io3?: PeripheralIO;\n  public io4?: PeripheralIO;\n  public io5?: PeripheralIO;\n  public io6?: PeripheralIO;\n  public io7?: PeripheralIO;\n  public io8?: PeripheralIO;\n  public io9?: PeripheralIO;\n  public io10?: PeripheralIO;\n  public io11?: PeripheralIO;\n\n  public ad0?: PeripheralAD;\n  public ad1?: PeripheralAD;\n  public ad2?: PeripheralAD;\n  public ad3?: PeripheralAD;\n  public ad4?: PeripheralAD;\n  public ad5?: PeripheralAD;\n  public ad6?: PeripheralAD;\n  public ad7?: PeripheralAD;\n  public ad8?: PeripheralAD;\n  public ad9?: PeripheralAD;\n  public ad10?: PeripheralAD;\n  public ad11?: PeripheralAD;\n\n  public pwm0?: PeripheralPWM;\n  public pwm1?: PeripheralPWM;\n  public pwm2?: PeripheralPWM;\n  public pwm3?: PeripheralPWM;\n  public pwm4?: PeripheralPWM;\n  public pwm5?: PeripheralPWM;\n\n  public uart0?: PeripheralUART;\n  public uart1?: PeripheralUART;\n  public spi0?: PeripheralSPI;\n  public spi1?: PeripheralSPI;\n  public i2c0?: PeripheralI2C;\n  public logicAnalyzer?: LogicAnalyzer;\n  public measure?: ObnizMeasure;\n  public display?: Display;\n  public switch?: ObnizSwitch;\n  public ble?: ObnizBLE | ObnizBLEHci;\n\n  constructor(id: any, options?: any) {\n    super(id, options);\n    this.pongObservers = [];\n    this._allComponentKeys = [];\n  }\n\n  public close() {\n    super.close();\n    if (this.options.reset_obniz_on_ws_disconnection) {\n      this._resetComponents();\n    }\n  }\n\n  public _callOnConnect() {\n    this._prepareComponents();\n    super._callOnConnect();\n  }\n\n  public _prepareComponents() {\n    if (this._allComponentKeys.length !== 0) {\n      return;\n    }\n\n    const hwDefinition: any = HW.getDefinitionFor(this.hw);\n    if (!hwDefinition) {\n      throw new Error(`unkown hw ${this.hw}`);\n    }\n\n    const hw_peripherals: any = hwDefinition.peripherals;\n    const hw_embeds: any = hwDefinition.embeds;\n    const hw_protocol: any = hwDefinition.protocol;\n\n    const shared_map: any = {\n      io: PeripheralDirective,\n      logicAnalyzer: LogicAnalyzer,\n      measure: ObnizMeasure,\n    };\n\n    const peripheral_map: any = {\n      io: PeripheralIO,\n      ad: PeripheralAD,\n      uart: PeripheralUART,\n      spi: PeripheralSPI,\n      i2c: PeripheralI2C,\n      pwm: PeripheralPWM,\n    };\n\n    let ble: any = ObnizBLEHci;\n\n    // < 3.0.0-beta\n    if (semver.lt(this.firmware_ver, \"3.0.0-beta\")) {\n      ble = ObnizBLE;\n    }\n\n    const embeds_map: any = {\n      display: Display,\n      switch: ObnizSwitch,\n      ble,\n    };\n\n    const protocol_map: any = {\n      tcp: TCP,\n    };\n\n    for (const key in shared_map) {\n      const Class: any = shared_map[key];\n      (this as any)[key] = new Class(this);\n      this._allComponentKeys.push(key);\n    }\n\n    if (hw_peripherals) {\n      for (const key in peripheral_map) {\n        if (hw_peripherals[key]) {\n          const units: any = hw_peripherals[key].units;\n          const Class: any = peripheral_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n\n    if (hw_embeds) {\n      for (const key in embeds_map) {\n        if (hw_embeds[key]) {\n          const Class: any = embeds_map[key];\n          (this as any)[key] = new Class(this);\n          this._allComponentKeys.push(key);\n        }\n      }\n    }\n\n    if (hw_protocol) {\n      for (const key in protocol_map) {\n        if (hw_protocol[key]) {\n          const units: any = hw_protocol[key].units;\n          const Class: any = protocol_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n  }\n\n  public _resetComponents() {\n    this.print_debug(\"components state resets\");\n    for (const key of this._allComponentKeys) {\n      (this as any)[key]._reset();\n    }\n  }\n\n  public notifyToModule(obj: any) {\n    super.notifyToModule(obj);\n    for (const key of this._allComponentKeys) {\n      if (key === \"logicAnalyzer\") {\n        if (obj.hasOwnProperty(\"logic_analyzer\")) {\n          (this as any).logicAnalyzer.notified(obj.logic_analyzer);\n        }\n        continue;\n      }\n      if (obj.hasOwnProperty(key)) {\n        /* because of nullable */\n        (this as any)[key].notified(obj[key]);\n      }\n    }\n  }\n\n  public handleSystemCommand(wsObj: any) {\n    super.handleSystemCommand(wsObj);\n    // ping pong\n    if (wsObj.pong) {\n      for (const callback of this.pongObservers) {\n        callback(wsObj);\n      }\n    }\n  }\n\n  public addPongObserver(callback: any) {\n    if (callback) {\n      this.pongObservers.push(callback);\n    }\n  }\n\n  public removePongObserver(callback: any) {\n    if (this.pongObservers.includes(callback)) {\n      const index: any = this.pongObservers.indexOf(callback);\n      this.pongObservers.splice(index, 1);\n    }\n  }\n\n  public setVccGnd(vcc: number | null, gnd: number | null, drive: DriveType) {\n    if (this.isValidIO(vcc)) {\n      if (drive) {\n        this.getIO(vcc!).drive(drive);\n      }\n      this.getIO(vcc!).output(true);\n    }\n\n    if (this.isValidIO(gnd)) {\n      if (drive) {\n        this.getIO(gnd!).drive(drive);\n      }\n      this.getIO(gnd!).output(false);\n    }\n  }\n\n  public getIO(io: number): PeripheralIO {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"io \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"io\" + io];\n  }\n\n  public getAD(io: number): PeripheralAD {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"ad \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"ad\" + io];\n  }\n\n  public _getFreePeripheralUnit(peripheral: any): any {\n    for (const key of this._allComponentKeys) {\n      if (key.indexOf(peripheral) === 0) {\n        /* \"io\" for \"io0\" */\n        const obj: any = (this as any)[key];\n        if (typeof obj === \"object\" && !obj.isUsed()) {\n          obj.used = true;\n          return obj;\n        }\n      }\n    }\n    throw new Error(`No More ${peripheral} Available.`);\n  }\n\n  public getFreePwm(): PeripheralPWM {\n    return this._getFreePeripheralUnit(\"pwm\");\n  }\n\n  public getFreeI2C(): PeripheralI2C {\n    return this._getFreePeripheralUnit(\"i2c\");\n  }\n\n  public getI2CWithConfig(config: any): PeripheralI2C {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getI2CWithConfig need config arg\");\n    }\n    if (config.i2c) {\n      return config.i2c;\n    }\n    const i2c: any = this.getFreeI2C();\n    i2c.start(config);\n    return i2c;\n  }\n\n  public getFreeSpi(): PeripheralSPI {\n    return this._getFreePeripheralUnit(\"spi\");\n  }\n\n  public getSpiWithConfig(config: any): PeripheralSPI {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getSpiWithConfig need config arg\");\n    }\n    if (config.spi) {\n      return config.spi;\n    }\n    const spi: any = this.getFreeSpi();\n    spi.start(config);\n    return spi;\n  }\n\n  public getFreeUart(): PeripheralUART {\n    return this._getFreePeripheralUnit(\"uart\");\n  }\n\n  public getFreeTcp() {\n    return this._getFreePeripheralUnit(\"tcp\");\n  }\n}\n"]}