{"version":3,"sources":["../src/parts/Camera/JpegSerialCam/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,cAAc,MAAM,yCAAyC,CAAC;AACrE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,oBAAoB;IACnC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,iBAAiB,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AAElE,oBAAY,iBAAiB,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC;AAEtE,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,mBAAmB;WAEjD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,cAAc,EAAE,GAAG,CAAC;IACpB,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAG,cAAc,CAAC;;IAWtB,KAAK,CAAC,KAAK,EAAE,KAAK;IAWZ,WAAW,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE;IAgBzE,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE;IAezC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM;IAIhC,SAAS,CAAC,GAAG,EAAE,GAAG;IAclB,SAAS;IAMT,WAAW,CAAC,UAAU,EAAE,iBAAiB;IAgBzC,sBAAsB,CAAC,QAAQ,EAAE,MAAM;IAOvC,WAAW,CAAC,IAAI,EAAE,iBAAiB;IAwCnC,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;CA0E3C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface JpegSerialCamOptions {\r\n  vcc?: number;\r\n  cam_tx: number;\r\n  cam_rx: number;\r\n  gnd?: number;\r\n}\r\n\r\nexport type JpegSerialCamSize = \"640x480\" | \"320x240\" | \"160x120\";\r\n\r\nexport type JpegSerialCamBaud = 9600 | 19200 | 38400 | 57600 | 115200;\r\n\r\nexport default class JpegSerialCam implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"JpegSerialCam\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public ioKeys: string[];\r\n  public displayName: string;\r\n  public displayIoNames: any;\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public my_tx: any;\r\n  public my_rx: any;\r\n  public uart!: PeripheralUART;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"cam_tx\", \"cam_rx\", \"gnd\"];\r\n    this.requiredKeys = [\"cam_tx\", \"cam_rx\"];\r\n\r\n    this.ioKeys = this.keys;\r\n    this.displayName = \"Jcam\";\r\n    this.displayIoNames = {cam_tx: \"camTx\", cam_rx: \"camRx\"};\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.my_tx = this.params.cam_rx;\r\n    this.my_rx = this.params.cam_tx;\r\n\r\n    this.obniz.getIO(this.my_tx).drive(\"3v\");\r\n\r\n    this.uart = this.obniz.getFreeUart();\r\n  }\r\n\r\n  public async _drainUntil(uart: PeripheralUART, search: number[], recv?: number[]) {\r\n    if (!recv) {\r\n      recv = [];\r\n    }\r\n    while (true) {\r\n      const readed = uart.readBytes();\r\n      recv = recv.concat(readed);\r\n      const tail = this._seekTail(search, recv);\r\n      if (tail >= 0) {\r\n        recv.splice(0, tail);\r\n        return recv;\r\n      }\r\n      await this.obniz.wait(10);\r\n    }\r\n  }\r\n\r\n  public _seekTail(search: number[], src: number[]) {\r\n    let f = 0;\r\n    for (let i = 0; i < src.length; i++) {\r\n      if (src[i] === search[f]) {\r\n        f++;\r\n        if (f === search.length) {\r\n          return i + 1;\r\n        }\r\n      } else {\r\n        f = 0;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public arrayToBase64(array: number[]): string {\r\n    return Buffer.from(array).toString(\"base64\");\r\n  }\r\n\r\n  public async startWait(obj: any) {\r\n    if (!obj) {\r\n      obj = {};\r\n    }\r\n    this.uart.start({\r\n      tx: this.my_tx,\r\n      rx: this.my_rx,\r\n      baud: obj.baud || 38400,\r\n    });\r\n    this.obniz.display!.setPinName(this.my_tx, \"JpegSerialCam\", \"camRx\");\r\n    this.obniz.display!.setPinName(this.my_rx, \"JpegSerialCam\", \"camTx\");\r\n    await this.obniz.wait(2500);\r\n  }\r\n\r\n  public async resetwait() {\r\n    this.uart.send([0x56, 0x00, 0x26, 0x00]);\r\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x26, 0x00]);\r\n    await this.obniz.wait(2500);\r\n  }\r\n\r\n  public async setSizeWait(resolution: JpegSerialCamSize) {\r\n    let val: number;\r\n    if (resolution === \"640x480\") {\r\n      val = 0x00;\r\n    } else if (resolution === \"320x240\") {\r\n      val = 0x11;\r\n    } else if (resolution === \"160x120\") {\r\n      val = 0x22;\r\n    } else {\r\n      throw new Error(\"unsupported size\");\r\n    }\r\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, val]);\r\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\r\n    await this.resetwait();\r\n  }\r\n\r\n  public async setCompressibilityWait(compress: number) {\r\n    const val = Math.floor((compress / 100) * 0xff);\r\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, val]);\r\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\r\n    await this.resetwait();\r\n  }\r\n\r\n  public async setBaudWait(baud: JpegSerialCamBaud) {\r\n    let val: any;\r\n    switch (baud) {\r\n      case 9600:\r\n        val = [0xae, 0xc8];\r\n        break;\r\n      case 19200:\r\n        val = [0x56, 0xe4];\r\n        break;\r\n      case 38400:\r\n        val = [0x2a, 0xf2];\r\n        break;\r\n      case 57600:\r\n        val = [0x1c, 0x4c];\r\n        break;\r\n      case 115200:\r\n        val = [0x0d, 0xa6];\r\n        break;\r\n      default:\r\n        throw new Error(\"invalid baud rate\");\r\n    }\r\n    this.uart.send([\r\n      0x56,\r\n      0x00,\r\n      0x31,\r\n      0x06,\r\n      0x04,\r\n      0x02,\r\n      0x00,\r\n      0x08,\r\n      val[0],\r\n      val[1],\r\n    ]);\r\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\r\n    // await this.obniz.wait(1000);\r\n    await this.startWait({\r\n      baud,\r\n    });\r\n  }\r\n\r\n  public async takeWait(): Promise<number[]> {\r\n    const uart = this.uart;\r\n    // console.log(\"stop a photo\")\r\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x02]);\r\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\r\n\r\n    // console.log(\"take a photo\")\r\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x00]);\r\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\r\n\r\n    // console.log(\"read length\")\r\n    uart.send([0x56, 0x00, 0x34, 0x01, 0x00]); // read length of image data\r\n    let recv = await this._drainUntil(uart, [\r\n      0x76,\r\n      0x00,\r\n      0x34,\r\n      0x00,\r\n      0x04,\r\n      0x00,\r\n      0x00,\r\n    ]); // ack\r\n    let XX: any;\r\n    let YY: any;\r\n    while (true) {\r\n      const readed = uart.readBytes();\r\n      // console.log(recv);\r\n      recv = recv.concat(readed);\r\n      if (recv.length >= 2) {\r\n        XX = recv[0];\r\n        YY = recv[1];\r\n        break;\r\n      }\r\n      await this.obniz.wait(1000);\r\n    }\r\n    const databytes = XX * 256 + YY;\r\n    // console.log(\"image: \" + databytes + \" Bytes\");\r\n    // const high = (databytes >> 8) & 0xff;\r\n    // const low = databytes & 0xff;\r\n\r\n    // console.log(\"start reading image\")\r\n    uart.send([\r\n      0x56,\r\n      0x00,\r\n      0x32,\r\n      0x0c,\r\n      0x00,\r\n      0x0a,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      XX,\r\n      YY,\r\n      0x00,\r\n      0xff,\r\n    ]);\r\n    recv = await this._drainUntil(uart, [0x76, 0x00, 0x32, 0x00, 0x00]);\r\n    // console.log(\"reading...\");\r\n    while (true) {\r\n      const readed = uart.readBytes();\r\n      recv = recv.concat(readed);\r\n      // console.log(readed.length);\r\n      if (recv.length >= databytes) {\r\n        break;\r\n      }\r\n      await this.obniz.wait(10);\r\n    }\r\n    // console.log(\"done\");\r\n    recv = recv.splice(0, databytes); // remove tail\r\n    recv = recv.concat([0xff, 0xd9]);\r\n    return recv;\r\n  }\r\n}\r\n"]}