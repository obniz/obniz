{"version":3,"sources":["../src/parts/Camera/ArduCAMMini/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,EAAC,SAAS,EAAC,MAAM,2CAA2C,CAAC;AACpE,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAEjE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,kBAAkB;IACjC,EAAE,EAAE,YAAY,CAAC;IACjB,IAAI,CAAC,EAAE,YAAY,CAAC;IACpB,IAAI,CAAC,EAAE,YAAY,CAAC;IACpB,IAAI,CAAC,EAAE,YAAY,CAAC;IACpB,GAAG,CAAC,EAAE,YAAY,CAAC;IACnB,GAAG,CAAC,EAAE,YAAY,CAAC;IACnB,GAAG,CAAC,EAAE,YAAY,CAAC;IACnB,GAAG,CAAC,EAAE,YAAY,CAAC;IACnB,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,SAAS,CAAC,EAAE,SAAS,CAAC;IACtB,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB,cAAc,CAAC,EAAE,MAAM,CAAC;CACzB;AAED,oBAAY,eAAe,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AAChE,oBAAY,eAAe,GACvB,SAAS,GACT,SAAS,GACT,SAAS,GACT,SAAS,GACT,SAAS,GACT,SAAS,GACT,UAAU,GACV,UAAU,GACV,WAAW,CAAC;AAEhB,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAE/C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,WAAW,EAAE,GAAG,CAAC;IACjB,KAAK,EAAE,GAAG,CAAC;IAClB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;IAC9B,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAgpBvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAyBlB,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IASlC,YAAY,CAAC,IAAI,EAAE,MAAM;IAU/B,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAI7C,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAM7B,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAItC,gBAAgB,CAAC,IAAI,EAAE,MAAM;IAI7B,gBAAgB;IAStB,OAAO,CAAC,IAAI,EAAE,MAAM;IAYd,aAAa,IAAI,OAAO,CAAC,MAAM,CAAC;IAQtC,IAAI;IAaE,WAAW;IAUX,QAAQ,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAiB/C,OAAO,CAAC,MAAM,EAAE,MAAM;IAuBtB,UAAU,CAAC,IAAI,EAAE,GAAG;IAQpB,SAAS;IAIH,kBAAkB,IAAI,OAAO,CAAC,MAAM,CAAC;IAO3C,YAAY;IAIN,iBAAiB,IAAI,OAAO,CAAC,OAAO,CAAC;IAMrC,YAAY,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IA8BvC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM;CAG9C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport {DriveType} from \"../../../obniz/libs/io_peripherals/common\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\n\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface ArduCAMMiniOptions {\r\n  cs: PeripheralIO;\r\n  mosi?: PeripheralIO;\r\n  miso?: PeripheralIO;\r\n  sclk?: PeripheralIO;\r\n  gnd?: PeripheralIO;\r\n  vcc?: PeripheralIO;\r\n  sda?: PeripheralIO;\r\n  scl?: PeripheralIO;\r\n  i2c?: PeripheralI2C;\r\n  spi?: PeripheralSPI;\r\n  spi_drive?: DriveType;\r\n  spi_frequency?: number;\r\n  module_version?: number;\r\n}\r\n\r\nexport type ArduCAMMiniMode = \"MCU2LCD\" | \"CAM2LCD\" | \"LCD2MCU\";\r\nexport type ArduCAMMiniSize =\r\n  | \"160x120\"\r\n  | \"176x144\"\r\n  | \"320x240\"\r\n  | \"352x288\"\r\n  | \"640x480\"\r\n  | \"800x600\"\r\n  | \"1024x768\"\r\n  | \"1280x960\"\r\n  | \"1600x1200\";\r\n\r\nexport default class ArduCAMMini implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"ArduCAMMini\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public ioKeys: string[];\r\n  public displayName: string;\r\n  public regs: any;\r\n  public configs: any;\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public io_cs: any;\r\n  public sensor_addr: any;\r\n  public _size: any;\r\n  protected spi!: PeripheralSPI;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\r\n      \"cs\",\r\n      \"mosi\",\r\n      \"miso\",\r\n      \"sclk\",\r\n      \"gnd\",\r\n      \"vcc\",\r\n      \"sda\",\r\n      \"scl\",\r\n      \"spi\",\r\n      \"i2c\",\r\n      \"spi_frequency\",\r\n      \"spi_drive\",\r\n      \"module_version\",\r\n    ];\r\n    this.requiredKeys = [\"cs\"];\r\n\r\n    this.ioKeys = this.keys;\r\n    this.displayName = \"Cam\";\r\n\r\n    this.regs = {\r\n      ARDUCHIP_TEST1: 0x00,\r\n      ARDUCHIP_MODE: 0x02,\r\n      ARDUCHIP_FIFO: 0x04,\r\n      BURST_FIFO_READ: 0x3c,\r\n      ARDUCHIP_TRIG: 0x41,\r\n      FIFO_SIZE1: 0x42,\r\n      FIFO_SIZE2: 0x43,\r\n      FIFO_SIZE3: 0x44,\r\n    };\r\n\r\n    this.configs = {\r\n      OV2640_JPEG_INIT: [\r\n        [0xff, 0x00],\r\n        [0x2c, 0xff],\r\n        [0x2e, 0xdf],\r\n        [0xff, 0x01],\r\n        [0x3c, 0x32],\r\n        [0x11, 0x04],\r\n        [0x09, 0x02],\r\n        [0x04, 0x28],\r\n        [0x13, 0xe5],\r\n        [0x14, 0x48],\r\n        [0x2c, 0x0c],\r\n        [0x33, 0x78],\r\n        [0x3a, 0x33],\r\n        [0x3b, 0xfb],\r\n        [0x3e, 0x00],\r\n        [0x43, 0x11],\r\n        [0x16, 0x10],\r\n        [0x39, 0x92],\r\n        [0x35, 0xda],\r\n        [0x22, 0x1a],\r\n        [0x37, 0xc3],\r\n        [0x23, 0x00],\r\n        [0x34, 0xc0],\r\n        [0x36, 0x1a],\r\n        [0x06, 0x88],\r\n        [0x07, 0xc0],\r\n        [0x0d, 0x87],\r\n        [0x0e, 0x41],\r\n        [0x4c, 0x00],\r\n        [0x48, 0x00],\r\n        [0x5b, 0x00],\r\n        [0x42, 0x03],\r\n        [0x4a, 0x81],\r\n        [0x21, 0x99],\r\n        [0x24, 0x40],\r\n        [0x25, 0x38],\r\n        [0x26, 0x82],\r\n        [0x5c, 0x00],\r\n        [0x63, 0x00],\r\n        [0x61, 0x70],\r\n        [0x62, 0x80],\r\n        [0x7c, 0x05],\r\n        [0x20, 0x80],\r\n        [0x28, 0x30],\r\n        [0x6c, 0x00],\r\n        [0x6d, 0x80],\r\n        [0x6e, 0x00],\r\n        [0x70, 0x02],\r\n        [0x71, 0x94],\r\n        [0x73, 0xc1],\r\n        [0x12, 0x40],\r\n        [0x17, 0x11],\r\n        [0x18, 0x43],\r\n        [0x19, 0x00],\r\n        [0x1a, 0x4b],\r\n        [0x32, 0x09],\r\n        [0x37, 0xc0],\r\n        [0x4f, 0x60],\r\n        [0x50, 0xa8],\r\n        [0x6d, 0x00],\r\n        [0x3d, 0x38],\r\n        [0x46, 0x3f],\r\n        [0x4f, 0x60],\r\n        [0x0c, 0x3c],\r\n        [0xff, 0x00],\r\n        [0xe5, 0x7f],\r\n        [0xf9, 0xc0],\r\n        [0x41, 0x24],\r\n        [0xe0, 0x14],\r\n        [0x76, 0xff],\r\n        [0x33, 0xa0],\r\n        [0x42, 0x20],\r\n        [0x43, 0x18],\r\n        [0x4c, 0x00],\r\n        [0x87, 0xd5],\r\n        [0x88, 0x3f],\r\n        [0xd7, 0x03],\r\n        [0xd9, 0x10],\r\n        [0xd3, 0x82],\r\n        [0xc8, 0x08],\r\n        [0xc9, 0x80],\r\n        [0x7c, 0x00],\r\n        [0x7d, 0x00],\r\n        [0x7c, 0x03],\r\n        [0x7d, 0x48],\r\n        [0x7d, 0x48],\r\n        [0x7c, 0x08],\r\n        [0x7d, 0x20],\r\n        [0x7d, 0x10],\r\n        [0x7d, 0x0e],\r\n        [0x90, 0x00],\r\n        [0x91, 0x0e],\r\n        [0x91, 0x1a],\r\n        [0x91, 0x31],\r\n        [0x91, 0x5a],\r\n        [0x91, 0x69],\r\n        [0x91, 0x75],\r\n        [0x91, 0x7e],\r\n        [0x91, 0x88],\r\n        [0x91, 0x8f],\r\n        [0x91, 0x96],\r\n        [0x91, 0xa3],\r\n        [0x91, 0xaf],\r\n        [0x91, 0xc4],\r\n        [0x91, 0xd7],\r\n        [0x91, 0xe8],\r\n        [0x91, 0x20],\r\n        [0x92, 0x00],\r\n        [0x93, 0x06],\r\n        [0x93, 0xe3],\r\n        [0x93, 0x05],\r\n        [0x93, 0x05],\r\n        [0x93, 0x00],\r\n        [0x93, 0x04],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x93, 0x00],\r\n        [0x96, 0x00],\r\n        [0x97, 0x08],\r\n        [0x97, 0x19],\r\n        [0x97, 0x02],\r\n        [0x97, 0x0c],\r\n        [0x97, 0x24],\r\n        [0x97, 0x30],\r\n        [0x97, 0x28],\r\n        [0x97, 0x26],\r\n        [0x97, 0x02],\r\n        [0x97, 0x98],\r\n        [0x97, 0x80],\r\n        [0x97, 0x00],\r\n        [0x97, 0x00],\r\n        [0xc3, 0xed],\r\n        [0xa4, 0x00],\r\n        [0xa8, 0x00],\r\n        [0xc5, 0x11],\r\n        [0xc6, 0x51],\r\n        [0xbf, 0x80],\r\n        [0xc7, 0x10],\r\n        [0xb6, 0x66],\r\n        [0xb8, 0xa5],\r\n        [0xb7, 0x64],\r\n        [0xb9, 0x7c],\r\n        [0xb3, 0xaf],\r\n        [0xb4, 0x97],\r\n        [0xb5, 0xff],\r\n        [0xb0, 0xc5],\r\n        [0xb1, 0x94],\r\n        [0xb2, 0x0f],\r\n        [0xc4, 0x5c],\r\n        [0xc0, 0x64],\r\n        [0xc1, 0x4b],\r\n        [0x8c, 0x00],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x00],\r\n        [0x51, 0xc8],\r\n        [0x52, 0x96],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x5a, 0xc8],\r\n        [0x5b, 0x96],\r\n        [0x5c, 0x00],\r\n        [0xd3, 0x00], // [ 0xd3, 0x7f ],\r\n        [0xc3, 0xed],\r\n        [0x7f, 0x00],\r\n        [0xda, 0x00],\r\n        [0xe5, 0x1f],\r\n        [0xe1, 0x67],\r\n        [0xe0, 0x00],\r\n        [0xdd, 0x7f],\r\n        [0x05, 0x00],\r\n        //\r\n        [0x12, 0x40],\r\n        [0xd3, 0x04], // [ 0xd3, 0x7f ],\r\n        [0xc0, 0x16],\r\n        [0xc1, 0x12],\r\n        [0x8c, 0x00],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x00],\r\n        [0x51, 0x2c],\r\n        [0x52, 0x24],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x5a, 0x2c],\r\n        [0x5b, 0x24],\r\n        [0x5c, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_YUV422: [\r\n        [0xff, 0x00],\r\n        [0x05, 0x00],\r\n        [0xda, 0x10],\r\n        [0xd7, 0x03],\r\n        [0xdf, 0x00],\r\n        [0x33, 0x80],\r\n        [0x3c, 0x40],\r\n        [0xe1, 0x77],\r\n        [0x00, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_JPEG: [\r\n        [0xe0, 0x14],\r\n        [0xe1, 0x77],\r\n        [0xe5, 0x1f],\r\n        [0xd7, 0x03],\r\n        [0xda, 0x10],\r\n        [0xe0, 0x00],\r\n        [0xff, 0x01],\r\n        [0x04, 0x08],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_160x120_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x12, 0x40],\r\n        [0x17, 0x11],\r\n        [0x18, 0x43],\r\n        [0x19, 0x00],\r\n        [0x1a, 0x4b],\r\n        [0x32, 0x09],\r\n        [0x4f, 0xca],\r\n        [0x50, 0xa8],\r\n        [0x5a, 0x23],\r\n        [0x6d, 0x00],\r\n        [0x39, 0x12],\r\n        [0x35, 0xda],\r\n        [0x22, 0x1a],\r\n        [0x37, 0xc3],\r\n        [0x23, 0x00],\r\n        [0x34, 0xc0],\r\n        [0x36, 0x1a],\r\n        [0x06, 0x88],\r\n        [0x07, 0xc0],\r\n        [0x0d, 0x87],\r\n        [0x0e, 0x41],\r\n        [0x4c, 0x00],\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0x64],\r\n        [0xc1, 0x4b],\r\n        [0x86, 0x35],\r\n        [0x50, 0x92],\r\n        [0x51, 0xc8],\r\n        [0x52, 0x96],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x28],\r\n        [0x5b, 0x1e],\r\n        [0x5c, 0x00],\r\n        [0xe0, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_176x144_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x12, 0x40],\r\n        [0x17, 0x11],\r\n        [0x18, 0x43],\r\n        [0x19, 0x00],\r\n        [0x1a, 0x4b],\r\n        [0x32, 0x09],\r\n        [0x4f, 0xca],\r\n        [0x50, 0xa8],\r\n        [0x5a, 0x23],\r\n        [0x6d, 0x00],\r\n        [0x39, 0x12],\r\n        [0x35, 0xda],\r\n        [0x22, 0x1a],\r\n        [0x37, 0xc3],\r\n        [0x23, 0x00],\r\n        [0x34, 0xc0],\r\n        [0x36, 0x1a],\r\n        [0x06, 0x88],\r\n        [0x07, 0xc0],\r\n        [0x0d, 0x87],\r\n        [0x0e, 0x41],\r\n        [0x4c, 0x00],\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0x64],\r\n        [0xc1, 0x4b],\r\n        [0x86, 0x35],\r\n        [0x50, 0x92],\r\n        [0x51, 0xc8],\r\n        [0x52, 0x96],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x2c],\r\n        [0x5b, 0x24],\r\n        [0x5c, 0x00],\r\n        [0xe0, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_320x240_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x12, 0x40],\r\n        [0x17, 0x11],\r\n        [0x18, 0x43],\r\n        [0x19, 0x00],\r\n        [0x1a, 0x4b],\r\n        [0x32, 0x09],\r\n        [0x4f, 0xca],\r\n        [0x50, 0xa8],\r\n        [0x5a, 0x23],\r\n        [0x6d, 0x00],\r\n        [0x39, 0x12],\r\n        [0x35, 0xda],\r\n        [0x22, 0x1a],\r\n        [0x37, 0xc3],\r\n        [0x23, 0x00],\r\n        [0x34, 0xc0],\r\n        [0x36, 0x1a],\r\n        [0x06, 0x88],\r\n        [0x07, 0xc0],\r\n        [0x0d, 0x87],\r\n        [0x0e, 0x41],\r\n        [0x4c, 0x00],\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0x64],\r\n        [0xc1, 0x4b],\r\n        [0x86, 0x35],\r\n        [0x50, 0x89],\r\n        [0x51, 0xc8],\r\n        [0x52, 0x96],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x50],\r\n        [0x5b, 0x3c],\r\n        [0x5c, 0x00],\r\n        [0xe0, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_352x288_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x12, 0x40],\r\n        [0x17, 0x11],\r\n        [0x18, 0x43],\r\n        [0x19, 0x00],\r\n        [0x1a, 0x4b],\r\n        [0x32, 0x09],\r\n        [0x4f, 0xca],\r\n        [0x50, 0xa8],\r\n        [0x5a, 0x23],\r\n        [0x6d, 0x00],\r\n        [0x39, 0x12],\r\n        [0x35, 0xda],\r\n        [0x22, 0x1a],\r\n        [0x37, 0xc3],\r\n        [0x23, 0x00],\r\n        [0x34, 0xc0],\r\n        [0x36, 0x1a],\r\n        [0x06, 0x88],\r\n        [0x07, 0xc0],\r\n        [0x0d, 0x87],\r\n        [0x0e, 0x41],\r\n        [0x4c, 0x00],\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0x64],\r\n        [0xc1, 0x4b],\r\n        [0x86, 0x35],\r\n        [0x50, 0x89],\r\n        [0x51, 0xc8],\r\n        [0x52, 0x96],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x00],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x58],\r\n        [0x5b, 0x48],\r\n        [0x5c, 0x00],\r\n        [0xe0, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_640x480_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x11, 0x01],\r\n        [0x12, 0x00], // Bit[6:4]: Resolution selection//\r\n        [0x17, 0x11], // HREFST[10:3]\r\n        [0x18, 0x75], // HREFEND[10:3]\r\n        [0x32, 0x36], // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]\r\n        [0x19, 0x01], // VSTRT[9:2]\r\n        [0x1a, 0x97], // VEND[9:2]\r\n        [0x03, 0x0f], // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]\r\n        [0x37, 0x40],\r\n        [0x4f, 0xbb],\r\n        [0x50, 0x9c],\r\n        [0x5a, 0x57],\r\n        [0x6d, 0x80],\r\n        [0x3d, 0x34],\r\n        [0x39, 0x02],\r\n        [0x35, 0x88],\r\n        [0x22, 0x0a],\r\n        [0x37, 0x40],\r\n        [0x34, 0xa0],\r\n        [0x06, 0x02],\r\n        [0x0d, 0xb7],\r\n        [0x0e, 0x01],\r\n\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0xc8],\r\n        [0xc1, 0x96],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x89],\r\n        [0x51, 0x90],\r\n        [0x52, 0x2c],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x88],\r\n        [0x57, 0x00],\r\n        [0x5a, 0xa0],\r\n        [0x5b, 0x78],\r\n        [0x5c, 0x00],\r\n        [0xd3, 0x04],\r\n        [0xe0, 0x00],\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_800x600_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x11, 0x01],\r\n        [0x12, 0x00], // Bit[6:4]: Resolution selection\r\n        [0x17, 0x11], // HREFST[10:3]\r\n        [0x18, 0x75], // HREFEND[10:3]\r\n        [0x32, 0x36], // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]\r\n        [0x19, 0x01], // VSTRT[9:2]\r\n        [0x1a, 0x97], // VEND[9:2]\r\n        [0x03, 0x0f], // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]\r\n        [0x37, 0x40],\r\n        [0x4f, 0xbb],\r\n        [0x50, 0x9c],\r\n        [0x5a, 0x57],\r\n        [0x6d, 0x80],\r\n        [0x3d, 0x34],\r\n        [0x39, 0x02],\r\n        [0x35, 0x88],\r\n        [0x22, 0x0a],\r\n        [0x37, 0x40],\r\n        [0x34, 0xa0],\r\n        [0x06, 0x02],\r\n        [0x0d, 0xb7],\r\n        [0x0e, 0x01],\r\n\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0xc8],\r\n        [0xc1, 0x96],\r\n        [0x86, 0x35],\r\n        [0x50, 0x89],\r\n        [0x51, 0x90],\r\n        [0x52, 0x2c],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x88],\r\n        [0x57, 0x00],\r\n        [0x5a, 0xc8],\r\n        [0x5b, 0x96],\r\n        [0x5c, 0x00],\r\n        [0xd3, 0x02],\r\n        [0xe0, 0x00],\r\n\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_1024x768_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x11, 0x01],\r\n        [0x12, 0x00], // Bit[6:4]: Resolution selection//0x02\r\n        [0x17, 0x11], // HREFST[10:3]\r\n        [0x18, 0x75], // HREFEND[10:3]\r\n        [0x32, 0x36], // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]\r\n        [0x19, 0x01], // VSTRT[9:2]\r\n        [0x1a, 0x97], // VEND[9:2]\r\n        [0x03, 0x0f], // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]\r\n        [0x37, 0x40],\r\n        [0x4f, 0xbb],\r\n        [0x50, 0x9c],\r\n        [0x5a, 0x57],\r\n        [0x6d, 0x80],\r\n        [0x3d, 0x34],\r\n        [0x39, 0x02],\r\n        [0x35, 0x88],\r\n        [0x22, 0x0a],\r\n        [0x37, 0x40],\r\n        [0x34, 0xa0],\r\n        [0x06, 0x02],\r\n        [0x0d, 0xb7],\r\n        [0x0e, 0x01],\r\n\r\n        [0xff, 0x00],\r\n        [0xc0, 0xc8],\r\n        [0xc1, 0x96],\r\n        [0x8c, 0x00],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x00],\r\n        [0x51, 0x90],\r\n        [0x52, 0x2c],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x88],\r\n        [0x5a, 0x00],\r\n        [0x5b, 0xc0],\r\n        [0x5c, 0x01],\r\n        [0xd3, 0x02],\r\n\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_1280x960_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x11, 0x01],\r\n        [0x12, 0x00], // Bit[6:4]: Resolution selection//0x02\r\n        [0x17, 0x11], // HREFST[10:3]\r\n        [0x18, 0x75], // HREFEND[10:3]\r\n        [0x32, 0x36], // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]\r\n        [0x19, 0x01], // VSTRT[9:2]\r\n        [0x1a, 0x97], // VEND[9:2]\r\n        [0x03, 0x0f], // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]\r\n        [0x37, 0x40],\r\n        [0x4f, 0xbb],\r\n        [0x50, 0x9c],\r\n        [0x5a, 0x57],\r\n        [0x6d, 0x80],\r\n        [0x3d, 0x34],\r\n        [0x39, 0x02],\r\n        [0x35, 0x88],\r\n        [0x22, 0x0a],\r\n        [0x37, 0x40],\r\n        [0x34, 0xa0],\r\n        [0x06, 0x02],\r\n        [0x0d, 0xb7],\r\n        [0x0e, 0x01],\r\n\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0xc8],\r\n        [0xc1, 0x96],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x00],\r\n        [0x51, 0x90],\r\n        [0x52, 0x2c],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x88],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x40],\r\n        [0x5b, 0xf0],\r\n        [0x5c, 0x01],\r\n        [0xd3, 0x02],\r\n        [0xe0, 0x00],\r\n\r\n        [0xff, 0xff],\r\n      ],\r\n\r\n      OV2640_1600x1200_JPEG: [\r\n        [0xff, 0x01],\r\n        [0x11, 0x01],\r\n        [0x12, 0x00], // Bit[6:4]: Resolution selection//0x02\r\n        [0x17, 0x11], // HREFST[10:3]\r\n        [0x18, 0x75], // HREFEND[10:3]\r\n        [0x32, 0x36], // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]\r\n        [0x19, 0x01], // VSTRT[9:2]\r\n        [0x1a, 0x97], // VEND[9:2]\r\n        [0x03, 0x0f], // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]\r\n        [0x37, 0x40],\r\n        [0x4f, 0xbb],\r\n        [0x50, 0x9c],\r\n        [0x5a, 0x57],\r\n        [0x6d, 0x80],\r\n        [0x3d, 0x34],\r\n        [0x39, 0x02],\r\n        [0x35, 0x88],\r\n        [0x22, 0x0a],\r\n        [0x37, 0x40],\r\n        [0x34, 0xa0],\r\n        [0x06, 0x02],\r\n        [0x0d, 0xb7],\r\n        [0x0e, 0x01],\r\n\r\n        [0xff, 0x00],\r\n        [0xe0, 0x04],\r\n        [0xc0, 0xc8],\r\n        [0xc1, 0x96],\r\n        [0x86, 0x3d],\r\n        [0x50, 0x00],\r\n        [0x51, 0x90],\r\n        [0x52, 0x2c],\r\n        [0x53, 0x00],\r\n        [0x54, 0x00],\r\n        [0x55, 0x88],\r\n        [0x57, 0x00],\r\n        [0x5a, 0x90],\r\n        [0x5b, 0x2c],\r\n        [0x5c, 0x05], // bit2->1;bit[1:0]->1\r\n        [0xd3, 0x02],\r\n        [0xe0, 0x00],\r\n\r\n        [0xff, 0xff],\r\n      ],\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.io_cs = obniz.getIO(this.params.cs);\r\n    this.io_cs.output(true);\r\n\r\n    obniz.wait(100);\r\n\r\n    this.sensor_addr = 0x30; // i2c\r\n\r\n    this.params.module_version = this.params.module_version || 0;\r\n    this.params.mode = this.params.mode || \"master\";\r\n    this.params.drive = this.params.spi_drive || \"3v\";\r\n    this.params.frequency = this.params.spi_frequency || 4 * 1000 * 1000;\r\n    this.params.clk = this.params.sclk;\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n\r\n    this.params.sda = this.params.sda;\r\n    this.params.scl = this.params.scl;\r\n    this.params.clock = this.params.clock || 100 * 1000;\r\n    this.params.mode = \"master\";\r\n    this.params.pull = \"5v\";\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public spi_write(addr: number, byteData: number) {\r\n    const data = [];\r\n    data.push(addr);\r\n    data.push(byteData);\r\n    this.io_cs.output(false);\r\n    this.spi.write(data);\r\n    this.io_cs.output(true);\r\n  }\r\n\r\n  public async spi_readWait(addr: number) {\r\n    const data = [];\r\n    data.push(addr);\r\n    data.push(0x00);\r\n    this.io_cs.output(false);\r\n    const recv = await this.spi.writeWait(data);\r\n    this.io_cs.output(true);\r\n    return recv[1];\r\n  }\r\n\r\n  public i2c_byte_write(addr: number, byteData: number) {\r\n    this.i2c.write(this.sensor_addr, [addr, byteData]);\r\n  }\r\n\r\n  public i2c_regs_write(regs: number[]) {\r\n    for (let i = 0; i < regs.length; i++) {\r\n      this.i2c.write(this.sensor_addr, regs[i]);\r\n    }\r\n  }\r\n\r\n  public spi_write_reg(addr: number, byteData: number) {\r\n    this.spi_write(addr | 0x80, byteData);\r\n  }\r\n\r\n  public async spi_read_regWait(addr: number) {\r\n    return await this.spi_readWait(addr & 0x7f);\r\n  }\r\n\r\n  public async spi_pingpongWait() {\r\n    const testVal = 0x55;\r\n    this.spi_write_reg(this.regs.ARDUCHIP_TEST1, testVal);\r\n    const val = await this.spi_read_regWait(this.regs.ARDUCHIP_TEST1);\r\n    if (val !== testVal) {\r\n      throw new Error(\"spi bus fail\");\r\n    }\r\n  }\r\n\r\n  public setMode(mode: string) {\r\n    const modes: any = {\r\n      MCU2LCD: 0x00,\r\n      CAM2LCD: 0x01,\r\n      LCD2MCU: 0x02,\r\n    };\r\n    if (typeof modes[mode] !== \"number\") {\r\n      throw new Error(\"unknown mode. options are \" + modes);\r\n    }\r\n    this.spi_write_reg(this.regs.ARDUCHIP_MODE, modes[mode]);\r\n  }\r\n\r\n  public async getChipIdWait(): Promise<number> {\r\n    this.i2c.write(this.sensor_addr, [0x0a]);\r\n    const val0: number[] = await this.i2c.readWait(this.sensor_addr, 1);\r\n    this.i2c.write(this.sensor_addr, [0x0b]);\r\n    const val1: number[] = await this.i2c.readWait(this.sensor_addr, 1);\r\n    return (val0[0] << 8) + val1[0];\r\n  }\r\n\r\n  public init() {\r\n    this.i2c_byte_write(0xff, 0x01);\r\n    this.i2c_byte_write(0x12, 0x80);\r\n    this.obniz.wait(100);\r\n\r\n    this.i2c_regs_write(this.configs.OV2640_JPEG_INIT);\r\n    this.i2c_regs_write(this.configs.OV2640_YUV422);\r\n    this.i2c_regs_write(this.configs.OV2640_JPEG);\r\n    this.i2c_byte_write(0xff, 0x01);\r\n    this.i2c_byte_write(0x15, 0x00);\r\n    this.setSize(\"320x240\");\r\n  }\r\n\r\n  public async startupWait() {\r\n    await this.spi_pingpongWait();\r\n    this.setMode(\"MCU2LCD\");\r\n    const chipid = await this.getChipIdWait();\r\n    if (chipid !== 0x2642 && chipid !== 0x2641) {\r\n      throw new Error(\"unknown chip \" + chipid);\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  public async takeWait(size: number): Promise<number[]> {\r\n    if (typeof size === \"string\" && this._size !== size) {\r\n      this.setSize(size);\r\n      this.obniz.wait(1000);\r\n    }\r\n\r\n    this.flushFIFO();\r\n    this.flushFIFO();\r\n    this.startCapture();\r\n    while (true) {\r\n      if (await this.isCaptureDoneWait()) {\r\n        break;\r\n      }\r\n    }\r\n    return await this.readFIFOWait();\r\n  }\r\n\r\n  public setSize(string: string) {\r\n    if (this._size === string) {\r\n      return;\r\n    }\r\n    const map: any = {\r\n      \"160x120\": this.configs.OV2640_160x120_JPEG,\r\n      \"176x144\": this.configs.OV2640_176x144_JPEG,\r\n      \"320x240\": this.configs.OV2640_320x240_JPEG,\r\n      \"352x288\": this.configs.OV2640_352x288_JPEG,\r\n      \"640x480\": this.configs.OV2640_640x480_JPEG,\r\n      \"800x600\": this.configs.OV2640_800x600_JPEG,\r\n      \"1024x768\": this.configs.OV2640_1024x768_JPEG,\r\n      \"1280x960\": this.configs.OV2640_1280x960_JPEG,\r\n      \"1600x1200\": this.configs.OV2640_1600x1200_JPEG,\r\n    };\r\n    if (map[string]) {\r\n      this._size = string;\r\n      this.i2c_regs_write(map[string]);\r\n    } else {\r\n      throw new Error(\"unsupported size options are \" + Object.keys(map));\r\n    }\r\n  }\r\n\r\n  public updateFIFO(data: any) {\r\n    //  FIFO_CLEAR_MASK    \t\t0x01\r\n    //  FIFO_START_MASK    \t\t0x02\r\n    //  FIFO_RDPTR_RST_MASK     0x10\r\n    //  FIFO_WRPTR_RST_MASK     0x20\r\n    this.spi_write_reg(this.regs.ARDUCHIP_FIFO, data);\r\n  }\r\n\r\n  public flushFIFO() {\r\n    this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x01);\r\n  }\r\n\r\n  public async readFIFOLengthWait(): Promise<number> {\r\n    const len1 = await this.spi_read_regWait(this.regs.FIFO_SIZE1);\r\n    const len2 = await this.spi_read_regWait(this.regs.FIFO_SIZE2);\r\n    const len3 = (await this.spi_read_regWait(this.regs.FIFO_SIZE3)) & 0x07;\r\n    return ((len3 << 16) | (len2 << 8) | len1) & 0x07ffff;\r\n  }\r\n\r\n  public startCapture() {\r\n    this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x02);\r\n  }\r\n\r\n  public async isCaptureDoneWait(): Promise<boolean> {\r\n    const CAP_DONE_MASK = 0x08;\r\n    const val = await this.spi_read_regWait(this.regs.ARDUCHIP_TRIG);\r\n    return val & CAP_DONE_MASK ? true : false;\r\n  }\r\n\r\n  public async readFIFOWait(): Promise<number[]> {\r\n    // get length of image data\r\n    const length = await this.readFIFOLengthWait();\r\n\r\n    // start bust\r\n    this.io_cs.output(false);\r\n    this.spi.write([this.regs.BURST_FIFO_READ]);\r\n\r\n    if (this.params.module_version === 0) {\r\n      this.spi.write([0xff]); // dummy read\r\n    }\r\n\r\n    const buf = [];\r\n\r\n    while (buf.length < length) {\r\n      let mustRead: number = length - buf.length;\r\n      if (mustRead > 1024) {\r\n        mustRead = 1024;\r\n      }\r\n      const arr = new Array(mustRead);\r\n      arr.fill(0);\r\n      const sliced = await this.spi.writeWait(arr);\r\n      buf.push(...sliced);\r\n    }\r\n    // end burst\r\n    this.io_cs.output(true);\r\n\r\n    return buf;\r\n  }\r\n\r\n  public arrayToBase64(array: number[]): string {\r\n    return Buffer.from(array).toString(\"base64\");\r\n  }\r\n}\r\n"]}