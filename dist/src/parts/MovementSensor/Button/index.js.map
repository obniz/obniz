{"version":3,"sources":["../src/parts/MovementSensor/Button/index.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,MAAqB,MAAM;IAmBzB;QANO,cAAS,GAAmB,IAAI,CAAC;QACjC,aAAQ,GAAwC,IAAI,CAAC;QAM1D,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACtC,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE/B,IAAI,CAAC,oBAAoB,GAAG,GAAG,EAAE;QACjC,CAAC,CAAC;IACJ,CAAC;IAvBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,QAAQ;SACf,CAAC;IACJ,CAAC;IAqBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEjD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,cAAc;QACd,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE;YAClC,IAAI,CAAC,SAAS,GAAG,KAAK,KAAK,KAAK,CAAC;YACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;aAChC;YACD,IAAI,CAAC,oBAAoB,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAEY,aAAa;;YACxB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YAC7C,OAAO,GAAG,KAAK,KAAK,CAAC;QACvB,CAAC;KAAA;IAEM,SAAS,CAAC,SAAkB;QACjC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,oBAAoB,GAAG,CAAC,OAAY,EAAE,EAAE;gBAC3C,IAAI,SAAS,KAAK,OAAO,EAAE;oBACzB,IAAI,CAAC,oBAAoB,GAAG,GAAG,EAAE;oBACjC,CAAC,CAAC;oBACF,OAAO,EAAE,CAAC;iBACX;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArED,yBAqEC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface ButtonOptions {\r\n  signal: number;\r\n  gnd?: number;\r\n}\r\n\r\nexport default class Button implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Button\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public onChangeForStateWait: any;\r\n  public isPressed: boolean | null = null;\r\n  public onchange: ((pressed: boolean) => void) | null = null;\r\n\r\n  private io_signal!: PeripheralIO;\r\n  private io_supply?: PeripheralIO;\r\n\r\n  constructor() {\r\n    this.keys = [\"signal\", \"gnd\", \"pull\"];\r\n    this.requiredKeys = [\"signal\"];\r\n\r\n    this.onChangeForStateWait = () => {\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.io_signal = obniz.getIO(this.params.signal);\r\n\r\n    if (obniz.isValidIO(this.params.gnd)) {\r\n      this.io_supply = obniz.getIO(this.params.gnd);\r\n      this.io_supply.output(false);\r\n    }\r\n\r\n    // start input\r\n    if (this.params.pull === \"3v\") {\r\n      this.io_signal.pull(\"3v\");\r\n    } else if (this.params.pull === \"0v\") {\r\n      this.io_signal.pull(\"0v\");\r\n    } else {\r\n      this.io_signal.pull(\"5v\");\r\n    }\r\n\r\n    this.io_signal.input((value: any) => {\r\n      this.isPressed = value === false;\r\n      if (this.onchange) {\r\n        this.onchange(value === false);\r\n      }\r\n      this.onChangeForStateWait(value === false);\r\n    });\r\n  }\r\n\r\n  public async isPressedWait() {\r\n    const ret = await this.io_signal.inputWait();\r\n    return ret === false;\r\n  }\r\n\r\n  public stateWait(isPressed: boolean) {\r\n    return new Promise((resolve, reject) => {\r\n      this.onChangeForStateWait = (pressed: any) => {\r\n        if (isPressed === pressed) {\r\n          this.onChangeForStateWait = () => {\r\n          };\r\n          resolve();\r\n        }\r\n      };\r\n    });\r\n  }\r\n}\r\n"]}