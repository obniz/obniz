{"version":3,"sources":["../src/parts/MovementSensor/FlickHat/index.ts"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface FlickHatOptions {\r\n  vcc?: number;\r\n  sda: number;\r\n  scl: number;\r\n  reset: number;\r\n  ts: number;\r\n  gnd: number;\r\n  led1?: number;\r\n  led2?: number;\r\n}\r\n\r\nexport type FlickHat_Direction = \"west\" | \"east\" | \"north\" | \"south\";\r\nexport type FlickHat_Direction2 = \"west\" | \"east\" | \"north\" | \"south\" | \"center\";\r\n\r\nexport interface FlickHat_XYZ {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  seq: number;\r\n}\r\n\r\nexport interface FlickHat_Gesture {\r\n  action: \"gesture\";\r\n  from: FlickHat_Direction;\r\n  to: FlickHat_Direction;\r\n  seq: number;\r\n  raw: any;\r\n}\r\n\r\nexport interface FlickHat_Touch {\r\n  action: \"touch\";\r\n  positions: FlickHat_Direction2[];\r\n  seq: number;\r\n  raw: any;\r\n}\r\n\r\nexport interface FlickHat_Tap {\r\n  action: \"tap\";\r\n  positions: FlickHat_Direction2[];\r\n  seq: number;\r\n  raw: any;\r\n}\r\n\r\nexport interface FlickHat_DoubleTap {\r\n  action: \"doubletap\";\r\n  positions: FlickHat_Direction2[];\r\n  seq: number;\r\n  raw: any;\r\n}\r\n\r\nexport interface FlickHat_AirWheel {\r\n  delta: number;\r\n  rotation: number;\r\n  seq: number;\r\n  raw: any;\r\n}\r\n\r\nexport default class FlickHat implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"FlickHat\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public displayIoNames: any;\r\n  public params: any;\r\n\r\n  public address: any;\r\n  public io_reset: any;\r\n  public io_ts: any;\r\n  public i2c!: PeripheralI2C;\r\n  public led1: any;\r\n  public led2: any;\r\n  public onfwinfo?: (fwInfo: any) => void;\r\n  public fwInfo: any;\r\n  public rotation: any;\r\n  public lastRotation: any;\r\n  public readSize: any;\r\n  public debugprint: any;\r\n  public xyz: any;\r\n  public onxyz?: (xyz: FlickHat_XYZ) => void;\r\n  public lastGesture: any;\r\n  public ongestureall: any;\r\n  public ongesture?: (gesture: FlickHat_Gesture) => void;\r\n  public lastTouch: any;\r\n  public ontouch?: (touch: FlickHat_Touch) => void;\r\n  public ontap?: ((tap: FlickHat_Tap) => void);\r\n  public ondoubletap: any;\r\n  public onairwheel?: (airwheel: FlickHat_AirWheel) => void ;\r\n  public statusInfo: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"reset\", \"ts\", \"led1\", \"led2\"];\r\n    this.requiredKeys = [\"gnd\", \"sda\", \"scl\", \"reset\", \"ts\"];\r\n\r\n    this.displayIoNames = {\r\n      // vcc: 'vcc', //5v\r\n      sda: \"sda\",\r\n      scl: \"scl\",\r\n      gnd: \"gnd\",\r\n      reset: \"reset\",\r\n      ts: \"ts\",\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.address = 0x42;\r\n\r\n    if (this.obniz.isValidIO(this.params.vcc)) {\r\n      this.obniz.getIO(this.params.vcc).drive(\"5v\");\r\n      this.obniz.getIO(this.params.vcc).output(true);\r\n    }\r\n    this.obniz.getIO(this.params.gnd).output(false);\r\n\r\n    this.io_reset = this.obniz.getIO(this.params.reset);\r\n    this.io_reset.drive(\"3v\");\r\n\r\n    this.io_ts = this.obniz.getIO(this.params.ts);\r\n    this.io_ts.drive(\"open-drain\");\r\n    this.io_ts.pull(\"3v\");\r\n\r\n    this.params.mode = \"master\";\r\n    this.params.pull = \"3v\";\r\n    this.params.clock = 100 * 1000; // 100KHz\r\n\r\n    // PeripheralI2C\r\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\r\n\r\n    if (this.obniz.isValidIO(this.params.led1)) {\r\n      this.led1 = this.obniz.wired(\"LED\", {anode: this.params.led1});\r\n    }\r\n    if (this.obniz.isValidIO(this.params.led2)) {\r\n      this.led2 = this.obniz.wired(\"LED\", {anode: this.params.led2});\r\n    }\r\n  }\r\n\r\n  public async start(callback: (fwInfo: any) => void): Promise<void> {\r\n    this.io_ts.pull(\"3v\");\r\n\r\n    this.io_reset.output(false);\r\n    await this.obniz.wait(50);\r\n    this.io_reset.output(true);\r\n    await this.obniz.wait(50);\r\n\r\n    this.onfwinfo = callback;\r\n    this.fwInfo = {\r\n      fwValid: 0,\r\n      fwInfoReceived: false,\r\n    };\r\n    this.rotation = 0;\r\n    this.lastRotation = 0;\r\n    this.readSize = 132;\r\n\r\n    await this.polling();\r\n    await this.obniz.wait(200);\r\n\r\n    this.i2c.write(this.address, [\r\n      0x10,\r\n      0x00,\r\n      0x00,\r\n      0xa2,\r\n      0xa1,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x1f,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0xff,\r\n      0xff,\r\n      0xff,\r\n      0xff,\r\n    ]);\r\n    await this.obniz.wait(100);\r\n\r\n    this.i2c.write(this.address, [\r\n      0x10,\r\n      0x00,\r\n      0x00,\r\n      0xa2,\r\n      0x80,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x3f,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n      0x3f,\r\n      0x00,\r\n      0x00,\r\n      0x00,\r\n    ]);\r\n  }\r\n\r\n  public _dataArray2string(data: any) {\r\n    let result: any = \"\";\r\n    for (const n of data) {\r\n      result += String.fromCharCode(n);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public async polling(timeout?: any) {\r\n    timeout = timeout || 3000; // default: 3s\r\n\r\n    // DataOutputConfigMask\t2byte\r\n    // const maskDSPStatus = 1;\r\n    const maskGestureInfo: any = 1 << 1;\r\n    const maskTouchInfo: any = 1 << 2;\r\n    const maskAirWheelInfo: any = 1 << 3;\r\n    const maskXYZPosition: any = 1 << 4;\r\n\r\n    // SystemInfo\t1byte\r\n    const sysPositionValid: any = 1;\r\n    const sysAirWheelValid: any = 1 << 1;\r\n    // const sysDSPRunning = 1 << 7;\r\n\r\n    const startTime: any = new Date();\r\n    let ts: any = true;\r\n    while (ts && (new Date() as any) - startTime < timeout) {\r\n      ts = await this.io_ts.inputWait();\r\n    }\r\n    if (!ts) {\r\n      this.io_ts.pull(\"0v\");\r\n      // await this.obniz.wait(1);\r\n\r\n      const data: any = await this.i2c.readWait(this.address, this.readSize);\r\n      const size: any = data[0];\r\n      // let flag = data[1];\r\n      const seq: any = data[2];\r\n      const msgID: any = data[3];\r\n\r\n      if (size !== 0xff && size > 0) {\r\n        if (this.debugprint || this.obniz.debugprint) {\r\n          console.log(\r\n            \"flickHat: \" + data.slice(0, size).map((v: any) => \"0x\" + v.toString(16)),\r\n          );\r\n        }\r\n        let configmask: any;\r\n        let sysinfo: any;\r\n        let gesture: any;\r\n        let touch: any;\r\n        let airwheel: any;\r\n        let statusInfo: any;\r\n        let fwInfo: any;\r\n        switch (msgID) {\r\n          case 0x91: // sensor data output\r\n            configmask = data[4] | (data[5] << 8); // little endian\r\n            // let timestamp = data[6]; // 200hz, 8-bit counter, max ~1.25sec\r\n            sysinfo = data[7];\r\n            // let dspstatus = data.slice(8, 10);\r\n            gesture = data.slice(10, 14);\r\n            touch = data.slice(14, 18);\r\n            airwheel = data.slice(18, 20);\r\n            // let xyz = data.slice(20, 26);\r\n            // let noisepow = data.slice(27, 30);\r\n            if (\r\n              gesture[0] === 255 &&\r\n              gesture[1] === 255 &&\r\n              gesture[2] === 255 &&\r\n              gesture[3] === 255\r\n            ) {\r\n              break;\r\n            }\r\n\r\n            if (configmask & maskXYZPosition && sysinfo & sysPositionValid) {\r\n              const xyz: any = {\r\n                // little endian\r\n                x: (data[20] | (data[21] << 8)) / 65536,\r\n                y: (data[22] | (data[23] << 8)) / 65536,\r\n                z: (data[24] | (data[25] << 8)) / 65536,\r\n                seq,\r\n              };\r\n              this.xyz = xyz;\r\n              if (typeof this.onxyz === \"function\") {\r\n                this.onxyz(xyz);\r\n              }\r\n            }\r\n\r\n            if (configmask & maskGestureInfo && gesture[0] > 0) {\r\n              this.lastGesture = gesture[0];\r\n              const gestures: any = [\r\n                [\"\", \"\", \"\"], // no gesture\r\n                [\"garbage\", \"\", \"\"],\r\n                [\"flick\", \"west\", \"east\"], // 2\r\n                [\"flick\", \"east\", \"west\"], // 3\r\n                [\"flick\", \"south\", \"north\"], // 4\r\n                [\"flick\", \"north\", \"south\"], // 5\r\n                [\"circle\", \"clockwise\", \"\"],\r\n                [\"circle\", \"counter-clockwise\", \"\"],\r\n                [\"wave\", \"x\", \"\"],\r\n                [\"wave\", \"y\", \"\"],\r\n                [\"hold\", \"\", \"\"],\r\n              ];\r\n              for (const index in gestures) {\r\n                if (\r\n                  index === gesture[0] &&\r\n                  typeof this.ongestureall === \"function\"\r\n                ) {\r\n                  this.ongestureall({\r\n                    action: gestures[index][0],\r\n                    from: gestures[index][1],\r\n                    to: gestures[index][2],\r\n                    raw: gesture,\r\n                    seq,\r\n                  });\r\n                }\r\n                if (\r\n                  index === gesture[0] &&\r\n                  gestures[index][0] === \"flick\" &&\r\n                  typeof this.ongesture === \"function\"\r\n                ) {\r\n                  this.ongesture({\r\n                    action: \"gesture\",\r\n                    from: gestures[index][1],\r\n                    to: gestures[index][2],\r\n                    raw: gesture,\r\n                    seq,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              configmask & maskTouchInfo &&\r\n              !(touch[0] === 0 && touch[1] === 0) &&\r\n              touch[3] === 0\r\n            ) {\r\n              // console.log('touch: ' + touch.map(v => '0x' + v.toString(16)));\r\n              const touchAction: any = touch[0] | (touch[1] << 8); // little endian\r\n              if (touchAction === 0xffff) {\r\n                break;\r\n              }\r\n              // let touchCount = touch[2] * 5; // touch counter value * 5[ms]\r\n              const actions: any = [\r\n                [\"touch\", \"south\"], // 0\r\n                [\"touch\", \"west\"], // 1\r\n                [\"touch\", \"north\"], // 2\r\n                [\"touch\", \"east\"], // 3\r\n                [\"touch\", \"center\"], // 4\r\n                [\"tap\", \"south\"], // 5\r\n                [\"tap\", \"west\"], // 6\r\n                [\"tap\", \"north\"], // 7\r\n                [\"tap\", \"east\"], // 8\r\n                [\"tap\", \"center\"], // 9\r\n                [\"doubletap\", \"south\"], // 10\r\n                [\"doubletap\", \"west\"], // 11\r\n                [\"doubletap\", \"north\"], // 12\r\n                [\"doubletap\", \"east\"], // 13\r\n                [\"doubletap\", \"center\"], // 14\r\n              ];\r\n\r\n              const touches: any = [];\r\n              const taps: any = [];\r\n              const doubletaps: any = [];\r\n              this.lastTouch = touchAction;\r\n\r\n              let comp: any = 1;\r\n              for (const index in actions) {\r\n                const value: any = actions[index];\r\n                if (touchAction & comp) {\r\n                  // console.log(`touchAction:${touchAction.toString(16)}, comp:${comp.toString(16)}, index:${index}, group:${group}`);\r\n                  switch (value[0]) {\r\n                    case \"touch\":\r\n                      touches.push(value[1]);\r\n                      break;\r\n                    case \"tap\":\r\n                      taps.push(value[1]);\r\n                      break;\r\n                    case \"doubletap\":\r\n                      doubletaps.push(value[1]);\r\n                      break;\r\n                    default:\r\n                  }\r\n                }\r\n                comp <<= 1;\r\n              }\r\n\r\n              if (touches.length > 0 && typeof this.ontouch === \"function\") {\r\n                this.ontouch({\r\n                  action: \"touch\",\r\n                  positions: touches,\r\n                  raw: touch,\r\n                  seq,\r\n                });\r\n              }\r\n\r\n              if (taps.length > 0 && typeof this.ontap === \"function\") {\r\n                this.ontap({\r\n                  action: \"tap\",\r\n                  positions: taps,\r\n                  raw: touch,\r\n                  seq,\r\n                });\r\n              }\r\n\r\n              if (\r\n                doubletaps.length > 0 &&\r\n                typeof this.ondoubletap === \"function\"\r\n              ) {\r\n                this.ondoubletap({\r\n                  action: \"doubletap\",\r\n                  positions: doubletaps,\r\n                  raw: touch,\r\n                  seq,\r\n                });\r\n              }\r\n            }\r\n\r\n            if (configmask & maskAirWheelInfo && sysinfo & sysAirWheelValid) {\r\n              const delta: any = (airwheel[0] - this.lastRotation) / 32.0;\r\n              this.rotation += delta * 360.0;\r\n              this.rotation %= 360;\r\n              if (delta !== 0 && delta > -0.5 && delta < 0.5) {\r\n                if (typeof this.onairwheel === \"function\") {\r\n                  this.onairwheel({\r\n                    delta: delta * 360.0,\r\n                    rotation: this.rotation,\r\n                    raw: airwheel,\r\n                    seq,\r\n                  });\r\n                }\r\n              }\r\n              this.lastRotation = airwheel[0];\r\n            }\r\n            break;\r\n\r\n          case 0x15: // system status\r\n            statusInfo = {\r\n              msgId: data[4],\r\n              maxCmdSize: data[5],\r\n              error: data[6] | (data[7] << 8), // little endian\r\n            };\r\n            this.statusInfo = statusInfo;\r\n            if (this.debugprint || this.obniz.debugprint) {\r\n              console.log(\r\n                `flickHat: system status: {msgId: ${\r\n                  statusInfo.msgId\r\n                }, maxCmdSize: ${statusInfo.maxCmdSize}, error: ${\r\n                  statusInfo.error\r\n                }}`,\r\n              );\r\n            }\r\n            break;\r\n\r\n          case 0x83: // farmware information\r\n            fwInfo = {\r\n              fwValid: data[4] === 0xaa,\r\n              hwRev: [data[5], data[6]],\r\n              paramStartAddr: data[7] * 128,\r\n              libLoaderVer: [data[8], data[9]],\r\n              libLoaderPlatform: data[10],\r\n              fwStartAddr: data[11] * 128,\r\n              fwVersion: this._dataArray2string(data.slice(12, 132)).split(\r\n                \"\\0\",\r\n              )[0],\r\n              fwInfoReceived: true,\r\n            };\r\n            this.fwInfo = fwInfo;\r\n            if (typeof this.onfwinfo === \"function\") {\r\n              this.onfwinfo(fwInfo);\r\n            }\r\n            this.readSize = 26;\r\n            break;\r\n\r\n          default:\r\n            console.error(\r\n              `unknown message: 0x${msgID.toString(16)}, data:${data\r\n                .slice(0, size)\r\n                .map((v: any) => \"0x\" + v.toString(16))}`,\r\n            );\r\n        }\r\n      }\r\n\r\n      this.io_ts.pull(\"3v\");\r\n      // await this.obniz.wait(1);\r\n    }\r\n  }\r\n}\r\n"]}