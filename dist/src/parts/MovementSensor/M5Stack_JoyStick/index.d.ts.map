{"version":3,"sources":["../src/parts/MovementSensor/M5Stack_JoyStick/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,uBAAuB;IACpC,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;CACf;AAED,MAAM,CAAC,OAAO,OAAO,gBAAiB,YAAW,mBAAmB;WAElD,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAcZ,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;IAK3B,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;IAK3B,aAAa,IAAI,OAAO,CAAC,OAAO,CAAC;CAIjD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface M5Stack_JoyStickOptions {\n    vcc: number;\n    gnd: number;\n    sda: number;\n    scl: number;\n}\n\nexport default class M5Stack_JoyStick implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5Stack_JoyStick\",\n        };\n    }\n\n    public requiredKeys: string[];\n    public keys: string[];\n    public params: any;\n\n    protected obniz!: Obniz;\n    protected i2c!: PeripheralI2C;\n\n    constructor() {\n        this.requiredKeys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n        this.obniz.wait(100); // wait for booting of MEGA328\n        this.i2c = this.obniz.getFreeI2C();\n        this.i2c.start({\n            mode: \"master\",\n            sda: this.params.sda,\n            scl: this.params.scl,\n            clock: 400000,\n            pull: \"5v\",\n        });\n    }\n\n    public async getXWait(): Promise<number> {\n        const ret = await this.i2c.readWait(0x52, 3);\n        return ret[0];\n    }\n\n    public async getYWait(): Promise<number> {\n        const ret = await this.i2c.readWait(0x52, 3);\n        return ret[1];\n    }\n\n    public async isPressedWait(): Promise<boolean> {\n        const ret = await this.i2c.readWait(0x52, 3);\n        return Boolean(ret[2]);\n    }\n}\n"]}