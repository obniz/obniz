{"version":3,"sources":["../src/parts/MovementSensor/KXSC7-2050/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,iBAAiB;CAAI;AAEtC,MAAM,CAAC,OAAO,OAAO,UAAW,YAAW,mBAAmB;WAE9C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,SAAS,EAAE,GAAG,CAAC;IACf,SAAS,EAAE,GAAG,CAAC;;IAOT,KAAK,CAAC,KAAK,EAAE,GAAG;CAqC9B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface KXSC7_2050Options { }\r\n\r\nexport default class KXSC7_2050 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"KXSC7-2050\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public ad_x: any;\r\n  public ad_y: any;\r\n  public ad_z: any;\r\n  public gravity: any;\r\n  public onchangex: any;\r\n  public onchangey: any;\r\n  public onchangez: any;\r\n\r\n  constructor() {\r\n    this.keys = [\"x\", \"y\", \"z\", \"vcc\", \"gnd\"];\r\n    this.requiredKeys = [\"x\", \"y\", \"z\"];\r\n  }\r\n\r\n  public async wired(obniz: any) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"3v\");\r\n    this.ad_x = obniz.getAD(this.params.x);\r\n    this.ad_y = obniz.getAD(this.params.y);\r\n    this.ad_z = obniz.getAD(this.params.z);\r\n\r\n    await obniz.wait(500);\r\n    const ad: any = obniz.getAD(this.params.vcc);\r\n    const pwrVoltage: any = await ad.getWait();\r\n    const horizontalZ: any = await this.ad_z.getWait();\r\n    const sensitivity: any = pwrVoltage / 5; // Set sensitivity (unit:V)\r\n    const offsetVoltage: any = horizontalZ - sensitivity; // Set offset voltage (Output voltage at 0g, unit:V)\r\n\r\n    const self: any = this;\r\n    this.ad_x.start((value: any) => {\r\n      self.gravity = (value - offsetVoltage) / sensitivity;\r\n      if (self.onchangex) {\r\n        self.onchangex(self.gravity);\r\n      }\r\n    });\r\n\r\n    this.ad_y.start((value: any) => {\r\n      self.gravity = (value - offsetVoltage) / sensitivity;\r\n      if (self.onchangey) {\r\n        self.onchangey(self.gravity);\r\n      }\r\n    });\r\n\r\n    this.ad_z.start((value: any) => {\r\n      self.gravity = (value - offsetVoltage) / sensitivity;\r\n      if (self.onchangez) {\r\n        self.onchangez(self.gravity);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}