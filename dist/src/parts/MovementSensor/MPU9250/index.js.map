{"version":3,"sources":["../src/parts/MovementSensor/MPU9250/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../i2cParts\";\nimport AK8963 from \"../AK8963\";\nimport MPU6050 from \"../MPU6050\";\n\nexport interface MPU9250Options extends I2cPartsAbstructOptions {\n  gnd?: number;\n  vcc?: number;\n  address?: number;\n}\n\nclass MPU9250 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MPU9250\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public _address: any;\n  public mpu6050!: MPU6050;\n  public ak8963!: AK8963;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"address\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this._address = this.params.address || 0x68;\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    this.i2c.write(this._address, [0x6b, 0x00]); // activate MPU9250\n    this.i2c.write(this._address, [0x37, 0x02]); // activate AK8963 (bypass)\n    this.i2c.write(this._address, [0x1a, 0x06]); // activate LPF (search datasheet_p.13)\n    this.i2c.write(this._address, [0x1d, 0x02]); // accel LPF set.\n\n    this.mpu6050 = obniz.wired(\"MPU6050\", {i2c: this.i2c});\n    this.ak8963 = obniz.wired(\"AK8963\", {i2c: this.i2c});\n  }\n\n  public setConfig(accel_range: any, gyro_range: any, ADC_cycle: any) {\n    this.mpu6050.setConfig(accel_range, gyro_range);\n    this.ak8963.setConfig(ADC_cycle);\n  }\n\n  public async _getAK8963Wait() {\n    await this.i2c.write(this._address, [0x02]); // request AK8983 data\n    const ST1: any = await this.i2c.readWait(this._address, 1); // confirm magnet value readable\n    if (ST1 & 0x01) {\n      return await this.ak8963.getWait();\n    }\n    return {};\n  }\n\n  public async getAllWait(): Promise<{\n    accelerometer: {\n      x: number,\n      y: number,\n      z: number,\n    },\n    temp: number,\n    gyroscope: {\n      x: number,\n      y: number,\n      z: number,\n    },\n    compass: {\n      x: number,\n      y: number,\n      z: number,\n    },\n  }> {\n    const data: any = await this.mpu6050.getWait();\n    data.compass = await this.ak8963.getWait();\n    return data;\n  }\n\n  public async getCompassWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return await this.ak8963.getWait();\n  }\n\n  public async getAccelerometerWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return (await this.mpu6050.getWait()).accelerometer;\n  }\n\n  public async getGyroscopeWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return (await this.mpu6050.getWait()).gyroscope;\n  }\n}\n\nexport default MPU9250;\n"]}