{"version":3,"sources":["../src/parts/MovementSensor/MPU9250/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AACvF,OAAO,EAAC,uBAAuB,EAAC,MAAM,gBAAgB,CAAC;AACvD,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,OAAO,OAAO,MAAM,YAAY,CAAC;AAEjC,MAAM,WAAW,cAAe,SAAQ,uBAAuB;IAC7D,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,cAAM,OAAQ,YAAW,mBAAmB;WAE5B,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAG,OAAO,CAAC;IAClB,MAAM,EAAG,MAAM,CAAC;IAEvB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkBlB,SAAS,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAKrD,cAAc;IASd,UAAU,IAAI,OAAO,CAAC;QACjC,aAAa,EAAE;YACb,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;QACF,IAAI,EAAE,MAAM,CAAC;QACb,SAAS,EAAE;YACT,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;QACF,OAAO,EAAE;YACP,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;KACH,CAAC;IAMW,cAAc,IAAI,OAAO,CAAC;QACrC,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;IAIW,oBAAoB,IAAI,OAAO,CAAC;QAC3C,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;IAIW,gBAAgB,IAAI,OAAO,CAAC;QACvC,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;CAGH;AAED,eAAe,OAAO,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../i2cParts\";\r\nimport AK8963 from \"../AK8963\";\r\nimport MPU6050 from \"../MPU6050\";\r\n\r\nexport interface MPU9250Options extends I2cPartsAbstructOptions {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  address?: number;\r\n}\r\n\r\nclass MPU9250 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"MPU9250\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n  public _address: any;\r\n  public mpu6050!: MPU6050;\r\n  public ak8963!: AK8963;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"address\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this._address = this.params.address || 0x68;\r\n    this.params.clock = 100000;\r\n    this.params.pull = \"3v\";\r\n    this.params.mode = \"master\";\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n\r\n    this.i2c.write(this._address, [0x6b, 0x00]); // activate MPU9250\r\n    this.i2c.write(this._address, [0x37, 0x02]); // activate AK8963 (bypass)\r\n    this.i2c.write(this._address, [0x1a, 0x06]); // activate LPF (search datasheet_p.13)\r\n    this.i2c.write(this._address, [0x1d, 0x02]); // accel LPF set.\r\n\r\n    this.mpu6050 = obniz.wired(\"MPU6050\", {i2c: this.i2c});\r\n    this.ak8963 = obniz.wired(\"AK8963\", {i2c: this.i2c});\r\n  }\r\n\r\n  public setConfig(accel_range: any, gyro_range: any, ADC_cycle: any) {\r\n    this.mpu6050.setConfig(accel_range, gyro_range);\r\n    this.ak8963.setConfig(ADC_cycle);\r\n  }\r\n\r\n  public async _getAK8963Wait() {\r\n    await this.i2c.write(this._address, [0x02]); // request AK8983 data\r\n    const ST1: any = await this.i2c.readWait(this._address, 1); // confirm magnet value readable\r\n    if (ST1 & 0x01) {\r\n      return await this.ak8963.getWait();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  public async getAllWait(): Promise<{\r\n    accelerometer: {\r\n      x: number,\r\n      y: number,\r\n      z: number,\r\n    },\r\n    temp: number,\r\n    gyroscope: {\r\n      x: number,\r\n      y: number,\r\n      z: number,\r\n    },\r\n    compass: {\r\n      x: number,\r\n      y: number,\r\n      z: number,\r\n    },\r\n  }> {\r\n    const data: any = await this.mpu6050.getWait();\r\n    data.compass = await this.ak8963.getWait();\r\n    return data;\r\n  }\r\n\r\n  public async getCompassWait(): Promise<{\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n  }> {\r\n    return await this.ak8963.getWait();\r\n  }\r\n\r\n  public async getAccelerometerWait(): Promise<{\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n  }> {\r\n    return (await this.mpu6050.getWait()).accelerometer;\r\n  }\r\n\r\n  public async getGyroscopeWait(): Promise<{\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n  }> {\r\n    return (await this.mpu6050.getWait()).gyroscope;\r\n  }\r\n}\r\n\r\nexport default MPU9250;\r\n"]}