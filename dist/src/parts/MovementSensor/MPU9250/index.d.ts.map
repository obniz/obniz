{"version":3,"sources":["../src/parts/MovementSensor/MPU9250/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AACvF,OAAO,EAAC,uBAAuB,EAAC,MAAM,gBAAgB,CAAC;AACvD,OAAO,MAAM,MAAM,WAAW,CAAC;AAC/B,OAAO,OAAO,MAAM,YAAY,CAAC;AAEjC,MAAM,WAAW,cAAe,SAAQ,uBAAuB;IAC7D,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,cAAM,OAAQ,YAAW,mBAAmB;WAE5B,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAG,OAAO,CAAC;IAClB,MAAM,EAAG,MAAM,CAAC;IAEvB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkBlB,SAAS,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAKrD,cAAc;IASd,UAAU,IAAI,OAAO,CAAC;QACjC,aAAa,EAAE;YACb,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;QACF,IAAI,EAAE,MAAM,CAAC;QACb,SAAS,EAAE;YACT,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;QACF,OAAO,EAAE;YACP,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;YACV,CAAC,EAAE,MAAM,CAAC;SACX,CAAC;KACH,CAAC;IAMW,cAAc,IAAI,OAAO,CAAC;QACrC,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;IAIW,oBAAoB,IAAI,OAAO,CAAC;QAC3C,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;IAIW,gBAAgB,IAAI,OAAO,CAAC;QACvC,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;CAGH;AAED,eAAe,OAAO,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../i2cParts\";\nimport AK8963 from \"../AK8963\";\nimport MPU6050 from \"../MPU6050\";\n\nexport interface MPU9250Options extends I2cPartsAbstructOptions {\n  gnd?: number;\n  vcc?: number;\n  address?: number;\n}\n\nclass MPU9250 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MPU9250\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public _address: any;\n  public mpu6050!: MPU6050;\n  public ak8963!: AK8963;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"address\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this._address = this.params.address || 0x68;\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    this.i2c.write(this._address, [0x6b, 0x00]); // activate MPU9250\n    this.i2c.write(this._address, [0x37, 0x02]); // activate AK8963 (bypass)\n    this.i2c.write(this._address, [0x1a, 0x06]); // activate LPF (search datasheet_p.13)\n    this.i2c.write(this._address, [0x1d, 0x02]); // accel LPF set.\n\n    this.mpu6050 = obniz.wired(\"MPU6050\", {i2c: this.i2c});\n    this.ak8963 = obniz.wired(\"AK8963\", {i2c: this.i2c});\n  }\n\n  public setConfig(accel_range: any, gyro_range: any, ADC_cycle: any) {\n    this.mpu6050.setConfig(accel_range, gyro_range);\n    this.ak8963.setConfig(ADC_cycle);\n  }\n\n  public async _getAK8963Wait() {\n    await this.i2c.write(this._address, [0x02]); // request AK8983 data\n    const ST1: any = await this.i2c.readWait(this._address, 1); // confirm magnet value readable\n    if (ST1 & 0x01) {\n      return await this.ak8963.getWait();\n    }\n    return {};\n  }\n\n  public async getAllWait(): Promise<{\n    accelerometer: {\n      x: number,\n      y: number,\n      z: number,\n    },\n    temp: number,\n    gyroscope: {\n      x: number,\n      y: number,\n      z: number,\n    },\n    compass: {\n      x: number,\n      y: number,\n      z: number,\n    },\n  }> {\n    const data: any = await this.mpu6050.getWait();\n    data.compass = await this.ak8963.getWait();\n    return data;\n  }\n\n  public async getCompassWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return await this.ak8963.getWait();\n  }\n\n  public async getAccelerometerWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return (await this.mpu6050.getWait()).accelerometer;\n  }\n\n  public async getGyroscopeWait(): Promise<{\n    x: number,\n    y: number,\n    z: number,\n  }> {\n    return (await this.mpu6050.getWait()).gyroscope;\n  }\n}\n\nexport default MPU9250;\n"]}