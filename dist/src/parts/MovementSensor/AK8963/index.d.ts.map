{"version":3,"sources":["../src/parts/MovementSensor/AK8963/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,QAAQ,CAAM;IACtB,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,UAAU,CAAK;;IAOhB,KAAK,CAAC,KAAK,EAAE,KAAK;IAWlB,SAAS,CAAC,SAAS,EAAE,MAAM;IAcrB,OAAO,IAAI,OAAO,CAAC;QAC9B,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;QACV,CAAC,EAAE,MAAM,CAAC;KACX,CAAC;IAUK,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAOjD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface AK8963Options {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  sda?: number;\r\n  scl?: number;\r\n  i2c?: PeripheralI2C;\r\n  address?: number;\r\n  adb_cycle?: number;\r\n}\r\n\r\nexport default class AK8963 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AK8963\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private _address: any;\r\n  private i2c!: PeripheralI2C;\r\n  private _adc_cycle = 0;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"address\", \"adb_cycle\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.params.clock = 100000;\r\n    this.params.pull = \"3v\";\r\n    this.params.mode = \"master\";\r\n    this._address = this.params.address || 0x0c;\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.setConfig(this.params.adc_cycle || 8);\r\n  }\r\n\r\n  public setConfig(ADC_cycle: number) {\r\n    switch (ADC_cycle) {\r\n      case 8:\r\n        this.i2c.write(this._address, [0x0a, 0x12]);\r\n        break;\r\n      case 100:\r\n        this.i2c.write(this._address, [0x0a, 0x16]);\r\n        break;\r\n      default:\r\n        throw new Error(\"ADC_cycle variable 8,100 setting\");\r\n    }\r\n    this._adc_cycle = ADC_cycle;\r\n  }\r\n\r\n  public async getWait(): Promise<{\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n  }> {\r\n    this.i2c.write(this._address, [0x03]); // request AK8963 data\r\n    const raw_data_AK8963 = await this.i2c.readWait(this._address, 7); // read 7byte(read mag_data[6] to refresh)\r\n    return {\r\n      x: this.char2short(raw_data_AK8963[0], raw_data_AK8963[1]),\r\n      y: this.char2short(raw_data_AK8963[2], raw_data_AK8963[3]),\r\n      z: this.char2short(raw_data_AK8963[4], raw_data_AK8963[5]),\r\n    };\r\n  }\r\n\r\n  public char2short(valueH: number, valueL: number) {\r\n    const buffer = new ArrayBuffer(2);\r\n    const dv = new DataView(buffer);\r\n    dv.setUint8(0, valueH);\r\n    dv.setUint8(1, valueL);\r\n    return dv.getInt16(0, false);\r\n  }\r\n}\r\n"]}