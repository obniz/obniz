{"version":3,"sources":["../src/parts/Logic/SNx4HC595/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAkBvF,MAAM,WAAW,gBAAgB;IAC/B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;IACd,IAAI,EAAE,MAAM,CAAC;IACb,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,OAAO,CAAC,EAAE,OAAO,CAAC;CACnB;AAGD,MAAM,CAAC,OAAO,OAAO,SAAU,YAAW,mBAAmB;WAE7C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,SAAS,EAAE,GAAG,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,MAAM,CAAgB;IAC9B,OAAO,CAAC,QAAQ,CAAgB;IAChC,OAAO,CAAC,OAAO,CAAgB;IAC/B,OAAO,CAAC,QAAQ,CAAC,CAAe;IAChC,OAAO,CAAC,KAAK,CAAC,CAAe;IAC7B,OAAO,CAAC,IAAI,CAAM;IAClB,OAAO,CAAC,EAAE,CAAM;IAChB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,OAAO,CAAM;IACrB,OAAO,CAAC,EAAE,CAAM;;IAoBT,KAAK,CAAC,KAAK,EAAE,KAAK;IA2ClB,KAAK,CAAC,GAAG,EAAE,MAAM;IAcjB,SAAS,CAAC,EAAE,EAAE,MAAM;IAIpB,KAAK,CAAC,EAAE,EAAE,MAAM;IAOhB,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAQ1B,KAAK,CAAC,SAAS,EAAE,GAAG;IAWpB,SAAS,CAAC,MAAM,EAAE,OAAO;IAOzB,KAAK;CAUb","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nclass SNx4HC595_IO {\n  public chip: any;\n  public id: any;\n  public value: any;\n\n  constructor(chip: any, id: any) {\n    this.chip = chip;\n    this.id = id;\n    this.value = 0;\n  }\n\n  public output(value: any) {\n    this.chip.output(this.id, value);\n  }\n}\n\nexport interface SNx4HC595Options {\n  gnd?: number;\n  vcc?: number;\n  ser: number;\n  srclk: number;\n  rclk: number;\n  oe?: number;\n  srclr?: number;\n  io_num?: number;\n  enabled?: boolean;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport default class SNx4HC595 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"SNx4HC595\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public autoFlash: any;\n  public params: any;\n\n  protected obniz!: Obniz;\n\n  private io_ser!: PeripheralIO;\n  private io_srclk!: PeripheralIO;\n  private io_rclk!: PeripheralIO;\n  private io_srclr?: PeripheralIO;\n  private io_oe?: PeripheralIO;\n  private chip: any;\n  private id: any;\n  private value: any;\n  private _io_num: any;\n  private io: any;\n\n  constructor() {\n    /* http://www.ti.com/lit/ds/symlink/sn74hc595.pdf */\n    this.keys = [\n      \"gnd\",\n      \"vcc\",\n      \"ser\",\n      \"srclk\",\n      \"rclk\",\n      \"oe\",\n      \"srclr\",\n      \"io_num\",\n      \"enabled\",\n    ];\n    this.requiredKeys = [\"ser\", \"srclk\", \"rclk\"];\n\n    this.autoFlash = true;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.io_ser = this.obniz.getIO(this.params.ser);\n    this.io_srclk = this.obniz.getIO(this.params.srclk);\n    this.io_rclk = this.obniz.getIO(this.params.rclk);\n\n    this.io_ser.output(false);\n    this.io_srclk.output(false);\n    this.io_rclk.output(false);\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    if (this.obniz.isValidIO(this.params.srclr)) {\n      this.io_srclr = this.obniz.getIO(this.params.srclr);\n      this.io_srclr.output(true);\n    }\n\n    if (this.obniz.isValidIO(this.params.oe)) {\n      this.io_oe = this.obniz.getIO(this.params.oe);\n      this.io_oe.output(true);\n    }\n\n    if (\n      this.obniz.isValidIO(this.params.vcc) ||\n      this.obniz.isValidIO(this.params.gnd)\n    ) {\n      this.obniz.wait(100);\n    }\n\n    if (typeof this.params.io_num !== \"number\") {\n      this.params.io_num = 8;\n    }\n    this.ioNum(this.params.io_num);\n\n    if (typeof this.params.enabled !== \"boolean\") {\n      this.params.enabled = true;\n    }\n    if (this.io_oe && this.params.enabled) {\n      this.io_oe.output(false);\n    }\n  }\n\n  public ioNum(num: number) {\n\n    if (typeof num === \"number\" && this._io_num !== num) {\n      this._io_num = num;\n      this.io = [];\n      for (let i = 0; i < num; i++) {\n        this.io.push(new SNx4HC595_IO(this, i));\n      }\n      this.flush();\n    } else {\n      throw new Error(\"io num should be a number\");\n    }\n  }\n\n  public isValidIO(io: number) {\n    return typeof io === \"number\" && io >= 0 && io < this._io_num;\n  }\n\n  public getIO(io: number) {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"io \" + io + \" is not valid io\");\n    }\n    return this.io[io];\n  }\n\n  public output(id: any, value: any) {\n    value = value === true;\n    this.io[id].value = value;\n    if (this.autoFlash) {\n      this.flush();\n    }\n  }\n\n  public onece(operation: any) {\n    if (typeof operation !== \"function\") {\n      throw new Error(\"please provide function\");\n    }\n    const lastValue: any = this.autoFlash;\n    this.autoFlash = false;\n    operation();\n    this.flush();\n    this.autoFlash = lastValue;\n  }\n\n  public setEnable(enable: boolean) {\n    if (!this.io_oe && enable === false) {\n      throw new Error('pin \"oe\" is not specified');\n    }\n    this.io_oe!.output(!enable);\n  }\n\n  public flush() {\n    /* this code will works with 5v. But you should pay more attention when 3v. Timing is more tight. see chip reference */\n    this.io_rclk.output(false);\n    for (let i = this.io.length - 1; i >= 0; i--) {\n      this.io_ser.output(this.io[i].value);\n      this.io_srclk.output(true);\n      this.io_srclk.output(false);\n    }\n    this.io_rclk.output(true);\n  }\n}\n"]}