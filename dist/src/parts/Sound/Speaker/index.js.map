{"version":3,"sources":["../src/parts/Sound/Speaker/index.ts"],"names":[],"mappings":";;AAUA,MAAqB,OAAO;IAgB1B,YAAY,KAAU;QACpB,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAjBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAeM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,IAAI,CAAC,SAAiB;QAC3B,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY;QAC/C,IAAI,SAAS,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACnB;IACH,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACf,CAAC;CACF;AA5CD,0BA4CC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface SpeakerOptions {\r\n  signal: number;\r\n  gnd?: number;\r\n}\r\n\r\nexport default class Speaker implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Speaker\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private pwm!: PeripheralPWM;\r\n\r\n  constructor(obniz: any) {\r\n    this.keys = [\"signal\", \"gnd\"];\r\n    this.requiredKeys = [\"signal\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(null, this.params.gnd, \"5v\");\r\n    this.pwm = obniz.getFreePwm();\r\n    this.pwm.start({io: this.params.signal});\r\n  }\r\n\r\n  public play(frequency: number) {\r\n    if (typeof frequency !== \"number\") {\r\n      throw new Error(\"freq must be a number\");\r\n    }\r\n    frequency = Math.floor(frequency); // temporary\r\n    if (frequency > 0) {\r\n      this.pwm.freq(frequency);\r\n      this.pwm.pulse((1 / frequency / 2) * 1000);\r\n    } else {\r\n      this.pwm.pulse(0);\r\n    }\r\n  }\r\n\r\n  public stop() {\r\n    this.play(0);\r\n  }\r\n}\r\n"]}