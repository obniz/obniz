{"version":3,"sources":["../src/parts/Sound/Speaker/index.ts"],"names":[],"mappings":";;AAUA,MAAqB,OAAO;IAgB1B,YAAY,KAAU;QACpB,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAjBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAeM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,IAAI,CAAC,SAAiB;QAC3B,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY;QAC/C,IAAI,SAAS,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACnB;IACH,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACf,CAAC;CACF;AA5CD,0BA4CC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface SpeakerOptions {\n  signal: number;\n  gnd?: number;\n}\n\nexport default class Speaker implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Speaker\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  protected obniz!: Obniz;\n\n  private pwm!: PeripheralPWM;\n\n  constructor(obniz: any) {\n    this.keys = [\"signal\", \"gnd\"];\n    this.requiredKeys = [\"signal\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(null, this.params.gnd, \"5v\");\n    this.pwm = obniz.getFreePwm();\n    this.pwm.start({io: this.params.signal});\n  }\n\n  public play(frequency: number) {\n    if (typeof frequency !== \"number\") {\n      throw new Error(\"freq must be a number\");\n    }\n    frequency = Math.floor(frequency); // temporary\n    if (frequency > 0) {\n      this.pwm.freq(frequency);\n      this.pwm.pulse((1 / frequency / 2) * 1000);\n    } else {\n      this.pwm.pulse(0);\n    }\n  }\n\n  public stop() {\n    this.play(0);\n  }\n}\n"]}