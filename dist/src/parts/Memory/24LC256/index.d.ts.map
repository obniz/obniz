{"version":3,"sources":["../src/parts/Memory/24LC256/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,eAAe;IAC9B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,mBAAmB;WAE5C,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAiB;;IAOrB,KAAK,CAAC,KAAK,EAAE,KAAK;IAQlB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAS7B,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAOrD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface _24LC256Options {\r\n  sda?: number;\r\n  scl?: number;\r\n  clock?: number;\r\n  pull?: string;\r\n  i2c?: PeripheralI2C;\r\n  address?: number;\r\n}\r\n\r\nexport default class _24LC256 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"24LC256\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [\"address\"];\r\n    this.keys = [\"sda\", \"scl\", \"clock\", \"pull\", \"i2c\", \"address\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  // Module functions\r\n\r\n  public set(address: number, data: number[]) {\r\n    const array = [];\r\n    array.push((address >> 8) & 0xff);\r\n    array.push(address & 0xff);\r\n    array.push.apply(array, data);\r\n    this.i2c.write(0x50, array);\r\n    this.obniz.wait(4 + 1); // write cycle time = 4ms for 24XX00, 1.5ms for 24C01C, 24C02C\r\n  }\r\n\r\n  public async getWait(address: number, length: number) {\r\n    const array = [];\r\n    array.push((address >> 8) & 0xff);\r\n    array.push(address & 0xff);\r\n    this.i2c.write(0x50, array);\r\n    return await this.i2c.readWait(0x50, length);\r\n  }\r\n}\r\n"]}