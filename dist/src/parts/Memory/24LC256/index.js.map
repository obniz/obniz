{"version":3,"sources":["../src/parts/Memory/24LC256/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAaA,MAAqB,QAAQ;IAgB3B;QACE,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;IAjBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAeM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,UAAU;QAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,UAAU;QAC/D,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,mBAAmB;IAEZ,GAAG,CAAC,OAAe,EAAE,IAAc;QACxC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAClC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;QAC3B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,8DAA8D;IACxF,CAAC;IAEY,OAAO,CAAC,OAAe,EAAE,MAAc;;YAClD,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YAClC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC5B,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;KAAA;CACF;AA7CD,2BA6CC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface _24LC256Options {\n  sda?: number;\n  scl?: number;\n  clock?: number;\n  pull?: string;\n  i2c?: PeripheralI2C;\n  address?: number;\n}\n\nexport default class _24LC256 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"24LC256\",\n    };\n  }\n\n  public requiredKeys: string[];\n  public keys: string[];\n  public params: any;\n\n  protected obniz!: Obniz;\n\n  private i2c!: PeripheralI2C;\n\n  constructor() {\n    this.requiredKeys = [\"address\"];\n    this.keys = [\"sda\", \"scl\", \"clock\", \"pull\", \"i2c\", \"address\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.params.mode = this.params.mode || \"master\"; // for i2c\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\n    this.i2c = obniz.getI2CWithConfig(this.params);\n  }\n\n  // Module functions\n\n  public set(address: number, data: number[]) {\n    const array = [];\n    array.push((address >> 8) & 0xff);\n    array.push(address & 0xff);\n    array.push.apply(array, data);\n    this.i2c.write(0x50, array);\n    this.obniz.wait(4 + 1); // write cycle time = 4ms for 24XX00, 1.5ms for 24C01C, 24C02C\n  }\n\n  public async getWait(address: number, length: number) {\n    const array = [];\n    array.push((address >> 8) & 0xff);\n    array.push(address & 0xff);\n    this.i2c.write(0x50, array);\n    return await this.i2c.readWait(0x50, length);\n  }\n}\n"]}