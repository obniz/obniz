{"version":3,"sources":["../src/parts/Wireless/MFRC522/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wBAAwB;AAExB,MAAM,EAAE,GAAQ,IAAI,CAAC;AACrB,MAAM,KAAK,GAAQ,KAAK,CAAC;AAkBzB,MAAqB,OAAO;IA4G1B;QACE,0DAA0D;QAC1D,qEAAqE;QACrE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,gDAAgD;QACtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,4CAA4C;QACjE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,CAAC,wCAAwC;QAC1E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,yDAAyD;QAClF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,uCAAuC;QACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC,uIAAuI;QACpK,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mCAAmC;QAC5D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,0GAA0G;QACtI,+BAA+B;QAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,2DAA2D;QACtF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,sBAAsB;QAEjD,6FAA6F;QAC7F,0GAA0G;QAC1G,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,yBAAyB;QACvD,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,gBAAgB;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,uDAAuD;QACvF,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,uDAAuD;QACvF,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,8CAA8C;QAC5E,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,gBAAgB;QAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,gBAAgB;QAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,yBAAyB;QACvD,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,sDAAsD;QACnF,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,sDAAsD;QACnF,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,sDAAsD;QAEnF,mHAAmH;QACnH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,+HAA+H;QACtJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,2IAA2I;QAClK,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,qEAAqE;QAC1F,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,0CAA0C;QACpE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,0CAA0C;QACpE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,0CAA0C;QACpE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sEAAsE;QAC7F,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,uCAAuC;QAC9D,2GAA2G;QAC3G,+HAA+H;QAC/H,kEAAkE;QAClE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,qCAAqC;QACjE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,qCAAqC;QACjE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sGAAsG;QAC7H,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,wHAAwH;QAChJ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,0FAA0F;QACtH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,0FAA0F;QACtH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,iEAAiE;QAC3F,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,gEAAgE;QAC3F,kHAAkH;QAClH,qFAAqF;QACrF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,sCAAsC;QAEjE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,6BAA6B;QAC7B,2BAA2B;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,2BAA2B;QAE3B,kBAAkB;QAClB,2BAA2B;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,wBAAwB;QACxB,2BAA2B;QAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,2BAA2B;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,wBAAwB;QACxB,2BAA2B;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,2BAA2B;QAC3B,2BAA2B;QAC3B,2BAA2B;QAC3B,2BAA2B;QAE3B,wBAAwB;QACxB,IAAI,CAAC,IAAI,GAAG;YACV,IAAI;YACJ,KAAK;YACL,MAAM;YACN,MAAM;YACN,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,eAAe;SAChB,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAtPM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAoPM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,kBAAkB;QAClB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACxC,eAAe;QACf,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QACrE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAEY,IAAI;;YACf,+BAA+B;YAC/B,8BAA8B;YAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvB,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,+FAA+F;YAC1H,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAExD,yFAAyF;YACzF,2FAA2F;YAC3F,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,8GAA8G;YACvJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,0GAA0G;YACxJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,0DAA0D;YACvG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,2FAA2F;YACpI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,uGAAuG;YAC/I,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,+EAA+E;QACzG,CAAC;KAAA;IAEM,aAAa,CAAC,IAAY,EAAE,GAAQ;QACzC,IAAI,IAAS,CAAC;QACd,IAAI,GAAG,YAAY,KAAK,EAAE;YACxB,kBAAkB;YAClB,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzC;aAAM;YACL,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAEY,YAAY,CAAC,IAAY;;YACpC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrB,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC;KAAA;IAEY,kBAAkB,CAAC,IAAS,EAAE,CAAO;;YAChD,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,IAAI,IAAI,YAAY,KAAK,EAAE;gBACzB,uCAAuC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACpC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;iBAChD;aACF;iBAAM;gBACL,gCAAgC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1B,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;iBAC7C;aACF;YACD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc;YACjC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACnD,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEY,kBAAkB,CAAC,GAAQ,EAAE,IAAS;;YACjD,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;QAC3C,CAAC;KAAA;IAEY,oBAAoB,CAAC,GAAQ,EAAE,IAAS;;YACnD,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;KAAA;IAEY,SAAS;;YACpB,oDAAoD;YACpD,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE;gBAC9B,sBAAsB;gBACtB,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;aACnE;QACH,CAAC;KAAA;IAEY,UAAU;;YACrB,sDAAsD;YACtD,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;KAAA;IAED,wCAAwC;IAC3B,MAAM,CAAC,OAAY,EAAE,UAAe;;YAK/C,IAAI,IAAI,GAAQ,EAAE,CAAC;YACnB,IAAI,OAAO,GAAQ,CAAC,CAAC;YACrB,IAAI,MAAM,GAAQ,KAAK,CAAC;YACxB,IAAI,KAAK,GAAQ,IAAI,CAAC;YACtB,IAAI,OAAO,GAAQ,IAAI,CAAC;YAExB,IAAI,OAAO,KAAK,IAAI,CAAC,aAAa,EAAE;gBAClC,KAAK,GAAG,IAAI,CAAC;gBACb,OAAO,GAAG,IAAI,CAAC;aAChB;YACD,IAAI,OAAO,KAAK,IAAI,CAAC,cAAc,EAAE;gBACnC,KAAK,GAAG,IAAI,CAAC;gBACb,OAAO,GAAG,IAAI,CAAC;aAChB;YAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,0BAA0B;YAC9E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,+BAA+B;YACjF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,yCAAyC;YACnF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,uCAAuC;YACpF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,6BAA6B;YAC/E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,sBAAsB;YAEpE,IAAI,OAAO,KAAK,IAAI,CAAC,cAAc,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,2CAA2C;aACrG;YAED,IAAI,WAAW,GAAQ,EAAE,CAAC;YAC1B,IAAI,CAAC,GAAQ,CAAC,CAAC;YACf,GAAG;gBACD,sCAAsC;gBACtC,CAAC,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5C,WAAW,EAAE,CAAC;aACf,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,mHAAmH;YAEjL,yFAAyF;YAEzF,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBAClD,IAAI,CAAC,QAAQ;gBACb,IAAI,CAAC,YAAY;gBACjB,IAAI,CAAC,UAAU;aAChB,CAAC,CAAC;YAEH,IAAI,WAAW,KAAK,CAAC,EAAE;gBACrB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE;oBACjC,2CAA2C;oBAC3C,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;oBAEvC,IAAI,OAAO,KAAK,IAAI,CAAC,cAAc,EAAE;wBACnC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,8BAA8B;wBAC/C,MAAM,QAAQ,GAAQ,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,gIAAgI;wBAC1K,IAAI,QAAQ,EAAE;4BACZ,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;yBAClC;6BAAM;4BACL,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;yBACjB;wBACD,IAAI,CAAC,KAAK,CAAC,EAAE;4BACX,CAAC,GAAG,CAAC,CAAC;yBACP;wBACD,IAAI,CAAC,GAAG,EAAE,EAAE;4BACV,CAAC,GAAG,EAAE,CAAC;yBACR,CAAC,yBAAyB;wBAC3B,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,qCAAqC;qBACjG;iBACF;qBAAM;oBACL,MAAM,GAAG,KAAK,CAAC;iBAChB;aACF;YACD,OAAO,EAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;QACjC,CAAC;KAAA;IAEY,YAAY;;YAIvB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3B,MAAM,GAAG,GAAQ,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACzC,MAAM,SAAS,GAAQ,MAAM,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC5D,OAAO,EAAC,GAAG,EAAE,SAAS,EAAC,CAAC;QAC1B,CAAC;KAAA;IAEY,aAAa;;YACxB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEtC,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACtE,IAAI,QAAQ,CAAC,OAAO,KAAK,IAAI,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACtC;QACH,CAAC;KAAA;IAEY,UAAU;;YACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,GAAG,GAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAEzC,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAClE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;YACD,MAAM,QAAQ,GACZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5E,IAAI,QAAQ,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACpC;YACD,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC;YACpB,eAAe;YACf,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAEY,gBAAgB,CAAC,IAAS;;YACrC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,0BAA0B;YAC9E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,yCAAyC;YACnF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,uCAAuC;YACpF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,yBAAyB;YACrE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,wBAAwB;YAE/E,IAAI,CAAC,GAAQ,IAAI,CAAC;YAClB,IAAI,CAAM,CAAC;YACX,2CAA2C;YAC3C,GAAG;gBACD,CAAC,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5C,CAAC,EAAE,CAAC;aACL,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,gCAAgC;YAClE,yBAAyB;YACzB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC;gBACnC,IAAI,CAAC,eAAe;gBACpB,IAAI,CAAC,eAAe;aACrB,CAAC,CAAC;QACL,CAAC;KAAA;IAEY,oBAAoB;;YAC/B,IAAI,OAAO,GAAQ,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5D,QAAQ,OAAO,EAAE;gBACf,KAAK,IAAI;oBACP,OAAO,GAAG,SAAS,CAAC;oBACpB,MAAM;gBACR,KAAK,IAAI;oBACP,OAAO,GAAG,MAAM,CAAC;oBACjB,MAAM;gBACR,KAAK,IAAI;oBACP,OAAO,GAAG,MAAM,CAAC;oBACjB,MAAM;gBACR,KAAK,IAAI;oBACP,OAAO,GAAG,MAAM,CAAC;oBACjB,MAAM;gBACR,KAAK,IAAI;oBACP,OAAO,GAAG,kBAAkB,CAAC;oBAC7B,MAAM;gBACR;oBACE,OAAO,GAAG,WAAW,CAAC;aACzB;YACD,+DAA+D;YAC/D,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YACD,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEY,oBAAoB,CAAC,GAAQ;;YACxC,oCAAoC;YACpC,IAAI,MAAM,GAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACrE,IAAI,SAAc,CAAC;YACnB,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,OAAO,KAAK,IAAI,EAAE;gBAChD,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC9B;YACD,QAAQ,SAAS,EAAE;gBACjB,KAAK,IAAI;oBACP,SAAS,GAAG,oCAAoC,CAAC;oBACjD,MAAM,CAAC,mBAAmB;gBAC5B,KAAK,IAAI;oBACP,SAAS,GAAG,wBAAwB,CAAC;oBACrC,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,YAAY,CAAC;oBACzB,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,YAAY,CAAC;oBACzB,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,mCAAmC,CAAC;oBAChD,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,aAAa,CAAC;oBAC1B,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,gBAAgB,CAAC;oBAC7B,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,qCAAqC,CAAC;oBAClD,MAAM;gBACR,KAAK,IAAI;oBACP,SAAS,GAAG,yCAAyC,CAAC;oBACtD,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACtC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;KAAA;IAEY,kBAAkB,CAAC,MAAW,EAAE,GAAQ;;YACnD,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC/C,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KAAA;IAEY,iBAAiB,CAAC,KAAU,EAAE,GAAQ;;YACjD,MAAM,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC7C,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IAEY,sBAAsB,CAAC,MAAW,EAAE,GAAQ;;YACvD;;;mBAGC;YACD,MAAM,KAAK,GAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACxD,sDAAsD;YACtD,MAAM,KAAK,GAAQ,MAAM,GAAG,CAAC,CAAC;YAC9B,IAAI,MAAM,GAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,6BAA6B;YAC3F,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,oCAAoC;YAC3D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;YACtC,8BAA8B;YAC9B,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE;gBACxD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;QACH,CAAC;KAAA;IAEY,qBAAqB,CAAC,KAAU,EAAE,GAAQ;;YACrD;;;mBAGC;YACD,MAAM,KAAK,GAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACxD,sDAAsD;YACtD,IAAI,MAAM,GAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,6BAA6B;YAC3F,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,oCAAoC;YAC3D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;YAEtC,8BAA8B;YAC9B,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE;gBACxD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;QACH,CAAC;KAAA;IAEY,aAAa;;YACxB,+EAA+E;YAC/E,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzD,CAAC;KAAA;IAEY,iBAAiB,CAAC,OAAY;;YACzC,MAAM,QAAQ,GAAQ,EAAE,CAAC;YACzB,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAI,OAAO,GAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/D,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;gBAC9D,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;oBACvB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;iBACpC;gBACD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aACjC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;KAAA;IAEY,gBAAgB,CAAC,OAAY;;YAKxC,IAAI,OAAO,GAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;YAC/D,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACtE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACpC;YACD,OAAO,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC;KAAA;IAEY,kCAAkC,CAAC,MAAW;;YAKzD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACrE,IACE,CAAC,QAAQ,CAAC,MAAM;gBAChB,QAAQ,CAAC,OAAO,KAAK,CAAC;gBACtB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,EAClC;gBACA,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;aACzB;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAEY,kBAAkB,CAAC,KAAU,EAAE,YAAiB;;YAC3D,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;aAC/B;YACD,MAAM,MAAM,GAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAC7C,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,kCAAkC,CAAC,MAAM,CAAC,CAAC;YAC1E,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,QAAQ,GAAG,MAAM,IAAI,CAAC,kCAAkC,CAAC,YAAY,CAAC,CAAC;aACxE;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;aACrC;QACH,CAAC;KAAA;CACF;AA1pBD,0BA0pBC","file":"index.js","sourcesContent":["/* ver 1.0\r\n * 2019/10/14\r\n * Created by Zjalic\r\n */\r\n\r\n/*jshint esversion: 8 */\r\n\r\nconst OK: any = true;\r\nconst ERROR: any = false;\r\n\r\nimport Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface MFRC522Options {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  cs: number;\r\n  clk?: number;\r\n  mosi: number;\r\n  miso: number;\r\n  spi?: number;\r\n  spi_frequency?: number;\r\n  pull?: any;\r\n  rst: number;\r\n}\r\n\r\nexport default class MFRC522 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"MFRC522\",\r\n    };\r\n  }\r\n\r\n  public PCD_Idle: any;\r\n  public PCD_Mem: any;\r\n  public PCD_GenerateRandomID: any;\r\n  public PCD_CalcCRC: any;\r\n  public PCD_Transmit: any;\r\n  public PCD_NoCmdChange: any;\r\n  public PCD_Receive: any;\r\n  public PCD_Transceive: any;\r\n  public PCD_MFAuthent: any;\r\n  public PCD_SoftReset: any;\r\n  public RxGain_18dB: any;\r\n  public RxGain_23dB: any;\r\n  public RxGain_18dB_2: any;\r\n  public RxGain_23dB_2: any;\r\n  public RxGain_33dB: any;\r\n  public RxGain_38dB: any;\r\n  public RxGain_43dB: any;\r\n  public RxGain_48dB: any;\r\n  public RxGain_min: any;\r\n  public RxGain_avg: any;\r\n  public RxGain_max: any;\r\n  public PICC_REQA: any;\r\n  public PICC_WUPA: any;\r\n  public PICC_CT: any;\r\n  public PICC_SEL_CL1: any;\r\n  public PICC_SEL_CL2: any;\r\n  public PICC_SEL_CL3: any;\r\n  public PICC_HLTA: any;\r\n  public PICC_RATS: any;\r\n  public PICC_AUTH_KEYA: any;\r\n  public PICC_AUTH_KEYB: any;\r\n  public PICC_READ: any;\r\n  public PICC_WRITE: any;\r\n  public PICC_DECREMENT: any;\r\n  public PICC_INCREMENT: any;\r\n  public PICC_RESTORE: any;\r\n  public PICC_TRANSFER: any;\r\n  public PICC_UL_WRITE: any;\r\n  public PICC_SElECTTAG: any;\r\n  public CommandReg: any;\r\n  public ComlEnReg: any;\r\n  public DivlEnReg: any;\r\n  public ComIrqReg: any;\r\n  public DivIrqReg: any;\r\n  public ErrorReg: any;\r\n  public Status1Reg: any;\r\n  public Status2Reg: any;\r\n  public FIFODataReg: any;\r\n  public FIFOLevelReg: any;\r\n  public WaterLevelReg: any;\r\n  public ControlReg: any;\r\n  public BitFramingReg: any;\r\n  public CollReg: any;\r\n  public ModeReg: any;\r\n  public TxModeReg: any;\r\n  public RxModeReg: any;\r\n  public TxControlReg: any;\r\n  public TxASKReg: any;\r\n  public TxSelReg: any;\r\n  public RxSelReg: any;\r\n  public RxThresholdReg: any;\r\n  public DemodReg: any;\r\n  public Reserved1Ah: any;\r\n  public Reserved1Bh: any;\r\n  public MfTxReg: any;\r\n  public MfRxReg: any;\r\n  public Reserved1Eh: any;\r\n  public SerialSpeedReg: any;\r\n  public CRCResultRegMSB: any;\r\n  public CRCResultRegLSB: any;\r\n  public ModWidthReg: any;\r\n  public RFCfgReg: any;\r\n  public GsNReg: any;\r\n  public CWGsPReg: any;\r\n  public ModGsPReg: any;\r\n  public TModeReg: any;\r\n  public TPrescalerReg: any;\r\n  public TReloadRegHi: any;\r\n  public TReloadRegLo: any;\r\n  public TCounterValRegHi: any;\r\n  public TCounterValRegLo: any;\r\n  public TestSel1Reg: any;\r\n  public TestSel2Reg: any;\r\n  public TestPinEnReg: any;\r\n  public TestPinValueReg: any;\r\n  public TestBusReg: any;\r\n  public AutoTestReg: any;\r\n  public VersionReg: any;\r\n  public AnalogTestReg: any;\r\n  public TestDAC1Reg: any;\r\n  public TestDAC2Reg: any;\r\n  public TestADCReg: any;\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public rst: any;\r\n  public cs: any;\r\n  public spi: any;\r\n\r\n  constructor() {\r\n    // PCD commands. Described in chapter 10 of the datasheet.\r\n    // PCD(Proximity Coupling Device): NXP MFRC522 Contactless Reader IC.\r\n    this.PCD_Idle = 0x00; // no action, cancels current command execution.\r\n    this.PCD_Mem = 0x01; // stores 25 bytes into the internal buffer.\r\n    this.PCD_GenerateRandomID = 0x02; // generates a 10-byte random ID number.\r\n    this.PCD_CalcCRC = 0x03; // activates the CRC coprocessor or performs a self-test.\r\n    this.PCD_Transmit = 0x04; // transmits data from the FIFO buffer.\r\n    this.PCD_NoCmdChange = 0x07; // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit.\r\n    this.PCD_Receive = 0x08; // activates the receiver circuits.\r\n    this.PCD_Transceive = 0x0c; // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission.\r\n    // this.PCD_Reserved0Dh = 0x0D;\r\n    this.PCD_MFAuthent = 0x0e; // performs the MIFARE standard authentication as a reader.\r\n    this.PCD_SoftReset = 0x0f; // resets the MFRC522.\r\n\r\n    // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).\r\n    // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf\r\n    this.RxGain_18dB = 0x00 << 4; // 000b - 18 dB, minimum.\r\n    this.RxGain_23dB = 0x01 << 4; // 001b - 23 dB.\r\n    this.RxGain_18dB_2 = 0x02 << 4; // 010b - 18 dB, it seems 010b is a duplicate for 000b.\r\n    this.RxGain_23dB_2 = 0x03 << 4; // 011b - 23 dB, it seems 011b is a duplicate for 001b.\r\n    this.RxGain_33dB = 0x04 << 4; // 100b - 33 dB, average, and typical default.\r\n    this.RxGain_38dB = 0x05 << 4; // 101b - 38 dB.\r\n    this.RxGain_43dB = 0x06 << 4; // 110b - 43 dB.\r\n    this.RxGain_48dB = 0x07 << 4; // 111b - 48 dB, maximum.\r\n    this.RxGain_min = 0x00 << 4; // 000b - 18 dB, minimum, convenience for RxGain_18dB.\r\n    this.RxGain_avg = 0x04 << 4; // 100b - 33 dB, average, convenience for RxGain_33dB.\r\n    this.RxGain_max = 0x07 << 4; // 111b - 48 dB, maximum, convenience for RxGain_48dB.\r\n\r\n    // The PICC commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4).\r\n    this.PICC_REQA = 0x26; // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.\r\n    this.PICC_WUPA = 0x52; // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.\r\n    this.PICC_CT = 0x88; // Cascade Tag. Not really a command, but used during anti collision.\r\n    this.PICC_SEL_CL1 = 0x93; // Anti collision/Select, Cascade Level 1.\r\n    this.PICC_SEL_CL2 = 0x95; // Anti collision/Select, Cascade Level 2.\r\n    this.PICC_SEL_CL3 = 0x97; // Anti collision/Select, Cascade Level 3.\r\n    this.PICC_HLTA = 0x50; // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.\r\n    this.PICC_RATS = 0xe0; // Request command for Answer To Reset.\r\n    // The commands used for MIFARE Classic (from http://www.mouser.com/ds/2/302/MF1S503x-89574.pdf, Section 9)\r\n    // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.\r\n    // The read/write commands can also be used for MIFARE Ultralight.\r\n    this.PICC_AUTH_KEYA = 0x60; // Perform authentication with Key A.\r\n    this.PICC_AUTH_KEYB = 0x61; // Perform authentication with Key B.\r\n    this.PICC_READ = 0x30; // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.\r\n    this.PICC_WRITE = 0xa0; // Writes one 16 byte block to the authenticated sector of the PICC. Called \"COMPATIBILITY WRITE\" for MIFARE Ultralight.\r\n    this.PICC_DECREMENT = 0xc0; // Decrements the contents of a block and stores the result in the internal data register.\r\n    this.PICC_INCREMENT = 0xc1; // Increments the contents of a block and stores the result in the internal data register.\r\n    this.PICC_RESTORE = 0xc2; // Reads the contents of a block into the internal data register.\r\n    this.PICC_TRANSFER = 0xb0; // Writes the contents of the internal data register to a block.\r\n    // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)\r\n    // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.\r\n    this.PICC_UL_WRITE = 0xa2; // Writes one 4 byte page to the PICC.\r\n\r\n    this.PICC_SElECTTAG = 0x93;\r\n\r\n    // Page 0: Command and status\r\n    // this.Reserved00h = 0x00;\r\n    this.CommandReg = 0x01;\r\n    this.ComlEnReg = 0x02;\r\n    this.DivlEnReg = 0x03;\r\n    this.ComIrqReg = 0x04;\r\n    this.DivIrqReg = 0x05;\r\n    this.ErrorReg = 0x06;\r\n    this.Status1Reg = 0x07;\r\n    this.Status2Reg = 0x08;\r\n    this.FIFODataReg = 0x09;\r\n    this.FIFOLevelReg = 0x0a;\r\n    this.WaterLevelReg = 0x0b;\r\n    this.ControlReg = 0x0c;\r\n    this.BitFramingReg = 0x0d;\r\n    this.CollReg = 0x0e;\r\n    // this.Reserved0Fh = 0x0F;\r\n\r\n    // Page 1: Command\r\n    // this.Reserved10h = 0x10;\r\n    this.ModeReg = 0x11;\r\n    this.TxModeReg = 0x12;\r\n    this.RxModeReg = 0x13;\r\n    this.TxControlReg = 0x14;\r\n    this.TxASKReg = 0x15;\r\n    this.TxSelReg = 0x16;\r\n    this.RxSelReg = 0x17;\r\n    this.RxThresholdReg = 0x18;\r\n    this.DemodReg = 0x19;\r\n    this.Reserved1Ah = 0x1a;\r\n    this.Reserved1Bh = 0x1b;\r\n    this.MfTxReg = 0x1c;\r\n    this.MfRxReg = 0x1d;\r\n    this.Reserved1Eh = 0x1e;\r\n    this.SerialSpeedReg = 0x1f;\r\n\r\n    // Page 2: Configuration\r\n    // this.Reserved20h = 0x20;\r\n    this.CRCResultRegMSB = 0x21;\r\n    this.CRCResultRegLSB = 0x22;\r\n    // this.Reserved23h = 0x23;\r\n    this.ModWidthReg = 0x24;\r\n    // this.Reserved25h = 0x25;\r\n    this.RFCfgReg = 0x26;\r\n    this.GsNReg = 0x27;\r\n    this.CWGsPReg = 0x28;\r\n    this.ModGsPReg = 0x29;\r\n    this.TModeReg = 0x2a;\r\n    this.TPrescalerReg = 0x2b;\r\n    this.TReloadRegHi = 0x2c;\r\n    this.TReloadRegLo = 0x2d;\r\n    this.TCounterValRegHi = 0x2e;\r\n    this.TCounterValRegLo = 0x2f;\r\n\r\n    // Page 3: Test register\r\n    // this.Reserved30h = 0x30;\r\n    this.TestSel1Reg = 0x31;\r\n    this.TestSel2Reg = 0x32;\r\n    this.TestPinEnReg = 0x33;\r\n    this.TestPinValueReg = 0x34;\r\n    this.TestBusReg = 0x35;\r\n    this.AutoTestReg = 0x36;\r\n    this.VersionReg = 0x37;\r\n    this.AnalogTestReg = 0x38;\r\n    this.TestDAC1Reg = 0x39;\r\n    this.TestDAC2Reg = 0x3a;\r\n    this.TestADCReg = 0x3b;\r\n    // this.Reserved3Ch = 0x3C;\r\n    // this.Reserved3Dh = 0x3D;\r\n    // this.Reserved3Eh = 0x3E;\r\n    // this.Reserved3Fh = 0x3F;\r\n\r\n    // required pin of obniz\r\n    this.keys = [\r\n      \"cs\",\r\n      \"clk\",\r\n      \"mosi\",\r\n      \"miso\",\r\n      \"rst\",\r\n      \"vcc\",\r\n      \"gnd\",\r\n      \"spi\",\r\n      \"spi_frequency\",\r\n    ];\r\n    this.requiredKeys = [\"cs\", \"mosi\", \"miso\", \"rst\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    // IO pin settings\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.rst = obniz.getIO(this.params.rst);\r\n    // SPI settings\r\n    this.cs = obniz.getIO(this.params.cs);\r\n    this.cs.output(true);\r\n    this.params.mode = \"master\";\r\n    this.params.drive = \"3v\";\r\n    this.params.pull = \"3v\";\r\n    this.params.frequency = this.params.spi_frequency || 5 * 1000 * 1000;\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n  }\r\n\r\n  public async init() {\r\n    // Initializes the MFRC522 chip\r\n    // Hardware and Software reset\r\n    this.rst.output(false);\r\n    await this.obniz.wait(50); // 8.8.2 says the oscillator start-up time is the start up time of the crystal + 37,74us: 50ms.\r\n    this.rst.output(true);\r\n    this.writeRegister(this.CommandReg, this.PCD_SoftReset);\r\n\r\n    // Timer setup: When communicating with a PICC we need a timeout if something goes wrong.\r\n    // f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].\r\n    this.writeRegister(this.TModeReg, 0x80); // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds\r\n    this.writeRegister(this.TPrescalerReg, 0xa9); // TPreScaler = TModeReg[3..0]: TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.\r\n    this.writeRegister(this.TReloadRegHi, 0x03);\r\n    this.writeRegister(this.TReloadRegLo, 0xe8); // Reload timer with 0x3E8 = 1000, ie. 25ms before timeout\r\n    this.writeRegister(this.TxASKReg, 0x40); // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting\r\n    this.writeRegister(this.ModeReg, 0x3d); // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (6.2.4)\r\n    await this.antennaOn(); // Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)\r\n  }\r\n\r\n  public writeRegister(addr: number, val: any) {\r\n    let data: any;\r\n    if (val instanceof Array) {\r\n      // If val is Array\r\n      data = [(addr << 1) & 0x7e].concat(val);\r\n    } else {\r\n      data = [(addr << 1) & 0x7e, val];\r\n    }\r\n    this.cs.output(false);\r\n    this.spi.write(data);\r\n    this.cs.output(true);\r\n  }\r\n\r\n  public async readRegister(addr: number) {\r\n    const data = [((addr << 1) & 0x7e) | 0x80, 0];\r\n    this.cs.output(false);\r\n    const response = await this.spi.writeWait(data);\r\n    this.cs.output(true);\r\n    return response[1];\r\n  }\r\n\r\n  public async readRegister_nByte(addr: any, n?: any): Promise<number[]> {\r\n    const dataArray: any = [];\r\n    if (addr instanceof Array) {\r\n      // Multiple addresses(If addr is Array)\r\n      for (let i = 0; i < addr.length; i++) {\r\n        dataArray.push(((addr[i] << 1) & 0x7e) | 0x80);\r\n      }\r\n    } else {\r\n      // Single address & read n times\r\n      for (let i = 0; i < n; i++) {\r\n        dataArray.push(((addr << 1) & 0x7e) | 0x80);\r\n      }\r\n    }\r\n    dataArray.push(0); // End reading\r\n    this.cs.output(false);\r\n    const values = await this.spi.writeWait(dataArray);\r\n    this.cs.output(true);\r\n    values.shift();\r\n    return values;\r\n  }\r\n\r\n  public async setRegisterBitMask(reg: any, mask: any) {\r\n    const response: any = await this.readRegister(reg);\r\n    this.writeRegister(reg, response | mask);\r\n  }\r\n\r\n  public async clearRegisterBitMask(reg: any, mask: any) {\r\n    const response: any = await this.readRegister(reg);\r\n    this.writeRegister(reg, response & ~mask);\r\n  }\r\n\r\n  public async antennaOn() {\r\n    // Turns the antenna on by enabling pins TX1 and TX2\r\n    const response: any = await this.readRegister(this.TxControlReg);\r\n    if ((response & 0x03) !== 0x03) {\r\n      // If TX1 and TX2 down\r\n      await this.setRegisterBitMask(this.TxControlReg, response | 0x03);\r\n    }\r\n  }\r\n\r\n  public async antennaOff() {\r\n    // Turns the antenna off by disabling pins TX1 and TX2\r\n    await this.clearRegisterBitMask(this.TxControlReg, 0x03);\r\n  }\r\n\r\n  // RC522 and ISO14443 card communication\r\n  public async toCard(command: any, bitsToSend: any): Promise<{\r\n    status: boolean;\r\n    data: any;\r\n    bitSize: number;\r\n  }> {\r\n    let data: any = [];\r\n    let bitSize: any = 0;\r\n    let status: any = ERROR;\r\n    let irqEn: any = 0x00;\r\n    let waitIRq: any = 0x00;\r\n\r\n    if (command === this.PCD_MFAuthent) {\r\n      irqEn = 0x12;\r\n      waitIRq = 0x10;\r\n    }\r\n    if (command === this.PCD_Transceive) {\r\n      irqEn = 0x77;\r\n      waitIRq = 0x30;\r\n    }\r\n\r\n    this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command\r\n    this.writeRegister(this.ComlEnReg, irqEn | 0x80); // Interrupt request is enabled\r\n    this.writeRegister(this.ComIrqReg, 0x7f); // Clear all seven interrupt request bits\r\n    this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization\r\n    this.writeRegister(this.FIFODataReg, bitsToSend); // Write sendData to the FIFO\r\n    this.writeRegister(this.CommandReg, command); // Execute the command\r\n\r\n    if (command === this.PCD_Transceive) {\r\n      await this.setRegisterBitMask(this.BitFramingReg, 0x80); // StartSend=1, transmission of data starts\r\n    }\r\n\r\n    let TryingTimes: any = 10;\r\n    let n: any = 0;\r\n    do {\r\n      // Wait for the received data complete\r\n      n = await this.readRegister(this.ComIrqReg);\r\n      TryingTimes--;\r\n    } while (TryingTimes !== 0 && !(n & 0x01) && !(n & waitIRq)); // !(Timer interrupt - nothing received before timeout) & !(One of the interrupts that signal success has been set)\r\n\r\n    // await this.clearRegisterBitMask(this.BitFramingReg, 0x80);\t//Reset with resetAndInit()\r\n\r\n    const response: any = await this.readRegister_nByte([\r\n      this.ErrorReg,\r\n      this.FIFOLevelReg,\r\n      this.ControlReg,\r\n    ]);\r\n\r\n    if (TryingTimes !== 0) {\r\n      if ((response[0] & 0x1b) === 0x00) {\r\n        // BufferOvfl CollErr ParityErr ProtocolErr\r\n        status = n & irqEn & 0x01 ? ERROR : OK;\r\n\r\n        if (command === this.PCD_Transceive) {\r\n          n = response[1]; // Number of bytes in the FIFO\r\n          const lastBits: any = response[2] & 0x07; // RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.\r\n          if (lastBits) {\r\n            bitSize = (n - 1) * 8 + lastBits;\r\n          } else {\r\n            bitSize = n * 8;\r\n          }\r\n          if (n === 0) {\r\n            n = 1;\r\n          }\r\n          if (n > 16) {\r\n            n = 16;\r\n          } // Restrict until 16bytes\r\n          data = await this.readRegister_nByte(this.FIFODataReg, n); // Get received data from FIFO buffer\r\n        }\r\n      } else {\r\n        status = ERROR;\r\n      }\r\n    }\r\n    return {status, data, bitSize};\r\n  }\r\n\r\n  public async findCardWait(): Promise<{\r\n    uid: any;\r\n    PICC_Type: string;\r\n  }> {\r\n    await this.init();\r\n    await this.searchTagWait();\r\n    const uid: any = await this.getUidWait();\r\n    const PICC_Type: any = await this.identifyCardTypeWait(uid);\r\n    return {uid, PICC_Type};\r\n  }\r\n\r\n  public async searchTagWait() {\r\n    this.writeRegister(this.BitFramingReg, 0x07);\r\n    const tagType: any = [this.PICC_REQA];\r\n\r\n    const response: any = await this.toCard(this.PCD_Transceive, tagType);\r\n    if (response.bitSize !== 0x10) {\r\n      throw new Error(\"card_search_ERROR\");\r\n    }\r\n  }\r\n\r\n  public async getUidWait(): Promise<any> {\r\n    this.writeRegister(this.BitFramingReg, 0x00);\r\n    let uid: any = [this.PICC_SEL_CL1, 0x20];\r\n\r\n    const response: any = await this.toCard(this.PCD_Transceive, uid);\r\n    if (!response.status) {\r\n      throw new Error(\"uid_scan_ERROR\");\r\n    }\r\n    const uidCheck: any =\r\n      response.data[0] ^ response.data[1] ^ response.data[2] ^ response.data[3];\r\n    if (uidCheck !== response.data[4]) {\r\n      throw new Error(\"uid_check_ERROR\");\r\n    }\r\n    uid = response.data;\r\n    // (uid).pop();\r\n    return uid;\r\n  }\r\n\r\n  public async calculateCRCWait(data: any) {\r\n    this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command\r\n    this.writeRegister(this.DivIrqReg, 0x04); // Clear the CRCIRq interrupt request bit\r\n    this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization\r\n    this.writeRegister(this.FIFODataReg, data); // Write data to the FIFO\r\n    this.writeRegister(this.CommandReg, this.PCD_CalcCRC); // Start the calculation\r\n\r\n    let i: any = 0xff;\r\n    let n: any;\r\n    // Wait for the CRC calculation to complete\r\n    do {\r\n      n = await this.readRegister(this.DivIrqReg);\r\n      i--;\r\n    } while (i !== 0 && !(n & 0x04)); // CRCIrq = 1 (Calculation done)\r\n    // CRC calculation result\r\n    return await this.readRegister_nByte([\r\n      this.CRCResultRegLSB,\r\n      this.CRCResultRegMSB,\r\n    ]);\r\n  }\r\n\r\n  public async identifySoftwareWait() {\r\n    let version: any = await this.readRegister(this.VersionReg);\r\n    switch (version) {\r\n      case 0x88:\r\n        version = \"(clone)\";\r\n        break;\r\n      case 0x90:\r\n        version = \"v0.0\";\r\n        break;\r\n      case 0x91:\r\n        version = \"v1.0\";\r\n        break;\r\n      case 0x92:\r\n        version = \"v2.0\";\r\n        break;\r\n      case 0x12:\r\n        version = \"counterfeit chip\";\r\n        break;\r\n      default:\r\n        version = \"(unknown)\";\r\n    }\r\n    // When 0x00 or 0xFF is returned, communication probably failed\r\n    if (version === 0x00 || version === 0xff) {\r\n      throw new Error(\"software_version_ERROR\");\r\n    }\r\n    return version;\r\n  }\r\n\r\n  public async identifyCardTypeWait(uid: any) {\r\n    // Identify type of the scanned card\r\n    let buffer: any = [this.PICC_SElECTTAG, 0x70].concat(uid);\r\n    buffer = buffer.concat(await this.calculateCRCWait(buffer));\r\n    const response: any = await this.toCard(this.PCD_Transceive, buffer);\r\n    let PICC_Type: any;\r\n    if (response.status && response.bitSize === 0x18) {\r\n      PICC_Type = response.data[0];\r\n    }\r\n    switch (PICC_Type) {\r\n      case 0x04:\r\n        PICC_Type = \"SAK indicates UID is not complete.\";\r\n        break; // UID not complete\r\n      case 0x09:\r\n        PICC_Type = \"MIFARE Mini, 320 bytes\";\r\n        break;\r\n      case 0x08:\r\n        PICC_Type = \"MIFARE 1KB\";\r\n        break;\r\n      case 0x18:\r\n        PICC_Type = \"MIFARE 4KB\";\r\n        break;\r\n      case 0x00:\r\n        PICC_Type = \"MIFARE Ultralight or Ultralight C\";\r\n        break;\r\n      case 0x11:\r\n        PICC_Type = \"MIFARE Plus\";\r\n        break;\r\n      case 0x01:\r\n        PICC_Type = \"MIFARE TNP3XXX\";\r\n        break;\r\n      case 0x20:\r\n        PICC_Type = \"PICC compliant with ISO/IEC 14443-4\";\r\n        break;\r\n      case 0x40:\r\n        PICC_Type = \"PICC compliant with ISO/IEC 18092 (NFC)\";\r\n        break;\r\n      default:\r\n        throw new Error(\"PICC_type_ERROR\");\r\n    }\r\n    return PICC_Type;\r\n  }\r\n\r\n  public async readSectorDataWait(Sector: any, uid: any) {\r\n    await this.authenticateSectorWait(Sector, uid);\r\n    return await this.getSectorDataWait(Sector);\r\n  }\r\n\r\n  public async readBlockDataWait(Block: any, uid: any) {\r\n    await this.authenticateBlockWait(Block, uid);\r\n    return await this.getBlockDataWait(Block);\r\n  }\r\n\r\n  public async authenticateSectorWait(Sector: any, uid: any) {\r\n    /* Password authentication mode (A or B)\r\n\t\t * PICC_AUTH_KEYA = Verify the A key are the first 6 bit of 4th Block of each sector\r\n\t\t * PICC_AUTH_KEYB = Verify the B key are the last 6 bit of 4th Block of each sector\r\n\t\t */\r\n    const KEY_A: any = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];\r\n    // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    const Block: any = Sector * 4;\r\n    let buffer: any = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF\r\n    uid = uid.slice(0, 4); // Append the first 4 bit of the UID\r\n    buffer = buffer.concat(uid); // 12byte\r\n    // Start authentication itself\r\n    await this.toCard(this.PCD_MFAuthent, buffer);\r\n    if (!((await this.readRegister(this.Status2Reg)) & 0x08)) {\r\n      throw new Error(\"password_authentication_ERROR\");\r\n    }\r\n  }\r\n\r\n  public async authenticateBlockWait(Block: any, uid: any) {\r\n    /* Password authentication mode (A or B)\r\n\t\t * PICC_AUTH_KEYA = Verify the A key (the first 6 bit of 3th Block fo each Sector)\r\n\t\t * PICC_AUTH_KEYB = Verify the B key (the last 6 bit of 3th Block fo each Sector)\r\n\t\t */\r\n    const KEY_A: any = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];\r\n    // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    let buffer: any = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF\r\n    uid = uid.slice(0, 4); // Append the first 4 bit of the UID\r\n    buffer = buffer.concat(uid); // 12byte\r\n\r\n    // Start authentication itself\r\n    await this.toCard(this.PCD_MFAuthent, buffer);\r\n    if (!((await this.readRegister(this.Status2Reg)) & 0x08)) {\r\n      throw new Error(\"password_authentication_ERROR\");\r\n    }\r\n  }\r\n\r\n  public async readAgainWait() {\r\n    // If you finish reading and want to read again, this can use instead of init()\r\n    await this.clearRegisterBitMask(this.Status2Reg, 0x08);\r\n  }\r\n\r\n  public async getSectorDataWait(address: any) {\r\n    const response: any = [];\r\n    const blockData: any = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      let request: any = [this.PICC_READ, address * 4 + i];\r\n      request = request.concat(await this.calculateCRCWait(request));\r\n      response[i] = await this.toCard(this.PCD_Transceive, request);\r\n      if (!response[i].status) {\r\n        throw new Error(\"data_read_ERROR\");\r\n      }\r\n      blockData[i] = response[i].data;\r\n    }\r\n    return blockData;\r\n  }\r\n\r\n  public async getBlockDataWait(address: any): Promise<{\r\n    status: boolean;\r\n    data: any;\r\n    bitSize: number;\r\n  }> {\r\n    let request: any = [this.PICC_READ, address];\r\n    request = request.concat(await this.calculateCRCWait(request));\r\n    const response: any = await this.toCard(this.PCD_Transceive, request);\r\n    if (!response.status) {\r\n      throw new Error(\"data_read_ERROR\");\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  public async appendCRCtoBufferAndSendToCardWait(buffer: any): Promise<{\r\n    status: boolean;\r\n    data: any;\r\n    bitSize: number;\r\n  }> {\r\n    buffer = buffer.concat(await this.calculateCRCWait(buffer));\r\n    const response: any = await this.toCard(this.PCD_Transceive, buffer);\r\n    if (\r\n      !response.status ||\r\n      response.bitSize !== 4 ||\r\n      (response.data[0] & 0x0f) !== 0x0a\r\n    ) {\r\n      response.status = ERROR;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  public async writeBlockDataWait(Block: any, sixteenBytes: any): Promise<void> {\r\n    if (Block === 0 || Block % 4 === 3) {\r\n      throw new Error(\"deny_Write\");\r\n    }\r\n    const buffer: any = [this.PICC_WRITE, Block];\r\n    let response: any = await this.appendCRCtoBufferAndSendToCardWait(buffer);\r\n    if (response.status) {\r\n      response = await this.appendCRCtoBufferAndSendToCardWait(sixteenBytes);\r\n    } else {\r\n      throw new Error(\"data_write_ERROR\");\r\n    }\r\n  }\r\n}\r\n"]}