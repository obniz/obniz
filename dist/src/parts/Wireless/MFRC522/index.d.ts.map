{"version":3,"sources":["../src/parts/Wireless/MFRC522/index.ts"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["/* ver 1.0\n * 2019/10/14\n * Created by Zjalic\n */\n\n/*jshint esversion: 8 */\n\nconst OK: any = true;\nconst ERROR: any = false;\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface MFRC522Options {\n  gnd?: number;\n  vcc?: number;\n  cs: number;\n  clk?: number;\n  mosi: number;\n  miso: number;\n  spi?: number;\n  spi_frequency?: number;\n  pull?: any;\n  rst: number;\n}\n\nexport default class MFRC522 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MFRC522\",\n    };\n  }\n\n  public PCD_Idle: any;\n  public PCD_Mem: any;\n  public PCD_GenerateRandomID: any;\n  public PCD_CalcCRC: any;\n  public PCD_Transmit: any;\n  public PCD_NoCmdChange: any;\n  public PCD_Receive: any;\n  public PCD_Transceive: any;\n  public PCD_MFAuthent: any;\n  public PCD_SoftReset: any;\n  public RxGain_18dB: any;\n  public RxGain_23dB: any;\n  public RxGain_18dB_2: any;\n  public RxGain_23dB_2: any;\n  public RxGain_33dB: any;\n  public RxGain_38dB: any;\n  public RxGain_43dB: any;\n  public RxGain_48dB: any;\n  public RxGain_min: any;\n  public RxGain_avg: any;\n  public RxGain_max: any;\n  public PICC_REQA: any;\n  public PICC_WUPA: any;\n  public PICC_CT: any;\n  public PICC_SEL_CL1: any;\n  public PICC_SEL_CL2: any;\n  public PICC_SEL_CL3: any;\n  public PICC_HLTA: any;\n  public PICC_RATS: any;\n  public PICC_AUTH_KEYA: any;\n  public PICC_AUTH_KEYB: any;\n  public PICC_READ: any;\n  public PICC_WRITE: any;\n  public PICC_DECREMENT: any;\n  public PICC_INCREMENT: any;\n  public PICC_RESTORE: any;\n  public PICC_TRANSFER: any;\n  public PICC_UL_WRITE: any;\n  public PICC_SElECTTAG: any;\n  public CommandReg: any;\n  public ComlEnReg: any;\n  public DivlEnReg: any;\n  public ComIrqReg: any;\n  public DivIrqReg: any;\n  public ErrorReg: any;\n  public Status1Reg: any;\n  public Status2Reg: any;\n  public FIFODataReg: any;\n  public FIFOLevelReg: any;\n  public WaterLevelReg: any;\n  public ControlReg: any;\n  public BitFramingReg: any;\n  public CollReg: any;\n  public ModeReg: any;\n  public TxModeReg: any;\n  public RxModeReg: any;\n  public TxControlReg: any;\n  public TxASKReg: any;\n  public TxSelReg: any;\n  public RxSelReg: any;\n  public RxThresholdReg: any;\n  public DemodReg: any;\n  public Reserved1Ah: any;\n  public Reserved1Bh: any;\n  public MfTxReg: any;\n  public MfRxReg: any;\n  public Reserved1Eh: any;\n  public SerialSpeedReg: any;\n  public CRCResultRegMSB: any;\n  public CRCResultRegLSB: any;\n  public ModWidthReg: any;\n  public RFCfgReg: any;\n  public GsNReg: any;\n  public CWGsPReg: any;\n  public ModGsPReg: any;\n  public TModeReg: any;\n  public TPrescalerReg: any;\n  public TReloadRegHi: any;\n  public TReloadRegLo: any;\n  public TCounterValRegHi: any;\n  public TCounterValRegLo: any;\n  public TestSel1Reg: any;\n  public TestSel2Reg: any;\n  public TestPinEnReg: any;\n  public TestPinValueReg: any;\n  public TestBusReg: any;\n  public AutoTestReg: any;\n  public VersionReg: any;\n  public AnalogTestReg: any;\n  public TestDAC1Reg: any;\n  public TestDAC2Reg: any;\n  public TestADCReg: any;\n  public keys: string[];\n  public requiredKeys: string[];\n  public obniz!: Obniz;\n  public params: any;\n  public rst: any;\n  public cs: any;\n  public spi: any;\n\n  constructor() {\n    // PCD commands. Described in chapter 10 of the datasheet.\n    // PCD(Proximity Coupling Device): NXP MFRC522 Contactless Reader IC.\n    this.PCD_Idle = 0x00; // no action, cancels current command execution.\n    this.PCD_Mem = 0x01; // stores 25 bytes into the internal buffer.\n    this.PCD_GenerateRandomID = 0x02; // generates a 10-byte random ID number.\n    this.PCD_CalcCRC = 0x03; // activates the CRC coprocessor or performs a self-test.\n    this.PCD_Transmit = 0x04; // transmits data from the FIFO buffer.\n    this.PCD_NoCmdChange = 0x07; // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit.\n    this.PCD_Receive = 0x08; // activates the receiver circuits.\n    this.PCD_Transceive = 0x0c; // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission.\n    // this.PCD_Reserved0Dh = 0x0D;\n    this.PCD_MFAuthent = 0x0e; // performs the MIFARE standard authentication as a reader.\n    this.PCD_SoftReset = 0x0f; // resets the MFRC522.\n\n    // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).\n    // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf\n    this.RxGain_18dB = 0x00 << 4; // 000b - 18 dB, minimum.\n    this.RxGain_23dB = 0x01 << 4; // 001b - 23 dB.\n    this.RxGain_18dB_2 = 0x02 << 4; // 010b - 18 dB, it seems 010b is a duplicate for 000b.\n    this.RxGain_23dB_2 = 0x03 << 4; // 011b - 23 dB, it seems 011b is a duplicate for 001b.\n    this.RxGain_33dB = 0x04 << 4; // 100b - 33 dB, average, and typical default.\n    this.RxGain_38dB = 0x05 << 4; // 101b - 38 dB.\n    this.RxGain_43dB = 0x06 << 4; // 110b - 43 dB.\n    this.RxGain_48dB = 0x07 << 4; // 111b - 48 dB, maximum.\n    this.RxGain_min = 0x00 << 4; // 000b - 18 dB, minimum, convenience for RxGain_18dB.\n    this.RxGain_avg = 0x04 << 4; // 100b - 33 dB, average, convenience for RxGain_33dB.\n    this.RxGain_max = 0x07 << 4; // 111b - 48 dB, maximum, convenience for RxGain_48dB.\n\n    // The PICC commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4).\n    this.PICC_REQA = 0x26; // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.\n    this.PICC_WUPA = 0x52; // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.\n    this.PICC_CT = 0x88; // Cascade Tag. Not really a command, but used during anti collision.\n    this.PICC_SEL_CL1 = 0x93; // Anti collision/Select, Cascade Level 1.\n    this.PICC_SEL_CL2 = 0x95; // Anti collision/Select, Cascade Level 2.\n    this.PICC_SEL_CL3 = 0x97; // Anti collision/Select, Cascade Level 3.\n    this.PICC_HLTA = 0x50; // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.\n    this.PICC_RATS = 0xe0; // Request command for Answer To Reset.\n    // The commands used for MIFARE Classic (from http://www.mouser.com/ds/2/302/MF1S503x-89574.pdf, Section 9)\n    // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.\n    // The read/write commands can also be used for MIFARE Ultralight.\n    this.PICC_AUTH_KEYA = 0x60; // Perform authentication with Key A.\n    this.PICC_AUTH_KEYB = 0x61; // Perform authentication with Key B.\n    this.PICC_READ = 0x30; // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.\n    this.PICC_WRITE = 0xa0; // Writes one 16 byte block to the authenticated sector of the PICC. Called \"COMPATIBILITY WRITE\" for MIFARE Ultralight.\n    this.PICC_DECREMENT = 0xc0; // Decrements the contents of a block and stores the result in the internal data register.\n    this.PICC_INCREMENT = 0xc1; // Increments the contents of a block and stores the result in the internal data register.\n    this.PICC_RESTORE = 0xc2; // Reads the contents of a block into the internal data register.\n    this.PICC_TRANSFER = 0xb0; // Writes the contents of the internal data register to a block.\n    // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)\n    // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.\n    this.PICC_UL_WRITE = 0xa2; // Writes one 4 byte page to the PICC.\n\n    this.PICC_SElECTTAG = 0x93;\n\n    // Page 0: Command and status\n    // this.Reserved00h = 0x00;\n    this.CommandReg = 0x01;\n    this.ComlEnReg = 0x02;\n    this.DivlEnReg = 0x03;\n    this.ComIrqReg = 0x04;\n    this.DivIrqReg = 0x05;\n    this.ErrorReg = 0x06;\n    this.Status1Reg = 0x07;\n    this.Status2Reg = 0x08;\n    this.FIFODataReg = 0x09;\n    this.FIFOLevelReg = 0x0a;\n    this.WaterLevelReg = 0x0b;\n    this.ControlReg = 0x0c;\n    this.BitFramingReg = 0x0d;\n    this.CollReg = 0x0e;\n    // this.Reserved0Fh = 0x0F;\n\n    // Page 1: Command\n    // this.Reserved10h = 0x10;\n    this.ModeReg = 0x11;\n    this.TxModeReg = 0x12;\n    this.RxModeReg = 0x13;\n    this.TxControlReg = 0x14;\n    this.TxASKReg = 0x15;\n    this.TxSelReg = 0x16;\n    this.RxSelReg = 0x17;\n    this.RxThresholdReg = 0x18;\n    this.DemodReg = 0x19;\n    this.Reserved1Ah = 0x1a;\n    this.Reserved1Bh = 0x1b;\n    this.MfTxReg = 0x1c;\n    this.MfRxReg = 0x1d;\n    this.Reserved1Eh = 0x1e;\n    this.SerialSpeedReg = 0x1f;\n\n    // Page 2: Configuration\n    // this.Reserved20h = 0x20;\n    this.CRCResultRegMSB = 0x21;\n    this.CRCResultRegLSB = 0x22;\n    // this.Reserved23h = 0x23;\n    this.ModWidthReg = 0x24;\n    // this.Reserved25h = 0x25;\n    this.RFCfgReg = 0x26;\n    this.GsNReg = 0x27;\n    this.CWGsPReg = 0x28;\n    this.ModGsPReg = 0x29;\n    this.TModeReg = 0x2a;\n    this.TPrescalerReg = 0x2b;\n    this.TReloadRegHi = 0x2c;\n    this.TReloadRegLo = 0x2d;\n    this.TCounterValRegHi = 0x2e;\n    this.TCounterValRegLo = 0x2f;\n\n    // Page 3: Test register\n    // this.Reserved30h = 0x30;\n    this.TestSel1Reg = 0x31;\n    this.TestSel2Reg = 0x32;\n    this.TestPinEnReg = 0x33;\n    this.TestPinValueReg = 0x34;\n    this.TestBusReg = 0x35;\n    this.AutoTestReg = 0x36;\n    this.VersionReg = 0x37;\n    this.AnalogTestReg = 0x38;\n    this.TestDAC1Reg = 0x39;\n    this.TestDAC2Reg = 0x3a;\n    this.TestADCReg = 0x3b;\n    // this.Reserved3Ch = 0x3C;\n    // this.Reserved3Dh = 0x3D;\n    // this.Reserved3Eh = 0x3E;\n    // this.Reserved3Fh = 0x3F;\n\n    // required pin of obniz\n    this.keys = [\n      \"cs\",\n      \"clk\",\n      \"mosi\",\n      \"miso\",\n      \"rst\",\n      \"vcc\",\n      \"gnd\",\n      \"spi\",\n      \"spi_frequency\",\n    ];\n    this.requiredKeys = [\"cs\", \"mosi\", \"miso\", \"rst\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    // IO pin settings\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.rst = obniz.getIO(this.params.rst);\n    // SPI settings\n    this.cs = obniz.getIO(this.params.cs);\n    this.cs.output(true);\n    this.params.mode = \"master\";\n    this.params.drive = \"3v\";\n    this.params.pull = \"3v\";\n    this.params.frequency = this.params.spi_frequency || 5 * 1000 * 1000;\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n  }\n\n  public async init() {\n    // Initializes the MFRC522 chip\n    // Hardware and Software reset\n    this.rst.output(false);\n    await this.obniz.wait(50); // 8.8.2 says the oscillator start-up time is the start up time of the crystal + 37,74us: 50ms.\n    this.rst.output(true);\n    this.writeRegister(this.CommandReg, this.PCD_SoftReset);\n\n    // Timer setup: When communicating with a PICC we need a timeout if something goes wrong.\n    // f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].\n    this.writeRegister(this.TModeReg, 0x80); // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds\n    this.writeRegister(this.TPrescalerReg, 0xa9); // TPreScaler = TModeReg[3..0]: TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.\n    this.writeRegister(this.TReloadRegHi, 0x03);\n    this.writeRegister(this.TReloadRegLo, 0xe8); // Reload timer with 0x3E8 = 1000, ie. 25ms before timeout\n    this.writeRegister(this.TxASKReg, 0x40); // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting\n    this.writeRegister(this.ModeReg, 0x3d); // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (6.2.4)\n    await this.antennaOn(); // Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)\n  }\n\n  public writeRegister(addr: number, val: any) {\n    let data: any;\n    if (val instanceof Array) {\n      // If val is Array\n      data = [(addr << 1) & 0x7e].concat(val);\n    } else {\n      data = [(addr << 1) & 0x7e, val];\n    }\n    this.cs.output(false);\n    this.spi.write(data);\n    this.cs.output(true);\n  }\n\n  public async readRegister(addr: number) {\n    const data = [((addr << 1) & 0x7e) | 0x80, 0];\n    this.cs.output(false);\n    const response = await this.spi.writeWait(data);\n    this.cs.output(true);\n    return response[1];\n  }\n\n  public async readRegister_nByte(addr: any, n?: any): Promise<number[]> {\n    const dataArray: any = [];\n    if (addr instanceof Array) {\n      // Multiple addresses(If addr is Array)\n      for (let i = 0; i < addr.length; i++) {\n        dataArray.push(((addr[i] << 1) & 0x7e) | 0x80);\n      }\n    } else {\n      // Single address & read n times\n      for (let i = 0; i < n; i++) {\n        dataArray.push(((addr << 1) & 0x7e) | 0x80);\n      }\n    }\n    dataArray.push(0); // End reading\n    this.cs.output(false);\n    const values = await this.spi.writeWait(dataArray);\n    this.cs.output(true);\n    values.shift();\n    return values;\n  }\n\n  public async setRegisterBitMask(reg: any, mask: any) {\n    const response: any = await this.readRegister(reg);\n    this.writeRegister(reg, response | mask);\n  }\n\n  public async clearRegisterBitMask(reg: any, mask: any) {\n    const response: any = await this.readRegister(reg);\n    this.writeRegister(reg, response & ~mask);\n  }\n\n  public async antennaOn() {\n    // Turns the antenna on by enabling pins TX1 and TX2\n    const response: any = await this.readRegister(this.TxControlReg);\n    if ((response & 0x03) !== 0x03) {\n      // If TX1 and TX2 down\n      await this.setRegisterBitMask(this.TxControlReg, response | 0x03);\n    }\n  }\n\n  public async antennaOff() {\n    // Turns the antenna off by disabling pins TX1 and TX2\n    await this.clearRegisterBitMask(this.TxControlReg, 0x03);\n  }\n\n  // RC522 and ISO14443 card communication\n  public async toCard(command: any, bitsToSend: any): Promise<{\n    status: boolean;\n    data: any;\n    bitSize: number;\n  }> {\n    let data: any = [];\n    let bitSize: any = 0;\n    let status: any = ERROR;\n    let irqEn: any = 0x00;\n    let waitIRq: any = 0x00;\n\n    if (command === this.PCD_MFAuthent) {\n      irqEn = 0x12;\n      waitIRq = 0x10;\n    }\n    if (command === this.PCD_Transceive) {\n      irqEn = 0x77;\n      waitIRq = 0x30;\n    }\n\n    this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command\n    this.writeRegister(this.ComlEnReg, irqEn | 0x80); // Interrupt request is enabled\n    this.writeRegister(this.ComIrqReg, 0x7f); // Clear all seven interrupt request bits\n    this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization\n    this.writeRegister(this.FIFODataReg, bitsToSend); // Write sendData to the FIFO\n    this.writeRegister(this.CommandReg, command); // Execute the command\n\n    if (command === this.PCD_Transceive) {\n      await this.setRegisterBitMask(this.BitFramingReg, 0x80); // StartSend=1, transmission of data starts\n    }\n\n    let TryingTimes: any = 10;\n    let n: any = 0;\n    do {\n      // Wait for the received data complete\n      n = await this.readRegister(this.ComIrqReg);\n      TryingTimes--;\n    } while (TryingTimes !== 0 && !(n & 0x01) && !(n & waitIRq)); // !(Timer interrupt - nothing received before timeout) & !(One of the interrupts that signal success has been set)\n\n    // await this.clearRegisterBitMask(this.BitFramingReg, 0x80);\t//Reset with resetAndInit()\n\n    const response: any = await this.readRegister_nByte([\n      this.ErrorReg,\n      this.FIFOLevelReg,\n      this.ControlReg,\n    ]);\n\n    if (TryingTimes !== 0) {\n      if ((response[0] & 0x1b) === 0x00) {\n        // BufferOvfl CollErr ParityErr ProtocolErr\n        status = n & irqEn & 0x01 ? ERROR : OK;\n\n        if (command === this.PCD_Transceive) {\n          n = response[1]; // Number of bytes in the FIFO\n          const lastBits: any = response[2] & 0x07; // RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.\n          if (lastBits) {\n            bitSize = (n - 1) * 8 + lastBits;\n          } else {\n            bitSize = n * 8;\n          }\n          if (n === 0) {\n            n = 1;\n          }\n          if (n > 16) {\n            n = 16;\n          } // Restrict until 16bytes\n          data = await this.readRegister_nByte(this.FIFODataReg, n); // Get received data from FIFO buffer\n        }\n      } else {\n        status = ERROR;\n      }\n    }\n    return {status, data, bitSize};\n  }\n\n  public async findCardWait(): Promise<{\n    uid: any;\n    PICC_Type: string;\n  }> {\n    await this.init();\n    await this.searchTagWait();\n    const uid: any = await this.getUidWait();\n    const PICC_Type: any = await this.identifyCardTypeWait(uid);\n    return {uid, PICC_Type};\n  }\n\n  public async searchTagWait() {\n    this.writeRegister(this.BitFramingReg, 0x07);\n    const tagType: any = [this.PICC_REQA];\n\n    const response: any = await this.toCard(this.PCD_Transceive, tagType);\n    if (response.bitSize !== 0x10) {\n      throw new Error(\"card_search_ERROR\");\n    }\n  }\n\n  public async getUidWait(): Promise<any> {\n    this.writeRegister(this.BitFramingReg, 0x00);\n    let uid: any = [this.PICC_SEL_CL1, 0x20];\n\n    const response: any = await this.toCard(this.PCD_Transceive, uid);\n    if (!response.status) {\n      throw new Error(\"uid_scan_ERROR\");\n    }\n    const uidCheck: any =\n      response.data[0] ^ response.data[1] ^ response.data[2] ^ response.data[3];\n    if (uidCheck !== response.data[4]) {\n      throw new Error(\"uid_check_ERROR\");\n    }\n    uid = response.data;\n    // (uid).pop();\n    return uid;\n  }\n\n  public async calculateCRCWait(data: any) {\n    this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command\n    this.writeRegister(this.DivIrqReg, 0x04); // Clear the CRCIRq interrupt request bit\n    this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization\n    this.writeRegister(this.FIFODataReg, data); // Write data to the FIFO\n    this.writeRegister(this.CommandReg, this.PCD_CalcCRC); // Start the calculation\n\n    let i: any = 0xff;\n    let n: any;\n    // Wait for the CRC calculation to complete\n    do {\n      n = await this.readRegister(this.DivIrqReg);\n      i--;\n    } while (i !== 0 && !(n & 0x04)); // CRCIrq = 1 (Calculation done)\n    // CRC calculation result\n    return await this.readRegister_nByte([\n      this.CRCResultRegLSB,\n      this.CRCResultRegMSB,\n    ]);\n  }\n\n  public async identifySoftwareWait() {\n    let version: any = await this.readRegister(this.VersionReg);\n    switch (version) {\n      case 0x88:\n        version = \"(clone)\";\n        break;\n      case 0x90:\n        version = \"v0.0\";\n        break;\n      case 0x91:\n        version = \"v1.0\";\n        break;\n      case 0x92:\n        version = \"v2.0\";\n        break;\n      case 0x12:\n        version = \"counterfeit chip\";\n        break;\n      default:\n        version = \"(unknown)\";\n    }\n    // When 0x00 or 0xFF is returned, communication probably failed\n    if (version === 0x00 || version === 0xff) {\n      throw new Error(\"software_version_ERROR\");\n    }\n    return version;\n  }\n\n  public async identifyCardTypeWait(uid: any) {\n    // Identify type of the scanned card\n    let buffer: any = [this.PICC_SElECTTAG, 0x70].concat(uid);\n    buffer = buffer.concat(await this.calculateCRCWait(buffer));\n    const response: any = await this.toCard(this.PCD_Transceive, buffer);\n    let PICC_Type: any;\n    if (response.status && response.bitSize === 0x18) {\n      PICC_Type = response.data[0];\n    }\n    switch (PICC_Type) {\n      case 0x04:\n        PICC_Type = \"SAK indicates UID is not complete.\";\n        break; // UID not complete\n      case 0x09:\n        PICC_Type = \"MIFARE Mini, 320 bytes\";\n        break;\n      case 0x08:\n        PICC_Type = \"MIFARE 1KB\";\n        break;\n      case 0x18:\n        PICC_Type = \"MIFARE 4KB\";\n        break;\n      case 0x00:\n        PICC_Type = \"MIFARE Ultralight or Ultralight C\";\n        break;\n      case 0x11:\n        PICC_Type = \"MIFARE Plus\";\n        break;\n      case 0x01:\n        PICC_Type = \"MIFARE TNP3XXX\";\n        break;\n      case 0x20:\n        PICC_Type = \"PICC compliant with ISO/IEC 14443-4\";\n        break;\n      case 0x40:\n        PICC_Type = \"PICC compliant with ISO/IEC 18092 (NFC)\";\n        break;\n      default:\n        throw new Error(\"PICC_type_ERROR\");\n    }\n    return PICC_Type;\n  }\n\n  public async readSectorDataWait(Sector: any, uid: any) {\n    await this.authenticateSectorWait(Sector, uid);\n    return await this.getSectorDataWait(Sector);\n  }\n\n  public async readBlockDataWait(Block: any, uid: any) {\n    await this.authenticateBlockWait(Block, uid);\n    return await this.getBlockDataWait(Block);\n  }\n\n  public async authenticateSectorWait(Sector: any, uid: any) {\n    /* Password authentication mode (A or B)\n\t\t * PICC_AUTH_KEYA = Verify the A key are the first 6 bit of 4th Block of each sector\n\t\t * PICC_AUTH_KEYB = Verify the B key are the last 6 bit of 4th Block of each sector\n\t\t */\n    const KEY_A: any = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];\n    // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n    const Block: any = Sector * 4;\n    let buffer: any = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF\n    uid = uid.slice(0, 4); // Append the first 4 bit of the UID\n    buffer = buffer.concat(uid); // 12byte\n    // Start authentication itself\n    await this.toCard(this.PCD_MFAuthent, buffer);\n    if (!((await this.readRegister(this.Status2Reg)) & 0x08)) {\n      throw new Error(\"password_authentication_ERROR\");\n    }\n  }\n\n  public async authenticateBlockWait(Block: any, uid: any) {\n    /* Password authentication mode (A or B)\n\t\t * PICC_AUTH_KEYA = Verify the A key (the first 6 bit of 3th Block fo each Sector)\n\t\t * PICC_AUTH_KEYB = Verify the B key (the last 6 bit of 3th Block fo each Sector)\n\t\t */\n    const KEY_A: any = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];\n    // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n    let buffer: any = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF\n    uid = uid.slice(0, 4); // Append the first 4 bit of the UID\n    buffer = buffer.concat(uid); // 12byte\n\n    // Start authentication itself\n    await this.toCard(this.PCD_MFAuthent, buffer);\n    if (!((await this.readRegister(this.Status2Reg)) & 0x08)) {\n      throw new Error(\"password_authentication_ERROR\");\n    }\n  }\n\n  public async readAgainWait() {\n    // If you finish reading and want to read again, this can use instead of init()\n    await this.clearRegisterBitMask(this.Status2Reg, 0x08);\n  }\n\n  public async getSectorDataWait(address: any) {\n    const response: any = [];\n    const blockData: any = [];\n    for (let i = 0; i < 4; i++) {\n      let request: any = [this.PICC_READ, address * 4 + i];\n      request = request.concat(await this.calculateCRCWait(request));\n      response[i] = await this.toCard(this.PCD_Transceive, request);\n      if (!response[i].status) {\n        throw new Error(\"data_read_ERROR\");\n      }\n      blockData[i] = response[i].data;\n    }\n    return blockData;\n  }\n\n  public async getBlockDataWait(address: any): Promise<{\n    status: boolean;\n    data: any;\n    bitSize: number;\n  }> {\n    let request: any = [this.PICC_READ, address];\n    request = request.concat(await this.calculateCRCWait(request));\n    const response: any = await this.toCard(this.PCD_Transceive, request);\n    if (!response.status) {\n      throw new Error(\"data_read_ERROR\");\n    }\n    return response.data;\n  }\n\n  public async appendCRCtoBufferAndSendToCardWait(buffer: any): Promise<{\n    status: boolean;\n    data: any;\n    bitSize: number;\n  }> {\n    buffer = buffer.concat(await this.calculateCRCWait(buffer));\n    const response: any = await this.toCard(this.PCD_Transceive, buffer);\n    if (\n      !response.status ||\n      response.bitSize !== 4 ||\n      (response.data[0] & 0x0f) !== 0x0a\n    ) {\n      response.status = ERROR;\n    }\n    return response;\n  }\n\n  public async writeBlockDataWait(Block: any, sixteenBytes: any): Promise<void> {\n    if (Block === 0 || Block % 4 === 3) {\n      throw new Error(\"deny_Write\");\n    }\n    const buffer: any = [this.PICC_WRITE, Block];\n    let response: any = await this.appendCRCtoBufferAndSendToCardWait(buffer);\n    if (response.status) {\n      response = await this.appendCRCtoBufferAndSendToCardWait(sixteenBytes);\n    } else {\n      throw new Error(\"data_write_ERROR\");\n    }\n  }\n}\n"]}