{"version":3,"sources":["../src/parts/Wireless/RN42/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,WAAW;IAC1B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,eAAe,GACvB,OAAO,GACP,QAAQ,GACR,SAAS,GACT,qBAAqB,GACrB,kBAAkB,GAClB,kBAAkB,GAClB,SAAS,CAAC;AACd,oBAAY,kBAAkB,GAAG,KAAK,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,aAAa,GAAG,KAAK,GAAG,KAAK,CAAC;AAC3G,oBAAY,eAAe,GAAG,MAAM,GAAG,cAAc,GAAG,WAAW,GAAG,SAAS,CAAC;AAChF,oBAAY,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAE7D,MAAM,WAAW,UAAU;IACzB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,YAAY,CAAC,EAAE,eAAe,CAAC;IAC/B,OAAO,CAAC,EAAE,kBAAkB,CAAC;IAC7B,IAAI,CAAC,EAAE,eAAe,CAAC;IACvB,KAAK,CAAC,EAAE,gBAAgB,CAAC;IACzB,QAAQ,CAAC,EAAE,GAAG,CAAC;CAChB;AAED,MAAM,CAAC,OAAO,OAAO,IAAK,YAAW,mBAAmB;WAExC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAErD,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,IAAI,CAAkB;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IA2BlB,IAAI,CAAC,IAAI,EAAE,GAAG;IAId,WAAW,CAAC,IAAI,EAAE,GAAG;IAKrB,gBAAgB;IAKhB,MAAM,CAAC,IAAI,EAAE,UAAU;IA8BvB,aAAa;IAIb,kBAAkB,CAAC,IAAI,EAAE,GAAG;IA4B5B,kBAAkB,CAAC,IAAI,EAAE,GAAG;IAK5B,cAAc,CAAC,IAAI,EAAE,GAAG;IAIxB,cAAc,CAAC,IAAI,EAAE,GAAG;IA4BxB,uBAAuB;IAIvB,WAAW,CAAC,IAAI,EAAE,GAAG;IAoBrB,YAAY,CAAC,GAAG,EAAE,GAAG;IAqBrB,kBAAkB;IAIlB,wBAAwB;CAGhC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface RN42Options {\r\n  tx: number;\r\n  rx: number;\r\n  gnd?: number;\r\n}\r\n\r\nexport type RN42Config_Mode =\r\n  | \"slave\"\r\n  | \"master\"\r\n  | \"trigger\"\r\n  | \"auto-connect-master\"\r\n  | \"auto-connect-dtr\"\r\n  | \"auto-connect-any\"\r\n  | \"pairing\";\r\nexport type RN42Config_Profile = \"SPP\" | \"DUN-DCE\" | \"DUN-DTE\" | \"MDM-SPP\" | \"SPP-DUN-DCE\" | \"APL\" | \"HID\";\r\nexport type RN42Config_Auth = \"open\" | \"ssp-keyboard\" | \"just-work\" | \"pincode\";\r\nexport type RN43Config_Power = 16 | 12 | 8 | 4 | 0 | -4 | -8;\r\n\r\nexport interface RN42Config {\r\n  display_name?: string;\r\n  master_slave?: RN42Config_Mode;\r\n  profile?: RN42Config_Profile;\r\n  auth?: RN42Config_Auth;\r\n  power?: RN43Config_Power;\r\n  hid_flag?: any;\r\n}\r\n\r\nexport default class RN42 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"RN42\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public onreceive?: (data: any, text: string) => void;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private uart!: PeripheralUART;\r\n\r\n  constructor() {\r\n    this.keys = [\"tx\", \"rx\", \"gnd\"];\r\n    this.requiredKeys = [\"tx\", \"rx\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    if (obniz.isValidIO(this.params.gnd)) {\r\n      obniz.getIO(this.params.gnd).output(false);\r\n    }\r\n\r\n    this.uart = obniz.getFreeUart();\r\n\r\n    this.uart.start({\r\n      tx: this.params.tx,\r\n      rx: this.params.rx,\r\n      baud: 115200,\r\n      drive: \"3v\",\r\n    });\r\n\r\n    this.uart.onreceive = (data: any, text: any) => {\r\n      // this is not perfect. separation is possible.\r\n      if (text.indexOf(\"CONNECT\") >= 0) {\r\n        // console.log(\"connected\");\r\n      } else if (text.indexOf(\"DISCONNECT\") >= 0) {\r\n        // console.log(\"disconnected\");\r\n      }\r\n      if (typeof this.onreceive === \"function\") {\r\n        this.onreceive(data, text);\r\n      }\r\n    };\r\n  }\r\n\r\n  public send(data: any) {\r\n    this.uart.send(data);\r\n  }\r\n\r\n  public sendCommand(data: any) {\r\n    this.uart.send(data + \"\\n\");\r\n    this.obniz.wait(100);\r\n  }\r\n\r\n  public enterCommandMode() {\r\n    this.send(\"$$$\");\r\n    this.obniz.wait(100);\r\n  }\r\n\r\n  public config(json: RN42Config) {\r\n    this.enterCommandMode();\r\n    if (typeof json !== \"object\") {\r\n      // TODO: warning\r\n      return;\r\n    }\r\n    // remove noize data\r\n    this.sendCommand(\"\");\r\n\r\n    if (json.master_slave) {\r\n      this.config_masterslave(json.master_slave);\r\n    }\r\n    if (json.auth) {\r\n      this.config_auth(json.auth);\r\n    }\r\n    if (json.hid_flag) {\r\n      this.config_HIDflag(json.hid_flag);\r\n    }\r\n    if (json.profile) {\r\n      this.config_profile(json.profile);\r\n    }\r\n    if (json.power) {\r\n      this.config_power(json.power);\r\n    }\r\n    if (json.display_name) {\r\n      this.config_displayName(json.display_name);\r\n    }\r\n    this.config_reboot();\r\n  }\r\n\r\n  public config_reboot() {\r\n    this.sendCommand(\"R,1\");\r\n  }\r\n\r\n  public config_masterslave(mode: any) {\r\n    let val: any = -1;\r\n    if (typeof mode === \"number\") {\r\n      val = mode;\r\n    } else if (typeof mode === \"string\") {\r\n      const modes: any = [\r\n        \"slave\",\r\n        \"master\",\r\n        \"trigger\",\r\n        \"auto-connect-master\",\r\n        \"auto-connect-dtr\",\r\n        \"auto-connect-any\",\r\n        \"pairing\",\r\n      ];\r\n      for (let i = 0; i < modes.length; i++) {\r\n        if (modes[i] === mode) {\r\n          val = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (val === -1) {\r\n      // TODO: warning\r\n      return;\r\n    }\r\n    this.sendCommand(\"SM,\" + val);\r\n  }\r\n\r\n  public config_displayName(name: any) {\r\n    this.sendCommand(\"SN,\" + name);\r\n  }\r\n\r\n  // // SH,0200 HID Flag register. Descriptor=keyboard\r\n  public config_HIDflag(flag: any) {\r\n    this.sendCommand(\"SH,\" + flag);\r\n  }\r\n\r\n  public config_profile(mode: any) {\r\n    let val: any = -1;\r\n    if (typeof mode === \"number\") {\r\n      val = mode;\r\n    } else if (typeof mode === \"string\") {\r\n      const modes: any = [\r\n        \"SPP\",\r\n        \"DUN-DCE\",\r\n        \"DUN-DTE\",\r\n        \"MDM-SPP\",\r\n        \"SPP-DUN-DCE\",\r\n        \"APL\",\r\n        \"HID\",\r\n      ];\r\n      for (let i = 0; i < modes.length; i++) {\r\n        if (modes[i] === mode) {\r\n          val = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (val === -1) {\r\n      // TODO: warning\r\n      return;\r\n    }\r\n    this.sendCommand(\"S~,\" + val);\r\n  }\r\n\r\n  public config_revert_localecho() {\r\n    this.sendCommand(\"+\");\r\n  }\r\n\r\n  public config_auth(mode: any) {\r\n    let val: any = -1;\r\n    if (typeof mode === \"number\") {\r\n      val = mode;\r\n    } else if (typeof mode === \"string\") {\r\n      const modes: any = [\"open\", \"ssp-keyboard\", \"just-work\", \"pincode\"];\r\n      for (let i = 0; i < modes.length; i++) {\r\n        if (modes[i] === mode) {\r\n          val = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (val === -1) {\r\n      // TODO: warning\r\n      return;\r\n    }\r\n    this.sendCommand(\"SA,\" + val);\r\n  }\r\n\r\n  public config_power(dbm: any) {\r\n    let val: any = \"0010\";\r\n    if (16 > dbm && dbm >= 12) {\r\n      val = \"000C\";\r\n    } else if (12 > dbm && dbm >= 8) {\r\n      val = \"0008\";\r\n    } else if (8 > dbm && dbm >= 4) {\r\n      val = \"0004\";\r\n    } else if (4 > dbm && dbm >= 0) {\r\n      val = \"0000\";\r\n    } else if (0 > dbm && dbm >= -4) {\r\n      val = \"FFFC\";\r\n    } else if (-4 > dbm && dbm >= -8) {\r\n      val = \"FFF8\";\r\n    } else if (-8 > dbm) {\r\n      val = \"FFF4\";\r\n    }\r\n\r\n    this.sendCommand(\"SY,\" + val);\r\n  }\r\n\r\n  public config_get_setting() {\r\n    this.sendCommand(\"D\");\r\n  }\r\n\r\n  public config_get_extendSetting() {\r\n    this.sendCommand(\"E\");\r\n  }\r\n}\r\n"]}