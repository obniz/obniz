{"version":3,"sources":["../src/parts/Wireless/RN42/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,WAAW;IAC1B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,eAAe,GACvB,OAAO,GACP,QAAQ,GACR,SAAS,GACT,qBAAqB,GACrB,kBAAkB,GAClB,kBAAkB,GAClB,SAAS,CAAC;AACd,oBAAY,kBAAkB,GAAG,KAAK,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,aAAa,GAAG,KAAK,GAAG,KAAK,CAAC;AAC3G,oBAAY,eAAe,GAAG,MAAM,GAAG,cAAc,GAAG,WAAW,GAAG,SAAS,CAAC;AAChF,oBAAY,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAE7D,MAAM,WAAW,UAAU;IACzB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,YAAY,CAAC,EAAE,eAAe,CAAC;IAC/B,OAAO,CAAC,EAAE,kBAAkB,CAAC;IAC7B,IAAI,CAAC,EAAE,eAAe,CAAC;IACvB,KAAK,CAAC,EAAE,gBAAgB,CAAC;IACzB,QAAQ,CAAC,EAAE,GAAG,CAAC;CAChB;AAED,MAAM,CAAC,OAAO,OAAO,IAAK,YAAW,mBAAmB;WAExC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAErD,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,IAAI,CAAkB;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IA2BlB,IAAI,CAAC,IAAI,EAAE,GAAG;IAId,WAAW,CAAC,IAAI,EAAE,GAAG;IAKrB,gBAAgB;IAKhB,MAAM,CAAC,IAAI,EAAE,UAAU;IA8BvB,aAAa;IAIb,kBAAkB,CAAC,IAAI,EAAE,GAAG;IA4B5B,kBAAkB,CAAC,IAAI,EAAE,GAAG;IAK5B,cAAc,CAAC,IAAI,EAAE,GAAG;IAIxB,cAAc,CAAC,IAAI,EAAE,GAAG;IA4BxB,uBAAuB;IAIvB,WAAW,CAAC,IAAI,EAAE,GAAG;IAoBrB,YAAY,CAAC,GAAG,EAAE,GAAG;IAqBrB,kBAAkB;IAIlB,wBAAwB;CAGhC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface RN42Options {\n  tx: number;\n  rx: number;\n  gnd?: number;\n}\n\nexport type RN42Config_Mode =\n  | \"slave\"\n  | \"master\"\n  | \"trigger\"\n  | \"auto-connect-master\"\n  | \"auto-connect-dtr\"\n  | \"auto-connect-any\"\n  | \"pairing\";\nexport type RN42Config_Profile = \"SPP\" | \"DUN-DCE\" | \"DUN-DTE\" | \"MDM-SPP\" | \"SPP-DUN-DCE\" | \"APL\" | \"HID\";\nexport type RN42Config_Auth = \"open\" | \"ssp-keyboard\" | \"just-work\" | \"pincode\";\nexport type RN43Config_Power = 16 | 12 | 8 | 4 | 0 | -4 | -8;\n\nexport interface RN42Config {\n  display_name?: string;\n  master_slave?: RN42Config_Mode;\n  profile?: RN42Config_Profile;\n  auth?: RN42Config_Auth;\n  power?: RN43Config_Power;\n  hid_flag?: any;\n}\n\nexport default class RN42 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"RN42\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public onreceive?: (data: any, text: string) => void;\n\n  protected obniz!: Obniz;\n\n  private uart!: PeripheralUART;\n\n  constructor() {\n    this.keys = [\"tx\", \"rx\", \"gnd\"];\n    this.requiredKeys = [\"tx\", \"rx\"];\n  }\n\n  public wired(obniz: Obniz) {\n    if (obniz.isValidIO(this.params.gnd)) {\n      obniz.getIO(this.params.gnd).output(false);\n    }\n\n    this.uart = obniz.getFreeUart();\n\n    this.uart.start({\n      tx: this.params.tx,\n      rx: this.params.rx,\n      baud: 115200,\n      drive: \"3v\",\n    });\n\n    this.uart.onreceive = (data: any, text: any) => {\n      // this is not perfect. separation is possible.\n      if (text.indexOf(\"CONNECT\") >= 0) {\n        // console.log(\"connected\");\n      } else if (text.indexOf(\"DISCONNECT\") >= 0) {\n        // console.log(\"disconnected\");\n      }\n      if (typeof this.onreceive === \"function\") {\n        this.onreceive(data, text);\n      }\n    };\n  }\n\n  public send(data: any) {\n    this.uart.send(data);\n  }\n\n  public sendCommand(data: any) {\n    this.uart.send(data + \"\\n\");\n    this.obniz.wait(100);\n  }\n\n  public enterCommandMode() {\n    this.send(\"$$$\");\n    this.obniz.wait(100);\n  }\n\n  public config(json: RN42Config) {\n    this.enterCommandMode();\n    if (typeof json !== \"object\") {\n      // TODO: warning\n      return;\n    }\n    // remove noize data\n    this.sendCommand(\"\");\n\n    if (json.master_slave) {\n      this.config_masterslave(json.master_slave);\n    }\n    if (json.auth) {\n      this.config_auth(json.auth);\n    }\n    if (json.hid_flag) {\n      this.config_HIDflag(json.hid_flag);\n    }\n    if (json.profile) {\n      this.config_profile(json.profile);\n    }\n    if (json.power) {\n      this.config_power(json.power);\n    }\n    if (json.display_name) {\n      this.config_displayName(json.display_name);\n    }\n    this.config_reboot();\n  }\n\n  public config_reboot() {\n    this.sendCommand(\"R,1\");\n  }\n\n  public config_masterslave(mode: any) {\n    let val: any = -1;\n    if (typeof mode === \"number\") {\n      val = mode;\n    } else if (typeof mode === \"string\") {\n      const modes: any = [\n        \"slave\",\n        \"master\",\n        \"trigger\",\n        \"auto-connect-master\",\n        \"auto-connect-dtr\",\n        \"auto-connect-any\",\n        \"pairing\",\n      ];\n      for (let i = 0; i < modes.length; i++) {\n        if (modes[i] === mode) {\n          val = i;\n          break;\n        }\n      }\n    }\n    if (val === -1) {\n      // TODO: warning\n      return;\n    }\n    this.sendCommand(\"SM,\" + val);\n  }\n\n  public config_displayName(name: any) {\n    this.sendCommand(\"SN,\" + name);\n  }\n\n  // // SH,0200 HID Flag register. Descriptor=keyboard\n  public config_HIDflag(flag: any) {\n    this.sendCommand(\"SH,\" + flag);\n  }\n\n  public config_profile(mode: any) {\n    let val: any = -1;\n    if (typeof mode === \"number\") {\n      val = mode;\n    } else if (typeof mode === \"string\") {\n      const modes: any = [\n        \"SPP\",\n        \"DUN-DCE\",\n        \"DUN-DTE\",\n        \"MDM-SPP\",\n        \"SPP-DUN-DCE\",\n        \"APL\",\n        \"HID\",\n      ];\n      for (let i = 0; i < modes.length; i++) {\n        if (modes[i] === mode) {\n          val = i;\n          break;\n        }\n      }\n    }\n    if (val === -1) {\n      // TODO: warning\n      return;\n    }\n    this.sendCommand(\"S~,\" + val);\n  }\n\n  public config_revert_localecho() {\n    this.sendCommand(\"+\");\n  }\n\n  public config_auth(mode: any) {\n    let val: any = -1;\n    if (typeof mode === \"number\") {\n      val = mode;\n    } else if (typeof mode === \"string\") {\n      const modes: any = [\"open\", \"ssp-keyboard\", \"just-work\", \"pincode\"];\n      for (let i = 0; i < modes.length; i++) {\n        if (modes[i] === mode) {\n          val = i;\n          break;\n        }\n      }\n    }\n    if (val === -1) {\n      // TODO: warning\n      return;\n    }\n    this.sendCommand(\"SA,\" + val);\n  }\n\n  public config_power(dbm: any) {\n    let val: any = \"0010\";\n    if (16 > dbm && dbm >= 12) {\n      val = \"000C\";\n    } else if (12 > dbm && dbm >= 8) {\n      val = \"0008\";\n    } else if (8 > dbm && dbm >= 4) {\n      val = \"0004\";\n    } else if (4 > dbm && dbm >= 0) {\n      val = \"0000\";\n    } else if (0 > dbm && dbm >= -4) {\n      val = \"FFFC\";\n    } else if (-4 > dbm && dbm >= -8) {\n      val = \"FFF8\";\n    } else if (-8 > dbm) {\n      val = \"FFF4\";\n    }\n\n    this.sendCommand(\"SY,\" + val);\n  }\n\n  public config_get_setting() {\n    this.sendCommand(\"D\");\n  }\n\n  public config_get_extendSetting() {\n    this.sendCommand(\"E\");\n  }\n}\n"]}