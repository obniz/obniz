{"version":3,"sources":["../src/parts/Wireless/XBee/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,WAAW;IAC1B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;CACb;AAEF,MAAM,WAAW,UAAU;IACzB,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAC;CACvB;AAED,MAAM,CAAC,OAAO,OAAO,IAAK,YAAW,mBAAmB;WAExC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,cAAc;;;MAA0B;IACxC,cAAc,EAAE,GAAG,CAAC;IACpB,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,sBAAsB,EAAE,GAAG,CAAC;IAC5B,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAErD,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,IAAI,CAAkB;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IA6BlB,IAAI,CAAC,IAAI,EAAE,GAAG;IAQd,kBAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IA8BvC,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,GAAG;IAQpC,WAAW;IAWX,WAAW;IAYX,UAAU;IAIJ,UAAU,CAAC,MAAM,EAAE,GAAG;CAoCpC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface XBeeOptions {\n  tx: number;\n  rx: number;\n  gnd?: number;\n }\n\nexport interface XBeeConfig {\n  [key: string]: string;\n}\n\nexport default class XBee implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"XBee\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public displayIoNames = {tx: \"<tx\", rx: \">rx\"};\n  public currentCommand: any;\n  public commands: any;\n  public isAtMode: any;\n  public onFinishAtModeCallback: any;\n  public onreceive?: (data: any, text: string) => void;\n\n  protected obniz!: Obniz;\n\n  private uart!: PeripheralUART;\n\n  constructor() {\n    this.keys = [\"tx\", \"rx\", \"gnd\"];\n    this.requiredKeys = [\"tx\", \"rx\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.uart = obniz.getFreeUart();\n    this.currentCommand = null;\n    this.commands = [];\n    this.isAtMode = false;\n    this.onFinishAtModeCallback = null;\n\n    if (typeof this.params.gnd === \"number\") {\n      obniz.getIO(this.params.gnd).output(false);\n    }\n\n    this.uart.start({\n      tx: this.params.tx,\n      rx: this.params.rx,\n      baud: 9600,\n      drive: \"3v\",\n    });\n\n    this.uart.onreceive = (data: any, text: any) => {\n      if (this.isAtMode) {\n        this.onAtResultsRecieve(data, text);\n      } else {\n        if (typeof this.onreceive === \"function\") {\n          this.onreceive(data, text);\n        }\n      }\n    };\n  }\n\n  public send(data: any) {\n    if (this.isAtMode === false) {\n      this.uart.send(data);\n    } else {\n      this.obniz.error(\"XBee is AT Command mode now. Wait for finish config.\");\n    }\n  }\n\n  public onAtResultsRecieve(data: any, text: any) {\n    if (!this.isAtMode) {\n      return;\n    }\n\n    const next: any = () => {\n      this.currentCommand = null;\n      this.sendCommand();\n    };\n\n    if (text === \"OK\\r\") {\n      if (this.currentCommand === \"ATCN\") {\n        this.isAtMode = false;\n        this.currentCommand = null;\n        if (typeof this.onFinishAtModeCallback === \"function\") {\n          this.onFinishAtModeCallback();\n          this.onFinishAtModeCallback = null;\n        }\n        return;\n      }\n      next();\n    } else if (text === \"ERROR\\r\") {\n      this.obniz.error(\"XBee config error : \" + this.currentCommand);\n    } else {\n      // response of at command.\n      console.log(\"XBEE : no catch message\", data);\n      next();\n    }\n  }\n\n  public addCommand(command: any, value?: any) {\n    const str: any = command + (value ? \" \" + value : \"\");\n    this.commands.push(str);\n    if (this.isAtMode === true && this.currentCommand === null) {\n      this.sendCommand();\n    }\n  }\n\n  public sendCommand() {\n    if (\n      this.isAtMode === true &&\n      this.currentCommand === null &&\n      this.commands.length > 0\n    ) {\n      this.currentCommand = \"AT\" + this.commands.shift();\n      this.uart.send(this.currentCommand + \"\\r\");\n    }\n  }\n\n  public enterAtMode() {\n    if (this.currentCommand !== null) {\n      return;\n    }\n    this.isAtMode = true;\n    this.obniz.wait(1000);\n    const command: any = \"+++\";\n    this.currentCommand = command;\n    this.uart.send(this.currentCommand);\n    this.obniz.wait(1000);\n  }\n\n  public exitAtMode() {\n    this.addCommand(\"CN\");\n  }\n\n  public async configWait(config: any) {\n    if (this.isAtMode) {\n      throw new Error(\"Xbee : duplicate config setting\");\n    }\n    return new Promise(\n      (resolve, reject) => {\n        const standaloneKeys: any = {\n          destination_address_high: \"DH\",\n          destination_address_low: \"DL\",\n          source_address: \"MY\",\n        };\n        const highLowKeys: any = [\"destination_address\"];\n        this.enterAtMode();\n        for (const key in config) {\n          if (key.length === 2) {\n            this.addCommand(key, config[key]);\n          } else if (standaloneKeys[key]) {\n            this.addCommand(standaloneKeys[key], config[key]);\n          } else if (highLowKeys.includes(key)) {\n            let high: any = config[key].slice(0, -8);\n            if (!high) {\n              high = \"0\";\n            }\n            const low: any = config[key].slice(-8);\n\n            this.addCommand(standaloneKeys[key + \"_high\"], high);\n            this.addCommand(standaloneKeys[key + \"_low\"], low);\n          }\n        }\n        this.exitAtMode();\n        this.onFinishAtModeCallback = () => {\n          resolve();\n        };\n      },\n    );\n  }\n}\n"]}