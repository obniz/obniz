{"version":3,"sources":["../src/parts/Wireless/XBee/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,WAAW;IAC1B,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;CACb;AAEF,MAAM,WAAW,UAAU;IACzB,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAC;CACvB;AAED,MAAM,CAAC,OAAO,OAAO,IAAK,YAAW,mBAAmB;WAExC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,cAAc;;;MAA0B;IACxC,cAAc,EAAE,GAAG,CAAC;IACpB,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,sBAAsB,EAAE,GAAG,CAAC;IAC5B,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAErD,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,IAAI,CAAkB;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IA6BlB,IAAI,CAAC,IAAI,EAAE,GAAG;IAQd,kBAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IA8BvC,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,GAAG;IAQpC,WAAW;IAWX,WAAW;IAYX,UAAU;IAIJ,UAAU,CAAC,MAAM,EAAE,GAAG;CAoCpC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface XBeeOptions {\r\n  tx: number;\r\n  rx: number;\r\n  gnd?: number;\r\n }\r\n\r\nexport interface XBeeConfig {\r\n  [key: string]: string;\r\n}\r\n\r\nexport default class XBee implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"XBee\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public displayIoNames = {tx: \"<tx\", rx: \">rx\"};\r\n  public currentCommand: any;\r\n  public commands: any;\r\n  public isAtMode: any;\r\n  public onFinishAtModeCallback: any;\r\n  public onreceive?: (data: any, text: string) => void;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private uart!: PeripheralUART;\r\n\r\n  constructor() {\r\n    this.keys = [\"tx\", \"rx\", \"gnd\"];\r\n    this.requiredKeys = [\"tx\", \"rx\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.uart = obniz.getFreeUart();\r\n    this.currentCommand = null;\r\n    this.commands = [];\r\n    this.isAtMode = false;\r\n    this.onFinishAtModeCallback = null;\r\n\r\n    if (typeof this.params.gnd === \"number\") {\r\n      obniz.getIO(this.params.gnd).output(false);\r\n    }\r\n\r\n    this.uart.start({\r\n      tx: this.params.tx,\r\n      rx: this.params.rx,\r\n      baud: 9600,\r\n      drive: \"3v\",\r\n    });\r\n\r\n    this.uart.onreceive = (data: any, text: any) => {\r\n      if (this.isAtMode) {\r\n        this.onAtResultsRecieve(data, text);\r\n      } else {\r\n        if (typeof this.onreceive === \"function\") {\r\n          this.onreceive(data, text);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  public send(data: any) {\r\n    if (this.isAtMode === false) {\r\n      this.uart.send(data);\r\n    } else {\r\n      this.obniz.error(\"XBee is AT Command mode now. Wait for finish config.\");\r\n    }\r\n  }\r\n\r\n  public onAtResultsRecieve(data: any, text: any) {\r\n    if (!this.isAtMode) {\r\n      return;\r\n    }\r\n\r\n    const next: any = () => {\r\n      this.currentCommand = null;\r\n      this.sendCommand();\r\n    };\r\n\r\n    if (text === \"OK\\r\") {\r\n      if (this.currentCommand === \"ATCN\") {\r\n        this.isAtMode = false;\r\n        this.currentCommand = null;\r\n        if (typeof this.onFinishAtModeCallback === \"function\") {\r\n          this.onFinishAtModeCallback();\r\n          this.onFinishAtModeCallback = null;\r\n        }\r\n        return;\r\n      }\r\n      next();\r\n    } else if (text === \"ERROR\\r\") {\r\n      this.obniz.error(\"XBee config error : \" + this.currentCommand);\r\n    } else {\r\n      // response of at command.\r\n      console.log(\"XBEE : no catch message\", data);\r\n      next();\r\n    }\r\n  }\r\n\r\n  public addCommand(command: any, value?: any) {\r\n    const str: any = command + (value ? \" \" + value : \"\");\r\n    this.commands.push(str);\r\n    if (this.isAtMode === true && this.currentCommand === null) {\r\n      this.sendCommand();\r\n    }\r\n  }\r\n\r\n  public sendCommand() {\r\n    if (\r\n      this.isAtMode === true &&\r\n      this.currentCommand === null &&\r\n      this.commands.length > 0\r\n    ) {\r\n      this.currentCommand = \"AT\" + this.commands.shift();\r\n      this.uart.send(this.currentCommand + \"\\r\");\r\n    }\r\n  }\r\n\r\n  public enterAtMode() {\r\n    if (this.currentCommand !== null) {\r\n      return;\r\n    }\r\n    this.isAtMode = true;\r\n    this.obniz.wait(1000);\r\n    const command: any = \"+++\";\r\n    this.currentCommand = command;\r\n    this.uart.send(this.currentCommand);\r\n    this.obniz.wait(1000);\r\n  }\r\n\r\n  public exitAtMode() {\r\n    this.addCommand(\"CN\");\r\n  }\r\n\r\n  public async configWait(config: any) {\r\n    if (this.isAtMode) {\r\n      throw new Error(\"Xbee : duplicate config setting\");\r\n    }\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        const standaloneKeys: any = {\r\n          destination_address_high: \"DH\",\r\n          destination_address_low: \"DL\",\r\n          source_address: \"MY\",\r\n        };\r\n        const highLowKeys: any = [\"destination_address\"];\r\n        this.enterAtMode();\r\n        for (const key in config) {\r\n          if (key.length === 2) {\r\n            this.addCommand(key, config[key]);\r\n          } else if (standaloneKeys[key]) {\r\n            this.addCommand(standaloneKeys[key], config[key]);\r\n          } else if (highLowKeys.includes(key)) {\r\n            let high: any = config[key].slice(0, -8);\r\n            if (!high) {\r\n              high = \"0\";\r\n            }\r\n            const low: any = config[key].slice(-8);\r\n\r\n            this.addCommand(standaloneKeys[key + \"_high\"], high);\r\n            this.addCommand(standaloneKeys[key + \"_low\"], low);\r\n          }\r\n        }\r\n        this.exitAtMode();\r\n        this.onFinishAtModeCallback = () => {\r\n          resolve();\r\n        };\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}