{"version":3,"sources":["../src/parts/Moving/StepperMotor/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface StepperMotorOptions {\r\n  a: number;\r\n  b: number;\r\n  aa: number;\r\n  bb: number;\r\n  common?: number;\r\n}\r\n\r\nexport type StepType = \"1\" | \"2\" | \"1-2\";\r\n\r\nexport default class StepperMotor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"StepperMotor\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public type?: string;\r\n  public currentStep = 0;\r\n  public frequency = 100;\r\n  public rotationStepCount = 100;\r\n  public milliMeterStepCount = 1;\r\n  public common: any;\r\n  public ios: PeripheralIO[] = [];\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private _stepInstructions = {\r\n    \"1\": [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]],\r\n    \"2\": [[0, 0, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0]],\r\n    \"1-2\": [\r\n      [0, 1, 1, 1],\r\n      [0, 0, 1, 1],\r\n      [1, 0, 1, 1],\r\n      [1, 0, 0, 1],\r\n      [1, 1, 0, 1],\r\n      [1, 1, 0, 0],\r\n      [1, 1, 1, 0],\r\n      [0, 1, 1, 0],\r\n    ],\r\n  };\r\n  private _stepType: StepType = \"2\";\r\n\r\n  constructor() {\r\n    this.keys = [\"a\", \"b\", \"aa\", \"bb\", \"common\"];\r\n    this.requiredKeys = [\"a\", \"b\", \"aa\", \"bb\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    if (obniz.isValidIO(this.params.common)) {\r\n      this.common = obniz.getIO(this.params.common);\r\n      this.common.output(true);\r\n      this.type = \"unipolar\";\r\n    } else {\r\n      this.type = \"bipolar\";\r\n    }\r\n    this.ios = [];\r\n    this.ios.push(obniz.getIO(this.params.a));\r\n    this.ios.push(obniz.getIO(this.params.b));\r\n    this.ios.push(obniz.getIO(this.params.aa));\r\n    this.ios.push(obniz.getIO(this.params.bb));\r\n  }\r\n\r\n  public async stepWait(step_count: number) {\r\n    if (typeof step_count !== \"number\") {\r\n      throw new Error(\"must provide number\");\r\n    }\r\n    step_count = Math.round(step_count);\r\n    if (step_count === 0) {\r\n      return;\r\n    }\r\n    const step_count_abs = Math.abs(step_count);\r\n    const instructions = this._getStepInstructions();\r\n    const instruction_length = instructions.length;\r\n    const array: any = [];\r\n    // set instructions\r\n    let currentPhase = this.currentStep % instruction_length;\r\n    if (currentPhase < 0) {\r\n      currentPhase = instruction_length - currentPhase * -1;\r\n    }\r\n    if (step_count > 0) {\r\n      for (let i = 0; i < instructions.length; i++) {\r\n        if (++currentPhase >= instruction_length) {\r\n          currentPhase = 0;\r\n        }\r\n        array.push(instructions[currentPhase]);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < instructions.length; i++) {\r\n        if (--currentPhase < 0) {\r\n          currentPhase = instruction_length - 1;\r\n        }\r\n        array.push(instructions[currentPhase]);\r\n      }\r\n    }\r\n    // prepare animation\r\n    let msec = 1000 / this.frequency;\r\n    msec = parseInt(msec as any);\r\n    if (msec < 1) {\r\n      msec = 1;\r\n    }\r\n    const state = (index: number) => {\r\n      const instruction = array[index];\r\n      for (let i = 0; i < this.ios.length; i++) {\r\n        this.ios[i].output(instruction[i]);\r\n      }\r\n    };\r\n    const states = [];\r\n    for (let i = 0; i < instruction_length; i++) {\r\n      states.push({\r\n        duration: msec,\r\n        state,\r\n      });\r\n    }\r\n    // execute and wait\r\n    await this.obniz.io!.repeatWait(states, step_count_abs);\r\n    this.currentStep += step_count;\r\n  }\r\n\r\n  public async stepToWait(destination: number) {\r\n    const mustmove = destination - this.currentStep;\r\n    await this.stepWait(mustmove);\r\n  }\r\n\r\n  public async holdWait() {\r\n    const instructions = this._getStepInstructions();\r\n    const instruction_length = instructions.length;\r\n    // set instructions\r\n    let currentPhase = this.currentStep % instruction_length;\r\n    if (currentPhase < 0) {\r\n      currentPhase = instruction_length - currentPhase * -1;\r\n    }\r\n\r\n    for (let i = 0; i < this.ios.length; i++) {\r\n      this.ios[i].output(instructions[currentPhase][i] === 1);\r\n    }\r\n    await this.obniz.pingWait();\r\n  }\r\n\r\n  public async freeWait() {\r\n    for (let i = 0; i < this.ios.length; i++) {\r\n      this.ios[i].output(true);\r\n    }\r\n    await this.obniz.pingWait();\r\n  }\r\n\r\n  public stepType(stepType: StepType) {\r\n    const newType = this._stepInstructions[stepType];\r\n    if (!newType) {\r\n      throw new Error(\"unknown step type \" + stepType);\r\n    }\r\n    this._stepType = stepType;\r\n  }\r\n\r\n  public speed(step_per_sec: number) {\r\n    this.frequency = step_per_sec;\r\n  }\r\n\r\n  public currentRotation() {\r\n    // => degree\r\n    return (this.currentStep / this.rotationStepCount) * 360;\r\n  }\r\n\r\n  public currentAngle() {\r\n    // => degree\r\n    let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;\r\n    if (angle < 0) {\r\n      angle = 360 - angle;\r\n    }\r\n    return angle;\r\n  }\r\n\r\n  public async rotateWait(rotation: number) {\r\n    rotation /= 360;\r\n    const needed = rotation * this.rotationStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public async rotateToWait(angle: number) {\r\n    let needed = angle - this.currentAngle();\r\n    if (Math.abs(needed) > 180) {\r\n      needed = needed > 0 ? needed - 360 : 360 + needed;\r\n    }\r\n    needed = (needed / 360) * this.rotationStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public currentDistance() {\r\n    // => mm\r\n    return this.currentStep / this.milliMeterStepCount;\r\n  }\r\n\r\n  public async moveWait(distance: number) {\r\n    const needed = distance * this.milliMeterStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public async moveToWait(destination: number) {\r\n    const needed =\r\n      (destination - this.currentDistance()) * this.milliMeterStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public _getStepInstructions() {\r\n    return this._stepInstructions[this._stepType];\r\n  }\r\n}\r\n"]}