{"version":3,"sources":["../src/parts/Moving/StepperMotor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAEjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB;AAED,oBAAY,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;AAEzC,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAEhD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,WAAW,SAAK;IAChB,SAAS,SAAO;IAChB,iBAAiB,SAAO;IACxB,mBAAmB,SAAK;IACxB,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,YAAY,EAAE,CAAM;IAEhC,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,iBAAiB,CAavB;IACF,OAAO,CAAC,SAAS,CAAiB;;IAO3B,KAAK,CAAC,KAAK,EAAE,KAAK;IAiBZ,QAAQ,CAAC,UAAU,EAAE,MAAM;IAwD3B,UAAU,CAAC,WAAW,EAAE,MAAM;IAK9B,QAAQ;IAeR,QAAQ;IAOd,QAAQ,CAAC,QAAQ,EAAE,QAAQ;IAQ3B,KAAK,CAAC,YAAY,EAAE,MAAM;IAI1B,eAAe;IAKf,YAAY;IASN,UAAU,CAAC,QAAQ,EAAE,MAAM;IAM3B,YAAY,CAAC,KAAK,EAAE,MAAM;IAShC,eAAe;IAKT,QAAQ,CAAC,QAAQ,EAAE,MAAM;IAKzB,UAAU,CAAC,WAAW,EAAE,MAAM;IAMpC,oBAAoB;CAG5B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface StepperMotorOptions {\n  a: number;\n  b: number;\n  aa: number;\n  bb: number;\n  common?: number;\n}\n\nexport type StepType = \"1\" | \"2\" | \"1-2\";\n\nexport default class StepperMotor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"StepperMotor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public type?: string;\n  public currentStep = 0;\n  public frequency = 100;\n  public rotationStepCount = 100;\n  public milliMeterStepCount = 1;\n  public common: any;\n  public ios: PeripheralIO[] = [];\n\n  protected obniz!: Obniz;\n\n  private _stepInstructions = {\n    \"1\": [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]],\n    \"2\": [[0, 0, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0]],\n    \"1-2\": [\n      [0, 1, 1, 1],\n      [0, 0, 1, 1],\n      [1, 0, 1, 1],\n      [1, 0, 0, 1],\n      [1, 1, 0, 1],\n      [1, 1, 0, 0],\n      [1, 1, 1, 0],\n      [0, 1, 1, 0],\n    ],\n  };\n  private _stepType: StepType = \"2\";\n\n  constructor() {\n    this.keys = [\"a\", \"b\", \"aa\", \"bb\", \"common\"];\n    this.requiredKeys = [\"a\", \"b\", \"aa\", \"bb\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    if (obniz.isValidIO(this.params.common)) {\n      this.common = obniz.getIO(this.params.common);\n      this.common.output(true);\n      this.type = \"unipolar\";\n    } else {\n      this.type = \"bipolar\";\n    }\n    this.ios = [];\n    this.ios.push(obniz.getIO(this.params.a));\n    this.ios.push(obniz.getIO(this.params.b));\n    this.ios.push(obniz.getIO(this.params.aa));\n    this.ios.push(obniz.getIO(this.params.bb));\n  }\n\n  public async stepWait(step_count: number) {\n    if (typeof step_count !== \"number\") {\n      throw new Error(\"must provide number\");\n    }\n    step_count = Math.round(step_count);\n    if (step_count === 0) {\n      return;\n    }\n    const step_count_abs = Math.abs(step_count);\n    const instructions = this._getStepInstructions();\n    const instruction_length = instructions.length;\n    const array: any = [];\n    // set instructions\n    let currentPhase = this.currentStep % instruction_length;\n    if (currentPhase < 0) {\n      currentPhase = instruction_length - currentPhase * -1;\n    }\n    if (step_count > 0) {\n      for (let i = 0; i < instructions.length; i++) {\n        if (++currentPhase >= instruction_length) {\n          currentPhase = 0;\n        }\n        array.push(instructions[currentPhase]);\n      }\n    } else {\n      for (let i = 0; i < instructions.length; i++) {\n        if (--currentPhase < 0) {\n          currentPhase = instruction_length - 1;\n        }\n        array.push(instructions[currentPhase]);\n      }\n    }\n    // prepare animation\n    let msec = 1000 / this.frequency;\n    msec = parseInt(msec as any);\n    if (msec < 1) {\n      msec = 1;\n    }\n    const state = (index: number) => {\n      const instruction = array[index];\n      for (let i = 0; i < this.ios.length; i++) {\n        this.ios[i].output(instruction[i]);\n      }\n    };\n    const states = [];\n    for (let i = 0; i < instruction_length; i++) {\n      states.push({\n        duration: msec,\n        state,\n      });\n    }\n    // execute and wait\n    await this.obniz.io!.repeatWait(states, step_count_abs);\n    this.currentStep += step_count;\n  }\n\n  public async stepToWait(destination: number) {\n    const mustmove = destination - this.currentStep;\n    await this.stepWait(mustmove);\n  }\n\n  public async holdWait() {\n    const instructions = this._getStepInstructions();\n    const instruction_length = instructions.length;\n    // set instructions\n    let currentPhase = this.currentStep % instruction_length;\n    if (currentPhase < 0) {\n      currentPhase = instruction_length - currentPhase * -1;\n    }\n\n    for (let i = 0; i < this.ios.length; i++) {\n      this.ios[i].output(instructions[currentPhase][i] === 1);\n    }\n    await this.obniz.pingWait();\n  }\n\n  public async freeWait() {\n    for (let i = 0; i < this.ios.length; i++) {\n      this.ios[i].output(true);\n    }\n    await this.obniz.pingWait();\n  }\n\n  public stepType(stepType: StepType) {\n    const newType = this._stepInstructions[stepType];\n    if (!newType) {\n      throw new Error(\"unknown step type \" + stepType);\n    }\n    this._stepType = stepType;\n  }\n\n  public speed(step_per_sec: number) {\n    this.frequency = step_per_sec;\n  }\n\n  public currentRotation() {\n    // => degree\n    return (this.currentStep / this.rotationStepCount) * 360;\n  }\n\n  public currentAngle() {\n    // => degree\n    let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;\n    if (angle < 0) {\n      angle = 360 - angle;\n    }\n    return angle;\n  }\n\n  public async rotateWait(rotation: number) {\n    rotation /= 360;\n    const needed = rotation * this.rotationStepCount;\n    await this.stepWait(needed);\n  }\n\n  public async rotateToWait(angle: number) {\n    let needed = angle - this.currentAngle();\n    if (Math.abs(needed) > 180) {\n      needed = needed > 0 ? needed - 360 : 360 + needed;\n    }\n    needed = (needed / 360) * this.rotationStepCount;\n    await this.stepWait(needed);\n  }\n\n  public currentDistance() {\n    // => mm\n    return this.currentStep / this.milliMeterStepCount;\n  }\n\n  public async moveWait(distance: number) {\n    const needed = distance * this.milliMeterStepCount;\n    await this.stepWait(needed);\n  }\n\n  public async moveToWait(destination: number) {\n    const needed =\n      (destination - this.currentDistance()) * this.milliMeterStepCount;\n    await this.stepWait(needed);\n  }\n\n  public _getStepInstructions() {\n    return this._stepInstructions[this._stepType];\n  }\n}\n"]}