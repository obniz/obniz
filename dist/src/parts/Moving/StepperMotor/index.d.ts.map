{"version":3,"sources":["../src/parts/Moving/StepperMotor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAEjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB;AAED,oBAAY,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;AAEzC,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAEhD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,WAAW,SAAK;IAChB,SAAS,SAAO;IAChB,iBAAiB,SAAO;IACxB,mBAAmB,SAAK;IACxB,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,YAAY,EAAE,CAAM;IAEhC,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,iBAAiB,CAavB;IACF,OAAO,CAAC,SAAS,CAAiB;;IAO3B,KAAK,CAAC,KAAK,EAAE,KAAK;IAiBZ,QAAQ,CAAC,UAAU,EAAE,MAAM;IAwD3B,UAAU,CAAC,WAAW,EAAE,MAAM;IAK9B,QAAQ;IAeR,QAAQ;IAOd,QAAQ,CAAC,QAAQ,EAAE,QAAQ;IAQ3B,KAAK,CAAC,YAAY,EAAE,MAAM;IAI1B,eAAe;IAKf,YAAY;IASN,UAAU,CAAC,QAAQ,EAAE,MAAM;IAM3B,YAAY,CAAC,KAAK,EAAE,MAAM;IAShC,eAAe;IAKT,QAAQ,CAAC,QAAQ,EAAE,MAAM;IAKzB,UAAU,CAAC,WAAW,EAAE,MAAM;IAMpC,oBAAoB;CAG5B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface StepperMotorOptions {\r\n  a: number;\r\n  b: number;\r\n  aa: number;\r\n  bb: number;\r\n  common?: number;\r\n}\r\n\r\nexport type StepType = \"1\" | \"2\" | \"1-2\";\r\n\r\nexport default class StepperMotor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"StepperMotor\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public type?: string;\r\n  public currentStep = 0;\r\n  public frequency = 100;\r\n  public rotationStepCount = 100;\r\n  public milliMeterStepCount = 1;\r\n  public common: any;\r\n  public ios: PeripheralIO[] = [];\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private _stepInstructions = {\r\n    \"1\": [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]],\r\n    \"2\": [[0, 0, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0]],\r\n    \"1-2\": [\r\n      [0, 1, 1, 1],\r\n      [0, 0, 1, 1],\r\n      [1, 0, 1, 1],\r\n      [1, 0, 0, 1],\r\n      [1, 1, 0, 1],\r\n      [1, 1, 0, 0],\r\n      [1, 1, 1, 0],\r\n      [0, 1, 1, 0],\r\n    ],\r\n  };\r\n  private _stepType: StepType = \"2\";\r\n\r\n  constructor() {\r\n    this.keys = [\"a\", \"b\", \"aa\", \"bb\", \"common\"];\r\n    this.requiredKeys = [\"a\", \"b\", \"aa\", \"bb\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    if (obniz.isValidIO(this.params.common)) {\r\n      this.common = obniz.getIO(this.params.common);\r\n      this.common.output(true);\r\n      this.type = \"unipolar\";\r\n    } else {\r\n      this.type = \"bipolar\";\r\n    }\r\n    this.ios = [];\r\n    this.ios.push(obniz.getIO(this.params.a));\r\n    this.ios.push(obniz.getIO(this.params.b));\r\n    this.ios.push(obniz.getIO(this.params.aa));\r\n    this.ios.push(obniz.getIO(this.params.bb));\r\n  }\r\n\r\n  public async stepWait(step_count: number) {\r\n    if (typeof step_count !== \"number\") {\r\n      throw new Error(\"must provide number\");\r\n    }\r\n    step_count = Math.round(step_count);\r\n    if (step_count === 0) {\r\n      return;\r\n    }\r\n    const step_count_abs = Math.abs(step_count);\r\n    const instructions = this._getStepInstructions();\r\n    const instruction_length = instructions.length;\r\n    const array: any = [];\r\n    // set instructions\r\n    let currentPhase = this.currentStep % instruction_length;\r\n    if (currentPhase < 0) {\r\n      currentPhase = instruction_length - currentPhase * -1;\r\n    }\r\n    if (step_count > 0) {\r\n      for (let i = 0; i < instructions.length; i++) {\r\n        if (++currentPhase >= instruction_length) {\r\n          currentPhase = 0;\r\n        }\r\n        array.push(instructions[currentPhase]);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < instructions.length; i++) {\r\n        if (--currentPhase < 0) {\r\n          currentPhase = instruction_length - 1;\r\n        }\r\n        array.push(instructions[currentPhase]);\r\n      }\r\n    }\r\n    // prepare animation\r\n    let msec = 1000 / this.frequency;\r\n    msec = parseInt(msec as any);\r\n    if (msec < 1) {\r\n      msec = 1;\r\n    }\r\n    const state = (index: number) => {\r\n      const instruction = array[index];\r\n      for (let i = 0; i < this.ios.length; i++) {\r\n        this.ios[i].output(instruction[i]);\r\n      }\r\n    };\r\n    const states = [];\r\n    for (let i = 0; i < instruction_length; i++) {\r\n      states.push({\r\n        duration: msec,\r\n        state,\r\n      });\r\n    }\r\n    // execute and wait\r\n    await this.obniz.io!.repeatWait(states, step_count_abs);\r\n    this.currentStep += step_count;\r\n  }\r\n\r\n  public async stepToWait(destination: number) {\r\n    const mustmove = destination - this.currentStep;\r\n    await this.stepWait(mustmove);\r\n  }\r\n\r\n  public async holdWait() {\r\n    const instructions = this._getStepInstructions();\r\n    const instruction_length = instructions.length;\r\n    // set instructions\r\n    let currentPhase = this.currentStep % instruction_length;\r\n    if (currentPhase < 0) {\r\n      currentPhase = instruction_length - currentPhase * -1;\r\n    }\r\n\r\n    for (let i = 0; i < this.ios.length; i++) {\r\n      this.ios[i].output(instructions[currentPhase][i] === 1);\r\n    }\r\n    await this.obniz.pingWait();\r\n  }\r\n\r\n  public async freeWait() {\r\n    for (let i = 0; i < this.ios.length; i++) {\r\n      this.ios[i].output(true);\r\n    }\r\n    await this.obniz.pingWait();\r\n  }\r\n\r\n  public stepType(stepType: StepType) {\r\n    const newType = this._stepInstructions[stepType];\r\n    if (!newType) {\r\n      throw new Error(\"unknown step type \" + stepType);\r\n    }\r\n    this._stepType = stepType;\r\n  }\r\n\r\n  public speed(step_per_sec: number) {\r\n    this.frequency = step_per_sec;\r\n  }\r\n\r\n  public currentRotation() {\r\n    // => degree\r\n    return (this.currentStep / this.rotationStepCount) * 360;\r\n  }\r\n\r\n  public currentAngle() {\r\n    // => degree\r\n    let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;\r\n    if (angle < 0) {\r\n      angle = 360 - angle;\r\n    }\r\n    return angle;\r\n  }\r\n\r\n  public async rotateWait(rotation: number) {\r\n    rotation /= 360;\r\n    const needed = rotation * this.rotationStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public async rotateToWait(angle: number) {\r\n    let needed = angle - this.currentAngle();\r\n    if (Math.abs(needed) > 180) {\r\n      needed = needed > 0 ? needed - 360 : 360 + needed;\r\n    }\r\n    needed = (needed / 360) * this.rotationStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public currentDistance() {\r\n    // => mm\r\n    return this.currentStep / this.milliMeterStepCount;\r\n  }\r\n\r\n  public async moveWait(distance: number) {\r\n    const needed = distance * this.milliMeterStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public async moveToWait(destination: number) {\r\n    const needed =\r\n      (destination - this.currentDistance()) * this.milliMeterStepCount;\r\n    await this.stepWait(needed);\r\n  }\r\n\r\n  public _getStepInstructions() {\r\n    return this._stepInstructions[this._stepType];\r\n  }\r\n}\r\n"]}