{"version":3,"sources":["../src/parts/Moving/PCA9685/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,EAAC,YAAY,EAAC,MAAM,wCAAwC,CAAC;AAEpE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,cAAM,WAAa,YAAW,YAAY;IACjC,IAAI,EAAE,OAAO,CAAC;IACd,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,SAAK;IACV,KAAK,EAAE,GAAG,CAAM;gBAEX,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM;IAK9B,IAAI,CAAC,SAAS,EAAE,MAAM;IAItB,KAAK,CAAC,KAAK,EAAE,MAAM;IAInB,IAAI,CAAC,KAAK,EAAE,MAAM;CAG1B;AAED,MAAM,WAAW,cAAc;IAC7B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAGD,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAE3C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAEvB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,WAAW,EAAE,CAAM;IACzB,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,EAAE,GAAG,CAAC;IACR,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IAElB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,KAAK,CAAC,CAAe;IAC7B,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,KAAK,CAAa;;IA8CnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkDlB,WAAW,CAAC,GAAG,EAAE,GAAG;IAOpB,UAAU,CAAC,EAAE,EAAE,GAAG;IAIlB,MAAM,CAAC,EAAE,EAAE,MAAM,GAAG,WAAW;IAO/B,IAAI,CAAC,SAAS,EAAE,MAAM;IAkCtB,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM;IAOxC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAkBhC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;IAUvD,SAAS,CAAC,MAAM,EAAE,OAAO;CAMjC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport {PWMInterface} from \"../../../obniz/libs/io_peripherals/pwm\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nclass PCA9685_PWM  implements PWMInterface {\n  public chip: PCA9685;\n  public id: number;\n  public value = 0;\n  public state: any = {};\n\n  constructor(chip: PCA9685, id: number) {\n    this.chip = chip;\n    this.id = id;\n  }\n\n  public freq(frequency: number) {\n    this.chip.freq(frequency);\n  }\n\n  public pulse(value: number) {\n    this.chip.pulse(this.id, value);\n  }\n\n  public duty(value: number) {\n    this.chip.duty(this.id, value);\n  }\n}\n\nexport interface PCA9685Options {\n  gnd?: number;\n  vcc?: number;\n  oe?: number;\n  scl?: number;\n  sda?: number;\n  i2c?: PeripheralI2C;\n  enabled?: boolean;\n  address?: number;\n  drive?: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport default class PCA9685 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"PCA9685\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n\n  public address: any;\n  public _commands: any;\n  public _regs: any;\n  public pwmNum: any;\n  public pwms: PCA9685_PWM[] = [];\n  public params: any;\n  public io_srclr: any;\n  public chip: any;\n  public id: any;\n  public value: any;\n  public state: any;\n\n  protected obniz!: Obniz;\n\n  private io_oe?: PeripheralIO;\n  private i2c!: PeripheralI2C;\n  private _freq: number = 0;\n\n  constructor() {\n    /* https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf */\n    this.keys = [\n      \"gnd\",\n      \"vcc\",\n      \"scl\",\n      \"sda\",\n      \"oe\",\n      \"i2c\",\n      \"enabled\",\n      \"address\",\n      \"drive\",\n    ];\n    this.requiredKeys = [];\n\n    this.address = 0x40;\n\n    this._commands = {\n      MODE1: 0x00,\n      MODE2: 0x01,\n      SUBADR1: 0x02,\n      SUBADR2: 0x03,\n      SUBADR3: 0x04,\n      PRESCALE: 0xfe,\n      LED0_ON_L: 0x06,\n      ALL_LED_ON_L: 0xfa,\n      bits: {\n        ALLCALL: 0x01,\n        SLEEP_ENABLE: 0x10,\n        AUTO_INCREMENT_ENABLED: 0x20,\n        RESTART: 0x80,\n\n        OUTDRV: 0x04,\n        INVRT: 0x10,\n      },\n    };\n\n    this._regs = new Array(1);\n\n    this.pwmNum = 16;\n    this.pwms = [];\n    this._preparePWM(this.pwmNum);\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    if (obniz.isValidIO(this.params.oe)) {\n      this.io_oe = obniz.getIO(this.params.oe);\n    }\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    if (typeof this.params.address === \"number\") {\n      this.address = this.params.address;\n    }\n\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\n    this.params.mode = this.params.mode || \"master\"; // for i2c\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    if (this.obniz.isValidIO(this.params.srclr)) {\n      this.io_srclr = this.obniz.getIO(this.params.srclr);\n      this.io_srclr.output(true);\n    }\n\n    if (typeof this.params.enabled !== \"boolean\") {\n      this.params.enabled = true;\n    }\n    if (this.io_oe && this.params.enabled) {\n      this.io_oe.output(false);\n    }\n\n    if (this.params.drive === \"open-drain\") {\n      this.i2c.write(this.address, [\n        this._commands.MODE2,\n        this._commands.bits.OUTDRV,\n      ]);\n    }\n\n    let mode1: any = this._commands.bits.AUTO_INCREMENT_ENABLED;\n    mode1 = mode1 & ~this._commands.bits.SLEEP_ENABLE;\n    this.i2c.write(this.address, [this._commands.MODE1, mode1]);\n    this.i2c.write(this.address, [\n      this._commands.MODE1,\n      mode1 | this._commands.bits.RESTART,\n    ]);\n\n    this._regs[this._commands.MODE1] = mode1;\n\n    obniz.wait(10);\n  }\n\n  public _preparePWM(num: any) {\n\n    for (let i = 0; i < num; i++) {\n      this.pwms.push(new PCA9685_PWM(this, i));\n    }\n  }\n\n  public isValidPWM(id: any) {\n    return typeof id === \"number\" && id >= 0 && id < this.pwmNum;\n  }\n\n  public getPWM(id: number): PCA9685_PWM {\n    if (!this.isValidPWM(id)) {\n      throw new Error(\"pwm \" + id + \" is not valid pwm\");\n    }\n    return this.pwms[id];\n  }\n\n  public freq(frequency: number) {\n    if (typeof frequency !== \"number\") {\n      return;\n    }\n    if (frequency < 24 || 1526 < frequency) {\n      throw new Error(\"freq must be within 24-1526 hz\");\n    }\n    if (this._freq === frequency) {\n      return;\n    }\n    let prescaleval: any = 25000000.0; // 25MHz\n    prescaleval /= 4096.0; // 12bit\n    prescaleval /= frequency * 0.9;\n    prescaleval -= 1.0;\n\n    const prescale: any = Math.floor(Math.floor(prescaleval + 0.5));\n    const mode1: any = this._regs[this._commands.MODE1];\n\n    this.i2c.write(this.address, [\n      this._commands.MODE1,\n      (mode1 & 0x7f) | this._commands.bits.SLEEP_ENABLE,\n    ]); // enter sleep\n    this.i2c.write(this.address, [this._commands.PRESCALE, prescale]);\n    this.i2c.write(this.address, [this._commands.MODE1, mode1]); // recover from sleep\n\n    this.obniz.wait(5);\n\n    // save\n    this._freq = frequency;\n    for (let i = 0; i < this.pwms.length; i++) {\n      this.pwms[i].state.freq = this._freq;\n    }\n  }\n\n  public pulse(index: number, pulse_width: number) {\n    if (typeof this._freq !== \"number\" || this._freq <= 0) {\n      throw new Error(\"please provide freq first.\");\n    }\n    this.duty(index, (pulse_width / 1000.0 / (1.0 / this._freq)) * 100);\n  }\n\n  public duty(index: number, duty: number) {\n    duty *= 1.0;\n    if (typeof this._freq !== \"number\" || this._freq <= 0) {\n      throw new Error(\"please provide freq first.\");\n    }\n    if (typeof duty !== \"number\") {\n      throw new Error(\"please provide duty in number\");\n    }\n    if (duty < 0) {\n      duty = 0;\n    }\n    if (duty > 100) {\n      duty = 100;\n    }\n    this.getPWM(index).state.duty = duty;\n    this.writeSingleONOFF(index, 0, (duty / 100.0) * 4095);\n  }\n\n  public writeSingleONOFF(index: number, on: number, off: number) {\n    this.i2c.write(this.address, [\n      this._commands.LED0_ON_L + 4 * index,\n      on & 0xff,\n      on >> 8,\n      off & 0xff,\n      off >> 8,\n    ]);\n  }\n\n  public setEnable(enable: boolean) {\n    if (!this.io_oe && enable === false) {\n      throw new Error('pin \"oe\" is not specified');\n    }\n    this.io_oe!.output(!enable);\n  }\n}\n"]}