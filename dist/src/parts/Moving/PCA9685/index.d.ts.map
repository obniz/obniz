{"version":3,"sources":["../src/parts/Moving/PCA9685/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,EAAC,YAAY,EAAC,MAAM,wCAAwC,CAAC;AAEpE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,cAAM,WAAa,YAAW,YAAY;IACjC,IAAI,EAAE,OAAO,CAAC;IACd,EAAE,EAAE,MAAM,CAAC;IACX,KAAK,SAAK;IACV,KAAK,EAAE,GAAG,CAAM;gBAEX,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM;IAK9B,IAAI,CAAC,SAAS,EAAE,MAAM;IAItB,KAAK,CAAC,KAAK,EAAE,MAAM;IAInB,IAAI,CAAC,KAAK,EAAE,MAAM;CAG1B;AAED,MAAM,WAAW,cAAc;IAC7B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAGD,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAE3C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAEvB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,WAAW,EAAE,CAAM;IACzB,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,EAAE,GAAG,CAAC;IACR,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IAElB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,KAAK,CAAC,CAAe;IAC7B,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,KAAK,CAAa;;IA8CnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkDlB,WAAW,CAAC,GAAG,EAAE,GAAG;IAOpB,UAAU,CAAC,EAAE,EAAE,GAAG;IAIlB,MAAM,CAAC,EAAE,EAAE,MAAM,GAAG,WAAW;IAO/B,IAAI,CAAC,SAAS,EAAE,MAAM;IAkCtB,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM;IAOxC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAkBhC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;IAUvD,SAAS,CAAC,MAAM,EAAE,OAAO;CAMjC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport {PWMInterface} from \"../../../obniz/libs/io_peripherals/pwm\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nclass PCA9685_PWM  implements PWMInterface {\r\n  public chip: PCA9685;\r\n  public id: number;\r\n  public value = 0;\r\n  public state: any = {};\r\n\r\n  constructor(chip: PCA9685, id: number) {\r\n    this.chip = chip;\r\n    this.id = id;\r\n  }\r\n\r\n  public freq(frequency: number) {\r\n    this.chip.freq(frequency);\r\n  }\r\n\r\n  public pulse(value: number) {\r\n    this.chip.pulse(this.id, value);\r\n  }\r\n\r\n  public duty(value: number) {\r\n    this.chip.duty(this.id, value);\r\n  }\r\n}\r\n\r\nexport interface PCA9685Options {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  oe?: number;\r\n  scl?: number;\r\n  sda?: number;\r\n  i2c?: PeripheralI2C;\r\n  enabled?: boolean;\r\n  address?: number;\r\n  drive?: string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport default class PCA9685 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"PCA9685\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n\r\n  public address: any;\r\n  public _commands: any;\r\n  public _regs: any;\r\n  public pwmNum: any;\r\n  public pwms: PCA9685_PWM[] = [];\r\n  public params: any;\r\n  public io_srclr: any;\r\n  public chip: any;\r\n  public id: any;\r\n  public value: any;\r\n  public state: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private io_oe?: PeripheralIO;\r\n  private i2c!: PeripheralI2C;\r\n  private _freq: number = 0;\r\n\r\n  constructor() {\r\n    /* https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf */\r\n    this.keys = [\r\n      \"gnd\",\r\n      \"vcc\",\r\n      \"scl\",\r\n      \"sda\",\r\n      \"oe\",\r\n      \"i2c\",\r\n      \"enabled\",\r\n      \"address\",\r\n      \"drive\",\r\n    ];\r\n    this.requiredKeys = [];\r\n\r\n    this.address = 0x40;\r\n\r\n    this._commands = {\r\n      MODE1: 0x00,\r\n      MODE2: 0x01,\r\n      SUBADR1: 0x02,\r\n      SUBADR2: 0x03,\r\n      SUBADR3: 0x04,\r\n      PRESCALE: 0xfe,\r\n      LED0_ON_L: 0x06,\r\n      ALL_LED_ON_L: 0xfa,\r\n      bits: {\r\n        ALLCALL: 0x01,\r\n        SLEEP_ENABLE: 0x10,\r\n        AUTO_INCREMENT_ENABLED: 0x20,\r\n        RESTART: 0x80,\r\n\r\n        OUTDRV: 0x04,\r\n        INVRT: 0x10,\r\n      },\r\n    };\r\n\r\n    this._regs = new Array(1);\r\n\r\n    this.pwmNum = 16;\r\n    this.pwms = [];\r\n    this._preparePWM(this.pwmNum);\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    if (obniz.isValidIO(this.params.oe)) {\r\n      this.io_oe = obniz.getIO(this.params.oe);\r\n    }\r\n\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    if (typeof this.params.address === \"number\") {\r\n      this.address = this.params.address;\r\n    }\r\n\r\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n\r\n    if (this.obniz.isValidIO(this.params.srclr)) {\r\n      this.io_srclr = this.obniz.getIO(this.params.srclr);\r\n      this.io_srclr.output(true);\r\n    }\r\n\r\n    if (typeof this.params.enabled !== \"boolean\") {\r\n      this.params.enabled = true;\r\n    }\r\n    if (this.io_oe && this.params.enabled) {\r\n      this.io_oe.output(false);\r\n    }\r\n\r\n    if (this.params.drive === \"open-drain\") {\r\n      this.i2c.write(this.address, [\r\n        this._commands.MODE2,\r\n        this._commands.bits.OUTDRV,\r\n      ]);\r\n    }\r\n\r\n    let mode1: any = this._commands.bits.AUTO_INCREMENT_ENABLED;\r\n    mode1 = mode1 & ~this._commands.bits.SLEEP_ENABLE;\r\n    this.i2c.write(this.address, [this._commands.MODE1, mode1]);\r\n    this.i2c.write(this.address, [\r\n      this._commands.MODE1,\r\n      mode1 | this._commands.bits.RESTART,\r\n    ]);\r\n\r\n    this._regs[this._commands.MODE1] = mode1;\r\n\r\n    obniz.wait(10);\r\n  }\r\n\r\n  public _preparePWM(num: any) {\r\n\r\n    for (let i = 0; i < num; i++) {\r\n      this.pwms.push(new PCA9685_PWM(this, i));\r\n    }\r\n  }\r\n\r\n  public isValidPWM(id: any) {\r\n    return typeof id === \"number\" && id >= 0 && id < this.pwmNum;\r\n  }\r\n\r\n  public getPWM(id: number): PCA9685_PWM {\r\n    if (!this.isValidPWM(id)) {\r\n      throw new Error(\"pwm \" + id + \" is not valid pwm\");\r\n    }\r\n    return this.pwms[id];\r\n  }\r\n\r\n  public freq(frequency: number) {\r\n    if (typeof frequency !== \"number\") {\r\n      return;\r\n    }\r\n    if (frequency < 24 || 1526 < frequency) {\r\n      throw new Error(\"freq must be within 24-1526 hz\");\r\n    }\r\n    if (this._freq === frequency) {\r\n      return;\r\n    }\r\n    let prescaleval: any = 25000000.0; // 25MHz\r\n    prescaleval /= 4096.0; // 12bit\r\n    prescaleval /= frequency * 0.9;\r\n    prescaleval -= 1.0;\r\n\r\n    const prescale: any = Math.floor(Math.floor(prescaleval + 0.5));\r\n    const mode1: any = this._regs[this._commands.MODE1];\r\n\r\n    this.i2c.write(this.address, [\r\n      this._commands.MODE1,\r\n      (mode1 & 0x7f) | this._commands.bits.SLEEP_ENABLE,\r\n    ]); // enter sleep\r\n    this.i2c.write(this.address, [this._commands.PRESCALE, prescale]);\r\n    this.i2c.write(this.address, [this._commands.MODE1, mode1]); // recover from sleep\r\n\r\n    this.obniz.wait(5);\r\n\r\n    // save\r\n    this._freq = frequency;\r\n    for (let i = 0; i < this.pwms.length; i++) {\r\n      this.pwms[i].state.freq = this._freq;\r\n    }\r\n  }\r\n\r\n  public pulse(index: number, pulse_width: number) {\r\n    if (typeof this._freq !== \"number\" || this._freq <= 0) {\r\n      throw new Error(\"please provide freq first.\");\r\n    }\r\n    this.duty(index, (pulse_width / 1000.0 / (1.0 / this._freq)) * 100);\r\n  }\r\n\r\n  public duty(index: number, duty: number) {\r\n    duty *= 1.0;\r\n    if (typeof this._freq !== \"number\" || this._freq <= 0) {\r\n      throw new Error(\"please provide freq first.\");\r\n    }\r\n    if (typeof duty !== \"number\") {\r\n      throw new Error(\"please provide duty in number\");\r\n    }\r\n    if (duty < 0) {\r\n      duty = 0;\r\n    }\r\n    if (duty > 100) {\r\n      duty = 100;\r\n    }\r\n    this.getPWM(index).state.duty = duty;\r\n    this.writeSingleONOFF(index, 0, (duty / 100.0) * 4095);\r\n  }\r\n\r\n  public writeSingleONOFF(index: number, on: number, off: number) {\r\n    this.i2c.write(this.address, [\r\n      this._commands.LED0_ON_L + 4 * index,\r\n      on & 0xff,\r\n      on >> 8,\r\n      off & 0xff,\r\n      off >> 8,\r\n    ]);\r\n  }\r\n\r\n  public setEnable(enable: boolean) {\r\n    if (!this.io_oe && enable === false) {\r\n      throw new Error('pin \"oe\" is not specified');\r\n    }\r\n    this.io_oe!.output(!enable);\r\n  }\r\n}\r\n"]}