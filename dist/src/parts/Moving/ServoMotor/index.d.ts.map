{"version":3,"sources":["../src/parts/Moving/ServoMotor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,iBAAiB;IAChC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,UAAW,YAAW,mBAAmB;WAE9C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,KAAK;;;MAGV;IAEF,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,UAAU,CAAC,CAAS;IAC5B,OAAO,CAAC,MAAM,CAAM;;IAOb,KAAK,CAAC,KAAK,EAAE,KAAK;IAuBlB,KAAK,CAAC,KAAK,EAAE,MAAM;IAOnB,EAAE;IAMF,GAAG;CAKX","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface ServoMotorOptions {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  signal?: number;\r\n  pwm?: PeripheralPWM;\r\n}\r\n\r\nexport default class ServoMotor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"ServoMotor\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public range = {\r\n    min: 0.5,\r\n    max: 2.4,\r\n  };\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private pwm!: PeripheralPWM;\r\n  private pwm_io_num?: number;\r\n  private io_vcc: any;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"signal\", \"pwm\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    if (obniz.isValidIO(this.params.vcc)) {\r\n      this.io_vcc = obniz.getIO(this.params.vcc);\r\n    }\r\n\r\n    if (this.params.pwm) {\r\n      this.pwm = this.params.pwm;\r\n    } else {\r\n      this.pwm = obniz.getFreePwm();\r\n      this.pwm_io_num = this.params.signal;\r\n      if (typeof this.pwm_io_num !== \"number\") {\r\n        throw new Error(`no io specified for pwm`);\r\n      }\r\n      this.pwm.start({io: this.pwm_io_num});\r\n    }\r\n    this.pwm.freq(50);\r\n  }\r\n\r\n  // Module functions\r\n\r\n  public angle(ratio: number) {\r\n    const max = this.range.max;\r\n    const min = this.range.min;\r\n    const val = ((max - min) * ratio) / 180.0 + min;\r\n    this.pwm.pulse(val);\r\n  }\r\n\r\n  public on() {\r\n    if (this.io_vcc) {\r\n      this.io_vcc.output(true);\r\n    }\r\n  }\r\n\r\n  public off() {\r\n    if (this.io_vcc) {\r\n      this.io_vcc.output(false);\r\n    }\r\n  }\r\n}\r\n"]}