{"version":3,"sources":["../src/parts/Moving/ServoMotor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,iBAAiB;IAChC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,UAAW,YAAW,mBAAmB;WAE9C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,KAAK;;;MAGV;IAEF,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,UAAU,CAAC,CAAS;IAC5B,OAAO,CAAC,MAAM,CAAM;;IAOb,KAAK,CAAC,KAAK,EAAE,KAAK;IAuBlB,KAAK,CAAC,KAAK,EAAE,MAAM;IAOnB,EAAE;IAMF,GAAG;CAKX","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface ServoMotorOptions {\n  vcc?: number;\n  gnd?: number;\n  signal?: number;\n  pwm?: PeripheralPWM;\n}\n\nexport default class ServoMotor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ServoMotor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public range = {\n    min: 0.5,\n    max: 2.4,\n  };\n\n  protected obniz!: Obniz;\n\n  private pwm!: PeripheralPWM;\n  private pwm_io_num?: number;\n  private io_vcc: any;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"signal\", \"pwm\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    if (obniz.isValidIO(this.params.vcc)) {\n      this.io_vcc = obniz.getIO(this.params.vcc);\n    }\n\n    if (this.params.pwm) {\n      this.pwm = this.params.pwm;\n    } else {\n      this.pwm = obniz.getFreePwm();\n      this.pwm_io_num = this.params.signal;\n      if (typeof this.pwm_io_num !== \"number\") {\n        throw new Error(`no io specified for pwm`);\n      }\n      this.pwm.start({io: this.pwm_io_num});\n    }\n    this.pwm.freq(50);\n  }\n\n  // Module functions\n\n  public angle(ratio: number) {\n    const max = this.range.max;\n    const min = this.range.min;\n    const val = ((max - min) * ratio) / 180.0 + min;\n    this.pwm.pulse(val);\n  }\n\n  public on() {\n    if (this.io_vcc) {\n      this.io_vcc.output(true);\n    }\n  }\n\n  public off() {\n    if (this.io_vcc) {\n      this.io_vcc.output(false);\n    }\n  }\n}\n"]}