{"version":3,"sources":["../src/parts/Biological/PULSE08-M5STICKC-S/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Puls08M5stickcSOptions {\n  vcc?: number;\n  gnd?: number;\n  rx: number;\n  tx: number;\n}\n\nexport default class Puls08M5stickcS implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Puls08M5stickcS\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public delimiter: any;\n  public obniz!: Obniz;\n  public params: any;\n  public uart!: PeripheralUART;\n  public receivingData: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"tx\", \"rx\"];\n    this.requiredKeys = [\"tx\", \"rx\"];\n    this.delimiter = 0x0a;\n  }\n\n  public onbpmupdate(bpm: number | null) {\n    return;\n  }\n\n  public onrawupdate(values: number[]) {\n    return;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.uart = obniz.getFreeUart();\n    this.uart.start({tx: this.params.tx, rx: this.params.rx, baud: 19200});\n    this.receivingData = [];\n\n    this.init();\n\n    this.uart.onreceive = (data: number[], text: any) => {\n      const dataToCallback: any = [];\n      data.forEach((e: any) => {\n        if (e !== this.delimiter) {\n          this.receivingData.push(e);\n          return;\n        } else {\n          const row: any = this.receivingData;\n          if (row[0] === \"#\".charCodeAt(0)) {\n            row[0] = \" \".charCodeAt(0);\n            const str: string = this.decode(row);\n            const val: number = parseInt(str);\n            const bpm: number | null = val > 0 ? 60000 / val : null;\n            this.onbpmupdate(bpm);\n          } else {\n            const str: any = this.decode(row);\n            const val: any = parseInt(str);\n            dataToCallback.push(val);\n          }\n          this.receivingData = [];\n        }\n      });\n      if (dataToCallback.length > 0) {\n        this.onrawupdate(dataToCallback);\n      }\n    };\n  }\n\n  public decode(data: any): string {\n    return Buffer.from(data).toString(\"utf8\");\n\n    // if (typeof TextDecoder !== 'undefined') {\n    //   let enc = new TextDecoder('utf-8');\n    //   let arr = new Uint8Array(data);\n    //   return enc.decode(arr);\n    // } else if (typeof Buffer !== 'undefined') {\n    // return Buffer.from(data).toString('utf8');\n    // }\n    // throw new Error('cannot decode');\n  }\n\n  public init() {\n    this.uart.send(\"@OF30\");\n    this.uart.send(0x0a);\n    this.uart.send(\"@RG2\");\n    this.uart.send(0x0a);\n  }\n}\n"]}