{"version":3,"sources":["../src/parts/Grove/Grove_MP3/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,gBAAgB;IAC/B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,CAAC,OAAO,OAAO,SAAU,YAAW,mBAAmB;WAE7C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,WAAW,EAAE,GAAG,CAAC;IACjB,cAAc,EAAE,GAAG,CAAC;IACpB,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;;IAWV,KAAK,CAAC,KAAK,EAAE,KAAK;IAUZ,QAAQ,CAAC,MAAM,EAAE,GAAG;IAwB1B,SAAS,CAAC,GAAG,EAAE,MAAM;IAMrB,KAAK;IAIL,OAAO;IAIP,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAU5B,IAAI;IAIJ,KAAK;IAIL,MAAM;IAIN,IAAI;IAIJ,IAAI;IAIJ,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;CAQzC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface Grove_MP3Options {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  mp3_rx: number;\r\n  mp3_tx: number;\r\n}\r\n\r\nexport default class Grove_MP3 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Grove_MP3\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public ioKeys: string[];\r\n  public displayName: any;\r\n  public displayIoNames: any;\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public my_tx: any;\r\n  public my_rx: any;\r\n  public uart: any;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"mp3_rx\", \"mp3_tx\"];\r\n    this.requiredKeys = [\"mp3_rx\", \"mp3_tx\"];\r\n\r\n    this.ioKeys = this.keys;\r\n    this.displayName = \"MP3\";\r\n    this.displayIoNames = {mp3_rx: \"MP3Rx\", mp3_tx: \"MP3Tx\"};\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.my_tx = this.params.mp3_rx;\r\n    this.my_rx = this.params.mp3_tx;\r\n\r\n    this.uart = this.obniz.getFreeUart();\r\n  }\r\n\r\n  public async initWait(strage: any) {\r\n    this.uart.start({\r\n      tx: this.my_tx,\r\n      rx: this.my_rx,\r\n      baud: 9600,\r\n    });\r\n    await this.obniz.wait(100);\r\n    this.uartSend(0x0c, 0);\r\n    await this.obniz.wait(500);\r\n    this.uartSend(0x0b, 0);\r\n    await this.obniz.wait(100);\r\n\r\n    if (strage) {\r\n      if (strage === \"usb\") {\r\n        this.uartSend(0x09, 1);\r\n      } else if (strage === \"sd\") {\r\n        this.uartSend(0x09, 2);\r\n      }\r\n    } else {\r\n      this.uartSend(0x09, 2);\r\n    }\r\n    await this.obniz.wait(200);\r\n  }\r\n\r\n  public setVolume(vol: number) {\r\n    if (vol >= 0 && vol <= 31) {\r\n      this.uartSend(0x06, vol);\r\n    }\r\n  }\r\n\r\n  public volUp() {\r\n    this.uartSend(0x04, 0);\r\n  }\r\n\r\n  public volDown() {\r\n    this.uartSend(0x05, 0);\r\n  }\r\n\r\n  public play(track: any, folder: any) {\r\n    // if (!folder) folder = {};\r\n    if (folder) {\r\n      this.uart.send([0x7e, 0xff, 0x06, 0x0f, 0x00, folder, track, 0xef]);\r\n    } else {\r\n      // Play 'MP3' folder\r\n      this.uartSend(0x12, track);\r\n    }\r\n  }\r\n\r\n  public stop() {\r\n    this.uartSend(0x16, 0);\r\n  }\r\n\r\n  public pause() {\r\n    this.uartSend(0x0e, 0);\r\n  }\r\n\r\n  public resume() {\r\n    this.uartSend(0x0d, 0);\r\n  }\r\n\r\n  public next() {\r\n    this.uartSend(0x01, 0);\r\n  }\r\n\r\n  public prev() {\r\n    this.uartSend(0x02, 0);\r\n  }\r\n\r\n  public uartSend(command: any, param: any) {\r\n    const paramM: any = param >> 8;\r\n    const paramL: any = param & 0xff;\r\n    this.uart.send([0x7e, 0xff, 0x06, command, 0x01, paramM, paramL, 0xef]);\r\n    const response: any = this.uart.readBytes();\r\n    return response;\r\n    // return response;\r\n  }\r\n}\r\n"]}