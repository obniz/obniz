{"version":3,"sources":["../src/parts/Grove/Grove_EarHeartRate/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,yBAAyB;IACxC,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB;AAED,MAAM,CAAC,OAAO,OAAO,kBAAmB,YAAW,mBAAmB;WAEtD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc;;;;MAInB;IACK,MAAM,EAAE,GAAG,CAAC;IAEZ,QAAQ,SAAK;IACb,QAAQ,SAAc;IAE7B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAKlB,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI;IAwBtC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;CAOlC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface Grove_EarHeartRateOptions {\r\n  gnd: number;\r\n  vcc: number;\r\n  signal?: number;\r\n}\r\n\r\nexport default class Grove_EarHeartRate implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Grove_EarHeartRate\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public displayIoNames = {\r\n    vcc: \"vcc\",\r\n    gnd: \"gnd\",\r\n    signal: \"signal\",\r\n  };\r\n  public params: any;\r\n\r\n  public interval = 5;\r\n  public duration = 2.5 * 1000;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\r\n    this.requiredKeys = [\"vcc\", \"gnd\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n  }\r\n\r\n  public start(callback: (rate: number) => void) {\r\n    this.obniz.logicAnalyzer!.start({\r\n      io: this.params.signal as number,\r\n      interval: this.interval as number,\r\n      duration: this.duration as number,\r\n    });\r\n\r\n    this.obniz.logicAnalyzer!.onmeasured = (array: number[]) => {\r\n      const edges: number[] = [];\r\n      for (let i = 0; i < array.length - 1; i++) {\r\n        if (array[i] === 0 && array[i + 1] === 1) {\r\n          edges.push(i);\r\n        }\r\n      }\r\n      if (edges.length >= 2) {\r\n        let between = 0;\r\n        let pulseMin = 0;\r\n        between = ((edges[1] - edges[0]) * this.interval) / 1000.0;\r\n        pulseMin = 60 / between;\r\n        callback(pulseMin);\r\n      }\r\n    };\r\n  }\r\n\r\n  public getWait(): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      this.start((rate: number) => {\r\n        resolve(rate);\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}