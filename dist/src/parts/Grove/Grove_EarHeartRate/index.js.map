{"version":3,"sources":["../src/parts/Grove/Grove_EarHeartRate/index.ts"],"names":[],"mappings":";;AASA,MAAqB,kBAAkB;IAsBrC;QAZO,mBAAc,GAAG;YACtB,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,KAAK;YACV,MAAM,EAAE,QAAQ;SACjB,CAAC;QAGK,aAAQ,GAAG,CAAC,CAAC;QACb,aAAQ,GAAG,GAAG,GAAG,IAAI,CAAC;QAK3B,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAvBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAqBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK,CAAC,QAAgC;QAC3C,IAAI,CAAC,KAAK,CAAC,aAAc,CAAC,KAAK,CAAC;YAC9B,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,MAAgB;YAChC,QAAQ,EAAE,IAAI,CAAC,QAAkB;YACjC,QAAQ,EAAE,IAAI,CAAC,QAAkB;SAClC,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,aAAc,CAAC,UAAU,GAAG,CAAC,KAAe,EAAE,EAAE;YACzD,MAAM,KAAK,GAAa,EAAE,CAAC;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;oBACxC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACf;aACF;YACD,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrB,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;gBAC3D,QAAQ,GAAG,EAAE,GAAG,OAAO,CAAC;gBACxB,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACpB;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,CAAC,IAAY,EAAE,EAAE;gBAC1B,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA/DD,qCA+DC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface Grove_EarHeartRateOptions {\r\n  gnd: number;\r\n  vcc: number;\r\n  signal?: number;\r\n}\r\n\r\nexport default class Grove_EarHeartRate implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Grove_EarHeartRate\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public displayIoNames = {\r\n    vcc: \"vcc\",\r\n    gnd: \"gnd\",\r\n    signal: \"signal\",\r\n  };\r\n  public params: any;\r\n\r\n  public interval = 5;\r\n  public duration = 2.5 * 1000;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\r\n    this.requiredKeys = [\"vcc\", \"gnd\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n  }\r\n\r\n  public start(callback: (rate: number) => void) {\r\n    this.obniz.logicAnalyzer!.start({\r\n      io: this.params.signal as number,\r\n      interval: this.interval as number,\r\n      duration: this.duration as number,\r\n    });\r\n\r\n    this.obniz.logicAnalyzer!.onmeasured = (array: number[]) => {\r\n      const edges: number[] = [];\r\n      for (let i = 0; i < array.length - 1; i++) {\r\n        if (array[i] === 0 && array[i + 1] === 1) {\r\n          edges.push(i);\r\n        }\r\n      }\r\n      if (edges.length >= 2) {\r\n        let between = 0;\r\n        let pulseMin = 0;\r\n        between = ((edges[1] - edges[0]) * this.interval) / 1000.0;\r\n        pulseMin = 60 / between;\r\n        callback(pulseMin);\r\n      }\r\n    };\r\n  }\r\n\r\n  public getWait(): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      this.start((rate: number) => {\r\n        resolve(rate);\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}