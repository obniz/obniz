{"version":3,"sources":["../src/parts/Grove/Grove_3AxisAccelerometer/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,+BAA+B;IAC9C,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;CACb;AAED,MAAM,CAAC,OAAO,OAAO,wBAAyB,YAAW,mBAAmB;WAE5D,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,WAAW,SAAW;IACtB,cAAc;;;MAA4B;IAE1C,OAAO,SAAQ;IACf,OAAO,EAAE,GAAG,CAAC;IACb,QAAQ,EAAE,GAAG,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAC,CAAS;IACrB,OAAO,CAAC,GAAG,CAAC,CAAS;IACrB,OAAO,CAAC,GAAG,CAAiB;IAC5B,OAAO,CAAC,aAAa,CAAM;;IA0Cd,KAAK,CAAC,KAAK,EAAE,GAAG;IAkEhB,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAWpD,mBAAmB,CAAC,YAAY,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAIxD,YAAY,CAAC,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAIhD,YAAY,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM;IAQ3B,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAU9B,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;CAQ1C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface Grove_3AxisAccelerometerOptions {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  sda: number;\r\n  scl: number;\r\n}\r\n\r\nexport default class Grove_3AxisAccelerometer implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Grove_3AxisAccelerometer\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public ioKeys: string[];\r\n  public displayName = \"3axis\";\r\n  public displayIoNames = {sda: \"sda\", scl: \"scl\"};\r\n\r\n  public address = 0x53;\r\n  public regAdrs: any;\r\n  public constVal: any;\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private vcc?: number;\r\n  private gnd?: number;\r\n  private i2c!: PeripheralI2C;\r\n  private etRegisterBit: any;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\"];\r\n    this.requiredKeys = [\"sda\", \"scl\"];\r\n\r\n    this.ioKeys = this.keys;\r\n\r\n    this.regAdrs = {};\r\n    this.regAdrs.POWER_CTL = 0x2d;\r\n    this.regAdrs.THRESH_ACT = 0x24;\r\n    this.regAdrs.THRESH_INACT = 0x25;\r\n    this.regAdrs.TIME_INACT = 0x26;\r\n    this.regAdrs.ACT_INACT_CTL = 0x27;\r\n    this.regAdrs.TAP_AXES = 0x2a;\r\n    this.regAdrs.THRESH_TAP = 0x1d;\r\n    this.regAdrs.DUR = 0x21;\r\n    this.regAdrs.LATENT = 0x22;\r\n    this.regAdrs.WINDOW = 0x23;\r\n    this.regAdrs.THRESH_FF = 0x28;\r\n    this.regAdrs.TIME_FF = 0x29;\r\n    this.regAdrs.INT_MAP = 0x2f;\r\n    this.regAdrs.INT_ENABLE = 0x2e;\r\n    this.regAdrs.DATAX0 = 0x32;\r\n\r\n    this.regAdrs.INT_DATA_READY_BIT = 0x07;\r\n    this.regAdrs.INT_SINGLE_TAP_BIT = 0x06;\r\n    this.regAdrs.INT_DOUBLE_TAP_BIT = 0x05;\r\n    this.regAdrs.INT_ACTIVITY_BIT = 0x04;\r\n    this.regAdrs.INT_INACTIVITY_BIT = 0x03;\r\n    this.regAdrs.INT_FREE_FALL_BIT = 0x02;\r\n    this.regAdrs.INT_WATERMARK_BIT = 0x01;\r\n    this.regAdrs.INT_OVERRUNY_BIT = 0x00;\r\n\r\n    this.constVal = {};\r\n    this.constVal.gainX = 0.0037639;\r\n    this.constVal.gainY = 0.00376009;\r\n    this.constVal.gainZ = 0.00349265;\r\n    this.constVal.INT1_PIN = 0x00;\r\n    this.constVal.INT2_PIN = 0x01;\r\n  }\r\n\r\n  public async wired(obniz: any) {\r\n    this.obniz = obniz;\r\n    this.vcc = this.params.vcc;\r\n    this.gnd = this.params.gnd;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.params.clock = 400000;\r\n    this.params.mode = \"master\";\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.obniz.wait(100);\r\n\r\n    // power on\r\n    this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 0]);\r\n    this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 16]);\r\n    this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 8]);\r\n\r\n    this.i2c.write(this.address, [this.regAdrs.THRESH_ACT, 75]); // set activity threshold 0~255\r\n    this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 75]); // set inactivity threshold 0~255\r\n    this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 10]); // set time inactivity 0~255\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 6, 1); // setActivityX\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 5, 1); // setActivityY\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 4, 1); // setActivityZ\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 2, 1); // setInactivityX\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 1, 1); // setInactivityY\r\n    await this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 0, 1); // setInactivityZ\r\n    await this.setRegisterBit(this.regAdrs.TAP_AXES, 2, 0); // setTapDetectionOnX\r\n    await this.setRegisterBit(this.regAdrs.TAP_AXES, 1, 0); // setTapDetectionOnY\r\n    await this.etRegisterBit(this.regAdrs.TAP_AXES, 0, 1); // setTapDetectionOnZ\r\n\r\n    this.i2c.write(this.address, [this.regAdrs.THRESH_TAP, 50]); // setTapThreshold\r\n    this.i2c.write(this.address, [this.regAdrs.DUR, 15]); // setTapDuration\r\n    this.i2c.write(this.address, [this.regAdrs.LATENT, 80]); // setDoubleTapLatency\r\n    this.i2c.write(this.address, [this.regAdrs.WINDOW, 200]); // setDoubleTapWindow\r\n    this.i2c.write(this.address, [this.regAdrs.THRESH_FF, 7]); // setFreeFallThreshold\r\n    this.i2c.write(this.address, [this.regAdrs.TIME_FF, 45]); // setFreeFallDuration\r\n\r\n    // setInterruptMapping\r\n    await this.setInterruptMapping(\r\n      this.regAdrs.INT_SINGLE_TAP_BIT,\r\n      this.constVal.INT1_PIN,\r\n    );\r\n    await this.setInterruptMapping(\r\n      this.regAdrs.INT_DOUBLE_TAP_BIT,\r\n      this.constVal.INT1_PIN,\r\n    );\r\n    await this.setInterruptMapping(\r\n      this.regAdrs.INT_FREE_FALL_BIT,\r\n      this.constVal.INT1_PIN,\r\n    );\r\n    await this.setInterruptMapping(\r\n      this.regAdrs.INT_ACTIVITY_BIT,\r\n      this.constVal.INT1_PIN,\r\n    );\r\n    await this.setInterruptMapping(\r\n      this.regAdrs.INT_INACTIVITY_BIT,\r\n      this.constVal.INT1_PIN,\r\n    );\r\n\r\n    // setInterrupt\r\n    await this.setInterrupt(this.regAdrs.INT_SINGLE_TAP_BIT, 1);\r\n    await this.setInterrupt(this.regAdrs.INT_DOUBLE_TAP_BIT, 1);\r\n    await this.setInterrupt(this.regAdrs.INT_FREE_FALL_BIT, 1);\r\n    await this.setInterrupt(this.regAdrs.INT_ACTIVITY_BIT, 1);\r\n    await this.setInterrupt(this.regAdrs.INT_INACTIVITY_BIT, 1);\r\n  }\r\n\r\n  public async setRegisterBit(regAddr: any, bitPos: any, state: any) {\r\n    this.i2c.write(this.address, [regAddr]);\r\n    let b: any = await this.i2c.readWait(this.address, 1);\r\n    if (state) {\r\n      b = b | (1 << bitPos); // forces nth bit of b to be 1.  all other bits left alone.\r\n    } else {\r\n      b = b & ~(1 << bitPos); // forces nth bit of b to be 0.  all other bits left alone.\r\n    }\r\n    this.i2c.write(this.address, [b]);\r\n  }\r\n\r\n  public async setInterruptMapping(interruptBit: any, interruptPin: any) {\r\n    await this.setRegisterBit(this.regAdrs.INT_MAP, interruptBit, interruptPin);\r\n  }\r\n\r\n  public async setInterrupt(interruptBit: any, state: any) {\r\n    await this.setRegisterBit(this.regAdrs.INT_ENABLE, interruptBit, state);\r\n  }\r\n\r\n  public signHandling(val: number): number {\r\n    const sign: any = val >> 15;\r\n    if (sign) {\r\n      val = -(0xffff - val);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  public async getRawVal(): Promise<number[]> {\r\n    this.i2c.write(this.address, [this.regAdrs.DATAX0]);\r\n    const buff: any = await this.i2c.readWait(this.address, 6);\r\n    const rawVal: any = [0, 0, 0];\r\n    rawVal[0] = this.signHandling((buff[1] << 8) | buff[0]);\r\n    rawVal[1] = this.signHandling((buff[3] << 8) | buff[2]);\r\n    rawVal[2] = this.signHandling((buff[5] << 8) | buff[4]);\r\n    return rawVal;\r\n  }\r\n\r\n  public async getWait(): Promise<number[]> {\r\n    const accelVal: any = [0, 0, 0];\r\n    const raw: any = await this.getRawVal();\r\n    accelVal[0] = raw[0] * this.constVal.gainX;\r\n    accelVal[1] = raw[1] * this.constVal.gainY;\r\n    accelVal[2] = raw[2] * this.constVal.gainZ;\r\n    return accelVal;\r\n  }\r\n}\r\n"]}