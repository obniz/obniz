{"version":3,"sources":["../src/parts/Grove/Grove_Buzzer/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAEhD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAiB;;IAOrB,KAAK,CAAC,KAAK,EAAE,KAAK;IAOlB,IAAI,CAAC,IAAI,EAAE,MAAM;IAajB,IAAI;CAGZ","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface Grove_BuzzerOptions {\r\n  signal: number;\r\n  gnd?: number;\r\n  vcc?: number;\r\n}\r\n\r\nexport default class Grove_Buzzer implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"Grove_Buzzer\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private pwm!: PeripheralPWM;\r\n\r\n  constructor() {\r\n    this.keys = [\"signal\", \"gnd\", \"vcc\"];\r\n    this.requiredKeys = [\"signal\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.pwm = obniz.getFreePwm();\r\n    this.pwm.start({io: this.params.signal});\r\n  }\r\n\r\n  public play(freq: number) {\r\n    if (typeof freq !== \"number\") {\r\n      throw new Error(\"freq must be a number\");\r\n    }\r\n    freq = Math.floor(freq);\r\n    if (freq > 0) {\r\n      this.pwm.freq(freq);\r\n      this.pwm.pulse((1 / freq / 2) * 1000);\r\n    } else {\r\n      this.pwm.pulse(0);\r\n    }\r\n  }\r\n\r\n  public stop() {\r\n    this.play(0);\r\n  }\r\n}\r\n"]}