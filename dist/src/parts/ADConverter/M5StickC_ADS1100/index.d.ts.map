{"version":3,"sources":["../src/parts/ADConverter/M5StickC_ADS1100/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,uBAAuB;IACpC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;CACf;AAED,MAAM,CAAC,OAAO,OAAO,gBAAiB,YAAW,mBAAmB;WAElD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO,EAAE,MAAM,CAAC;IAChB,eAAe,EAAE,MAAM,CAAC;IACxB,WAAW,EAAE,GAAG,CAAC;IACjB,MAAM,EAAE,GAAG,CAAC;IACZ,EAAE,EAAE,MAAM,CAAC;IACX,IAAI,EAAE,MAAM,CAAC;IACb,QAAQ,EAAE,MAAM,CAAC;IACjB,GAAG,EAAE,MAAM,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;IAC9B,OAAO,CAAC,OAAO,CAAS;;IAsCjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAcZ,cAAc;IAMpB,OAAO,CAAC,QAAQ,EAAE,MAAM;IAuBxB,OAAO,CAAC,IAAI,EAAE,MAAM;IAmBpB,OAAO,CAAC,IAAI,EAAE,MAAM;YAab,OAAO;IAQrB,OAAO,CAAC,YAAY;CAOvB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface M5StickC_ADS1100Options {\n    vcc?: number;\n    gnd?: number;\n    sda: number;\n    scl: number;\n}\n\nexport default class M5StickC_ADS1100 implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5StickC_ADS1100\",\n        };\n    }\n\n    public keys: string[];\n    public requiredKeys: string[];\n    public params: any;\n\n    public address: number;\n    public conversionDelay: number;\n    public config_regs: any;\n    public config: any;\n    public os: number;\n    public mode: number;\n    public dataRate: number;\n    public pga: number;\n\n    protected obniz!: Obniz;\n    protected i2c!: PeripheralI2C;\n    private minCode: number;\n\n    constructor() {\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n        this.requiredKeys = [\"sda\", \"scl\"];\n        this.address = 0x48;\n        this.conversionDelay = 100;\n        this.config_regs = {\n            OS_MASK:     0x80,   // Conversion\n            OS_NOEFFECT: 0x00,   // Write: Bit = 0 No effect\n            OS_SINGLE:   0x80,   // Write: Bit = 1 Begin a conversion (default)\n            OS_BUSY:     0x00,   // Read: Bit = 0 Device is not performing a conversion\n            OS_NOTBUSY:  0x80,   // Read: Bit = 1 Device is busy performing a conversion\n\n            MODE_MASK:   0x10,   // Device operating mode\n            MODE_CONTIN: 0x00,   // Continuous conversion mode (default)\n            MODE_SINGLE: 0x10,   // Single-conversion mode\n\n            DR_MASK:     0x0C,   // Data rate\n            DR_128SPS:   0x00,   // 128 samples per second\n            DR_32SPS:    0x04,   // 32 samples per second\n            DR_16SPS:    0x08,   // 16 samples per second\n            DR_8SPS:     0x0C,   // 8 samples per second (default)\n\n            PGA_MASK:    0x03,   // Programmable gain amplifier configuration\n            PGA_1:       0x00,   // Gain 1 (default)\n            PGA_2:       0x01,   // Gain 2\n            PGA_4:       0x02,   // Gain 4\n            PGA_8:       0x03,   // Gain 8\n        };\n        this.os = this.config_regs.OS_SINGLE;\n        this.mode = this.config_regs.MODE_CONTIN;\n        this.dataRate = this.config_regs.DR_8SPS;\n        this.pga = this.config_regs.PGA_1;\n        this.minCode = 32768;\n        this.updateConfig();\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n        this.i2c = this.obniz.getFreeI2C();\n        this.i2c.start({\n            mode: \"master\",\n            sda: this.params.sda,\n            scl: this.params.scl,\n            clock: 400000,\n            pull: \"5v\",\n        });\n        this.obniz.wait(100);\n    }\n\n    public async getVoltageWait() {\n        const raw = await this.getWait();\n        const voltage = raw * 3.3 / (this.minCode) * 4 * 1000;\n        return voltage;\n    }\n\n    public setRate(dataRate: number) {\n        switch (dataRate) {\n            case 8:\n                this.dataRate = this.config_regs.DR_8SPS;\n                this.minCode = 32768;\n                break;\n            case 16:\n                this.dataRate = this.config_regs.DR_16SPS;\n                this.minCode = 16384;\n                break;\n            case 32:\n                this.dataRate = this.config_regs.DR_32SPS;\n                this.minCode = 8192;\n                break;\n            case 128:\n                this.dataRate = this.config_regs.DR_128SPS;\n                this.minCode = 2048;\n                break;\n            default:\n                throw new Error(`argument must be selected from 8, 16, 32, 128.`);\n        }\n    }\n\n    public setGain(gain: number) {\n        switch (gain) {\n            case 1:\n                this.pga = this.config_regs.PGA_1;\n                break;\n            case 2:\n                this.pga = this.config_regs.PGA_2;\n                break;\n            case 4:\n                this.pga = this.config_regs.PGA_4;\n                break;\n            case 8:\n                this.pga = this.config_regs.PGA_8;\n                break;\n            default:\n                throw new Error(`argument must be selected from 1, 2, 4, 8.`);\n        }\n    }\n\n    public setMode(mode: string) {\n        switch (mode) {\n            case \"CONTIN\":\n                this.mode = this.config_regs.MODE_CONTIN;\n                break;\n            case \"SINGLE\":\n                this.mode = this.config_regs.MODE_SINGLE;\n                break;\n            default:\n                throw new Error(`argument must be selected from \"CONTIN\" or \"SINGLE\".`);\n        }\n    }\n\n    private async getWait() {\n        this.updateConfig();\n        this.i2c.write(this.address, [this.config]);\n        await this.obniz.wait(this.conversionDelay);\n        const ret = await this.i2c.readWait(this.address, 2);\n        return ((ret[0] << 8) | ret[1]);\n    }\n\n    private updateConfig() {\n        this.config = 0x00;\n        this.config |= this.os;\n        this.config |= this.mode;\n        this.config |= this.dataRate;\n        this.config |= this.pga;\n    }\n}\n"]}