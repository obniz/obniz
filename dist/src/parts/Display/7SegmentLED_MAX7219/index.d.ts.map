{"version":3,"sources":["../src/parts/Display/7SegmentLED_MAX7219/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,2BAA2B;IAC1C,GAAG,EAAE,MAAM,CAAC;IACZ,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,iBAAiB,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE3E,MAAM,CAAC,OAAO,OAAO,oBAAqB,YAAW,mBAAmB;WAExD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,EAAE,EAAG,YAAY,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAG,aAAa,CAAC;IACpB,KAAK,EAAG,KAAK,CAAC;IACd,SAAS,EAAG,MAAM,CAAC;IACnB,MAAM,EAAG,MAAM,CAAC;;IAOhB,KAAK,CAAC,KAAK,EAAE,KAAK;IAuBlB,IAAI,CAAC,gBAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAW7C,KAAK,CAAC,IAAI,EAAE,MAAM;IAMlB,QAAQ;IAQR,IAAI;IAIJ,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;IAIzC,aAAa,CAAC,KAAK,EAAE,MAAM;IAI3B,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE;IAM3B,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAYzC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,iBAAiB,EAAE,EAAE,EAAE,OAAO;IAMzF,SAAS,CAAC,OAAO,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,MAAM;CAwB5D","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface _7SegmentLED_MAX7219Options {\n  clk: number;\n  cs: number;\n  din: number;\n  gnd?: number;\n  vcc?: number;\n}\n\nexport type MAX7219NumberType = \"on\" | \"off\" | \"-\" | \"e\" | \"h\" | \"l\" | \"p\";\n\nexport default class _7SegmentLED_MAX7219 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"7SegmentLED_MAX7219\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public cs!: PeripheralIO;\n  public params: any;\n  public spi!: PeripheralSPI;\n  public obniz!: Obniz;\n  public numOfDisp!: number;\n  public digits!: number;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"din\", \"cs\", \"clk\"];\n    this.requiredKeys = [\"din\", \"cs\", \"clk\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.cs = obniz.getIO(this.params.cs);\n    // logich high must 3.5v <=\n    if (obniz.isValidIO(this.params.vcc)) {\n      obniz.getIO(this.params.vcc).output(true);\n    }\n    if (obniz.isValidIO(this.params.gnd)) {\n      obniz.getIO(this.params.gnd).output(false);\n    }\n\n    // max 10Mhz but motor driver can't\n    this.params.frequency = this.params.frequency || 10 * 1000 * 1000;\n    this.params.mode = \"master\";\n    this.params.mosi = this.params.din;\n    this.params.drive = \"3v\";\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n\n    // reset a onece\n    this.cs.output(true);\n    this.cs.output(false);\n    this.cs.output(true);\n  }\n\n  public init(numberOfDisplays: number, digits: number) {\n    this.numOfDisp = numberOfDisplays;\n    this.digits = digits;\n    this.writeAllDisp([0x09, 0xff]); // Code B decode for digits 7-0\n    this.writeAllDisp([0x0a, 0x05]); // brightness 11/32 0 to f\n    this.writeAllDisp([0x0b, digits - 1]);\n    this.writeAllDisp([0x0c, 0x01]); // Shutdown to normal operation\n    this.writeAllDisp([0x0f, 0x00]);\n    this.obniz.wait(10);\n  }\n\n  public clear(disp: number) {\n    for (let i = 0; i < this.digits; i++) {\n      this.writeOneDisp(disp, [i + 1, 0x0f]);\n    }\n  }\n\n  public clearAll() {\n    for (let i = 0; i < this.numOfDisp; i++) {\n      for (let j = 0; j < this.digits; j++) {\n        this.writeAllDisp([j + 1, 0x0f]);\n      }\n    }\n  }\n\n  public test() {\n    this.writeAllDisp([0x0f, 0x00]); // test command\n  }\n\n  public brightness(display: number, value: number) {\n    this.writeOneDisp(display, [0x0a, value]); // 0 to 15;\n  }\n\n  public brightnessAll(value: number) {\n    this.writeAllDisp([0x0a, value]); // 0 to 15;\n  }\n\n  public writeAllDisp(data: number[]) {\n    for (let i = 0; i < this.numOfDisp; i++) {\n      this.writeOneDisp(i, data);\n    }\n  }\n\n  public writeOneDisp(disp: number, data: number[]) {\n    this.cs.output(false);\n    for (let i = 0; i < disp; i++) {\n      this.spi.write([0x00, 0x00]);\n    }\n    this.spi.write(data);\n    for (let i = 0; i < this.numOfDisp - (disp + 1); i++) {\n      this.spi.write([0x00, 0x00]);\n    }\n    this.cs.output(true);\n  }\n\n  public setNumber(display: number, digit: number, number: number | MAX7219NumberType, dp: boolean) {\n    if (digit >= 0 && digit <= this.digits - 1) {\n      this.writeOneDisp(display, [digit + 1, this.encodeBCD(number, dp)]);\n    }\n  }\n\n  public encodeBCD(decimal: number | string, dp: any): number {\n    const dpreg = (dp === true) ? 0x80 : 0x00;\n\n    if (decimal >= 0 && decimal <= 9) {\n      return (decimal as number) | dpreg;\n    } else if (decimal === \"-\" || decimal === 10) {\n      return 0x0a | dpreg;\n    } else if (decimal === \"e\" || decimal === 11) {\n      return 0x0b | dpreg;\n    } else if (decimal === \"h\" || decimal === 12) {\n      return 0x0c | dpreg;\n    } else if (decimal === \"l\" || decimal === 13) {\n      return 0x0d | dpreg;\n    } else if (decimal === \"p\" || decimal === 14) {\n      return 0x0e | dpreg;\n    } else if (decimal === \"on\") {\n      // light all segments\n      return 0x88;\n    } else if (decimal === \"off\") {\n      return 0x0f | dpreg;\n    } else {\n      return 0x0f | dpreg;\n    }\n  }\n}\n"]}