{"version":3,"sources":["../src/parts/Display/7SegmentLED_MAX7219/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,2BAA2B;IAC1C,GAAG,EAAE,MAAM,CAAC;IACZ,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,iBAAiB,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE3E,MAAM,CAAC,OAAO,OAAO,oBAAqB,YAAW,mBAAmB;WAExD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,EAAE,EAAG,YAAY,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAG,aAAa,CAAC;IACpB,KAAK,EAAG,KAAK,CAAC;IACd,SAAS,EAAG,MAAM,CAAC;IACnB,MAAM,EAAG,MAAM,CAAC;;IAOhB,KAAK,CAAC,KAAK,EAAE,KAAK;IAuBlB,IAAI,CAAC,gBAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAW7C,KAAK,CAAC,IAAI,EAAE,MAAM;IAMlB,QAAQ;IAQR,IAAI;IAIJ,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;IAIzC,aAAa,CAAC,KAAK,EAAE,MAAM;IAI3B,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE;IAM3B,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAYzC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,iBAAiB,EAAE,EAAE,EAAE,OAAO;IAMzF,SAAS,CAAC,OAAO,EAAE,MAAM,GAAG,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,MAAM;CAwB5D","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface _7SegmentLED_MAX7219Options {\r\n  clk: number;\r\n  cs: number;\r\n  din: number;\r\n  gnd?: number;\r\n  vcc?: number;\r\n}\r\n\r\nexport type MAX7219NumberType = \"on\" | \"off\" | \"-\" | \"e\" | \"h\" | \"l\" | \"p\";\r\n\r\nexport default class _7SegmentLED_MAX7219 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"7SegmentLED_MAX7219\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public cs!: PeripheralIO;\r\n  public params: any;\r\n  public spi!: PeripheralSPI;\r\n  public obniz!: Obniz;\r\n  public numOfDisp!: number;\r\n  public digits!: number;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"din\", \"cs\", \"clk\"];\r\n    this.requiredKeys = [\"din\", \"cs\", \"clk\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.cs = obniz.getIO(this.params.cs);\r\n    // logich high must 3.5v <=\r\n    if (obniz.isValidIO(this.params.vcc)) {\r\n      obniz.getIO(this.params.vcc).output(true);\r\n    }\r\n    if (obniz.isValidIO(this.params.gnd)) {\r\n      obniz.getIO(this.params.gnd).output(false);\r\n    }\r\n\r\n    // max 10Mhz but motor driver can't\r\n    this.params.frequency = this.params.frequency || 10 * 1000 * 1000;\r\n    this.params.mode = \"master\";\r\n    this.params.mosi = this.params.din;\r\n    this.params.drive = \"3v\";\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n\r\n    // reset a onece\r\n    this.cs.output(true);\r\n    this.cs.output(false);\r\n    this.cs.output(true);\r\n  }\r\n\r\n  public init(numberOfDisplays: number, digits: number) {\r\n    this.numOfDisp = numberOfDisplays;\r\n    this.digits = digits;\r\n    this.writeAllDisp([0x09, 0xff]); // Code B decode for digits 7-0\r\n    this.writeAllDisp([0x0a, 0x05]); // brightness 11/32 0 to f\r\n    this.writeAllDisp([0x0b, digits - 1]);\r\n    this.writeAllDisp([0x0c, 0x01]); // Shutdown to normal operation\r\n    this.writeAllDisp([0x0f, 0x00]);\r\n    this.obniz.wait(10);\r\n  }\r\n\r\n  public clear(disp: number) {\r\n    for (let i = 0; i < this.digits; i++) {\r\n      this.writeOneDisp(disp, [i + 1, 0x0f]);\r\n    }\r\n  }\r\n\r\n  public clearAll() {\r\n    for (let i = 0; i < this.numOfDisp; i++) {\r\n      for (let j = 0; j < this.digits; j++) {\r\n        this.writeAllDisp([j + 1, 0x0f]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public test() {\r\n    this.writeAllDisp([0x0f, 0x00]); // test command\r\n  }\r\n\r\n  public brightness(display: number, value: number) {\r\n    this.writeOneDisp(display, [0x0a, value]); // 0 to 15;\r\n  }\r\n\r\n  public brightnessAll(value: number) {\r\n    this.writeAllDisp([0x0a, value]); // 0 to 15;\r\n  }\r\n\r\n  public writeAllDisp(data: number[]) {\r\n    for (let i = 0; i < this.numOfDisp; i++) {\r\n      this.writeOneDisp(i, data);\r\n    }\r\n  }\r\n\r\n  public writeOneDisp(disp: number, data: number[]) {\r\n    this.cs.output(false);\r\n    for (let i = 0; i < disp; i++) {\r\n      this.spi.write([0x00, 0x00]);\r\n    }\r\n    this.spi.write(data);\r\n    for (let i = 0; i < this.numOfDisp - (disp + 1); i++) {\r\n      this.spi.write([0x00, 0x00]);\r\n    }\r\n    this.cs.output(true);\r\n  }\r\n\r\n  public setNumber(display: number, digit: number, number: number | MAX7219NumberType, dp: boolean) {\r\n    if (digit >= 0 && digit <= this.digits - 1) {\r\n      this.writeOneDisp(display, [digit + 1, this.encodeBCD(number, dp)]);\r\n    }\r\n  }\r\n\r\n  public encodeBCD(decimal: number | string, dp: any): number {\r\n    const dpreg = (dp === true) ? 0x80 : 0x00;\r\n\r\n    if (decimal >= 0 && decimal <= 9) {\r\n      return (decimal as number) | dpreg;\r\n    } else if (decimal === \"-\" || decimal === 10) {\r\n      return 0x0a | dpreg;\r\n    } else if (decimal === \"e\" || decimal === 11) {\r\n      return 0x0b | dpreg;\r\n    } else if (decimal === \"h\" || decimal === 12) {\r\n      return 0x0c | dpreg;\r\n    } else if (decimal === \"l\" || decimal === 13) {\r\n      return 0x0d | dpreg;\r\n    } else if (decimal === \"p\" || decimal === 14) {\r\n      return 0x0e | dpreg;\r\n    } else if (decimal === \"on\") {\r\n      // light all segments\r\n      return 0x88;\r\n    } else if (decimal === \"off\") {\r\n      return 0x0f | dpreg;\r\n    } else {\r\n      return 0x0f | dpreg;\r\n    }\r\n  }\r\n}\r\n"]}