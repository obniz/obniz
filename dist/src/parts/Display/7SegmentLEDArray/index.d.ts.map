{"version":3,"sources":["../src/parts/Display/7SegmentLEDArray/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AACvF,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,MAAM,WAAW,wBAAwB;IACvC,QAAQ,EAAE,YAAY,EAAE,CAAC;CAC1B;AAED,MAAM,CAAC,OAAO,OAAO,iBAAkB,YAAW,mBAAmB;WAErD,IAAI,IAAI,cAAc;IAM7B,UAAU,EAAE,MAAM,CAAC;IACnB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAG,KAAK,CAAC;IACd,QAAQ,EAAG,YAAY,EAAE,CAAC;IAC1B,MAAM,EAAE,GAAG,CAAC;;IASZ,KAAK,CAAC,KAAK,EAAE,KAAK;IAMlB,KAAK,CAAC,IAAI,EAAE,MAAM;IA6BlB,EAAE;IAIF,GAAG;CAMX","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\nimport _7SegmentLED from \"../7SegmentLED\";\r\n\r\nexport interface _7SegmentLEDArrayOptions {\r\n  segments: _7SegmentLED[];\r\n}\r\n\r\nexport default class _7SegmentLEDArray implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"7SegmentLEDArray\",\r\n    };\r\n  }\r\n\r\n  public identifier: string;\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public obniz!: Obniz;\r\n  public segments!: _7SegmentLED[];\r\n  public params: any;\r\n\r\n  constructor() {\r\n    this.identifier = \"\" + new Date().getTime();\r\n\r\n    this.keys = [\"segments\"];\r\n    this.requiredKeys = this.keys;\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.segments = this.params.segments;\r\n  }\r\n\r\n  public print(data: number) {\r\n    if (typeof data === \"number\") {\r\n      data = Math.floor(data);\r\n\r\n      const print: any = (index: number) => {\r\n        let val: any = data;\r\n\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n          if (index === i) {\r\n            this.segments[i].print(val % 10);\r\n          } else {\r\n            this.segments[i].off();\r\n          }\r\n          val = val / 10;\r\n        }\r\n      };\r\n\r\n      const animations: any = [];\r\n      for (let i = 0; i < this.segments.length; i++) {\r\n        animations.push({\r\n          duration: 3,\r\n          state: print,\r\n        });\r\n      }\r\n\r\n      this.obniz.io!.animation(this.identifier, \"loop\", animations);\r\n    }\r\n  }\r\n\r\n  public on() {\r\n    this.obniz.io!.animation(this.identifier, \"resume\");\r\n  }\r\n\r\n  public off() {\r\n    this.obniz.io!.animation(this.identifier, \"pause\");\r\n    for (let i = 0; i < this.segments.length; i++) {\r\n      this.segments[i].off();\r\n    }\r\n  }\r\n}\r\n"]}