{"version":3,"sources":["../src/parts/Display/SharpMemoryTFT/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface SharpMemoryTFTOptions {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  vcc_a?: number;\r\n  gnd_a?: number;\r\n  sclk: number;\r\n  mosi: number;\r\n  cs: number;\r\n  disp?: number;\r\n  extcomin?: number;\r\n  extmode?: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport default class SharpMemoryTFT implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"SharpMemoryTFT\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n\r\n  public commands = {\r\n    write: 0x80,\r\n    clear: 0x20,\r\n    vcom: 0x40,\r\n  };\r\n\r\n  public _canvas: any;\r\n  public obniz!: Obniz;\r\n  public io_cs!: PeripheralIO;\r\n  public params: any;\r\n  public io_disp?: PeripheralIO;\r\n  public io_extcomin?: PeripheralIO;\r\n  public io_extmode?: PeripheralIO;\r\n  public spi!: PeripheralSPI;\r\n  public width = 0;\r\n  public height = 0;\r\n  public _pos = {x: 0 , y: 0};\r\n  public autoFlush = false;\r\n  public fontSize = 0;\r\n  public createCanvas: any;\r\n\r\n  constructor() {\r\n    this.keys = [\r\n      \"vcc\",\r\n      \"gnd\",\r\n      \"vcc_a\",\r\n      \"gnd_a\",\r\n      \"sclk\",\r\n      \"mosi\",\r\n      \"cs\",\r\n      \"disp\",\r\n      \"extcomin\",\r\n      \"extmode\",\r\n      \"width\",\r\n      \"height\",\r\n    ];\r\n\r\n    this.requiredKeys = [\"sclk\", \"mosi\", \"cs\", \"width\", \"height\"];\r\n\r\n    this._canvas = null;\r\n    this._reset();\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.io_cs = obniz.getIO(this.params.cs);\r\n\r\n    if (this.params.disp && this.params.extcomin && this.params.extmode) {\r\n      this.io_disp = obniz.getIO(this.params.disp);\r\n      this.io_extcomin = obniz.getIO(this.params.extcomin);\r\n      this.io_extmode = obniz.getIO(this.params.extmode);\r\n      this.io_disp.output(true);\r\n      this.io_extcomin.output(false);\r\n      this.io_extmode.output(false);\r\n    }\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    obniz.setVccGnd(this.params.vcc_a, this.params.gnd_a, \"5v\");\r\n\r\n    this.params.mode = \"master\";\r\n    this.params.frequency = 1000 * 1000;\r\n    this.params.clk = this.params.sclk;\r\n    this.params.drive = \"5v\"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n\r\n    this.width = this.params.width;\r\n    this.height = this.params.height;\r\n\r\n    this.obniz.wait(100);\r\n  }\r\n\r\n  public _reverseBits(data: number) {\r\n    let revData = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n      revData += data & 0x01;\r\n      data >>= 1;\r\n      if (i < 7) {\r\n        revData <<= 1;\r\n      }\r\n    }\r\n    return revData;\r\n  }\r\n\r\n  public sendLSB(data: number) {\r\n    this.spi.write([this._reverseBits(data)]);\r\n  }\r\n\r\n  public sendClear() {\r\n    this.io_cs.output(true);\r\n    this.spi.write([this.commands.clear | 0x00, 0x00]);\r\n    this.io_cs.output(false);\r\n  }\r\n\r\n  public raw(rawData: number[]) {\r\n    let oldline: number;\r\n    let currentline: number;\r\n    const totalbytes = (this.width * this.height) / 8;\r\n    let array = new Array(1024);\r\n    let index = 0;\r\n    array[index++] = this.commands.write | this.commands.vcom;\r\n    oldline = currentline = 1;\r\n    array[index++] = this._reverseBits(currentline);\r\n    this.io_cs.output(true);\r\n    for (let i = 0; i < totalbytes; i++) {\r\n      array[index++] = rawData[i]; // lsb\r\n      currentline = Math.floor((i + 1) / (this.width / 8) + 1);\r\n      if (currentline !== oldline) {\r\n        array[index++] = 0x00;\r\n        if (currentline <= this.height) {\r\n          array[index++] = this._reverseBits(currentline);\r\n        }\r\n        oldline = currentline;\r\n      }\r\n      if (index >= 1021) {\r\n        // regarding SPI max.\r\n        this.spi.write(array.slice(0, index));\r\n        array = new Array(1024);\r\n        index = 0;\r\n      }\r\n    }\r\n    if (index > 0) {\r\n      this.spi.write(array.slice(0, index));\r\n    }\r\n    this.spi.write([0x00]);\r\n    this.io_cs.output(false);\r\n  }\r\n\r\n  // copy from display.js\r\n\r\n  public _reset() {\r\n    this._pos = {x: 0, y: 0};\r\n    this.autoFlush = true;\r\n  }\r\n\r\n  public warnCanvasAvailability() {\r\n    if (this.obniz.isNode) {\r\n      throw new Error(\r\n        \"MemoryDisplay require node-canvas to draw rich contents. see more detail on docs\",\r\n      );\r\n    } else {\r\n      throw new Error(\"MemoryDisplay cant create canvas element to body\");\r\n    }\r\n  }\r\n\r\n  public _preparedCanvas(): any {\r\n    if (this._canvas) {\r\n      return this._canvas;\r\n    }\r\n    if (this.obniz.isNode) {\r\n      try {\r\n        const {createCanvas} = require(\"canvas\");\r\n        this._canvas = createCanvas(this.width, this.height);\r\n      } catch (e) {\r\n        // this.warnCanvasAvailability();\r\n        return null;\r\n      }\r\n    } else {\r\n      const identifier = \"MemoryDispCanvas-\" + this.obniz.id;\r\n      let canvas: any = document.getElementById(identifier);\r\n      if (!canvas) {\r\n        canvas = document.createElement(\"canvas\");\r\n        canvas.setAttribute(\"id\", identifier);\r\n        canvas.style.visibility = \"hidden\";\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        canvas.style[\"-webkit-font-smoothing\"] = \"none\";\r\n        const body = document.getElementsByTagName(\"body\")[0];\r\n        body.appendChild(canvas);\r\n      }\r\n      this._canvas = canvas;\r\n    }\r\n    const ctx: CanvasRenderingContext2D = this._canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"#FFF\";\r\n    ctx.fillRect(0, 0, this.width, this.height);\r\n    ctx.fillStyle = \"#000\";\r\n    ctx.strokeStyle = \"#000\";\r\n    this._pos.x = 0;\r\n    this._pos.y = 0;\r\n    this.fontSize = 16;\r\n    ctx.font = `${this.fontSize}px Arial`;\r\n    return this._canvas;\r\n  }\r\n\r\n  public _ctx(): CanvasRenderingContext2D {\r\n    const canvas = this._preparedCanvas();\r\n    return canvas.getContext(\"2d\");\r\n  }\r\n\r\n  public font(font: string, size: number) {\r\n    const ctx = this._ctx();\r\n    if (typeof size !== \"number\") {\r\n      size = 16;\r\n    }\r\n    if (typeof font !== \"string\") {\r\n      font = \"Arial\";\r\n    }\r\n    this.fontSize = size;\r\n    ctx.font = \"\" + size + \"px \" + font;\r\n  }\r\n\r\n  public clear() {\r\n    const ctx = this._ctx();\r\n    this._pos.x = 0;\r\n    this._pos.y = 0;\r\n    if (ctx) {\r\n      ctx.fillStyle = \"#fff\";\r\n      ctx.fillRect(0, 0, this.width, this.height);\r\n      ctx.fillStyle = \"#000\";\r\n      ctx.strokeStyle = \"#000\";\r\n      this.draw(ctx);\r\n    } else {\r\n      this.sendClear();\r\n    }\r\n  }\r\n\r\n  public pos(x: number, y: number) {\r\n    this._ctx(); // crete first\r\n    if (typeof x === \"number\") {\r\n      this._pos.x = x;\r\n    }\r\n    if (typeof y === \"number\") {\r\n      this._pos.y = y;\r\n    }\r\n    return this._pos;\r\n  }\r\n\r\n  public print(text: string) {\r\n    const ctx = this._ctx();\r\n    if (ctx) {\r\n      ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);\r\n      this.draw(ctx);\r\n      this._pos.y += this.fontSize;\r\n    } else {\r\n      /*\r\n      let obj = {};\r\n      obj['display'] = {\r\n        text: '' + text,\r\n      };\r\n      this.obniz.send(obj);\r\n      */\r\n    }\r\n  }\r\n\r\n  public line(x_0: number, y_0: number, x_1: number, y_1: number) {\r\n    const ctx = this._ctx();\r\n    if (ctx) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x_0, y_0);\r\n      ctx.lineTo(x_1, y_1);\r\n      ctx.stroke();\r\n      this.draw(ctx);\r\n    } else {\r\n      this.warnCanvasAvailability();\r\n    }\r\n  }\r\n\r\n  public rect(x: number, y: number, width: number, height: number, mustFill: boolean) {\r\n    const ctx = this._ctx();\r\n    if (ctx) {\r\n      if (mustFill) {\r\n        ctx.fillRect(x, y, width, height);\r\n      } else {\r\n        ctx.strokeRect(x, y, width, height);\r\n      }\r\n      this.draw(ctx);\r\n    } else {\r\n      this.warnCanvasAvailability();\r\n    }\r\n  }\r\n\r\n  public circle(x: number, y: number, r: number, mustFill: boolean) {\r\n    const ctx = this._ctx();\r\n    if (ctx) {\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, r, 0, Math.PI * 2);\r\n      if (mustFill) {\r\n        ctx.fill();\r\n      } else {\r\n        ctx.stroke();\r\n      }\r\n      this.draw(ctx);\r\n    } else {\r\n      this.warnCanvasAvailability();\r\n    }\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    if (this.autoFlush) {\r\n      this._draw(ctx);\r\n    }\r\n  }\r\n\r\n  public drawing(autoFlush: boolean) {\r\n    this.autoFlush = autoFlush === true;\r\n    const ctx = this._ctx();\r\n    if (ctx) {\r\n      this.draw(ctx);\r\n    }\r\n  }\r\n\r\n  private _draw(ctx: CanvasRenderingContext2D) {\r\n    const stride = this.width / 8;\r\n    const vram = new Array(stride * 64);\r\n    const imageData = ctx.getImageData(0, 0, this.width, this.height);\r\n    const data = imageData.data;\r\n\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\r\n      const index = Math.floor(i / 4);\r\n      const line = Math.floor(index / this.width);\r\n      const col = Math.floor((index - line * this.width) / 8);\r\n      const bits = Math.floor(index - line * this.width) % 8;\r\n      if (bits === 0) {\r\n        vram[line * stride + col] = 0x00;\r\n      }\r\n      if (brightness > 0x73) {\r\n        vram[line * stride + col] |= 0x80 >> bits;\r\n      }\r\n    }\r\n    this.raw(vram);\r\n  }\r\n}\r\n"]}