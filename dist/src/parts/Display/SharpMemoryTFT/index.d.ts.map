{"version":3,"sources":["../src/parts/Display/SharpMemoryTFT/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,qBAAqB;IACpC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IACX,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,CAAC,OAAO,OAAO,cAAe,YAAW,mBAAmB;WAElD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAEvB,QAAQ;;;;MAIb;IAEK,OAAO,EAAE,GAAG,CAAC;IACb,KAAK,EAAG,KAAK,CAAC;IACd,KAAK,EAAG,YAAY,CAAC;IACrB,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,CAAC,EAAE,YAAY,CAAC;IACvB,WAAW,CAAC,EAAE,YAAY,CAAC;IAC3B,UAAU,CAAC,EAAE,YAAY,CAAC;IAC1B,GAAG,EAAG,aAAa,CAAC;IACpB,KAAK,SAAK;IACV,MAAM,SAAK;IACX,IAAI;;;MAAiB;IACrB,SAAS,UAAS;IAClB,QAAQ,SAAK;IACb,YAAY,EAAE,GAAG,CAAC;;IAwBlB,KAAK,CAAC,KAAK,EAAE,KAAK;IA6BlB,YAAY,CAAC,IAAI,EAAE,MAAM;IAYzB,OAAO,CAAC,IAAI,EAAE,MAAM;IAIpB,SAAS;IAMT,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE;IAoCrB,MAAM;IAKN,sBAAsB;IAUtB,eAAe,IAAI,GAAG;IAuCtB,IAAI,IAAI,wBAAwB;IAKhC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAY/B,KAAK;IAeL,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM;;;;IAWxB,KAAK,CAAC,IAAI,EAAE,MAAM;IAiBlB,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM;IAavD,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IAc3E,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IAgBzD,IAAI,CAAC,GAAG,EAAE,wBAAwB;IAMlC,OAAO,CAAC,SAAS,EAAE,OAAO;IAQjC,OAAO,CAAC,KAAK;CAqBd","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface SharpMemoryTFTOptions {\n  vcc?: number;\n  gnd?: number;\n  vcc_a?: number;\n  gnd_a?: number;\n  sclk: number;\n  mosi: number;\n  cs: number;\n  disp?: number;\n  extcomin?: number;\n  extmode?: number;\n  width: number;\n  height: number;\n}\n\nexport default class SharpMemoryTFT implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"SharpMemoryTFT\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n\n  public commands = {\n    write: 0x80,\n    clear: 0x20,\n    vcom: 0x40,\n  };\n\n  public _canvas: any;\n  public obniz!: Obniz;\n  public io_cs!: PeripheralIO;\n  public params: any;\n  public io_disp?: PeripheralIO;\n  public io_extcomin?: PeripheralIO;\n  public io_extmode?: PeripheralIO;\n  public spi!: PeripheralSPI;\n  public width = 0;\n  public height = 0;\n  public _pos = {x: 0 , y: 0};\n  public autoFlush = false;\n  public fontSize = 0;\n  public createCanvas: any;\n\n  constructor() {\n    this.keys = [\n      \"vcc\",\n      \"gnd\",\n      \"vcc_a\",\n      \"gnd_a\",\n      \"sclk\",\n      \"mosi\",\n      \"cs\",\n      \"disp\",\n      \"extcomin\",\n      \"extmode\",\n      \"width\",\n      \"height\",\n    ];\n\n    this.requiredKeys = [\"sclk\", \"mosi\", \"cs\", \"width\", \"height\"];\n\n    this._canvas = null;\n    this._reset();\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.io_cs = obniz.getIO(this.params.cs);\n\n    if (this.params.disp && this.params.extcomin && this.params.extmode) {\n      this.io_disp = obniz.getIO(this.params.disp);\n      this.io_extcomin = obniz.getIO(this.params.extcomin);\n      this.io_extmode = obniz.getIO(this.params.extmode);\n      this.io_disp.output(true);\n      this.io_extcomin.output(false);\n      this.io_extmode.output(false);\n    }\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    obniz.setVccGnd(this.params.vcc_a, this.params.gnd_a, \"5v\");\n\n    this.params.mode = \"master\";\n    this.params.frequency = 1000 * 1000;\n    this.params.clk = this.params.sclk;\n    this.params.drive = \"5v\"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n\n    this.width = this.params.width;\n    this.height = this.params.height;\n\n    this.obniz.wait(100);\n  }\n\n  public _reverseBits(data: number) {\n    let revData = 0;\n    for (let i = 0; i < 8; i++) {\n      revData += data & 0x01;\n      data >>= 1;\n      if (i < 7) {\n        revData <<= 1;\n      }\n    }\n    return revData;\n  }\n\n  public sendLSB(data: number) {\n    this.spi.write([this._reverseBits(data)]);\n  }\n\n  public sendClear() {\n    this.io_cs.output(true);\n    this.spi.write([this.commands.clear | 0x00, 0x00]);\n    this.io_cs.output(false);\n  }\n\n  public raw(rawData: number[]) {\n    let oldline: number;\n    let currentline: number;\n    const totalbytes = (this.width * this.height) / 8;\n    let array = new Array(1024);\n    let index = 0;\n    array[index++] = this.commands.write | this.commands.vcom;\n    oldline = currentline = 1;\n    array[index++] = this._reverseBits(currentline);\n    this.io_cs.output(true);\n    for (let i = 0; i < totalbytes; i++) {\n      array[index++] = rawData[i]; // lsb\n      currentline = Math.floor((i + 1) / (this.width / 8) + 1);\n      if (currentline !== oldline) {\n        array[index++] = 0x00;\n        if (currentline <= this.height) {\n          array[index++] = this._reverseBits(currentline);\n        }\n        oldline = currentline;\n      }\n      if (index >= 1021) {\n        // regarding SPI max.\n        this.spi.write(array.slice(0, index));\n        array = new Array(1024);\n        index = 0;\n      }\n    }\n    if (index > 0) {\n      this.spi.write(array.slice(0, index));\n    }\n    this.spi.write([0x00]);\n    this.io_cs.output(false);\n  }\n\n  // copy from display.js\n\n  public _reset() {\n    this._pos = {x: 0, y: 0};\n    this.autoFlush = true;\n  }\n\n  public warnCanvasAvailability() {\n    if (this.obniz.isNode) {\n      throw new Error(\n        \"MemoryDisplay require node-canvas to draw rich contents. see more detail on docs\",\n      );\n    } else {\n      throw new Error(\"MemoryDisplay cant create canvas element to body\");\n    }\n  }\n\n  public _preparedCanvas(): any {\n    if (this._canvas) {\n      return this._canvas;\n    }\n    if (this.obniz.isNode) {\n      try {\n        const {createCanvas} = require(\"canvas\");\n        this._canvas = createCanvas(this.width, this.height);\n      } catch (e) {\n        // this.warnCanvasAvailability();\n        return null;\n      }\n    } else {\n      const identifier = \"MemoryDispCanvas-\" + this.obniz.id;\n      let canvas: any = document.getElementById(identifier);\n      if (!canvas) {\n        canvas = document.createElement(\"canvas\");\n        canvas.setAttribute(\"id\", identifier);\n        canvas.style.visibility = \"hidden\";\n        canvas.width = this.width;\n        canvas.height = this.height;\n        canvas.style[\"-webkit-font-smoothing\"] = \"none\";\n        const body = document.getElementsByTagName(\"body\")[0];\n        body.appendChild(canvas);\n      }\n      this._canvas = canvas;\n    }\n    const ctx: CanvasRenderingContext2D = this._canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#FFF\";\n    ctx.fillRect(0, 0, this.width, this.height);\n    ctx.fillStyle = \"#000\";\n    ctx.strokeStyle = \"#000\";\n    this._pos.x = 0;\n    this._pos.y = 0;\n    this.fontSize = 16;\n    ctx.font = `${this.fontSize}px Arial`;\n    return this._canvas;\n  }\n\n  public _ctx(): CanvasRenderingContext2D {\n    const canvas = this._preparedCanvas();\n    return canvas.getContext(\"2d\");\n  }\n\n  public font(font: string, size: number) {\n    const ctx = this._ctx();\n    if (typeof size !== \"number\") {\n      size = 16;\n    }\n    if (typeof font !== \"string\") {\n      font = \"Arial\";\n    }\n    this.fontSize = size;\n    ctx.font = \"\" + size + \"px \" + font;\n  }\n\n  public clear() {\n    const ctx = this._ctx();\n    this._pos.x = 0;\n    this._pos.y = 0;\n    if (ctx) {\n      ctx.fillStyle = \"#fff\";\n      ctx.fillRect(0, 0, this.width, this.height);\n      ctx.fillStyle = \"#000\";\n      ctx.strokeStyle = \"#000\";\n      this.draw(ctx);\n    } else {\n      this.sendClear();\n    }\n  }\n\n  public pos(x: number, y: number) {\n    this._ctx(); // crete first\n    if (typeof x === \"number\") {\n      this._pos.x = x;\n    }\n    if (typeof y === \"number\") {\n      this._pos.y = y;\n    }\n    return this._pos;\n  }\n\n  public print(text: string) {\n    const ctx = this._ctx();\n    if (ctx) {\n      ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);\n      this.draw(ctx);\n      this._pos.y += this.fontSize;\n    } else {\n      /*\n      let obj = {};\n      obj['display'] = {\n        text: '' + text,\n      };\n      this.obniz.send(obj);\n      */\n    }\n  }\n\n  public line(x_0: number, y_0: number, x_1: number, y_1: number) {\n    const ctx = this._ctx();\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x_0, y_0);\n      ctx.lineTo(x_1, y_1);\n      ctx.stroke();\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public rect(x: number, y: number, width: number, height: number, mustFill: boolean) {\n    const ctx = this._ctx();\n    if (ctx) {\n      if (mustFill) {\n        ctx.fillRect(x, y, width, height);\n      } else {\n        ctx.strokeRect(x, y, width, height);\n      }\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public circle(x: number, y: number, r: number, mustFill: boolean) {\n    const ctx = this._ctx();\n    if (ctx) {\n      ctx.beginPath();\n      ctx.arc(x, y, r, 0, Math.PI * 2);\n      if (mustFill) {\n        ctx.fill();\n      } else {\n        ctx.stroke();\n      }\n      this.draw(ctx);\n    } else {\n      this.warnCanvasAvailability();\n    }\n  }\n\n  public draw(ctx: CanvasRenderingContext2D) {\n    if (this.autoFlush) {\n      this._draw(ctx);\n    }\n  }\n\n  public drawing(autoFlush: boolean) {\n    this.autoFlush = autoFlush === true;\n    const ctx = this._ctx();\n    if (ctx) {\n      this.draw(ctx);\n    }\n  }\n\n  private _draw(ctx: CanvasRenderingContext2D) {\n    const stride = this.width / 8;\n    const vram = new Array(stride * 64);\n    const imageData = ctx.getImageData(0, 0, this.width, this.height);\n    const data = imageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\n      const index = Math.floor(i / 4);\n      const line = Math.floor(index / this.width);\n      const col = Math.floor((index - line * this.width) / 8);\n      const bits = Math.floor(index - line * this.width) % 8;\n      if (bits === 0) {\n        vram[line * stride + col] = 0x00;\n      }\n      if (brightness > 0x73) {\n        vram[line * stride + col] |= 0x80 >> bits;\n      }\n    }\n    this.raw(vram);\n  }\n}\n"]}