{"version":3,"sources":["../src/parts/Display/7SegmentLED/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,UAAU,CAAC,EAAE,MAAM,CAAC;CACrB;AAED,cAAM,YAAa,YAAW,mBAAmB;WAEjC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,cAAc,EAAE;QAAC,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAC,CAAC;IACxC,KAAK,EAAG,KAAK,CAAC;IACd,GAAG,EAAE,YAAY,EAAE,CAAC;IACpB,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,OAAO,CAAC;IACzB,EAAE,CAAC,EAAE,YAAY,CAAC;IAClB,MAAM,CAAC,EAAE,YAAY,CAAC;;IA8CtB,KAAK,CAAC,KAAK,EAAE,KAAK;IA8ClB,KAAK,CAAC,IAAI,EAAE,MAAM;IAkBlB,QAAQ,CAAC,IAAI,EAAE,MAAM;IAerB,OAAO,CAAC,IAAI,EAAE,OAAO;IAMrB,EAAE;IAMF,GAAG;CAKX;AAED,eAAe,YAAY,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface _7SegmentLEDOptions {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n  g: number;\n  dp?: number;\n  common?: number;\n  commonType?: string;\n}\n\nclass _7SegmentLED implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"7SegmentLED\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public digits: number[];\n  public displayIoNames: {[key: string]: string};\n  public obniz!: Obniz;\n  public ios: PeripheralIO[];\n  public params: any;\n  public isCathodeCommon: boolean;\n  public dp?: PeripheralIO;\n  public common?: PeripheralIO;\n\n  constructor() {\n    this.keys = [\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"e\",\n      \"f\",\n      \"g\",\n      \"dp\",\n      \"common\",\n      \"commonType\",\n    ];\n    this.requiredKeys = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n\n    this.digits = [\n      0x3f,\n      0x06,\n      0x5b,\n      0x4f,\n      0x66,\n      0x6d,\n      0x7d,\n      0x07,\n      0x7f,\n      0x6f,\n      0x6f,\n    ];\n\n    this.displayIoNames = {\n      a: \"a\",\n      b: \"b\",\n      c: \"c\",\n      d: \"d\",\n      e: \"e\",\n      f: \"f\",\n      g: \"g\",\n      dp: \"dp\",\n      common: \"com\",\n    };\n    this.ios = [];\n    this.isCathodeCommon = false;\n  }\n\n  public wired(obniz: Obniz) {\n    function getIO(io: any) {\n      if (io && typeof io === \"object\") {\n        if (typeof io.output === \"function\") {\n          return io;\n        }\n      }\n      return obniz.getIO(io);\n    }\n\n    function isValidIO(io: any) {\n      if (io && typeof io === \"object\") {\n        if (typeof io.output === \"function\") {\n          return true;\n        }\n      }\n      return obniz.isValidIO(io);\n    }\n\n    this.obniz = obniz;\n    this.ios = [];\n    this.ios.push(getIO(this.params.a));\n    this.ios.push(getIO(this.params.b));\n    this.ios.push(getIO(this.params.c));\n    this.ios.push(getIO(this.params.d));\n    this.ios.push(getIO(this.params.e));\n    this.ios.push(getIO(this.params.f));\n    this.ios.push(getIO(this.params.g));\n\n    this.isCathodeCommon = this.params.commonType === \"anode\" ? false : true;\n\n    for (let i = 0; i < this.ios.length; i++) {\n      this.ios[i].output(this.isCathodeCommon ? false : true);\n    }\n\n    if (isValidIO(this.params.dp)) {\n      const dp = getIO(this.params.dp);\n      dp.output(false);\n      this.dp = dp;\n    }\n    if (isValidIO(this.params.common)) {\n      this.common = getIO(this.params.common);\n      this.on();\n    }\n  }\n\n  public print(data: number) {\n    if (typeof data === \"number\") {\n      data = Math.floor(data);\n      data = data % 10;\n\n      for (let i = 0; i < 7; i++) {\n        if (this.ios[i]) {\n          let val: any = this.digits[data] & (1 << i) ? true : false;\n          if (!this.isCathodeCommon) {\n            val = !val;\n          }\n          this.ios[i].output(val);\n        }\n      }\n      this.on();\n    }\n  }\n\n  public printRaw(data: number) {\n    if (typeof data === \"number\") {\n      for (let i = 0; i < 7; i++) {\n        if (this.ios[i]) {\n          let val: any = data & (1 << i) ? true : false;\n          if (!this.isCathodeCommon) {\n            val = !val;\n          }\n          this.ios[i].output(val);\n        }\n      }\n      this.on();\n    }\n  }\n\n  public dpState(show: boolean) {\n    if (this.dp) {\n      this.dp.output(this.isCathodeCommon ? show : !show);\n    }\n  }\n\n  public on() {\n    if (this.common) {\n      this.common.output(this.isCathodeCommon ? false : true);\n    }\n  }\n\n  public off() {\n    if (this.common) {\n      this.common.output(this.isCathodeCommon ? true : false);\n    }\n  }\n}\n\nexport default _7SegmentLED;\n"]}