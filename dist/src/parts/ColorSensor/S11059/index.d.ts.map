{"version":3,"sources":["../src/parts/ColorSensor/S11059/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,GAAG,CAAC;CACX;AAED,oBAAY,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;AAC/B,oBAAY,kBAAkB,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAE/C,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE;QAAC,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAC,CAAC;IACjC,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAG,aAAa,CAAC;;IAcpB,KAAK,CAAC,KAAK,EAAE,KAAK;IAYlB,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,kBAAkB;IAMjD,MAAM;CAUpB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface S11059Options {\n  vcc?: number;\n  sda?: number;\n  scl?: number;\n  gnd?: number;\n  i2c?: any;\n}\n\nexport type S11059Gain = 0 | 1;\nexport type S11059IntergerTime = 0 | 1 | 2 | 3;\n\nexport default class S11059 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"S11059\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public address: number;\n  public regAdrs: {[key: string]: number};\n  public obniz!: Obniz;\n  public params: any;\n  public i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"vcc\", \"sda\", \"scl\", \"i2c\", \"gnd\"];\n    this.requiredKeys = [];\n\n    this.address = 0x2a;\n    this.regAdrs = {\n      ctrl: 0x00,\n      manualTiming: 0x01,\n      sensorRed: 0x03,\n    };\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"3v\");\n    this.obniz.wait(100);\n\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n    this.i2c = obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(100);\n  }\n\n  public init(gain: S11059Gain, intergerTime: S11059IntergerTime) {\n    this.i2c.write(this.address, [this.regAdrs.ctrl, 0x80]); // Reset\n    const val: number = (gain << 3) | intergerTime;\n    this.i2c.write(this.address, [this.regAdrs.ctrl, val]); // Set gain,interger time\n  }\n\n  public async getVal() {\n    this.i2c.write(this.address, [this.regAdrs.sensorRed]);\n    const ret = await this.i2c.readWait(this.address, 8);\n    const level = [0, 0, 0, 0];\n    level[0] = (ret[0] << 8) | ret[1];\n    level[1] = (ret[2] << 8) | ret[3];\n    level[2] = (ret[4] << 8) | ret[5];\n    level[3] = (ret[6] << 8) | ret[7];\n    return level;\n  }\n}\n"]}