{"version":3,"sources":["../src/parts/DistanceSensor/HC-SR04/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG,EAAE,MAAM,CAAC;CACb;AAED,oBAAY,cAAc,GAAG,IAAI,GAAG,MAAM,CAAC;AAE3C,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAE,cAAc,CAAQ;IAC7B,aAAa,UAAS;IACtB,IAAI,SAAM;IACV,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAG,YAAY,CAAC;IACrB,OAAO,EAAG,MAAM,CAAC;IACjB,IAAI,EAAG,MAAM,CAAC;;IAOd,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBlB,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI;IAmCtC,WAAW;IAQjB,IAAI,CAAC,IAAI,EAAE,cAAc;CASjC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface HCSR04Options {\n  gnd?: number;\n  echo: number;\n  trigger: number;\n  vcc: number;\n}\n\nexport type HCSR04UnitType = \"mm\" | \"inch\";\n\nexport default class HCSR04 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HC-SR04\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public _unit: HCSR04UnitType = \"mm\";\n  public reset_alltime = false;\n  public temp = 15;\n  public obniz!: Obniz;\n  public params: any;\n  public vccIO!: PeripheralIO;\n  public trigger!: number;\n  public echo!: number;\n\n  constructor() {\n    this.keys = [\"vcc\", \"trigger\", \"echo\", \"gnd\"];\n    this.requiredKeys = [\"vcc\", \"trigger\", \"echo\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(null, this.params.gnd, \"5v\");\n\n    this.vccIO = obniz.getIO(this.params.vcc);\n    if (obniz.isValidIO(this.params.trigger) === false) {\n      throw new Error(`trigger ${this.params.trigger} is invalid io`);\n    }\n    if (obniz.isValidIO(this.params.echo) === false) {\n      throw new Error(`echo ${this.params.echo} is invalid io`);\n    }\n    this.trigger = this.params.trigger;\n    this.echo = this.params.echo;\n\n    this.vccIO.drive(\"5v\");\n    this.vccIO.output(true);\n    this.obniz.wait(100);\n  }\n\n  public measure(callback: (distance: number) => void) {\n\n    this.obniz.measure!.echo({\n      io_pulse: this.trigger,\n      io_echo: this.echo,\n      pulse: \"positive\",\n      pulse_width: 0.011,\n      measure_edges: 3,\n      timeout: (10 / 340) * 1000,\n      callback: async (edges: any) => {\n        if (this.reset_alltime) {\n          this.vccIO.output(false);\n          this.obniz.wait(100);\n          this.vccIO.output(true);\n          this.obniz.wait(100);\n        }\n        let distance: any;\n        for (let i = 0; i < edges.length - 1; i++) {\n          // HCSR04's output of io_echo is initially high when trigger is finshed\n          if (edges[i].edge === true) {\n            const time: any = (edges[i + 1].timing - edges[i].timing) / 1000; // (1/4000 * 8) + is needed??\n            distance =\n              (time / 2) * 20.055 * Math.sqrt(this.temp + 273.15) * 1000;\n            if (this._unit === \"inch\") {\n              distance = distance * 0.0393701;\n            }\n          }\n        }\n        if (typeof callback === \"function\") {\n          callback(distance);\n        }\n      },\n    });\n  }\n\n  public async measureWait() {\n    return new Promise((resolve: any) => {\n      this.measure((distance: number) => {\n        resolve(distance);\n      });\n    });\n  }\n\n  public unit(unit: HCSR04UnitType) {\n    if (unit === \"mm\") {\n      this._unit = \"mm\";\n    } else if (unit === \"inch\") {\n      this._unit = \"inch\";\n    } else {\n      throw new Error(\"HCSR04: unknown unit \" + unit);\n    }\n  }\n}\n"]}