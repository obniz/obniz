{"version":3,"sources":["../src/parts/DistanceSensor/HC-SR04/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG,EAAE,MAAM,CAAC;CACb;AAED,oBAAY,cAAc,GAAG,IAAI,GAAG,MAAM,CAAC;AAE3C,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAE,cAAc,CAAQ;IAC7B,aAAa,UAAS;IACtB,IAAI,SAAM;IACV,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAG,YAAY,CAAC;IACrB,OAAO,EAAG,MAAM,CAAC;IACjB,IAAI,EAAG,MAAM,CAAC;;IAOd,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBlB,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI;IAmCtC,WAAW;IAQjB,IAAI,CAAC,IAAI,EAAE,cAAc;CASjC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface HCSR04Options {\r\n  gnd?: number;\r\n  echo: number;\r\n  trigger: number;\r\n  vcc: number;\r\n}\r\n\r\nexport type HCSR04UnitType = \"mm\" | \"inch\";\r\n\r\nexport default class HCSR04 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"HC-SR04\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public _unit: HCSR04UnitType = \"mm\";\r\n  public reset_alltime = false;\r\n  public temp = 15;\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public vccIO!: PeripheralIO;\r\n  public trigger!: number;\r\n  public echo!: number;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"trigger\", \"echo\", \"gnd\"];\r\n    this.requiredKeys = [\"vcc\", \"trigger\", \"echo\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(null, this.params.gnd, \"5v\");\r\n\r\n    this.vccIO = obniz.getIO(this.params.vcc);\r\n    if (obniz.isValidIO(this.params.trigger) === false) {\r\n      throw new Error(`trigger ${this.params.trigger} is invalid io`);\r\n    }\r\n    if (obniz.isValidIO(this.params.echo) === false) {\r\n      throw new Error(`echo ${this.params.echo} is invalid io`);\r\n    }\r\n    this.trigger = this.params.trigger;\r\n    this.echo = this.params.echo;\r\n\r\n    this.vccIO.drive(\"5v\");\r\n    this.vccIO.output(true);\r\n    this.obniz.wait(100);\r\n  }\r\n\r\n  public measure(callback: (distance: number) => void) {\r\n\r\n    this.obniz.measure!.echo({\r\n      io_pulse: this.trigger,\r\n      io_echo: this.echo,\r\n      pulse: \"positive\",\r\n      pulse_width: 0.011,\r\n      measure_edges: 3,\r\n      timeout: (10 / 340) * 1000,\r\n      callback: async (edges: any) => {\r\n        if (this.reset_alltime) {\r\n          this.vccIO.output(false);\r\n          this.obniz.wait(100);\r\n          this.vccIO.output(true);\r\n          this.obniz.wait(100);\r\n        }\r\n        let distance: any;\r\n        for (let i = 0; i < edges.length - 1; i++) {\r\n          // HCSR04's output of io_echo is initially high when trigger is finshed\r\n          if (edges[i].edge === true) {\r\n            const time: any = (edges[i + 1].timing - edges[i].timing) / 1000; // (1/4000 * 8) + is needed??\r\n            distance =\r\n              (time / 2) * 20.055 * Math.sqrt(this.temp + 273.15) * 1000;\r\n            if (this._unit === \"inch\") {\r\n              distance = distance * 0.0393701;\r\n            }\r\n          }\r\n        }\r\n        if (typeof callback === \"function\") {\r\n          callback(distance);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public async measureWait() {\r\n    return new Promise((resolve: any) => {\r\n      this.measure((distance: number) => {\r\n        resolve(distance);\r\n      });\r\n    });\r\n  }\r\n\r\n  public unit(unit: HCSR04UnitType) {\r\n    if (unit === \"mm\") {\r\n      this._unit = \"mm\";\r\n    } else if (unit === \"inch\") {\r\n      this._unit = \"inch\";\r\n    } else {\r\n      throw new Error(\"HCSR04: unknown unit \" + unit);\r\n    }\r\n  }\r\n}\r\n"]}