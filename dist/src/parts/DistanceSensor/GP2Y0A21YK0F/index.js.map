{"version":3,"sources":["../src/parts/DistanceSensor/GP2Y0A21YK0F/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAYA,MAAqB,YAAY;IAoB/B;QAVO,mBAAc,GAAG;YACtB,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,KAAK;YACV,MAAM,EAAE,QAAQ;SACjB,CAAC;QACK,UAAK,GAAyB,IAAI,CAAC;QAMxC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IArBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,cAAc;SACrB,CAAC;IACJ,CAAC;IAmBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClD,SAAS,CAAC,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAEM,KAAK,CAAC,QAAoC;QAC/C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAW,EAAE,EAAE;YACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACpB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,cAAc,CAAC,GAAW;QAC/B,IAAI,GAAG,IAAI,CAAC,EAAE;YACZ,GAAG,GAAG,KAAK,CAAC;SACb;QACD,IAAI,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACtE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACvB,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;SAC3C;aAAM;YACL,QAAQ,IAAI,SAAS,CAAC;YACtB,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;SAC/C;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI;gBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;gBAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAC1C,OAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;QACH,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;IAEM,IAAI,CAAC,IAA0B;QACpC,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;aAAM,IAAI,IAAI,KAAK,MAAM,EAAE;YAC1B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;SACrB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;SACzC;IACH,CAAC;CACF;AA9ED,+BA8EC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface GP2Y0A21YK0FOptions {\n  vcc?: number;\n  gnd?: number;\n  signal: number;\n}\n\nexport type GP2Y0A21YK0FUnitType = \"mm\" | \"inch\";\n\nexport default class GP2Y0A21YK0F implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"GP2Y0A21YK0F\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public displayIoNames = {\n    vcc: \"vcc\",\n    gnd: \"gnd\",\n    signal: \"signal\",\n  };\n  public _unit: GP2Y0A21YK0FUnitType = \"mm\";\n  public obniz!: Obniz;\n  public params: any;\n  public ad_signal!: PeripheralAD;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\n    this.requiredKeys = [\"signal\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    const io_signal = obniz.getIO(this.params.signal);\n    io_signal.end();\n    this.ad_signal = obniz.getAD(this.params.signal);\n  }\n\n  public start(callback: (distance: number) => void) {\n    this.ad_signal.start((val: number) => {\n      const distance = this._volt2distance(val);\n      if (typeof callback === \"function\") {\n        callback(distance);\n      }\n    });\n  }\n\n  public _volt2distance(val: number): number {\n    if (val <= 0) {\n      val = 0.001;\n    }\n    let distance = 19988.34 * Math.pow((val / 5.0) * 1024, -1.25214) * 10;\n    if (this._unit === \"mm\") {\n      distance = Math.floor(distance * 10) / 10;\n    } else {\n      distance *= 0.0393701;\n      distance = Math.floor(distance * 1000) / 1000;\n    }\n    return distance;\n  }\n\n  public getWait(): Promise<number> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const val = await this.ad_signal.getWait();\n        const distance = this._volt2distance(val);\n        resolve(distance);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  public unit(unit: GP2Y0A21YK0FUnitType) {\n    if (unit === \"mm\") {\n      this._unit = \"mm\";\n    } else if (unit === \"inch\") {\n      this._unit = \"inch\";\n    } else {\n      throw new Error(\"unknown unit \" + unit);\n    }\n  }\n}\n"]}