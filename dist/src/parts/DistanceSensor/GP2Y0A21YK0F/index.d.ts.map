{"version":3,"sources":["../src/parts/DistanceSensor/GP2Y0A21YK0F/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,oBAAY,oBAAoB,GAAG,IAAI,GAAG,MAAM,CAAC;AAEjD,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAEhD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc;;;;MAInB;IACK,KAAK,EAAE,oBAAoB,CAAQ;IACnC,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,EAAG,YAAY,CAAC;;IAOzB,KAAK,CAAC,KAAK,EAAE,KAAK;IASlB,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI;IAS1C,cAAc,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM;IAcnC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;IAY1B,IAAI,CAAC,IAAI,EAAE,oBAAoB;CASvC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface GP2Y0A21YK0FOptions {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  signal: number;\r\n}\r\n\r\nexport type GP2Y0A21YK0FUnitType = \"mm\" | \"inch\";\r\n\r\nexport default class GP2Y0A21YK0F implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"GP2Y0A21YK0F\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public displayIoNames = {\r\n    vcc: \"vcc\",\r\n    gnd: \"gnd\",\r\n    signal: \"signal\",\r\n  };\r\n  public _unit: GP2Y0A21YK0FUnitType = \"mm\";\r\n  public obniz!: Obniz;\r\n  public params: any;\r\n  public ad_signal!: PeripheralAD;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\r\n    this.requiredKeys = [\"signal\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    const io_signal = obniz.getIO(this.params.signal);\r\n    io_signal.end();\r\n    this.ad_signal = obniz.getAD(this.params.signal);\r\n  }\r\n\r\n  public start(callback: (distance: number) => void) {\r\n    this.ad_signal.start((val: number) => {\r\n      const distance = this._volt2distance(val);\r\n      if (typeof callback === \"function\") {\r\n        callback(distance);\r\n      }\r\n    });\r\n  }\r\n\r\n  public _volt2distance(val: number): number {\r\n    if (val <= 0) {\r\n      val = 0.001;\r\n    }\r\n    let distance = 19988.34 * Math.pow((val / 5.0) * 1024, -1.25214) * 10;\r\n    if (this._unit === \"mm\") {\r\n      distance = Math.floor(distance * 10) / 10;\r\n    } else {\r\n      distance *= 0.0393701;\r\n      distance = Math.floor(distance * 1000) / 1000;\r\n    }\r\n    return distance;\r\n  }\r\n\r\n  public getWait(): Promise<number> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const val = await this.ad_signal.getWait();\r\n        const distance = this._volt2distance(val);\r\n        resolve(distance);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  public unit(unit: GP2Y0A21YK0FUnitType) {\r\n    if (unit === \"mm\") {\r\n      this._unit = \"mm\";\r\n    } else if (unit === \"inch\") {\r\n      this._unit = \"inch\";\r\n    } else {\r\n      throw new Error(\"unknown unit \" + unit);\r\n    }\r\n  }\r\n}\r\n"]}