{"version":3,"sources":["../src/parts/Magnet/HMC5883L/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,eAAe;IAC9B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,mBAAmB;WAE5C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO;;;;MAIZ;IACK,GAAG,EAAG,aAAa,CAAC;IAE3B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAalB,IAAI;IAKE,GAAG;CAgBjB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface HMC5883LOptions {\n  gnd?: number;\n  sda?: number;\n  scl?: number;\n  i2c?: PeripheralI2C;\n}\n\nexport default class HMC5883L implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HMC5883L\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public address = {\n    device: 0x1e,\n    reset: [0x02, 0x00], // Continuous Measurment Mode\n    xMSB: [0x03],\n  };\n  public i2c!: PeripheralI2C;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(null, this.params.gnd, \"3v\");\n\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    this.obniz.wait(500);\n  }\n\n  public init() {\n    this.i2c.write(this.address.device, this.address.reset);\n    this.obniz.wait(500);\n  }\n\n  public async get() {\n    this.i2c.write(this.address.device, this.address.xMSB);\n    const readed = await this.i2c.readWait(this.address.device, 2 * 3);\n\n    const obj: any = {};\n    const keys = [\"x\", \"y\", \"z\"];\n    for (let i = 0; i < 3; i++) {\n      let val = (readed[i * 2] << 8) | readed[i * 2 + 1];\n      if (val & 0x8000) {\n        val = val - 65536;\n      }\n      obj[keys[i]] = val;\n    }\n\n    return obj;\n  }\n}\n"]}