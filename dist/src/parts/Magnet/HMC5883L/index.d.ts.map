{"version":3,"sources":["../src/parts/Magnet/HMC5883L/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,eAAe;IAC9B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,mBAAmB;WAE5C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO;;;;MAIZ;IACK,GAAG,EAAG,aAAa,CAAC;IAE3B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAalB,IAAI;IAKE,GAAG;CAgBjB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface HMC5883LOptions {\r\n  gnd?: number;\r\n  sda?: number;\r\n  scl?: number;\r\n  i2c?: PeripheralI2C;\r\n}\r\n\r\nexport default class HMC5883L implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"HMC5883L\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public address = {\r\n    device: 0x1e,\r\n    reset: [0x02, 0x00], // Continuous Measurment Mode\r\n    xMSB: [0x03],\r\n  };\r\n  public i2c!: PeripheralI2C;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"sda\", \"scl\", \"i2c\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(null, this.params.gnd, \"3v\");\r\n\r\n    this.params.clock = 100000;\r\n    this.params.pull = \"3v\";\r\n    this.params.mode = \"master\";\r\n\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n\r\n    this.obniz.wait(500);\r\n  }\r\n\r\n  public init() {\r\n    this.i2c.write(this.address.device, this.address.reset);\r\n    this.obniz.wait(500);\r\n  }\r\n\r\n  public async get() {\r\n    this.i2c.write(this.address.device, this.address.xMSB);\r\n    const readed = await this.i2c.readWait(this.address.device, 2 * 3);\r\n\r\n    const obj: any = {};\r\n    const keys = [\"x\", \"y\", \"z\"];\r\n    for (let i = 0; i < 3; i++) {\r\n      let val = (readed[i * 2] << 8) | readed[i * 2 + 1];\r\n      if (val & 0x8000) {\r\n        val = val - 65536;\r\n      }\r\n      obj[keys[i]] = val;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n}\r\n"]}