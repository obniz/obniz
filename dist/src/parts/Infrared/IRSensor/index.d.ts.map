{"version":3,"sources":["../src/parts/Infrared/IRSensor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,mBAAmB;WAE5C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,gBAAgB,SAAQ;IACxB,QAAQ,SAAO;IACf,YAAY,UAAQ;IACpB,kBAAkB,SAAM;IACxB,OAAO,UAAS;IAChB,aAAa,UAAQ;IACrB,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAE3D,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAQlB,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,IAAI;CAqCjD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface IRSensorOptions {\n  output: number;\n  vcc?: number;\n  gnd?: number;\n}\n\nexport default class IRSensor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"IRSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public dataSymbolLength = 0.07;\n  public duration = 500; // 500msec;\n  public dataInverted = true;\n  public triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal\n  public cutTail = false;\n  public output_pullup = true;\n  public ondetect: ((array: number[]) => void) | null = null;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"output\", \"vcc\", \"gnd\"];\n    this.requiredKeys = [\"output\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    if (!obniz.isValidIO(this.params.output)) {\n      throw new Error(\"output is not valid io\");\n    }\n  }\n\n  public start(callback: (array: number[]) => void) {\n    this.ondetect = callback;\n    if (this.output_pullup) {\n      this.obniz.getIO(this.params.output).pull(\"5v\");\n    }\n\n    this.obniz.logicAnalyzer!.start({\n      io: this.params.output,\n      interval: this.dataSymbolLength,\n      duration: this.duration,\n      triggerValue: this.dataInverted ? false : true,\n      triggerValueSamples: this.triggerSampleCount,\n    });\n    this.obniz.logicAnalyzer!.onmeasured = (levels: number[]) => {\n      if (typeof this.ondetect === \"function\") {\n        if (this.dataInverted) {\n          const arr = new Uint8Array(levels);\n          for (let i = 0; i < arr.length; i++) {\n            arr[i] = arr[i] ? 0 : 1;\n          }\n          levels = Array.from(arr);\n        }\n\n        if (this.cutTail) {\n          for (let i = levels.length - 1; i > 1; i--) {\n            if (levels[i] === 0 && levels[i - 1] === 0) {\n              levels.splice(i, 1);\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.ondetect(levels);\n      }\n    };\n  }\n}\n"]}