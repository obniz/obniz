{"version":3,"sources":["../src/parts/Infrared/IRSensor/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface IRSensorOptions {\r\n  output: number;\r\n  vcc?: number;\r\n  gnd?: number;\r\n}\r\n\r\nexport default class IRSensor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"IRSensor\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public dataSymbolLength = 0.07;\r\n  public duration = 500; // 500msec;\r\n  public dataInverted = true;\r\n  public triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal\r\n  public cutTail = false;\r\n  public output_pullup = true;\r\n  public ondetect: ((array: number[]) => void) | null = null;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"output\", \"vcc\", \"gnd\"];\r\n    this.requiredKeys = [\"output\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    if (!obniz.isValidIO(this.params.output)) {\r\n      throw new Error(\"output is not valid io\");\r\n    }\r\n  }\r\n\r\n  public start(callback: (array: number[]) => void) {\r\n    this.ondetect = callback;\r\n    if (this.output_pullup) {\r\n      this.obniz.getIO(this.params.output).pull(\"5v\");\r\n    }\r\n\r\n    this.obniz.logicAnalyzer!.start({\r\n      io: this.params.output,\r\n      interval: this.dataSymbolLength,\r\n      duration: this.duration,\r\n      triggerValue: this.dataInverted ? false : true,\r\n      triggerValueSamples: this.triggerSampleCount,\r\n    });\r\n    this.obniz.logicAnalyzer!.onmeasured = (levels: number[]) => {\r\n      if (typeof this.ondetect === \"function\") {\r\n        if (this.dataInverted) {\r\n          const arr = new Uint8Array(levels);\r\n          for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i] ? 0 : 1;\r\n          }\r\n          levels = Array.from(arr);\r\n        }\r\n\r\n        if (this.cutTail) {\r\n          for (let i = levels.length - 1; i > 1; i--) {\r\n            if (levels[i] === 0 && levels[i - 1] === 0) {\r\n              levels.splice(i, 1);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        this.ondetect(levels);\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}