{"version":3,"sources":["../src/parts/Infrared/InfraredLED/index.ts"],"names":[],"mappings":";;AAUA,MAAqB,WAAW;IAmB9B;QARO,qBAAgB,GAAG,IAAI,CAAC;QAS7B,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IApBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,aAAa;SACpB,CAAC;IACJ,CAAC;IAkBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC9C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,gDAAgD;IACxE,CAAC;IAEM,IAAI,CAAC,IAAc;QACxB,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YAC1D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACd;QACD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAhDD,8BAgDC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface InfraredLEDOptions {\n  anode: number;\n  cathode?: number;\n}\n\nexport default class InfraredLED implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"InfraredLED\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n\n  public dataSymbolLength = 0.07;\n  public params: any;\n\n  protected obniz!: Obniz;\n\n  private io_cathode?: PeripheralIO;\n  private pwm!: PeripheralPWM;\n\n  constructor() {\n    this.keys = [\"anode\", \"cathode\"];\n    this.requiredKeys = [\"anode\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    if (!this.obniz.isValidIO(this.params.anode)) {\n      throw new Error(\"anode is not valid io\");\n    }\n    if (this.params.cathode) {\n      if (!this.obniz.isValidIO(this.params.cathode)) {\n        throw new Error(\"cathode is not valid io\");\n      }\n      this.io_cathode = obniz.getIO(this.params.cathode);\n      this.io_cathode.output(false);\n    }\n    this.pwm = this.obniz.getFreePwm();\n    this.pwm.start({io: this.params.anode});\n    this.pwm.freq(38000);\n    this.obniz.wait(150); // TODO: this is instant fix for pwm start delay\n  }\n\n  public send(data: number[]) {\n    if (data && data.length > 0 && data[data.length - 1] === 1) {\n      data.push(0);\n    }\n    this.pwm.modulate(\"am\", this.dataSymbolLength, data);\n  }\n}\n"]}