{"version":3,"sources":["../src/parts/Infrared/InfraredLED/index.ts"],"names":[],"mappings":";;AAUA,MAAqB,WAAW;IAmB9B;QARO,qBAAgB,GAAG,IAAI,CAAC;QAS7B,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IApBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,aAAa;SACpB,CAAC;IACJ,CAAC;IAkBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC9C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,gDAAgD;IACxE,CAAC;IAEM,IAAI,CAAC,IAAc;QACxB,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YAC1D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACd;QACD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAhDD,8BAgDC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface InfraredLEDOptions {\r\n  anode: number;\r\n  cathode?: number;\r\n}\r\n\r\nexport default class InfraredLED implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"InfraredLED\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n\r\n  public dataSymbolLength = 0.07;\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private io_cathode?: PeripheralIO;\r\n  private pwm!: PeripheralPWM;\r\n\r\n  constructor() {\r\n    this.keys = [\"anode\", \"cathode\"];\r\n    this.requiredKeys = [\"anode\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    if (!this.obniz.isValidIO(this.params.anode)) {\r\n      throw new Error(\"anode is not valid io\");\r\n    }\r\n    if (this.params.cathode) {\r\n      if (!this.obniz.isValidIO(this.params.cathode)) {\r\n        throw new Error(\"cathode is not valid io\");\r\n      }\r\n      this.io_cathode = obniz.getIO(this.params.cathode);\r\n      this.io_cathode.output(false);\r\n    }\r\n    this.pwm = this.obniz.getFreePwm();\r\n    this.pwm.start({io: this.params.anode});\r\n    this.pwm.freq(38000);\r\n    this.obniz.wait(150); // TODO: this is instant fix for pwm start delay\r\n  }\r\n\r\n  public send(data: number[]) {\r\n    if (data && data.length > 0 && data[data.length - 1] === 1) {\r\n      data.push(0);\r\n    }\r\n    this.pwm.modulate(\"am\", this.dataSymbolLength, data);\r\n  }\r\n}\r\n"]}