{"version":3,"sources":["../src/parts/Infrared/InfraredLED/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,kBAAkB;IACjC,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAE/C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAEvB,gBAAgB,SAAQ;IACxB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,UAAU,CAAC,CAAe;IAClC,OAAO,CAAC,GAAG,CAAiB;;IAOrB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkBlB,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE;CAM3B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface InfraredLEDOptions {\r\n  anode: number;\r\n  cathode?: number;\r\n}\r\n\r\nexport default class InfraredLED implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"InfraredLED\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n\r\n  public dataSymbolLength = 0.07;\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private io_cathode?: PeripheralIO;\r\n  private pwm!: PeripheralPWM;\r\n\r\n  constructor() {\r\n    this.keys = [\"anode\", \"cathode\"];\r\n    this.requiredKeys = [\"anode\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    if (!this.obniz.isValidIO(this.params.anode)) {\r\n      throw new Error(\"anode is not valid io\");\r\n    }\r\n    if (this.params.cathode) {\r\n      if (!this.obniz.isValidIO(this.params.cathode)) {\r\n        throw new Error(\"cathode is not valid io\");\r\n      }\r\n      this.io_cathode = obniz.getIO(this.params.cathode);\r\n      this.io_cathode.output(false);\r\n    }\r\n    this.pwm = this.obniz.getFreePwm();\r\n    this.pwm.start({io: this.params.anode});\r\n    this.pwm.freq(38000);\r\n    this.obniz.wait(150); // TODO: this is instant fix for pwm start delay\r\n  }\r\n\r\n  public send(data: number[]) {\r\n    if (data && data.length > 0 && data[data.length - 1] === 1) {\r\n      data.push(0);\r\n    }\r\n    this.pwm.modulate(\"am\", this.dataSymbolLength, data);\r\n  }\r\n}\r\n"]}