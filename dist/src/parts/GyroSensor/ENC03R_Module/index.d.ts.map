{"version":3,"sources":["../src/parts/GyroSensor/ENC03R_Module/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,oBAAoB;IACnC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,mBAAmB;WAEjD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,GAAG,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IAEZ,IAAI,SAAW;IACf,KAAK,EAAE,MAAM,CAAK;IAClB,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAC;IAClC,KAAK,EAAE,MAAM,CAAK;IAClB,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAC;IAEzC,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,GAAG,CAAgB;IAC3B,OAAO,CAAC,GAAG,CAAgB;;IAOpB,KAAK,CAAC,KAAK,EAAE,KAAK;IAqBlB,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;IAQ3B,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;CAOnC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface ENC03R_ModuleOptions {\n  gnd?: number;\n  vcc?: number;\n  out2: number;\n  out1: number;\n}\n\nexport default class ENC03R_Module implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ENC03R_Module\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: any;\n  public params: any;\n\n  public Sens = 0.00067; // Sensitivity, 0.67mV / deg/sec\n  public sens1: number = 0;\n  public onchange1?: (val: number) => void;\n  public sens2: number = 0;\n  public onchange2?: (val: number) => void;\n\n  protected obniz!: Obniz;\n\n  private ad0!: PeripheralAD;\n  private ad1!: PeripheralAD;\n\n  constructor() {\n    this.keys = [\"vcc\", \"out1\", \"out2\", \"gnd\"];\n    this.requiredKeys = [\"out1\", \"out2\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.ad0 = obniz.getAD(this.params.out1);\n    this.ad1 = obniz.getAD(this.params.out2);\n\n    this.ad0.start((value: number) => {\n      this.sens1 = (value - 1.45) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV\n      if (this.onchange1) {\n        this.onchange1(this.sens1);\n      }\n    });\n\n    this.ad1.start((value: number) => {\n      this.sens2 = (value - 1.35) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV\n      if (this.onchange2) {\n        this.onchange2(this.sens2);\n      }\n    });\n  }\n\n  public get1Wait(): Promise<number> {\n    return new Promise(async (resolve) => {\n      const value: number = await this.ad0.getWait();\n      this.sens1 = (value - 1.45) / this.Sens;\n      resolve(this.sens1);\n    });\n  }\n\n  public get2Wait(): Promise<number> {\n    return new Promise(async (resolve) => {\n      const value: number = await this.ad1.getWait();\n      this.sens2 = (value - 1.35) / this.Sens;\n      resolve(this.sens2);\n    });\n  }\n}\n"]}