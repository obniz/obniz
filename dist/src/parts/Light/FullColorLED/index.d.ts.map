{"version":3,"sources":["../src/parts/Light/FullColorLED/index.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;IAClC,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,MAAM,EAAE,MAAM,CAAC;IACf,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAEhD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAEvB,MAAM,EAAE,GAAG,CAAC;IAEZ,iBAAiB,SAAK;IACtB,mBAAmB,SAAK;IACxB,UAAU,EAAE,GAAG,CAAC;IAChB,YAAY,EAAE,GAAG,CAAC;IAClB,aAAa,EAAE,GAAG,CAAC;IACnB,UAAU,EAAE,GAAG,CAAC;IAChB,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAG,aAAa,CAAC;IACrB,IAAI,EAAG,aAAa,CAAC;IACrB,IAAI,EAAG,aAAa,CAAC;IAE5B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAYjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAoClB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAenC,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;IAqClD,SAAS,CAAC,YAAY,EAAE,MAAM;IAiB9B,aAAa;CAGrB","file":"index.d.ts","sourcesContent":["import {createSocket} from \"dgram\";\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface FullColorLEDOptions {\n  r: number;\n  g: number;\n  b: number;\n  common: number;\n  commonType: string;\n}\n\nexport default class FullColorLED implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"FullColorLED\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n\n  public params: any;\n\n  public COMMON_TYPE_ANODE = 1;\n  public COMMON_TYPE_CATHODE = 0;\n  public anode_keys: any;\n  public cathode_keys: any;\n  public animationName: any;\n  public commontype: any;\n  public common: any;\n  public pwmR!: PeripheralPWM;\n  public pwmG!: PeripheralPWM;\n  public pwmB!: PeripheralPWM;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n\n    this.anode_keys = [\"anode\", \"anode_common\", \"anodeCommon\", \"vcc\"];\n    this.cathode_keys = [\"cathode\", \"cathode_common\", \"cathodeCommon\", \"gnd\"];\n    this.animationName = \"FullColorLED-\" + Math.round(Math.random() * 1000);\n\n    this.keys = [\"r\", \"g\", \"b\", \"common\", \"commonType\"];\n    this.requiredKeys = [\"r\", \"g\", \"b\", \"common\", \"commonType\"];\n  }\n\n  public wired(obniz: Obniz) {\n    const r: number = this.params.r;\n    const g: number = this.params.g;\n    const b: number = this.params.b;\n    const common: number = this.params.common;\n    const commontype: any = this.params.commonType;\n\n    this.obniz = obniz;\n    if (this.anode_keys.includes(commontype)) {\n      this.commontype = this.COMMON_TYPE_ANODE;\n    } else if (this.cathode_keys.includes(commontype)) {\n      this.commontype = this.COMMON_TYPE_CATHODE;\n    } else {\n      this.obniz.error(\n        \"FullColorLED param need common type [  anode_common or cathode_common ] \",\n      );\n    }\n\n    this.common = this.obniz.getIO(common);\n    this.common.output(this.commontype);\n\n    this.obniz.getIO(r).output(this.commontype);\n    this.obniz.getIO(g).output(this.commontype);\n    this.obniz.getIO(b).output(this.commontype);\n    this.pwmR = this.obniz.getFreePwm();\n    this.pwmR.start({io: r});\n    this.pwmR.freq(1000);\n    this.pwmG = this.obniz.getFreePwm();\n    this.pwmG.start({io: g});\n    this.pwmG.freq(1000);\n    this.pwmB = this.obniz.getFreePwm();\n    this.pwmB.start({io: b});\n    this.pwmB.freq(1000);\n    this.rgb(0, 0, 0);\n  }\n\n  public rgb(red: any, green: any, blue: any) {\n    red = Math.min(Math.max(parseInt(red), 0), 255);\n    green = Math.min(Math.max(parseInt(green), 0), 255);\n    blue = Math.min(Math.max(parseInt(blue), 0), 255);\n\n    if (this.commontype === this.COMMON_TYPE_ANODE) {\n      red = 255 - red;\n      green = 255 - green;\n      blue = 255 - blue;\n    }\n    this.pwmR.duty((red / 255) * 100);\n    this.pwmG.duty((green / 255) * 100);\n    this.pwmB.duty((blue / 255) * 100);\n  }\n\n  public hsv(hue: number, saturation: number, value: number) {\n    const C = value * saturation;\n    const Hp = hue / 60;\n    const X = C * (1 - Math.abs((Hp % 2) - 1));\n\n    let R = 0;\n    let G = 0;\n    let B = 0;\n    if (0 <= Hp && Hp < 1) {\n      [R, G, B] = [C, X, 0];\n    }\n    if (1 <= Hp && Hp < 2) {\n      [R, G, B] = [X, C, 0];\n    }\n    if (2 <= Hp && Hp < 3) {\n      [R, G, B] = [0, C, X];\n    }\n    if (3 <= Hp && Hp < 4) {\n      [R, G, B] = [0, X, C];\n    }\n    if (4 <= Hp && Hp < 5) {\n      [R, G, B] = [X, 0, C];\n    }\n    if (5 <= Hp && Hp < 6) {\n      [R, G, B] = [C, 0, X];\n    }\n\n    const m: any = value - C;\n    [R, G, B] = [R + m, G + m, B + m];\n\n    R = Math.floor(R * 255);\n    G = Math.floor(G * 255);\n    B = Math.floor(B * 255);\n\n    this.rgb(R, G, B);\n  }\n\n  public gradation(cycletime_ms: number) {\n    const frames: any = [];\n    const max = 36 / 2;\n    const duration = Math.round(cycletime_ms / max);\n    for (let i = 0; i < max; i++) {\n      const oneFrame = {\n        duration,\n        state: (index: number) => {\n          // index = 0\n          this.hsv(index * 10 * 2, 1, 1);\n        },\n      };\n      frames.push(oneFrame);\n    }\n    this.obniz.io!.animation(this.animationName, \"loop\", frames);\n  }\n\n  public stopgradation() {\n    this.obniz.io!.animation(this.animationName, \"pause\");\n  }\n}\n"]}