{"version":3,"sources":["../src/parts/Light/LED/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,UAAU;IACzB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,CAAC,OAAO,OAAO,GAAI,YAAW,mBAAmB;WAEvC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,QAAQ,CAAC,CAAe;IAChC,OAAO,CAAC,UAAU,CAAC,CAAe;IAClC,OAAO,CAAC,aAAa,CAAU;;IAOxB,KAAK,CAAC,KAAK,EAAE,KAAK;IAsBlB,EAAE;IAKF,GAAG;IAKH,MAAM,CAAC,KAAK,EAAE,GAAG;IAQjB,QAAQ;IAIR,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM;IAwB9B,OAAO,CAAC,GAAG;IAWX,OAAO,CAAC,IAAI;CAUb","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface LEDOptions {\n  anode?: number;\n  cathode?: number;\n}\n\nexport default class LED implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"LED\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  protected obniz!: Obniz;\n\n  private io_anode?: PeripheralIO;\n  private io_cathode?: PeripheralIO;\n  private animationName!: string;\n\n  constructor() {\n    this.keys = [\"anode\", \"cathode\"];\n    this.requiredKeys = [\"anode\"];\n  }\n\n  public wired(obniz: Obniz) {\n    function getIO(io: any) {\n      if (io && typeof io === \"object\") {\n        if (typeof io.output === \"function\") {\n          return io;\n        }\n      }\n      return obniz.getIO(io);\n    }\n\n    this.obniz = obniz;\n\n    if (this.obniz.isValidIO(this.params.anode)) {\n      this.io_anode = getIO(this.params.anode);\n    }\n    if (this.obniz.isValidIO(this.params.cathode)) {\n      this.io_cathode = getIO(this.params.cathode);\n    }\n    this.animationName = \"Led-\" + this.params.anode;\n    this.off();\n  }\n\n  public on() {\n    this.endBlink();\n    this._on();\n  }\n\n  public off() {\n    this.endBlink();\n    this._off();\n  }\n\n  public output(value: any) {\n    if (value) {\n      this.on();\n    } else {\n      this.off();\n    }\n  }\n\n  public endBlink() {\n    this.obniz.io.animation(this.animationName, \"pause\");\n  }\n\n  public blink(interval?: number) {\n    if (!interval) {\n      interval = 100;\n    }\n    const frames = [\n      {\n        duration: interval,\n        state: (index: number) => {\n          // index = 0\n          this._on(); // on\n        },\n      },\n      {\n        duration: interval,\n        state: (index: any) => {\n          // index = 0\n          this._off();\n        },\n      },\n    ];\n\n    this.obniz.io.animation(this.animationName, \"loop\", frames);\n  }\n\n  private _on() {\n    if (this.io_anode && this.io_cathode) {\n      this.io_anode.output(true);\n      this.io_cathode.output(false);\n    } else if (this.io_anode) {\n      this.io_anode.output(true);\n    } else if (this.io_cathode) {\n      this.io_cathode.output(false);\n    }\n  }\n\n  private _off() {\n    if (this.io_anode && this.io_cathode) {\n      this.io_anode.output(false);\n      this.io_cathode.output(false);\n    } else if (this.io_anode) {\n      this.io_anode.output(false);\n    } else if (this.io_cathode) {\n      this.io_cathode.output(true);\n    }\n  }\n}\n"]}