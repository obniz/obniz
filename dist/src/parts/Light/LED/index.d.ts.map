{"version":3,"sources":["../src/parts/Light/LED/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,UAAU;IACzB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,CAAC,OAAO,OAAO,GAAI,YAAW,mBAAmB;WAEvC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,QAAQ,CAAC,CAAe;IAChC,OAAO,CAAC,UAAU,CAAC,CAAe;IAClC,OAAO,CAAC,aAAa,CAAU;;IAOxB,KAAK,CAAC,KAAK,EAAE,KAAK;IAsBlB,EAAE;IAKF,GAAG;IAKH,MAAM,CAAC,KAAK,EAAE,GAAG;IAQjB,QAAQ;IAIR,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM;IAwB9B,OAAO,CAAC,GAAG;IAWX,OAAO,CAAC,IAAI;CAUb","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface LEDOptions {\r\n  anode?: number;\r\n  cathode?: number;\r\n}\r\n\r\nexport default class LED implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"LED\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private io_anode?: PeripheralIO;\r\n  private io_cathode?: PeripheralIO;\r\n  private animationName!: string;\r\n\r\n  constructor() {\r\n    this.keys = [\"anode\", \"cathode\"];\r\n    this.requiredKeys = [\"anode\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    function getIO(io: any) {\r\n      if (io && typeof io === \"object\") {\r\n        if (typeof io.output === \"function\") {\r\n          return io;\r\n        }\r\n      }\r\n      return obniz.getIO(io);\r\n    }\r\n\r\n    this.obniz = obniz;\r\n\r\n    if (this.obniz.isValidIO(this.params.anode)) {\r\n      this.io_anode = getIO(this.params.anode);\r\n    }\r\n    if (this.obniz.isValidIO(this.params.cathode)) {\r\n      this.io_cathode = getIO(this.params.cathode);\r\n    }\r\n    this.animationName = \"Led-\" + this.params.anode;\r\n    this.off();\r\n  }\r\n\r\n  public on() {\r\n    this.endBlink();\r\n    this._on();\r\n  }\r\n\r\n  public off() {\r\n    this.endBlink();\r\n    this._off();\r\n  }\r\n\r\n  public output(value: any) {\r\n    if (value) {\r\n      this.on();\r\n    } else {\r\n      this.off();\r\n    }\r\n  }\r\n\r\n  public endBlink() {\r\n    this.obniz.io.animation(this.animationName, \"pause\");\r\n  }\r\n\r\n  public blink(interval?: number) {\r\n    if (!interval) {\r\n      interval = 100;\r\n    }\r\n    const frames = [\r\n      {\r\n        duration: interval,\r\n        state: (index: number) => {\r\n          // index = 0\r\n          this._on(); // on\r\n        },\r\n      },\r\n      {\r\n        duration: interval,\r\n        state: (index: any) => {\r\n          // index = 0\r\n          this._off();\r\n        },\r\n      },\r\n    ];\r\n\r\n    this.obniz.io.animation(this.animationName, \"loop\", frames);\r\n  }\r\n\r\n  private _on() {\r\n    if (this.io_anode && this.io_cathode) {\r\n      this.io_anode.output(true);\r\n      this.io_cathode.output(false);\r\n    } else if (this.io_anode) {\r\n      this.io_anode.output(true);\r\n    } else if (this.io_cathode) {\r\n      this.io_cathode.output(false);\r\n    }\r\n  }\r\n\r\n  private _off() {\r\n    if (this.io_anode && this.io_cathode) {\r\n      this.io_anode.output(false);\r\n      this.io_cathode.output(false);\r\n    } else if (this.io_anode) {\r\n      this.io_anode.output(false);\r\n    } else if (this.io_cathode) {\r\n      this.io_cathode.output(true);\r\n    }\r\n  }\r\n}\r\n"]}