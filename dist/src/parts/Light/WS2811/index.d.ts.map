{"version":3,"sources":["../src/parts/Light/WS2811/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;CACb;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAMpC,OAAO,CAAC,MAAM,CAAC,iBAAiB;IA2BhC,OAAO,CAAC,MAAM,CAAC,cAAc;IAO7B,OAAO,CAAC,MAAM,CAAC,iBAAiB;IAwCzB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,GAAG,EAAG,aAAa,CAAC;IAE3B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,KAAK,CAAC,KAAK,EAAE,KAAK;IAYlB,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAI5C,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;IAIlD,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAW3C,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CAWnD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralSPI from \"../../../obniz/libs/io_peripherals/spi\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface WS2811Options {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  din: number;\r\n}\r\n\r\nexport default class WS2811 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"WS2811\",\r\n    };\r\n  }\r\n\r\n  private static _generateFromByte(val: any) {\r\n    // T0H 0.5us+-0.15us\r\n    // T1H 1.2us+-0.15us\r\n    // T0L 2.0us+-0.15us\r\n    // T1L 1.3us+-0.15us\r\n\r\n    val = parseInt(val);\r\n    const zero: any = 0x8;\r\n    const one: any = 0xe;\r\n    const ret: any = [];\r\n    for (let i = 0; i < 8; i += 2) {\r\n      let byte: any = 0;\r\n      if (val & (0x80 >> i)) {\r\n        byte = one << 4;\r\n      } else {\r\n        byte = zero << 4;\r\n      }\r\n      if (val & (0x80 >> (i + 1))) {\r\n        byte |= one;\r\n      } else {\r\n        byte |= zero;\r\n      }\r\n      ret.push(byte);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  private static _generateColor(r: number, g: number, b: number) {\r\n    let array = WS2811._generateFromByte(r);\r\n    array = array.concat(WS2811._generateFromByte(g));\r\n    array = array.concat(WS2811._generateFromByte(b));\r\n    return array;\r\n  }\r\n\r\n  private static _generateHsvColor(h: number, s: number, v: number) {\r\n    const C = v * s;\r\n    const Hp = h / 60;\r\n    const X = C * (1 - Math.abs((Hp % 2) - 1));\r\n\r\n    let R: any;\r\n    let G: any;\r\n    let B: any;\r\n    if (0 <= Hp && Hp < 1) {\r\n      [R, G, B] = [C, X, 0];\r\n    }\r\n    if (1 <= Hp && Hp < 2) {\r\n      [R, G, B] = [X, C, 0];\r\n    }\r\n    if (2 <= Hp && Hp < 3) {\r\n      [R, G, B] = [0, C, X];\r\n    }\r\n    if (3 <= Hp && Hp < 4) {\r\n      [R, G, B] = [0, X, C];\r\n    }\r\n    if (4 <= Hp && Hp < 5) {\r\n      [R, G, B] = [X, 0, C];\r\n    }\r\n    if (5 <= Hp && Hp < 6) {\r\n      [R, G, B] = [C, 0, X];\r\n    }\r\n\r\n    const m: any = v - C;\r\n    [R, G, B] = [R + m, G + m, B + m];\r\n\r\n    R = Math.floor(R * 255);\r\n    G = Math.floor(G * 255);\r\n    B = Math.floor(B * 255);\r\n\r\n    let array: any = WS2811._generateFromByte(R);\r\n    array = array.concat(WS2811._generateFromByte(G));\r\n    array = array.concat(WS2811._generateFromByte(B));\r\n    return array;\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public spi!: PeripheralSPI;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  constructor() {\r\n    this.keys = [\"din\", \"vcc\", \"gnd\"];\r\n    this.requiredKeys = [\"din\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.params.mode = \"master\";\r\n    this.params.frequency = 2 * 1000 * 1000;\r\n    this.params.mosi = this.params.din;\r\n    this.params.drive = \"5v\"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n  }\r\n\r\n  public rgb(red: number, green: number, blue: number) {\r\n    this.spi.write(WS2811._generateColor(red, green, blue));\r\n  }\r\n\r\n  public hsv(hue: number, saturation: number, value: number) {\r\n    this.spi.write(WS2811._generateHsvColor(hue, saturation, value));\r\n  }\r\n\r\n  public rgbs(array: Array<[number, number, number]>) {\r\n    let bytes: number[] = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      const oneArray: number[] = array[i];\r\n      bytes = bytes.concat(\r\n        WS2811._generateColor(oneArray[0], oneArray[1], oneArray[2]),\r\n      );\r\n    }\r\n    this.spi.write(bytes);\r\n  }\r\n\r\n  public hsvs(array: Array<[number, number, number]>) {\r\n    let bytes: number[] = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      const oneArray = array[i];\r\n      bytes = bytes.concat(\r\n        WS2811._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]),\r\n      );\r\n    }\r\n    this.spi.write(bytes);\r\n  }\r\n\r\n}\r\n"]}