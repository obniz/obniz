{"version":3,"sources":["../src/parts/DAConverter/M5StickC_MCP4725/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AACvF,OAAO,EAAC,uBAAuB,EAAC,MAAM,gBAAgB,CAAC;AAEvD,MAAM,WAAW,uBAAwB,SAAQ,uBAAuB;CACvE;AAED,MAAM,CAAC,OAAO,OAAO,iBAAkB,YAAW,mBAAmB;WAEnD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG;;;MAGR;IAEF,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAQvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAUlB,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,UAAQ;CAazD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../i2cParts\";\n\nexport interface M5StickC_MCP4725Options extends I2cPartsAbstructOptions {\n}\n\nexport default class M5StickC_AMDP4725 implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5StickC_MCP4725\",\n        };\n    }\n\n    public keys: string[];\n    public requiredKeys: string[];\n    public params: any;\n\n    public address: number;\n    public cmd = {\n        WRITEDAC:       0x40, // Writes data to the DAC\n        WRITEDACEEPROM: 0x60, // Writes data to the DAC and the EEPROM (persisting the assigned value after reset)\n    };\n\n    protected obniz!: Obniz;\n    protected i2c!: PeripheralI2C;\n\n    constructor() {\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n        this.requiredKeys = [\"sda\", \"scl\"];\n        this.address = 0x60;\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n        this.params.clock = 400000;\n        this.params.pull = \"5v\";\n        this.params.mode = \"master\";\n        this.i2c = this.obniz.getI2CWithConfig(this.params);\n        this.obniz.wait(100);\n    }\n\n    public setVoltage(voltage: number, writeEEPROM = false) {\n        if (writeEEPROM) {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDACEEPROM, voltage / 16, (voltage % 16) << 4],\n            );\n        } else {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDAC, voltage / 16, (voltage % 16) << 4],\n            );\n        }\n    }\n}\n"]}