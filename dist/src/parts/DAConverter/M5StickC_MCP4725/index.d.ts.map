{"version":3,"sources":["../src/parts/DAConverter/M5StickC_MCP4725/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAGnE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,uBAAuB;IACpC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;CACf;AAED,MAAM,CAAC,OAAO,OAAO,iBAAkB,YAAW,mBAAmB;WAEnD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG;;;MAGR;IAEF,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAQvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAclB,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,UAAQ;CAazD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport { write } from \"fs\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface M5StickC_MCP4725Options {\n    vcc?: number;\n    gnd?: number;\n    sda: number;\n    scl: number;\n}\n\nexport default class M5StickC_AMDP4725 implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5StickC_MCP4725\",\n        };\n    }\n\n    public keys: string[];\n    public requiredKeys: string[];\n    public params: any;\n\n    public address: number;\n    public cmd = {\n        WRITEDAC:       0x40, // Writes data to the DAC\n        WRITEDACEEPROM: 0x60, // Writes data to the DAC and the EEPROM (persisting the assigned value after reset)\n    };\n\n    protected obniz!: Obniz;\n    protected i2c!: PeripheralI2C;\n\n    constructor() {\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n        this.requiredKeys = [\"sda\", \"scl\"];\n        this.address = 0x60;\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n        this.i2c = this.obniz.getFreeI2C();\n        this.i2c.start({\n            mode: \"master\",\n            sda: this.params.sda,\n            scl: this.params.scl,\n            clock: 400000,\n            pull: \"5v\",\n        });\n        this.obniz.wait(100);\n    }\n\n    public setVoltage(voltage: number, writeEEPROM = false) {\n        if (writeEEPROM) {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDACEEPROM, voltage / 16, (voltage % 16) << 4],\n            );\n        } else {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDAC, voltage / 16, (voltage % 16) << 4],\n            );\n        }\n    }\n}\n"]}