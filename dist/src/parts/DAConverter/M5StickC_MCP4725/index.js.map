{"version":3,"sources":["../src/parts/DAConverter/M5StickC_MCP4725/index.ts"],"names":[],"mappings":";;AASA,MAAqB,iBAAiB;IAqBlC;QARO,QAAG,GAAG;YACT,QAAQ,EAAQ,IAAI;YACpB,cAAc,EAAE,IAAI;SACvB,CAAC;QAME,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAvBM,MAAM,CAAC,IAAI;QACd,OAAO;YACH,IAAI,EAAE,kBAAkB;SAC3B,CAAC;IACN,CAAC;IAqBM,KAAK,CAAC,KAAY;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,UAAU,CAAC,OAAe,EAAE,WAAW,GAAG,KAAK;QAClD,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,GAAG,CAAC,KAAK,CACV,IAAI,CAAC,OAAO,EACZ,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,GAAG,EAAE,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAC/D,CAAC;SACL;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,KAAK,CACV,IAAI,CAAC,OAAO,EACZ,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CACzD,CAAC;SACL;IACL,CAAC;CACJ;AAlDD,oCAkDC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../i2cParts\";\n\nexport interface M5StickC_MCP4725Options extends I2cPartsAbstructOptions {\n}\n\nexport default class M5StickC_AMDP4725 implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5StickC_MCP4725\",\n        };\n    }\n\n    public keys: string[];\n    public requiredKeys: string[];\n    public params: any;\n\n    public address: number;\n    public cmd = {\n        WRITEDAC:       0x40, // Writes data to the DAC\n        WRITEDACEEPROM: 0x60, // Writes data to the DAC and the EEPROM (persisting the assigned value after reset)\n    };\n\n    protected obniz!: Obniz;\n    protected i2c!: PeripheralI2C;\n\n    constructor() {\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n        this.requiredKeys = [\"sda\", \"scl\"];\n        this.address = 0x60;\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n        this.params.clock = 400000;\n        this.params.pull = \"5v\";\n        this.params.mode = \"master\";\n        this.i2c = this.obniz.getI2CWithConfig(this.params);\n        this.obniz.wait(100);\n    }\n\n    public setVoltage(voltage: number, writeEEPROM = false) {\n        if (writeEEPROM) {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDACEEPROM, voltage / 16, (voltage % 16) << 4],\n            );\n        } else {\n            this.i2c.write(\n                this.address,\n                [this.cmd.WRITEDAC, voltage / 16, (voltage % 16) << 4],\n            );\n        }\n    }\n}\n"]}