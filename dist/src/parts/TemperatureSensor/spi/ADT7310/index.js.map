{"version":3,"sources":["../src/parts/TemperatureSensor/spi/ADT7310/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAaA,MAAqB,OAAO;IAe1B;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAhBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAcM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAEY,WAAW;;YACtB,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,uCAAuC;YACzE,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3B,MAAM,GAAG,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,OAAO,GAAQ,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;YAEvB,IAAI,OAAO,GAAG,MAAM,EAAE;gBACpB,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC;aAC1B;YAED,OAAO,OAAO,GAAG,EAAE,CAAC;QACtB,CAAC;KAAA;CACF;AA9CD,0BA8CC","file":"index.js","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralSPI from \"../../../../obniz/libs/io_peripherals/spi\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface ADT7310Options {\r\n  vcc: number;\r\n  gnd: number;\r\n  din: number;\r\n  dout: number;\r\n  sclk: number;\r\n}\r\n\r\nexport default class ADT7310 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"ADT7310\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected spi!: PeripheralSPI;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"frequency\", \"din\", \"dout\", \"clk\", \"spi\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.params.mode = this.params.mode || \"master\";\r\n    this.params.frequency = this.params.frequency || 500000;\r\n    this.params.mosi = this.params.din;\r\n    this.params.miso = this.params.dout;\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    await this.spi.writeWait([0x54]); // send before each commands for stable\r\n    await this.obniz.wait(200);\r\n    const ret: any = await this.spi.writeWait([0x00, 0x00]);\r\n    let tempBin: any = ret[0] << 8;\r\n    tempBin |= ret[1];\r\n    tempBin = tempBin >> 3;\r\n\r\n    if (tempBin & 0x1000) {\r\n      tempBin = tempBin - 8192;\r\n    }\r\n\r\n    return tempBin / 16;\r\n  }\r\n}\r\n"]}