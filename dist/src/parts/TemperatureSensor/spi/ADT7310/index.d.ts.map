{"version":3,"sources":["../src/parts/TemperatureSensor/spi/ADT7310/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AAEtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAE1F,MAAM,WAAW,cAAc;IAC7B,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAE3C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAYZ,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAc5C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralSPI from \"../../../../obniz/libs/io_peripherals/spi\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface ADT7310Options {\r\n  vcc: number;\r\n  gnd: number;\r\n  din: number;\r\n  dout: number;\r\n  sclk: number;\r\n}\r\n\r\nexport default class ADT7310 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"ADT7310\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected spi!: PeripheralSPI;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"frequency\", \"din\", \"dout\", \"clk\", \"spi\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.params.mode = this.params.mode || \"master\";\r\n    this.params.frequency = this.params.frequency || 500000;\r\n    this.params.mosi = this.params.din;\r\n    this.params.miso = this.params.dout;\r\n    this.spi = this.obniz.getSpiWithConfig(this.params);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    await this.spi.writeWait([0x54]); // send before each commands for stable\r\n    await this.obniz.wait(200);\r\n    const ret: any = await this.spi.writeWait([0x00, 0x00]);\r\n    let tempBin: any = ret[0] << 8;\r\n    tempBin |= ret[1];\r\n    tempBin = tempBin >> 3;\r\n\r\n    if (tempBin & 0x1000) {\r\n      tempBin = tempBin - 8192;\r\n    }\r\n\r\n    return tempBin / 16;\r\n  }\r\n}\r\n"]}