{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AM2320/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAOA,MAAqB,MAAM;IAgBzB;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAjBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,QAAQ;SACf,CAAC;IACJ,CAAC;IAeM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC;QACpD,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAEY,UAAU;;YACrB,MAAM,UAAU,GAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YACzC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,EAAE;YACxB,CAAC,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO;YAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACjD,MAAM,GAAG,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC;YAC9B,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBAChC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YACD,MAAM,QAAQ,GAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACrD,MAAM,WAAW,GAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACxD,OAAO,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC;QACjC,CAAC;KAAA;IAEY,WAAW;;YACtB,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,WAAW,CAAC;QAC/C,CAAC;KAAA;IAEY,WAAW;;YACtB,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC;QAC5C,CAAC;KAAA;CACF;AAzDD,yBAyDC","file":"index.js","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface AM2320Options extends I2cPartsAbstructOptions { }\r\n\r\nexport default class AM2320 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AM2320\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.address = 0x5c;\r\n    this.params.pull = \"5v\";\r\n    this.params.mode = \"master\";\r\n    this.params.clock = this.params.clock || 100 * 1000;\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public async getAllWait(): Promise<{ temperature: number; humidity: number }> {\r\n    const i2cOnerror: any = this.i2c.onerror;\r\n    this.i2c.onerror = () => {\r\n    };\r\n    this.i2c.write(this.address, [0]); // wake\r\n    this.obniz.wait(2);\r\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\r\n    this.obniz.wait(2);\r\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\r\n    const ret: any = await this.i2c.readWait(this.address, 6);\r\n    this.i2c.onerror = i2cOnerror;\r\n    if (ret[0] !== 3 || ret[1] !== 4) {\r\n      throw new Error(`Could not receive data correctly`);\r\n    }\r\n    const humidity: any = (ret[2] * 256 + ret[3]) / 10.0;\r\n    const temperature: any = (ret[4] * 256 + ret[5]) / 10.0;\r\n    return {temperature, humidity};\r\n  }\r\n\r\n  public async getTempWait(): Promise<number | null> {\r\n    return (await this.getAllWait()).temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    return (await this.getAllWait()).humidity;\r\n  }\r\n}\r\n"]}