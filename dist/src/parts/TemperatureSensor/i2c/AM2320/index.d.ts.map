{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AM2320/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,aAAc,SAAQ,uBAAuB;CAAI;AAElE,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IAEpB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAUZ,UAAU,IAAI,OAAO,CAAC;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,CAAC;IAmBhE,WAAW,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAIrC,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAG5C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface AM2320Options extends I2cPartsAbstructOptions { }\r\n\r\nexport default class AM2320 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AM2320\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\r\n    this.requiredKeys = [];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.address = 0x5c;\r\n    this.params.pull = \"5v\";\r\n    this.params.mode = \"master\";\r\n    this.params.clock = this.params.clock || 100 * 1000;\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public async getAllWait(): Promise<{ temperature: number; humidity: number }> {\r\n    const i2cOnerror: any = this.i2c.onerror;\r\n    this.i2c.onerror = () => {\r\n    };\r\n    this.i2c.write(this.address, [0]); // wake\r\n    this.obniz.wait(2);\r\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\r\n    this.obniz.wait(2);\r\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\r\n    const ret: any = await this.i2c.readWait(this.address, 6);\r\n    this.i2c.onerror = i2cOnerror;\r\n    if (ret[0] !== 3 || ret[1] !== 4) {\r\n      throw new Error(`Could not receive data correctly`);\r\n    }\r\n    const humidity: any = (ret[2] * 256 + ret[3]) / 10.0;\r\n    const temperature: any = (ret[4] * 256 + ret[5]) / 10.0;\r\n    return {temperature, humidity};\r\n  }\r\n\r\n  public async getTempWait(): Promise<number | null> {\r\n    return (await this.getAllWait()).temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    return (await this.getAllWait()).humidity;\r\n  }\r\n}\r\n"]}