{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AM2320/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,aAAc,SAAQ,uBAAuB;CAAI;AAElE,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IAEpB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAUZ,UAAU,IAAI,OAAO,CAAC;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,CAAC;IAmBhE,WAAW,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAIrC,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAG5C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\n\nexport interface AM2320Options extends I2cPartsAbstructOptions { }\n\nexport default class AM2320 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"AM2320\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public address: any;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.address = 0x5c;\n    this.params.pull = \"5v\";\n    this.params.mode = \"master\";\n    this.params.clock = this.params.clock || 100 * 1000;\n    this.i2c = obniz.getI2CWithConfig(this.params);\n  }\n\n  public async getAllWait(): Promise<{ temperature: number; humidity: number }> {\n    const i2cOnerror: any = this.i2c.onerror;\n    this.i2c.onerror = () => {\n    };\n    this.i2c.write(this.address, [0]); // wake\n    this.obniz.wait(2);\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\n    this.obniz.wait(2);\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\n    const ret: any = await this.i2c.readWait(this.address, 6);\n    this.i2c.onerror = i2cOnerror;\n    if (ret[0] !== 3 || ret[1] !== 4) {\n      throw new Error(`Could not receive data correctly`);\n    }\n    const humidity: any = (ret[2] * 256 + ret[3]) / 10.0;\n    const temperature: any = (ret[4] * 256 + ret[5]) / 10.0;\n    return {temperature, humidity};\n  }\n\n  public async getTempWait(): Promise<number | null> {\n    return (await this.getAllWait()).temperature;\n  }\n\n  public async getHumdWait(): Promise<number> {\n    return (await this.getAllWait()).humidity;\n  }\n}\n"]}