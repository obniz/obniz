{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/DHT12/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,iEAAyC;AAQzC,MAAqB,KAAM,SAAQ,kBAAQ;IAElC,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAEM,OAAO;QACZ,OAAO;YACL,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,IAAI;SACd,CAAC;IACJ,CAAC;IAEY,cAAc;;YACzB,MAAM,IAAI,GAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YAC9C,IAAI,WAAW,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;YACxD,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;gBAClB,WAAW,IAAI,CAAC,CAAC,CAAC;aACnB;YAED,MAAM,QAAQ,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;gBACxB,MAAM,IAAK,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC7C;YAED,OAAO;gBACL,QAAQ;gBACR,WAAW;aACZ,CAAC;QACJ,CAAC;KAAA;IAEY,WAAW;;YACtB,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,EAAU,CAAA,CAAC,WAAW,CAAC;QAC1D,CAAC;KAAA;IAEY,WAAW;;YACtB,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,EAAU,CAAA,CAAC,QAAQ,CAAC;QACvD,CAAC;KAAA;CACF;AA1CD,wBA0CC","file":"index.js","sourcesContent":["import i2cParts from \"../../../i2cParts\";\r\n\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface DHT12Options extends I2cPartsAbstructOptions { }\r\n\r\nexport default class DHT12 extends i2cParts implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"DHT12\",\r\n    };\r\n  }\r\n\r\n  public i2cInfo() {\r\n    return {\r\n      address: 0x5c,\r\n      clock: 100000,\r\n      voltage: \"3v\",\r\n    };\r\n  }\r\n\r\n  public async getAllDataWait(): Promise<{humidity: number, temperature: number}> {\r\n    const data: any = await this.readWait(0x00, 5);\r\n    const humidity: any = data[0] + data[1] * 0.1;\r\n    let temperature: any = data[2] + (data[3] & 0x7f) * 0.1;\r\n    if (data[3] & 0x80) {\r\n      temperature *= -1;\r\n    }\r\n\r\n    const checksum: any = data[0] + data[1] + data[2] + data[3];\r\n    if (checksum !== data[4]) {\r\n      throw new  Error(`checksum does not match`);\r\n    }\r\n\r\n    return {\r\n      humidity,\r\n      temperature,\r\n    };\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    return (await this.getAllDataWait() as any).temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    return (await this.getAllDataWait() as any).humidity;\r\n  }\r\n}\r\n"]}