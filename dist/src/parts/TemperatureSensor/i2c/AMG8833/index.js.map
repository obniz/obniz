{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AMG8833/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface AMG8833Options extends I2cPartsAbstructOptions {\r\n  address?: number;\r\n }\r\n\r\nexport default class AMG8833 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AMG8833\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public ioKeys: string[];\r\n  public commands: any;\r\n  public params: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"address\"];\r\n\r\n    this.ioKeys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\r\n    this.commands = {};\r\n    this.commands.mode_normal = [0x00, 0x00];\r\n    this.commands.reset_flag = [0x01, 0x30];\r\n    this.commands.reset_initial = [0x01, 0x3f];\r\n    this.commands.frameRate_10fps = [0x02, 0x00];\r\n    this.commands.frameRate_1fps = [0x02, 0x01];\r\n    this.commands.int_disable = [0x03, 0x00];\r\n    this.commands.int_absVal = [0x03, 0x03];\r\n    this.commands.int_diff = [0x03, 0x01];\r\n    this.commands.stat = [0x04];\r\n    this.commands.statClr_ovs = [0x05, 0x04];\r\n    this.commands.statClr_int = [0x05, 0x02];\r\n    this.commands.average_disable = [0x07, 0x00];\r\n    this.commands.average_enable = [0x07, 0x10];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.address = 0x69;\r\n    if (this.params.address === 0x69) {\r\n      this.address = 0x69;\r\n    } else if (this.params.addressmode === 0x68) {\r\n      this.address = 0x68;\r\n    } else if (this.params.address !== undefined) {\r\n      throw new Error(\"address must be 0x68 or 0x69\");\r\n    }\r\n\r\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || null; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.obniz.wait(50);\r\n\r\n    this.i2c.write(this.address, this.commands.mode_normal);\r\n    this.i2c.write(this.address, this.commands.reset_flag);\r\n    this.i2c.write(this.address, this.commands.frameRate_10fps);\r\n    this.i2c.write(this.address, this.commands.int_disable);\r\n  }\r\n\r\n  public async getOnePixWait(pixel: number): Promise<number> {\r\n    let pixelAddrL: any = 0x80;\r\n    let pixelAddrH: any = 0x81;\r\n    if (pixel >= 0 && pixel <= 63) {\r\n      pixelAddrL = 0x80 + pixel * 2;\r\n      pixelAddrH = 0x81 + pixel * 2;\r\n    } else {\r\n      throw new Error(\"pixel number must be range of 0 to 63\");\r\n    }\r\n    this.i2c.write(this.address, [pixelAddrL]);\r\n    const dataL: any = await this.i2c.readWait(this.address, 1);\r\n    this.i2c.write(this.address, [pixelAddrH]);\r\n    const dataH: any = await this.i2c.readWait(this.address, 1);\r\n    let temp12bit: any = (dataH << 8) | dataL;\r\n    if (dataH & 0x08) {\r\n      // negative temperature\r\n      temp12bit = temp12bit - 1;\r\n      temp12bit = 0xfff - temp12bit; // bit inverting\r\n      return temp12bit * -0.25;\r\n    } else {\r\n      // positive temperature\r\n      return temp12bit * 0.25;\r\n    }\r\n  }\r\n\r\n  public async getAllPixWait(): Promise<number[]> {\r\n    const tempArray = new Array(64);\r\n    this.i2c.write(this.address, [0x80]);\r\n    const datas = await this.i2c.readWait(this.address, 64 * 2);\r\n\r\n    for (let i = 0; i < 64; i++) {\r\n      let temp12bit: any = (datas[i * 2 + 1] << 8) | datas[i * 2];\r\n      let temp: any = 0;\r\n      if (datas[i * 2 + 1] & 0x08) {\r\n        // negative temperature\r\n        temp12bit = temp12bit - 1;\r\n        temp12bit = 0xfff - temp12bit; // bit inverting\r\n        temp = temp12bit * -0.25;\r\n      } else {\r\n        // positive temperature\r\n        temp = temp12bit * 0.25;\r\n      }\r\n      tempArray[i] = temp;\r\n    }\r\n\r\n    return tempArray;\r\n  }\r\n}\r\n"]}