{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AMG8833/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AAEtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,cAAe,SAAQ,uBAAuB;IAC7D,OAAO,CAAC,EAAE,MAAM,CAAC;CACjB;AAEF,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAE3C,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,QAAQ,EAAE,GAAG,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IAEpB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAuBvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAyBZ,aAAa,CAAC,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAyB7C,aAAa,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;CAsBhD","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface AMG8833Options extends I2cPartsAbstructOptions {\r\n  address?: number;\r\n }\r\n\r\nexport default class AMG8833 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AMG8833\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public ioKeys: string[];\r\n  public commands: any;\r\n  public params: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"address\"];\r\n\r\n    this.ioKeys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\r\n    this.commands = {};\r\n    this.commands.mode_normal = [0x00, 0x00];\r\n    this.commands.reset_flag = [0x01, 0x30];\r\n    this.commands.reset_initial = [0x01, 0x3f];\r\n    this.commands.frameRate_10fps = [0x02, 0x00];\r\n    this.commands.frameRate_1fps = [0x02, 0x01];\r\n    this.commands.int_disable = [0x03, 0x00];\r\n    this.commands.int_absVal = [0x03, 0x03];\r\n    this.commands.int_diff = [0x03, 0x01];\r\n    this.commands.stat = [0x04];\r\n    this.commands.statClr_ovs = [0x05, 0x04];\r\n    this.commands.statClr_int = [0x05, 0x02];\r\n    this.commands.average_disable = [0x07, 0x00];\r\n    this.commands.average_enable = [0x07, 0x10];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.address = 0x69;\r\n    if (this.params.address === 0x69) {\r\n      this.address = 0x69;\r\n    } else if (this.params.addressmode === 0x68) {\r\n      this.address = 0x68;\r\n    } else if (this.params.address !== undefined) {\r\n      throw new Error(\"address must be 0x68 or 0x69\");\r\n    }\r\n\r\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || null; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.obniz.wait(50);\r\n\r\n    this.i2c.write(this.address, this.commands.mode_normal);\r\n    this.i2c.write(this.address, this.commands.reset_flag);\r\n    this.i2c.write(this.address, this.commands.frameRate_10fps);\r\n    this.i2c.write(this.address, this.commands.int_disable);\r\n  }\r\n\r\n  public async getOnePixWait(pixel: number): Promise<number> {\r\n    let pixelAddrL: any = 0x80;\r\n    let pixelAddrH: any = 0x81;\r\n    if (pixel >= 0 && pixel <= 63) {\r\n      pixelAddrL = 0x80 + pixel * 2;\r\n      pixelAddrH = 0x81 + pixel * 2;\r\n    } else {\r\n      throw new Error(\"pixel number must be range of 0 to 63\");\r\n    }\r\n    this.i2c.write(this.address, [pixelAddrL]);\r\n    const dataL: any = await this.i2c.readWait(this.address, 1);\r\n    this.i2c.write(this.address, [pixelAddrH]);\r\n    const dataH: any = await this.i2c.readWait(this.address, 1);\r\n    let temp12bit: any = (dataH << 8) | dataL;\r\n    if (dataH & 0x08) {\r\n      // negative temperature\r\n      temp12bit = temp12bit - 1;\r\n      temp12bit = 0xfff - temp12bit; // bit inverting\r\n      return temp12bit * -0.25;\r\n    } else {\r\n      // positive temperature\r\n      return temp12bit * 0.25;\r\n    }\r\n  }\r\n\r\n  public async getAllPixWait(): Promise<number[]> {\r\n    const tempArray = new Array(64);\r\n    this.i2c.write(this.address, [0x80]);\r\n    const datas = await this.i2c.readWait(this.address, 64 * 2);\r\n\r\n    for (let i = 0; i < 64; i++) {\r\n      let temp12bit: any = (datas[i * 2 + 1] << 8) | datas[i * 2];\r\n      let temp: any = 0;\r\n      if (datas[i * 2 + 1] & 0x08) {\r\n        // negative temperature\r\n        temp12bit = temp12bit - 1;\r\n        temp12bit = 0xfff - temp12bit; // bit inverting\r\n        temp = temp12bit * -0.25;\r\n      } else {\r\n        // positive temperature\r\n        temp = temp12bit * 0.25;\r\n      }\r\n      tempArray[i] = temp;\r\n    }\r\n\r\n    return tempArray;\r\n  }\r\n}\r\n"]}