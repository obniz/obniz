{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/ADT7410/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AAEtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,cAAe,SAAQ,uBAAuB;IAC7D,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAE3C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IAEpB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAOvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAmBZ,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAY5C","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\n\nexport interface ADT7410Options extends I2cPartsAbstructOptions {\n  addressMode: number;\n}\n\nexport default class ADT7410 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ADT7410\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public address: any;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"addressMode\"];\n    this.requiredKeys = [\"addressMode\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    if (this.params.addressMode === 8) {\n      this.address = 0x48;\n    } else if (this.params.addressMode === 9) {\n      this.address = 0x49;\n    } else {\n      throw new Error(`please specify address. 8 or 9`);\n    }\n\n    this.params.clock = 400000;\n    this.params.pull = \"5v\";\n    this.params.mode = \"master\";\n\n    this.i2c = obniz.getI2CWithConfig(this.params);\n  }\n\n  public async getTempWait(): Promise<number> {\n    const ret = await this.i2c.readWait(this.address, 2);\n    let tempBin: any = ret[0] << 8;\n    tempBin |= ret[1];\n    tempBin = tempBin >> 3;\n\n    if (tempBin & 0x1000) {\n      tempBin = tempBin - 8192;\n    }\n\n    return tempBin / 16;\n  }\n}\n"]}