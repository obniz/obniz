{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/ADT7410/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAUA,MAAqB,OAAO;IAgB1B;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,GAAG,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAjBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAeM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAExD,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,CAAC,EAAE;YACjC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,CAAC,EAAE;YACxC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAE5B,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAEY,WAAW;;YACtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACrD,IAAI,OAAO,GAAQ,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;YAEvB,IAAI,OAAO,GAAG,MAAM,EAAE;gBACpB,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC;aAC1B;YAED,OAAO,OAAO,GAAG,EAAE,CAAC;QACtB,CAAC;KAAA;CACF;AApDD,0BAoDC","file":"index.js","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface ADT7410Options extends I2cPartsAbstructOptions {\r\n  addressMode: number;\r\n}\r\n\r\nexport default class ADT7410 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"ADT7410\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"addressMode\"];\r\n    this.requiredKeys = [\"addressMode\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    if (this.params.addressMode === 8) {\r\n      this.address = 0x48;\r\n    } else if (this.params.addressMode === 9) {\r\n      this.address = 0x49;\r\n    } else {\r\n      throw new Error(`please specify address. 8 or 9`);\r\n    }\r\n\r\n    this.params.clock = 400000;\r\n    this.params.pull = \"5v\";\r\n    this.params.mode = \"master\";\r\n\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    const ret = await this.i2c.readWait(this.address, 2);\r\n    let tempBin: any = ret[0] << 8;\r\n    tempBin |= ret[1];\r\n    tempBin = tempBin >> 3;\r\n\r\n    if (tempBin & 0x1000) {\r\n      tempBin = tempBin - 8192;\r\n    }\r\n\r\n    return tempBin / 16;\r\n  }\r\n}\r\n"]}