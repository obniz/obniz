{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/SHT20/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,YAAa,SAAQ,uBAAuB;CAC5D;AAED,MAAM,CAAC,OAAO,OAAO,KAAM,YAAW,mBAAmB;WAEzC,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEZ,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,QAAQ,EAAE;QAAC,CAAC,GAAG,EAAE,MAAM,GAAG,CAAC,MAAM,CAAC,CAAA;KAAC,CAAC;IACpC,OAAO,EAAG,MAAM,CAAC;IAExB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAoBvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAaZ,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;IAa3C,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAS9B,YAAY,IAAI,OAAO,CAAC,MAAM,CAAC;IAS5C,OAAO,CAAC,QAAQ;CAajB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface SHT20Options extends I2cPartsAbstructOptions {\r\n}\r\n\r\nexport default class SHT20 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"SHT20\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  public ioKeys: string[];\r\n  public commands: {[key: string]: [number]};\r\n  public address!: number;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\r\n      \"vcc\",\r\n      \"sda\",\r\n      \"scl\",\r\n      \"gnd\",\r\n      \"i2c\",\r\n      \"pull\",\r\n    ];\r\n\r\n    this.ioKeys = [\"vcc\", \"sda\", \"scl\", \"gnd\"];\r\n    this.commands = {};\r\n    this.commands.softReset = [0xfe];\r\n    this.commands.tempNoHold = [0xf3];\r\n    this.commands.humidityNoHold = [0xf5];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"3v\");\r\n    this.address = 0x40;\r\n\r\n    this.params.clock = this.params.clock || 100 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || \"3v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.i2c.write(this.address, this.commands.softReset);\r\n    this.obniz.wait(50);\r\n  }\r\n\r\n  public async getData(command: [number]): Promise<number> {\r\n    this.i2c.write(this.address, command);\r\n\r\n    await this.obniz.wait(100);\r\n    const data: number[] = await this.i2c.readWait(this.address, 3);\r\n\r\n    const rawValue = (data[0] << 8) | data[1];\r\n    if (this.checkCRC(rawValue, data[2]) !== 0) {\r\n      return -2;\r\n    }\r\n    return rawValue & 0xFFFC;\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    const rawTemperature = await this.getData(this.commands.tempNoHold);\r\n    if (rawTemperature < 0) {\r\n      console.log(\"error sht20\", rawTemperature);\r\n      return(rawTemperature);\r\n    }\r\n    return rawTemperature * (175.72 / 65536.0) - 46.85;\r\n  }\r\n\r\n  public async getHumidWait(): Promise<number> {\r\n    const rawHumidity  = await this.getData(this.commands.humidityNoHold);\r\n    if (rawHumidity  < 0) {\r\n      console.log(\"error sht20\", rawHumidity );\r\n      return(rawHumidity);\r\n    }\r\n    return rawHumidity * (125.0 / 65536.0) - 6.0;\r\n  }\r\n\r\n  private checkCRC(message_from_sensor: number, check_value_from_sensor: number): number {\r\n    let remainder = message_from_sensor << 8;\r\n    remainder |= check_value_from_sensor;\r\n    let divsor = 0x988000;\r\n    for (let i = 0; i < 16; i++) {\r\n      if (remainder & 1 << (23 - i)) {\r\n        remainder ^= divsor;\r\n      }\r\n      divsor >>= 1;\r\n    }\r\n    return remainder;\r\n  }\r\n\r\n}\r\n"]}