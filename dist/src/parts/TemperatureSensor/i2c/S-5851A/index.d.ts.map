{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/S-5851A/index.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAE1F,MAAM,WAAW,aAAa;IAC5B,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,CAAC;IACd,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IAEpB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;IAC9B,SAAS,CAAC,IAAI,EAAG,aAAa,CAAC;;IAOxB,KAAK,CAAC,KAAK,EAAE,KAAK;IA+DZ,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAY9B,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAS5C","file":"index.d.ts","sourcesContent":["// sensor response not found\r\nimport Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface S5851AOptions {\r\n  vcc: number;\r\n  gnd: number;\r\n  sda: number;\r\n  scl: number;\r\n  addr0: number;\r\n  addr1: number;\r\n  addressmode: string;\r\n}\r\n\r\nexport default class S5851A implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"S5851A\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public io_adr0: any;\r\n  public params: any;\r\n  public io_adr1: any;\r\n  public address: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n  protected i2c0!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [\"vcc\", \"gnd\", \"adr0\", \"adr1\", \"adr_select\"];\r\n    this.keys = [\"sda\", \"scl\", \"adr0\", \"adr1\", \"adr_select\", \"i2c\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    // params: pwr, gnd, sda, scl, adr0, adr1, adr_select\r\n    this.io_adr0 = obniz.getIO(this.params.adr0);\r\n    this.io_adr1 = obniz.getIO(this.params.adr1);\r\n\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    switch (this.params.adr_select) {\r\n      case 8:\r\n        this.io_adr0.output(false);\r\n        this.io_adr1.output(false);\r\n        this.address = 0x48;\r\n        break;\r\n      case 9:\r\n        this.io_adr0.pull(null);\r\n        this.io_adr1.output(false);\r\n        this.address = 0x49;\r\n        break;\r\n      case \"A\":\r\n        this.io_adr0.output(true);\r\n        this.io_adr1.output(false);\r\n        this.address = 0x4a;\r\n        break;\r\n      case \"B\":\r\n        this.io_adr0.output(false);\r\n        this.io_adr1.output(true);\r\n        this.address = 0x4b;\r\n        break;\r\n      case \"C\":\r\n        this.io_adr0.pull(null);\r\n        this.io_adr1.output(true);\r\n        this.address = 0x4c;\r\n        break;\r\n      case \"D\":\r\n        this.io_adr0.output(true);\r\n        this.io_adr1.output(true);\r\n        this.address = 0x4d;\r\n        break;\r\n      case \"E\":\r\n        this.io_adr0.output(false);\r\n        this.io_adr1.pull(null);\r\n        this.address = 0x4e;\r\n        break;\r\n      case \"F\":\r\n        this.io_adr0.output(true);\r\n        this.io_adr1.pull(null);\r\n        this.address = 0x4f;\r\n        break;\r\n      default:\r\n        this.io_adr0.output(false);\r\n        this.io_adr1.output(false);\r\n        this.address = 0x48;\r\n        break;\r\n    }\r\n    console.log(\"i2c address=\" + this.address);\r\n\r\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    // obniz.i2c0.write(address, [0x20, 0x24]);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    // console.log(\"gettempwait\");\r\n    // obniz.i2c0.write(address, [0x20, 0x24]);\r\n    // obniz.i2c0.write(address, [0xE0, 0x00]);\r\n    const ret: any = await this.i2c0.readWait(this.address, 2);\r\n    // console.log('ret:' + ret);\r\n    const tempBin: any =\r\n      ret[0].toString(2) + (\"00000000\" + ret[1].toString(2)).slice(-8);\r\n    const temperature: any = -45 + 175 * (parseInt(tempBin, 2) / (65536 - 1));\r\n    return temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    this.i2c.write(this.address, [0x20, 0x24]);\r\n    this.i2c.write(this.address, [0xe0, 0x00]);\r\n    const ret: any = await this.i2c.readWait(this.address, 4);\r\n    const humdBin: any =\r\n      ret[2].toString(2) + (\"00000000\" + ret[3].toString(2)).slice(-8);\r\n    const humidity: any = 100 * (parseInt(humdBin, 2) / (65536 - 1));\r\n    return humidity;\r\n  }\r\n}\r\n"]}