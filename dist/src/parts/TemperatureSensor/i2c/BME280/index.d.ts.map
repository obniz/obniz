{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/BME280/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,YAAY,MAAM,0CAA0C,CAAC;AAEpE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAE1F,MAAM,WAAW,aAAa;IAC5B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,GAAG,CAAC,EAAE,GAAG,CAAC;CACV;AAEF,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAQ7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,YAAY,EAAE,GAAG,CAAC;IAClB,QAAQ,EAAE,GAAG,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,MAAM,CAAC,EAAE,YAAY,CAAC;IACtB,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,CAAC,EAAE,YAAY,CAAC;IAE7B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;IAE9B,OAAO,CAAC,WAAW,CAAM;IACzB,OAAO,CAAC,OAAO,CAAM;;IA4Cd,KAAK,CAAC,KAAK,EAAE,KAAK;IA4CZ,MAAM;IAmBN,cAAc,CAAC,OAAO,EAAE,GAAG;IAK3B,gBAAgB;IAgCtB,aAAa,CAAC,KAAK,EAAE,MAAM;IAO3B,YAAY,CAAC,KAAK,EAAE,MAAM;IAO1B,KAAK,CAAC,IAAI,EAAE,GAAG;IAIX,OAAO;IAKL,UAAU,IAAI,OAAO,CAAC;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,CAAC;IAcxF,aAAa,CAAC,KAAK,EAAE,GAAG;IAoBxB,aAAa,CAAC,KAAK,EAAE,GAAG;IAsBxB,aAAa,CAAC,KAAK,EAAE,GAAG;IAelB,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAI9B,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAI9B,eAAe,IAAI,OAAO,CAAC,MAAM,CAAC;IAIlC,eAAe;IAKrB,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,MAAM,GAAG,MAAM;CAQpE","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport PeripheralIO from \"../../../../obniz/libs/io_peripherals/io\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface BME280Options {\r\n  vio?: number;\r\n  vcore?: number;\r\n  gnd?: number;\r\n  csb?: number;\r\n  sdi?: number;\r\n  sck?: number;\r\n  sdo?: number;\r\n  address?: number;\r\n  i2c?: any;\r\n }\r\n\r\nexport default class BME280 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"BME280\",\r\n      datasheet:\r\n        \"https://ae-bst.resource.bosch.com/media/_tech/media/datasheets/BST-BME280_DS001-12.pdf\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public ioKeys: string[];\r\n  public configration: any;\r\n  public commands: any;\r\n  public params: any;\r\n  public io_csb?: PeripheralIO;\r\n  public address: any;\r\n  public io_sdo?: PeripheralIO;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  private _calibrated: any;\r\n  private _t_fine: any;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\r\n      \"vcore\",\r\n      \"vio\",\r\n      \"gnd\",\r\n      \"csb\",\r\n      \"sdi\",\r\n      \"sck\",\r\n      \"sdo\",\r\n      \"i2c\",\r\n      \"address\",\r\n    ];\r\n\r\n    this.ioKeys = [\"vcore\", \"vio\", \"gnd\", \"csb\", \"sdi\", \"sdo\", \"sck\"];\r\n\r\n    this.configration = {\r\n      sampling: {\r\n        temp: 1, // 0 never. 0b001 to 0b101\r\n        hum: 1,\r\n        pres: 1,\r\n      },\r\n      interval: 5, // 0b000 to 0b111\r\n      iir_strength: 0, // 000 to 100 (0=disable)\r\n      mode: 3,\r\n\r\n      Modes: {\r\n        sleep: 0,\r\n        forced: 1, // or 2\r\n        normal: 3,\r\n      },\r\n    };\r\n\r\n    this.commands = {};\r\n\r\n    this.commands.addresses = {\r\n      config: 0xf5,\r\n      ctrl_meas: 0xf4,\r\n      ctrl_hum: 0xf2,\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    if (obniz.isValidIO(this.params.csb)) {\r\n      // selecting I2C mode before powerup\r\n      this.io_csb = obniz.getIO(this.params.csb);\r\n      this.io_csb.drive(\"3v\");\r\n      this.io_csb.output(true);\r\n    }\r\n\r\n    this.obniz.setVccGnd(this.params.vio, null, \"3v\");\r\n    this.obniz.setVccGnd(this.params.vcore, null, \"3v\");\r\n    this.obniz.setVccGnd(null, this.params.gnd, \"5v\");\r\n    this.obniz.wait(10);\r\n\r\n    this.address = 0x76;\r\n    if (this.params.address === 0x76) {\r\n      this.address = 0x76;\r\n    } else if (this.params.address === 0x77) {\r\n      this.address = 0x77;\r\n    } else if (this.params.address !== undefined) {\r\n      throw new Error(\"address must be 0x76 or 0x77\");\r\n    }\r\n\r\n    if (obniz.isValidIO(this.params.sdo)) {\r\n      this.io_sdo = obniz.getIO(this.params.sdo);\r\n      this.io_sdo.drive(\"3v\");\r\n      this.io_sdo.output(this.address === 0x76 ? false : true);\r\n    }\r\n\r\n    this.params.sda = this.params.sda || this.params.sdi;\r\n    this.params.scl = this.params.scl || this.params.sck;\r\n    this.params.clock = this.params.clock || 100 * 1000;\r\n    this.params.mode = \"master\";\r\n    this.params.pull = \"3v\";\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n\r\n    this.obniz.wait(10);\r\n\r\n    this.config();\r\n\r\n    this.obniz.wait(10);\r\n  }\r\n\r\n  public async config() {\r\n    this.write([\r\n      this.commands.addresses.config,\r\n      (this.configration.interval << 5) |\r\n      (this.configration.iir_strength << 2) |\r\n      0,\r\n    ]);\r\n    this.write([\r\n      this.commands.addresses.ctrl_hum,\r\n      this.configration.sampling.hum,\r\n    ]);\r\n    this.write([\r\n      this.commands.addresses.ctrl_meas,\r\n      (this.configration.sampling.temp << 5) |\r\n      (this.configration.sampling.pres << 2) |\r\n      this.configration.mode,\r\n    ]);\r\n  }\r\n\r\n  public async setIIRStrength(strengh: any) {\r\n    this.configration.iir_strength = strengh;\r\n    this.config();\r\n  }\r\n\r\n  public async applyCalibration() {\r\n    this.i2c.write(this.address, [0x88]);\r\n    const data: any = await this.i2c.readWait(this.address, 24);\r\n    this.i2c.write(this.address, [0xa1]);\r\n    let data_next: any = await this.i2c.readWait(this.address, 1);\r\n    data.push(...data_next);\r\n    this.i2c.write(this.address, [0xe1]);\r\n    data_next = await this.i2c.readWait(this.address, 7);\r\n    data.push(...data_next);\r\n    this._calibrated = {\r\n      dig_T1: (data[1] << 8) | data[0],\r\n      dig_T2: this._readSigned16((data[3] << 8) | data[2]),\r\n      dig_T3: this._readSigned16((data[5] << 8) | data[4]),\r\n      dig_P1: (data[7] << 8) | data[6],\r\n      dig_P2: this._readSigned16((data[9] << 8) | data[8]),\r\n      dig_P3: this._readSigned16((data[11] << 8) | data[10]),\r\n      dig_P4: this._readSigned16((data[13] << 8) | data[12]),\r\n      dig_P5: this._readSigned16((data[15] << 8) | data[14]),\r\n      dig_P6: this._readSigned16((data[17] << 8) | data[16]),\r\n      dig_P7: this._readSigned16((data[19] << 8) | data[18]),\r\n      dig_P8: this._readSigned16((data[21] << 8) | data[20]),\r\n      dig_P9: this._readSigned16((data[23] << 8) | data[22]),\r\n      dig_H1: this._readSigned8(data[24]),\r\n      dig_H2: this._readSigned16((data[26] << 8) | data[25]),\r\n      dig_H3: this._readSigned8(data[27]),\r\n      dig_H4: this._readSigned16((data[28] << 4) | (0x0f & data[29])),\r\n      dig_H5: this._readSigned16((data[30] << 4) | ((data[29] >> 4) & 0x0f)),\r\n      dig_H6: this._readSigned8(data[31]),\r\n    };\r\n    this._t_fine = 0;\r\n  }\r\n\r\n  public _readSigned16(value: number) {\r\n    if (value >= 0x8000) {\r\n      value = value - 0x10000;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  public _readSigned8(value: number) {\r\n    if (value >= 0x80) {\r\n      value = value - 0x100;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  public write(data: any) {\r\n    this.i2c.write(this.address, data);\r\n}\r\n\r\npublic async getData() {\r\n    this.i2c.write(this.address, [0xf7]);\r\n    return await this.i2c.readWait(this.address, 8);\r\n  }\r\n\r\n  public async getAllWait(): Promise<{ temperature: number; humidity: number; pressure: number }> {\r\n    const data = await this.getData();\r\n\r\n    const press_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);\r\n    const temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);\r\n    const hum_raw = (data[6] << 8) | data[7];\r\n\r\n    const temperature = this.calibration_T(temp_raw) / 100.0;\r\n    const pressure = this.calibration_P(press_raw) / 100.0;\r\n    const humidity = this.calibration_H(hum_raw);\r\n\r\n    return {temperature, humidity, pressure};\r\n  }\r\n\r\n  public calibration_T(adc_T: any) {\r\n    let var1: any;\r\n    let var2: any;\r\n    let T: any;\r\n    var1 =\r\n      (((adc_T >> 3) - (this._calibrated.dig_T1 << 1)) *\r\n        this._calibrated.dig_T2) >>\r\n      11;\r\n    var2 =\r\n      (((((adc_T >> 4) - this._calibrated.dig_T1) *\r\n        ((adc_T >> 4) - this._calibrated.dig_T1)) >>\r\n        12) *\r\n        this._calibrated.dig_T3) >>\r\n      14;\r\n\r\n    this._t_fine = var1 + var2;\r\n    T = (this._t_fine * 5 + 128) >> 8;\r\n    return T;\r\n  }\r\n\r\n  public calibration_P(adc_P: any) {\r\n    let pvar1: any = this._t_fine / 2 - 64000;\r\n    let pvar2: any = (pvar1 * pvar1 * this._calibrated.dig_P6) / 32768;\r\n    pvar2 = pvar2 + pvar1 * this._calibrated.dig_P5 * 2;\r\n    pvar2 = pvar2 / 4 + this._calibrated.dig_P4 * 65536;\r\n    pvar1 =\r\n      ((this._calibrated.dig_P3 * pvar1 * pvar1) / 524288 +\r\n        this._calibrated.dig_P2 * pvar1) /\r\n      524288;\r\n    pvar1 = (1 + pvar1 / 32768) * this._calibrated.dig_P1;\r\n\r\n    if (pvar1 !== 0) {\r\n      let p: any = 1048576 - adc_P;\r\n      p = ((p - pvar2 / 4096) * 6250) / pvar1;\r\n      pvar1 = (this._calibrated.dig_P9 * p * p) / 2147483648;\r\n      pvar2 = (p * this._calibrated.dig_P8) / 32768;\r\n      p = p + (pvar1 + pvar2 + this._calibrated.dig_P7) / 16;\r\n      return p;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  public calibration_H(adc_H: any) {\r\n    let h: any = this._t_fine - 76800;\r\n    h =\r\n      (adc_H -\r\n        (this._calibrated.dig_H4 * 64 +\r\n          (this._calibrated.dig_H5 / 16384) * h)) *\r\n      ((this._calibrated.dig_H2 / 65536) *\r\n        (1 +\r\n          (this._calibrated.dig_H6 / 67108864) *\r\n          h *\r\n          (1 + (this._calibrated.dig_H3 / 67108864) * h)));\r\n    h = h * (1 - (this._calibrated.dig_H1 * h) / 524288);\r\n    return h;\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    return (await this.getAllWait()).temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    return (await this.getAllWait()).humidity;\r\n  }\r\n\r\n  public async getPressureWait(): Promise<number> {\r\n    return (await this.getAllWait()).pressure;\r\n  }\r\n\r\n  public async getAltitudeWait() {\r\n    const pressure: any = await this.getPressureWait();\r\n    return this.calcAltitude(pressure);\r\n  }\r\n\r\n  public calcAltitude(pressure: number, seaPressure?: number): number {\r\n    if (typeof seaPressure !== \"number\") {\r\n      seaPressure = 1013.25;\r\n    }\r\n    return (\r\n      (1.0 - Math.pow(pressure / seaPressure, 1 / 5.2553)) * 145366.45 * 0.3048\r\n    );\r\n  }\r\n}\r\n"]}