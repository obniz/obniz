{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/D6T44L/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,aAAa,MAAM,2CAA2C,CAAC;AAEtE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,aAAc,SAAQ,uBAAuB;CAAI;AAElE,cAAM,MAAO,YAAW,mBAAmB;WAE3B,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,QAAQ,EAAE,GAAG,CAAC;IAErB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAYvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAWZ,aAAa,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAK9C,aAAa,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;CAehD;AAED,eAAe,MAAM,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface D6T44LOptions extends I2cPartsAbstructOptions { }\r\n\r\nclass D6T44L implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"D6T44L\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  public address: any;\r\n  public ioKeys: string[];\r\n  public commands: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"clock\"];\r\n    this.address = 0x0a;\r\n\r\n    this.ioKeys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\r\n    this.commands = {};\r\n    this.commands.read_data = [0x4c];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n\r\n    this.params.clock = this.params.clock || 100 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || null; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.obniz.wait(50);\r\n  }\r\n\r\n  public async getOnePixWait(pixcel: number): Promise<number> {\r\n    const data = await this.getAllPixWait();\r\n    return data[pixcel];\r\n  }\r\n\r\n  public async getAllPixWait(): Promise<number[]> {\r\n    this.i2c.write(this.address, [0x4c]);\r\n    // await obniz.wait(160);\r\n    const raw = await this.i2c.readWait(this.address, 35);\r\n\r\n    const data: number[] = [];\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n      data[i] = parseFloat(\r\n        ((raw[i * 2 + 2] + (raw[i * 2 + 3] << 8)) * 0.1).toFixed(1),\r\n      );\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default D6T44L;\r\n"]}