{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/SHT31/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport {PullType} from \"../../../../obniz/libs/io_peripherals/common\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport PeripheralIO from \"../../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface SHT31Options extends I2cPartsAbstructOptions {\r\n  adr: number;\r\n  addressmode: number;\r\n  pull?: PullType;\r\n}\r\n\r\nexport default class SHT31 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"SHT31\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  public ioKeys: string[];\r\n  public commands: any;\r\n  public waitTime: {[key: string]: number};\r\n  public io_adr!: PeripheralIO;\r\n  public address!: number;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [\"adr\", \"addressmode\"];\r\n    this.keys = [\r\n      \"vcc\",\r\n      \"sda\",\r\n      \"scl\",\r\n      \"gnd\",\r\n      \"adr\",\r\n      \"addressmode\",\r\n      \"i2c\",\r\n      \"pull\",\r\n    ];\r\n\r\n    this.ioKeys = [\"vcc\", \"sda\", \"scl\", \"gnd\", \"adr\"];\r\n    this.commands = {};\r\n    this.commands.softReset = [0x30, 0xa2];\r\n    this.commands.highRepeatStreach = [0x2c, 0x06];\r\n    this.commands.middleRepeatStreach = [0x2c, 0x0d];\r\n    this.commands.lowRepeatStreach = [0x2c, 0x10];\r\n    this.commands.highRepeat = [0x24, 0x00];\r\n    this.commands.mediumRepeat = [0x24, 0x0b];\r\n    this.commands.lowRepeat = [0x24, 0x16];\r\n\r\n    this.waitTime = {};\r\n    this.waitTime.wakeup = 1;\r\n    this.waitTime.softReset = 1;\r\n    this.waitTime.lowRepeat = 4;\r\n    this.waitTime.mediumRepeat = 6;\r\n    this.waitTime.highRepeat = 15;\r\n\r\n    // not tested\r\n    this.commands.readStatus = [0xf3, 0x2d];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.io_adr = obniz.getIO(this.params.adr);\r\n\r\n    if (this.params.addressmode === 4) {\r\n      this.io_adr.output(false);\r\n      this.address = 0x44;\r\n    } else if (this.params.addressmode === 5) {\r\n      this.io_adr.pull(null);\r\n      this.address = 0x45;\r\n    }\r\n\r\n    this.params.clock = this.params.clock || 100 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.i2c.write(this.address, this.commands.softReset);\r\n  }\r\n\r\n  public async getData() {\r\n    this.i2c.write(this.address, this.commands.highRepeat);\r\n    await this.obniz.wait(this.waitTime.highRepeat);\r\n    return await this.i2c.readWait(this.address, 6);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    return (await this.getAllWait()).temperature;\r\n  }\r\n\r\n  public async getHumdWait(): Promise<number> {\r\n    return (await this.getAllWait()).humidity;\r\n  }\r\n\r\n  public async getAllWait(): Promise<{temperature: number, humidity: number}> {\r\n    const ret = await this.getData();\r\n\r\n    const tempBin = ret[0] * 256 + ret[1];\r\n    const temperature = -45 + 175 * (tempBin / (65536 - 1));\r\n\r\n    const humdBin = ret[3] * 256 + ret[4];\r\n    const humidity = 100 * (humdBin / (65536 - 1));\r\n    return {temperature, humidity};\r\n  }\r\n}\r\n"]}