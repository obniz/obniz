{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/SHT31/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,EAAC,QAAQ,EAAC,MAAM,8CAA8C,CAAC;AACtE,OAAO,aAAa,MAAM,2CAA2C,CAAC;AACtE,OAAO,YAAY,MAAM,0CAA0C,CAAC;AACpE,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAC1F,OAAO,EAAC,uBAAuB,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,WAAW,YAAa,SAAQ,uBAAuB;IAC3D,GAAG,EAAE,MAAM,CAAC;IACZ,WAAW,EAAE,MAAM,CAAC;IACpB,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB;AAED,MAAM,CAAC,OAAO,OAAO,KAAM,YAAW,mBAAmB;WAEzC,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEZ,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;IACpC,MAAM,EAAG,YAAY,CAAC;IACtB,OAAO,EAAG,MAAM,CAAC;IAExB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAqCvB,KAAK,CAAC,KAAK,EAAE,KAAK;IAuBZ,OAAO;IAMP,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAI9B,YAAY,IAAI,OAAO,CAAC,MAAM,CAAC;IAI/B,UAAU,IAAI,OAAO,CAAC;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,CAAC;CAU9E","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\r\nimport {PullType} from \"../../../../obniz/libs/io_peripherals/common\";\r\nimport PeripheralI2C from \"../../../../obniz/libs/io_peripherals/i2c\";\r\nimport PeripheralIO from \"../../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../i2cParts\";\r\n\r\nexport interface SHT31Options extends I2cPartsAbstructOptions {\r\n  adr: number;\r\n  addressmode: number;\r\n  pull?: PullType;\r\n}\r\n\r\nexport default class SHT31 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"SHT31\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  public ioKeys: string[];\r\n  public commands: any;\r\n  public waitTime: { [key: string]: number };\r\n  public io_adr!: PeripheralIO;\r\n  public address!: number;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\r\n      \"vcc\",\r\n      \"sda\",\r\n      \"scl\",\r\n      \"gnd\",\r\n      \"adr\",\r\n      \"addressmode\",\r\n      \"i2c\",\r\n      \"pull\",\r\n      \"address\",\r\n    ];\r\n\r\n    this.ioKeys = [\"vcc\", \"sda\", \"scl\", \"gnd\", \"adr\"];\r\n    this.commands = {};\r\n    this.commands.softReset = [0x30, 0xa2];\r\n    this.commands.highRepeatStreach = [0x2c, 0x06];\r\n    this.commands.middleRepeatStreach = [0x2c, 0x0d];\r\n    this.commands.lowRepeatStreach = [0x2c, 0x10];\r\n    this.commands.highRepeat = [0x24, 0x00];\r\n    this.commands.mediumRepeat = [0x24, 0x0b];\r\n    this.commands.lowRepeat = [0x24, 0x16];\r\n\r\n    this.waitTime = {};\r\n    this.waitTime.wakeup = 1;\r\n    this.waitTime.softReset = 1;\r\n    this.waitTime.lowRepeat = 4;\r\n    this.waitTime.mediumRepeat = 6;\r\n    this.waitTime.highRepeat = 15;\r\n\r\n    // not tested\r\n    this.commands.readStatus = [0xf3, 0x2d];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\r\n    this.address = this.params.address || 0x44;\r\n\r\n    if (this.params.addressmode) {\r\n      this.io_adr = obniz.getIO(this.params.adr);\r\n      if (this.params.addressmode === 4) {\r\n        this.io_adr.output(false);\r\n        this.address = 0x44;\r\n      } else if (this.params.addressmode === 5) {\r\n        this.io_adr.pull(\"5v\");\r\n        this.address = 0x45;\r\n      }\r\n    }\r\n\r\n    this.params.clock = this.params.clock || 100 * 1000; // for i2c\r\n    this.params.mode = this.params.mode || \"master\"; // for i2c\r\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.i2c.write(this.address, this.commands.softReset);\r\n  }\r\n\r\n  public async getData() {\r\n    this.i2c.write(this.address, this.commands.highRepeat);\r\n    await this.obniz.wait(this.waitTime.highRepeat);\r\n    return await this.i2c.readWait(this.address, 6);\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    return (await this.getAllWait()).temperature;\r\n  }\r\n\r\n  public async getHumidWait(): Promise<number> {\r\n    return (await this.getAllWait()).humidity;\r\n  }\r\n\r\n  public async getAllWait(): Promise<{ temperature: number, humidity: number }> {\r\n    const ret = await this.getData();\r\n\r\n    const tempBin = ret[0] * 256 + ret[1];\r\n    const temperature = -45 + 175 * (tempBin / (65536 - 1));\r\n\r\n    const humdBin = ret[3] * 256 + ret[4];\r\n    const humidity = 100 * (humdBin / (65536 - 1));\r\n    return {temperature, humidity};\r\n  }\r\n}\r\n"]}