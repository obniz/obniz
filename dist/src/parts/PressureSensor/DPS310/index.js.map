{"version":3,"sources":["../src/parts/PressureSensor/DPS310/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface DPS310Options {\n}\n\nexport default class DPS310 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"DPS310\",\n      datasheet: \"\",\n    };\n  }\n\n  public requiredKeys: string[];\n  public keys: string[];\n  public ioKeys: string[];\n  private configration = {\n    DPS310__STD_SLAVE_ADDRESS: 0x77,\n  };\n\n  private DPS310__OSR_SE = 3;\n  private DPS310__LSB = 0x01;\n  private DPS310__PRS_STD_MR = 2;\n  private DPS310__PRS_STD_OSR = 3;\n  private DPS310__TEMP_STD_MR = 2;\n  private DPS310__TEMP_STD_OSR = 3;\n\n  private DPS310__SUCCEEDED = 0;\n  private DPS310__FAIL_UNKNOWN = -1;\n  private DPS310__FAIL_INIT_FAILED = -2;\n  private DPS310__FAIL_TOOBUSY = -3;\n  private DPS310__FAIL_UNFINISHED = -4;\n  private prsMr = 0;\n  private prsOsr = 0;\n  private tempMr = 0;\n  private tempOsr = 0;\n  private m_lastTempScal = 0;\n  private mode = {\n    IDLE: 0x00,\n    CMD_PRS: 0x01,\n    CMD_TEMP: 0x02,\n    INVAL_OP_CMD_BOTH: 0x03, // invalid\n    INVAL_OP_CONT_NONE: 0x04, // invalid\n    CONT_PRS: 0x05,\n    CONT_TMP: 0x06,\n    CONT_BOTH: 0x07,\n  };\n  private bitFileds = {\n    DPS310__REG_INFO_PROD_ID: {\n      address: 0x0d,\n      mask: 0x0f,\n      shift: 0,\n    },\n    DPS310__REG_INFO_REV_ID: {\n      address: 0x0d,\n      mask: 0xf0,\n      shift: 4,\n    },\n    DPS310__REG_INFO_TEMP_SENSORREC: {\n      address: 0x28,\n      mask: 0x80,\n      shift: 7,\n    },\n    DPS310__REG_INFO_TEMP_SENSOR: {\n      address: 0x07,\n      mask: 0x80,\n      shift: 7,\n    },\n    DPS310__REG_INFO_OPMODE: {\n      address: 0x08,\n      mask: 0x07,\n      shift: 0,\n    },\n    DPS310__REG_INFO_FIFO_FL: {\n      address: 0x0c,\n      mask: 0x80,\n      shift: 7,\n    },\n    DPS310__REG_INFO_FIFO_EN: {\n      address: 0x09,\n      mask: 0x02,\n      shift: 1,\n    },\n    DPS310__REG_INFO_TEMP_MR: {\n      address: 0x07,\n      mask: 0x70,\n      shift: 4,\n    },\n    DPS310__REG_INFO_TEMP_OSR: {\n      address: 0x07,\n      mask: 0x07,\n      shift: 0,\n    },\n    DPS310__REG_INFO_PRS_MR: {\n      address: 0x06,\n      mask: 0x70,\n      shift: 4,\n    },\n    DPS310__REG_INFO_PRS_OSR: {\n      address: 0x06,\n      mask: 0x07,\n      shift: 0,\n    },\n    DPS310__REG_INFO_PRS_SE: {\n      address: 0x09,\n      mask: 0x04,\n      shift: 2,\n    },\n    DPS310__REG_INFO_PRS_RDY: {\n      address: 0x08,\n      mask: 0x10,\n      shift: 4,\n    },\n    DPS310__REG_INFO_TEMP_SE: {\n      address: 0x09,\n      mask: 0x08,\n      shift: 3,\n    },\n    DPS310__REG_INFO_TEMP_RDY: {\n      address: 0x08,\n      mask: 0x20,\n      shift: 5,\n    },\n  };\n\n  private dataBlock = {\n    DPS310__REG_ADR_COEF: {\n      address: 0x10,\n      length: 18,\n    },\n    DPS310__REG_ADR_PRS: {\n      address: 0x00,\n      length: 3,\n    },\n    DPS310__REG_ADR_TEMP: {\n      address: 0x03,\n      length: 3,\n    },\n  };\n  private scaling_facts = [\n    524288,\n    1572864,\n    3670016,\n    7864320,\n    253952,\n    516096,\n    1040384,\n    2088960,\n  ];\n  private opMode: any;\n  private coeffs: any;\n  private obniz!: Obniz;\n  private address: any;\n  private params: any;\n  private i2c!: PeripheralI2C;\n\n  constructor() {\n    this.requiredKeys = [\"sda\", \"scl\"];\n    this.keys = [\"gpio3\", \"vcc\", \"gnd\", \"scl\", \"sda\"];\n    this.ioKeys = [\"gpio3\", \"vcc\", \"gnd\", \"scl\", \"sda\"];\n\n    this.coeffs = {};\n\n    this.opMode = this.mode.IDLE;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.address = 0x77;\n    this.params.sda = this.params.sda;\n    this.params.scl = this.params.scl;\n    this.params.clock = this.params.clock || 100 * 1000;\n    this.params.mode = \"master\";\n    this.params.pull = \"3v\";\n    this.i2c = obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(10);\n  }\n\n  public async initWait(): Promise<void> {\n    const prodId: any = await this.readByteBitfieldWait(\n      this.bitFileds.DPS310__REG_INFO_PROD_ID,\n    );\n    if (prodId !== 0) {\n      throw new Error(\"invalid prodId\");\n    }\n    await this.readByteBitfieldWait(this.bitFileds.DPS310__REG_INFO_REV_ID);\n\n    await this.readByteBitfieldWait(\n      this.bitFileds.DPS310__REG_INFO_TEMP_SENSORREC,\n    );\n\n    await this.writeByteBitfield(\n      this.bitFileds.DPS310__REG_INFO_TEMP_SENSOR,\n      0,\n    );\n\n    await this.readCoeffsWait();\n    await this.standbyWait();\n    await this.configTempWait(\n      this.DPS310__TEMP_STD_MR,\n      this.DPS310__TEMP_STD_OSR,\n    );\n    await this.configPressureWait(\n      this.DPS310__PRS_STD_MR,\n      this.DPS310__PRS_STD_OSR,\n    );\n    await this.standbyWait();\n    await this.measureTempOnceWait();\n    await this.standbyWait();\n    await this.correctTempWait();\n  }\n\n  public async measurePressureOnceWait(oversamplingRate: any) {\n    if (oversamplingRate === undefined) {\n      oversamplingRate = this.prsOsr;\n    }\n    await this.startMeasurePressureOnceWait(oversamplingRate);\n    await this.obniz.wait(100);\n    const ret: any = await this.getSingleResultWait();\n    return ret;\n  }\n\n  private async readByteWait(regAddress: any): Promise<number> {\n    this.i2c.write(this.address, [regAddress]);\n    await this.obniz.wait(1);\n    const results: number[] = await this.i2c.readWait(this.address, 1);\n    return results[0];\n  }\n\n  private async readByteBitfieldWait(field: any): Promise<number> {\n    const regAddress: any = field.address;\n    const mask: any = field.mask;\n    const shift: any = field.shift;\n    let ret: number = await this.readByteWait(regAddress);\n    if (ret < 0) {\n      return ret;\n    }\n    if (mask !== undefined) {\n      ret = ret & mask;\n    }\n    if (shift !== undefined) {\n      ret = ret >> shift;\n    }\n    return ret;\n  }\n\n  private async readBlockWait(datablock: any): Promise<number[]> {\n    const address: any = datablock.address;\n    const length: any = datablock.length;\n    await this.obniz.wait(1);\n    this.i2c.write(this.address, [address]);\n    const results: number[] = await this.i2c.readWait(this.address, length);\n    return results;\n  }\n\n  private async writeByteWait(regAddress: any, data: any, check?: any): Promise<void> {\n    this.i2c.write(this.address, [regAddress, data]);\n    if (check) {\n      if ((await this.readByteWait(regAddress)) !== data) {\n        throw new Error(\"DPS310 data write failed\");\n      }\n    }\n  }\n\n  private async writeByteBitfield(field: any, data: any, check?: any): Promise<void> {\n    const old: any = await this.readByteWait(field.address);\n    const sendData: any = (old & ~field.mask) | ((data << field.shift) & field.mask);\n\n    await this.writeByteWait(field.address, sendData, check);\n  }\n\n  private async setOpModeDetailWait(background: any, temperature: any, pressure: any): Promise<void> {\n    const opMode: any =\n      ((background & this.DPS310__LSB) << 2) |\n      ((temperature & this.DPS310__LSB) << 1) |\n      (pressure & this.DPS310__LSB);\n    return await this.setOpModeWait(opMode);\n  }\n\n  private async setOpModeWait(opMode: any): Promise<void> {\n    opMode &=\n      this.bitFileds.DPS310__REG_INFO_OPMODE.mask >>\n      this.bitFileds.DPS310__REG_INFO_OPMODE.shift;\n\n    await this.writeByteWait(\n      this.bitFileds.DPS310__REG_INFO_OPMODE.address,\n      opMode,\n    );\n    this.opMode = opMode;\n  }\n\n  private async standbyWait(): Promise<void> {\n    this.setOpModeWait(this.mode.IDLE);\n    await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_FIFO_FL, 1);\n    await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_FIFO_EN, 0);\n  }\n\n  private async configTempWait(tempMr: any, tempOsr: any): Promise<void> {\n    await this.writeByteBitfield(\n      this.bitFileds.DPS310__REG_INFO_TEMP_MR,\n      tempMr,\n    );\n    await this.writeByteBitfield(\n      this.bitFileds.DPS310__REG_INFO_TEMP_OSR,\n      tempOsr,\n    );\n\n    if (tempOsr > this.DPS310__OSR_SE) {\n      await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_TEMP_SE, 1);\n    } else {\n      await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_TEMP_SE, 0);\n    }\n\n    this.tempMr = tempMr;\n    this.tempOsr = tempOsr;\n  }\n\n  private async configPressureWait(prsMr: any, prsOsr: any): Promise<void> {\n    await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_PRS_MR, prsMr);\n    await this.writeByteBitfield(\n      this.bitFileds.DPS310__REG_INFO_PRS_OSR,\n      prsOsr,\n    );\n\n    if (prsOsr > this.DPS310__OSR_SE) {\n      await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_PRS_SE, 1);\n    } else {\n      await this.writeByteBitfield(this.bitFileds.DPS310__REG_INFO_PRS_SE, 0);\n    }\n    this.prsMr = prsMr;\n    this.prsOsr = prsOsr;\n  }\n\n  private async readCoeffsWait(): Promise<void> {\n    const buffer: any = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_COEF);\n\n    this.coeffs.m_c0Half = (buffer[0] << 4) | ((buffer[1] >> 4) & 0x0f);\n    if (this.coeffs.m_c0Half & (1 << 11)) {\n      this.coeffs.m_c0Half -= 1 << 12;\n    }\n    this.coeffs.m_c0Half = this.coeffs.m_c0Half / 2;\n\n    this.coeffs.m_c1 = ((buffer[1] & 0x0f) << 8) | buffer[2];\n    if (this.coeffs.m_c1 & (1 << 11)) {\n      this.coeffs.m_c1 -= 1 << 12;\n    }\n    this.coeffs.m_c00 =\n      (buffer[3] << 12) | (buffer[4] << 4) | ((buffer[5] >> 4) & 0x0f);\n    if (this.coeffs.m_c00 & (1 << 19)) {\n      this.coeffs.m_c00 -= 1 << 20;\n    }\n\n    this.coeffs.m_c10 =\n      ((buffer[5] & 0x0f) << 16) | (buffer[6] << 8) | buffer[7];\n    if (this.coeffs.m_c10 & (1 << 19)) {\n      this.coeffs.m_c10 -= 1 << 20;\n    }\n\n    this.coeffs.m_c01 = (buffer[8] << 8) | buffer[9];\n    if (this.coeffs.m_c01 & (1 << 15)) {\n      this.coeffs.m_c01 -= 1 << 16;\n    }\n\n    this.coeffs.m_c11 = (buffer[10] << 8) | buffer[11];\n    if (this.coeffs.m_c11 & (1 << 15)) {\n      this.coeffs.m_c11 -= 1 << 16;\n    }\n\n    this.coeffs.m_c20 = (buffer[12] << 8) | buffer[13];\n    if (this.coeffs.m_c20 & (1 << 15)) {\n      this.coeffs.m_c20 -= 1 << 16;\n    }\n\n    this.coeffs.m_c21 = (buffer[14] << 8) | buffer[15];\n    if (this.coeffs.m_c21 & (1 << 15)) {\n      this.coeffs.m_c21 -= 1 << 16;\n    }\n\n    this.coeffs.m_c30 = (buffer[16] << 8) | buffer[17];\n    if (this.coeffs.m_c30 & (1 << 15)) {\n      this.coeffs.m_c30 -= 1 << 16;\n    }\n  }\n\n  private async getSingleResultWait(): Promise<number> {\n    let rdy: any;\n    switch (this.opMode) {\n      case this.mode.CMD_TEMP:\n        rdy = await this.readByteBitfieldWait(\n          this.bitFileds.DPS310__REG_INFO_TEMP_RDY,\n        );\n        break;\n      case this.mode.CMD_PRS:\n        rdy = await this.readByteBitfieldWait(\n          this.bitFileds.DPS310__REG_INFO_PRS_RDY,\n        );\n        break;\n      default:\n        return this.DPS310__FAIL_TOOBUSY;\n    }\n\n    let oldMode: any;\n    switch (rdy) {\n      case this.DPS310__FAIL_UNKNOWN:\n        throw new Error(\"DPS310__FAIL_UNKNOWN\");\n      case 0:\n        return this.obniz.wait(10).then(() => {\n          return this.getSingleResultWait();\n        });\n      case 1:\n        oldMode = this.opMode;\n        this.opMode = this.mode.IDLE;\n        switch (oldMode) {\n          case this.mode.CMD_TEMP:\n            return await this.getTempWait();\n          case this.mode.CMD_PRS:\n            return await this.getPressureWait();\n          default:\n            throw new Error(\"DPS310__FAIL_UNKNOWN\");\n        }\n    }\n    throw new Error(\"DPS310__FAIL_UNKNOWN\");\n  }\n\n  private async startMeasureTempOnceWait(oversamplingRate: any): Promise<void> {\n    await this.configTempWait(0, oversamplingRate);\n    await this.setOpModeDetailWait(0, 1, 0);\n  }\n\n  private async startMeasurePressureOnceWait(oversamplingRate: any): Promise<void> {\n    await this.configPressureWait(0, oversamplingRate);\n    await this.setOpModeDetailWait(0, 0, 1);\n  }\n\n  private calcPressure(raw: any): number {\n    let prs: any = raw;\n    prs /= this.scaling_facts[this.prsOsr];\n    prs =\n      this.coeffs.m_c00 +\n      prs *\n      (this.coeffs.m_c10 +\n        prs * (this.coeffs.m_c20 + prs * this.coeffs.m_c30)) +\n      this.m_lastTempScal *\n      (this.coeffs.m_c01 +\n        prs * (this.coeffs.m_c11 + prs * this.coeffs.m_c21));\n    return prs;\n  }\n\n  private calcTemp(raw: any): number {\n    let temp: any = raw;\n    temp /= this.scaling_facts[this.tempOsr];\n    this.m_lastTempScal = temp;\n    temp = this.coeffs.m_c0Half + this.coeffs.m_c1 * temp;\n    return temp;\n  }\n\n  private async correctTempWait(): Promise<void> {\n    this.writeByteWait(0x0e, 0xe5);\n    this.writeByteWait(0x0f, 0x96);\n    this.writeByteWait(0x62, 0x02);\n    this.writeByteWait(0x0e, 0x00);\n    this.writeByteWait(0x0f, 0x00);\n\n    await this.measureTempOnceWait();\n  }\n\n  private async measureTempOnceWait(oversamplingRate?: any): Promise<number> {\n    if (oversamplingRate === undefined) {\n      oversamplingRate = this.tempOsr;\n    }\n    await this.startMeasureTempOnceWait(oversamplingRate);\n    await this.obniz.wait(100);\n    return await this.getSingleResultWait();\n  }\n\n  private async getTempWait(): Promise<number> {\n    const data: any = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_TEMP);\n\n    let temp: any = (data[0] << 16) | (data[1] << 8) | data[2];\n    if (temp & (1 << 23)) {\n      temp -= 1 << 24;\n    }\n    return this.calcTemp(temp);\n  }\n\n  private async getPressureWait(): Promise<number> {\n    const data: any = await this.readBlockWait(this.dataBlock.DPS310__REG_ADR_PRS);\n    let prs: any = (data[0] << 16) | (data[1] << 8) | data[2];\n    if (prs & (1 << 23)) {\n      prs -= 1 << 24;\n    }\n    return this.calcPressure(prs);\n  }\n}\n"]}