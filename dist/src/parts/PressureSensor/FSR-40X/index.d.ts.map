{"version":3,"sources":["../src/parts/PressureSensor/FSR-40X/index.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAInC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,QAAQ,SAAK;IACb,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAEzC,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,MAAM,CAAgB;IAC9B,OAAO,CAAC,EAAE,CAAgB;;IAOnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAkBZ,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;CAMxC","file":"index.d.ts","sourcesContent":["// Todo: add weight and calc pressure(kg)\r\n\r\nimport Obniz from \"../../../obniz\";\r\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\n\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface FSR40XOptions {\r\n  pin0: number;\r\n  pin1: number;\r\n}\r\n\r\nexport default class FSR40X implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"FSR40X\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public params: any;\r\n\r\n  public pressure = 0;\r\n  public onchange?: (temp: number) => void;\r\n\r\n  protected obniz!: Obniz;\r\n\r\n  private io_pwr!: PeripheralIO;\r\n  private ad!: PeripheralAD;\r\n\r\n  constructor() {\r\n    this.keys = [\"pin0\", \"pin1\"];\r\n    this.requiredKeys = [\"pin0\", \"pin1\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.io_pwr = obniz.getIO(this.params.pin0);\r\n    this.ad = obniz.getAD(this.params.pin1);\r\n\r\n    this.io_pwr.drive(\"5v\");\r\n    this.io_pwr.output(true);\r\n\r\n    this.ad.start((value: number) => {\r\n      const pressure: any = value * 100;\r\n      this.pressure = pressure;\r\n      if (this.onchange) {\r\n        this.onchange(this.pressure);\r\n      }\r\n    });\r\n  }\r\n\r\n  public async getWait(): Promise<number> {\r\n    const value = await this.ad.getWait();\r\n    const pressure = value * 100;\r\n    this.pressure = pressure;\r\n    return this.pressure;\r\n  }\r\n}\r\n"]}