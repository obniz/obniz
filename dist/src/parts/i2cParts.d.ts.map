{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,UAAU,CAAC;AAC7B,OAAO,EAAC,QAAQ,EAAC,MAAM,qCAAqC,CAAC;AAC7D,OAAO,aAAa,MAAM,kCAAkC,CAAC;AAC7D,OAAO,mBAAqC,MAAM,8BAA8B,CAAC;AAEjF,MAAM,WAAW,uBAAuB;IACtC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,QAAQ,CAAC;IAChB,KAAK,EAAE,MAAM,CAAC;IACd,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,gBAAiB,YAAW,mBAAmB;IAC3D,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAUvB,OAAO;;;;;IAWP,KAAK,CAAC,KAAK,EAAE,KAAK;IAWlB,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAQ/B,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAUlE,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAMpC","file":"i2cParts.d.ts","sourcesContent":["import Obniz from \"../obniz\";\nimport {PullType} from \"../obniz/libs/io_peripherals/common\";\nimport PeripheralI2C from \"../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../obniz/ObnizPartsInterface\";\n\nexport interface I2cPartsAbstructOptions {\n  vcc?: number;\n  gnd?: number;\n  sda?: number;\n  scl?: number;\n  pull?: PullType;\n  clock: number;\n  i2c?: PeripheralI2C;\n}\n\nexport default class I2cPartsAbstruct implements ObnizPartsInterface {\n  public keys: string[];\n  public requiredKeys: string[];\n  public i2cinfo: any;\n  public address: any;\n  public params: any;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"vcc\"];\n    this.requiredKeys = [];\n\n    this.i2cinfo = this.i2cInfo();\n    this.address = this.i2cinfo.address;\n  }\n\n  public i2cInfo() {\n    throw new Error(\"abstruct class\");\n\n    // eslint-disable-next-line no-unreachable\n    return {\n      address: 0x00,\n      clock: 100000,\n      voltage: \"3v\",\n    };\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.i2cinfo.voltage);\n    this.params.clock = this.i2cinfo.clock;\n    this.params.pull = this.i2cinfo.voltage;\n    this.params.mode = \"master\";\n    // @ts-ignore\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n  }\n\n  public char2short(val1: number, val2: number) {\n    const buffer: any = new ArrayBuffer(2);\n    const dv: any = new DataView(buffer);\n    dv.setUint8(0, val1);\n    dv.setUint8(1, val2);\n    return dv.getInt16(0, false);\n  }\n\n  public async readWait(command: number, length: number): Promise<number[]> {\n    this.i2c.write(this.address, [command]);\n    return await this.i2c.readWait(this.address, length);\n  }\n\n  // public async readUint16Wait(command: number, length: number): Promise<number[]> {\n  //   this.i2c.write(this.address, [command]);\n  //   return await this.i2c.readWait(this.address, length);\n  // }\n\n  public write(command: any, buf: any) {\n    if (!Array.isArray(buf)) {\n      buf = [buf];\n    }\n    this.i2c.write(this.address, [command, ...buf]);\n  }\n}\n"]}