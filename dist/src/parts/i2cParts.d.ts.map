{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,UAAU,CAAC;AAC7B,OAAO,EAAC,QAAQ,EAAC,MAAM,qCAAqC,CAAC;AAC7D,OAAO,aAAa,MAAM,kCAAkC,CAAC;AAC7D,OAAO,mBAAqC,MAAM,8BAA8B,CAAC;AAEjF,MAAM,WAAW,uBAAuB;IACtC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,QAAQ,CAAC;IAChB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,aAAa,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,gBAAiB,YAAW,mBAAmB;IAC3D,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAUvB,OAAO;;;;;IAWP,KAAK,CAAC,KAAK,EAAE,KAAK;IAWlB,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAQ/B,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAUlE,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAMpC","file":"i2cParts.d.ts","sourcesContent":["import Obniz from \"../obniz\";\r\nimport {PullType} from \"../obniz/libs/io_peripherals/common\";\r\nimport PeripheralI2C from \"../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../obniz/ObnizPartsInterface\";\r\n\r\nexport interface I2cPartsAbstructOptions {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  sda?: number;\r\n  scl?: number;\r\n  pull?: PullType;\r\n  clock?: number;\r\n  i2c?: PeripheralI2C;\r\n}\r\n\r\nexport default class I2cPartsAbstruct implements ObnizPartsInterface {\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public i2cinfo: any;\r\n  public address: any;\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"vcc\"];\r\n    this.requiredKeys = [];\r\n\r\n    this.i2cinfo = this.i2cInfo();\r\n    this.address = this.i2cinfo.address;\r\n  }\r\n\r\n  public i2cInfo() {\r\n    throw new Error(\"abstruct class\");\r\n\r\n    // eslint-disable-next-line no-unreachable\r\n    return {\r\n      address: 0x00,\r\n      clock: 100000,\r\n      voltage: \"3v\",\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.i2cinfo.voltage);\r\n    this.params.clock = this.i2cinfo.clock;\r\n    this.params.pull = this.i2cinfo.voltage;\r\n    this.params.mode = \"master\";\r\n    // @ts-ignore\r\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public char2short(val1: number, val2: number) {\r\n    const buffer: any = new ArrayBuffer(2);\r\n    const dv: any = new DataView(buffer);\r\n    dv.setUint8(0, val1);\r\n    dv.setUint8(1, val2);\r\n    return dv.getInt16(0, false);\r\n  }\r\n\r\n  public async readWait(command: number, length: number): Promise<number[]> {\r\n    this.i2c.write(this.address, [command]);\r\n    return await this.i2c.readWait(this.address, length);\r\n  }\r\n\r\n  // public async readUint16Wait(command: number, length: number): Promise<number[]> {\r\n  //   this.i2c.write(this.address, [command]);\r\n  //   return await this.i2c.readWait(this.address, length);\r\n  // }\r\n\r\n  public write(command: any, buf: any) {\r\n    if (!Array.isArray(buf)) {\r\n      buf = [buf];\r\n    }\r\n    this.i2c.write(this.address, [command, ...buf]);\r\n  }\r\n}\r\n"]}