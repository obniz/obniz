{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":";;;;;;;;;;;AAeA,MAAqB,gBAAgB;IAUnC;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IACtC,CAAC;IAEM,OAAO;QACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAElC,0CAA0C;QAC1C,OAAO;YACL,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,IAAI;SACd,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,aAAa;QACb,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAEM,UAAU,CAAC,IAAY,EAAE,IAAY;QAC1C,MAAM,MAAM,GAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,EAAE,GAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;QACrC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACrB,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACrB,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEY,QAAQ,CAAC,OAAe,EAAE,MAAc;;YACnD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YACxC,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC;KAAA;IAED,oFAAoF;IACpF,6CAA6C;IAC7C,0DAA0D;IAC1D,IAAI;IAEG,KAAK,CAAC,OAAY,EAAE,GAAQ;QACjC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACb;QACD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;CACF;AAhED,mCAgEC","file":"i2cParts.js","sourcesContent":["import Obniz from \"../obniz\";\r\nimport {PullType} from \"../obniz/libs/io_peripherals/common\";\r\nimport PeripheralI2C from \"../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../obniz/ObnizPartsInterface\";\r\n\r\nexport interface I2cPartsAbstructOptions {\r\n  vcc?: number;\r\n  gnd?: number;\r\n  sda?: number;\r\n  scl?: number;\r\n  pull?: PullType;\r\n  clock?: number;\r\n  i2c?: PeripheralI2C;\r\n}\r\n\r\nexport default class I2cPartsAbstruct implements ObnizPartsInterface {\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public i2cinfo: any;\r\n  public address: any;\r\n  public params: any;\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"vcc\"];\r\n    this.requiredKeys = [];\r\n\r\n    this.i2cinfo = this.i2cInfo();\r\n    this.address = this.i2cinfo.address;\r\n  }\r\n\r\n  public i2cInfo() {\r\n    throw new Error(\"abstruct class\");\r\n\r\n    // eslint-disable-next-line no-unreachable\r\n    return {\r\n      address: 0x00,\r\n      clock: 100000,\r\n      voltage: \"3v\",\r\n    };\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.i2cinfo.voltage);\r\n    this.params.clock = this.i2cinfo.clock;\r\n    this.params.pull = this.i2cinfo.voltage;\r\n    this.params.mode = \"master\";\r\n    // @ts-ignore\r\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  public char2short(val1: number, val2: number) {\r\n    const buffer: any = new ArrayBuffer(2);\r\n    const dv: any = new DataView(buffer);\r\n    dv.setUint8(0, val1);\r\n    dv.setUint8(1, val2);\r\n    return dv.getInt16(0, false);\r\n  }\r\n\r\n  public async readWait(command: number, length: number): Promise<number[]> {\r\n    this.i2c.write(this.address, [command]);\r\n    return await this.i2c.readWait(this.address, length);\r\n  }\r\n\r\n  // public async readUint16Wait(command: number, length: number): Promise<number[]> {\r\n  //   this.i2c.write(this.address, [command]);\r\n  //   return await this.i2c.readWait(this.address, length);\r\n  // }\r\n\r\n  public write(command: any, buf: any) {\r\n    if (!Array.isArray(buf)) {\r\n      buf = [buf];\r\n    }\r\n    this.i2c.write(this.address, [command, ...buf]);\r\n  }\r\n}\r\n"]}