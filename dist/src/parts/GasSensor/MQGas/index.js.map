{"version":3,"sources":["../src/parts/GasSensor/MQGas/index.ts"],"names":[],"mappings":";;AAYA,MAAqB,WAAW;IAqB9B;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,sBAAsB;QACtB,uBAAuB;IACzB,CAAC;IAzBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAuBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAE3B,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACxC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAY,EAAE,EAAE;gBAC7B,mCAAmC;gBACnC,IAAI,OAAO,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;oBAC7C,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBAC9B;gBACD,IACE,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ;oBACrC,IAAI,CAAC,YAAY,IAAI,OAAO;oBAC5B,OAAO,IAAI,CAAC,eAAe,KAAK,UAAU,EAC1C;oBACA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;iBAC/B;YACH,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACxC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,OAAO,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE;oBAC9C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,YAAY;QACjB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,QAAQ,CAAC,OAAY;QAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,OAAO,GAAG,CAAC,EAAE;YACf,OAAO,IAAI,IAAI,CAAC;SACjB;aAAM;YACL,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;YAClC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;CAgBF;AA5FD,8BA4FC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface MQGasSensorOptions {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  do?: number;\r\n  ao?: number;\r\n}\r\n\r\nexport default class MQGasSensor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"MQGas\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public onchangeanalog?: (voltage: number) => void;\r\n  public onexceedvoltage?: (voltage: number) => void;\r\n  public onchangedigital?: (voltage: number) => void;\r\n  public voltageLimit?: number;\r\n  public params: any;\r\n  protected obniz!: Obniz;\r\n  private vcc!: number;\r\n  private gnd!: number;\r\n  private ad!: PeripheralAD;\r\n  private do!: PeripheralIO;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"do\", \"ao\"];\r\n    this.requiredKeys = [];\r\n\r\n    // this.RL = 2 * 1000;\r\n    // this.RO = 20 * 1000;\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.vcc = this.params.vcc;\r\n    this.gnd = this.params.gnd;\r\n\r\n    if (this.obniz.isValidIO(this.params.ao)) {\r\n      this.ad = obniz.getAD(this.params.ao);\r\n      this.ad.start((voltage: any) => {\r\n        // this.level = this.calc(voltage);\r\n        if (typeof this.onchangeanalog === \"function\") {\r\n          this.onchangeanalog(voltage);\r\n        }\r\n        if (\r\n          typeof this.voltageLimit === \"number\" &&\r\n          this.voltageLimit <= voltage &&\r\n          typeof this.onexceedvoltage === \"function\"\r\n        ) {\r\n          this.onexceedvoltage(voltage);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.obniz.isValidIO(this.params.do)) {\r\n      this.do = obniz.getIO(this.params.do);\r\n      this.do.input((value: any) => {\r\n        if (typeof this.onchangedigital === \"function\") {\r\n          this.onchangedigital(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public startHeating() {\r\n    this.obniz.setVccGnd(this.vcc, this.gnd, \"5v\");\r\n  }\r\n\r\n  public heatWait(seconds: any) {\r\n    this.startHeating();\r\n    if (seconds > 0) {\r\n      seconds *= 1000;\r\n    } else {\r\n      seconds = 2 * 60 * 1000;\r\n    }\r\n    return new Promise((resolve: any) => {\r\n      setTimeout(resolve, seconds);\r\n    });\r\n  }\r\n\r\n  // Rs/Ro will descrease by insease of gas.\r\n  // Rs = resitance 20k-100k. Ro = resistance of 1000ppm LPG\r\n  // If RL =\r\n\r\n  // calc(voltage) {\r\n\r\n  //   if (voltage ===0) {\r\n  //     voltage = 0.000001\r\n  //   }\r\n  //   const RS = this.RL / voltage * 5.0\r\n  //   const ratio = RS / this.RO;\r\n\r\n  //   return voltage;\r\n  // }\r\n}\r\n"]}