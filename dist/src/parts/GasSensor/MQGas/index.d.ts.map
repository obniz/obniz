{"version":3,"sources":["../src/parts/GasSensor/MQGas/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,kBAAkB;IACjC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,EAAE,CAAC,EAAE,MAAM,CAAC;CACb;AAED,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAE/C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC3C,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC5C,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC5C,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,MAAM,EAAE,GAAG,CAAC;IACnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,EAAE,CAAgB;IAC1B,OAAO,CAAC,EAAE,CAAgB;;IAUnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAiClB,YAAY;IAIZ,QAAQ,CAAC,OAAO,EAAE,GAAG;CA0B7B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface MQGasSensorOptions {\n  gnd?: number;\n  vcc?: number;\n  do?: number;\n  ao?: number;\n}\n\nexport default class MQGasSensor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MQGas\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public onchangeanalog?: (voltage: number) => void;\n  public onexceedvoltage?: (voltage: number) => void;\n  public onchangedigital?: (voltage: number) => void;\n  public voltageLimit?: number;\n  public params: any;\n  protected obniz!: Obniz;\n  private vcc!: number;\n  private gnd!: number;\n  private ad!: PeripheralAD;\n  private do!: PeripheralIO;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"do\", \"ao\"];\n    this.requiredKeys = [];\n\n    // this.RL = 2 * 1000;\n    // this.RO = 20 * 1000;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.vcc = this.params.vcc;\n    this.gnd = this.params.gnd;\n\n    if (this.obniz.isValidIO(this.params.ao)) {\n      this.ad = obniz.getAD(this.params.ao);\n      this.ad.start((voltage: any) => {\n        // this.level = this.calc(voltage);\n        if (typeof this.onchangeanalog === \"function\") {\n          this.onchangeanalog(voltage);\n        }\n        if (\n          typeof this.voltageLimit === \"number\" &&\n          this.voltageLimit <= voltage &&\n          typeof this.onexceedvoltage === \"function\"\n        ) {\n          this.onexceedvoltage(voltage);\n        }\n      });\n    }\n\n    if (this.obniz.isValidIO(this.params.do)) {\n      this.do = obniz.getIO(this.params.do);\n      this.do.input((value: any) => {\n        if (typeof this.onchangedigital === \"function\") {\n          this.onchangedigital(value);\n        }\n      });\n    }\n  }\n\n  public startHeating() {\n    this.obniz.setVccGnd(this.vcc, this.gnd, \"5v\");\n  }\n\n  public heatWait(seconds: any) {\n    this.startHeating();\n    if (seconds > 0) {\n      seconds *= 1000;\n    } else {\n      seconds = 2 * 60 * 1000;\n    }\n    return new Promise((resolve: any) => {\n      setTimeout(resolve, seconds);\n    });\n  }\n\n  // Rs/Ro will descrease by insease of gas.\n  // Rs = resitance 20k-100k. Ro = resistance of 1000ppm LPG\n  // If RL =\n\n  // calc(voltage) {\n\n  //   if (voltage ===0) {\n  //     voltage = 0.000001\n  //   }\n  //   const RS = this.RL / voltage * 5.0\n  //   const ratio = RS / this.RO;\n\n  //   return voltage;\n  // }\n}\n"]}