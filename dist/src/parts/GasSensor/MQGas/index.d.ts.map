{"version":3,"sources":["../src/parts/GasSensor/MQGas/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAGnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,kBAAkB;IACjC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,EAAE,CAAC,EAAE,MAAM,CAAC;CACb;AAED,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAE/C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC3C,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC5C,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;IAC5C,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,MAAM,EAAE,GAAG,CAAC;IACnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,EAAE,CAAgB;IAC1B,OAAO,CAAC,EAAE,CAAgB;;IAUnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAiClB,YAAY;IAIZ,QAAQ,CAAC,OAAO,EAAE,GAAG;CA0B7B","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\r\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\n\r\nexport interface MQGasSensorOptions {\r\n  gnd?: number;\r\n  vcc?: number;\r\n  do?: number;\r\n  ao?: number;\r\n}\r\n\r\nexport default class MQGasSensor implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"MQGas\",\r\n    };\r\n  }\r\n\r\n  public keys: string[];\r\n  public requiredKeys: string[];\r\n  public onchangeanalog?: (voltage: number) => void;\r\n  public onexceedvoltage?: (voltage: number) => void;\r\n  public onchangedigital?: (voltage: number) => void;\r\n  public voltageLimit?: number;\r\n  public params: any;\r\n  protected obniz!: Obniz;\r\n  private vcc!: number;\r\n  private gnd!: number;\r\n  private ad!: PeripheralAD;\r\n  private do!: PeripheralIO;\r\n\r\n  constructor() {\r\n    this.keys = [\"gnd\", \"vcc\", \"do\", \"ao\"];\r\n    this.requiredKeys = [];\r\n\r\n    // this.RL = 2 * 1000;\r\n    // this.RO = 20 * 1000;\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    this.vcc = this.params.vcc;\r\n    this.gnd = this.params.gnd;\r\n\r\n    if (this.obniz.isValidIO(this.params.ao)) {\r\n      this.ad = obniz.getAD(this.params.ao);\r\n      this.ad.start((voltage: any) => {\r\n        // this.level = this.calc(voltage);\r\n        if (typeof this.onchangeanalog === \"function\") {\r\n          this.onchangeanalog(voltage);\r\n        }\r\n        if (\r\n          typeof this.voltageLimit === \"number\" &&\r\n          this.voltageLimit <= voltage &&\r\n          typeof this.onexceedvoltage === \"function\"\r\n        ) {\r\n          this.onexceedvoltage(voltage);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.obniz.isValidIO(this.params.do)) {\r\n      this.do = obniz.getIO(this.params.do);\r\n      this.do.input((value: any) => {\r\n        if (typeof this.onchangedigital === \"function\") {\r\n          this.onchangedigital(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public startHeating() {\r\n    this.obniz.setVccGnd(this.vcc, this.gnd, \"5v\");\r\n  }\r\n\r\n  public heatWait(seconds: any) {\r\n    this.startHeating();\r\n    if (seconds > 0) {\r\n      seconds *= 1000;\r\n    } else {\r\n      seconds = 2 * 60 * 1000;\r\n    }\r\n    return new Promise((resolve: any) => {\r\n      setTimeout(resolve, seconds);\r\n    });\r\n  }\r\n\r\n  // Rs/Ro will descrease by insease of gas.\r\n  // Rs = resitance 20k-100k. Ro = resistance of 1000ppm LPG\r\n  // If RL =\r\n\r\n  // calc(voltage) {\r\n\r\n  //   if (voltage ===0) {\r\n  //     voltage = 0.000001\r\n  //   }\r\n  //   const RS = this.RL / voltage * 5.0\r\n  //   const ratio = RS / this.RO;\r\n\r\n  //   return voltage;\r\n  // }\r\n}\r\n"]}