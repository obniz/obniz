{"version":3,"sources":["../src/parts/Power/AXP192/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AACvF,OAAO,EAAC,uBAAuB,EAAC,MAAM,yBAAyB,CAAC;AAEhE,MAAM,WAAW,aAAc,SAAQ,uBAAuB;CAAI;AAElE,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,mBAAmB;WAE1C,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;;IAOZ,KAAK,CAAC,KAAK,EAAE,KAAK;IAOlB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAI3B,OAAO,CAAC,OAAO,EAAE,MAAM;IAKvB,cAAc,CAAC,OAAO,EAAE,MAAM;IAiB9B,cAAc,CAAC,OAAO,EAAE,MAAM;IAgBpC,WAAW;IAIX,YAAY;IAIN,UAAU,CAAC,GAAG,EAAE,MAAM;IAOtB,UAAU,CAAC,GAAG,EAAE,MAAM;IAO5B,YAAY;IAcN,OAAO;CAOrB","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\r\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\r\nimport {I2cPartsAbstructOptions} from \"../../../parts/i2cParts\";\r\n\r\nexport interface AXP192Options extends I2cPartsAbstructOptions { }\r\n\r\nexport default class AXP192 implements ObnizPartsInterface {\r\n\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"AXP192\",\r\n    };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  protected i2c: any;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\"sda\", \"scl\", \"i2c\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.params.mode = \"master\"; // for i2c\r\n    this.params.clock = 400 * 1000; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n  }\r\n\r\n  // Module functions\r\n  public set(address: number, data: number) {\r\n    this.i2c.write(AXP192_ADDRESS, [address, data]);\r\n  }\r\n\r\n  public async getWait(address: number) {\r\n    this.i2c.write(AXP192_ADDRESS, [address]);\r\n    return await this.i2c.readWait(AXP192_ADDRESS, 1);\r\n  }\r\n\r\n  public async setLDO2Voltage(voltage: number) {\r\n    if (voltage < 1.8) {\r\n      voltage = 1.8;\r\n    }\r\n    if (voltage > 3.3) {\r\n      voltage = 3.3;\r\n    }\r\n    let set = await this.getWait(REG_VOLT_SET_LDO2_3);\r\n    let offset = (voltage - 1.8) * 10;\r\n    if (offset > 15) {\r\n      offset = 15;\r\n    }\r\n    set = (set & 0x0f) | (offset << 4);\r\n    console.log(\"set voltage to \", set);\r\n    this.set(REG_VOLT_SET_LDO2_3, set);\r\n  }\r\n\r\n  public async setLDO3Voltage(voltage: number) {\r\n    if (voltage < 1.8) {\r\n      voltage = 1.8;\r\n    }\r\n    if (voltage > 3.3) {\r\n      voltage = 3.3;\r\n    }\r\n    let set = await this.getWait(REG_VOLT_SET_LDO2_3);\r\n    let offset = (voltage - 1.8) * 10;\r\n    if (offset > 15) {\r\n      offset = 15;\r\n    }\r\n    set = (set & 0xf0) | offset;\r\n    this.set(REG_VOLT_SET_LDO2_3, set);\r\n  }\r\n\r\n  public set3VLDO2_3() {\r\n    this.set(REG_VOLT_SET_LDO2_3, 0xcc);\r\n  }\r\n\r\n  public enableLDO2_3() {\r\n    this.set(REG_EN_DC1_LDO2_3, 0x4d);\r\n  }\r\n\r\n  public async toggleLDO2(val: number) {\r\n    const bit = val ? 1 : 0;\r\n    let state = await this.getWait(REG_EN_DC1_LDO2_3);\r\n    state = (state & LDO2_EN_MASK) | (bit << 2);\r\n    this.set(REG_EN_DC1_LDO2_3, state);\r\n  }\r\n\r\n  public async toggleLDO3(val: number) {\r\n    const bit = val ? 1 : 0;\r\n    let state = await this.getWait(REG_EN_DC1_LDO2_3);\r\n    state = (state & LDO3_EN_MASK) | (bit << 3);\r\n    this.set(REG_EN_DC1_LDO2_3, state);\r\n  }\r\n\r\n  public initM5StickC() {\r\n    this.i2c.write(AXP192_ADDRESS, [REG_EN_EXT_DC2, 0xff]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_VOLT_SET_LDO2_3, 0xcc]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_ADC_EN1, 0xff]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_CTRL1, 0xc0]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_CCOUNTER, 0x80]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_EN_DC1_LDO2_3, 0x4d]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_PEK, 0x0c]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_GPIO0, 0x02]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_VBUS_IPSOUT, 0xe0]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_OVTEMP, 0xfc]);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_BCKUP_BAT, 0xa2]);\r\n  }\r\n\r\n  public async getVbat() {\r\n    this.i2c.write(AXP192_ADDRESS, [REG_VBAT_LSB]);\r\n    const vbat_lsb: any = await this.i2c.readWait(AXP192_ADDRESS, 1);\r\n    this.i2c.write(AXP192_ADDRESS, [REG_VBAT_MSB]);\r\n    const vbat_msb: any = await this.i2c.readWait(AXP192_ADDRESS, 1);\r\n    return (vbat_lsb << 4) + vbat_msb;\r\n  }\r\n}\r\n\r\nconst AXP192_ADDRESS: any = 0x34;\r\n\r\nconst REG_EN_EXT_DC2: any = 0x10;\r\nconst REG_EN_DC1_LDO2_3: any = 0x12;\r\nconst REG_VOLT_SET_LDO2_3: any = 0x28;\r\nconst REG_VBUS_IPSOUT: any = 0x30;\r\nconst REG_CHARGE_CTRL1: any = 0x33;\r\nconst REG_BCKUP_BAT: any = 0x35;\r\nconst REG_PEK: any = 0x36;\r\nconst REG_CHARGE_OVTEMP: any = 0x39;\r\nconst REG_VBAT_LSB: any = 0x78;\r\nconst REG_VBAT_MSB: any = 0x79;\r\nconst REG_ADC_EN1: any = 0x82;\r\nconst REG_GPIO0: any = 0x90;\r\nconst REG_CCOUNTER: any = 0xb8;\r\n\r\nconst LDO2_EN_MASK: any = 0xfb;\r\nconst LDO3_EN_MASK: any = 0xf7;\r\n"]}